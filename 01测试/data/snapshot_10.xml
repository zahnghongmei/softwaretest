<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="10">
  <HTTPTask id="432" hostname="ts.helper.2345.cc" path="/tray/index.php" url="http://ts.helper.2345.cc/tray/index.php" ip="117.121.132.243" port="80" connectionId="28" origin="Primary" frame="1" startTime="2969296" endTime="2969375">
    <HTTPRequest method="POST">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Host" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dHMuaGVscGVyLjIzNDUuY2M=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>NDgx</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Pragma" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-Control" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVk</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>UE9TVCAvdHJheS9pbmRleC5waHAgSFRUUC8xLjENCkhvc3Q6IHRzLmhlbHBlci4yMzQ1LmNjDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpDb250ZW50LUxlbmd0aDogNDgxDQpQcmFnbWE6IG5vLWNhY2hlDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNTYuMC4yOTI0LjkwIFNhZmFyaS81MzcuMzYgMjM0NUV4cGxvcmVyLzkuNi4wLjE4NjI3DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdC1MYW5ndWFnZTogemgtQ04semg7cT0wLjgNCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>cG9zdGRhdGE9U2tRRkNWaGJEMVVJUEZ3QUZRTVZCd01GQkZ4UVFCd2JBbDBJYlJOUVFCZFlDUWhEQXhkWUhsSk5CVW9HQVFFQUJCWWJSd1FhVldZUVZCWkJERnBjUmd0RVgwOFBHMUVlVlZzRFZnQWJHeEJhV2tRUkFBNWNaZ0pRSFVGSER3SklFdzBUQ0YwWFd4SkdUeGNJVmtwRGJWcFRXUW9UQjI5WUNsMDdYd0JHUVFWV0F4VSUyNTJCVFZ3TVZVWlpCVWdWVlZaQlIydEhDaEVYUUdZU1dBbFhSdzhDU0JNS0NRSllXVDVURVJGSEFWbE5hRVphV1ZKSFcxTUZERklKWEFwVkFnSklFd3NERWtwVUJsVTdDMXdYUTFaRlN4RU9UQmhOUUVCTENWSUJRUlpxV3dwWENVUmJHd1ZSQUZSVEJGUUhDUWNDQXdRSFZWRlNBQWxXQVZRQ1ZRVUNWQUZXVmxBSkJVTWNSaEJCQlVWTlFrSnNRRjRJQkVBS0NGTUVVQXBkRFFKVkFVcEVGRmRjRGw0N0NsRkdEUnNFQ3dZSEJVZE5RRVZNRDFWR0NFZDNCU1p5SWlKVENRRlpCaUpXQWwwR2V3WUFkM0Z4SkNRakJnc2dDQ0FGSmhkUA==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
    </HTTPRequest>
    <HTTPResponse>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Date" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>V2VkLCAxMCBBcHIgMjAxOSAwOToyMToxMSBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9odG1sOyBjaGFyc2V0PVVURi04</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Transfer-Encoding" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Y2h1bmtlZA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Vary" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Encoding" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIE9LDQpEYXRlOiBXZWQsIDEwIEFwciAyMDE5IDA5OjIxOjExIEdNVA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLTgNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkNvbnRlbnQtRW5jb2Rpbmc6IGd6aXANCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>U2tRTEJFcEdBRmNCRUJkZWJHUWJFRUZSUmhBRUVVUm1EMThRVnhkRFV3Z1RYRllj</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="2969343" offset="0" length="274" />
      </TcpPackets>
    </HTTPResponse>
    <HTTPTask id="463" hostname="webim.easemob.com" path="/sdk/dist/strophe-1.2.8.min.js" url="https://webim.easemob.com/sdk/dist/strophe-1.2.8.min.js" ip="211.154.222.187" port="443" connectionId="22" origin="HTML" frame="1" startTime="2985109" endTime="2985171">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>d2ViaW0uZWFzZW1vYi5jb20=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24v</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZSwgYnI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zZGsvZGlzdC9zdHJvcGhlLTEuMi44Lm1pbi5qcyBIVFRQLzEuMQ0KSG9zdDogd2ViaW0uZWFzZW1vYi5jb20NCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNTYuMC4yOTI0LjkwIFNhZmFyaS81MzcuMzYgMjM0NUV4cGxvcmVyLzkuNi4wLjE4NjI3DQpBY2NlcHQ6ICovKg0KUmVmZXJlcjogaHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24vDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQtTGFuZ3VhZ2U6IHpoLUNOLHpoO3E9MC44DQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Server" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWxpeXVuT1NT</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAxMCBBcHIgMjAxOSAwOToyMToyNiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9qYXZhc2NyaXB0OyBjaGFyc2V0PXV0Zi04</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NTQyNDE=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-oss-request-id" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NUNBREI1OTY3OTRBOTIyRENCRTlFQjE4</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IkZGRDFGRjQ3RUVGMDIwMUFDMjM2MjdCNUIxQTA5REI2Ig==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxOSBOb3YgMjAxOCAwMzo1MzoxMSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-oss-object-type" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Tm9ybWFs</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-oss-hash-crc64ecma" index="10">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NTQ5NzU2NTM3OTQ1MTU3MzI3Ng==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-oss-storage-class" index="11">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U3RhbmRhcmQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-MD5" index="12">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>LzlIL1IrN3dJQnJDTmllMXNhQ2R0Zz09</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-oss-server-time" index="13">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>OA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IEFsaXl1bk9TUw0KRGF0ZTogV2VkLCAxMCBBcHIgMjAxOSAwOToyMToyNiBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9qYXZhc2NyaXB0OyBjaGFyc2V0PXV0Zi04DQpDb250ZW50LUxlbmd0aDogNTQyNDENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCngtb3NzLXJlcXVlc3QtaWQ6IDVDQURCNTk2Nzk0QTkyMkRDQkU5RUIxOA0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkVUYWc6ICJGRkQxRkY0N0VFRjAyMDFBQzIzNjI3QjVCMUEwOURCNiINCkxhc3QtTW9kaWZpZWQ6IE1vbiwgMTkgTm92IDIwMTggMDM6NTM6MTEgR01UDQp4LW9zcy1vYmplY3QtdHlwZTogTm9ybWFsDQp4LW9zcy1oYXNoLWNyYzY0ZWNtYTogNTQ5NzU2NTM3OTQ1MTU3MzI3Ng0KeC1vc3Mtc3RvcmFnZS1jbGFzczogU3RhbmRhcmQNCkNvbnRlbnQtTUQ1OiAvOUgvUis3d0lCckNOaWUxc2FDZHRnPT0NCngtb3NzLXNlcnZlci10aW1lOiA4DQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="2985171" offset="0" length="1400" />
          <PacketInfo time="2985171" offset="1400" length="1400" />
          <PacketInfo time="2985171" offset="2800" length="1400" />
          <PacketInfo time="2985171" offset="4200" length="1400" />
          <PacketInfo time="2985171" offset="5600" length="1400" />
          <PacketInfo time="2985171" offset="7000" length="1400" />
          <PacketInfo time="2985187" offset="8400" length="1400" />
          <PacketInfo time="2985187" offset="9800" length="1400" />
          <PacketInfo time="2985187" offset="11200" length="1400" />
          <PacketInfo time="2985187" offset="12600" length="1400" />
          <PacketInfo time="2985218" offset="14000" length="1400" />
          <PacketInfo time="2985234" offset="15400" length="1400" />
          <PacketInfo time="2985234" offset="16800" length="1400" />
          <PacketInfo time="2985234" offset="18200" length="1400" />
          <PacketInfo time="2985234" offset="19600" length="1400" />
          <PacketInfo time="2985234" offset="21000" length="1400" />
          <PacketInfo time="2985234" offset="22400" length="1400" />
          <PacketInfo time="2985234" offset="23800" length="1400" />
          <PacketInfo time="2985234" offset="25200" length="1400" />
          <PacketInfo time="2985234" offset="26600" length="1400" />
          <PacketInfo time="2985234" offset="28000" length="1400" />
          <PacketInfo time="2985234" offset="29400" length="1400" />
          <PacketInfo time="2985234" offset="30800" length="1400" />
          <PacketInfo time="2985250" offset="32200" length="1400" />
          <PacketInfo time="2985250" offset="33600" length="1400" />
          <PacketInfo time="2985250" offset="35000" length="1400" />
          <PacketInfo time="2985250" offset="36400" length="1400" />
          <PacketInfo time="2985250" offset="37800" length="1400" />
          <PacketInfo time="2985250" offset="39200" length="1400" />
          <PacketInfo time="2985250" offset="40600" length="1400" />
          <PacketInfo time="2985281" offset="42000" length="1400" />
          <PacketInfo time="2985296" offset="43400" length="1400" />
          <PacketInfo time="2985296" offset="44800" length="1400" />
          <PacketInfo time="2985312" offset="46200" length="1400" />
          <PacketInfo time="2985312" offset="47600" length="1400" />
          <PacketInfo time="2985312" offset="49000" length="1400" />
          <PacketInfo time="2985328" offset="50400" length="1400" />
          <PacketInfo time="2985328" offset="51800" length="1400" />
          <PacketInfo time="2985328" offset="53200" length="1400" />
          <PacketInfo time="2985328" offset="54600" length="125" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="490" hostname="webim.easemob.com" path="/sdk/dist/websdk-1.4.13.js" url="https://webim.easemob.com/sdk/dist/websdk-1.4.13.js" ip="211.154.222.187" port="443" connectionId="21" origin="HTML" frame="1" startTime="2985109" endTime="2985250">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>d2ViaW0uZWFzZW1vYi5jb20=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24v</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZSwgYnI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zZGsvZGlzdC93ZWJzZGstMS40LjEzLmpzIEhUVFAvMS4xDQpIb3N0OiB3ZWJpbS5lYXNlbW9iLmNvbQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2MjcNCkFjY2VwdDogKi8qDQpSZWZlcmVyOiBodHRwczovL2NlbnRlci50LmRhY3ViZS5jbi8NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdC1MYW5ndWFnZTogemgtQ04semg7cT0wLjgNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Server" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWxpeXVuT1NT</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAxMCBBcHIgMjAxOSAwOToyMToyNiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9qYXZhc2NyaXB0OyBjaGFyc2V0PXV0Zi04</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NDc0MzYy</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-oss-request-id" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NUNBREI1OTZCNERFMEJEMjQ5NEJFN0ZD</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IjE2M0EyRjZBRUVBNzk3OEFCNkFCNkVBMDg1MkEyQzc5Ig==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxOSBOb3YgMjAxOCAwMzo1MzoxMSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-oss-object-type" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Tm9ybWFs</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-oss-hash-crc64ecma" index="10">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTc5NjUxMjQzNDk3MDc0OTcxOTM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-oss-storage-class" index="11">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U3RhbmRhcmQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-MD5" index="12">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RmpvdmF1Nm5sNHEycTI2Z2hTb3NlUT09</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-oss-server-time" index="13">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>OTI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IEFsaXl1bk9TUw0KRGF0ZTogV2VkLCAxMCBBcHIgMjAxOSAwOToyMToyNiBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9qYXZhc2NyaXB0OyBjaGFyc2V0PXV0Zi04DQpDb250ZW50LUxlbmd0aDogNDc0MzYyDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQp4LW9zcy1yZXF1ZXN0LWlkOiA1Q0FEQjU5NkI0REUwQkQyNDk0QkU3RkMNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpFVGFnOiAiMTYzQTJGNkFFRUE3OTc4QUI2QUI2RUEwODUyQTJDNzkiDQpMYXN0LU1vZGlmaWVkOiBNb24sIDE5IE5vdiAyMDE4IDAzOjUzOjExIEdNVA0KeC1vc3Mtb2JqZWN0LXR5cGU6IE5vcm1hbA0KeC1vc3MtaGFzaC1jcmM2NGVjbWE6IDE3OTY1MTI0MzQ5NzA3NDk3MTkzDQp4LW9zcy1zdG9yYWdlLWNsYXNzOiBTdGFuZGFyZA0KQ29udGVudC1NRDU6IEZqb3ZhdTZubDRxMnEyNmdoU29zZVE9PQ0KeC1vc3Mtc2VydmVyLXRpbWU6IDkyDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>LyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcAovKioqKioqLyAJLy8gVGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJdmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTsKCi8qKioqKiovIAkvLyBUaGUgcmVxdWlyZSBmdW5jdGlvbgovKioqKioqLyAJZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkgewoKLyoqKioqKi8gCQkvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGUKLyoqKioqKi8gCQlpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkKLyoqKioqKi8gCQkJcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7CgovKioqKioqLyAJCS8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpCi8qKioqKiovIAkJdmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0gewovKioqKioqLyAJCQlleHBvcnRzOiB7fSwKLyoqKioqKi8gCQkJaWQ6IG1vZHVsZUlkLAovKioqKioqLyAJCQlsb2FkZWQ6IGZhbHNlCi8qKioqKiovIAkJfTsKCi8qKioqKiovIAkJLy8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uCi8qKioqKiovIAkJbW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7CgovKioqKioqLyAJCS8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWQKLyoqKioqKi8gCQltb2R1bGUubG9hZGVkID0gdHJ1ZTsKCi8qKioqKiovIAkJLy8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGUKLyoqKioqKi8gCQlyZXR1cm4gbW9kdWxlLmV4cG9ydHM7Ci8qKioqKiovIAl9CgoKLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzOwoKLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzOwoKLyoqKioqKi8gCS8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSAiLi8iOwoKLyoqKioqKi8gCS8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0cwovKioqKioqLyAJcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7Ci8qKioqKiovIH0pCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKiovICh7CgovKioqLyAwOgovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0OCk7CgoKLyoqKi8gfSksCgovKioqLyAyMDc6Ci8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJdmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsKCgk7CgkoZnVuY3Rpb24gKCkgewoKCSAgICB2YXIgRU1QVFlGTiA9IGZ1bmN0aW9uIEVNUFRZRk4oKSB7fTsKCSAgICB2YXIgX2NvZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwOCkuY29kZTsKCSAgICB2YXIgV0VCSU1fRklMRVNJWkVfTElNSVQgPSAxMDQ4NTc2MDsKCgkgICAgdmFyIF9jcmVhdGVTdGFuZGFyZFhIUiA9IGZ1bmN0aW9uIF9jcmVhdGVTdGFuZGFyZFhIUigpIHsKCSAgICAgICAgdHJ5IHsKCSAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7CgkgICAgICAgIH0gY2F0Y2ggKGUpIHsKCSAgICAgICAgICAgIHJldHVybiBmYWxzZTsKCSAgICAgICAgfQoJICAgIH07CgoJICAgIHZhciBfY3JlYXRlQWN0aXZlWEhSID0gZnVuY3Rpb24gX2NyZWF0ZUFjdGl2ZVhIUigpIHsKCSAgICAgICAgdHJ5IHsKCSAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LkFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxIVFRQJyk7CgkgICAgICAgIH0gY2F0Y2ggKGUpIHsKCSAgICAgICAgICAgIHJldHVybiBmYWxzZTsKCSAgICAgICAgfQoJICAgIH07CgoJICAgIHZhciBfeG1scmVxdWVzdCA9IGZ1bmN0aW9uIF94bWxyZXF1ZXN0KGNyb3NzRG9tYWluKSB7CgkgICAgICAgIGNyb3NzRG9tYWluID0gY3Jvc3NEb21haW4gfHwgdHJ1ZTsKCSAgICAgICAgdmFyIHRlbXAgPSBfY3JlYXRlU3RhbmRhcmRYSFIoKSB8fCBfY3JlYXRlQWN0aXZlWEhSKCk7CgoJICAgICAgICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4gdGVtcCkgewoJICAgICAgICAgICAgcmV0dXJuIHRlbXA7CgkgICAgICAgIH0KCSAgICAgICAgaWYgKCFjcm9zc0RvbWFpbikgewoJICAgICAgICAgICAgcmV0dXJuIHRlbXA7CgkgICAgICAgIH0KCSAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuWERvbWFpblJlcXVlc3QgPT09ICd1bmRlZmluZWQnKSB7CgkgICAgICAgICAgICByZXR1cm4gdGVtcDsKCSAgICAgICAgfQoJICAgICAgICB2YXIgeGhyID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7CgkgICAgICAgIHhoci5yZWFkeVN0YXRlID0gMDsKCSAgICAgICAgeGhyLnN0YXR1cyA9IDEwMDsKCSAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IEVNUFRZRk47CgkgICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7CgkgICAgICAgICAgICB4aHIucmVhZHlTdGF0ZSA9IDQ7CgkgICAgICAgICAgICB4aHIuc3RhdHVzID0gMjAwOwoKCSAgICAgICAgICAgIHZhciB4bWxEb2MgPSBuZXcgQWN0aXZlWE9iamVjdCgnTWljcm9zb2Z0LlhNTERPTScpOwoJICAgICAgICAgICAgeG1sRG9jLmFzeW5jID0gJ2ZhbHNlJzsKCSAgICAgICAgICAgIHhtbERvYy5sb2FkWE1MKHhoci5yZXNwb25zZVRleHQpOwoJICAgICAgICAgICAgeGhyLnJlc3BvbnNlWE1MID0geG1sRG9jOwoJICAgICAgICAgICAgeGhyLnJlc3BvbnNlID0geGhyLnJlc3BvbnNlVGV4dDsKCSAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UoKTsKCSAgICAgICAgfTsKCSAgICAgICAgeGhyLm9udGltZW91dCA9IHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkgewoJICAgICAgICAgICAgeGhyLnJlYWR5U3RhdGUgPSA0OwoJICAgICAgICAgICAgeGhyLnN0YXR1cyA9IDUwMDsKCSAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UoKTsKCSAgICAgICAgfTsKCSAgICAgICAgcmV0dXJuIHhocjsKCSAgICB9OwoKCSAgICB2YXIgX2hhc0ZsYXNoID0gZnVuY3Rpb24gKCkgewoJICAgICAgICBpZiAoJ0FjdGl2ZVhPYmplY3QnIGluIHdpbmRvdykgewoJICAgICAgICAgICAgdHJ5IHsKCSAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ1Nob2Nrd2F2ZUZsYXNoLlNob2Nrd2F2ZUZsYXNoJyk7CgkgICAgICAgICAgICB9IGNhdGNoIChleCkgewoJICAgICAgICAgICAgICAgIHJldHVybiAwOwoJICAgICAgICAgICAgfQoJICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5wbHVnaW5zICYmIG5hdmlnYXRvci5wbHVnaW5zLmxlbmd0aCA+IDApIHsKCSAgICAgICAgICAgICAgICByZXR1cm4gbmF2aWdhdG9yLnBsdWdpbnNbJ1Nob2Nrd2F2ZSBGbGFzaCddOwoJICAgICAgICAgICAgfQoJICAgICAgICB9CgkgICAgICAgIHJldHVybiAwOwoJICAgIH0oKTsKCgkgICAgdmFyIF90bXBVdGlsWEhSID0gX3htbHJlcXVlc3QoKSwKCSAgICAgICAgX2hhc0Zvcm1EYXRhID0gdHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJywKCSAgICAgICAgX2hhc0Jsb2IgPSB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcsCgkgICAgICAgIF9pc0NhblNldFJlcXVlc3RIZWFkZXIgPSBfdG1wVXRpbFhIUi5zZXRSZXF1ZXN0SGVhZGVyIHx8IGZhbHNlLAoJICAgICAgICBfaGFzT3ZlcnJpZGVNaW1lVHlwZSA9IF90bXBVdGlsWEhSLm92ZXJyaWRlTWltZVR5cGUgfHwgZmFsc2UsCgkgICAgICAgIF9pc0NhblVwbG9hZEZpbGVBc3luYyA9IF9pc0NhblNldFJlcXVlc3RIZWFkZXIgJiYgX2hhc0Zvcm1EYXRhLAoJICAgICAgICBfaXNDYW5VcGxvYWRGaWxlID0gX2lzQ2FuVXBsb2FkRmlsZUFzeW5jIHx8IF9oYXNGbGFzaCwKCSAgICAgICAgX2lzQ2FuRG93bkxvYWRGaWxlID0gX2lzQ2FuU2V0UmVxdWVzdEhlYWRlciAmJiAoX2hhc0Jsb2IgfHwgX2hhc092ZXJyaWRlTWltZVR5cGUpOwoKCSAgICBpZiAoIU9iamVjdC5rZXlzKSB7CgkgICAgICAgIE9iamVjdC5rZXlzID0gZnVuY3Rpb24gKCkgewoJICAgICAgICAgICAgJ3VzZSBzdHJpY3QnOwoKCSAgICAgICAgICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksCgkgICAgICAgICAgICAgICAgaGFzRG9udEVudW1CdWcgPSAheyB0b1N0cmluZzogbnVsbCB9LnByb3BlcnR5SXNFbnVtZXJhYmxlKCd0b1N0cmluZycpLAoJICAgICAgICAgICAgICAgIGRvbnRFbnVtcyA9IFsndG9TdHJpbmcnLCAndG9Mb2NhbGVTdHJpbmcnLCAndmFsdWVPZicsICdoYXNPd25Qcm9wZXJ0eScsICdpc1Byb3RvdHlwZU9mJywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJ2NvbnN0cnVjdG9yJ10sCgkgICAgICAgICAgICAgICAgZG9udEVudW1zTGVuZ3RoID0gZG9udEVudW1zLmxlbmd0aDsKCgkgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikgewoJICAgICAgICAgICAgICAgIGlmICgodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqKSkgIT09ICdvYmplY3QnICYmICh0eXBlb2Ygb2JqICE9PSAnZnVuY3Rpb24nIHx8IG9iaiA9PT0gbnVsbCkpIHsKCSAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmtleXMgY2FsbGVkIG9uIG5vbi1vYmplY3QnKTsKCSAgICAgICAgICAgICAgICB9CgoJICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXSwKCSAgICAgICAgICAgICAgICAgICAgcHJvcCwKCSAgICAgICAgICAgICAgICAgICAgaTsKCgkgICAgICAgICAgICAgICAgZm9yIChwcm9wIGluIG9iaikgewoJICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChwcm9wKTsKCSAgICAgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgICAgIH0KCgkgICAgICAgICAgICAgICAgaWYgKGhhc0RvbnRFbnVtQnVnKSB7CgkgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBkb250RW51bXNMZW5ndGg7IGkrKykgewoJICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBkb250RW51bXNbaV0pKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZG9udEVudW1zW2ldKTsKCSAgICAgICAgICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0OwoJICAgICAgICAgICAgfTsKCSAgICAgICAgfSgpOwoJICAgIH0KCgkgICAgdmFyIHV0aWxzID0gewoJICAgICAgICBoYXNGb3JtRGF0YTogX2hhc0Zvcm1EYXRhLAoKCSAgICAgICAgaGFzQmxvYjogX2hhc0Jsb2IsCgoJICAgICAgICBlbXB0eWZuOiBFTVBUWUZOLAoKCSAgICAgICAgaXNDYW5TZXRSZXF1ZXN0SGVhZGVyOiBfaXNDYW5TZXRSZXF1ZXN0SGVhZGVyLAoKCSAgICAgICAgaGFzT3ZlcnJpZGVNaW1lVHlwZTogX2hhc092ZXJyaWRlTWltZVR5cGUsCgoJICAgICAgICBpc0NhblVwbG9hZEZpbGVBc3luYzogX2lzQ2FuVXBsb2FkRmlsZUFzeW5jLAoKCSAgICAgICAgaXNDYW5VcGxvYWRGaWxlOiBfaXNDYW5VcGxvYWRGaWxlLAoKCSAgICAgICAgaXNDYW5Eb3duTG9hZEZpbGU6IF9pc0NhbkRvd25Mb2FkRmlsZSwKCgkgICAgICAgIGlzU3VwcG9ydFdzczogZnVuY3Rpb24gKCkgewoJICAgICAgICAgICAgdmFyIG5vdFN1cHBvcnRMaXN0ID0gWwoJICAgICAgICAgICAgLy8xOiBRUSBicm93c2VyIFg1IGNvcmUKCSAgICAgICAgICAgIC9NUVFCcm93c2VyW1wvXTUoWy5dXGQrKT9cc1RCUy8KCgkgICAgICAgICAgICAvLzI6IGV0Yy4KCSAgICAgICAgICAgIC8vLi4uCgkgICAgICAgICAgICBdOwoKCSAgICAgICAgICAgIGlmICghd2luZG93LldlYlNvY2tldCkgewoJICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKCSAgICAgICAgICAgIH0KCgkgICAgICAgICAgICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDsKCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm90U3VwcG9ydExpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CgkgICAgICAgICAgICAgICAgaWYgKG5vdFN1cHBvcnRMaXN0W2ldLnRlc3QodWEpKSB7CgkgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKCSAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICB9CgkgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKCSAgICAgICAgfSgpLAoKCSAgICAgICAgZ2V0SUVWZXJzaW9uOiBmdW5jdGlvbiAoKSB7CgkgICAgICAgICAgICB2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LAoJICAgICAgICAgICAgICAgIG1hdGNoZXMsCgkgICAgICAgICAgICAgICAgdHJpZGVudE1hcCA9IHsgJzQnOiA4LCAnNSc6IDksICc2JzogMTAsICc3JzogMTEgfTsKCgkgICAgICAgICAgICBtYXRjaGVzID0gdWEubWF0Y2goL01TSUUgKFxkKykvaSk7CgoJICAgICAgICAgICAgaWYgKG1hdGNoZXMgJiYgbWF0Y2hlc1sxXSkgewoJICAgICAgICAgICAgICAgIHJldHVybiArbWF0Y2hlc1sxXTsKCSAgICAgICAgICAgIH0KCSAgICAgICAgICAgIG1hdGNoZXMgPSB1YS5tYXRjaCgvVHJpZGVudFwvKFxkKykvaSk7CgkgICAgICAgICAgICBpZiAobWF0Y2hlcyAmJiBtYXRjaGVzWzFdKSB7CgkgICAgICAgICAgICAgICAgcmV0dXJuIHRyaWRlbnRNYXBbbWF0Y2hlc1sxXV0gfHwgbnVsbDsKCSAgICAgICAgICAgIH0KCSAgICAgICAgICAgIHJldHVybiBudWxsOwoJICAgICAgICB9KCksCgoJICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShqc29uKSB7CgkgICAgICAgICAgICBpZiAodHlwZW9mIEpTT04gIT09ICd1bmRlZmluZWQnICYmIEpTT04uc3RyaW5naWZ5KSB7CgkgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGpzb24pOwoJICAgICAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgICAgICB2YXIgcyA9ICcnLAoJICAgICAgICAgICAgICAgICAgICBhcnIgPSBbXTsKCgkgICAgICAgICAgICAgICAgdmFyIGl0ZXJhdGUgPSBmdW5jdGlvbiBpdGVyYXRlKGpzb24pIHsKCSAgICAgICAgICAgICAgICAgICAgdmFyIGlzQXJyID0gZmFsc2U7CgoJICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGpzb24pID09PSAnW29iamVjdCBBcnJheV0nKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICBhcnIucHVzaCgnXScsICdbJyk7CgkgICAgICAgICAgICAgICAgICAgICAgICBpc0FyciA9IHRydWU7CgkgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGpzb24pID09PSAnW29iamVjdCBPYmplY3RdJykgewoJICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goJ30nLCAneycpOwoJICAgICAgICAgICAgICAgICAgICB9CgoJICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBvIGluIGpzb24pIHsKCSAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoanNvbltvXSkgPT09ICdbb2JqZWN0IE51bGxdJykgewoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25bb10gPSAnbnVsbCc7CgkgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChqc29uW29dKSA9PT0gJ1tvYmplY3QgVW5kZWZpbmVkXScpIHsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uW29dID0gJ3VuZGVmaW5lZCc7CgkgICAgICAgICAgICAgICAgICAgICAgICB9CgoJICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25bb10gJiYgX3R5cGVvZihqc29uW29dKSA9PT0gJ29iamVjdCcpIHsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBzICs9ICcsJyArIChpc0FyciA/ICcnIDogJyInICsgbyArICciOicgKyAoaXNBcnIgPyAnIicgOiAnJykpICsgaXRlcmF0ZShqc29uW29dKSArICcnOwoJICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBzICs9ICcsIicgKyAoaXNBcnIgPyAnJyA6IG8gKyAnIjoiJykgKyBqc29uW29dICsgJyInOwoJICAgICAgICAgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgICAgICAgICB9CgoJICAgICAgICAgICAgICAgICAgICBpZiAocyAhPSAnJykgewoJICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHMuc2xpY2UoMSk7CgkgICAgICAgICAgICAgICAgICAgIH0KCgkgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnIucG9wKCkgKyBzICsgYXJyLnBvcCgpOwoJICAgICAgICAgICAgICAgIH07CgkgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdGUoanNvbik7CgkgICAgICAgICAgICB9CgkgICAgICAgIH0sCgkgICAgICAgIGxvZ2luOiBmdW5jdGlvbiBsb2dpbihvcHRpb25zKSB7CgkgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgkgICAgICAgICAgICB2YXIgc3VjID0gb3B0aW9ucy5zdWNjZXNzIHx8IEVNUFRZRk47CgkgICAgICAgICAgICB2YXIgZXJyID0gb3B0aW9ucy5lcnJvciB8fCBFTVBUWUZOOwoKCSAgICAgICAgICAgIHZhciBhcHBLZXkgPSBvcHRpb25zLmFwcEtleSB8fCAnJzsKCSAgICAgICAgICAgIHZhciBkZXZJbmZvcyA9IGFwcEtleS5zcGxpdCgnIycpOwoJICAgICAgICAgICAgaWYgKGRldkluZm9zLmxlbmd0aCAhPT0gMikgewoJICAgICAgICAgICAgICAgIGVycih7CgkgICAgICAgICAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0NPTk5DVElPTl9BUFBLRVlfTk9UX0FTU0lHTl9FUlJPUgoJICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKCSAgICAgICAgICAgIH0KCgkgICAgICAgICAgICB2YXIgb3JnTmFtZSA9IGRldkluZm9zWzBdOwoJICAgICAgICAgICAgdmFyIGFwcE5hbWUgPSBkZXZJbmZvc1sxXTsKCSAgICAgICAgICAgIHZhciBodHRwcyA9IGh0dHBzIHx8IG9wdGlvbnMuaHR0cHM7CgkgICAgICAgICAgICB2YXIgdXNlciA9IG9wdGlvbnMudXNlciB8fCAnJzsKCSAgICAgICAgICAgIHZhciBwd2QgPSBvcHRpb25zLnB3ZCB8fCAnJzsKCgkgICAgICAgICAgICB2YXIgYXBpVXJsID0gb3B0aW9ucy5hcGlVcmw7CgoJICAgICAgICAgICAgdmFyIGxvZ2luSnNvbiA9IHsKCSAgICAgICAgICAgICAgICBncmFudF90eXBlOiAncGFzc3dvcmQnLAoJICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VyLAoJICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBwd2QsCgkgICAgICAgICAgICAgICAgdGltZXN0YW1wOiArbmV3IERhdGUoKQoJICAgICAgICAgICAgfTsKCSAgICAgICAgICAgIHZhciBsb2dpbmZvID0gdXRpbHMuc3RyaW5naWZ5KGxvZ2luSnNvbik7CgoJICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7CgkgICAgICAgICAgICAgICAgdXJsOiBhcGlVcmwgKyAnLycgKyBvcmdOYW1lICsgJy8nICsgYXBwTmFtZSArICcvdG9rZW4nLAoJICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCgkgICAgICAgICAgICAgICAgZGF0YTogbG9naW5mbywKCSAgICAgICAgICAgICAgICBzdWNjZXNzOiBzdWMsCgkgICAgICAgICAgICAgICAgZXJyb3I6IGVycgoJICAgICAgICAgICAgfTsKCSAgICAgICAgICAgIHJldHVybiB1dGlscy5hamF4KG9wdGlvbnMpOwoJICAgICAgICB9LAoKCSAgICAgICAgZ2V0RmlsZVVybDogZnVuY3Rpb24gZ2V0RmlsZVVybChmaWxlSW5wdXRJZCkgewoJICAgICAgICAgICAgdmFyIHVyaSA9IHsKCSAgICAgICAgICAgICAgICB1cmw6ICcnLAoJICAgICAgICAgICAgICAgIGZpbGVuYW1lOiAnJywKCSAgICAgICAgICAgICAgICBmaWxldHlwZTogJycsCgkgICAgICAgICAgICAgICAgZGF0YTogJycKCSAgICAgICAgICAgIH07CgoJICAgICAgICAgICAgdmFyIGZpbGVPYmogPSB0eXBlb2YgZmlsZUlucHV0SWQgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZmlsZUlucHV0SWQpIDogZmlsZUlucHV0SWQ7CgoJICAgICAgICAgICAgaWYgKCF1dGlscy5pc0NhblVwbG9hZEZpbGVBc3luYyB8fCAhZmlsZU9iaikgewoJICAgICAgICAgICAgICAgIHJldHVybiB1cmk7CgkgICAgICAgICAgICB9CgkgICAgICAgICAgICB0cnkgewoJICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTCkgewoJICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZUl0ZW1zID0gZmlsZU9iai5maWxlczsKCSAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVJdGVtcy5sZW5ndGggPiAwKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IGZpbGVJdGVtcy5pdGVtKDApOwoJICAgICAgICAgICAgICAgICAgICAgICAgdXJpLmRhdGEgPSB1OwoJICAgICAgICAgICAgICAgICAgICAgICAgdXJpLnVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKHUpOwoJICAgICAgICAgICAgICAgICAgICAgICAgdXJpLmZpbGVuYW1lID0gdS5uYW1lIHx8ICcnOwoJICAgICAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgICAgICAgICAgLy8gSUUKCSAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChmaWxlSW5wdXRJZCkudmFsdWU7CgkgICAgICAgICAgICAgICAgICAgIHVyaS51cmwgPSB1OwoJICAgICAgICAgICAgICAgICAgICB2YXIgcG9zMSA9IHUubGFzdEluZGV4T2YoJy8nKTsKCSAgICAgICAgICAgICAgICAgICAgdmFyIHBvczIgPSB1Lmxhc3RJbmRleE9mKCdcXCcpOwoJICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gTWF0aC5tYXgocG9zMSwgcG9zMik7CgkgICAgICAgICAgICAgICAgICAgIGlmIChwb3MgPCAwKSB1cmkuZmlsZW5hbWUgPSB1O2Vsc2UgdXJpLmZpbGVuYW1lID0gdS5zdWJzdHJpbmcocG9zICsgMSk7CgkgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHVyaS5maWxlbmFtZS5sYXN0SW5kZXhPZignLicpOwoJICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPSAtMSkgewoJICAgICAgICAgICAgICAgICAgICB1cmkuZmlsZXR5cGUgPSB1cmkuZmlsZW5hbWUuc3Vic3RyaW5nKGluZGV4ICsgMSkudG9Mb3dlckNhc2UoKTsKCSAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgcmV0dXJuIHVyaTsKCSAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKCSAgICAgICAgICAgICAgICB0aHJvdyBlOwoJICAgICAgICAgICAgfQoJICAgICAgICB9LAoKCSAgICAgICAgZ2V0RmlsZVNpemU6IGZ1bmN0aW9uIGdldEZpbGVTaXplKGZpbGUpIHsKCSAgICAgICAgICAgIHZhciBmaWxlU2l6ZSA9IHRoaXMuZ2V0RmlsZUxlbmd0aChmaWxlKTsKCSAgICAgICAgICAgIGlmIChmaWxlU2l6ZSA+IDEwMDAwMDAwKSB7CgkgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgdmFyIGtiID0gTWF0aC5yb3VuZChmaWxlU2l6ZSAvIDEwMDApOwoJICAgICAgICAgICAgaWYgKGtiIDwgMTAwMCkgewoJICAgICAgICAgICAgICAgIGZpbGVTaXplID0ga2IgKyAnIEtCJzsKCSAgICAgICAgICAgIH0gZWxzZSBpZiAoa2IgPj0gMTAwMCkgewoJICAgICAgICAgICAgICAgIHZhciBtYiA9IGtiIC8gMTAwMDsKCSAgICAgICAgICAgICAgICBpZiAobWIgPCAxMDAwKSB7CgkgICAgICAgICAgICAgICAgICAgIGZpbGVTaXplID0gbWIudG9GaXhlZCgxKSArICcgTUInOwoJICAgICAgICAgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICAgICAgICAgIHZhciBnYiA9IG1iIC8gMTAwMDsKCSAgICAgICAgICAgICAgICAgICAgZmlsZVNpemUgPSBnYi50b0ZpeGVkKDEpICsgJyBHQic7CgkgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgcmV0dXJuIGZpbGVTaXplOwoJICAgICAgICB9LAoKCSAgICAgICAgZ2V0RmlsZUxlbmd0aDogZnVuY3Rpb24gZ2V0RmlsZUxlbmd0aChmaWxlKSB7CgkgICAgICAgICAgICB2YXIgZmlsZUxlbmd0aCA9IDA7CgkgICAgICAgICAgICBpZiAoZmlsZSkgewoJICAgICAgICAgICAgICAgIGlmIChmaWxlLmZpbGVzKSB7CgkgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlLmZpbGVzLmxlbmd0aCA+IDApIHsKCSAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVMZW5ndGggPSBmaWxlLmZpbGVzWzBdLnNpemU7CgkgICAgICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZpbGUuc2VsZWN0ICYmICdBY3RpdmVYT2JqZWN0JyBpbiB3aW5kb3cpIHsKCSAgICAgICAgICAgICAgICAgICAgZmlsZS5zZWxlY3QoKTsKCSAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVvYmplY3QgPSBuZXcgQWN0aXZlWE9iamVjdCgnU2NyaXB0aW5nLkZpbGVTeXN0ZW1PYmplY3QnKTsKCSAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBmaWxlb2JqZWN0LkdldEZpbGUoZmlsZS52YWx1ZSk7CgkgICAgICAgICAgICAgICAgICAgIGZpbGVMZW5ndGggPSBmaWxlLlNpemU7CgkgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgcmV0dXJuIGZpbGVMZW5ndGg7CgkgICAgICAgIH0sCgoJICAgICAgICBoYXNGbGFzaDogX2hhc0ZsYXNoLAoKCSAgICAgICAgdHJpbTogZnVuY3Rpb24gdHJpbShzdHIpIHsKCgkgICAgICAgICAgICBzdHIgPSB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyA/IHN0ciA6ICcnOwoKCSAgICAgICAgICAgIHJldHVybiBzdHIudHJpbSA/IHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXlxzfFxzJC9nLCAnJyk7CgkgICAgICAgIH0sCgoJICAgICAgICBwYXJzZUVtb2ppOiBmdW5jdGlvbiBwYXJzZUVtb2ppKG1zZykgewoJICAgICAgICAgICAgaWYgKHR5cGVvZiBXZWJJTS5FbW9qaSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIFdlYklNLkVtb2ppLm1hcCA9PT0gJ3VuZGVmaW5lZCcpIHsKCSAgICAgICAgICAgICAgICByZXR1cm4gbXNnOwoJICAgICAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgICAgICB2YXIgZW1vamkgPSBXZWJJTS5FbW9qaSwKCSAgICAgICAgICAgICAgICAgICAgcmVnID0gbnVsbDsKCgkgICAgICAgICAgICAgICAgZm9yICh2YXIgZmFjZSBpbiBlbW9qaS5tYXApIHsKCSAgICAgICAgICAgICAgICAgICAgaWYgKGVtb2ppLm1hcC5oYXNPd25Qcm9wZXJ0eShmYWNlKSkgewoJICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG1zZy5pbmRleE9mKGZhY2UpID4gLTEpIHsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSBtc2cucmVwbGFjZShmYWNlLCAnPGltZyBjbGFzcz0iZW1vamkiIHNyYz0iJyArIGVtb2ppLnBhdGggKyBlbW9qaS5tYXBbZmFjZV0gKyAnIiAvPicpOwoJICAgICAgICAgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgICAgIHJldHVybiBtc2c7CgkgICAgICAgICAgICB9CgkgICAgICAgIH0sCgoJICAgICAgICBwYXJzZUxpbms6IGZ1bmN0aW9uIHBhcnNlTGluayhtc2cpIHsKCgkgICAgICAgICAgICB2YXIgcmVnID0gLyhodHRwcz9cOlwvXC98d3d3XC4pKFthLXpBLVowLTktXSsoXC5bYS16QS1aMC05XSspKykoXDpbMC05XXsyLDR9KT9cLz8oKFwuWzpfMC05YS16QS1aLV0rKXxbOl8wLTlhLXpBLVotXSpcLz8pKlw/P1s6XyNAKiYlMC05YS16QS1aLS89XSovZ207CgoJICAgICAgICAgICAgbXNnID0gbXNnLnJlcGxhY2UocmVnLCBmdW5jdGlvbiAodikgewoKCSAgICAgICAgICAgICAgICB2YXIgcHJlZml4ID0gL15odHRwcz8vZ20udGVzdCh2KTsKCgkgICAgICAgICAgICAgICAgcmV0dXJuICI8YSBocmVmPSciICsgKHByZWZpeCA/IHYgOiAnLy8nICsgdikgKyAiJyB0YXJnZXQ9J19ibGFuayc+IiArIHYgKyAiPC9hPiI7CgkgICAgICAgICAgICB9KTsKCgkgICAgICAgICAgICByZXR1cm4gbXNnOwoJICAgICAgICB9LAoKCSAgICAgICAgcGFyc2VKU09OOiBmdW5jdGlvbiBwYXJzZUpTT04oZGF0YSkgewoKCSAgICAgICAgICAgIGlmICh3aW5kb3cuSlNPTiAmJiB3aW5kb3cuSlNPTi5wYXJzZSkgewoJICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuSlNPTi5wYXJzZShkYXRhICsgJycpOwoJICAgICAgICAgICAgfQoKCSAgICAgICAgICAgIHZhciByZXF1aXJlTm9uQ29tbWEsCgkgICAgICAgICAgICAgICAgZGVwdGggPSBudWxsLAoJICAgICAgICAgICAgICAgIHN0ciA9IHV0aWxzLnRyaW0oZGF0YSArICcnKTsKCgkgICAgICAgICAgICByZXR1cm4gc3RyICYmICF1dGlscy50cmltKHN0ci5yZXBsYWNlKC8oLCl8KFxbfHspfCh9fF0pfCIoPzpbXiJcXFxyXG5dfFxcWyJcXFwvYmZucnRdfFxcdVtcZGEtZkEtRl17NH0pKiJccyo6P3x0cnVlfGZhbHNlfG51bGx8LT8oPyEwXGQpXGQrKD86XC5cZCt8KSg/OltlRV1bKy1dP1xkK3wpL2csIGZ1bmN0aW9uICh0b2tlbiwgY29tbWEsIG9wZW4sIGNsb3NlKSB7CgoJICAgICAgICAgICAgICAgIGlmIChyZXF1aXJlTm9uQ29tbWEgJiYgY29tbWEpIHsKCSAgICAgICAgICAgICAgICAgICAgZGVwdGggPSAwOwoJICAgICAgICAgICAgICAgIH0KCgkgICAgICAgICAgICAgICAgaWYgKGRlcHRoID09PSAwKSB7CgkgICAgICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbjsKCSAgICAgICAgICAgICAgICB9CgoJICAgICAgICAgICAgICAgIHJlcXVpcmVOb25Db21tYSA9IG9wZW4gfHwgY29tbWE7CgkgICAgICAgICAgICAgICAgZGVwdGggKz0gIWNsb3NlIC0gIW9wZW47CgkgICAgICAgICAgICAgICAgcmV0dXJuICcnOwoJICAgICAgICAgICAgfSkpID8gRnVuY3Rpb24oJ3JldHVybiAnICsgc3RyKSgpIDogRnVuY3Rpb24oJ0ludmFsaWQgSlNPTjogJyArIGRhdGEpKCk7CgkgICAgICAgIH0sCgoJICAgICAgICBwYXJzZVVwbG9hZFJlc3BvbnNlOiBmdW5jdGlvbiBwYXJzZVVwbG9hZFJlc3BvbnNlKHJlc3BvbnNlKSB7CgkgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuaW5kZXhPZignY2FsbGJhY2snKSA+IC0xID8gLy9sdGUgaWU5CgkgICAgICAgICAgICByZXNwb25zZS5zbGljZSg5LCAtMSkgOiByZXNwb25zZTsKCSAgICAgICAgfSwKCgkgICAgICAgIHBhcnNlRG93bmxvYWRSZXNwb25zZTogZnVuY3Rpb24gcGFyc2VEb3dubG9hZFJlc3BvbnNlKHJlc3BvbnNlKSB7CgkgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UgJiYgcmVzcG9uc2UudHlwZSAmJiByZXNwb25zZS50eXBlID09PSAnYXBwbGljYXRpb24vanNvbicgfHwgMCA+IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChyZXNwb25zZSkuaW5kZXhPZignQmxvYicpID8gdGhpcy51cmwgKyAnP3Rva2VuPScgOiB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChyZXNwb25zZSk7CgkgICAgICAgIH0sCgoJICAgICAgICB1cGxvYWRGaWxlOiBmdW5jdGlvbiB1cGxvYWRGaWxlKG9wdGlvbnMpIHsKCSAgICAgICAgICAgIHZhciBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCSAgICAgICAgICAgIG9wdGlvbnMub25GaWxlVXBsb2FkUHJvZ3Jlc3MgPSBvcHRpb25zLm9uRmlsZVVwbG9hZFByb2dyZXNzIHx8IEVNUFRZRk47CgkgICAgICAgICAgICBvcHRpb25zLm9uRmlsZVVwbG9hZENvbXBsZXRlID0gb3B0aW9ucy5vbkZpbGVVcGxvYWRDb21wbGV0ZSB8fCBFTVBUWUZOOwoJICAgICAgICAgICAgb3B0aW9ucy5vbkZpbGVVcGxvYWRFcnJvciA9IG9wdGlvbnMub25GaWxlVXBsb2FkRXJyb3IgfHwgRU1QVFlGTjsKCSAgICAgICAgICAgIG9wdGlvbnMub25GaWxlVXBsb2FkQ2FuY2VsZWQgPSBvcHRpb25zLm9uRmlsZVVwbG9hZENhbmNlbGVkIHx8IEVNUFRZRk47CgoJICAgICAgICAgICAgdmFyIGFjYyA9IG9wdGlvbnMuYWNjZXNzVG9rZW4gfHwgdGhpcy5jb250ZXh0LmFjY2Vzc1Rva2VuOwoJICAgICAgICAgICAgaWYgKCFhY2MpIHsKCSAgICAgICAgICAgICAgICBvcHRpb25zLm9uRmlsZVVwbG9hZEVycm9yKHsKCSAgICAgICAgICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fVVBMT0FERklMRV9OT19MT0dJTiwKCSAgICAgICAgICAgICAgICAgICAgaWQ6IG9wdGlvbnMuaWQKCSAgICAgICAgICAgICAgICB9KTsKCSAgICAgICAgICAgICAgICByZXR1cm47CgkgICAgICAgICAgICB9CgoJICAgICAgICAgICAgdmFyIG9yZ05hbWUsIGFwcE5hbWUsIGRldkluZm9zOwoJICAgICAgICAgICAgdmFyIGFwcEtleSA9IG9wdGlvbnMuYXBwS2V5IHx8IHRoaXMuY29udGV4dC5hcHBLZXkgfHwgJyc7CgoJICAgICAgICAgICAgaWYgKGFwcEtleSkgewoJICAgICAgICAgICAgICAgIGRldkluZm9zID0gYXBwS2V5LnNwbGl0KCcjJyk7CgkgICAgICAgICAgICAgICAgb3JnTmFtZSA9IGRldkluZm9zWzBdOwoJICAgICAgICAgICAgICAgIGFwcE5hbWUgPSBkZXZJbmZvc1sxXTsKCSAgICAgICAgICAgIH0KCgkgICAgICAgICAgICBpZiAoIW9yZ05hbWUgJiYgIWFwcE5hbWUpIHsKCSAgICAgICAgICAgICAgICBvcHRpb25zLm9uRmlsZVVwbG9hZEVycm9yKHsKCSAgICAgICAgICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fVVBMT0FERklMRV9FUlJPUiwKCSAgICAgICAgICAgICAgICAgICAgaWQ6IG9wdGlvbnMuaWQKCSAgICAgICAgICAgICAgICB9KTsKCSAgICAgICAgICAgICAgICByZXR1cm47CgkgICAgICAgICAgICB9CgoJICAgICAgICAgICAgdmFyIGFwaVVybCA9IG9wdGlvbnMuYXBpVXJsOwoJICAgICAgICAgICAgdmFyIHVwbG9hZFVybCA9IGFwaVVybCArICcvJyArIG9yZ05hbWUgKyAnLycgKyBhcHBOYW1lICsgJy9jaGF0ZmlsZXMnOwoKCSAgICAgICAgICAgIGlmICghdXRpbHMuaXNDYW5VcGxvYWRGaWxlQXN5bmMpIHsKCSAgICAgICAgICAgICAgICBpZiAodXRpbHMuaGFzRmxhc2ggJiYgdHlwZW9mIG9wdGlvbnMuZmxhc2hVcGxvYWQgPT09ICdmdW5jdGlvbicpIHsKCSAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5mbGFzaFVwbG9hZCAmJiBvcHRpb25zLmZsYXNoVXBsb2FkKHVwbG9hZFVybCwgb3B0aW9ucyk7CgkgICAgICAgICAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkZpbGVVcGxvYWRFcnJvcih7CgkgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9VUExPQURGSUxFX0JST1dTRVJfRVJST1IsCgkgICAgICAgICAgICAgICAgICAgICAgICBpZDogb3B0aW9ucy5pZAoJICAgICAgICAgICAgICAgICAgICB9KTsKCSAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgcmV0dXJuOwoJICAgICAgICAgICAgfQoKCSAgICAgICAgICAgIHZhciBmaWxlU2l6ZSA9IG9wdGlvbnMuZmlsZS5kYXRhID8gb3B0aW9ucy5maWxlLmRhdGEuc2l6ZSA6IHVuZGVmaW5lZDsKCSAgICAgICAgICAgIGlmIChmaWxlU2l6ZSA+IFdFQklNX0ZJTEVTSVpFX0xJTUlUKSB7CgkgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkZpbGVVcGxvYWRFcnJvcih7CgkgICAgICAgICAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX1VQTE9BREZJTEVfRVJST1IsCgkgICAgICAgICAgICAgICAgICAgIGlkOiBvcHRpb25zLmlkCgkgICAgICAgICAgICAgICAgfSk7CgkgICAgICAgICAgICAgICAgcmV0dXJuOwoJICAgICAgICAgICAgfSBlbHNlIGlmIChmaWxlU2l6ZSA8PSAwKSB7CgkgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkZpbGVVcGxvYWRFcnJvcih7CgkgICAgICAgICAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX1VQTE9BREZJTEVfRVJST1IsCgkgICAgICAgICAgICAgICAgICAgIGlkOiBvcHRpb25zLmlkCgkgICAgICAgICAgICAgICAgfSk7CgkgICAgICAgICAgICAgICAgcmV0dXJuOwoJICAgICAgICAgICAgfQoKCSAgICAgICAgICAgIHZhciB4aHIgPSB1dGlscy54bWxyZXF1ZXN0KCk7CgkgICAgICAgICAgICB2YXIgb25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IoZSkgewoJICAgICAgICAgICAgICAgIG9wdGlvbnMub25GaWxlVXBsb2FkRXJyb3IoewoJICAgICAgICAgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9VUExPQURGSUxFX0VSUk9SLAoJICAgICAgICAgICAgICAgICAgICBpZDogb3B0aW9ucy5pZCwKCSAgICAgICAgICAgICAgICAgICAgeGhyOiB4aHIKCSAgICAgICAgICAgICAgICB9KTsKCSAgICAgICAgICAgIH07CgkgICAgICAgICAgICBpZiAoeGhyLnVwbG9hZCkgewoJICAgICAgICAgICAgICAgIHhoci51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBvcHRpb25zLm9uRmlsZVVwbG9hZFByb2dyZXNzLCBmYWxzZSk7CgkgICAgICAgICAgICB9CgkgICAgICAgICAgICBpZiAoeGhyLmFkZEV2ZW50TGlzdGVuZXIpIHsKCSAgICAgICAgICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvcHRpb25zLm9uRmlsZVVwbG9hZENhbmNlbGVkLCBmYWxzZSk7CgkgICAgICAgICAgICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoZSkgewoJICAgICAgICAgICAgICAgICAgICB0cnkgewoJICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGpzb24gPSB1dGlscy5wYXJzZUpTT04oeGhyLnJlc3BvbnNlVGV4dCk7CgkgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25GaWxlVXBsb2FkQ29tcGxldGUoanNvbik7CgkgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkZpbGVVcGxvYWRFcnJvcih7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0NPTk5DVElPTl9DQUxMQkFDS19JTk5FUl9FUlJPUiwKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZQoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRmlsZVVwbG9hZEVycm9yKHsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9VUExPQURGSUxFX0VSUk9SLAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHhoci5yZXNwb25zZVRleHQsCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IG9wdGlvbnMuaWQsCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyOiB4aHIKCSAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgfSwgZmFsc2UpOwoJICAgICAgICAgICAgICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIG9uRXJyb3IsIGZhbHNlKTsKCSAgICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSkgewoJICAgICAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7CgkgICAgICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkgewoJICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFqYXguc3RhdHVzID09PSAyMDApIHsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIganNvbiA9IHV0aWxzLnBhcnNlSlNPTih4aHIucmVzcG9uc2VUZXh0KTsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkZpbGVVcGxvYWRDb21wbGV0ZShqc29uKTsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25GaWxlVXBsb2FkRXJyb3IoewoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fVVBMT0FERklMRV9FUlJPUiwKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHhoci5yZXNwb25zZVRleHQsCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogb3B0aW9ucy5pZCwKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhocjogeGhyCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkZpbGVVcGxvYWRFcnJvcih7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX1VQTE9BREZJTEVfRVJST1IsCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHhoci5yZXNwb25zZVRleHQsCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBvcHRpb25zLmlkLAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHI6IHhocgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgICAgICAgICAgICAgeGhyLmFib3J0KCk7CgkgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRmlsZVVwbG9hZENhbmNlbGVkKCk7CgkgICAgICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgICAgICB9OwoJICAgICAgICAgICAgfQoKCSAgICAgICAgICAgIHhoci5vcGVuKCdQT1NUJywgdXBsb2FkVXJsKTsKCgkgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcigncmVzdHJpY3QtYWNjZXNzJywgJ3RydWUnKTsKCSAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnKi8qJyk7IC8vIEFuZHJvaWQgUVEgYnJvd3NlciBoYXMgc29tZSBwcm9ibGVtIHdpdGggdGhpcyBhdHRyaWJ1dGUuCgkgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQXV0aG9yaXphdGlvbicsICdCZWFyZXIgJyArIGFjYyk7CgoJICAgICAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7CgkgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBvcHRpb25zLmZpbGUuZGF0YSk7CgkgICAgICAgICAgICAvLyBmaXg6IGllOCBzdGF0dXMgZXJyb3IKCSAgICAgICAgICAgIHdpbmRvdy5YRG9tYWluUmVxdWVzdCAmJiAoeGhyLnJlYWR5U3RhdGUgPSAyKTsKCSAgICAgICAgICAgIHhoci5zZW5kKGZvcm1EYXRhKTsKCSAgICAgICAgfSwKCgkgICAgICAgIGRvd25sb2FkOiBmdW5jdGlvbiBkb3dubG9hZChvcHRpb25zKSB7CgkgICAgICAgICAgICBvcHRpb25zLm9uRmlsZURvd25sb2FkQ29tcGxldGUgPSBvcHRpb25zLm9uRmlsZURvd25sb2FkQ29tcGxldGUgfHwgRU1QVFlGTjsKCSAgICAgICAgICAgIG9wdGlvbnMub25GaWxlRG93bmxvYWRFcnJvciA9IG9wdGlvbnMub25GaWxlRG93bmxvYWRFcnJvciB8fCBFTVBUWUZOOwoKCSAgICAgICAgICAgIHZhciBhY2Nlc3NUb2tlbiA9IG9wdGlvbnMuYWNjZXNzVG9rZW4gfHwgdGhpcy5jb250ZXh0LmFjY2Vzc1Rva2VuOwoJICAgICAgICAgICAgaWYgKCFhY2Nlc3NUb2tlbikgewoJICAgICAgICAgICAgICAgIG9wdGlvbnMub25GaWxlRG93bmxvYWRFcnJvcih7CgkgICAgICAgICAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0RPV05MT0FERklMRV9OT19MT0dJTiwKCSAgICAgICAgICAgICAgICAgICAgaWQ6IG9wdGlvbnMuaWQKCSAgICAgICAgICAgICAgICB9KTsKCSAgICAgICAgICAgICAgICByZXR1cm47CgkgICAgICAgICAgICB9CgoJICAgICAgICAgICAgdmFyIG9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yKGUpIHsKCSAgICAgICAgICAgICAgICBvcHRpb25zLm9uRmlsZURvd25sb2FkRXJyb3IoewoJICAgICAgICAgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9ET1dOTE9BREZJTEVfRVJST1IsCgkgICAgICAgICAgICAgICAgICAgIGlkOiBvcHRpb25zLmlkLAoJICAgICAgICAgICAgICAgICAgICB4aHI6IHhocgoJICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgfTsKCgkgICAgICAgICAgICBpZiAoIXV0aWxzLmlzQ2FuRG93bkxvYWRGaWxlKSB7CgkgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkZpbGVEb3dubG9hZENvbXBsZXRlKCk7CgkgICAgICAgICAgICAgICAgcmV0dXJuOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgdmFyIHhociA9IHV0aWxzLnhtbHJlcXVlc3QoKTsKCSAgICAgICAgICAgIGlmICgnYWRkRXZlbnRMaXN0ZW5lcicgaW4geGhyKSB7CgkgICAgICAgICAgICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoZSkgewoJICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRmlsZURvd25sb2FkQ29tcGxldGUoeGhyLnJlc3BvbnNlLCB4aHIpOwoJICAgICAgICAgICAgICAgIH0sIGZhbHNlKTsKCSAgICAgICAgICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvbkVycm9yLCBmYWxzZSk7CgkgICAgICAgICAgICB9IGVsc2UgaWYgKCdvbnJlYWR5c3RhdGVjaGFuZ2UnIGluIHhocikgewoJICAgICAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7CgkgICAgICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkgewoJICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFqYXguc3RhdHVzID09PSAyMDApIHsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRmlsZURvd25sb2FkQ29tcGxldGUoeGhyLnJlc3BvbnNlLCB4aHIpOwoJICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRmlsZURvd25sb2FkRXJyb3IoewoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9ET1dOTE9BREZJTEVfRVJST1IsCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBvcHRpb25zLmlkLAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHI6IHhocgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgICAgICAgICAgICAgeGhyLmFib3J0KCk7CgkgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRmlsZURvd25sb2FkRXJyb3IoewoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0RPV05MT0FERklMRV9FUlJPUiwKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogb3B0aW9ucy5pZCwKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHI6IHhocgoJICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgkgICAgICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgICAgICB9OwoJICAgICAgICAgICAgfQoKCSAgICAgICAgICAgIHZhciBtZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCAnR0VUJzsKCSAgICAgICAgICAgIHZhciByZXNUeXBlID0gb3B0aW9ucy5yZXNwb25zZVR5cGUgfHwgJ2Jsb2InOwoJICAgICAgICAgICAgdmFyIG1pbWVUeXBlID0gb3B0aW9ucy5taW1lVHlwZSB8fCAndGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZCc7CgkgICAgICAgICAgICB4aHIub3BlbihtZXRob2QsIG9wdGlvbnMudXJsKTsKCSAgICAgICAgICAgIGlmICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcpIHsKCSAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gcmVzVHlwZTsKCSAgICAgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICAgICAgeGhyLm92ZXJyaWRlTWltZVR5cGUobWltZVR5cGUpOwoJICAgICAgICAgICAgfQoKCSAgICAgICAgICAgIHZhciBpbm5lckhlYWVyID0gewoJICAgICAgICAgICAgICAgICdYLVJlcXVlc3RlZC1XaXRoJzogJ1hNTEh0dHBSZXF1ZXN0JywKCSAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScsCgkgICAgICAgICAgICAgICAgJ3NoYXJlLXNlY3JldCc6IG9wdGlvbnMuc2VjcmV0LAoJICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgYWNjZXNzVG9rZW4KCSAgICAgICAgICAgIH07CgkgICAgICAgICAgICB2YXIgaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyB8fCB7fTsKCSAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBoZWFkZXJzKSB7CgkgICAgICAgICAgICAgICAgaW5uZXJIZWFlcltrZXldID0gaGVhZGVyc1trZXldOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGlubmVySGVhZXIpIHsKCSAgICAgICAgICAgICAgICBpZiAoaW5uZXJIZWFlcltrZXldKSB7CgkgICAgICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgaW5uZXJIZWFlcltrZXldKTsKCSAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICB9CgkgICAgICAgICAgICAvLyBmaXg6IGllOCBzdGF0dXMgZXJyb3IKCSAgICAgICAgICAgIHdpbmRvdy5YRG9tYWluUmVxdWVzdCAmJiAoeGhyLnJlYWR5U3RhdGUgPSAyKTsKCSAgICAgICAgICAgIHhoci5zZW5kKG51bGwpOwoJICAgICAgICB9LAoKCSAgICAgICAgcGFyc2VUZXh0TWVzc2FnZTogZnVuY3Rpb24gcGFyc2VUZXh0TWVzc2FnZShtZXNzYWdlLCBmYWNlcykgewoJICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSAnc3RyaW5nJykgewoJICAgICAgICAgICAgICAgIHJldHVybjsKCSAgICAgICAgICAgIH0KCgkgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGZhY2VzKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHsKCSAgICAgICAgICAgICAgICByZXR1cm4gewoJICAgICAgICAgICAgICAgICAgICBpc2Vtb2ppOiBmYWxzZSwKCSAgICAgICAgICAgICAgICAgICAgYm9keTogW3sKCSAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0eHQnLAoJICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogbWVzc2FnZQoJICAgICAgICAgICAgICAgICAgICB9XQoJICAgICAgICAgICAgICAgIH07CgkgICAgICAgICAgICB9CgoJICAgICAgICAgICAgdmFyIHJlY2VpdmVNc2cgPSBtZXNzYWdlOwoJICAgICAgICAgICAgdmFyIGVtZXNzYWdlID0gW107CgkgICAgICAgICAgICB2YXIgZXhwciA9IC9cW1teW1xdXXsyLDN9XF0vbWc7CgkgICAgICAgICAgICB2YXIgZW1vamkgPSByZWNlaXZlTXNnLm1hdGNoKGV4cHIpOwoKCSAgICAgICAgICAgIGlmICghZW1vamkgfHwgZW1vamkubGVuZ3RoIDwgMSkgewoJICAgICAgICAgICAgICAgIHJldHVybiB7CgkgICAgICAgICAgICAgICAgICAgIGlzZW1vamk6IGZhbHNlLAoJICAgICAgICAgICAgICAgICAgICBib2R5OiBbewoJICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3R4dCcsCgkgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBtZXNzYWdlCgkgICAgICAgICAgICAgICAgICAgIH1dCgkgICAgICAgICAgICAgICAgfTsKCSAgICAgICAgICAgIH0KCSAgICAgICAgICAgIHZhciBpc2Vtb2ppID0gZmFsc2U7CgkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVtb2ppLmxlbmd0aDsgaSsrKSB7CgkgICAgICAgICAgICAgICAgdmFyIHRtc2cgPSByZWNlaXZlTXNnLnN1YnN0cmluZygwLCByZWNlaXZlTXNnLmluZGV4T2YoZW1vamlbaV0pKSwKCSAgICAgICAgICAgICAgICAgICAgZXhpc3RFbW9qaSA9IFdlYklNLkVtb2ppLm1hcFtlbW9qaVtpXV07CgoJICAgICAgICAgICAgICAgIGlmICh0bXNnKSB7CgkgICAgICAgICAgICAgICAgICAgIGVtZXNzYWdlLnB1c2goewoJICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3R4dCcsCgkgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB0bXNnCgkgICAgICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgICAgICBpZiAoIWV4aXN0RW1vamkpIHsKCSAgICAgICAgICAgICAgICAgICAgZW1lc3NhZ2UucHVzaCh7CgkgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndHh0JywKCSAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGVtb2ppW2ldCgkgICAgICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKCSAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgdmFyIGVtb2ppU3RyID0gV2ViSU0uRW1vamkubWFwID8gV2ViSU0uRW1vamkucGF0aCArIGV4aXN0RW1vamkgOiBudWxsOwoKCSAgICAgICAgICAgICAgICBpZiAoZW1vamlTdHIpIHsKCSAgICAgICAgICAgICAgICAgICAgaXNlbW9qaSA9IHRydWU7CgkgICAgICAgICAgICAgICAgICAgIGVtZXNzYWdlLnB1c2goewoJICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vtb2ppJywKCSAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGVtb2ppU3RyCgkgICAgICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICAgICAgICAgIGVtZXNzYWdlLnB1c2goewoJICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3R4dCcsCgkgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBlbW9qaVtpXQoJICAgICAgICAgICAgICAgICAgICB9KTsKCSAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgdmFyIHJlc3RNc2dJbmRleCA9IHJlY2VpdmVNc2cuaW5kZXhPZihlbW9qaVtpXSkgKyBlbW9qaVtpXS5sZW5ndGg7CgkgICAgICAgICAgICAgICAgcmVjZWl2ZU1zZyA9IHJlY2VpdmVNc2cuc3Vic3RyaW5nKHJlc3RNc2dJbmRleCk7CgkgICAgICAgICAgICB9CgkgICAgICAgICAgICBpZiAocmVjZWl2ZU1zZykgewoJICAgICAgICAgICAgICAgIGVtZXNzYWdlLnB1c2goewoJICAgICAgICAgICAgICAgICAgICB0eXBlOiAndHh0JywKCSAgICAgICAgICAgICAgICAgICAgZGF0YTogcmVjZWl2ZU1zZwoJICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgaWYgKGlzZW1vamkpIHsKCSAgICAgICAgICAgICAgICByZXR1cm4gewoJICAgICAgICAgICAgICAgICAgICBpc2Vtb2ppOiBpc2Vtb2ppLAoJICAgICAgICAgICAgICAgICAgICBib2R5OiBlbWVzc2FnZQoJICAgICAgICAgICAgICAgIH07CgkgICAgICAgICAgICB9CgkgICAgICAgICAgICByZXR1cm4gewoJICAgICAgICAgICAgICAgIGlzZW1vamk6IGZhbHNlLAoJICAgICAgICAgICAgICAgIGJvZHk6IFt7CgkgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0eHQnLAoJICAgICAgICAgICAgICAgICAgICBkYXRhOiBtZXNzYWdlCgkgICAgICAgICAgICAgICAgfV0KCSAgICAgICAgICAgIH07CgkgICAgICAgIH0sCgoJICAgICAgICBwYXJzZVVyaTogZnVuY3Rpb24gcGFyc2VVcmkoKSB7CgkgICAgICAgICAgICB2YXIgcGF0dGVybiA9IC8oW15cP3wmXSlcdys9KFteJl0rKS9nOwoJICAgICAgICAgICAgdmFyIHVyaSA9IHt9OwoJICAgICAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpIHsKCSAgICAgICAgICAgICAgICB2YXIgYXJncyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gubWF0Y2gocGF0dGVybik7CgkgICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBhcmdzKSB7CgkgICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSBhcmdzW2ldOwoJICAgICAgICAgICAgICAgICAgICB2YXIgZXEgPSBzdHIuaW5kZXhPZignPScpOwoJICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gc3RyLnN1YnN0cigwLCBlcSk7CgkgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHN0ci5zdWJzdHIoZXEgKyAxKTsKCSAgICAgICAgICAgICAgICAgICAgdXJpW2tleV0gPSB2YWx1ZTsKCSAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICB9CgkgICAgICAgICAgICByZXR1cm4gdXJpOwoJICAgICAgICB9LAoKCSAgICAgICAgcGFyc2VIcmVmSGFzaDogZnVuY3Rpb24gcGFyc2VIcmVmSGFzaCgpIHsKCSAgICAgICAgICAgIHZhciBwYXR0ZXJuID0gLyhbXlwjfCZdKVx3Kz0oW14mXSspL2c7CgkgICAgICAgICAgICB2YXIgdXJpID0ge307CgkgICAgICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2gpIHsKCSAgICAgICAgICAgICAgICB2YXIgYXJncyA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLm1hdGNoKHBhdHRlcm4pOwoJICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gYXJncykgewoJICAgICAgICAgICAgICAgICAgICB2YXIgc3RyID0gYXJnc1tpXTsKCSAgICAgICAgICAgICAgICAgICAgdmFyIGVxID0gc3RyLmluZGV4T2YoJz0nKTsKCSAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IHN0ci5zdWJzdHIoMCwgZXEpOwoJICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBzdHIuc3Vic3RyKGVxICsgMSk7CgkgICAgICAgICAgICAgICAgICAgIHVyaVtrZXldID0gdmFsdWU7CgkgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgcmV0dXJuIHVyaTsKCSAgICAgICAgfSwKCgkgICAgICAgIHhtbHJlcXVlc3Q6IF94bWxyZXF1ZXN0LAoKCSAgICAgICAgZ2V0WG1sRmlyc3RDaGlsZDogZnVuY3Rpb24gZ2V0WG1sRmlyc3RDaGlsZChkYXRhLCB0YWdOYW1lKSB7CgkgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBkYXRhLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUpOwoJICAgICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PSAwKSB7CgkgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CgkgICAgICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZHJlblswXTsKCSAgICAgICAgICAgIH0KCSAgICAgICAgfSwKCSAgICAgICAgYWpheDogZnVuY3Rpb24gYWpheChvcHRpb25zKSB7CgkgICAgICAgICAgICB2YXIgZGF0YVR5cGUgPSBvcHRpb25zLmRhdGFUeXBlIHx8ICd0ZXh0JzsKCSAgICAgICAgICAgIHZhciBzdWMgPSBvcHRpb25zLnN1Y2Nlc3MgfHwgRU1QVFlGTjsKCSAgICAgICAgICAgIHZhciBlcnJvciA9IG9wdGlvbnMuZXJyb3IgfHwgRU1QVFlGTjsKCSAgICAgICAgICAgIHZhciB4aHIgPSB1dGlscy54bWxyZXF1ZXN0KCk7CgoJICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHsKCSAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHsKCSAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXR1cyA9IHhoci5zdGF0dXMgfHwgMDsKCSAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gMjAwKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZGF0YVR5cGUpIHsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndGV4dCc6CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWMoeGhyLnJlc3BvbnNlVGV4dCk7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2pzb24nOgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGpzb24gPSB1dGlscy5wYXJzZUpTT04oeGhyLnJlc3BvbnNlVGV4dCk7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWMoanNvbiwgeGhyKTsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAneG1sJzoKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIucmVzcG9uc2VYTUwgJiYgeGhyLnJlc3BvbnNlWE1MLmRvY3VtZW50RWxlbWVudCkgewoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yyh4aHIucmVzcG9uc2VYTUwuZG9jdW1lbnRFbGVtZW50LCB4aHIpOwoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcih7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0NPTk5DVElPTl9BSkFYX0VSUk9SLAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB4aHIucmVzcG9uc2VUZXh0CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yyh4aHIucmVzcG9uc2UgfHwgeGhyLnJlc3BvbnNlVGV4dCwgeGhyKTsKCSAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcih7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0NPTk5DVElPTl9BSkFYX0VSUk9SLAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBlCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgkgICAgICAgICAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CgkgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcih7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX0FKQVhfRVJST1IsCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogeGhyLnJlc3BvbnNlVGV4dAoJICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgkgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CgkgICAgICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSAwKSB7CgkgICAgICAgICAgICAgICAgICAgIGVycm9yKHsKCSAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0NPTk5DVElPTl9BSkFYX0VSUk9SLAoJICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogeGhyLnJlc3BvbnNlVGV4dAoJICAgICAgICAgICAgICAgICAgICB9KTsKCSAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICB9OwoKCSAgICAgICAgICAgIGlmIChvcHRpb25zLnJlc3BvbnNlVHlwZSkgewoJICAgICAgICAgICAgICAgIGlmICh4aHIucmVzcG9uc2VUeXBlKSB7CgkgICAgICAgICAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSBvcHRpb25zLnJlc3BvbnNlVHlwZTsKCSAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICB9CgkgICAgICAgICAgICBpZiAob3B0aW9ucy5taW1lVHlwZSkgewoJICAgICAgICAgICAgICAgIGlmICh1dGlscy5oYXNPdmVycmlkZU1pbWVUeXBlKSB7CgkgICAgICAgICAgICAgICAgICAgIHhoci5vdmVycmlkZU1pbWVUeXBlKG9wdGlvbnMubWltZVR5cGUpOwoJICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgIH0KCgkgICAgICAgICAgICB2YXIgdHlwZSA9IG9wdGlvbnMudHlwZSB8fCAnUE9TVCcsCgkgICAgICAgICAgICAgICAgZGF0YSA9IG9wdGlvbnMuZGF0YSB8fCBudWxsLAoJICAgICAgICAgICAgICAgIHRlbXBEYXRhID0gJyc7CgoJICAgICAgICAgICAgaWYgKHR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ2dldCcgJiYgZGF0YSkgewoJICAgICAgICAgICAgICAgIGZvciAodmFyIG8gaW4gZGF0YSkgewoJICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShvKSkgewoJICAgICAgICAgICAgICAgICAgICAgICAgdGVtcERhdGEgKz0gbyArICc9JyArIGRhdGFbb10gKyAnJic7CgkgICAgICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgdGVtcERhdGEgPSB0ZW1wRGF0YSA/IHRlbXBEYXRhLnNsaWNlKDAsIC0xKSA6IHRlbXBEYXRhOwoJICAgICAgICAgICAgICAgIG9wdGlvbnMudXJsICs9IChvcHRpb25zLnVybC5pbmRleE9mKCc/JykgPiAwID8gJyYnIDogJz8nKSArICh0ZW1wRGF0YSA/IHRlbXBEYXRhICsgJyYnIDogdGVtcERhdGEpICsgJ192PScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKCSAgICAgICAgICAgICAgICBkYXRhID0gbnVsbDsKCSAgICAgICAgICAgICAgICB0ZW1wRGF0YSA9IG51bGw7CgkgICAgICAgICAgICB9CgkgICAgICAgICAgICB4aHIub3Blbih0eXBlLCBvcHRpb25zLnVybCwgdXRpbHMuaXNDYW5TZXRSZXF1ZXN0SGVhZGVyKTsKCgkgICAgICAgICAgICBpZiAodXRpbHMuaXNDYW5TZXRSZXF1ZXN0SGVhZGVyKSB7CgkgICAgICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnMgfHwge307CgkgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGhlYWRlcnMpIHsKCSAgICAgICAgICAgICAgICAgICAgaWYgKGhlYWRlcnMuaGFzT3duUHJvcGVydHkoa2V5KSkgewoJICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoa2V5LCBoZWFkZXJzW2tleV0pOwoJICAgICAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgLy8gZml4OiBpZTggc3RhdHVzIGVycm9yCgkgICAgICAgICAgICB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgKHhoci5yZWFkeVN0YXRlID0gMik7CgkgICAgICAgICAgICB4aHIuc2VuZChkYXRhKTsKCSAgICAgICAgICAgIHJldHVybiB4aHI7CgkgICAgICAgIH0sCgkgICAgICAgIHRzOiBmdW5jdGlvbiB0cygpIHsKCSAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoKTsKCSAgICAgICAgICAgIHZhciBIb3VycyA9IGQuZ2V0SG91cnMoKTsgLy/ojrflj5blvZPliY3lsI/ml7bmlbAoMC0yMykKCSAgICAgICAgICAgIHZhciBNaW51dGVzID0gZC5nZXRNaW51dGVzKCk7IC8v6I635Y+W5b2T5YmN5YiG6ZKf5pWwKDAtNTkpCgkgICAgICAgICAgICB2YXIgU2Vjb25kcyA9IGQuZ2V0U2Vjb25kcygpOyAvL+iOt+WPluW9k+WJjeenkuaVsCgwLTU5KQoJICAgICAgICAgICAgdmFyIE1pbGxpc2Vjb25kcyA9IGQuZ2V0TWlsbGlzZWNvbmRzKCk7IC8v6I635Y+W5b2T5YmN5q+r56eSCgkgICAgICAgICAgICByZXR1cm4gKEhvdXJzIDwgMTAgPyAiMCIgKyBIb3VycyA6IEhvdXJzKSArICc6JyArIChNaW51dGVzIDwgMTAgPyAiMCIgKyBNaW51dGVzIDogTWludXRlcykgKyAnOicgKyAoU2Vjb25kcyA8IDEwID8gIjAiICsgU2Vjb25kcyA6IFNlY29uZHMpICsgJzonICsgTWlsbGlzZWNvbmRzICsgJyAnOwoJICAgICAgICB9LAoKCSAgICAgICAgZ2V0T2JqZWN0S2V5OiBmdW5jdGlvbiBnZXRPYmplY3RLZXkob2JqLCB2YWwpIHsKCSAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKCSAgICAgICAgICAgICAgICBpZiAob2JqW2tleV0gPT0gdmFsKSB7CgkgICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXk7CgkgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgcmV0dXJuICcnOwoJICAgICAgICB9LAoKCSAgICAgICAgc3ByaW50ZjogZnVuY3Rpb24gc3ByaW50ZigpIHsKCSAgICAgICAgICAgIHZhciBhcmcgPSBhcmd1bWVudHMsCgkgICAgICAgICAgICAgICAgc3RyID0gYXJnWzBdIHx8ICcnLAoJICAgICAgICAgICAgICAgIGksCgkgICAgICAgICAgICAgICAgbGVuOwoJICAgICAgICAgICAgZm9yIChpID0gMSwgbGVuID0gYXJnLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CgkgICAgICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoLyVzLywgYXJnW2ldKTsKCSAgICAgICAgICAgIH0KCSAgICAgICAgICAgIHJldHVybiBzdHI7CgkgICAgICAgIH0sCgoJICAgICAgICBzZXRDb29raWU6IGZ1bmN0aW9uIHNldENvb2tpZShuYW1lLCB2YWx1ZSwgZGF5cykgewoJICAgICAgICAgICAgdmFyIGNvb2tpZSA9IG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpOwoJICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXlzID09ICdudW1iZXInKSB7CgkgICAgICAgICAgICAgICAgY29va2llICs9ICc7IG1heC1hZ2U6ICcgKyBkYXlzICogNjAgKiA2MCAqIDI0OwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llOwoJICAgICAgICB9LAoKCSAgICAgICAgZ2V0Q29va2llOiBmdW5jdGlvbiBnZXRDb29raWUoKSB7CgkgICAgICAgICAgICB2YXIgYWxsQ29va2llID0ge307CgkgICAgICAgICAgICB2YXIgYWxsID0gZG9jdW1lbnQuY29va2llOwoJICAgICAgICAgICAgaWYgKGFsbCA9PT0gIiIpIHsKCSAgICAgICAgICAgICAgICByZXR1cm4gYWxsQ29va2llOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgdmFyIGxpc3QgPSBhbGwuc3BsaXQoIjsgIik7CgkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHsKCSAgICAgICAgICAgICAgICB2YXIgY29va2llID0gbGlzdFtpXTsKCSAgICAgICAgICAgICAgICB2YXIgcCA9IGNvb2tpZS5pbmRleE9mKCc9Jyk7CgkgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBjb29raWUuc3Vic3RyaW5nKDAsIHApOwoJICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNvb2tpZS5zdWJzdHJpbmcocCArIDEpOwoJICAgICAgICAgICAgICAgIHZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsKCSAgICAgICAgICAgICAgICBhbGxDb29raWVbbmFtZV0gPSB2YWx1ZTsKCSAgICAgICAgICAgIH0KCSAgICAgICAgICAgIHJldHVybiBhbGxDb29raWU7CgkgICAgICAgIH0KCSAgICB9OwoKCSAgICBleHBvcnRzLnV0aWxzID0gdXRpbHM7Cgl9KSgpOwoKLyoqKi8gfSksCgovKioqLyAyMDg6Ci8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCgkidXNlIHN0cmljdCI7CgoJOwoJKGZ1bmN0aW9uICgpIHsKCgkgICAgZXhwb3J0cy5jb2RlID0gewoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fVVNFUl9OT1RfQVNTSUdOX0VSUk9SOiAwLAoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fT1BFTl9FUlJPUjogMSwKCSAgICAgICAgV0VCSU1fQ09OTkNUSU9OX0FVVEhfRVJST1I6IDIsCgkgICAgICAgIFdFQklNX0NPTk5DVElPTl9PUEVOX1VTRVJHUklEX0VSUk9SOiAzLAoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fQVRUQUNIX0VSUk9SOiA0LAoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fQVRUQUNIX1VTRVJHUklEX0VSUk9SOiA1LAoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fUkVPUEVOX0VSUk9SOiA2LAoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fU0VSVkVSX0NMT1NFX0VSUk9SOiA3LCAvLzc6IGNsaWVudC1zaWRlIG5ldHdvcmsgb2ZmbGluZSAobmV0OjpFUlJfSU5URVJORVRfRElTQ09OTkVDVEVEKQoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fU0VSVkVSX0VSUk9SOiA4LCAvLzg6IG9mZmxpbmUgYnkgbXVsdGkgbG9naW4KCSAgICAgICAgV0VCSU1fQ09OTkNUSU9OX0lRX0VSUk9SOiA5LAoKCSAgICAgICAgV0VCSU1fQ09OTkNUSU9OX1BJTkdfRVJST1I6IDEwLAoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fTk9USUZZVkVSU0lPTl9FUlJPUjogMTEsCgkgICAgICAgIFdFQklNX0NPTk5DVElPTl9HRVRST1NURVJfRVJST1I6IDEyLAoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fQ1JPU1NET01BSU5fRVJST1I6IDEzLAoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fTElTVEVOSU5HX09VVE9GX01BWFJFVFJJRVM6IDE0LAoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fUkVDRUlWRU1TR19DT05URU5URVJST1I6IDE1LAoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fRElTQ09OTkVDVEVEOiAxNiwgLy8xNjogc2VydmVyLXNpZGUgY2xvc2UgdGhlIHdlYnNvY2tldCBjb25uZWN0aW9uCgkgICAgICAgIFdFQklNX0NPTk5DVElPTl9BSkFYX0VSUk9SOiAxNywKCSAgICAgICAgV0VCSU1fQ09OTkNUSU9OX0pPSU5ST09NX0VSUk9SOiAxOCwKCSAgICAgICAgV0VCSU1fQ09OTkNUSU9OX0dFVFJPT01fRVJST1I6IDE5LAoKCSAgICAgICAgV0VCSU1fQ09OTkNUSU9OX0dFVFJPT01JTkZPX0VSUk9SOiAyMCwKCSAgICAgICAgV0VCSU1fQ09OTkNUSU9OX0dFVFJPT01NRU1CRVJfRVJST1I6IDIxLAoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fR0VUUk9PTU9DQ1VQQU5UU19FUlJPUjogMjIsCgkgICAgICAgIFdFQklNX0NPTk5DVElPTl9MT0FEX0NIQVRST09NX0VSUk9SOiAyMywKCSAgICAgICAgV0VCSU1fQ09OTkNUSU9OX05PVF9TVVBQT1JUX0NIQVRST09NX0VSUk9SOiAyNCwKCSAgICAgICAgV0VCSU1fQ09OTkNUSU9OX0pPSU5DSEFUUk9PTV9FUlJPUjogMjUsCgkgICAgICAgIFdFQklNX0NPTk5DVElPTl9RVUlUQ0hBVFJPT01fRVJST1I6IDI2LAoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fQVBQS0VZX05PVF9BU1NJR05fRVJST1I6IDI3LAoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fVE9LRU5fTk9UX0FTU0lHTl9FUlJPUjogMjgsCgkgICAgICAgIFdFQklNX0NPTk5DVElPTl9TRVNTSU9OSURfTk9UX0FTU0lHTl9FUlJPUjogMjksCgoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fUklEX05PVF9BU1NJR05fRVJST1I6IDMwLAoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fQ0FMTEJBQ0tfSU5ORVJfRVJST1I6IDMxLCAvLzMxOiDlpITnkIbkuIvooYzmtojmga/lh7rplJkgdHJ5L2NhdGNo5oqb5Ye65byC5bi4CgkgICAgICAgIFdFQklNX0NPTk5DVElPTl9DTElFTlRfT0ZGTElORTogMzIsIC8vMzI6IGNsaWVudCBvZmZsaW5lCgkgICAgICAgIFdFQklNX0NPTk5DVElPTl9DTElFTlRfTE9HT1VUOiAzMywgLy8zMzogY2xpZW50IGxvZ291dAoJICAgICAgICBXRUJJTV9DT05OQ1RJT05fQ0xJRU5UX1RPT19NVUNIX0VSUk9SOiAzNCwgLy8gMzQ6IE92ZXIgYW1vdW50IG9mIHRoZSB0YWJzIGEgdXNlciBvcGVuZWQgaW4gdGhlIHNhbWUgYnJvd3NlcgoJICAgICAgICBXRUJJTV9DT05ORUNUSU9OX0FDQ0VQVF9JTlZJVEFUSU9OX0ZST01fR1JPVVA6IDM1LAoJICAgICAgICBXRUJJTV9DT05ORUNUSU9OX0RFQ0xJTkVfSU5WSVRBVElPTl9GUk9NX0dST1VQOiAzNiwKCSAgICAgICAgV0VCSU1fQ09OTkVDVElPTl9BQ0NFUFRfSk9JTl9HUk9VUDogMzcsCgkgICAgICAgIFdFQklNX0NPTk5FQ1RJT05fREVDTElORV9KT0lOX0dST1VQOiAzOCwKCSAgICAgICAgV0VCSU1fQ09OTkVDVElPTl9DTE9TRUQ6IDM5LAoKCSAgICAgICAgV0VCSU1fVVBMT0FERklMRV9CUk9XU0VSX0VSUk9SOiAxMDAsCgkgICAgICAgIFdFQklNX1VQTE9BREZJTEVfRVJST1I6IDEwMSwKCSAgICAgICAgV0VCSU1fVVBMT0FERklMRV9OT19MT0dJTjogMTAyLAoJICAgICAgICBXRUJJTV9VUExPQURGSUxFX05PX0ZJTEU6IDEwMywKCgkgICAgICAgIFdFQklNX0RPV05MT0FERklMRV9FUlJPUjogMjAwLAoJICAgICAgICBXRUJJTV9ET1dOTE9BREZJTEVfTk9fTE9HSU46IDIwMSwKCSAgICAgICAgV0VCSU1fRE9XTkxPQURGSUxFX0JST1dTRVJfRVJST1I6IDIwMiwKCgkgICAgICAgIFdFQklNX01FU1NBR0VfUkVDX1RFWFQ6IDMwMCwKCSAgICAgICAgV0VCSU1fTUVTU0FHRV9SRUNfVEVYVF9FUlJPUjogMzAxLAoJICAgICAgICBXRUJJTV9NRVNTQUdFX1JFQ19FTU9USU9OOiAzMDIsCgkgICAgICAgIFdFQklNX01FU1NBR0VfUkVDX1BIT1RPOiAzMDMsCgkgICAgICAgIFdFQklNX01FU1NBR0VfUkVDX0FVRElPOiAzMDQsCgkgICAgICAgIFdFQklNX01FU1NBR0VfUkVDX0FVRElPX0ZJTEU6IDMwNSwKCSAgICAgICAgV0VCSU1fTUVTU0FHRV9SRUNfVkVESU86IDMwNiwKCSAgICAgICAgV0VCSU1fTUVTU0FHRV9SRUNfVkVESU9fRklMRTogMzA3LAoJICAgICAgICBXRUJJTV9NRVNTQUdFX1JFQ19GSUxFOiAzMDgsCgkgICAgICAgIFdFQklNX01FU1NBR0VfU0VEX1RFWFQ6IDMwOSwKCSAgICAgICAgV0VCSU1fTUVTU0FHRV9TRURfRU1PVElPTjogMzEwLAoJICAgICAgICBXRUJJTV9NRVNTQUdFX1NFRF9QSE9UTzogMzExLAoJICAgICAgICBXRUJJTV9NRVNTQUdFX1NFRF9BVURJTzogMzEyLAoJICAgICAgICBXRUJJTV9NRVNTQUdFX1NFRF9BVURJT19GSUxFOiAzMTMsCgkgICAgICAgIFdFQklNX01FU1NBR0VfU0VEX1ZFRElPOiAzMTQsCgkgICAgICAgIFdFQklNX01FU1NBR0VfU0VEX1ZFRElPX0ZJTEU6IDMxNSwKCSAgICAgICAgV0VCSU1fTUVTU0FHRV9TRURfRklMRTogMzE2LAoJICAgICAgICBXRUJJTV9NRVNTQUdFX1NFRF9FUlJPUjogMzE3LAoKCSAgICAgICAgU1RBVFVTX0lOSVQ6IDQwMCwKCSAgICAgICAgU1RBVFVTX0RPTE9HSU5fVVNFUkdSSUQ6IDQwMSwKCSAgICAgICAgU1RBVFVTX0RPTE9HSU5fSU06IDQwMiwKCSAgICAgICAgU1RBVFVTX09QRU5FRDogNDAzLAoJICAgICAgICBTVEFUVVNfQ0xPU0lORzogNDA0LAoJICAgICAgICBTVEFUVVNfQ0xPU0VEOiA0MDUsCgkgICAgICAgIFNUQVRVU19FUlJPUjogNDA2CgkgICAgfTsKCX0pKCk7CgovKioqLyB9KSwKCi8qKiovIDIxMjoKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCTsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CgkJaWYgKHRydWUpIHsKCQkJLy8gQ29tbW9uSlMKCQkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMyksIF9fd2VicGFja19yZXF1aXJlX18oMjE0KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMTUpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxNiksIF9fd2VicGFja19yZXF1aXJlX18oMjE3KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMTgpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxOSksIF9fd2VicGFja19yZXF1aXJlX18oMjIwKSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMjEpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyMiksIF9fd2VicGFja19yZXF1aXJlX18oMjIzKSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMjQpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyNSksIF9fd2VicGFja19yZXF1aXJlX18oMjI2KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMjcpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyOCksIF9fd2VicGFja19yZXF1aXJlX18oMjI5KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMzApLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzMSksIF9fd2VicGFja19yZXF1aXJlX18oMjMyKSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMzMpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzNCksIF9fd2VicGFja19yZXF1aXJlX18oMjM1KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMzYpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzNyksIF9fd2VicGFja19yZXF1aXJlX18oMjM4KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMzkpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0MCksIF9fd2VicGFja19yZXF1aXJlX18oMjQxKSwgX193ZWJwYWNrX3JlcXVpcmVfXygyNDIpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0MyksIF9fd2VicGFja19yZXF1aXJlX18oMjQ0KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyNDUpKTsKCQl9CgkJZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSB7CgkJCS8vIEFNRAoJCQlkZWZpbmUoWyIuL2NvcmUiLCAiLi94NjQtY29yZSIsICIuL2xpYi10eXBlZGFycmF5cyIsICIuL2VuYy11dGYxNiIsICIuL2VuYy1iYXNlNjQiLCAiLi9tZDUiLCAiLi9zaGExIiwgIi4vc2hhMjU2IiwgIi4vc2hhMjI0IiwgIi4vc2hhNTEyIiwgIi4vc2hhMzg0IiwgIi4vc2hhMyIsICIuL3JpcGVtZDE2MCIsICIuL2htYWMiLCAiLi9wYmtkZjIiLCAiLi9ldnBrZGYiLCAiLi9jaXBoZXItY29yZSIsICIuL21vZGUtY2ZiIiwgIi4vbW9kZS1jdHIiLCAiLi9tb2RlLWN0ci1nbGFkbWFuIiwgIi4vbW9kZS1vZmIiLCAiLi9tb2RlLWVjYiIsICIuL3BhZC1hbnNpeDkyMyIsICIuL3BhZC1pc28xMDEyNiIsICIuL3BhZC1pc285Nzk3MSIsICIuL3BhZC16ZXJvcGFkZGluZyIsICIuL3BhZC1ub3BhZGRpbmciLCAiLi9mb3JtYXQtaGV4IiwgIi4vYWVzIiwgIi4vdHJpcGxlZGVzIiwgIi4vcmM0IiwgIi4vcmFiYml0IiwgIi4vcmFiYml0LWxlZ2FjeSJdLCBmYWN0b3J5KTsKCQl9CgkJZWxzZSB7CgkJCS8vIEdsb2JhbCAoYnJvd3NlcikKCQkJcm9vdC5DcnlwdG9KUyA9IGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7CgkJfQoJfSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCgkJcmV0dXJuIENyeXB0b0pTOwoKCX0pKTsKCi8qKiovIH0pLAoKLyoqKi8gMjEzOgovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkgewoJCWlmICh0cnVlKSB7CgkJCS8vIENvbW1vbkpTCgkJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoKTsKCQl9CgkJZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSB7CgkJCS8vIEFNRAoJCQlkZWZpbmUoW10sIGZhY3RvcnkpOwoJCX0KCQllbHNlIHsKCQkJLy8gR2xvYmFsIChicm93c2VyKQoJCQlyb290LkNyeXB0b0pTID0gZmFjdG9yeSgpOwoJCX0KCX0odGhpcywgZnVuY3Rpb24gKCkgewoKCQkvKioKCQkgKiBDcnlwdG9KUyBjb3JlIGNvbXBvbmVudHMuCgkJICovCgkJdmFyIENyeXB0b0pTID0gQ3J5cHRvSlMgfHwgKGZ1bmN0aW9uIChNYXRoLCB1bmRlZmluZWQpIHsKCQkgICAgLyoKCQkgICAgICogTG9jYWwgcG9seWZpbCBvZiBPYmplY3QuY3JlYXRlCgkJICAgICAqLwoJCSAgICB2YXIgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fCAoZnVuY3Rpb24gKCkgewoJCSAgICAgICAgZnVuY3Rpb24gRigpIHt9OwoKCQkgICAgICAgIHJldHVybiBmdW5jdGlvbiAob2JqKSB7CgkJICAgICAgICAgICAgdmFyIHN1YnR5cGU7CgoJCSAgICAgICAgICAgIEYucHJvdG90eXBlID0gb2JqOwoKCQkgICAgICAgICAgICBzdWJ0eXBlID0gbmV3IEYoKTsKCgkJICAgICAgICAgICAgRi5wcm90b3R5cGUgPSBudWxsOwoKCQkgICAgICAgICAgICByZXR1cm4gc3VidHlwZTsKCQkgICAgICAgIH07CgkJICAgIH0oKSkKCgkJICAgIC8qKgoJCSAgICAgKiBDcnlwdG9KUyBuYW1lc3BhY2UuCgkJICAgICAqLwoJCSAgICB2YXIgQyA9IHt9OwoKCQkgICAgLyoqCgkJICAgICAqIExpYnJhcnkgbmFtZXNwYWNlLgoJCSAgICAgKi8KCQkgICAgdmFyIENfbGliID0gQy5saWIgPSB7fTsKCgkJICAgIC8qKgoJCSAgICAgKiBCYXNlIG9iamVjdCBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZS4KCQkgICAgICovCgkJICAgIHZhciBCYXNlID0gQ19saWIuQmFzZSA9IChmdW5jdGlvbiAoKSB7CgoKCQkgICAgICAgIHJldHVybiB7CgkJICAgICAgICAgICAgLyoqCgkJICAgICAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoaXMgb2JqZWN0LgoJCSAgICAgICAgICAgICAqCgkJICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG92ZXJyaWRlcyBQcm9wZXJ0aWVzIHRvIGNvcHkgaW50byB0aGUgbmV3IG9iamVjdC4KCQkgICAgICAgICAgICAgKgoJCSAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG5ldyBvYmplY3QuCgkJICAgICAgICAgICAgICoKCQkgICAgICAgICAgICAgKiBAc3RhdGljCgkJICAgICAgICAgICAgICoKCQkgICAgICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICAgICAqCgkJICAgICAgICAgICAgICogICAgIHZhciBNeVR5cGUgPSBDcnlwdG9KUy5saWIuQmFzZS5leHRlbmQoewoJCSAgICAgICAgICAgICAqICAgICAgICAgZmllbGQ6ICd2YWx1ZScsCgkJICAgICAgICAgICAgICoKCQkgICAgICAgICAgICAgKiAgICAgICAgIG1ldGhvZDogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgICAqICAgICAgICAgfQoJCSAgICAgICAgICAgICAqICAgICB9KTsKCQkgICAgICAgICAgICAgKi8KCQkgICAgICAgICAgICBleHRlbmQ6IGZ1bmN0aW9uIChvdmVycmlkZXMpIHsKCQkgICAgICAgICAgICAgICAgLy8gU3Bhd24KCQkgICAgICAgICAgICAgICAgdmFyIHN1YnR5cGUgPSBjcmVhdGUodGhpcyk7CgoJCSAgICAgICAgICAgICAgICAvLyBBdWdtZW50CgkJICAgICAgICAgICAgICAgIGlmIChvdmVycmlkZXMpIHsKCQkgICAgICAgICAgICAgICAgICAgIHN1YnR5cGUubWl4SW4ob3ZlcnJpZGVzKTsKCQkgICAgICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGRlZmF1bHQgaW5pdGlhbGl6ZXIKCQkgICAgICAgICAgICAgICAgaWYgKCFzdWJ0eXBlLmhhc093blByb3BlcnR5KCdpbml0JykgfHwgdGhpcy5pbml0ID09PSBzdWJ0eXBlLmluaXQpIHsKCQkgICAgICAgICAgICAgICAgICAgIHN1YnR5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICAgICAgICAgICAgICBzdWJ0eXBlLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CgkJICAgICAgICAgICAgICAgICAgICB9OwoJCSAgICAgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgICAgICAvLyBJbml0aWFsaXplcidzIHByb3RvdHlwZSBpcyB0aGUgc3VidHlwZSBvYmplY3QKCQkgICAgICAgICAgICAgICAgc3VidHlwZS5pbml0LnByb3RvdHlwZSA9IHN1YnR5cGU7CgoJCSAgICAgICAgICAgICAgICAvLyBSZWZlcmVuY2Ugc3VwZXJ0eXBlCgkJICAgICAgICAgICAgICAgIHN1YnR5cGUuJHN1cGVyID0gdGhpczsKCgkJICAgICAgICAgICAgICAgIHJldHVybiBzdWJ0eXBlOwoJCSAgICAgICAgICAgIH0sCgoJCSAgICAgICAgICAgIC8qKgoJCSAgICAgICAgICAgICAqIEV4dGVuZHMgdGhpcyBvYmplY3QgYW5kIHJ1bnMgdGhlIGluaXQgbWV0aG9kLgoJCSAgICAgICAgICAgICAqIEFyZ3VtZW50cyB0byBjcmVhdGUoKSB3aWxsIGJlIHBhc3NlZCB0byBpbml0KCkuCgkJICAgICAgICAgICAgICoKCQkgICAgICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuZXcgb2JqZWN0LgoJCSAgICAgICAgICAgICAqCgkJICAgICAgICAgICAgICogQHN0YXRpYwoJCSAgICAgICAgICAgICAqCgkJICAgICAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAgICAgKgoJCSAgICAgICAgICAgICAqICAgICB2YXIgaW5zdGFuY2UgPSBNeVR5cGUuY3JlYXRlKCk7CgkJICAgICAgICAgICAgICovCgkJICAgICAgICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7CgkJICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuZXh0ZW5kKCk7CgkJICAgICAgICAgICAgICAgIGluc3RhbmNlLmluaXQuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cyk7CgoJCSAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7CgkJICAgICAgICAgICAgfSwKCgkJICAgICAgICAgICAgLyoqCgkJICAgICAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIG9iamVjdC4KCQkgICAgICAgICAgICAgKiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBhZGQgc29tZSBsb2dpYyB3aGVuIHlvdXIgb2JqZWN0cyBhcmUgY3JlYXRlZC4KCQkgICAgICAgICAgICAgKgoJCSAgICAgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgICAgICoKCQkgICAgICAgICAgICAgKiAgICAgdmFyIE15VHlwZSA9IENyeXB0b0pTLmxpYi5CYXNlLmV4dGVuZCh7CgkJICAgICAgICAgICAgICogICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7CgkJICAgICAgICAgICAgICogICAgICAgICAgICAgLy8gLi4uCgkJICAgICAgICAgICAgICogICAgICAgICB9CgkJICAgICAgICAgICAgICogICAgIH0pOwoJCSAgICAgICAgICAgICAqLwoJCSAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICB9LAoKCQkgICAgICAgICAgICAvKioKCQkgICAgICAgICAgICAgKiBDb3BpZXMgcHJvcGVydGllcyBpbnRvIHRoaXMgb2JqZWN0LgoJCSAgICAgICAgICAgICAqCgkJICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgVGhlIHByb3BlcnRpZXMgdG8gbWl4IGluLgoJCSAgICAgICAgICAgICAqCgkJICAgICAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAgICAgKgoJCSAgICAgICAgICAgICAqICAgICBNeVR5cGUubWl4SW4oewoJCSAgICAgICAgICAgICAqICAgICAgICAgZmllbGQ6ICd2YWx1ZScKCQkgICAgICAgICAgICAgKiAgICAgfSk7CgkJICAgICAgICAgICAgICovCgkJICAgICAgICAgICAgbWl4SW46IGZ1bmN0aW9uIChwcm9wZXJ0aWVzKSB7CgkJICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5TmFtZSBpbiBwcm9wZXJ0aWVzKSB7CgkJICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eU5hbWUpKSB7CgkJICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1twcm9wZXJ0eU5hbWVdID0gcHJvcGVydGllc1twcm9wZXJ0eU5hbWVdOwoJCSAgICAgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgICAgICAvLyBJRSB3b24ndCBjb3B5IHRvU3RyaW5nIHVzaW5nIHRoZSBsb29wIGFib3ZlCgkJICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KCd0b1N0cmluZycpKSB7CgkJICAgICAgICAgICAgICAgICAgICB0aGlzLnRvU3RyaW5nID0gcHJvcGVydGllcy50b1N0cmluZzsKCQkgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgIH0sCgoJCSAgICAgICAgICAgIC8qKgoJCSAgICAgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgb2JqZWN0LgoJCSAgICAgICAgICAgICAqCgkJICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgY2xvbmUuCgkJICAgICAgICAgICAgICoKCQkgICAgICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICAgICAqCgkJICAgICAgICAgICAgICogICAgIHZhciBjbG9uZSA9IGluc3RhbmNlLmNsb25lKCk7CgkJICAgICAgICAgICAgICovCgkJICAgICAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5pdC5wcm90b3R5cGUuZXh0ZW5kKHRoaXMpOwoJCSAgICAgICAgICAgIH0KCQkgICAgICAgIH07CgkJICAgIH0oKSk7CgoJCSAgICAvKioKCQkgICAgICogQW4gYXJyYXkgb2YgMzItYml0IHdvcmRzLgoJCSAgICAgKgoJCSAgICAgKiBAcHJvcGVydHkge0FycmF5fSB3b3JkcyBUaGUgYXJyYXkgb2YgMzItYml0IHdvcmRzLgoJCSAgICAgKiBAcHJvcGVydHkge251bWJlcn0gc2lnQnl0ZXMgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGlzIHdvcmQgYXJyYXkuCgkJICAgICAqLwoJCSAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5ID0gQmFzZS5leHRlbmQoewoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgd29yZCBhcnJheS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyAoT3B0aW9uYWwpIEFuIGFycmF5IG9mIDMyLWJpdCB3b3Jkcy4KCQkgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaWdCeXRlcyAoT3B0aW9uYWwpIFRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgYnl0ZXMgaW4gdGhlIHdvcmRzLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZSgpOwoJCSAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZShbMHgwMDAxMDIwMywgMHgwNDA1MDYwN10pOwoJCSAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZShbMHgwMDAxMDIwMywgMHgwNDA1MDYwN10sIDYpOwoJCSAgICAgICAgICovCgkJICAgICAgICBpbml0OiBmdW5jdGlvbiAod29yZHMsIHNpZ0J5dGVzKSB7CgkJICAgICAgICAgICAgd29yZHMgPSB0aGlzLndvcmRzID0gd29yZHMgfHwgW107CgoJCSAgICAgICAgICAgIGlmIChzaWdCeXRlcyAhPSB1bmRlZmluZWQpIHsKCQkgICAgICAgICAgICAgICAgdGhpcy5zaWdCeXRlcyA9IHNpZ0J5dGVzOwoJCSAgICAgICAgICAgIH0gZWxzZSB7CgkJICAgICAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSB3b3Jkcy5sZW5ndGggKiA0OwoJCSAgICAgICAgICAgIH0KCQkgICAgICAgIH0sCgoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIHdvcmQgYXJyYXkgdG8gYSBzdHJpbmcuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyIChPcHRpb25hbCkgVGhlIGVuY29kaW5nIHN0cmF0ZWd5IHRvIHVzZS4gRGVmYXVsdDogQ3J5cHRvSlMuZW5jLkhleAoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZ2lmaWVkIHdvcmQgYXJyYXkuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheSArICcnOwoJCSAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSB3b3JkQXJyYXkudG9TdHJpbmcoKTsKCQkgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gd29yZEFycmF5LnRvU3RyaW5nKENyeXB0b0pTLmVuYy5VdGY4KTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIChlbmNvZGVyKSB7CgkJICAgICAgICAgICAgcmV0dXJuIChlbmNvZGVyIHx8IEhleCkuc3RyaW5naWZ5KHRoaXMpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENvbmNhdGVuYXRlcyBhIHdvcmQgYXJyYXkgdG8gdGhpcyB3b3JkIGFycmF5LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkgdG8gYXBwZW5kLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhpcyB3b3JkIGFycmF5LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHdvcmRBcnJheTEuY29uY2F0KHdvcmRBcnJheTIpOwoJCSAgICAgICAgICovCgkJICAgICAgICBjb25jYXQ6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHsKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgICAgICB2YXIgdGhpc1dvcmRzID0gdGhpcy53b3JkczsKCQkgICAgICAgICAgICB2YXIgdGhhdFdvcmRzID0gd29yZEFycmF5LndvcmRzOwoJCSAgICAgICAgICAgIHZhciB0aGlzU2lnQnl0ZXMgPSB0aGlzLnNpZ0J5dGVzOwoJCSAgICAgICAgICAgIHZhciB0aGF0U2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7CgoJCSAgICAgICAgICAgIC8vIENsYW1wIGV4Y2VzcyBiaXRzCgkJICAgICAgICAgICAgdGhpcy5jbGFtcCgpOwoKCQkgICAgICAgICAgICAvLyBDb25jYXQKCQkgICAgICAgICAgICBpZiAodGhpc1NpZ0J5dGVzICUgNCkgewoJCSAgICAgICAgICAgICAgICAvLyBDb3B5IG9uZSBieXRlIGF0IGEgdGltZQoJCSAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoYXRTaWdCeXRlczsgaSsrKSB7CgkJICAgICAgICAgICAgICAgICAgICB2YXIgdGhhdEJ5dGUgPSAodGhhdFdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZjsKCQkgICAgICAgICAgICAgICAgICAgIHRoaXNXb3Jkc1sodGhpc1NpZ0J5dGVzICsgaSkgPj4+IDJdIHw9IHRoYXRCeXRlIDw8ICgyNCAtICgodGhpc1NpZ0J5dGVzICsgaSkgJSA0KSAqIDgpOwoJCSAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgfSBlbHNlIHsKCQkgICAgICAgICAgICAgICAgLy8gQ29weSBvbmUgd29yZCBhdCBhIHRpbWUKCQkgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGF0U2lnQnl0ZXM7IGkgKz0gNCkgewoJCSAgICAgICAgICAgICAgICAgICAgdGhpc1dvcmRzWyh0aGlzU2lnQnl0ZXMgKyBpKSA+Pj4gMl0gPSB0aGF0V29yZHNbaSA+Pj4gMl07CgkJICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICB9CgkJICAgICAgICAgICAgdGhpcy5zaWdCeXRlcyArPSB0aGF0U2lnQnl0ZXM7CgoJCSAgICAgICAgICAgIC8vIENoYWluYWJsZQoJCSAgICAgICAgICAgIHJldHVybiB0aGlzOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIFJlbW92ZXMgaW5zaWduaWZpY2FudCBiaXRzLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHdvcmRBcnJheS5jbGFtcCgpOwoJCSAgICAgICAgICovCgkJICAgICAgICBjbGFtcDogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgIHZhciB3b3JkcyA9IHRoaXMud29yZHM7CgkJICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gdGhpcy5zaWdCeXRlczsKCgkJICAgICAgICAgICAgLy8gQ2xhbXAKCQkgICAgICAgICAgICB3b3Jkc1tzaWdCeXRlcyA+Pj4gMl0gJj0gMHhmZmZmZmZmZiA8PCAoMzIgLSAoc2lnQnl0ZXMgJSA0KSAqIDgpOwoJCSAgICAgICAgICAgIHdvcmRzLmxlbmd0aCA9IE1hdGguY2VpbChzaWdCeXRlcyAvIDQpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgd29yZCBhcnJheS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBjbG9uZS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgY2xvbmUgPSB3b3JkQXJyYXkuY2xvbmUoKTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICB2YXIgY2xvbmUgPSBCYXNlLmNsb25lLmNhbGwodGhpcyk7CgkJICAgICAgICAgICAgY2xvbmUud29yZHMgPSB0aGlzLndvcmRzLnNsaWNlKDApOwoKCQkgICAgICAgICAgICByZXR1cm4gY2xvbmU7CgkJICAgICAgICB9LAoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogQ3JlYXRlcyBhIHdvcmQgYXJyYXkgZmlsbGVkIHdpdGggcmFuZG9tIGJ5dGVzLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuQnl0ZXMgVGhlIG51bWJlciBvZiByYW5kb20gYnl0ZXMgdG8gZ2VuZXJhdGUuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcmFuZG9tIHdvcmQgYXJyYXkuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHN0YXRpYwoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LnJhbmRvbSgxNik7CgkJICAgICAgICAgKi8KCQkgICAgICAgIHJhbmRvbTogZnVuY3Rpb24gKG5CeXRlcykgewoJCSAgICAgICAgICAgIHZhciB3b3JkcyA9IFtdOwoKCQkgICAgICAgICAgICB2YXIgciA9IChmdW5jdGlvbiAobV93KSB7CgkJICAgICAgICAgICAgICAgIHZhciBtX3cgPSBtX3c7CgkJICAgICAgICAgICAgICAgIHZhciBtX3ogPSAweDNhZGU2OGIxOwoJCSAgICAgICAgICAgICAgICB2YXIgbWFzayA9IDB4ZmZmZmZmZmY7CgoJCSAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgICAgICAgICAgbV96ID0gKDB4OTA2OSAqIChtX3ogJiAweEZGRkYpICsgKG1feiA+PiAweDEwKSkgJiBtYXNrOwoJCSAgICAgICAgICAgICAgICAgICAgbV93ID0gKDB4NDY1MCAqIChtX3cgJiAweEZGRkYpICsgKG1fdyA+PiAweDEwKSkgJiBtYXNrOwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9ICgobV96IDw8IDB4MTApICsgbV93KSAmIG1hc2s7CgkJICAgICAgICAgICAgICAgICAgICByZXN1bHQgLz0gMHgxMDAwMDAwMDA7CgkJICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gMC41OwoJCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIChNYXRoLnJhbmRvbSgpID4gLjUgPyAxIDogLTEpOwoJCSAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgfSk7CgoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCByY2FjaGU7IGkgPCBuQnl0ZXM7IGkgKz0gNCkgewoJCSAgICAgICAgICAgICAgICB2YXIgX3IgPSByKChyY2FjaGUgfHwgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwMDAwMCk7CgoJCSAgICAgICAgICAgICAgICByY2FjaGUgPSBfcigpICogMHgzYWRlNjdiNzsKCQkgICAgICAgICAgICAgICAgd29yZHMucHVzaCgoX3IoKSAqIDB4MTAwMDAwMDAwKSB8IDApOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdCh3b3JkcywgbkJ5dGVzKTsKCQkgICAgICAgIH0KCQkgICAgfSk7CgoJCSAgICAvKioKCQkgICAgICogRW5jb2RlciBuYW1lc3BhY2UuCgkJICAgICAqLwoJCSAgICB2YXIgQ19lbmMgPSBDLmVuYyA9IHt9OwoKCQkgICAgLyoqCgkJICAgICAqIEhleCBlbmNvZGluZyBzdHJhdGVneS4KCQkgICAgICovCgkJICAgIHZhciBIZXggPSBDX2VuYy5IZXggPSB7CgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIGhleCBzdHJpbmcuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBoZXggc3RyaW5nLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBzdGF0aWMKCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgaGV4U3RyaW5nID0gQ3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkod29yZEFycmF5KTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7CgkJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgdmFyIHdvcmRzID0gd29yZEFycmF5LndvcmRzOwoJCSAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlczsKCgkJICAgICAgICAgICAgLy8gQ29udmVydAoJCSAgICAgICAgICAgIHZhciBoZXhDaGFycyA9IFtdOwoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkrKykgewoJCSAgICAgICAgICAgICAgICB2YXIgYml0ZSA9ICh3b3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmY7CgkJICAgICAgICAgICAgICAgIGhleENoYXJzLnB1c2goKGJpdGUgPj4+IDQpLnRvU3RyaW5nKDE2KSk7CgkJICAgICAgICAgICAgICAgIGhleENoYXJzLnB1c2goKGJpdGUgJiAweDBmKS50b1N0cmluZygxNikpOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgcmV0dXJuIGhleENoYXJzLmpvaW4oJycpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENvbnZlcnRzIGEgaGV4IHN0cmluZyB0byBhIHdvcmQgYXJyYXkuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGhleFN0ciBUaGUgaGV4IHN0cmluZy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBzdGF0aWMKCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLkhleC5wYXJzZShoZXhTdHJpbmcpOwoJCSAgICAgICAgICovCgkJICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGhleFN0cikgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0CgkJICAgICAgICAgICAgdmFyIGhleFN0ckxlbmd0aCA9IGhleFN0ci5sZW5ndGg7CgoJCSAgICAgICAgICAgIC8vIENvbnZlcnQKCQkgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTsKCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhleFN0ckxlbmd0aDsgaSArPSAyKSB7CgkJICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDNdIHw9IHBhcnNlSW50KGhleFN0ci5zdWJzdHIoaSwgMiksIDE2KSA8PCAoMjQgLSAoaSAlIDgpICogNCk7CgkJICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHdvcmRzLCBoZXhTdHJMZW5ndGggLyAyKTsKCQkgICAgICAgIH0KCQkgICAgfTsKCgkJICAgIC8qKgoJCSAgICAgKiBMYXRpbjEgZW5jb2Rpbmcgc3RyYXRlZ3kuCgkJICAgICAqLwoJCSAgICB2YXIgTGF0aW4xID0gQ19lbmMuTGF0aW4xID0gewoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBMYXRpbjEgc3RyaW5nLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgTGF0aW4xIHN0cmluZy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAc3RhdGljCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIGxhdGluMVN0cmluZyA9IENyeXB0b0pTLmVuYy5MYXRpbjEuc3RyaW5naWZ5KHdvcmRBcnJheSk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3JkczsKCQkgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7CgoJCSAgICAgICAgICAgIC8vIENvbnZlcnQKCQkgICAgICAgICAgICB2YXIgbGF0aW4xQ2hhcnMgPSBbXTsKCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpKyspIHsKCQkgICAgICAgICAgICAgICAgdmFyIGJpdGUgPSAod29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmOwoJCSAgICAgICAgICAgICAgICBsYXRpbjFDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYml0ZSkpOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgcmV0dXJuIGxhdGluMUNoYXJzLmpvaW4oJycpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENvbnZlcnRzIGEgTGF0aW4xIHN0cmluZyB0byBhIHdvcmQgYXJyYXkuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGxhdGluMVN0ciBUaGUgTGF0aW4xIHN0cmluZy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBzdGF0aWMKCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLkxhdGluMS5wYXJzZShsYXRpbjFTdHJpbmcpOwoJCSAgICAgICAgICovCgkJICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGxhdGluMVN0cikgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0CgkJICAgICAgICAgICAgdmFyIGxhdGluMVN0ckxlbmd0aCA9IGxhdGluMVN0ci5sZW5ndGg7CgoJCSAgICAgICAgICAgIC8vIENvbnZlcnQKCQkgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTsKCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhdGluMVN0ckxlbmd0aDsgaSsrKSB7CgkJICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDJdIHw9IChsYXRpbjFTdHIuY2hhckNvZGVBdChpKSAmIDB4ZmYpIDw8ICgyNCAtIChpICUgNCkgKiA4KTsKCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQod29yZHMsIGxhdGluMVN0ckxlbmd0aCk7CgkJICAgICAgICB9CgkJICAgIH07CgoJCSAgICAvKioKCQkgICAgICogVVRGLTggZW5jb2Rpbmcgc3RyYXRlZ3kuCgkJICAgICAqLwoJCSAgICB2YXIgVXRmOCA9IENfZW5jLlV0ZjggPSB7CgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIFVURi04IHN0cmluZy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVURi04IHN0cmluZy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAc3RhdGljCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIHV0ZjhTdHJpbmcgPSBDcnlwdG9KUy5lbmMuVXRmOC5zdHJpbmdpZnkod29yZEFycmF5KTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7CgkJICAgICAgICAgICAgdHJ5IHsKCQkgICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoTGF0aW4xLnN0cmluZ2lmeSh3b3JkQXJyYXkpKSk7CgkJICAgICAgICAgICAgfSBjYXRjaCAoZSkgewoJCSAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hbGZvcm1lZCBVVEYtOCBkYXRhJyk7CgkJICAgICAgICAgICAgfQoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENvbnZlcnRzIGEgVVRGLTggc3RyaW5nIHRvIGEgd29yZCBhcnJheS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXRmOFN0ciBUaGUgVVRGLTggc3RyaW5nLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHN0YXRpYwoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZSh1dGY4U3RyaW5nKTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgcGFyc2U6IGZ1bmN0aW9uICh1dGY4U3RyKSB7CgkJICAgICAgICAgICAgcmV0dXJuIExhdGluMS5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQodXRmOFN0cikpKTsKCQkgICAgICAgIH0KCQkgICAgfTsKCgkJICAgIC8qKgoJCSAgICAgKiBBYnN0cmFjdCBidWZmZXJlZCBibG9jayBhbGdvcml0aG0gdGVtcGxhdGUuCgkJICAgICAqCgkJICAgICAqIFRoZSBwcm9wZXJ0eSBibG9ja1NpemUgbXVzdCBiZSBpbXBsZW1lbnRlZCBpbiBhIGNvbmNyZXRlIHN1YnR5cGUuCgkJICAgICAqCgkJICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBfbWluQnVmZmVyU2l6ZSBUaGUgbnVtYmVyIG9mIGJsb2NrcyB0aGF0IHNob3VsZCBiZSBrZXB0IHVucHJvY2Vzc2VkIGluIHRoZSBidWZmZXIuIERlZmF1bHQ6IDAKCQkgICAgICovCgkJICAgIHZhciBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtID0gQ19saWIuQnVmZmVyZWRCbG9ja0FsZ29yaXRobSA9IEJhc2UuZXh0ZW5kKHsKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogUmVzZXRzIHRoaXMgYmxvY2sgYWxnb3JpdGhtJ3MgZGF0YSBidWZmZXIgdG8gaXRzIGluaXRpYWwgc3RhdGUuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5yZXNldCgpOwoJCSAgICAgICAgICovCgkJICAgICAgICByZXNldDogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIC8vIEluaXRpYWwgdmFsdWVzCgkJICAgICAgICAgICAgdGhpcy5fZGF0YSA9IG5ldyBXb3JkQXJyYXkuaW5pdCgpOwoJCSAgICAgICAgICAgIHRoaXMuX25EYXRhQnl0ZXMgPSAwOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIEFkZHMgbmV3IGRhdGEgdG8gdGhpcyBibG9jayBhbGdvcml0aG0ncyBidWZmZXIuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGFwcGVuZC4gU3RyaW5ncyBhcmUgY29udmVydGVkIHRvIGEgV29yZEFycmF5IHVzaW5nIFVURi04LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX2FwcGVuZCgnZGF0YScpOwoJCSAgICAgICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX2FwcGVuZCh3b3JkQXJyYXkpOwoJCSAgICAgICAgICovCgkJICAgICAgICBfYXBwZW5kOiBmdW5jdGlvbiAoZGF0YSkgewoJCSAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIFdvcmRBcnJheSwgZWxzZSBhc3N1bWUgV29yZEFycmF5IGFscmVhZHkKCQkgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT0gJ3N0cmluZycpIHsKCQkgICAgICAgICAgICAgICAgZGF0YSA9IFV0ZjgucGFyc2UoZGF0YSk7CgkJICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICAvLyBBcHBlbmQKCQkgICAgICAgICAgICB0aGlzLl9kYXRhLmNvbmNhdChkYXRhKTsKCQkgICAgICAgICAgICB0aGlzLl9uRGF0YUJ5dGVzICs9IGRhdGEuc2lnQnl0ZXM7CgkJICAgICAgICB9LAoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogUHJvY2Vzc2VzIGF2YWlsYWJsZSBkYXRhIGJsb2Nrcy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIF9kb1Byb2Nlc3NCbG9jayhvZmZzZXQpLCB3aGljaCBtdXN0IGJlIGltcGxlbWVudGVkIGJ5IGEgY29uY3JldGUgc3VidHlwZS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRvRmx1c2ggV2hldGhlciBhbGwgYmxvY2tzIGFuZCBwYXJ0aWFsIGJsb2NrcyBzaG91bGQgYmUgcHJvY2Vzc2VkLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHByb2Nlc3NlZCBkYXRhLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHZhciBwcm9jZXNzZWREYXRhID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fcHJvY2VzcygpOwoJCSAgICAgICAgICogICAgIHZhciBwcm9jZXNzZWREYXRhID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fcHJvY2VzcyghISdmbHVzaCcpOwoJCSAgICAgICAgICovCgkJICAgICAgICBfcHJvY2VzczogZnVuY3Rpb24gKGRvRmx1c2gpIHsKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7CgkJICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7CgkJICAgICAgICAgICAgdmFyIGRhdGFTaWdCeXRlcyA9IGRhdGEuc2lnQnl0ZXM7CgkJICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IHRoaXMuYmxvY2tTaXplOwoJCSAgICAgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7CgoJCSAgICAgICAgICAgIC8vIENvdW50IGJsb2NrcyByZWFkeQoJCSAgICAgICAgICAgIHZhciBuQmxvY2tzUmVhZHkgPSBkYXRhU2lnQnl0ZXMgLyBibG9ja1NpemVCeXRlczsKCQkgICAgICAgICAgICBpZiAoZG9GbHVzaCkgewoJCSAgICAgICAgICAgICAgICAvLyBSb3VuZCB1cCB0byBpbmNsdWRlIHBhcnRpYWwgYmxvY2tzCgkJICAgICAgICAgICAgICAgIG5CbG9ja3NSZWFkeSA9IE1hdGguY2VpbChuQmxvY2tzUmVhZHkpOwoJCSAgICAgICAgICAgIH0gZWxzZSB7CgkJICAgICAgICAgICAgICAgIC8vIFJvdW5kIGRvd24gdG8gaW5jbHVkZSBvbmx5IGZ1bGwgYmxvY2tzLAoJCSAgICAgICAgICAgICAgICAvLyBsZXNzIHRoZSBudW1iZXIgb2YgYmxvY2tzIHRoYXQgbXVzdCByZW1haW4gaW4gdGhlIGJ1ZmZlcgoJCSAgICAgICAgICAgICAgICBuQmxvY2tzUmVhZHkgPSBNYXRoLm1heCgobkJsb2Nrc1JlYWR5IHwgMCkgLSB0aGlzLl9taW5CdWZmZXJTaXplLCAwKTsKCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIC8vIENvdW50IHdvcmRzIHJlYWR5CgkJICAgICAgICAgICAgdmFyIG5Xb3Jkc1JlYWR5ID0gbkJsb2Nrc1JlYWR5ICogYmxvY2tTaXplOwoKCQkgICAgICAgICAgICAvLyBDb3VudCBieXRlcyByZWFkeQoJCSAgICAgICAgICAgIHZhciBuQnl0ZXNSZWFkeSA9IE1hdGgubWluKG5Xb3Jkc1JlYWR5ICogNCwgZGF0YVNpZ0J5dGVzKTsKCgkJICAgICAgICAgICAgLy8gUHJvY2VzcyBibG9ja3MKCQkgICAgICAgICAgICBpZiAobldvcmRzUmVhZHkpIHsKCQkgICAgICAgICAgICAgICAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgbldvcmRzUmVhZHk7IG9mZnNldCArPSBibG9ja1NpemUpIHsKCQkgICAgICAgICAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtYWxnb3JpdGhtIGxvZ2ljCgkJICAgICAgICAgICAgICAgICAgICB0aGlzLl9kb1Byb2Nlc3NCbG9jayhkYXRhV29yZHMsIG9mZnNldCk7CgkJICAgICAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBwcm9jZXNzZWQgd29yZHMKCQkgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NlZFdvcmRzID0gZGF0YVdvcmRzLnNwbGljZSgwLCBuV29yZHNSZWFkeSk7CgkJICAgICAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gbkJ5dGVzUmVhZHk7CgkJICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICAvLyBSZXR1cm4gcHJvY2Vzc2VkIHdvcmRzCgkJICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdChwcm9jZXNzZWRXb3JkcywgbkJ5dGVzUmVhZHkpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgb2JqZWN0LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGNsb25lLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHZhciBjbG9uZSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uY2xvbmUoKTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICB2YXIgY2xvbmUgPSBCYXNlLmNsb25lLmNhbGwodGhpcyk7CgkJICAgICAgICAgICAgY2xvbmUuX2RhdGEgPSB0aGlzLl9kYXRhLmNsb25lKCk7CgoJCSAgICAgICAgICAgIHJldHVybiBjbG9uZTsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgX21pbkJ1ZmZlclNpemU6IDAKCQkgICAgfSk7CgoJCSAgICAvKioKCQkgICAgICogQWJzdHJhY3QgaGFzaGVyIHRlbXBsYXRlLgoJCSAgICAgKgoJCSAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBudW1iZXIgb2YgMzItYml0IHdvcmRzIHRoaXMgaGFzaGVyIG9wZXJhdGVzIG9uLiBEZWZhdWx0OiAxNiAoNTEyIGJpdHMpCgkJICAgICAqLwoJCSAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyID0gQnVmZmVyZWRCbG9ja0FsZ29yaXRobS5leHRlbmQoewoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuCgkJICAgICAgICAgKi8KCQkgICAgICAgIGNmZzogQmFzZS5leHRlbmQoKSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBoYXNoZXIuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIGhhc2ggY29tcHV0YXRpb24uCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIGhhc2hlciA9IENyeXB0b0pTLmFsZ28uU0hBMjU2LmNyZWF0ZSgpOwoJCSAgICAgICAgICovCgkJICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2ZnKSB7CgkJICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzCgkJICAgICAgICAgICAgdGhpcy5jZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTsKCgkJICAgICAgICAgICAgLy8gU2V0IGluaXRpYWwgdmFsdWVzCgkJICAgICAgICAgICAgdGhpcy5yZXNldCgpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIFJlc2V0cyB0aGlzIGhhc2hlciB0byBpdHMgaW5pdGlhbCBzdGF0ZS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICBoYXNoZXIucmVzZXQoKTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICAvLyBSZXNldCBkYXRhIGJ1ZmZlcgoJCSAgICAgICAgICAgIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0ucmVzZXQuY2FsbCh0aGlzKTsKCgkJICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1oYXNoZXIgbG9naWMKCQkgICAgICAgICAgICB0aGlzLl9kb1Jlc2V0KCk7CgkJICAgICAgICB9LAoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogVXBkYXRlcyB0aGlzIGhhc2hlciB3aXRoIGEgbWVzc2FnZS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgVGhlIG1lc3NhZ2UgdG8gYXBwZW5kLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge0hhc2hlcn0gVGhpcyBoYXNoZXIuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgaGFzaGVyLnVwZGF0ZSgnbWVzc2FnZScpOwoJCSAgICAgICAgICogICAgIGhhc2hlci51cGRhdGUod29yZEFycmF5KTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAobWVzc2FnZVVwZGF0ZSkgewoJCSAgICAgICAgICAgIC8vIEFwcGVuZAoJCSAgICAgICAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTsKCgkJICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBoYXNoCgkJICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpOwoKCQkgICAgICAgICAgICAvLyBDaGFpbmFibGUKCQkgICAgICAgICAgICByZXR1cm4gdGhpczsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBGaW5hbGl6ZXMgdGhlIGhhc2ggY29tcHV0YXRpb24uCgkJICAgICAgICAgKiBOb3RlIHRoYXQgdGhlIGZpbmFsaXplIG9wZXJhdGlvbiBpcyBlZmZlY3RpdmVseSBhIGRlc3RydWN0aXZlLCByZWFkLW9uY2Ugb3BlcmF0aW9uLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZVVwZGF0ZSAoT3B0aW9uYWwpIEEgZmluYWwgbWVzc2FnZSB1cGRhdGUuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgaGFzaCA9IGhhc2hlci5maW5hbGl6ZSgpOwoJCSAgICAgICAgICogICAgIHZhciBoYXNoID0gaGFzaGVyLmZpbmFsaXplKCdtZXNzYWdlJyk7CgkJICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUod29yZEFycmF5KTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgZmluYWxpemU6IGZ1bmN0aW9uIChtZXNzYWdlVXBkYXRlKSB7CgkJICAgICAgICAgICAgLy8gRmluYWwgbWVzc2FnZSB1cGRhdGUKCQkgICAgICAgICAgICBpZiAobWVzc2FnZVVwZGF0ZSkgewoJCSAgICAgICAgICAgICAgICB0aGlzLl9hcHBlbmQobWVzc2FnZVVwZGF0ZSk7CgkJICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWhhc2hlciBsb2dpYwoJCSAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5fZG9GaW5hbGl6ZSgpOwoKCQkgICAgICAgICAgICByZXR1cm4gaGFzaDsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgYmxvY2tTaXplOiA1MTIvMzIsCgoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBDcmVhdGVzIGEgc2hvcnRjdXQgZnVuY3Rpb24gdG8gYSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byBjcmVhdGUgYSBoZWxwZXIgZm9yLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgc2hvcnRjdXQgZnVuY3Rpb24uCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHN0YXRpYwoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHZhciBTSEEyNTYgPSBDcnlwdG9KUy5saWIuSGFzaGVyLl9jcmVhdGVIZWxwZXIoQ3J5cHRvSlMuYWxnby5TSEEyNTYpOwoJCSAgICAgICAgICovCgkJICAgICAgICBfY3JlYXRlSGVscGVyOiBmdW5jdGlvbiAoaGFzaGVyKSB7CgkJICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlLCBjZmcpIHsKCQkgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBoYXNoZXIuaW5pdChjZmcpLmZpbmFsaXplKG1lc3NhZ2UpOwoJCSAgICAgICAgICAgIH07CgkJICAgICAgICB9LAoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogQ3JlYXRlcyBhIHNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoZXIgdG8gdXNlIGluIHRoaXMgSE1BQyBoZWxwZXIuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBzaG9ydGN1dCBmdW5jdGlvbi4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAc3RhdGljCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIEhtYWNTSEEyNTYgPSBDcnlwdG9KUy5saWIuSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKENyeXB0b0pTLmFsZ28uU0hBMjU2KTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgX2NyZWF0ZUhtYWNIZWxwZXI6IGZ1bmN0aW9uIChoYXNoZXIpIHsKCQkgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2UsIGtleSkgewoJCSAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENfYWxnby5ITUFDLmluaXQoaGFzaGVyLCBrZXkpLmZpbmFsaXplKG1lc3NhZ2UpOwoJCSAgICAgICAgICAgIH07CgkJICAgICAgICB9CgkJICAgIH0pOwoKCQkgICAgLyoqCgkJICAgICAqIEFsZ29yaXRobSBuYW1lc3BhY2UuCgkJICAgICAqLwoJCSAgICB2YXIgQ19hbGdvID0gQy5hbGdvID0ge307CgoJCSAgICByZXR1cm4gQzsKCQl9KE1hdGgpKTsKCgoJCXJldHVybiBDcnlwdG9KUzsKCgl9KSk7CgovKioqLyB9KSwKCi8qKiovIDIxNDoKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCTsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHsKCQlpZiAodHJ1ZSkgewoJCQkvLyBDb21tb25KUwoJCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oMjEzKSk7CgkJfQoJCWVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewoJCQkvLyBBTUQKCQkJZGVmaW5lKFsiLi9jb3JlIl0sIGZhY3RvcnkpOwoJCX0KCQllbHNlIHsKCQkJLy8gR2xvYmFsIChicm93c2VyKQoJCQlmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpOwoJCX0KCX0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgoJCShmdW5jdGlvbiAodW5kZWZpbmVkKSB7CgkJICAgIC8vIFNob3J0Y3V0cwoJCSAgICB2YXIgQyA9IENyeXB0b0pTOwoJCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKCQkgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlOwoJCSAgICB2YXIgWDMyV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5OwoKCQkgICAgLyoqCgkJICAgICAqIHg2NCBuYW1lc3BhY2UuCgkJICAgICAqLwoJCSAgICB2YXIgQ194NjQgPSBDLng2NCA9IHt9OwoKCQkgICAgLyoqCgkJICAgICAqIEEgNjQtYml0IHdvcmQuCgkJICAgICAqLwoJCSAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQgPSBCYXNlLmV4dGVuZCh7CgkJICAgICAgICAvKioKCQkgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCA2NC1iaXQgd29yZC4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gaGlnaCBUaGUgaGlnaCAzMiBiaXRzLgoJCSAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGxvdyBUaGUgbG93IDMyIGJpdHMuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIHg2NFdvcmQgPSBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgwMDAxMDIwMywgMHgwNDA1MDYwNyk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChoaWdoLCBsb3cpIHsKCQkgICAgICAgICAgICB0aGlzLmhpZ2ggPSBoaWdoOwoJCSAgICAgICAgICAgIHRoaXMubG93ID0gbG93OwoJCSAgICAgICAgfQoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogQml0d2lzZSBOT1RzIHRoaXMgd29yZC4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgbmVnYXRpbmcuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIG5lZ2F0ZWQgPSB4NjRXb3JkLm5vdCgpOwoJCSAgICAgICAgICovCgkJICAgICAgICAvLyBub3Q6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IH50aGlzLmhpZ2g7CgkJICAgICAgICAgICAgLy8gdmFyIGxvdyA9IH50aGlzLmxvdzsKCgkJICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7CgkJICAgICAgICAvLyB9LAoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogQml0d2lzZSBBTkRzIHRoaXMgd29yZCB3aXRoIHRoZSBwYXNzZWQgd29yZC4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIEFORCB3aXRoIHRoaXMgd29yZC4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgQU5EaW5nLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHZhciBhbmRlZCA9IHg2NFdvcmQuYW5kKGFub3RoZXJYNjRXb3JkKTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgLy8gYW5kOiBmdW5jdGlvbiAod29yZCkgewoJCSAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoICYgd29yZC5oaWdoOwoJCSAgICAgICAgICAgIC8vIHZhciBsb3cgPSB0aGlzLmxvdyAmIHdvcmQubG93OwoKCQkgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTsKCQkgICAgICAgIC8vIH0sCgoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBCaXR3aXNlIE9ScyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtYNjRXb3JkfSB3b3JkIFRoZSB4NjQtV29yZCB0byBPUiB3aXRoIHRoaXMgd29yZC4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgT1JpbmcuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIG9yZWQgPSB4NjRXb3JkLm9yKGFub3RoZXJYNjRXb3JkKTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgLy8gb3I6IGZ1bmN0aW9uICh3b3JkKSB7CgkJICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSB0aGlzLmhpZ2ggfCB3b3JkLmhpZ2g7CgkJICAgICAgICAgICAgLy8gdmFyIGxvdyA9IHRoaXMubG93IHwgd29yZC5sb3c7CgoJCSAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpOwoJCSAgICAgICAgLy8gfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIEJpdHdpc2UgWE9ScyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtYNjRXb3JkfSB3b3JkIFRoZSB4NjQtV29yZCB0byBYT1Igd2l0aCB0aGlzIHdvcmQuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIFhPUmluZy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgeG9yZWQgPSB4NjRXb3JkLnhvcihhbm90aGVyWDY0V29yZCk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIC8vIHhvcjogZnVuY3Rpb24gKHdvcmQpIHsKCQkgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IHRoaXMuaGlnaCBeIHdvcmQuaGlnaDsKCQkgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgXiB3b3JkLmxvdzsKCgkJICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7CgkJICAgICAgICAvLyB9LAoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogU2hpZnRzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIGxlZnQuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHNoaWZ0LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBzaGlmdGluZy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgc2hpZnRlZCA9IHg2NFdvcmQuc2hpZnRMKDI1KTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgLy8gc2hpZnRMOiBmdW5jdGlvbiAobikgewoJCSAgICAgICAgICAgIC8vIGlmIChuIDwgMzIpIHsKCQkgICAgICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSAodGhpcy5oaWdoIDw8IG4pIHwgKHRoaXMubG93ID4+PiAoMzIgLSBuKSk7CgkJICAgICAgICAgICAgICAgIC8vIHZhciBsb3cgPSB0aGlzLmxvdyA8PCBuOwoJCSAgICAgICAgICAgIC8vIH0gZWxzZSB7CgkJICAgICAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5sb3cgPDwgKG4gLSAzMik7CgkJICAgICAgICAgICAgICAgIC8vIHZhciBsb3cgPSAwOwoJCSAgICAgICAgICAgIC8vIH0KCgkJICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7CgkJICAgICAgICAvLyB9LAoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogU2hpZnRzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIHJpZ2h0LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgYml0cyB0byBzaGlmdC4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgc2hpZnRpbmcuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIHNoaWZ0ZWQgPSB4NjRXb3JkLnNoaWZ0Uig3KTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgLy8gc2hpZnRSOiBmdW5jdGlvbiAobikgewoJCSAgICAgICAgICAgIC8vIGlmIChuIDwgMzIpIHsKCQkgICAgICAgICAgICAgICAgLy8gdmFyIGxvdyA9ICh0aGlzLmxvdyA+Pj4gbikgfCAodGhpcy5oaWdoIDw8ICgzMiAtIG4pKTsKCQkgICAgICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSB0aGlzLmhpZ2ggPj4+IG47CgkJICAgICAgICAgICAgLy8gfSBlbHNlIHsKCQkgICAgICAgICAgICAgICAgLy8gdmFyIGxvdyA9IHRoaXMuaGlnaCA+Pj4gKG4gLSAzMik7CgkJICAgICAgICAgICAgICAgIC8vIHZhciBoaWdoID0gMDsKCQkgICAgICAgICAgICAvLyB9CgoJCSAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpOwoJCSAgICAgICAgLy8gfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIFJvdGF0ZXMgdGhpcyB3b3JkIG4gYml0cyB0byB0aGUgbGVmdC4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gcm90YXRlLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciByb3RhdGluZy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgcm90YXRlZCA9IHg2NFdvcmQucm90TCgyNSk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIC8vIHJvdEw6IGZ1bmN0aW9uIChuKSB7CgkJICAgICAgICAgICAgLy8gcmV0dXJuIHRoaXMuc2hpZnRMKG4pLm9yKHRoaXMuc2hpZnRSKDY0IC0gbikpOwoJCSAgICAgICAgLy8gfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIFJvdGF0ZXMgdGhpcyB3b3JkIG4gYml0cyB0byB0aGUgcmlnaHQuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHJvdGF0ZS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgcm90YXRpbmcuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIHJvdGF0ZWQgPSB4NjRXb3JkLnJvdFIoNyk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIC8vIHJvdFI6IGZ1bmN0aW9uIChuKSB7CgkJICAgICAgICAgICAgLy8gcmV0dXJuIHRoaXMuc2hpZnRSKG4pLm9yKHRoaXMuc2hpZnRMKDY0IC0gbikpOwoJCSAgICAgICAgLy8gfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIEFkZHMgdGhpcyB3b3JkIHdpdGggdGhlIHBhc3NlZCB3b3JkLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7WDY0V29yZH0gd29yZCBUaGUgeDY0LVdvcmQgdG8gYWRkIHdpdGggdGhpcyB3b3JkLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBhZGRpbmcuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIGFkZGVkID0geDY0V29yZC5hZGQoYW5vdGhlclg2NFdvcmQpOwoJCSAgICAgICAgICovCgkJICAgICAgICAvLyBhZGQ6IGZ1bmN0aW9uICh3b3JkKSB7CgkJICAgICAgICAgICAgLy8gdmFyIGxvdyA9ICh0aGlzLmxvdyArIHdvcmQubG93KSB8IDA7CgkJICAgICAgICAgICAgLy8gdmFyIGNhcnJ5ID0gKGxvdyA+Pj4gMCkgPCAodGhpcy5sb3cgPj4+IDApID8gMSA6IDA7CgkJICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSAodGhpcy5oaWdoICsgd29yZC5oaWdoICsgY2FycnkpIHwgMDsKCgkJICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7CgkJICAgICAgICAvLyB9CgkJICAgIH0pOwoKCQkgICAgLyoqCgkJICAgICAqIEFuIGFycmF5IG9mIDY0LWJpdCB3b3Jkcy4KCQkgICAgICoKCQkgICAgICogQHByb3BlcnR5IHtBcnJheX0gd29yZHMgVGhlIGFycmF5IG9mIENyeXB0b0pTLng2NC5Xb3JkIG9iamVjdHMuCgkJICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaWdCeXRlcyBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoaXMgd29yZCBhcnJheS4KCQkgICAgICovCgkJICAgIHZhciBYNjRXb3JkQXJyYXkgPSBDX3g2NC5Xb3JkQXJyYXkgPSBCYXNlLmV4dGVuZCh7CgkJICAgICAgICAvKioKCQkgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCB3b3JkIGFycmF5LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHdvcmRzIChPcHRpb25hbCkgQW4gYXJyYXkgb2YgQ3J5cHRvSlMueDY0LldvcmQgb2JqZWN0cy4KCQkgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaWdCeXRlcyAoT3B0aW9uYWwpIFRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgYnl0ZXMgaW4gdGhlIHdvcmRzLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy54NjQuV29yZEFycmF5LmNyZWF0ZSgpOwoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMueDY0LldvcmRBcnJheS5jcmVhdGUoWwoJCSAgICAgICAgICogICAgICAgICBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgwMDAxMDIwMywgMHgwNDA1MDYwNyksCgkJICAgICAgICAgKiAgICAgICAgIENyeXB0b0pTLng2NC5Xb3JkLmNyZWF0ZSgweDE4MTkxYTFiLCAweDFjMWQxZTFmKQoJCSAgICAgICAgICogICAgIF0pOwoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMueDY0LldvcmRBcnJheS5jcmVhdGUoWwoJCSAgICAgICAgICogICAgICAgICBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgwMDAxMDIwMywgMHgwNDA1MDYwNyksCgkJICAgICAgICAgKiAgICAgICAgIENyeXB0b0pTLng2NC5Xb3JkLmNyZWF0ZSgweDE4MTkxYTFiLCAweDFjMWQxZTFmKQoJCSAgICAgICAgICogICAgIF0sIDEwKTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgaW5pdDogZnVuY3Rpb24gKHdvcmRzLCBzaWdCeXRlcykgewoJCSAgICAgICAgICAgIHdvcmRzID0gdGhpcy53b3JkcyA9IHdvcmRzIHx8IFtdOwoKCQkgICAgICAgICAgICBpZiAoc2lnQnl0ZXMgIT0gdW5kZWZpbmVkKSB7CgkJICAgICAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSBzaWdCeXRlczsKCQkgICAgICAgICAgICB9IGVsc2UgewoJCSAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gd29yZHMubGVuZ3RoICogODsKCQkgICAgICAgICAgICB9CgkJICAgICAgICB9LAoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogQ29udmVydHMgdGhpcyA2NC1iaXQgd29yZCBhcnJheSB0byBhIDMyLWJpdCB3b3JkIGFycmF5LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge0NyeXB0b0pTLmxpYi5Xb3JkQXJyYXl9IFRoaXMgd29yZCBhcnJheSdzIGRhdGEgYXMgYSAzMi1iaXQgd29yZCBhcnJheS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgeDMyV29yZEFycmF5ID0geDY0V29yZEFycmF5LnRvWDMyKCk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIHRvWDMyOiBmdW5jdGlvbiAoKSB7CgkJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgdmFyIHg2NFdvcmRzID0gdGhpcy53b3JkczsKCQkgICAgICAgICAgICB2YXIgeDY0V29yZHNMZW5ndGggPSB4NjRXb3Jkcy5sZW5ndGg7CgoJCSAgICAgICAgICAgIC8vIENvbnZlcnQKCQkgICAgICAgICAgICB2YXIgeDMyV29yZHMgPSBbXTsKCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHg2NFdvcmRzTGVuZ3RoOyBpKyspIHsKCQkgICAgICAgICAgICAgICAgdmFyIHg2NFdvcmQgPSB4NjRXb3Jkc1tpXTsKCQkgICAgICAgICAgICAgICAgeDMyV29yZHMucHVzaCh4NjRXb3JkLmhpZ2gpOwoJCSAgICAgICAgICAgICAgICB4MzJXb3Jkcy5wdXNoKHg2NFdvcmQubG93KTsKCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIHJldHVybiBYMzJXb3JkQXJyYXkuY3JlYXRlKHgzMldvcmRzLCB0aGlzLnNpZ0J5dGVzKTsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIHdvcmQgYXJyYXkuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHJldHVybiB7WDY0V29yZEFycmF5fSBUaGUgY2xvbmUuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIGNsb25lID0geDY0V29yZEFycmF5LmNsb25lKCk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7CgkJICAgICAgICAgICAgdmFyIGNsb25lID0gQmFzZS5jbG9uZS5jYWxsKHRoaXMpOwoKCQkgICAgICAgICAgICAvLyBDbG9uZSAid29yZHMiIGFycmF5CgkJICAgICAgICAgICAgdmFyIHdvcmRzID0gY2xvbmUud29yZHMgPSB0aGlzLndvcmRzLnNsaWNlKDApOwoKCQkgICAgICAgICAgICAvLyBDbG9uZSBlYWNoIFg2NFdvcmQgb2JqZWN0CgkJICAgICAgICAgICAgdmFyIHdvcmRzTGVuZ3RoID0gd29yZHMubGVuZ3RoOwoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHNMZW5ndGg7IGkrKykgewoJCSAgICAgICAgICAgICAgICB3b3Jkc1tpXSA9IHdvcmRzW2ldLmNsb25lKCk7CgkJICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICByZXR1cm4gY2xvbmU7CgkJICAgICAgICB9CgkJICAgIH0pOwoJCX0oKSk7CgoKCQlyZXR1cm4gQ3J5cHRvSlM7CgoJfSkpOwoKLyoqKi8gfSksCgovKioqLyAyMTU6Ci8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgk7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7CgkJaWYgKHRydWUpIHsKCQkJLy8gQ29tbW9uSlMKCQkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMykpOwoJCX0KCQllbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQpIHsKCQkJLy8gQU1ECgkJCWRlZmluZShbIi4vY29yZSJdLCBmYWN0b3J5KTsKCQl9CgkJZWxzZSB7CgkJCS8vIEdsb2JhbCAoYnJvd3NlcikKCQkJZmFjdG9yeShyb290LkNyeXB0b0pTKTsKCQl9Cgl9KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKCQkoZnVuY3Rpb24gKCkgewoJCSAgICAvLyBDaGVjayBpZiB0eXBlZCBhcnJheXMgYXJlIHN1cHBvcnRlZAoJCSAgICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9ICdmdW5jdGlvbicpIHsKCQkgICAgICAgIHJldHVybjsKCQkgICAgfQoKCQkgICAgLy8gU2hvcnRjdXRzCgkJICAgIHZhciBDID0gQ3J5cHRvSlM7CgkJICAgIHZhciBDX2xpYiA9IEMubGliOwoJCSAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5OwoKCQkgICAgLy8gUmVmZXJlbmNlIG9yaWdpbmFsIGluaXQKCQkgICAgdmFyIHN1cGVySW5pdCA9IFdvcmRBcnJheS5pbml0OwoKCQkgICAgLy8gQXVnbWVudCBXb3JkQXJyYXkuaW5pdCB0byBoYW5kbGUgdHlwZWQgYXJyYXlzCgkJICAgIHZhciBzdWJJbml0ID0gV29yZEFycmF5LmluaXQgPSBmdW5jdGlvbiAodHlwZWRBcnJheSkgewoJCSAgICAgICAgLy8gQ29udmVydCBidWZmZXJzIHRvIHVpbnQ4CgkJICAgICAgICBpZiAodHlwZWRBcnJheSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7CgkJICAgICAgICAgICAgdHlwZWRBcnJheSA9IG5ldyBVaW50OEFycmF5KHR5cGVkQXJyYXkpOwoJCSAgICAgICAgfQoKCQkgICAgICAgIC8vIENvbnZlcnQgb3RoZXIgYXJyYXkgdmlld3MgdG8gdWludDgKCQkgICAgICAgIGlmICgKCQkgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgSW50OEFycmF5IHx8CgkJICAgICAgICAgICAgKHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSAhPT0gInVuZGVmaW5lZCIgJiYgdHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5KSB8fAoJCSAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBJbnQxNkFycmF5IHx8CgkJICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQxNkFycmF5IHx8CgkJICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEludDMyQXJyYXkgfHwKCQkgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkgfHwKCQkgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8CgkJICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheQoJCSAgICAgICAgKSB7CgkJICAgICAgICAgICAgdHlwZWRBcnJheSA9IG5ldyBVaW50OEFycmF5KHR5cGVkQXJyYXkuYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkuYnl0ZUxlbmd0aCk7CgkJICAgICAgICB9CgoJCSAgICAgICAgLy8gSGFuZGxlIFVpbnQ4QXJyYXkKCQkgICAgICAgIGlmICh0eXBlZEFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSkgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0CgkJICAgICAgICAgICAgdmFyIHR5cGVkQXJyYXlCeXRlTGVuZ3RoID0gdHlwZWRBcnJheS5ieXRlTGVuZ3RoOwoKCQkgICAgICAgICAgICAvLyBFeHRyYWN0IGJ5dGVzCgkJICAgICAgICAgICAgdmFyIHdvcmRzID0gW107CgkJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZEFycmF5Qnl0ZUxlbmd0aDsgaSsrKSB7CgkJICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDJdIHw9IHR5cGVkQXJyYXlbaV0gPDwgKDI0IC0gKGkgJSA0KSAqIDgpOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGlzIHdvcmQgYXJyYXkKCQkgICAgICAgICAgICBzdXBlckluaXQuY2FsbCh0aGlzLCB3b3JkcywgdHlwZWRBcnJheUJ5dGVMZW5ndGgpOwoJCSAgICAgICAgfSBlbHNlIHsKCQkgICAgICAgICAgICAvLyBFbHNlIGNhbGwgbm9ybWFsIGluaXQKCQkgICAgICAgICAgICBzdXBlckluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCQkgICAgICAgIH0KCQkgICAgfTsKCgkJICAgIHN1YkluaXQucHJvdG90eXBlID0gV29yZEFycmF5OwoJCX0oKSk7CgoKCQlyZXR1cm4gQ3J5cHRvSlMubGliLldvcmRBcnJheTsKCgl9KSk7CgovKioqLyB9KSwKCi8qKiovIDIxNjoKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCTsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHsKCQlpZiAodHJ1ZSkgewoJCQkvLyBDb21tb25KUwoJCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oMjEzKSk7CgkJfQoJCWVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewoJCQkvLyBBTUQKCQkJZGVmaW5lKFsiLi9jb3JlIl0sIGZhY3RvcnkpOwoJCX0KCQllbHNlIHsKCQkJLy8gR2xvYmFsIChicm93c2VyKQoJCQlmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpOwoJCX0KCX0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgoJCShmdW5jdGlvbiAoKSB7CgkJICAgIC8vIFNob3J0Y3V0cwoJCSAgICB2YXIgQyA9IENyeXB0b0pTOwoJCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKCQkgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTsKCQkgICAgdmFyIENfZW5jID0gQy5lbmM7CgoJCSAgICAvKioKCQkgICAgICogVVRGLTE2IEJFIGVuY29kaW5nIHN0cmF0ZWd5LgoJCSAgICAgKi8KCQkgICAgdmFyIFV0ZjE2QkUgPSBDX2VuYy5VdGYxNiA9IENfZW5jLlV0ZjE2QkUgPSB7CgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIFVURi0xNiBCRSBzdHJpbmcuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVVEYtMTYgQkUgc3RyaW5nLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBzdGF0aWMKCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgdXRmMTZTdHJpbmcgPSBDcnlwdG9KUy5lbmMuVXRmMTYuc3RyaW5naWZ5KHdvcmRBcnJheSk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3JkczsKCQkgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7CgoJCSAgICAgICAgICAgIC8vIENvbnZlcnQKCQkgICAgICAgICAgICB2YXIgdXRmMTZDaGFycyA9IFtdOwoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkgKz0gMikgewoJCSAgICAgICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMTYgLSAoaSAlIDQpICogOCkpICYgMHhmZmZmOwoJCSAgICAgICAgICAgICAgICB1dGYxNkNoYXJzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlUG9pbnQpKTsKCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIHJldHVybiB1dGYxNkNoYXJzLmpvaW4oJycpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENvbnZlcnRzIGEgVVRGLTE2IEJFIHN0cmluZyB0byBhIHdvcmQgYXJyYXkuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHV0ZjE2U3RyIFRoZSBVVEYtMTYgQkUgc3RyaW5nLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHN0YXRpYwoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmMTYucGFyc2UodXRmMTZTdHJpbmcpOwoJCSAgICAgICAgICovCgkJICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHV0ZjE2U3RyKSB7CgkJICAgICAgICAgICAgLy8gU2hvcnRjdXQKCQkgICAgICAgICAgICB2YXIgdXRmMTZTdHJMZW5ndGggPSB1dGYxNlN0ci5sZW5ndGg7CgoJCSAgICAgICAgICAgIC8vIENvbnZlcnQKCQkgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTsKCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHV0ZjE2U3RyTGVuZ3RoOyBpKyspIHsKCQkgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMV0gfD0gdXRmMTZTdHIuY2hhckNvZGVBdChpKSA8PCAoMTYgLSAoaSAlIDIpICogMTYpOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgcmV0dXJuIFdvcmRBcnJheS5jcmVhdGUod29yZHMsIHV0ZjE2U3RyTGVuZ3RoICogMik7CgkJICAgICAgICB9CgkJICAgIH07CgoJCSAgICAvKioKCQkgICAgICogVVRGLTE2IExFIGVuY29kaW5nIHN0cmF0ZWd5LgoJCSAgICAgKi8KCQkgICAgQ19lbmMuVXRmMTZMRSA9IHsKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgVVRGLTE2IExFIHN0cmluZy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVURi0xNiBMRSBzdHJpbmcuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHN0YXRpYwoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHZhciB1dGYxNlN0ciA9IENyeXB0b0pTLmVuYy5VdGYxNkxFLnN0cmluZ2lmeSh3b3JkQXJyYXkpOwoJCSAgICAgICAgICovCgkJICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHsKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7CgkJICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzOwoKCQkgICAgICAgICAgICAvLyBDb252ZXJ0CgkJICAgICAgICAgICAgdmFyIHV0ZjE2Q2hhcnMgPSBbXTsKCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpICs9IDIpIHsKCQkgICAgICAgICAgICAgICAgdmFyIGNvZGVQb2ludCA9IHN3YXBFbmRpYW4oKHdvcmRzW2kgPj4+IDJdID4+PiAoMTYgLSAoaSAlIDQpICogOCkpICYgMHhmZmZmKTsKCQkgICAgICAgICAgICAgICAgdXRmMTZDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KSk7CgkJICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICByZXR1cm4gdXRmMTZDaGFycy5qb2luKCcnKTsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBDb252ZXJ0cyBhIFVURi0xNiBMRSBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1dGYxNlN0ciBUaGUgVVRGLTE2IExFIHN0cmluZy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBzdGF0aWMKCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLlV0ZjE2TEUucGFyc2UodXRmMTZTdHIpOwoJCSAgICAgICAgICovCgkJICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHV0ZjE2U3RyKSB7CgkJICAgICAgICAgICAgLy8gU2hvcnRjdXQKCQkgICAgICAgICAgICB2YXIgdXRmMTZTdHJMZW5ndGggPSB1dGYxNlN0ci5sZW5ndGg7CgoJCSAgICAgICAgICAgIC8vIENvbnZlcnQKCQkgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTsKCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHV0ZjE2U3RyTGVuZ3RoOyBpKyspIHsKCQkgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMV0gfD0gc3dhcEVuZGlhbih1dGYxNlN0ci5jaGFyQ29kZUF0KGkpIDw8ICgxNiAtIChpICUgMikgKiAxNikpOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgcmV0dXJuIFdvcmRBcnJheS5jcmVhdGUod29yZHMsIHV0ZjE2U3RyTGVuZ3RoICogMik7CgkJICAgICAgICB9CgkJICAgIH07CgoJCSAgICBmdW5jdGlvbiBzd2FwRW5kaWFuKHdvcmQpIHsKCQkgICAgICAgIHJldHVybiAoKHdvcmQgPDwgOCkgJiAweGZmMDBmZjAwKSB8ICgod29yZCA+Pj4gOCkgJiAweDAwZmYwMGZmKTsKCQkgICAgfQoJCX0oKSk7CgoKCQlyZXR1cm4gQ3J5cHRvSlMuZW5jLlV0ZjE2OwoKCX0pKTsKCi8qKiovIH0pLAoKLyoqKi8gMjE3OgovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkgewoJCWlmICh0cnVlKSB7CgkJCS8vIENvbW1vbkpTCgkJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoX193ZWJwYWNrX3JlcXVpcmVfXygyMTMpKTsKCQl9CgkJZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSB7CgkJCS8vIEFNRAoJCQlkZWZpbmUoWyIuL2NvcmUiXSwgZmFjdG9yeSk7CgkJfQoJCWVsc2UgewoJCQkvLyBHbG9iYWwgKGJyb3dzZXIpCgkJCWZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7CgkJfQoJfSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCgkJKGZ1bmN0aW9uICgpIHsKCQkgICAgLy8gU2hvcnRjdXRzCgkJICAgIHZhciBDID0gQ3J5cHRvSlM7CgkJICAgIHZhciBDX2xpYiA9IEMubGliOwoJCSAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5OwoJCSAgICB2YXIgQ19lbmMgPSBDLmVuYzsKCgkJICAgIC8qKgoJCSAgICAgKiBCYXNlNjQgZW5jb2Rpbmcgc3RyYXRlZ3kuCgkJICAgICAqLwoJCSAgICB2YXIgQmFzZTY0ID0gQ19lbmMuQmFzZTY0ID0gewoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBCYXNlNjQgc3RyaW5nLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgQmFzZTY0IHN0cmluZy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAc3RhdGljCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIGJhc2U2NFN0cmluZyA9IENyeXB0b0pTLmVuYy5CYXNlNjQuc3RyaW5naWZ5KHdvcmRBcnJheSk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3JkczsKCQkgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7CgkJICAgICAgICAgICAgdmFyIG1hcCA9IHRoaXMuX21hcDsKCgkJICAgICAgICAgICAgLy8gQ2xhbXAgZXhjZXNzIGJpdHMKCQkgICAgICAgICAgICB3b3JkQXJyYXkuY2xhbXAoKTsKCgkJICAgICAgICAgICAgLy8gQ29udmVydAoJCSAgICAgICAgICAgIHZhciBiYXNlNjRDaGFycyA9IFtdOwoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkgKz0gMykgewoJCSAgICAgICAgICAgICAgICB2YXIgYnl0ZTEgPSAod29yZHNbaSA+Pj4gMl0gICAgICAgPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgICAgICAgJiAweGZmOwoJCSAgICAgICAgICAgICAgICB2YXIgYnl0ZTIgPSAod29yZHNbKGkgKyAxKSA+Pj4gMl0gPj4+ICgyNCAtICgoaSArIDEpICUgNCkgKiA4KSkgJiAweGZmOwoJCSAgICAgICAgICAgICAgICB2YXIgYnl0ZTMgPSAod29yZHNbKGkgKyAyKSA+Pj4gMl0gPj4+ICgyNCAtICgoaSArIDIpICUgNCkgKiA4KSkgJiAweGZmOwoKCQkgICAgICAgICAgICAgICAgdmFyIHRyaXBsZXQgPSAoYnl0ZTEgPDwgMTYpIHwgKGJ5dGUyIDw8IDgpIHwgYnl0ZTM7CgoJCSAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgKGogPCA0KSAmJiAoaSArIGogKiAwLjc1IDwgc2lnQnl0ZXMpOyBqKyspIHsKCQkgICAgICAgICAgICAgICAgICAgIGJhc2U2NENoYXJzLnB1c2gobWFwLmNoYXJBdCgodHJpcGxldCA+Pj4gKDYgKiAoMyAtIGopKSkgJiAweDNmKSk7CgkJICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nCgkJICAgICAgICAgICAgdmFyIHBhZGRpbmdDaGFyID0gbWFwLmNoYXJBdCg2NCk7CgkJICAgICAgICAgICAgaWYgKHBhZGRpbmdDaGFyKSB7CgkJICAgICAgICAgICAgICAgIHdoaWxlIChiYXNlNjRDaGFycy5sZW5ndGggJSA0KSB7CgkJICAgICAgICAgICAgICAgICAgICBiYXNlNjRDaGFycy5wdXNoKHBhZGRpbmdDaGFyKTsKCQkgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgcmV0dXJuIGJhc2U2NENoYXJzLmpvaW4oJycpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENvbnZlcnRzIGEgQmFzZTY0IHN0cmluZyB0byBhIHdvcmQgYXJyYXkuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2U2NFN0ciBUaGUgQmFzZTY0IHN0cmluZy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBzdGF0aWMKCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLkJhc2U2NC5wYXJzZShiYXNlNjRTdHJpbmcpOwoJCSAgICAgICAgICovCgkJICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGJhc2U2NFN0cikgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgIHZhciBiYXNlNjRTdHJMZW5ndGggPSBiYXNlNjRTdHIubGVuZ3RoOwoJCSAgICAgICAgICAgIHZhciBtYXAgPSB0aGlzLl9tYXA7CgkJICAgICAgICAgICAgdmFyIHJldmVyc2VNYXAgPSB0aGlzLl9yZXZlcnNlTWFwOwoKCQkgICAgICAgICAgICBpZiAoIXJldmVyc2VNYXApIHsKCQkgICAgICAgICAgICAgICAgICAgIHJldmVyc2VNYXAgPSB0aGlzLl9yZXZlcnNlTWFwID0gW107CgkJICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1hcC5sZW5ndGg7IGorKykgewoJCSAgICAgICAgICAgICAgICAgICAgICAgIHJldmVyc2VNYXBbbWFwLmNoYXJDb2RlQXQoaildID0gajsKCQkgICAgICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIC8vIElnbm9yZSBwYWRkaW5nCgkJICAgICAgICAgICAgdmFyIHBhZGRpbmdDaGFyID0gbWFwLmNoYXJBdCg2NCk7CgkJICAgICAgICAgICAgaWYgKHBhZGRpbmdDaGFyKSB7CgkJICAgICAgICAgICAgICAgIHZhciBwYWRkaW5nSW5kZXggPSBiYXNlNjRTdHIuaW5kZXhPZihwYWRkaW5nQ2hhcik7CgkJICAgICAgICAgICAgICAgIGlmIChwYWRkaW5nSW5kZXggIT09IC0xKSB7CgkJICAgICAgICAgICAgICAgICAgICBiYXNlNjRTdHJMZW5ndGggPSBwYWRkaW5nSW5kZXg7CgkJICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIC8vIENvbnZlcnQKCQkgICAgICAgICAgICByZXR1cm4gcGFyc2VMb29wKGJhc2U2NFN0ciwgYmFzZTY0U3RyTGVuZ3RoLCByZXZlcnNlTWFwKTsKCgkJICAgICAgICB9LAoKCQkgICAgICAgIF9tYXA6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPScKCQkgICAgfTsKCgkJICAgIGZ1bmN0aW9uIHBhcnNlTG9vcChiYXNlNjRTdHIsIGJhc2U2NFN0ckxlbmd0aCwgcmV2ZXJzZU1hcCkgewoJCSAgICAgIHZhciB3b3JkcyA9IFtdOwoJCSAgICAgIHZhciBuQnl0ZXMgPSAwOwoJCSAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmFzZTY0U3RyTGVuZ3RoOyBpKyspIHsKCQkgICAgICAgICAgaWYgKGkgJSA0KSB7CgkJICAgICAgICAgICAgICB2YXIgYml0czEgPSByZXZlcnNlTWFwW2Jhc2U2NFN0ci5jaGFyQ29kZUF0KGkgLSAxKV0gPDwgKChpICUgNCkgKiAyKTsKCQkgICAgICAgICAgICAgIHZhciBiaXRzMiA9IHJldmVyc2VNYXBbYmFzZTY0U3RyLmNoYXJDb2RlQXQoaSldID4+PiAoNiAtIChpICUgNCkgKiAyKTsKCQkgICAgICAgICAgICAgIHdvcmRzW25CeXRlcyA+Pj4gMl0gfD0gKGJpdHMxIHwgYml0czIpIDw8ICgyNCAtIChuQnl0ZXMgJSA0KSAqIDgpOwoJCSAgICAgICAgICAgICAgbkJ5dGVzKys7CgkJICAgICAgICAgIH0KCQkgICAgICB9CgkJICAgICAgcmV0dXJuIFdvcmRBcnJheS5jcmVhdGUod29yZHMsIG5CeXRlcyk7CgkJICAgIH0KCQl9KCkpOwoKCgkJcmV0dXJuIENyeXB0b0pTLmVuYy5CYXNlNjQ7CgoJfSkpOwoKLyoqKi8gfSksCgovKioqLyAyMTg6Ci8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgk7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7CgkJaWYgKHRydWUpIHsKCQkJLy8gQ29tbW9uSlMKCQkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMykpOwoJCX0KCQllbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQpIHsKCQkJLy8gQU1ECgkJCWRlZmluZShbIi4vY29yZSJdLCBmYWN0b3J5KTsKCQl9CgkJZWxzZSB7CgkJCS8vIEdsb2JhbCAoYnJvd3NlcikKCQkJZmFjdG9yeShyb290LkNyeXB0b0pTKTsKCQl9Cgl9KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKCQkoZnVuY3Rpb24gKE1hdGgpIHsKCQkgICAgLy8gU2hvcnRjdXRzCgkJICAgIHZhciBDID0gQ3J5cHRvSlM7CgkJICAgIHZhciBDX2xpYiA9IEMubGliOwoJCSAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5OwoJCSAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyOwoJCSAgICB2YXIgQ19hbGdvID0gQy5hbGdvOwoKCQkgICAgLy8gQ29uc3RhbnRzIHRhYmxlCgkJICAgIHZhciBUID0gW107CgoJCSAgICAvLyBDb21wdXRlIGNvbnN0YW50cwoJCSAgICAoZnVuY3Rpb24gKCkgewoJCSAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2NDsgaSsrKSB7CgkJICAgICAgICAgICAgVFtpXSA9IChNYXRoLmFicyhNYXRoLnNpbihpICsgMSkpICogMHgxMDAwMDAwMDApIHwgMDsKCQkgICAgICAgIH0KCQkgICAgfSgpKTsKCgkJICAgIC8qKgoJCSAgICAgKiBNRDUgaGFzaCBhbGdvcml0aG0uCgkJICAgICAqLwoJCSAgICB2YXIgTUQ1ID0gQ19hbGdvLk1ENSA9IEhhc2hlci5leHRlbmQoewoJCSAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KFsKCQkgICAgICAgICAgICAgICAgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSwKCQkgICAgICAgICAgICAgICAgMHg5OGJhZGNmZSwgMHgxMDMyNTQ3NgoJCSAgICAgICAgICAgIF0pOwoJCSAgICAgICAgfSwKCgkJICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHsKCQkgICAgICAgICAgICAvLyBTd2FwIGVuZGlhbgoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykgewoJCSAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgICAgICAgICAgdmFyIG9mZnNldF9pID0gb2Zmc2V0ICsgaTsKCQkgICAgICAgICAgICAgICAgdmFyIE1fb2Zmc2V0X2kgPSBNW29mZnNldF9pXTsKCgkJICAgICAgICAgICAgICAgIE1bb2Zmc2V0X2ldID0gKAoJCSAgICAgICAgICAgICAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCA4KSAgfCAoTV9vZmZzZXRfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKCQkgICAgICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgMjQpIHwgKE1fb2Zmc2V0X2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKQoJCSAgICAgICAgICAgICAgICApOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgdmFyIEggPSB0aGlzLl9oYXNoLndvcmRzOwoKCQkgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMCAgPSBNW29mZnNldCArIDBdOwoJCSAgICAgICAgICAgIHZhciBNX29mZnNldF8xICA9IE1bb2Zmc2V0ICsgMV07CgkJICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzIgID0gTVtvZmZzZXQgKyAyXTsKCQkgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMyAgPSBNW29mZnNldCArIDNdOwoJCSAgICAgICAgICAgIHZhciBNX29mZnNldF80ICA9IE1bb2Zmc2V0ICsgNF07CgkJICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzUgID0gTVtvZmZzZXQgKyA1XTsKCQkgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNiAgPSBNW29mZnNldCArIDZdOwoJCSAgICAgICAgICAgIHZhciBNX29mZnNldF83ICA9IE1bb2Zmc2V0ICsgN107CgkJICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzggID0gTVtvZmZzZXQgKyA4XTsKCQkgICAgICAgICAgICB2YXIgTV9vZmZzZXRfOSAgPSBNW29mZnNldCArIDldOwoJCSAgICAgICAgICAgIHZhciBNX29mZnNldF8xMCA9IE1bb2Zmc2V0ICsgMTBdOwoJCSAgICAgICAgICAgIHZhciBNX29mZnNldF8xMSA9IE1bb2Zmc2V0ICsgMTFdOwoJCSAgICAgICAgICAgIHZhciBNX29mZnNldF8xMiA9IE1bb2Zmc2V0ICsgMTJdOwoJCSAgICAgICAgICAgIHZhciBNX29mZnNldF8xMyA9IE1bb2Zmc2V0ICsgMTNdOwoJCSAgICAgICAgICAgIHZhciBNX29mZnNldF8xNCA9IE1bb2Zmc2V0ICsgMTRdOwoJCSAgICAgICAgICAgIHZhciBNX29mZnNldF8xNSA9IE1bb2Zmc2V0ICsgMTVdOwoKCQkgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhbGJlcwoJCSAgICAgICAgICAgIHZhciBhID0gSFswXTsKCQkgICAgICAgICAgICB2YXIgYiA9IEhbMV07CgkJICAgICAgICAgICAgdmFyIGMgPSBIWzJdOwoJCSAgICAgICAgICAgIHZhciBkID0gSFszXTsKCgkJICAgICAgICAgICAgLy8gQ29tcHV0YXRpb24KCQkgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfMCwgIDcsICBUWzBdKTsKCQkgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfMSwgIDEyLCBUWzFdKTsKCQkgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfMiwgIDE3LCBUWzJdKTsKCQkgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfMywgIDIyLCBUWzNdKTsKCQkgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfNCwgIDcsICBUWzRdKTsKCQkgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfNSwgIDEyLCBUWzVdKTsKCQkgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfNiwgIDE3LCBUWzZdKTsKCQkgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfNywgIDIyLCBUWzddKTsKCQkgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfOCwgIDcsICBUWzhdKTsKCQkgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfOSwgIDEyLCBUWzldKTsKCQkgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTAsIDE3LCBUWzEwXSk7CgkJICAgICAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzExLCAyMiwgVFsxMV0pOwoJCSAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF8xMiwgNywgIFRbMTJdKTsKCQkgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTMsIDEyLCBUWzEzXSk7CgkJICAgICAgICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE0LCAxNywgVFsxNF0pOwoJCSAgICAgICAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF8xNSwgMjIsIFRbMTVdKTsKCgkJICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEsICA1LCAgVFsxNl0pOwoJCSAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF82LCAgOSwgIFRbMTddKTsKCQkgICAgICAgICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfMTEsIDE0LCBUWzE4XSk7CgkJICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzAsICAyMCwgVFsxOV0pOwoJCSAgICAgICAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBNX29mZnNldF81LCAgNSwgIFRbMjBdKTsKCQkgICAgICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfMTAsIDksICBUWzIxXSk7CgkJICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE1LCAxNCwgVFsyMl0pOwoJCSAgICAgICAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF80LCAgMjAsIFRbMjNdKTsKCQkgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfOSwgIDUsICBUWzI0XSk7CgkJICAgICAgICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzE0LCA5LCAgVFsyNV0pOwoJCSAgICAgICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF8zLCAgMTQsIFRbMjZdKTsKCQkgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfOCwgIDIwLCBUWzI3XSk7CgkJICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEzLCA1LCAgVFsyOF0pOwoJCSAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF8yLCAgOSwgIFRbMjldKTsKCQkgICAgICAgICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfNywgIDE0LCBUWzMwXSk7CgkJICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEyLCAyMCwgVFszMV0pOwoKCQkgICAgICAgICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfNSwgIDQsICBUWzMyXSk7CgkJICAgICAgICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzgsICAxMSwgVFszM10pOwoJCSAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8xMSwgMTYsIFRbMzRdKTsKCQkgICAgICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTQsIDIzLCBUWzM1XSk7CgkJICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEsICA0LCAgVFszNl0pOwoJCSAgICAgICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF80LCAgMTEsIFRbMzddKTsKCQkgICAgICAgICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfNywgIDE2LCBUWzM4XSk7CgkJICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEwLCAyMywgVFszOV0pOwoJCSAgICAgICAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF8xMywgNCwgIFRbNDBdKTsKCQkgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfMCwgIDExLCBUWzQxXSk7CgkJICAgICAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzMsICAxNiwgVFs0Ml0pOwoJCSAgICAgICAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBNX29mZnNldF82LCAgMjMsIFRbNDNdKTsKCQkgICAgICAgICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfOSwgIDQsICBUWzQ0XSk7CgkJICAgICAgICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEyLCAxMSwgVFs0NV0pOwoJCSAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8xNSwgMTYsIFRbNDZdKTsKCQkgICAgICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfMiwgIDIzLCBUWzQ3XSk7CgoJCSAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF8wLCAgNiwgIFRbNDhdKTsKCQkgICAgICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfNywgIDEwLCBUWzQ5XSk7CgkJICAgICAgICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE0LCAxNSwgVFs1MF0pOwoJCSAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF81LCAgMjEsIFRbNTFdKTsKCQkgICAgICAgICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfMTIsIDYsICBUWzUyXSk7CgkJICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzMsICAxMCwgVFs1M10pOwoJCSAgICAgICAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF8xMCwgMTUsIFRbNTRdKTsKCQkgICAgICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfMSwgIDIxLCBUWzU1XSk7CgkJICAgICAgICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzgsICA2LCAgVFs1Nl0pOwoJCSAgICAgICAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBNX29mZnNldF8xNSwgMTAsIFRbNTddKTsKCQkgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfNiwgIDE1LCBUWzU4XSk7CgkJICAgICAgICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEzLCAyMSwgVFs1OV0pOwoJCSAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF80LCAgNiwgIFRbNjBdKTsKCQkgICAgICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTEsIDEwLCBUWzYxXSk7CgkJICAgICAgICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzIsICAxNSwgVFs2Ml0pOwoJCSAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF85LCAgMjEsIFRbNjNdKTsKCgkJICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWUKCQkgICAgICAgICAgICBIWzBdID0gKEhbMF0gKyBhKSB8IDA7CgkJICAgICAgICAgICAgSFsxXSA9IChIWzFdICsgYikgfCAwOwoJCSAgICAgICAgICAgIEhbMl0gPSAoSFsyXSArIGMpIHwgMDsKCQkgICAgICAgICAgICBIWzNdID0gKEhbM10gKyBkKSB8IDA7CgkJICAgICAgICB9LAoKCQkgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7CgkJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhOwoJCSAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzOwoKCQkgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4OwoJCSAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODsKCgkJICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmcKCQkgICAgICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTsKCgkJICAgICAgICAgICAgdmFyIG5CaXRzVG90YWxIID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApOwoJCSAgICAgICAgICAgIHZhciBuQml0c1RvdGFsTCA9IG5CaXRzVG90YWw7CgkJICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNV0gPSAoCgkJICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWxIIDw8IDgpICB8IChuQml0c1RvdGFsSCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKCQkgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEggPDwgMjQpIHwgKG5CaXRzVG90YWxIID4+PiA4KSkgICYgMHhmZjAwZmYwMCkKCQkgICAgICAgICAgICApOwoJCSAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gKAoJCSAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsTCA8PCA4KSAgfCAobkJpdHNUb3RhbEwgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8CgkJICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWxMIDw8IDI0KSB8IChuQml0c1RvdGFsTCA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApCgkJICAgICAgICAgICAgKTsKCgkJICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IChkYXRhV29yZHMubGVuZ3RoICsgMSkgKiA0OwoKCQkgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2NrcwoJCSAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTsKCgkJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoOwoJCSAgICAgICAgICAgIHZhciBIID0gaGFzaC53b3JkczsKCgkJICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW4KCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykgewoJCSAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dAoJCSAgICAgICAgICAgICAgICB2YXIgSF9pID0gSFtpXTsKCgkJICAgICAgICAgICAgICAgIEhbaV0gPSAoKChIX2kgPDwgOCkgIHwgKEhfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKCQkgICAgICAgICAgICAgICAgICAgICAgICgoKEhfaSA8PCAyNCkgfCAoSF9pID4+PiA4KSkgICYgMHhmZjAwZmYwMCk7CgkJICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaAoJCSAgICAgICAgICAgIHJldHVybiBoYXNoOwoJCSAgICAgICAgfSwKCgkJICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpOwoJCSAgICAgICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpOwoKCQkgICAgICAgICAgICByZXR1cm4gY2xvbmU7CgkJICAgICAgICB9CgkJICAgIH0pOwoKCQkgICAgZnVuY3Rpb24gRkYoYSwgYiwgYywgZCwgeCwgcywgdCkgewoJCSAgICAgICAgdmFyIG4gPSBhICsgKChiICYgYykgfCAofmIgJiBkKSkgKyB4ICsgdDsKCQkgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7CgkJICAgIH0KCgkJICAgIGZ1bmN0aW9uIEdHKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHsKCQkgICAgICAgIHZhciBuID0gYSArICgoYiAmIGQpIHwgKGMgJiB+ZCkpICsgeCArIHQ7CgkJICAgICAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiOwoJCSAgICB9CgoJCSAgICBmdW5jdGlvbiBISChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7CgkJICAgICAgICB2YXIgbiA9IGEgKyAoYiBeIGMgXiBkKSArIHggKyB0OwoJCSAgICAgICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjsKCQkgICAgfQoKCQkgICAgZnVuY3Rpb24gSUkoYSwgYiwgYywgZCwgeCwgcywgdCkgewoJCSAgICAgICAgdmFyIG4gPSBhICsgKGMgXiAoYiB8IH5kKSkgKyB4ICsgdDsKCQkgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7CgkJICAgIH0KCgkJICAgIC8qKgoJCSAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS4KCQkgICAgICoKCQkgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guCgkJICAgICAqCgkJICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guCgkJICAgICAqCgkJICAgICAqIEBzdGF0aWMKCQkgICAgICoKCQkgICAgICogQGV4YW1wbGUKCQkgICAgICoKCQkgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuTUQ1KCdtZXNzYWdlJyk7CgkJICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLk1ENSh3b3JkQXJyYXkpOwoJCSAgICAgKi8KCQkgICAgQy5NRDUgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihNRDUpOwoKCQkgICAgLyoqCgkJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS4KCQkgICAgICoKCQkgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guCgkJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LgoJCSAgICAgKgoJCSAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLgoJCSAgICAgKgoJCSAgICAgKiBAc3RhdGljCgkJICAgICAqCgkJICAgICAqIEBleGFtcGxlCgkJICAgICAqCgkJICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNNRDUobWVzc2FnZSwga2V5KTsKCQkgICAgICovCgkJICAgIEMuSG1hY01ENSA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihNRDUpOwoJCX0oTWF0aCkpOwoKCgkJcmV0dXJuIENyeXB0b0pTLk1ENTsKCgl9KSk7CgovKioqLyB9KSwKCi8qKiovIDIxOToKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCTsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHsKCQlpZiAodHJ1ZSkgewoJCQkvLyBDb21tb25KUwoJCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oMjEzKSk7CgkJfQoJCWVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewoJCQkvLyBBTUQKCQkJZGVmaW5lKFsiLi9jb3JlIl0sIGZhY3RvcnkpOwoJCX0KCQllbHNlIHsKCQkJLy8gR2xvYmFsIChicm93c2VyKQoJCQlmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpOwoJCX0KCX0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgoJCShmdW5jdGlvbiAoKSB7CgkJICAgIC8vIFNob3J0Y3V0cwoJCSAgICB2YXIgQyA9IENyeXB0b0pTOwoJCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKCQkgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTsKCQkgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjsKCQkgICAgdmFyIENfYWxnbyA9IEMuYWxnbzsKCgkJICAgIC8vIFJldXNhYmxlIG9iamVjdAoJCSAgICB2YXIgVyA9IFtdOwoKCQkgICAgLyoqCgkJICAgICAqIFNIQS0xIGhhc2ggYWxnb3JpdGhtLgoJCSAgICAgKi8KCQkgICAgdmFyIFNIQTEgPSBDX2FsZ28uU0hBMSA9IEhhc2hlci5leHRlbmQoewoJCSAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KFsKCQkgICAgICAgICAgICAgICAgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSwKCQkgICAgICAgICAgICAgICAgMHg5OGJhZGNmZSwgMHgxMDMyNTQ3NiwKCQkgICAgICAgICAgICAgICAgMHhjM2QyZTFmMAoJCSAgICAgICAgICAgIF0pOwoJCSAgICAgICAgfSwKCgkJICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHsKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dAoJCSAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkczsKCgkJICAgICAgICAgICAgLy8gV29ya2luZyB2YXJpYWJsZXMKCQkgICAgICAgICAgICB2YXIgYSA9IEhbMF07CgkJICAgICAgICAgICAgdmFyIGIgPSBIWzFdOwoJCSAgICAgICAgICAgIHZhciBjID0gSFsyXTsKCQkgICAgICAgICAgICB2YXIgZCA9IEhbM107CgkJICAgICAgICAgICAgdmFyIGUgPSBIWzRdOwoKCQkgICAgICAgICAgICAvLyBDb21wdXRhdGlvbgoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkrKykgewoJCSAgICAgICAgICAgICAgICBpZiAoaSA8IDE2KSB7CgkJICAgICAgICAgICAgICAgICAgICBXW2ldID0gTVtvZmZzZXQgKyBpXSB8IDA7CgkJICAgICAgICAgICAgICAgIH0gZWxzZSB7CgkJICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl07CgkJICAgICAgICAgICAgICAgICAgICBXW2ldID0gKG4gPDwgMSkgfCAobiA+Pj4gMzEpOwoJCSAgICAgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgICAgICB2YXIgdCA9ICgoYSA8PCA1KSB8IChhID4+PiAyNykpICsgZSArIFdbaV07CgkJICAgICAgICAgICAgICAgIGlmIChpIDwgMjApIHsKCQkgICAgICAgICAgICAgICAgICAgIHQgKz0gKChiICYgYykgfCAofmIgJiBkKSkgKyAweDVhODI3OTk5OwoJCSAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPCA0MCkgewoJCSAgICAgICAgICAgICAgICAgICAgdCArPSAoYiBeIGMgXiBkKSArIDB4NmVkOWViYTE7CgkJICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA8IDYwKSB7CgkJICAgICAgICAgICAgICAgICAgICB0ICs9ICgoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZCkpIC0gMHg3MGU0NDMyNDsKCQkgICAgICAgICAgICAgICAgfSBlbHNlIC8qIGlmIChpIDwgODApICovIHsKCQkgICAgICAgICAgICAgICAgICAgIHQgKz0gKGIgXiBjIF4gZCkgLSAweDM1OWQzZTJhOwoJCSAgICAgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgICAgICBlID0gZDsKCQkgICAgICAgICAgICAgICAgZCA9IGM7CgkJICAgICAgICAgICAgICAgIGMgPSAoYiA8PCAzMCkgfCAoYiA+Pj4gMik7CgkJICAgICAgICAgICAgICAgIGIgPSBhOwoJCSAgICAgICAgICAgICAgICBhID0gdDsKCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlCgkJICAgICAgICAgICAgSFswXSA9IChIWzBdICsgYSkgfCAwOwoJCSAgICAgICAgICAgIEhbMV0gPSAoSFsxXSArIGIpIHwgMDsKCQkgICAgICAgICAgICBIWzJdID0gKEhbMl0gKyBjKSB8IDA7CgkJICAgICAgICAgICAgSFszXSA9IChIWzNdICsgZCkgfCAwOwoJCSAgICAgICAgICAgIEhbNF0gPSAoSFs0XSArIGUpIHwgMDsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7CgkJICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7CgoJCSAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7CgkJICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4OwoKCQkgICAgICAgICAgICAvLyBBZGQgcGFkZGluZwoJCSAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpOwoJCSAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApOwoJCSAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTVdID0gbkJpdHNUb3RhbDsKCQkgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gZGF0YVdvcmRzLmxlbmd0aCAqIDQ7CgoJCSAgICAgICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzCgkJICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpOwoKCQkgICAgICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaAoJCSAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYXNoOwoJCSAgICAgICAgfSwKCgkJICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpOwoJCSAgICAgICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpOwoKCQkgICAgICAgICAgICByZXR1cm4gY2xvbmU7CgkJICAgICAgICB9CgkJICAgIH0pOwoKCQkgICAgLyoqCgkJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLgoJCSAgICAgKgoJCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KCQkgICAgICoKCQkgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC4KCQkgICAgICoKCQkgICAgICogQHN0YXRpYwoJCSAgICAgKgoJCSAgICAgKiBAZXhhbXBsZQoJCSAgICAgKgoJCSAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEExKCdtZXNzYWdlJyk7CgkJICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTEod29yZEFycmF5KTsKCQkgICAgICovCgkJICAgIEMuU0hBMSA9IEhhc2hlci5fY3JlYXRlSGVscGVyKFNIQTEpOwoKCQkgICAgLyoqCgkJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS4KCQkgICAgICoKCQkgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guCgkJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LgoJCSAgICAgKgoJCSAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLgoJCSAgICAgKgoJCSAgICAgKiBAc3RhdGljCgkJICAgICAqCgkJICAgICAqIEBleGFtcGxlCgkJICAgICAqCgkJICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEExKG1lc3NhZ2UsIGtleSk7CgkJICAgICAqLwoJCSAgICBDLkhtYWNTSEExID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTEpOwoJCX0oKSk7CgoKCQlyZXR1cm4gQ3J5cHRvSlMuU0hBMTsKCgl9KSk7CgovKioqLyB9KSwKCi8qKiovIDIyMDoKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCTsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHsKCQlpZiAodHJ1ZSkgewoJCQkvLyBDb21tb25KUwoJCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oMjEzKSk7CgkJfQoJCWVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewoJCQkvLyBBTUQKCQkJZGVmaW5lKFsiLi9jb3JlIl0sIGZhY3RvcnkpOwoJCX0KCQllbHNlIHsKCQkJLy8gR2xvYmFsIChicm93c2VyKQoJCQlmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpOwoJCX0KCX0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgoJCShmdW5jdGlvbiAoTWF0aCkgewoJCSAgICAvLyBTaG9ydGN1dHMKCQkgICAgdmFyIEMgPSBDcnlwdG9KUzsKCQkgICAgdmFyIENfbGliID0gQy5saWI7CgkJICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7CgkJICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7CgkJICAgIHZhciBDX2FsZ28gPSBDLmFsZ287CgoJCSAgICAvLyBJbml0aWFsaXphdGlvbiBhbmQgcm91bmQgY29uc3RhbnRzIHRhYmxlcwoJCSAgICB2YXIgSCA9IFtdOwoJCSAgICB2YXIgSyA9IFtdOwoKCQkgICAgLy8gQ29tcHV0ZSBjb25zdGFudHMKCQkgICAgKGZ1bmN0aW9uICgpIHsKCQkgICAgICAgIGZ1bmN0aW9uIGlzUHJpbWUobikgewoJCSAgICAgICAgICAgIHZhciBzcXJ0TiA9IE1hdGguc3FydChuKTsKCQkgICAgICAgICAgICBmb3IgKHZhciBmYWN0b3IgPSAyOyBmYWN0b3IgPD0gc3FydE47IGZhY3RvcisrKSB7CgkJICAgICAgICAgICAgICAgIGlmICghKG4gJSBmYWN0b3IpKSB7CgkJICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CgkJICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIHJldHVybiB0cnVlOwoJCSAgICAgICAgfQoKCQkgICAgICAgIGZ1bmN0aW9uIGdldEZyYWN0aW9uYWxCaXRzKG4pIHsKCQkgICAgICAgICAgICByZXR1cm4gKChuIC0gKG4gfCAwKSkgKiAweDEwMDAwMDAwMCkgfCAwOwoJCSAgICAgICAgfQoKCQkgICAgICAgIHZhciBuID0gMjsKCQkgICAgICAgIHZhciBuUHJpbWUgPSAwOwoJCSAgICAgICAgd2hpbGUgKG5QcmltZSA8IDY0KSB7CgkJICAgICAgICAgICAgaWYgKGlzUHJpbWUobikpIHsKCQkgICAgICAgICAgICAgICAgaWYgKG5QcmltZSA8IDgpIHsKCQkgICAgICAgICAgICAgICAgICAgIEhbblByaW1lXSA9IGdldEZyYWN0aW9uYWxCaXRzKE1hdGgucG93KG4sIDEgLyAyKSk7CgkJICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICAgICAgS1tuUHJpbWVdID0gZ2V0RnJhY3Rpb25hbEJpdHMoTWF0aC5wb3cobiwgMSAvIDMpKTsKCgkJICAgICAgICAgICAgICAgIG5QcmltZSsrOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgbisrOwoJCSAgICAgICAgfQoJCSAgICB9KCkpOwoKCQkgICAgLy8gUmV1c2FibGUgb2JqZWN0CgkJICAgIHZhciBXID0gW107CgoJCSAgICAvKioKCQkgICAgICogU0hBLTI1NiBoYXNoIGFsZ29yaXRobS4KCQkgICAgICovCgkJICAgIHZhciBTSEEyNTYgPSBDX2FsZ28uU0hBMjU2ID0gSGFzaGVyLmV4dGVuZCh7CgkJICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgV29yZEFycmF5LmluaXQoSC5zbGljZSgwKSk7CgkJICAgICAgICB9LAoKCQkgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0CgkJICAgICAgICAgICAgdmFyIEggPSB0aGlzLl9oYXNoLndvcmRzOwoKCQkgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlcwoJCSAgICAgICAgICAgIHZhciBhID0gSFswXTsKCQkgICAgICAgICAgICB2YXIgYiA9IEhbMV07CgkJICAgICAgICAgICAgdmFyIGMgPSBIWzJdOwoJCSAgICAgICAgICAgIHZhciBkID0gSFszXTsKCQkgICAgICAgICAgICB2YXIgZSA9IEhbNF07CgkJICAgICAgICAgICAgdmFyIGYgPSBIWzVdOwoJCSAgICAgICAgICAgIHZhciBnID0gSFs2XTsKCQkgICAgICAgICAgICB2YXIgaCA9IEhbN107CgoJCSAgICAgICAgICAgIC8vIENvbXB1dGF0aW9uCgkJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2NDsgaSsrKSB7CgkJICAgICAgICAgICAgICAgIGlmIChpIDwgMTYpIHsKCQkgICAgICAgICAgICAgICAgICAgIFdbaV0gPSBNW29mZnNldCArIGldIHwgMDsKCQkgICAgICAgICAgICAgICAgfSBlbHNlIHsKCQkgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTB4ID0gV1tpIC0gMTVdOwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMCAgPSAoKGdhbW1hMHggPDwgMjUpIHwgKGdhbW1hMHggPj4+IDcpKSAgXgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGdhbW1hMHggPDwgMTQpIHwgKGdhbW1hMHggPj4+IDE4KSkgXgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGdhbW1hMHggPj4+IDMpOwoKCQkgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTF4ID0gV1tpIC0gMl07CgkJICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExICA9ICgoZ2FtbWExeCA8PCAxNSkgfCAoZ2FtbWExeCA+Pj4gMTcpKSBeCgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoZ2FtbWExeCA8PCAxMykgfCAoZ2FtbWExeCA+Pj4gMTkpKSBeCgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZ2FtbWExeCA+Pj4gMTApOwoKCQkgICAgICAgICAgICAgICAgICAgIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2XTsKCQkgICAgICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICAgICAgdmFyIGNoICA9IChlICYgZikgXiAofmUgJiBnKTsKCQkgICAgICAgICAgICAgICAgdmFyIG1haiA9IChhICYgYikgXiAoYSAmIGMpIF4gKGIgJiBjKTsKCgkJICAgICAgICAgICAgICAgIHZhciBzaWdtYTAgPSAoKGEgPDwgMzApIHwgKGEgPj4+IDIpKSBeICgoYSA8PCAxOSkgfCAoYSA+Pj4gMTMpKSBeICgoYSA8PCAxMCkgfCAoYSA+Pj4gMjIpKTsKCQkgICAgICAgICAgICAgICAgdmFyIHNpZ21hMSA9ICgoZSA8PCAyNikgfCAoZSA+Pj4gNikpIF4gKChlIDw8IDIxKSB8IChlID4+PiAxMSkpIF4gKChlIDw8IDcpICB8IChlID4+PiAyNSkpOwoKCQkgICAgICAgICAgICAgICAgdmFyIHQxID0gaCArIHNpZ21hMSArIGNoICsgS1tpXSArIFdbaV07CgkJICAgICAgICAgICAgICAgIHZhciB0MiA9IHNpZ21hMCArIG1hajsKCgkJICAgICAgICAgICAgICAgIGggPSBnOwoJCSAgICAgICAgICAgICAgICBnID0gZjsKCQkgICAgICAgICAgICAgICAgZiA9IGU7CgkJICAgICAgICAgICAgICAgIGUgPSAoZCArIHQxKSB8IDA7CgkJICAgICAgICAgICAgICAgIGQgPSBjOwoJCSAgICAgICAgICAgICAgICBjID0gYjsKCQkgICAgICAgICAgICAgICAgYiA9IGE7CgkJICAgICAgICAgICAgICAgIGEgPSAodDEgKyB0MikgfCAwOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWUKCQkgICAgICAgICAgICBIWzBdID0gKEhbMF0gKyBhKSB8IDA7CgkJICAgICAgICAgICAgSFsxXSA9IChIWzFdICsgYikgfCAwOwoJCSAgICAgICAgICAgIEhbMl0gPSAoSFsyXSArIGMpIHwgMDsKCQkgICAgICAgICAgICBIWzNdID0gKEhbM10gKyBkKSB8IDA7CgkJICAgICAgICAgICAgSFs0XSA9IChIWzRdICsgZSkgfCAwOwoJCSAgICAgICAgICAgIEhbNV0gPSAoSFs1XSArIGYpIHwgMDsKCQkgICAgICAgICAgICBIWzZdID0gKEhbNl0gKyBnKSB8IDA7CgkJICAgICAgICAgICAgSFs3XSA9IChIWzddICsgaCkgfCAwOwoJCSAgICAgICAgfSwKCgkJICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTsKCQkgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkczsKCgkJICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODsKCQkgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7CgoJCSAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nCgkJICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7CgkJICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSBNYXRoLmZsb29yKG5CaXRzVG90YWwgLyAweDEwMDAwMDAwMCk7CgkJICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNV0gPSBuQml0c1RvdGFsOwoJCSAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSBkYXRhV29yZHMubGVuZ3RoICogNDsKCgkJICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3MKCQkgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7CgoJCSAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoCgkJICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhc2g7CgkJICAgICAgICB9LAoKCQkgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7CgkJICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7CgkJICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7CgoJCSAgICAgICAgICAgIHJldHVybiBjbG9uZTsKCQkgICAgICAgIH0KCQkgICAgfSk7CgoJCSAgICAvKioKCQkgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuCgkJICAgICAqCgkJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLgoJCSAgICAgKgoJCSAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLgoJCSAgICAgKgoJCSAgICAgKiBAc3RhdGljCgkJICAgICAqCgkJICAgICAqIEBleGFtcGxlCgkJICAgICAqCgkJICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTI1NignbWVzc2FnZScpOwoJCSAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyNTYod29yZEFycmF5KTsKCQkgICAgICovCgkJICAgIEMuU0hBMjU2ID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBMjU2KTsKCgkJICAgIC8qKgoJCSAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuCgkJICAgICAqCgkJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLgoJCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS4KCQkgICAgICoKCQkgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy4KCQkgICAgICoKCQkgICAgICogQHN0YXRpYwoJCSAgICAgKgoJCSAgICAgKiBAZXhhbXBsZQoJCSAgICAgKgoJCSAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMjU2KG1lc3NhZ2UsIGtleSk7CgkJICAgICAqLwoJCSAgICBDLkhtYWNTSEEyNTYgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMjU2KTsKCQl9KE1hdGgpKTsKCgoJCXJldHVybiBDcnlwdG9KUy5TSEEyNTY7CgoJfSkpOwoKLyoqKi8gfSksCgovKioqLyAyMjE6Ci8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgk7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewoJCWlmICh0cnVlKSB7CgkJCS8vIENvbW1vbkpTCgkJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoX193ZWJwYWNrX3JlcXVpcmVfXygyMTMpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyMCkpOwoJCX0KCQllbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQpIHsKCQkJLy8gQU1ECgkJCWRlZmluZShbIi4vY29yZSIsICIuL3NoYTI1NiJdLCBmYWN0b3J5KTsKCQl9CgkJZWxzZSB7CgkJCS8vIEdsb2JhbCAoYnJvd3NlcikKCQkJZmFjdG9yeShyb290LkNyeXB0b0pTKTsKCQl9Cgl9KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKCQkoZnVuY3Rpb24gKCkgewoJCSAgICAvLyBTaG9ydGN1dHMKCQkgICAgdmFyIEMgPSBDcnlwdG9KUzsKCQkgICAgdmFyIENfbGliID0gQy5saWI7CgkJICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7CgkJICAgIHZhciBDX2FsZ28gPSBDLmFsZ287CgkJICAgIHZhciBTSEEyNTYgPSBDX2FsZ28uU0hBMjU2OwoKCQkgICAgLyoqCgkJICAgICAqIFNIQS0yMjQgaGFzaCBhbGdvcml0aG0uCgkJICAgICAqLwoJCSAgICB2YXIgU0hBMjI0ID0gQ19hbGdvLlNIQTIyNCA9IFNIQTI1Ni5leHRlbmQoewoJCSAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KFsKCQkgICAgICAgICAgICAgICAgMHhjMTA1OWVkOCwgMHgzNjdjZDUwNywgMHgzMDcwZGQxNywgMHhmNzBlNTkzOSwKCQkgICAgICAgICAgICAgICAgMHhmZmMwMGIzMSwgMHg2ODU4MTUxMSwgMHg2NGY5OGZhNywgMHhiZWZhNGZhNAoJCSAgICAgICAgICAgIF0pOwoJCSAgICAgICAgfSwKCgkJICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIHZhciBoYXNoID0gU0hBMjU2Ll9kb0ZpbmFsaXplLmNhbGwodGhpcyk7CgoJCSAgICAgICAgICAgIGhhc2guc2lnQnl0ZXMgLT0gNDsKCgkJICAgICAgICAgICAgcmV0dXJuIGhhc2g7CgkJICAgICAgICB9CgkJICAgIH0pOwoKCQkgICAgLyoqCgkJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLgoJCSAgICAgKgoJCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KCQkgICAgICoKCQkgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC4KCQkgICAgICoKCQkgICAgICogQHN0YXRpYwoJCSAgICAgKgoJCSAgICAgKiBAZXhhbXBsZQoJCSAgICAgKgoJCSAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyMjQoJ21lc3NhZ2UnKTsKCQkgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjI0KHdvcmRBcnJheSk7CgkJICAgICAqLwoJCSAgICBDLlNIQTIyNCA9IFNIQTI1Ni5fY3JlYXRlSGVscGVyKFNIQTIyNCk7CgoJCSAgICAvKioKCQkgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLgoJCSAgICAgKgoJCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KCQkgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuCgkJICAgICAqCgkJICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuCgkJICAgICAqCgkJICAgICAqIEBzdGF0aWMKCQkgICAgICoKCQkgICAgICogQGV4YW1wbGUKCQkgICAgICoKCQkgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTIyNChtZXNzYWdlLCBrZXkpOwoJCSAgICAgKi8KCQkgICAgQy5IbWFjU0hBMjI0ID0gU0hBMjU2Ll9jcmVhdGVIbWFjSGVscGVyKFNIQTIyNCk7CgkJfSgpKTsKCgoJCXJldHVybiBDcnlwdG9KUy5TSEEyMjQ7CgoJfSkpOwoKLyoqKi8gfSksCgovKioqLyAyMjI6Ci8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgk7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewoJCWlmICh0cnVlKSB7CgkJCS8vIENvbW1vbkpTCgkJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoX193ZWJwYWNrX3JlcXVpcmVfXygyMTMpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxNCkpOwoJCX0KCQllbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQpIHsKCQkJLy8gQU1ECgkJCWRlZmluZShbIi4vY29yZSIsICIuL3g2NC1jb3JlIl0sIGZhY3RvcnkpOwoJCX0KCQllbHNlIHsKCQkJLy8gR2xvYmFsIChicm93c2VyKQoJCQlmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpOwoJCX0KCX0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgoJCShmdW5jdGlvbiAoKSB7CgkJICAgIC8vIFNob3J0Y3V0cwoJCSAgICB2YXIgQyA9IENyeXB0b0pTOwoJCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKCQkgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjsKCQkgICAgdmFyIENfeDY0ID0gQy54NjQ7CgkJICAgIHZhciBYNjRXb3JkID0gQ194NjQuV29yZDsKCQkgICAgdmFyIFg2NFdvcmRBcnJheSA9IENfeDY0LldvcmRBcnJheTsKCQkgICAgdmFyIENfYWxnbyA9IEMuYWxnbzsKCgkJICAgIGZ1bmN0aW9uIFg2NFdvcmRfY3JlYXRlKCkgewoJCSAgICAgICAgcmV0dXJuIFg2NFdvcmQuY3JlYXRlLmFwcGx5KFg2NFdvcmQsIGFyZ3VtZW50cyk7CgkJICAgIH0KCgkJICAgIC8vIENvbnN0YW50cwoJCSAgICB2YXIgSyA9IFsKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIpLCBYNjRXb3JkX2NyZWF0ZSgweDcxMzc0NDkxLCAweDIzZWY2NWNkKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYpLCBYNjRXb3JkX2NyZWF0ZSgweGU5YjVkYmE1LCAweDgxODlkYmJjKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgpLCBYNjRXb3JkX2NyZWF0ZSgweDU5ZjExMWYxLCAweGI2MDVkMDE5KSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIpLCBYNjRXb3JkX2NyZWF0ZSgweGFiMWM1ZWQ1LCAweGRhNmQ4MTE4KSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIpLCBYNjRXb3JkX2NyZWF0ZSgweDEyODM1YjAxLCAweDQ1NzA2ZmJlKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMpLCBYNjRXb3JkX2NyZWF0ZSgweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYpLCBYNjRXb3JkX2NyZWF0ZSgweDgwZGViMWZlLCAweDNiMTY5NmIxKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUpLCBYNjRXb3JkX2NyZWF0ZSgweGMxOWJmMTc0LCAweGNmNjkyNjk0KSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIpLCBYNjRXb3JkX2NyZWF0ZSgweGVmYmU0Nzg2LCAweDM4NGYyNWUzKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUpLCBYNjRXb3JkX2NyZWF0ZSgweDI0MGNhMWNjLCAweDc3YWM5YzY1KSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUpLCBYNjRXb3JkX2NyZWF0ZSgweDRhNzQ4NGFhLCAweDZlYTZlNDgzKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQpLCBYNjRXb3JkX2NyZWF0ZSgweDc2Zjk4OGRhLCAweDgzMTE1M2I1KSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIpLCBYNjRXb3JkX2NyZWF0ZSgweGE4MzFjNjZkLCAweDJkYjQzMjEwKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YjAwMzI3YzgsIDB4OThmYjIxM2YpLCBYNjRXb3JkX2NyZWF0ZSgweGJmNTk3ZmM3LCAweGJlZWYwZWU0KSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YzZlMDBiZjMsIDB4M2RhODhmYzIpLCBYNjRXb3JkX2NyZWF0ZSgweGQ1YTc5MTQ3LCAweDkzMGFhNzI1KSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYpLCBYNjRXb3JkX2NyZWF0ZSgweDE0MjkyOTY3LCAweDBhMGU2ZTcwKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MjdiNzBhODUsIDB4NDZkMjJmZmMpLCBYNjRXb3JkX2NyZWF0ZSgweDJlMWIyMTM4LCAweDVjMjZjOTI2KSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQpLCBYNjRXb3JkX2NyZWF0ZSgweDUzMzgwZDEzLCAweDlkOTViM2RmKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NjUwYTczNTQsIDB4OGJhZjYzZGUpLCBYNjRXb3JkX2NyZWF0ZSgweDc2NmEwYWJiLCAweDNjNzdiMmE4KSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYpLCBYNjRXb3JkX2NyZWF0ZSgweDkyNzIyYzg1LCAweDE0ODIzNTNiKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQpLCBYNjRXb3JkX2NyZWF0ZSgweGE4MWE2NjRiLCAweGJjNDIzMDAxKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEpLCBYNjRXb3JkX2NyZWF0ZSgweGM3NmM1MWEzLCAweDA2NTRiZTMwKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgpLCBYNjRXb3JkX2NyZWF0ZSgweGQ2OTkwNjI0LCAweDU1NjVhOTEwKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEpLCBYNjRXb3JkX2NyZWF0ZSgweDEwNmFhMDcwLCAweDMyYmJkMWI4KSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgpLCBYNjRXb3JkX2NyZWF0ZSgweDFlMzc2YzA4LCAweDUxNDFhYjUzKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTkpLCBYNjRXb3JkX2NyZWF0ZSgweDM0YjBiY2I1LCAweGUxOWI0OGE4KSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMpLCBYNjRXb3JkX2NyZWF0ZSgweDRlZDhhYTRhLCAweGUzNDE4YWNiKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMpLCBYNjRXb3JkX2NyZWF0ZSgweDY4MmU2ZmYzLCAweGQ2YjJiOGEzKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMpLCBYNjRXb3JkX2NyZWF0ZSgweDc4YTU2MzZmLCAweDQzMTcyZjYwKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ODRjODc4MTQsIDB4YTFmMGFiNzIpLCBYNjRXb3JkX2NyZWF0ZSgweDhjYzcwMjA4LCAweDFhNjQzOWVjKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgpLCBYNjRXb3JkX2NyZWF0ZSgweGE0NTA2Y2ViLCAweGRlODJiZGU5KSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUpLCBYNjRXb3JkX2NyZWF0ZSgweGM2NzE3OGYyLCAweGUzNzI1MzJiKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMpLCBYNjRXb3JkX2NyZWF0ZSgweGQxODZiOGM3LCAweDIxYzBjMjA3KSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUpLCBYNjRXb3JkX2NyZWF0ZSgweGY1N2Q0ZjdmLCAweGVlNmVkMTc4KSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEpLCBYNjRXb3JkX2NyZWF0ZSgweDBhNjM3ZGM1LCAweGEyYzg5OGE2KSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUpLCBYNjRXb3JkX2NyZWF0ZSgweDFiNzEwYjM1LCAweDEzMWM0NzFiKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQpLCBYNjRXb3JkX2NyZWF0ZSgweDMyY2FhYjdiLCAweDQwYzcyNDkzKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMpLCBYNjRXb3JkX2NyZWF0ZSgweDQzMWQ2N2M0LCAweDljMTAwZDRjKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYpLCBYNjRXb3JkX2NyZWF0ZSgweDU5N2YyOTljLCAweGZjNjU3ZTJhKSwKCQkgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMpLCBYNjRXb3JkX2NyZWF0ZSgweDZjNDQxOThjLCAweDRhNDc1ODE3KQoJCSAgICBdOwoKCQkgICAgLy8gUmV1c2FibGUgb2JqZWN0cwoJCSAgICB2YXIgVyA9IFtdOwoJCSAgICAoZnVuY3Rpb24gKCkgewoJCSAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSsrKSB7CgkJICAgICAgICAgICAgV1tpXSA9IFg2NFdvcmRfY3JlYXRlKCk7CgkJICAgICAgICB9CgkJICAgIH0oKSk7CgoJCSAgICAvKioKCQkgICAgICogU0hBLTUxMiBoYXNoIGFsZ29yaXRobS4KCQkgICAgICovCgkJICAgIHZhciBTSEE1MTIgPSBDX2FsZ28uU0hBNTEyID0gSGFzaGVyLmV4dGVuZCh7CgkJICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgWDY0V29yZEFycmF5LmluaXQoWwoJCSAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4NmEwOWU2NjcsIDB4ZjNiY2M5MDgpLCBuZXcgWDY0V29yZC5pbml0KDB4YmI2N2FlODUsIDB4ODRjYWE3M2IpLAoJCSAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4M2M2ZWYzNzIsIDB4ZmU5NGY4MmIpLCBuZXcgWDY0V29yZC5pbml0KDB4YTU0ZmY1M2EsIDB4NWYxZDM2ZjEpLAoJCSAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4NTEwZTUyN2YsIDB4YWRlNjgyZDEpLCBuZXcgWDY0V29yZC5pbml0KDB4OWIwNTY4OGMsIDB4MmIzZTZjMWYpLAoJCSAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4MWY4M2Q5YWIsIDB4ZmI0MWJkNmIpLCBuZXcgWDY0V29yZC5pbml0KDB4NWJlMGNkMTksIDB4MTM3ZTIxNzkpCgkJICAgICAgICAgICAgXSk7CgkJICAgICAgICB9LAoKCQkgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkczsKCgkJICAgICAgICAgICAgdmFyIEgwID0gSFswXTsKCQkgICAgICAgICAgICB2YXIgSDEgPSBIWzFdOwoJCSAgICAgICAgICAgIHZhciBIMiA9IEhbMl07CgkJICAgICAgICAgICAgdmFyIEgzID0gSFszXTsKCQkgICAgICAgICAgICB2YXIgSDQgPSBIWzRdOwoJCSAgICAgICAgICAgIHZhciBINSA9IEhbNV07CgkJICAgICAgICAgICAgdmFyIEg2ID0gSFs2XTsKCQkgICAgICAgICAgICB2YXIgSDcgPSBIWzddOwoKCQkgICAgICAgICAgICB2YXIgSDBoID0gSDAuaGlnaDsKCQkgICAgICAgICAgICB2YXIgSDBsID0gSDAubG93OwoJCSAgICAgICAgICAgIHZhciBIMWggPSBIMS5oaWdoOwoJCSAgICAgICAgICAgIHZhciBIMWwgPSBIMS5sb3c7CgkJICAgICAgICAgICAgdmFyIEgyaCA9IEgyLmhpZ2g7CgkJICAgICAgICAgICAgdmFyIEgybCA9IEgyLmxvdzsKCQkgICAgICAgICAgICB2YXIgSDNoID0gSDMuaGlnaDsKCQkgICAgICAgICAgICB2YXIgSDNsID0gSDMubG93OwoJCSAgICAgICAgICAgIHZhciBINGggPSBINC5oaWdoOwoJCSAgICAgICAgICAgIHZhciBINGwgPSBINC5sb3c7CgkJICAgICAgICAgICAgdmFyIEg1aCA9IEg1LmhpZ2g7CgkJICAgICAgICAgICAgdmFyIEg1bCA9IEg1LmxvdzsKCQkgICAgICAgICAgICB2YXIgSDZoID0gSDYuaGlnaDsKCQkgICAgICAgICAgICB2YXIgSDZsID0gSDYubG93OwoJCSAgICAgICAgICAgIHZhciBIN2ggPSBINy5oaWdoOwoJCSAgICAgICAgICAgIHZhciBIN2wgPSBINy5sb3c7CgoJCSAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFibGVzCgkJICAgICAgICAgICAgdmFyIGFoID0gSDBoOwoJCSAgICAgICAgICAgIHZhciBhbCA9IEgwbDsKCQkgICAgICAgICAgICB2YXIgYmggPSBIMWg7CgkJICAgICAgICAgICAgdmFyIGJsID0gSDFsOwoJCSAgICAgICAgICAgIHZhciBjaCA9IEgyaDsKCQkgICAgICAgICAgICB2YXIgY2wgPSBIMmw7CgkJICAgICAgICAgICAgdmFyIGRoID0gSDNoOwoJCSAgICAgICAgICAgIHZhciBkbCA9IEgzbDsKCQkgICAgICAgICAgICB2YXIgZWggPSBINGg7CgkJICAgICAgICAgICAgdmFyIGVsID0gSDRsOwoJCSAgICAgICAgICAgIHZhciBmaCA9IEg1aDsKCQkgICAgICAgICAgICB2YXIgZmwgPSBINWw7CgkJICAgICAgICAgICAgdmFyIGdoID0gSDZoOwoJCSAgICAgICAgICAgIHZhciBnbCA9IEg2bDsKCQkgICAgICAgICAgICB2YXIgaGggPSBIN2g7CgkJICAgICAgICAgICAgdmFyIGhsID0gSDdsOwoKCQkgICAgICAgICAgICAvLyBSb3VuZHMKCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHsKCQkgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXQKCQkgICAgICAgICAgICAgICAgdmFyIFdpID0gV1tpXTsKCgkJICAgICAgICAgICAgICAgIC8vIEV4dGVuZCBtZXNzYWdlCgkJICAgICAgICAgICAgICAgIGlmIChpIDwgMTYpIHsKCQkgICAgICAgICAgICAgICAgICAgIHZhciBXaWggPSBXaS5oaWdoID0gTVtvZmZzZXQgKyBpICogMl0gICAgIHwgMDsKCQkgICAgICAgICAgICAgICAgICAgIHZhciBXaWwgPSBXaS5sb3cgID0gTVtvZmZzZXQgKyBpICogMiArIDFdIHwgMDsKCQkgICAgICAgICAgICAgICAgfSBlbHNlIHsKCQkgICAgICAgICAgICAgICAgICAgIC8vIEdhbW1hMAoJCSAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMHggID0gV1tpIC0gMTVdOwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMHhoID0gZ2FtbWEweC5oaWdoOwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMHhsID0gZ2FtbWEweC5sb3c7CgkJICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEwaCAgPSAoKGdhbW1hMHhoID4+PiAxKSB8IChnYW1tYTB4bCA8PCAzMSkpIF4gKChnYW1tYTB4aCA+Pj4gOCkgfCAoZ2FtbWEweGwgPDwgMjQpKSBeIChnYW1tYTB4aCA+Pj4gNyk7CgkJICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEwbCAgPSAoKGdhbW1hMHhsID4+PiAxKSB8IChnYW1tYTB4aCA8PCAzMSkpIF4gKChnYW1tYTB4bCA+Pj4gOCkgfCAoZ2FtbWEweGggPDwgMjQpKSBeICgoZ2FtbWEweGwgPj4+IDcpIHwgKGdhbW1hMHhoIDw8IDI1KSk7CgoJCSAgICAgICAgICAgICAgICAgICAgLy8gR2FtbWExCgkJICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExeCAgPSBXW2kgLSAyXTsKCQkgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTF4aCA9IGdhbW1hMXguaGlnaDsKCQkgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTF4bCA9IGdhbW1hMXgubG93OwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMWggID0gKChnYW1tYTF4aCA+Pj4gMTkpIHwgKGdhbW1hMXhsIDw8IDEzKSkgXiAoKGdhbW1hMXhoIDw8IDMpIHwgKGdhbW1hMXhsID4+PiAyOSkpIF4gKGdhbW1hMXhoID4+PiA2KTsKCQkgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTFsICA9ICgoZ2FtbWExeGwgPj4+IDE5KSB8IChnYW1tYTF4aCA8PCAxMykpIF4gKChnYW1tYTF4bCA8PCAzKSB8IChnYW1tYTF4aCA+Pj4gMjkpKSBeICgoZ2FtbWExeGwgPj4+IDYpIHwgKGdhbW1hMXhoIDw8IDI2KSk7CgoJCSAgICAgICAgICAgICAgICAgICAgLy8gV1tpXSA9IGdhbW1hMCArIFdbaSAtIDddICsgZ2FtbWExICsgV1tpIC0gMTZdCgkJICAgICAgICAgICAgICAgICAgICB2YXIgV2k3ICA9IFdbaSAtIDddOwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIFdpN2ggPSBXaTcuaGlnaDsKCQkgICAgICAgICAgICAgICAgICAgIHZhciBXaTdsID0gV2k3LmxvdzsKCgkJICAgICAgICAgICAgICAgICAgICB2YXIgV2kxNiAgPSBXW2kgLSAxNl07CgkJICAgICAgICAgICAgICAgICAgICB2YXIgV2kxNmggPSBXaTE2LmhpZ2g7CgkJICAgICAgICAgICAgICAgICAgICB2YXIgV2kxNmwgPSBXaTE2LmxvdzsKCgkJICAgICAgICAgICAgICAgICAgICB2YXIgV2lsID0gZ2FtbWEwbCArIFdpN2w7CgkJICAgICAgICAgICAgICAgICAgICB2YXIgV2loID0gZ2FtbWEwaCArIFdpN2ggKyAoKFdpbCA+Pj4gMCkgPCAoZ2FtbWEwbCA+Pj4gMCkgPyAxIDogMCk7CgkJICAgICAgICAgICAgICAgICAgICB2YXIgV2lsID0gV2lsICsgZ2FtbWExbDsKCQkgICAgICAgICAgICAgICAgICAgIHZhciBXaWggPSBXaWggKyBnYW1tYTFoICsgKChXaWwgPj4+IDApIDwgKGdhbW1hMWwgPj4+IDApID8gMSA6IDApOwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIFdpbCA9IFdpbCArIFdpMTZsOwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIFdpaCA9IFdpaCArIFdpMTZoICsgKChXaWwgPj4+IDApIDwgKFdpMTZsID4+PiAwKSA/IDEgOiAwKTsKCgkJICAgICAgICAgICAgICAgICAgICBXaS5oaWdoID0gV2loOwoJCSAgICAgICAgICAgICAgICAgICAgV2kubG93ICA9IFdpbDsKCQkgICAgICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICAgICAgdmFyIGNoaCAgPSAoZWggJiBmaCkgXiAofmVoICYgZ2gpOwoJCSAgICAgICAgICAgICAgICB2YXIgY2hsICA9IChlbCAmIGZsKSBeICh+ZWwgJiBnbCk7CgkJICAgICAgICAgICAgICAgIHZhciBtYWpoID0gKGFoICYgYmgpIF4gKGFoICYgY2gpIF4gKGJoICYgY2gpOwoJCSAgICAgICAgICAgICAgICB2YXIgbWFqbCA9IChhbCAmIGJsKSBeIChhbCAmIGNsKSBeIChibCAmIGNsKTsKCgkJICAgICAgICAgICAgICAgIHZhciBzaWdtYTBoID0gKChhaCA+Pj4gMjgpIHwgKGFsIDw8IDQpKSAgXiAoKGFoIDw8IDMwKSAgfCAoYWwgPj4+IDIpKSBeICgoYWggPDwgMjUpIHwgKGFsID4+PiA3KSk7CgkJICAgICAgICAgICAgICAgIHZhciBzaWdtYTBsID0gKChhbCA+Pj4gMjgpIHwgKGFoIDw8IDQpKSAgXiAoKGFsIDw8IDMwKSAgfCAoYWggPj4+IDIpKSBeICgoYWwgPDwgMjUpIHwgKGFoID4+PiA3KSk7CgkJICAgICAgICAgICAgICAgIHZhciBzaWdtYTFoID0gKChlaCA+Pj4gMTQpIHwgKGVsIDw8IDE4KSkgXiAoKGVoID4+PiAxOCkgfCAoZWwgPDwgMTQpKSBeICgoZWggPDwgMjMpIHwgKGVsID4+PiA5KSk7CgkJICAgICAgICAgICAgICAgIHZhciBzaWdtYTFsID0gKChlbCA+Pj4gMTQpIHwgKGVoIDw8IDE4KSkgXiAoKGVsID4+PiAxOCkgfCAoZWggPDwgMTQpKSBeICgoZWwgPDwgMjMpIHwgKGVoID4+PiA5KSk7CgoJCSAgICAgICAgICAgICAgICAvLyB0MSA9IGggKyBzaWdtYTEgKyBjaCArIEtbaV0gKyBXW2ldCgkJICAgICAgICAgICAgICAgIHZhciBLaSAgPSBLW2ldOwoJCSAgICAgICAgICAgICAgICB2YXIgS2loID0gS2kuaGlnaDsKCQkgICAgICAgICAgICAgICAgdmFyIEtpbCA9IEtpLmxvdzsKCgkJICAgICAgICAgICAgICAgIHZhciB0MWwgPSBobCArIHNpZ21hMWw7CgkJICAgICAgICAgICAgICAgIHZhciB0MWggPSBoaCArIHNpZ21hMWggKyAoKHQxbCA+Pj4gMCkgPCAoaGwgPj4+IDApID8gMSA6IDApOwoJCSAgICAgICAgICAgICAgICB2YXIgdDFsID0gdDFsICsgY2hsOwoJCSAgICAgICAgICAgICAgICB2YXIgdDFoID0gdDFoICsgY2hoICsgKCh0MWwgPj4+IDApIDwgKGNobCA+Pj4gMCkgPyAxIDogMCk7CgkJICAgICAgICAgICAgICAgIHZhciB0MWwgPSB0MWwgKyBLaWw7CgkJICAgICAgICAgICAgICAgIHZhciB0MWggPSB0MWggKyBLaWggKyAoKHQxbCA+Pj4gMCkgPCAoS2lsID4+PiAwKSA/IDEgOiAwKTsKCQkgICAgICAgICAgICAgICAgdmFyIHQxbCA9IHQxbCArIFdpbDsKCQkgICAgICAgICAgICAgICAgdmFyIHQxaCA9IHQxaCArIFdpaCArICgodDFsID4+PiAwKSA8IChXaWwgPj4+IDApID8gMSA6IDApOwoKCQkgICAgICAgICAgICAgICAgLy8gdDIgPSBzaWdtYTAgKyBtYWoKCQkgICAgICAgICAgICAgICAgdmFyIHQybCA9IHNpZ21hMGwgKyBtYWpsOwoJCSAgICAgICAgICAgICAgICB2YXIgdDJoID0gc2lnbWEwaCArIG1hamggKyAoKHQybCA+Pj4gMCkgPCAoc2lnbWEwbCA+Pj4gMCkgPyAxIDogMCk7CgoJCSAgICAgICAgICAgICAgICAvLyBVcGRhdGUgd29ya2luZyB2YXJpYWJsZXMKCQkgICAgICAgICAgICAgICAgaGggPSBnaDsKCQkgICAgICAgICAgICAgICAgaGwgPSBnbDsKCQkgICAgICAgICAgICAgICAgZ2ggPSBmaDsKCQkgICAgICAgICAgICAgICAgZ2wgPSBmbDsKCQkgICAgICAgICAgICAgICAgZmggPSBlaDsKCQkgICAgICAgICAgICAgICAgZmwgPSBlbDsKCQkgICAgICAgICAgICAgICAgZWwgPSAoZGwgKyB0MWwpIHwgMDsKCQkgICAgICAgICAgICAgICAgZWggPSAoZGggKyB0MWggKyAoKGVsID4+PiAwKSA8IChkbCA+Pj4gMCkgPyAxIDogMCkpIHwgMDsKCQkgICAgICAgICAgICAgICAgZGggPSBjaDsKCQkgICAgICAgICAgICAgICAgZGwgPSBjbDsKCQkgICAgICAgICAgICAgICAgY2ggPSBiaDsKCQkgICAgICAgICAgICAgICAgY2wgPSBibDsKCQkgICAgICAgICAgICAgICAgYmggPSBhaDsKCQkgICAgICAgICAgICAgICAgYmwgPSBhbDsKCQkgICAgICAgICAgICAgICAgYWwgPSAodDFsICsgdDJsKSB8IDA7CgkJICAgICAgICAgICAgICAgIGFoID0gKHQxaCArIHQyaCArICgoYWwgPj4+IDApIDwgKHQxbCA+Pj4gMCkgPyAxIDogMCkpIHwgMDsKCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlCgkJICAgICAgICAgICAgSDBsID0gSDAubG93ICA9IChIMGwgKyBhbCk7CgkJICAgICAgICAgICAgSDAuaGlnaCA9IChIMGggKyBhaCArICgoSDBsID4+PiAwKSA8IChhbCA+Pj4gMCkgPyAxIDogMCkpOwoJCSAgICAgICAgICAgIEgxbCA9IEgxLmxvdyAgPSAoSDFsICsgYmwpOwoJCSAgICAgICAgICAgIEgxLmhpZ2ggPSAoSDFoICsgYmggKyAoKEgxbCA+Pj4gMCkgPCAoYmwgPj4+IDApID8gMSA6IDApKTsKCQkgICAgICAgICAgICBIMmwgPSBIMi5sb3cgID0gKEgybCArIGNsKTsKCQkgICAgICAgICAgICBIMi5oaWdoID0gKEgyaCArIGNoICsgKChIMmwgPj4+IDApIDwgKGNsID4+PiAwKSA/IDEgOiAwKSk7CgkJICAgICAgICAgICAgSDNsID0gSDMubG93ICA9IChIM2wgKyBkbCk7CgkJICAgICAgICAgICAgSDMuaGlnaCA9IChIM2ggKyBkaCArICgoSDNsID4+PiAwKSA8IChkbCA+Pj4gMCkgPyAxIDogMCkpOwoJCSAgICAgICAgICAgIEg0bCA9IEg0LmxvdyAgPSAoSDRsICsgZWwpOwoJCSAgICAgICAgICAgIEg0LmhpZ2ggPSAoSDRoICsgZWggKyAoKEg0bCA+Pj4gMCkgPCAoZWwgPj4+IDApID8gMSA6IDApKTsKCQkgICAgICAgICAgICBINWwgPSBINS5sb3cgID0gKEg1bCArIGZsKTsKCQkgICAgICAgICAgICBINS5oaWdoID0gKEg1aCArIGZoICsgKChINWwgPj4+IDApIDwgKGZsID4+PiAwKSA/IDEgOiAwKSk7CgkJICAgICAgICAgICAgSDZsID0gSDYubG93ICA9IChINmwgKyBnbCk7CgkJICAgICAgICAgICAgSDYuaGlnaCA9IChINmggKyBnaCArICgoSDZsID4+PiAwKSA8IChnbCA+Pj4gMCkgPyAxIDogMCkpOwoJCSAgICAgICAgICAgIEg3bCA9IEg3LmxvdyAgPSAoSDdsICsgaGwpOwoJCSAgICAgICAgICAgIEg3LmhpZ2ggPSAoSDdoICsgaGggKyAoKEg3bCA+Pj4gMCkgPCAoaGwgPj4+IDApID8gMSA6IDApKTsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7CgkJICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7CgoJCSAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7CgkJICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4OwoKCQkgICAgICAgICAgICAvLyBBZGQgcGFkZGluZwoJCSAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpOwoJCSAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyAxMjgpID4+PiAxMCkgPDwgNSkgKyAzMF0gPSBNYXRoLmZsb29yKG5CaXRzVG90YWwgLyAweDEwMDAwMDAwMCk7CgkJICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDEyOCkgPj4+IDEwKSA8PCA1KSArIDMxXSA9IG5CaXRzVG90YWw7CgkJICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IGRhdGFXb3Jkcy5sZW5ndGggKiA0OwoKCQkgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2NrcwoJCSAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTsKCgkJICAgICAgICAgICAgLy8gQ29udmVydCBoYXNoIHRvIDMyLWJpdCB3b3JkIGFycmF5IGJlZm9yZSByZXR1cm5pbmcKCQkgICAgICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2hhc2gudG9YMzIoKTsKCgkJICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2gKCQkgICAgICAgICAgICByZXR1cm4gaGFzaDsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTsKCQkgICAgICAgICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKTsKCgkJICAgICAgICAgICAgcmV0dXJuIGNsb25lOwoJCSAgICAgICAgfSwKCgkJICAgICAgICBibG9ja1NpemU6IDEwMjQvMzIKCQkgICAgfSk7CgoJCSAgICAvKioKCQkgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuCgkJICAgICAqCgkJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLgoJCSAgICAgKgoJCSAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLgoJCSAgICAgKgoJCSAgICAgKiBAc3RhdGljCgkJICAgICAqCgkJICAgICAqIEBleGFtcGxlCgkJICAgICAqCgkJICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTUxMignbWVzc2FnZScpOwoJCSAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEE1MTIod29yZEFycmF5KTsKCQkgICAgICovCgkJICAgIEMuU0hBNTEyID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBNTEyKTsKCgkJICAgIC8qKgoJCSAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuCgkJICAgICAqCgkJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLgoJCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS4KCQkgICAgICoKCQkgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy4KCQkgICAgICoKCQkgICAgICogQHN0YXRpYwoJCSAgICAgKgoJCSAgICAgKiBAZXhhbXBsZQoJCSAgICAgKgoJCSAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBNTEyKG1lc3NhZ2UsIGtleSk7CgkJICAgICAqLwoJCSAgICBDLkhtYWNTSEE1MTIgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBNTEyKTsKCQl9KCkpOwoKCgkJcmV0dXJuIENyeXB0b0pTLlNIQTUxMjsKCgl9KSk7CgovKioqLyB9KSwKCi8qKiovIDIyMzoKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCTsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CgkJaWYgKHRydWUpIHsKCQkJLy8gQ29tbW9uSlMKCQkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMyksIF9fd2VicGFja19yZXF1aXJlX18oMjE0KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMjIpKTsKCQl9CgkJZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSB7CgkJCS8vIEFNRAoJCQlkZWZpbmUoWyIuL2NvcmUiLCAiLi94NjQtY29yZSIsICIuL3NoYTUxMiJdLCBmYWN0b3J5KTsKCQl9CgkJZWxzZSB7CgkJCS8vIEdsb2JhbCAoYnJvd3NlcikKCQkJZmFjdG9yeShyb290LkNyeXB0b0pTKTsKCQl9Cgl9KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKCQkoZnVuY3Rpb24gKCkgewoJCSAgICAvLyBTaG9ydGN1dHMKCQkgICAgdmFyIEMgPSBDcnlwdG9KUzsKCQkgICAgdmFyIENfeDY0ID0gQy54NjQ7CgkJICAgIHZhciBYNjRXb3JkID0gQ194NjQuV29yZDsKCQkgICAgdmFyIFg2NFdvcmRBcnJheSA9IENfeDY0LldvcmRBcnJheTsKCQkgICAgdmFyIENfYWxnbyA9IEMuYWxnbzsKCQkgICAgdmFyIFNIQTUxMiA9IENfYWxnby5TSEE1MTI7CgoJCSAgICAvKioKCQkgICAgICogU0hBLTM4NCBoYXNoIGFsZ29yaXRobS4KCQkgICAgICovCgkJICAgIHZhciBTSEEzODQgPSBDX2FsZ28uU0hBMzg0ID0gU0hBNTEyLmV4dGVuZCh7CgkJICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgWDY0V29yZEFycmF5LmluaXQoWwoJCSAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4Y2JiYjlkNWQsIDB4YzEwNTllZDgpLCBuZXcgWDY0V29yZC5pbml0KDB4NjI5YTI5MmEsIDB4MzY3Y2Q1MDcpLAoJCSAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4OTE1OTAxNWEsIDB4MzA3MGRkMTcpLCBuZXcgWDY0V29yZC5pbml0KDB4MTUyZmVjZDgsIDB4ZjcwZTU5MzkpLAoJCSAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4NjczMzI2NjcsIDB4ZmZjMDBiMzEpLCBuZXcgWDY0V29yZC5pbml0KDB4OGViNDRhODcsIDB4Njg1ODE1MTEpLAoJCSAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4ZGIwYzJlMGQsIDB4NjRmOThmYTcpLCBuZXcgWDY0V29yZC5pbml0KDB4NDdiNTQ4MWQsIDB4YmVmYTRmYTQpCgkJICAgICAgICAgICAgXSk7CgkJICAgICAgICB9LAoKCQkgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7CgkJICAgICAgICAgICAgdmFyIGhhc2ggPSBTSEE1MTIuX2RvRmluYWxpemUuY2FsbCh0aGlzKTsKCgkJICAgICAgICAgICAgaGFzaC5zaWdCeXRlcyAtPSAxNjsKCgkJICAgICAgICAgICAgcmV0dXJuIGhhc2g7CgkJICAgICAgICB9CgkJICAgIH0pOwoKCQkgICAgLyoqCgkJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLgoJCSAgICAgKgoJCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KCQkgICAgICoKCQkgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC4KCQkgICAgICoKCQkgICAgICogQHN0YXRpYwoJCSAgICAgKgoJCSAgICAgKiBAZXhhbXBsZQoJCSAgICAgKgoJCSAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEzODQoJ21lc3NhZ2UnKTsKCQkgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMzg0KHdvcmRBcnJheSk7CgkJICAgICAqLwoJCSAgICBDLlNIQTM4NCA9IFNIQTUxMi5fY3JlYXRlSGVscGVyKFNIQTM4NCk7CgoJCSAgICAvKioKCQkgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLgoJCSAgICAgKgoJCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KCQkgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuCgkJICAgICAqCgkJICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuCgkJICAgICAqCgkJICAgICAqIEBzdGF0aWMKCQkgICAgICoKCQkgICAgICogQGV4YW1wbGUKCQkgICAgICoKCQkgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTM4NChtZXNzYWdlLCBrZXkpOwoJCSAgICAgKi8KCQkgICAgQy5IbWFjU0hBMzg0ID0gU0hBNTEyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTM4NCk7CgkJfSgpKTsKCgoJCXJldHVybiBDcnlwdG9KUy5TSEEzODQ7CgoJfSkpOwoKLyoqKi8gfSksCgovKioqLyAyMjQ6Ci8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgk7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewoJCWlmICh0cnVlKSB7CgkJCS8vIENvbW1vbkpTCgkJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoX193ZWJwYWNrX3JlcXVpcmVfXygyMTMpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxNCkpOwoJCX0KCQllbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQpIHsKCQkJLy8gQU1ECgkJCWRlZmluZShbIi4vY29yZSIsICIuL3g2NC1jb3JlIl0sIGZhY3RvcnkpOwoJCX0KCQllbHNlIHsKCQkJLy8gR2xvYmFsIChicm93c2VyKQoJCQlmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpOwoJCX0KCX0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgoJCShmdW5jdGlvbiAoTWF0aCkgewoJCSAgICAvLyBTaG9ydGN1dHMKCQkgICAgdmFyIEMgPSBDcnlwdG9KUzsKCQkgICAgdmFyIENfbGliID0gQy5saWI7CgkJICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7CgkJICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7CgkJICAgIHZhciBDX3g2NCA9IEMueDY0OwoJCSAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQ7CgkJICAgIHZhciBDX2FsZ28gPSBDLmFsZ287CgoJCSAgICAvLyBDb25zdGFudHMgdGFibGVzCgkJICAgIHZhciBSSE9fT0ZGU0VUUyA9IFtdOwoJCSAgICB2YXIgUElfSU5ERVhFUyAgPSBbXTsKCQkgICAgdmFyIFJPVU5EX0NPTlNUQU5UUyA9IFtdOwoKCQkgICAgLy8gQ29tcHV0ZSBDb25zdGFudHMKCQkgICAgKGZ1bmN0aW9uICgpIHsKCQkgICAgICAgIC8vIENvbXB1dGUgcmhvIG9mZnNldCBjb25zdGFudHMKCQkgICAgICAgIHZhciB4ID0gMSwgeSA9IDA7CgkJICAgICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IDI0OyB0KyspIHsKCQkgICAgICAgICAgICBSSE9fT0ZGU0VUU1t4ICsgNSAqIHldID0gKCh0ICsgMSkgKiAodCArIDIpIC8gMikgJSA2NDsKCgkJICAgICAgICAgICAgdmFyIG5ld1ggPSB5ICUgNTsKCQkgICAgICAgICAgICB2YXIgbmV3WSA9ICgyICogeCArIDMgKiB5KSAlIDU7CgkJICAgICAgICAgICAgeCA9IG5ld1g7CgkJICAgICAgICAgICAgeSA9IG5ld1k7CgkJICAgICAgICB9CgoJCSAgICAgICAgLy8gQ29tcHV0ZSBwaSBpbmRleCBjb25zdGFudHMKCQkgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgNTsgeCsrKSB7CgkJICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHsKCQkgICAgICAgICAgICAgICAgUElfSU5ERVhFU1t4ICsgNSAqIHldID0geSArICgoMiAqIHggKyAzICogeSkgJSA1KSAqIDU7CgkJICAgICAgICAgICAgfQoJCSAgICAgICAgfQoKCQkgICAgICAgIC8vIENvbXB1dGUgcm91bmQgY29uc3RhbnRzCgkJICAgICAgICB2YXIgTEZTUiA9IDB4MDE7CgkJICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI0OyBpKyspIHsKCQkgICAgICAgICAgICB2YXIgcm91bmRDb25zdGFudE1zdyA9IDA7CgkJICAgICAgICAgICAgdmFyIHJvdW5kQ29uc3RhbnRMc3cgPSAwOwoKCQkgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDc7IGorKykgewoJCSAgICAgICAgICAgICAgICBpZiAoTEZTUiAmIDB4MDEpIHsKCQkgICAgICAgICAgICAgICAgICAgIHZhciBiaXRQb3NpdGlvbiA9ICgxIDw8IGopIC0gMTsKCQkgICAgICAgICAgICAgICAgICAgIGlmIChiaXRQb3NpdGlvbiA8IDMyKSB7CgkJICAgICAgICAgICAgICAgICAgICAgICAgcm91bmRDb25zdGFudExzdyBePSAxIDw8IGJpdFBvc2l0aW9uOwoJCSAgICAgICAgICAgICAgICAgICAgfSBlbHNlIC8qIGlmIChiaXRQb3NpdGlvbiA+PSAzMikgKi8gewoJCSAgICAgICAgICAgICAgICAgICAgICAgIHJvdW5kQ29uc3RhbnRNc3cgXj0gMSA8PCAoYml0UG9zaXRpb24gLSAzMik7CgkJICAgICAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgICAgIC8vIENvbXB1dGUgbmV4dCBMRlNSCgkJICAgICAgICAgICAgICAgIGlmIChMRlNSICYgMHg4MCkgewoJCSAgICAgICAgICAgICAgICAgICAgLy8gUHJpbWl0aXZlIHBvbHlub21pYWwgb3ZlciBHRigyKTogeF44ICsgeF42ICsgeF41ICsgeF40ICsgMQoJCSAgICAgICAgICAgICAgICAgICAgTEZTUiA9IChMRlNSIDw8IDEpIF4gMHg3MTsKCQkgICAgICAgICAgICAgICAgfSBlbHNlIHsKCQkgICAgICAgICAgICAgICAgICAgIExGU1IgPDw9IDE7CgkJICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIFJPVU5EX0NPTlNUQU5UU1tpXSA9IFg2NFdvcmQuY3JlYXRlKHJvdW5kQ29uc3RhbnRNc3csIHJvdW5kQ29uc3RhbnRMc3cpOwoJCSAgICAgICAgfQoJCSAgICB9KCkpOwoKCQkgICAgLy8gUmV1c2FibGUgb2JqZWN0cyBmb3IgdGVtcG9yYXJ5IHZhbHVlcwoJCSAgICB2YXIgVCA9IFtdOwoJCSAgICAoZnVuY3Rpb24gKCkgewoJCSAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTsgaSsrKSB7CgkJICAgICAgICAgICAgVFtpXSA9IFg2NFdvcmQuY3JlYXRlKCk7CgkJICAgICAgICB9CgkJICAgIH0oKSk7CgoJCSAgICAvKioKCQkgICAgICogU0hBLTMgaGFzaCBhbGdvcml0aG0uCgkJICAgICAqLwoJCSAgICB2YXIgU0hBMyA9IENfYWxnby5TSEEzID0gSGFzaGVyLmV4dGVuZCh7CgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gb3V0cHV0TGVuZ3RoCgkJICAgICAgICAgKiAgIFRoZSBkZXNpcmVkIG51bWJlciBvZiBiaXRzIGluIHRoZSBvdXRwdXQgaGFzaC4KCQkgICAgICAgICAqICAgT25seSB2YWx1ZXMgcGVybWl0dGVkIGFyZTogMjI0LCAyNTYsIDM4NCwgNTEyLgoJCSAgICAgICAgICogICBEZWZhdWx0OiA1MTIKCQkgICAgICAgICAqLwoJCSAgICAgICAgY2ZnOiBIYXNoZXIuY2ZnLmV4dGVuZCh7CgkJICAgICAgICAgICAgb3V0cHV0TGVuZ3RoOiA1MTIKCQkgICAgICAgIH0pLAoKCQkgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7CgkJICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGUgPSBbXQoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU7IGkrKykgewoJCSAgICAgICAgICAgICAgICBzdGF0ZVtpXSA9IG5ldyBYNjRXb3JkLmluaXQoKTsKCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIHRoaXMuYmxvY2tTaXplID0gKDE2MDAgLSAyICogdGhpcy5jZmcub3V0cHV0TGVuZ3RoKSAvIDMyOwoJCSAgICAgICAgfSwKCgkJICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHsKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTsKCQkgICAgICAgICAgICB2YXIgbkJsb2NrU2l6ZUxhbmVzID0gdGhpcy5ibG9ja1NpemUgLyAyOwoKCQkgICAgICAgICAgICAvLyBBYnNvcmIKCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5CbG9ja1NpemVMYW5lczsgaSsrKSB7CgkJICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgICAgICB2YXIgTTJpICA9IE1bb2Zmc2V0ICsgMiAqIGldOwoJCSAgICAgICAgICAgICAgICB2YXIgTTJpMSA9IE1bb2Zmc2V0ICsgMiAqIGkgKyAxXTsKCgkJICAgICAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuCgkJICAgICAgICAgICAgICAgIE0yaSA9ICgKCQkgICAgICAgICAgICAgICAgICAgICgoKE0yaSA8PCA4KSAgfCAoTTJpID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfAoJCSAgICAgICAgICAgICAgICAgICAgKCgoTTJpIDw8IDI0KSB8IChNMmkgPj4+IDgpKSAgJiAweGZmMDBmZjAwKQoJCSAgICAgICAgICAgICAgICApOwoJCSAgICAgICAgICAgICAgICBNMmkxID0gKAoJCSAgICAgICAgICAgICAgICAgICAgKCgoTTJpMSA8PCA4KSAgfCAoTTJpMSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKCQkgICAgICAgICAgICAgICAgICAgICgoKE0yaTEgPDwgMjQpIHwgKE0yaTEgPj4+IDgpKSAgJiAweGZmMDBmZjAwKQoJCSAgICAgICAgICAgICAgICApOwoKCQkgICAgICAgICAgICAgICAgLy8gQWJzb3JiIG1lc3NhZ2UgaW50byBzdGF0ZQoJCSAgICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW2ldOwoJCSAgICAgICAgICAgICAgICBsYW5lLmhpZ2ggXj0gTTJpMTsKCQkgICAgICAgICAgICAgICAgbGFuZS5sb3cgIF49IE0yaTsKCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIC8vIFJvdW5kcwoJCSAgICAgICAgICAgIGZvciAodmFyIHJvdW5kID0gMDsgcm91bmQgPCAyNDsgcm91bmQrKykgewoJCSAgICAgICAgICAgICAgICAvLyBUaGV0YQoJCSAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykgewoJCSAgICAgICAgICAgICAgICAgICAgLy8gTWl4IGNvbHVtbiBsYW5lcwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIHRNc3cgPSAwLCB0THN3ID0gMDsKCQkgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgNTsgeSsrKSB7CgkJICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVt4ICsgNSAqIHldOwoJCSAgICAgICAgICAgICAgICAgICAgICAgIHRNc3cgXj0gbGFuZS5oaWdoOwoJCSAgICAgICAgICAgICAgICAgICAgICAgIHRMc3cgXj0gbGFuZS5sb3c7CgkJICAgICAgICAgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgICAgICAgICAgLy8gVGVtcG9yYXJ5IHZhbHVlcwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIFR4ID0gVFt4XTsKCQkgICAgICAgICAgICAgICAgICAgIFR4LmhpZ2ggPSB0TXN3OwoJCSAgICAgICAgICAgICAgICAgICAgVHgubG93ICA9IHRMc3c7CgkJICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCA1OyB4KyspIHsKCQkgICAgICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIFR4NCA9IFRbKHggKyA0KSAlIDVdOwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIFR4MSA9IFRbKHggKyAxKSAlIDVdOwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIFR4MU1zdyA9IFR4MS5oaWdoOwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIFR4MUxzdyA9IFR4MS5sb3c7CgoJCSAgICAgICAgICAgICAgICAgICAgLy8gTWl4IHN1cnJvdW5kaW5nIGNvbHVtbnMKCQkgICAgICAgICAgICAgICAgICAgIHZhciB0TXN3ID0gVHg0LmhpZ2ggXiAoKFR4MU1zdyA8PCAxKSB8IChUeDFMc3cgPj4+IDMxKSk7CgkJICAgICAgICAgICAgICAgICAgICB2YXIgdExzdyA9IFR4NC5sb3cgIF4gKChUeDFMc3cgPDwgMSkgfCAoVHgxTXN3ID4+PiAzMSkpOwoJCSAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHsKCQkgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW3ggKyA1ICogeV07CgkJICAgICAgICAgICAgICAgICAgICAgICAgbGFuZS5oaWdoIF49IHRNc3c7CgkJICAgICAgICAgICAgICAgICAgICAgICAgbGFuZS5sb3cgIF49IHRMc3c7CgkJICAgICAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgICAgIC8vIFJobyBQaQoJCSAgICAgICAgICAgICAgICBmb3IgKHZhciBsYW5lSW5kZXggPSAxOyBsYW5lSW5kZXggPCAyNTsgbGFuZUluZGV4KyspIHsKCQkgICAgICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVtsYW5lSW5kZXhdOwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmVNc3cgPSBsYW5lLmhpZ2g7CgkJICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZUxzdyA9IGxhbmUubG93OwoJCSAgICAgICAgICAgICAgICAgICAgdmFyIHJob09mZnNldCA9IFJIT19PRkZTRVRTW2xhbmVJbmRleF07CgoJCSAgICAgICAgICAgICAgICAgICAgLy8gUm90YXRlIGxhbmVzCgkJICAgICAgICAgICAgICAgICAgICBpZiAocmhvT2Zmc2V0IDwgMzIpIHsKCQkgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdE1zdyA9IChsYW5lTXN3IDw8IHJob09mZnNldCkgfCAobGFuZUxzdyA+Pj4gKDMyIC0gcmhvT2Zmc2V0KSk7CgkJICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRMc3cgPSAobGFuZUxzdyA8PCByaG9PZmZzZXQpIHwgKGxhbmVNc3cgPj4+ICgzMiAtIHJob09mZnNldCkpOwoJCSAgICAgICAgICAgICAgICAgICAgfSBlbHNlIC8qIGlmIChyaG9PZmZzZXQgPj0gMzIpICovIHsKCQkgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdE1zdyA9IChsYW5lTHN3IDw8IChyaG9PZmZzZXQgLSAzMikpIHwgKGxhbmVNc3cgPj4+ICg2NCAtIHJob09mZnNldCkpOwoJCSAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0THN3ID0gKGxhbmVNc3cgPDwgKHJob09mZnNldCAtIDMyKSkgfCAobGFuZUxzdyA+Pj4gKDY0IC0gcmhvT2Zmc2V0KSk7CgkJICAgICAgICAgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgICAgICAgICAgLy8gVHJhbnNwb3NlIGxhbmVzCgkJICAgICAgICAgICAgICAgICAgICB2YXIgVFBpTGFuZSA9IFRbUElfSU5ERVhFU1tsYW5lSW5kZXhdXTsKCQkgICAgICAgICAgICAgICAgICAgIFRQaUxhbmUuaGlnaCA9IHRNc3c7CgkJICAgICAgICAgICAgICAgICAgICBUUGlMYW5lLmxvdyAgPSB0THN3OwoJCSAgICAgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgICAgICAvLyBSaG8gcGkgYXQgeCA9IHkgPSAwCgkJICAgICAgICAgICAgICAgIHZhciBUMCA9IFRbMF07CgkJICAgICAgICAgICAgICAgIHZhciBzdGF0ZTAgPSBzdGF0ZVswXTsKCQkgICAgICAgICAgICAgICAgVDAuaGlnaCA9IHN0YXRlMC5oaWdoOwoJCSAgICAgICAgICAgICAgICBUMC5sb3cgID0gc3RhdGUwLmxvdzsKCgkJICAgICAgICAgICAgICAgIC8vIENoaQoJCSAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykgewoJCSAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHsKCQkgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZUluZGV4ID0geCArIDUgKiB5OwoJCSAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbbGFuZUluZGV4XTsKCQkgICAgICAgICAgICAgICAgICAgICAgICB2YXIgVExhbmUgPSBUW2xhbmVJbmRleF07CgkJICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFR4MUxhbmUgPSBUWygoeCArIDEpICUgNSkgKyA1ICogeV07CgkJICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFR4MkxhbmUgPSBUWygoeCArIDIpICUgNSkgKyA1ICogeV07CgoJCSAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1peCByb3dzCgkJICAgICAgICAgICAgICAgICAgICAgICAgbGFuZS5oaWdoID0gVExhbmUuaGlnaCBeICh+VHgxTGFuZS5oaWdoICYgVHgyTGFuZS5oaWdoKTsKCQkgICAgICAgICAgICAgICAgICAgICAgICBsYW5lLmxvdyAgPSBUTGFuZS5sb3cgIF4gKH5UeDFMYW5lLmxvdyAgJiBUeDJMYW5lLmxvdyk7CgkJICAgICAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgICAgIC8vIElvdGEKCQkgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVswXTsKCQkgICAgICAgICAgICAgICAgdmFyIHJvdW5kQ29uc3RhbnQgPSBST1VORF9DT05TVEFOVFNbcm91bmRdOwoJCSAgICAgICAgICAgICAgICBsYW5lLmhpZ2ggXj0gcm91bmRDb25zdGFudC5oaWdoOwoJCSAgICAgICAgICAgICAgICBsYW5lLmxvdyAgXj0gcm91bmRDb25zdGFudC5sb3c7OwoJCSAgICAgICAgICAgIH0KCQkgICAgICAgIH0sCgoJCSAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7CgkJICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7CgkJICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODsKCQkgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7CgkJICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZUJpdHMgPSB0aGlzLmJsb2NrU2l6ZSAqIDMyOwoKCQkgICAgICAgICAgICAvLyBBZGQgcGFkZGluZwoJCSAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4MSA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7CgkJICAgICAgICAgICAgZGF0YVdvcmRzWygoTWF0aC5jZWlsKChuQml0c0xlZnQgKyAxKSAvIGJsb2NrU2l6ZUJpdHMpICogYmxvY2tTaXplQml0cykgPj4+IDUpIC0gMV0gfD0gMHg4MDsKCQkgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gZGF0YVdvcmRzLmxlbmd0aCAqIDQ7CgoJCSAgICAgICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzCgkJICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpOwoKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTsKCQkgICAgICAgICAgICB2YXIgb3V0cHV0TGVuZ3RoQnl0ZXMgPSB0aGlzLmNmZy5vdXRwdXRMZW5ndGggLyA4OwoJCSAgICAgICAgICAgIHZhciBvdXRwdXRMZW5ndGhMYW5lcyA9IG91dHB1dExlbmd0aEJ5dGVzIC8gODsKCgkJICAgICAgICAgICAgLy8gU3F1ZWV6ZQoJCSAgICAgICAgICAgIHZhciBoYXNoV29yZHMgPSBbXTsKCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dHB1dExlbmd0aExhbmVzOyBpKyspIHsKCQkgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbaV07CgkJICAgICAgICAgICAgICAgIHZhciBsYW5lTXN3ID0gbGFuZS5oaWdoOwoJCSAgICAgICAgICAgICAgICB2YXIgbGFuZUxzdyA9IGxhbmUubG93OwoKCQkgICAgICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW4KCQkgICAgICAgICAgICAgICAgbGFuZU1zdyA9ICgKCQkgICAgICAgICAgICAgICAgICAgICgoKGxhbmVNc3cgPDwgOCkgIHwgKGxhbmVNc3cgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8CgkJICAgICAgICAgICAgICAgICAgICAoKChsYW5lTXN3IDw8IDI0KSB8IChsYW5lTXN3ID4+PiA4KSkgICYgMHhmZjAwZmYwMCkKCQkgICAgICAgICAgICAgICAgKTsKCQkgICAgICAgICAgICAgICAgbGFuZUxzdyA9ICgKCQkgICAgICAgICAgICAgICAgICAgICgoKGxhbmVMc3cgPDwgOCkgIHwgKGxhbmVMc3cgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8CgkJICAgICAgICAgICAgICAgICAgICAoKChsYW5lTHN3IDw8IDI0KSB8IChsYW5lTHN3ID4+PiA4KSkgICYgMHhmZjAwZmYwMCkKCQkgICAgICAgICAgICAgICAgKTsKCgkJICAgICAgICAgICAgICAgIC8vIFNxdWVlemUgc3RhdGUgdG8gcmV0cmlldmUgaGFzaAoJCSAgICAgICAgICAgICAgICBoYXNoV29yZHMucHVzaChsYW5lTHN3KTsKCQkgICAgICAgICAgICAgICAgaGFzaFdvcmRzLnB1c2gobGFuZU1zdyk7CgkJICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaAoJCSAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQoaGFzaFdvcmRzLCBvdXRwdXRMZW5ndGhCeXRlcyk7CgkJICAgICAgICB9LAoKCQkgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7CgkJICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7CgoJCSAgICAgICAgICAgIHZhciBzdGF0ZSA9IGNsb25lLl9zdGF0ZSA9IHRoaXMuX3N0YXRlLnNsaWNlKDApOwoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU7IGkrKykgewoJCSAgICAgICAgICAgICAgICBzdGF0ZVtpXSA9IHN0YXRlW2ldLmNsb25lKCk7CgkJICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICByZXR1cm4gY2xvbmU7CgkJICAgICAgICB9CgkJICAgIH0pOwoKCQkgICAgLyoqCgkJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLgoJCSAgICAgKgoJCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KCQkgICAgICoKCQkgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC4KCQkgICAgICoKCQkgICAgICogQHN0YXRpYwoJCSAgICAgKgoJCSAgICAgKiBAZXhhbXBsZQoJCSAgICAgKgoJCSAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEzKCdtZXNzYWdlJyk7CgkJICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTMod29yZEFycmF5KTsKCQkgICAgICovCgkJICAgIEMuU0hBMyA9IEhhc2hlci5fY3JlYXRlSGVscGVyKFNIQTMpOwoKCQkgICAgLyoqCgkJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS4KCQkgICAgICoKCQkgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guCgkJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LgoJCSAgICAgKgoJCSAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLgoJCSAgICAgKgoJCSAgICAgKiBAc3RhdGljCgkJICAgICAqCgkJICAgICAqIEBleGFtcGxlCgkJICAgICAqCgkJICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEEzKG1lc3NhZ2UsIGtleSk7CgkJICAgICAqLwoJCSAgICBDLkhtYWNTSEEzID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTMpOwoJCX0oTWF0aCkpOwoKCgkJcmV0dXJuIENyeXB0b0pTLlNIQTM7CgoJfSkpOwoKLyoqKi8gfSksCgovKioqLyAyMjU6Ci8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgk7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7CgkJaWYgKHRydWUpIHsKCQkJLy8gQ29tbW9uSlMKCQkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMykpOwoJCX0KCQllbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQpIHsKCQkJLy8gQU1ECgkJCWRlZmluZShbIi4vY29yZSJdLCBmYWN0b3J5KTsKCQl9CgkJZWxzZSB7CgkJCS8vIEdsb2JhbCAoYnJvd3NlcikKCQkJZmFjdG9yeShyb290LkNyeXB0b0pTKTsKCQl9Cgl9KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKCQkvKiogQHByZXNlcnZlCgkJKGMpIDIwMTIgYnkgQ8OpZHJpYyBNZXNuaWwuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCgoJCVJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDoKCgkJICAgIC0gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLgoJCSAgICAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KCgkJVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyAiQVMgSVMiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS4KCQkqLwoKCQkoZnVuY3Rpb24gKE1hdGgpIHsKCQkgICAgLy8gU2hvcnRjdXRzCgkJICAgIHZhciBDID0gQ3J5cHRvSlM7CgkJICAgIHZhciBDX2xpYiA9IEMubGliOwoJCSAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5OwoJCSAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyOwoJCSAgICB2YXIgQ19hbGdvID0gQy5hbGdvOwoKCQkgICAgLy8gQ29uc3RhbnRzIHRhYmxlCgkJICAgIHZhciBfemwgPSBXb3JkQXJyYXkuY3JlYXRlKFsKCQkgICAgICAgIDAsICAxLCAgMiwgIDMsICA0LCAgNSwgIDYsICA3LCAgOCwgIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsCgkJICAgICAgICA3LCAgNCwgMTMsICAxLCAxMCwgIDYsIDE1LCAgMywgMTIsICAwLCAgOSwgIDUsICAyLCAxNCwgMTEsICA4LAoJCSAgICAgICAgMywgMTAsIDE0LCAgNCwgIDksIDE1LCAgOCwgIDEsICAyLCAgNywgIDAsICA2LCAxMywgMTEsICA1LCAxMiwKCQkgICAgICAgIDEsICA5LCAxMSwgMTAsICAwLCAgOCwgMTIsICA0LCAxMywgIDMsICA3LCAxNSwgMTQsICA1LCAgNiwgIDIsCgkJICAgICAgICA0LCAgMCwgIDUsICA5LCAgNywgMTIsICAyLCAxMCwgMTQsICAxLCAgMywgIDgsIDExLCAgNiwgMTUsIDEzXSk7CgkJICAgIHZhciBfenIgPSBXb3JkQXJyYXkuY3JlYXRlKFsKCQkgICAgICAgIDUsIDE0LCAgNywgIDAsICA5LCAgMiwgMTEsICA0LCAxMywgIDYsIDE1LCAgOCwgIDEsIDEwLCAgMywgMTIsCgkJICAgICAgICA2LCAxMSwgIDMsICA3LCAgMCwgMTMsICA1LCAxMCwgMTQsIDE1LCAgOCwgMTIsICA0LCAgOSwgIDEsICAyLAoJCSAgICAgICAgMTUsICA1LCAgMSwgIDMsICA3LCAxNCwgIDYsICA5LCAxMSwgIDgsIDEyLCAgMiwgMTAsICAwLCAgNCwgMTMsCgkJICAgICAgICA4LCAgNiwgIDQsICAxLCAgMywgMTEsIDE1LCAgMCwgIDUsIDEyLCAgMiwgMTMsICA5LCAgNywgMTAsIDE0LAoJCSAgICAgICAgMTIsIDE1LCAxMCwgIDQsICAxLCAgNSwgIDgsICA3LCAgNiwgIDIsIDEzLCAxNCwgIDAsICAzLCAgOSwgMTFdKTsKCQkgICAgdmFyIF9zbCA9IFdvcmRBcnJheS5jcmVhdGUoWwoJCSAgICAgICAgIDExLCAxNCwgMTUsIDEyLCAgNSwgIDgsICA3LCAgOSwgMTEsIDEzLCAxNCwgMTUsICA2LCAgNywgIDksICA4LAoJCSAgICAgICAgNywgNiwgICA4LCAxMywgMTEsICA5LCAgNywgMTUsICA3LCAxMiwgMTUsICA5LCAxMSwgIDcsIDEzLCAxMiwKCQkgICAgICAgIDExLCAxMywgIDYsICA3LCAxNCwgIDksIDEzLCAxNSwgMTQsICA4LCAxMywgIDYsICA1LCAxMiwgIDcsICA1LAoJCSAgICAgICAgICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCAgOSwgIDgsICA5LCAxNCwgIDUsICA2LCAgOCwgIDYsICA1LCAxMiwKCQkgICAgICAgIDksIDE1LCAgNSwgMTEsICA2LCAgOCwgMTMsIDEyLCAgNSwgMTIsIDEzLCAxNCwgMTEsICA4LCAgNSwgIDYgXSk7CgkJICAgIHZhciBfc3IgPSBXb3JkQXJyYXkuY3JlYXRlKFsKCQkgICAgICAgIDgsICA5LCAgOSwgMTEsIDEzLCAxNSwgMTUsICA1LCAgNywgIDcsICA4LCAxMSwgMTQsIDE0LCAxMiwgIDYsCgkJICAgICAgICA5LCAxMywgMTUsICA3LCAxMiwgIDgsICA5LCAxMSwgIDcsICA3LCAxMiwgIDcsICA2LCAxNSwgMTMsIDExLAoJCSAgICAgICAgOSwgIDcsIDE1LCAxMSwgIDgsICA2LCAgNiwgMTQsIDEyLCAxMywgIDUsIDE0LCAxMywgMTMsICA3LCAgNSwKCQkgICAgICAgIDE1LCAgNSwgIDgsIDExLCAxNCwgMTQsICA2LCAxNCwgIDYsICA5LCAxMiwgIDksIDEyLCAgNSwgMTUsICA4LAoJCSAgICAgICAgOCwgIDUsIDEyLCAgOSwgMTIsICA1LCAxNCwgIDYsICA4LCAxMywgIDYsICA1LCAxNSwgMTMsIDExLCAxMSBdKTsKCgkJICAgIHZhciBfaGwgPSAgV29yZEFycmF5LmNyZWF0ZShbIDB4MDAwMDAwMDAsIDB4NUE4Mjc5OTksIDB4NkVEOUVCQTEsIDB4OEYxQkJDREMsIDB4QTk1M0ZENEVdKTsKCQkgICAgdmFyIF9ociA9ICBXb3JkQXJyYXkuY3JlYXRlKFsgMHg1MEEyOEJFNiwgMHg1QzRERDEyNCwgMHg2RDcwM0VGMywgMHg3QTZENzZFOSwgMHgwMDAwMDAwMF0pOwoKCQkgICAgLyoqCgkJICAgICAqIFJJUEVNRDE2MCBoYXNoIGFsZ29yaXRobS4KCQkgICAgICovCgkJICAgIHZhciBSSVBFTUQxNjAgPSBDX2FsZ28uUklQRU1EMTYwID0gSGFzaGVyLmV4dGVuZCh7CgkJICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIHRoaXMuX2hhc2ggID0gV29yZEFycmF5LmNyZWF0ZShbMHg2NzQ1MjMwMSwgMHhFRkNEQUI4OSwgMHg5OEJBRENGRSwgMHgxMDMyNTQ3NiwgMHhDM0QyRTFGMF0pOwoJCSAgICAgICAgfSwKCgkJICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHsKCgkJICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW4KCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHsKCQkgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgICAgIHZhciBvZmZzZXRfaSA9IG9mZnNldCArIGk7CgkJICAgICAgICAgICAgICAgIHZhciBNX29mZnNldF9pID0gTVtvZmZzZXRfaV07CgoJCSAgICAgICAgICAgICAgICAvLyBTd2FwCgkJICAgICAgICAgICAgICAgIE1bb2Zmc2V0X2ldID0gKAoJCSAgICAgICAgICAgICAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCA4KSAgfCAoTV9vZmZzZXRfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKCQkgICAgICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgMjQpIHwgKE1fb2Zmc2V0X2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKQoJCSAgICAgICAgICAgICAgICApOwoJCSAgICAgICAgICAgIH0KCQkgICAgICAgICAgICAvLyBTaG9ydGN1dAoJCSAgICAgICAgICAgIHZhciBIICA9IHRoaXMuX2hhc2gud29yZHM7CgkJICAgICAgICAgICAgdmFyIGhsID0gX2hsLndvcmRzOwoJCSAgICAgICAgICAgIHZhciBociA9IF9oci53b3JkczsKCQkgICAgICAgICAgICB2YXIgemwgPSBfemwud29yZHM7CgkJICAgICAgICAgICAgdmFyIHpyID0gX3pyLndvcmRzOwoJCSAgICAgICAgICAgIHZhciBzbCA9IF9zbC53b3JkczsKCQkgICAgICAgICAgICB2YXIgc3IgPSBfc3Iud29yZHM7CgoJCSAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFibGVzCgkJICAgICAgICAgICAgdmFyIGFsLCBibCwgY2wsIGRsLCBlbDsKCQkgICAgICAgICAgICB2YXIgYXIsIGJyLCBjciwgZHIsIGVyOwoKCQkgICAgICAgICAgICBhciA9IGFsID0gSFswXTsKCQkgICAgICAgICAgICBiciA9IGJsID0gSFsxXTsKCQkgICAgICAgICAgICBjciA9IGNsID0gSFsyXTsKCQkgICAgICAgICAgICBkciA9IGRsID0gSFszXTsKCQkgICAgICAgICAgICBlciA9IGVsID0gSFs0XTsKCQkgICAgICAgICAgICAvLyBDb21wdXRhdGlvbgoJCSAgICAgICAgICAgIHZhciB0OwoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkgKz0gMSkgewoJCSAgICAgICAgICAgICAgICB0ID0gKGFsICsgIE1bb2Zmc2V0K3psW2ldXSl8MDsKCQkgICAgICAgICAgICAgICAgaWYgKGk8MTYpewoJCQkgICAgICAgICAgICB0ICs9ICBmMShibCxjbCxkbCkgKyBobFswXTsKCQkgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpPDMyKSB7CgkJCSAgICAgICAgICAgIHQgKz0gIGYyKGJsLGNsLGRsKSArIGhsWzFdOwoJCSAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGk8NDgpIHsKCQkJICAgICAgICAgICAgdCArPSAgZjMoYmwsY2wsZGwpICsgaGxbMl07CgkJICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaTw2NCkgewoJCQkgICAgICAgICAgICB0ICs9ICBmNChibCxjbCxkbCkgKyBobFszXTsKCQkgICAgICAgICAgICAgICAgfSBlbHNlIHsvLyBpZiAoaTw4MCkgewoJCQkgICAgICAgICAgICB0ICs9ICBmNShibCxjbCxkbCkgKyBobFs0XTsKCQkgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgICAgICB0ID0gdHwwOwoJCSAgICAgICAgICAgICAgICB0ID0gIHJvdGwodCxzbFtpXSk7CgkJICAgICAgICAgICAgICAgIHQgPSAodCtlbCl8MDsKCQkgICAgICAgICAgICAgICAgYWwgPSBlbDsKCQkgICAgICAgICAgICAgICAgZWwgPSBkbDsKCQkgICAgICAgICAgICAgICAgZGwgPSByb3RsKGNsLCAxMCk7CgkJICAgICAgICAgICAgICAgIGNsID0gYmw7CgkJICAgICAgICAgICAgICAgIGJsID0gdDsKCgkJICAgICAgICAgICAgICAgIHQgPSAoYXIgKyBNW29mZnNldCt6cltpXV0pfDA7CgkJICAgICAgICAgICAgICAgIGlmIChpPDE2KXsKCQkJICAgICAgICAgICAgdCArPSAgZjUoYnIsY3IsZHIpICsgaHJbMF07CgkJICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaTwzMikgewoJCQkgICAgICAgICAgICB0ICs9ICBmNChicixjcixkcikgKyBoclsxXTsKCQkgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpPDQ4KSB7CgkJCSAgICAgICAgICAgIHQgKz0gIGYzKGJyLGNyLGRyKSArIGhyWzJdOwoJCSAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGk8NjQpIHsKCQkJICAgICAgICAgICAgdCArPSAgZjIoYnIsY3IsZHIpICsgaHJbM107CgkJICAgICAgICAgICAgICAgIH0gZWxzZSB7Ly8gaWYgKGk8ODApIHsKCQkJICAgICAgICAgICAgdCArPSAgZjEoYnIsY3IsZHIpICsgaHJbNF07CgkJICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICAgICAgdCA9IHR8MDsKCQkgICAgICAgICAgICAgICAgdCA9ICByb3RsKHQsc3JbaV0pIDsKCQkgICAgICAgICAgICAgICAgdCA9ICh0K2VyKXwwOwoJCSAgICAgICAgICAgICAgICBhciA9IGVyOwoJCSAgICAgICAgICAgICAgICBlciA9IGRyOwoJCSAgICAgICAgICAgICAgICBkciA9IHJvdGwoY3IsIDEwKTsKCQkgICAgICAgICAgICAgICAgY3IgPSBicjsKCQkgICAgICAgICAgICAgICAgYnIgPSB0OwoJCSAgICAgICAgICAgIH0KCQkgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZQoJCSAgICAgICAgICAgIHQgICAgPSAoSFsxXSArIGNsICsgZHIpfDA7CgkJICAgICAgICAgICAgSFsxXSA9IChIWzJdICsgZGwgKyBlcil8MDsKCQkgICAgICAgICAgICBIWzJdID0gKEhbM10gKyBlbCArIGFyKXwwOwoJCSAgICAgICAgICAgIEhbM10gPSAoSFs0XSArIGFsICsgYnIpfDA7CgkJICAgICAgICAgICAgSFs0XSA9IChIWzBdICsgYmwgKyBjcil8MDsKCQkgICAgICAgICAgICBIWzBdID0gIHQ7CgkJICAgICAgICB9LAoKCQkgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7CgkJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhOwoJCSAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzOwoKCQkgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4OwoJCSAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODsKCgkJICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmcKCQkgICAgICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTsKCQkgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9ICgKCQkgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbCA8PCA4KSAgfCAobkJpdHNUb3RhbCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKCQkgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbCA8PCAyNCkgfCAobkJpdHNUb3RhbCA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApCgkJICAgICAgICAgICAgKTsKCQkgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gKGRhdGFXb3Jkcy5sZW5ndGggKyAxKSAqIDQ7CgoJCSAgICAgICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzCgkJICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpOwoKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2hhc2g7CgkJICAgICAgICAgICAgdmFyIEggPSBoYXNoLndvcmRzOwoKCQkgICAgICAgICAgICAvLyBTd2FwIGVuZGlhbgoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTsgaSsrKSB7CgkJICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0CgkJICAgICAgICAgICAgICAgIHZhciBIX2kgPSBIW2ldOwoKCQkgICAgICAgICAgICAgICAgLy8gU3dhcAoJCSAgICAgICAgICAgICAgICBIW2ldID0gKCgoSF9pIDw8IDgpICB8IChIX2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8CgkJICAgICAgICAgICAgICAgICAgICAgICAoKChIX2kgPDwgMjQpIHwgKEhfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2gKCQkgICAgICAgICAgICByZXR1cm4gaGFzaDsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTsKCQkgICAgICAgICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKTsKCgkJICAgICAgICAgICAgcmV0dXJuIGNsb25lOwoJCSAgICAgICAgfQoJCSAgICB9KTsKCgoJCSAgICBmdW5jdGlvbiBmMSh4LCB5LCB6KSB7CgkJICAgICAgICByZXR1cm4gKCh4KSBeICh5KSBeICh6KSk7CgoJCSAgICB9CgoJCSAgICBmdW5jdGlvbiBmMih4LCB5LCB6KSB7CgkJICAgICAgICByZXR1cm4gKCgoeCkmKHkpKSB8ICgofngpJih6KSkpOwoJCSAgICB9CgoJCSAgICBmdW5jdGlvbiBmMyh4LCB5LCB6KSB7CgkJICAgICAgICByZXR1cm4gKCgoeCkgfCAofih5KSkpIF4gKHopKTsKCQkgICAgfQoKCQkgICAgZnVuY3Rpb24gZjQoeCwgeSwgeikgewoJCSAgICAgICAgcmV0dXJuICgoKHgpICYgKHopKSB8ICgoeSkmKH4oeikpKSk7CgkJICAgIH0KCgkJICAgIGZ1bmN0aW9uIGY1KHgsIHksIHopIHsKCQkgICAgICAgIHJldHVybiAoKHgpIF4gKCh5KSB8KH4oeikpKSk7CgoJCSAgICB9CgoJCSAgICBmdW5jdGlvbiByb3RsKHgsbikgewoJCSAgICAgICAgcmV0dXJuICh4PDxuKSB8ICh4Pj4+KDMyLW4pKTsKCQkgICAgfQoKCgkJICAgIC8qKgoJCSAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS4KCQkgICAgICoKCQkgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guCgkJICAgICAqCgkJICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guCgkJICAgICAqCgkJICAgICAqIEBzdGF0aWMKCQkgICAgICoKCQkgICAgICogQGV4YW1wbGUKCQkgICAgICoKCQkgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuUklQRU1EMTYwKCdtZXNzYWdlJyk7CgkJICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlJJUEVNRDE2MCh3b3JkQXJyYXkpOwoJCSAgICAgKi8KCQkgICAgQy5SSVBFTUQxNjAgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihSSVBFTUQxNjApOwoKCQkgICAgLyoqCgkJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS4KCQkgICAgICoKCQkgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guCgkJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LgoJCSAgICAgKgoJCSAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLgoJCSAgICAgKgoJCSAgICAgKiBAc3RhdGljCgkJICAgICAqCgkJICAgICAqIEBleGFtcGxlCgkJICAgICAqCgkJICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNSSVBFTUQxNjAobWVzc2FnZSwga2V5KTsKCQkgICAgICovCgkJICAgIEMuSG1hY1JJUEVNRDE2MCA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihSSVBFTUQxNjApOwoJCX0oTWF0aCkpOwoKCgkJcmV0dXJuIENyeXB0b0pTLlJJUEVNRDE2MDsKCgl9KSk7CgovKioqLyB9KSwKCi8qKiovIDIyNjoKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCTsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHsKCQlpZiAodHJ1ZSkgewoJCQkvLyBDb21tb25KUwoJCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oMjEzKSk7CgkJfQoJCWVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewoJCQkvLyBBTUQKCQkJZGVmaW5lKFsiLi9jb3JlIl0sIGZhY3RvcnkpOwoJCX0KCQllbHNlIHsKCQkJLy8gR2xvYmFsIChicm93c2VyKQoJCQlmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpOwoJCX0KCX0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgoJCShmdW5jdGlvbiAoKSB7CgkJICAgIC8vIFNob3J0Y3V0cwoJCSAgICB2YXIgQyA9IENyeXB0b0pTOwoJCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKCQkgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlOwoJCSAgICB2YXIgQ19lbmMgPSBDLmVuYzsKCQkgICAgdmFyIFV0ZjggPSBDX2VuYy5VdGY4OwoJCSAgICB2YXIgQ19hbGdvID0gQy5hbGdvOwoKCQkgICAgLyoqCgkJICAgICAqIEhNQUMgYWxnb3JpdGhtLgoJCSAgICAgKi8KCQkgICAgdmFyIEhNQUMgPSBDX2FsZ28uSE1BQyA9IEJhc2UuZXh0ZW5kKHsKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIEhNQUMuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaCBhbGdvcml0aG0gdG8gdXNlLgoJCSAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIGhtYWNIYXNoZXIgPSBDcnlwdG9KUy5hbGdvLkhNQUMuY3JlYXRlKENyeXB0b0pTLmFsZ28uU0hBMjU2LCBrZXkpOwoJCSAgICAgICAgICovCgkJICAgICAgICBpbml0OiBmdW5jdGlvbiAoaGFzaGVyLCBrZXkpIHsKCQkgICAgICAgICAgICAvLyBJbml0IGhhc2hlcgoJCSAgICAgICAgICAgIGhhc2hlciA9IHRoaXMuX2hhc2hlciA9IG5ldyBoYXNoZXIuaW5pdCgpOwoKCQkgICAgICAgICAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBXb3JkQXJyYXksIGVsc2UgYXNzdW1lIFdvcmRBcnJheSBhbHJlYWR5CgkJICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycpIHsKCQkgICAgICAgICAgICAgICAga2V5ID0gVXRmOC5wYXJzZShrZXkpOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgdmFyIGhhc2hlckJsb2NrU2l6ZSA9IGhhc2hlci5ibG9ja1NpemU7CgkJICAgICAgICAgICAgdmFyIGhhc2hlckJsb2NrU2l6ZUJ5dGVzID0gaGFzaGVyQmxvY2tTaXplICogNDsKCgkJICAgICAgICAgICAgLy8gQWxsb3cgYXJiaXRyYXJ5IGxlbmd0aCBrZXlzCgkJICAgICAgICAgICAgaWYgKGtleS5zaWdCeXRlcyA+IGhhc2hlckJsb2NrU2l6ZUJ5dGVzKSB7CgkJICAgICAgICAgICAgICAgIGtleSA9IGhhc2hlci5maW5hbGl6ZShrZXkpOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgLy8gQ2xhbXAgZXhjZXNzIGJpdHMKCQkgICAgICAgICAgICBrZXkuY2xhbXAoKTsKCgkJICAgICAgICAgICAgLy8gQ2xvbmUga2V5IGZvciBpbm5lciBhbmQgb3V0ZXIgcGFkcwoJCSAgICAgICAgICAgIHZhciBvS2V5ID0gdGhpcy5fb0tleSA9IGtleS5jbG9uZSgpOwoJCSAgICAgICAgICAgIHZhciBpS2V5ID0gdGhpcy5faUtleSA9IGtleS5jbG9uZSgpOwoKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgICAgICB2YXIgb0tleVdvcmRzID0gb0tleS53b3JkczsKCQkgICAgICAgICAgICB2YXIgaUtleVdvcmRzID0gaUtleS53b3JkczsKCgkJICAgICAgICAgICAgLy8gWE9SIGtleXMgd2l0aCBwYWQgY29uc3RhbnRzCgkJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYXNoZXJCbG9ja1NpemU7IGkrKykgewoJCSAgICAgICAgICAgICAgICBvS2V5V29yZHNbaV0gXj0gMHg1YzVjNWM1YzsKCQkgICAgICAgICAgICAgICAgaUtleVdvcmRzW2ldIF49IDB4MzYzNjM2MzY7CgkJICAgICAgICAgICAgfQoJCSAgICAgICAgICAgIG9LZXkuc2lnQnl0ZXMgPSBpS2V5LnNpZ0J5dGVzID0gaGFzaGVyQmxvY2tTaXplQnl0ZXM7CgoJCSAgICAgICAgICAgIC8vIFNldCBpbml0aWFsIHZhbHVlcwoJCSAgICAgICAgICAgIHRoaXMucmVzZXQoKTsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBSZXNldHMgdGhpcyBITUFDIHRvIGl0cyBpbml0aWFsIHN0YXRlLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIGhtYWNIYXNoZXIucmVzZXQoKTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dAoJCSAgICAgICAgICAgIHZhciBoYXNoZXIgPSB0aGlzLl9oYXNoZXI7CgoJCSAgICAgICAgICAgIC8vIFJlc2V0CgkJICAgICAgICAgICAgaGFzaGVyLnJlc2V0KCk7CgkJICAgICAgICAgICAgaGFzaGVyLnVwZGF0ZSh0aGlzLl9pS2V5KTsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBVcGRhdGVzIHRoaXMgSE1BQyB3aXRoIGEgbWVzc2FnZS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgVGhlIG1lc3NhZ2UgdG8gYXBwZW5kLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge0hNQUN9IFRoaXMgSE1BQyBpbnN0YW5jZS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICBobWFjSGFzaGVyLnVwZGF0ZSgnbWVzc2FnZScpOwoJCSAgICAgICAgICogICAgIGhtYWNIYXNoZXIudXBkYXRlKHdvcmRBcnJheSk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHsKCQkgICAgICAgICAgICB0aGlzLl9oYXNoZXIudXBkYXRlKG1lc3NhZ2VVcGRhdGUpOwoKCQkgICAgICAgICAgICAvLyBDaGFpbmFibGUKCQkgICAgICAgICAgICByZXR1cm4gdGhpczsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBGaW5hbGl6ZXMgdGhlIEhNQUMgY29tcHV0YXRpb24uCgkJICAgICAgICAgKiBOb3RlIHRoYXQgdGhlIGZpbmFsaXplIG9wZXJhdGlvbiBpcyBlZmZlY3RpdmVseSBhIGRlc3RydWN0aXZlLCByZWFkLW9uY2Ugb3BlcmF0aW9uLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZVVwZGF0ZSAoT3B0aW9uYWwpIEEgZmluYWwgbWVzc2FnZSB1cGRhdGUuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgaG1hYyA9IGhtYWNIYXNoZXIuZmluYWxpemUoKTsKCQkgICAgICAgICAqICAgICB2YXIgaG1hYyA9IGhtYWNIYXNoZXIuZmluYWxpemUoJ21lc3NhZ2UnKTsKCQkgICAgICAgICAqICAgICB2YXIgaG1hYyA9IGhtYWNIYXNoZXIuZmluYWxpemUod29yZEFycmF5KTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgZmluYWxpemU6IGZ1bmN0aW9uIChtZXNzYWdlVXBkYXRlKSB7CgkJICAgICAgICAgICAgLy8gU2hvcnRjdXQKCQkgICAgICAgICAgICB2YXIgaGFzaGVyID0gdGhpcy5faGFzaGVyOwoKCQkgICAgICAgICAgICAvLyBDb21wdXRlIEhNQUMKCQkgICAgICAgICAgICB2YXIgaW5uZXJIYXNoID0gaGFzaGVyLmZpbmFsaXplKG1lc3NhZ2VVcGRhdGUpOwoJCSAgICAgICAgICAgIGhhc2hlci5yZXNldCgpOwoJCSAgICAgICAgICAgIHZhciBobWFjID0gaGFzaGVyLmZpbmFsaXplKHRoaXMuX29LZXkuY2xvbmUoKS5jb25jYXQoaW5uZXJIYXNoKSk7CgoJCSAgICAgICAgICAgIHJldHVybiBobWFjOwoJCSAgICAgICAgfQoJCSAgICB9KTsKCQl9KCkpOwoKCgl9KSk7CgovKioqLyB9KSwKCi8qKiovIDIyNzoKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCTsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CgkJaWYgKHRydWUpIHsKCQkJLy8gQ29tbW9uSlMKCQkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMyksIF9fd2VicGFja19yZXF1aXJlX18oMjE5KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMjYpKTsKCQl9CgkJZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSB7CgkJCS8vIEFNRAoJCQlkZWZpbmUoWyIuL2NvcmUiLCAiLi9zaGExIiwgIi4vaG1hYyJdLCBmYWN0b3J5KTsKCQl9CgkJZWxzZSB7CgkJCS8vIEdsb2JhbCAoYnJvd3NlcikKCQkJZmFjdG9yeShyb290LkNyeXB0b0pTKTsKCQl9Cgl9KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKCQkoZnVuY3Rpb24gKCkgewoJCSAgICAvLyBTaG9ydGN1dHMKCQkgICAgdmFyIEMgPSBDcnlwdG9KUzsKCQkgICAgdmFyIENfbGliID0gQy5saWI7CgkJICAgIHZhciBCYXNlID0gQ19saWIuQmFzZTsKCQkgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTsKCQkgICAgdmFyIENfYWxnbyA9IEMuYWxnbzsKCQkgICAgdmFyIFNIQTEgPSBDX2FsZ28uU0hBMTsKCQkgICAgdmFyIEhNQUMgPSBDX2FsZ28uSE1BQzsKCgkJICAgIC8qKgoJCSAgICAgKiBQYXNzd29yZC1CYXNlZCBLZXkgRGVyaXZhdGlvbiBGdW5jdGlvbiAyIGFsZ29yaXRobS4KCQkgICAgICovCgkJICAgIHZhciBQQktERjIgPSBDX2FsZ28uUEJLREYyID0gQmFzZS5leHRlbmQoewoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGtleVNpemUgVGhlIGtleSBzaXplIGluIHdvcmRzIHRvIGdlbmVyYXRlLiBEZWZhdWx0OiA0ICgxMjggYml0cykKCQkgICAgICAgICAqIEBwcm9wZXJ0eSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byB1c2UuIERlZmF1bHQ6IFNIQTEKCQkgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpdGVyYXRpb25zIFRoZSBudW1iZXIgb2YgaXRlcmF0aW9ucyB0byBwZXJmb3JtLiBEZWZhdWx0OiAxCgkJICAgICAgICAgKi8KCQkgICAgICAgIGNmZzogQmFzZS5leHRlbmQoewoJCSAgICAgICAgICAgIGtleVNpemU6IDEyOC8zMiwKCQkgICAgICAgICAgICBoYXNoZXI6IFNIQTEsCgkJICAgICAgICAgICAgaXRlcmF0aW9uczogMQoJCSAgICAgICAgfSksCgoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQga2V5IGRlcml2YXRpb24gZnVuY3Rpb24uCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGUgZGVyaXZhdGlvbi4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5QQktERjIuY3JlYXRlKCk7CgkJICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uUEJLREYyLmNyZWF0ZSh7IGtleVNpemU6IDggfSk7CgkJICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uUEJLREYyLmNyZWF0ZSh7IGtleVNpemU6IDgsIGl0ZXJhdGlvbnM6IDEwMDAgfSk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjZmcpIHsKCQkgICAgICAgICAgICB0aGlzLmNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENvbXB1dGVzIHRoZSBQYXNzd29yZC1CYXNlZCBLZXkgRGVyaXZhdGlvbiBGdW5jdGlvbiAyLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLgoJCSAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBzYWx0IEEgc2FsdC4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkZXJpdmVkIGtleS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIga2V5ID0ga2RmLmNvbXB1dGUocGFzc3dvcmQsIHNhbHQpOwoJCSAgICAgICAgICovCgkJICAgICAgICBjb21wdXRlOiBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQpIHsKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dAoJCSAgICAgICAgICAgIHZhciBjZmcgPSB0aGlzLmNmZzsKCgkJICAgICAgICAgICAgLy8gSW5pdCBITUFDCgkJICAgICAgICAgICAgdmFyIGhtYWMgPSBITUFDLmNyZWF0ZShjZmcuaGFzaGVyLCBwYXNzd29yZCk7CgoJCSAgICAgICAgICAgIC8vIEluaXRpYWwgdmFsdWVzCgkJICAgICAgICAgICAgdmFyIGRlcml2ZWRLZXkgPSBXb3JkQXJyYXkuY3JlYXRlKCk7CgkJICAgICAgICAgICAgdmFyIGJsb2NrSW5kZXggPSBXb3JkQXJyYXkuY3JlYXRlKFsweDAwMDAwMDAxXSk7CgoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgIHZhciBkZXJpdmVkS2V5V29yZHMgPSBkZXJpdmVkS2V5LndvcmRzOwoJCSAgICAgICAgICAgIHZhciBibG9ja0luZGV4V29yZHMgPSBibG9ja0luZGV4LndvcmRzOwoJCSAgICAgICAgICAgIHZhciBrZXlTaXplID0gY2ZnLmtleVNpemU7CgkJICAgICAgICAgICAgdmFyIGl0ZXJhdGlvbnMgPSBjZmcuaXRlcmF0aW9uczsKCgkJICAgICAgICAgICAgLy8gR2VuZXJhdGUga2V5CgkJICAgICAgICAgICAgd2hpbGUgKGRlcml2ZWRLZXlXb3Jkcy5sZW5ndGggPCBrZXlTaXplKSB7CgkJICAgICAgICAgICAgICAgIHZhciBibG9jayA9IGhtYWMudXBkYXRlKHNhbHQpLmZpbmFsaXplKGJsb2NrSW5kZXgpOwoJCSAgICAgICAgICAgICAgICBobWFjLnJlc2V0KCk7CgoJCSAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgICAgICAgICAgdmFyIGJsb2NrV29yZHMgPSBibG9jay53b3JkczsKCQkgICAgICAgICAgICAgICAgdmFyIGJsb2NrV29yZHNMZW5ndGggPSBibG9ja1dvcmRzLmxlbmd0aDsKCgkJICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGlvbnMKCQkgICAgICAgICAgICAgICAgdmFyIGludGVybWVkaWF0ZSA9IGJsb2NrOwoJCSAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGl0ZXJhdGlvbnM7IGkrKykgewoJCSAgICAgICAgICAgICAgICAgICAgaW50ZXJtZWRpYXRlID0gaG1hYy5maW5hbGl6ZShpbnRlcm1lZGlhdGUpOwoJCSAgICAgICAgICAgICAgICAgICAgaG1hYy5yZXNldCgpOwoKCQkgICAgICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0CgkJICAgICAgICAgICAgICAgICAgICB2YXIgaW50ZXJtZWRpYXRlV29yZHMgPSBpbnRlcm1lZGlhdGUud29yZHM7CgoJCSAgICAgICAgICAgICAgICAgICAgLy8gWE9SIGludGVybWVkaWF0ZSB3aXRoIGJsb2NrCgkJICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGJsb2NrV29yZHNMZW5ndGg7IGorKykgewoJCSAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrV29yZHNbal0gXj0gaW50ZXJtZWRpYXRlV29yZHNbal07CgkJICAgICAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgICAgIGRlcml2ZWRLZXkuY29uY2F0KGJsb2NrKTsKCQkgICAgICAgICAgICAgICAgYmxvY2tJbmRleFdvcmRzWzBdKys7CgkJICAgICAgICAgICAgfQoJCSAgICAgICAgICAgIGRlcml2ZWRLZXkuc2lnQnl0ZXMgPSBrZXlTaXplICogNDsKCgkJICAgICAgICAgICAgcmV0dXJuIGRlcml2ZWRLZXk7CgkJICAgICAgICB9CgkJICAgIH0pOwoKCQkgICAgLyoqCgkJICAgICAqIENvbXB1dGVzIHRoZSBQYXNzd29yZC1CYXNlZCBLZXkgRGVyaXZhdGlvbiBGdW5jdGlvbiAyLgoJCSAgICAgKgoJCSAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC4KCQkgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBzYWx0IEEgc2FsdC4KCQkgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIGNvbXB1dGF0aW9uLgoJCSAgICAgKgoJCSAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkZXJpdmVkIGtleS4KCQkgICAgICoKCQkgICAgICogQHN0YXRpYwoJCSAgICAgKgoJCSAgICAgKiBAZXhhbXBsZQoJCSAgICAgKgoJCSAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLlBCS0RGMihwYXNzd29yZCwgc2FsdCk7CgkJICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuUEJLREYyKHBhc3N3b3JkLCBzYWx0LCB7IGtleVNpemU6IDggfSk7CgkJICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuUEJLREYyKHBhc3N3b3JkLCBzYWx0LCB7IGtleVNpemU6IDgsIGl0ZXJhdGlvbnM6IDEwMDAgfSk7CgkJICAgICAqLwoJCSAgICBDLlBCS0RGMiA9IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCwgY2ZnKSB7CgkJICAgICAgICByZXR1cm4gUEJLREYyLmNyZWF0ZShjZmcpLmNvbXB1dGUocGFzc3dvcmQsIHNhbHQpOwoJCSAgICB9OwoJCX0oKSk7CgoKCQlyZXR1cm4gQ3J5cHRvSlMuUEJLREYyOwoKCX0pKTsKCi8qKiovIH0pLAoKLyoqKi8gMjI4OgovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHsKCQlpZiAodHJ1ZSkgewoJCQkvLyBDb21tb25KUwoJCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oMjEzKSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMTkpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyNikpOwoJCX0KCQllbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQpIHsKCQkJLy8gQU1ECgkJCWRlZmluZShbIi4vY29yZSIsICIuL3NoYTEiLCAiLi9obWFjIl0sIGZhY3RvcnkpOwoJCX0KCQllbHNlIHsKCQkJLy8gR2xvYmFsIChicm93c2VyKQoJCQlmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpOwoJCX0KCX0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgoJCShmdW5jdGlvbiAoKSB7CgkJICAgIC8vIFNob3J0Y3V0cwoJCSAgICB2YXIgQyA9IENyeXB0b0pTOwoJCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKCQkgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlOwoJCSAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5OwoJCSAgICB2YXIgQ19hbGdvID0gQy5hbGdvOwoJCSAgICB2YXIgTUQ1ID0gQ19hbGdvLk1ENTsKCgkJICAgIC8qKgoJCSAgICAgKiBUaGlzIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uIGlzIG1lYW50IHRvIGNvbmZvcm0gd2l0aCBFVlBfQnl0ZXNUb0tleS4KCQkgICAgICogd3d3Lm9wZW5zc2wub3JnL2RvY3MvY3J5cHRvL0VWUF9CeXRlc1RvS2V5Lmh0bWwKCQkgICAgICovCgkJICAgIHZhciBFdnBLREYgPSBDX2FsZ28uRXZwS0RGID0gQmFzZS5leHRlbmQoewoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGtleVNpemUgVGhlIGtleSBzaXplIGluIHdvcmRzIHRvIGdlbmVyYXRlLiBEZWZhdWx0OiA0ICgxMjggYml0cykKCQkgICAgICAgICAqIEBwcm9wZXJ0eSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2ggYWxnb3JpdGhtIHRvIHVzZS4gRGVmYXVsdDogTUQ1CgkJICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gaXRlcmF0aW9ucyBUaGUgbnVtYmVyIG9mIGl0ZXJhdGlvbnMgdG8gcGVyZm9ybS4gRGVmYXVsdDogMQoJCSAgICAgICAgICovCgkJICAgICAgICBjZmc6IEJhc2UuZXh0ZW5kKHsKCQkgICAgICAgICAgICBrZXlTaXplOiAxMjgvMzIsCgkJICAgICAgICAgICAgaGFzaGVyOiBNRDUsCgkJICAgICAgICAgICAgaXRlcmF0aW9uczogMQoJCSAgICAgICAgfSksCgoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQga2V5IGRlcml2YXRpb24gZnVuY3Rpb24uCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGUgZGVyaXZhdGlvbi4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5FdnBLREYuY3JlYXRlKCk7CgkJICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uRXZwS0RGLmNyZWF0ZSh7IGtleVNpemU6IDggfSk7CgkJICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uRXZwS0RGLmNyZWF0ZSh7IGtleVNpemU6IDgsIGl0ZXJhdGlvbnM6IDEwMDAgfSk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjZmcpIHsKCQkgICAgICAgICAgICB0aGlzLmNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIERlcml2ZXMgYSBrZXkgZnJvbSBhIHBhc3N3b3JkLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLgoJCSAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBzYWx0IEEgc2FsdC4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkZXJpdmVkIGtleS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIga2V5ID0ga2RmLmNvbXB1dGUocGFzc3dvcmQsIHNhbHQpOwoJCSAgICAgICAgICovCgkJICAgICAgICBjb21wdXRlOiBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQpIHsKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dAoJCSAgICAgICAgICAgIHZhciBjZmcgPSB0aGlzLmNmZzsKCgkJICAgICAgICAgICAgLy8gSW5pdCBoYXNoZXIKCQkgICAgICAgICAgICB2YXIgaGFzaGVyID0gY2ZnLmhhc2hlci5jcmVhdGUoKTsKCgkJICAgICAgICAgICAgLy8gSW5pdGlhbCB2YWx1ZXMKCQkgICAgICAgICAgICB2YXIgZGVyaXZlZEtleSA9IFdvcmRBcnJheS5jcmVhdGUoKTsKCgkJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgdmFyIGRlcml2ZWRLZXlXb3JkcyA9IGRlcml2ZWRLZXkud29yZHM7CgkJICAgICAgICAgICAgdmFyIGtleVNpemUgPSBjZmcua2V5U2l6ZTsKCQkgICAgICAgICAgICB2YXIgaXRlcmF0aW9ucyA9IGNmZy5pdGVyYXRpb25zOwoKCQkgICAgICAgICAgICAvLyBHZW5lcmF0ZSBrZXkKCQkgICAgICAgICAgICB3aGlsZSAoZGVyaXZlZEtleVdvcmRzLmxlbmd0aCA8IGtleVNpemUpIHsKCQkgICAgICAgICAgICAgICAgaWYgKGJsb2NrKSB7CgkJICAgICAgICAgICAgICAgICAgICBoYXNoZXIudXBkYXRlKGJsb2NrKTsKCQkgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgICAgICB2YXIgYmxvY2sgPSBoYXNoZXIudXBkYXRlKHBhc3N3b3JkKS5maW5hbGl6ZShzYWx0KTsKCQkgICAgICAgICAgICAgICAgaGFzaGVyLnJlc2V0KCk7CgoJCSAgICAgICAgICAgICAgICAvLyBJdGVyYXRpb25zCgkJICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgaXRlcmF0aW9uczsgaSsrKSB7CgkJICAgICAgICAgICAgICAgICAgICBibG9jayA9IGhhc2hlci5maW5hbGl6ZShibG9jayk7CgkJICAgICAgICAgICAgICAgICAgICBoYXNoZXIucmVzZXQoKTsKCQkgICAgICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICAgICAgZGVyaXZlZEtleS5jb25jYXQoYmxvY2spOwoJCSAgICAgICAgICAgIH0KCQkgICAgICAgICAgICBkZXJpdmVkS2V5LnNpZ0J5dGVzID0ga2V5U2l6ZSAqIDQ7CgoJCSAgICAgICAgICAgIHJldHVybiBkZXJpdmVkS2V5OwoJCSAgICAgICAgfQoJCSAgICB9KTsKCgkJICAgIC8qKgoJCSAgICAgKiBEZXJpdmVzIGEga2V5IGZyb20gYSBwYXNzd29yZC4KCQkgICAgICoKCQkgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuCgkJICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gc2FsdCBBIHNhbHQuCgkJICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBjb21wdXRhdGlvbi4KCQkgICAgICoKCQkgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGVyaXZlZCBrZXkuCgkJICAgICAqCgkJICAgICAqIEBzdGF0aWMKCQkgICAgICoKCQkgICAgICogQGV4YW1wbGUKCQkgICAgICoKCQkgICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5FdnBLREYocGFzc3dvcmQsIHNhbHQpOwoJCSAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLkV2cEtERihwYXNzd29yZCwgc2FsdCwgeyBrZXlTaXplOiA4IH0pOwoJCSAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLkV2cEtERihwYXNzd29yZCwgc2FsdCwgeyBrZXlTaXplOiA4LCBpdGVyYXRpb25zOiAxMDAwIH0pOwoJCSAgICAgKi8KCQkgICAgQy5FdnBLREYgPSBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQsIGNmZykgewoJCSAgICAgICAgcmV0dXJuIEV2cEtERi5jcmVhdGUoY2ZnKS5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KTsKCQkgICAgfTsKCQl9KCkpOwoKCgkJcmV0dXJuIENyeXB0b0pTLkV2cEtERjsKCgl9KSk7CgovKioqLyB9KSwKCi8qKiovIDIyOToKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCTsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CgkJaWYgKHRydWUpIHsKCQkJLy8gQ29tbW9uSlMKCQkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMyksIF9fd2VicGFja19yZXF1aXJlX18oMjI4KSk7CgkJfQoJCWVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewoJCQkvLyBBTUQKCQkJZGVmaW5lKFsiLi9jb3JlIiwgIi4vZXZwa2RmIl0sIGZhY3RvcnkpOwoJCX0KCQllbHNlIHsKCQkJLy8gR2xvYmFsIChicm93c2VyKQoJCQlmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpOwoJCX0KCX0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgoJCS8qKgoJCSAqIENpcGhlciBjb3JlIGNvbXBvbmVudHMuCgkJICovCgkJQ3J5cHRvSlMubGliLkNpcGhlciB8fCAoZnVuY3Rpb24gKHVuZGVmaW5lZCkgewoJCSAgICAvLyBTaG9ydGN1dHMKCQkgICAgdmFyIEMgPSBDcnlwdG9KUzsKCQkgICAgdmFyIENfbGliID0gQy5saWI7CgkJICAgIHZhciBCYXNlID0gQ19saWIuQmFzZTsKCQkgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTsKCQkgICAgdmFyIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBDX2xpYi5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtOwoJCSAgICB2YXIgQ19lbmMgPSBDLmVuYzsKCQkgICAgdmFyIFV0ZjggPSBDX2VuYy5VdGY4OwoJCSAgICB2YXIgQmFzZTY0ID0gQ19lbmMuQmFzZTY0OwoJCSAgICB2YXIgQ19hbGdvID0gQy5hbGdvOwoJCSAgICB2YXIgRXZwS0RGID0gQ19hbGdvLkV2cEtERjsKCgkJICAgIC8qKgoJCSAgICAgKiBBYnN0cmFjdCBiYXNlIGNpcGhlciB0ZW1wbGF0ZS4KCQkgICAgICoKCQkgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGtleVNpemUgVGhpcyBjaXBoZXIncyBrZXkgc2l6ZS4gRGVmYXVsdDogNCAoMTI4IGJpdHMpCgkJICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpdlNpemUgVGhpcyBjaXBoZXIncyBJViBzaXplLiBEZWZhdWx0OiA0ICgxMjggYml0cykKCQkgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IF9FTkNfWEZPUk1fTU9ERSBBIGNvbnN0YW50IHJlcHJlc2VudGluZyBlbmNyeXB0aW9uIG1vZGUuCgkJICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBfREVDX1hGT1JNX01PREUgQSBjb25zdGFudCByZXByZXNlbnRpbmcgZGVjcnlwdGlvbiBtb2RlLgoJCSAgICAgKi8KCQkgICAgdmFyIENpcGhlciA9IENfbGliLkNpcGhlciA9IEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uZXh0ZW5kKHsKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBpdiBUaGUgSVYgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi4KCQkgICAgICAgICAqLwoJCSAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCgpLAoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogQ3JlYXRlcyB0aGlzIGNpcGhlciBpbiBlbmNyeXB0aW9uIG1vZGUuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LgoJCSAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJ9IEEgY2lwaGVyIGluc3RhbmNlLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBzdGF0aWMKCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgY2lwaGVyID0gQ3J5cHRvSlMuYWxnby5BRVMuY3JlYXRlRW5jcnlwdG9yKGtleVdvcmRBcnJheSwgeyBpdjogaXZXb3JkQXJyYXkgfSk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIGNyZWF0ZUVuY3J5cHRvcjogZnVuY3Rpb24gKGtleSwgY2ZnKSB7CgkJICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHRoaXMuX0VOQ19YRk9STV9NT0RFLCBrZXksIGNmZyk7CgkJICAgICAgICB9LAoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogQ3JlYXRlcyB0aGlzIGNpcGhlciBpbiBkZWNyeXB0aW9uIG1vZGUuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LgoJCSAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJ9IEEgY2lwaGVyIGluc3RhbmNlLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBzdGF0aWMKCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgY2lwaGVyID0gQ3J5cHRvSlMuYWxnby5BRVMuY3JlYXRlRGVjcnlwdG9yKGtleVdvcmRBcnJheSwgeyBpdjogaXZXb3JkQXJyYXkgfSk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIGNyZWF0ZURlY3J5cHRvcjogZnVuY3Rpb24gKGtleSwgY2ZnKSB7CgkJICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHRoaXMuX0RFQ19YRk9STV9NT0RFLCBrZXksIGNmZyk7CgkJICAgICAgICB9LAoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGNpcGhlci4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0geGZvcm1Nb2RlIEVpdGhlciB0aGUgZW5jcnlwdGlvbiBvciBkZWNyeXB0aW9uIHRyYW5zb3JtYXRpb24gbW9kZSBjb25zdGFudC4KCQkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS4KCQkgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIGNpcGhlciA9IENyeXB0b0pTLmFsZ28uQUVTLmNyZWF0ZShDcnlwdG9KUy5hbGdvLkFFUy5fRU5DX1hGT1JNX01PREUsIGtleVdvcmRBcnJheSwgeyBpdjogaXZXb3JkQXJyYXkgfSk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIGluaXQ6IGZ1bmN0aW9uICh4Zm9ybU1vZGUsIGtleSwgY2ZnKSB7CgkJICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzCgkJICAgICAgICAgICAgdGhpcy5jZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTsKCgkJICAgICAgICAgICAgLy8gU3RvcmUgdHJhbnNmb3JtIG1vZGUgYW5kIGtleQoJCSAgICAgICAgICAgIHRoaXMuX3hmb3JtTW9kZSA9IHhmb3JtTW9kZTsKCQkgICAgICAgICAgICB0aGlzLl9rZXkgPSBrZXk7CgoJCSAgICAgICAgICAgIC8vIFNldCBpbml0aWFsIHZhbHVlcwoJCSAgICAgICAgICAgIHRoaXMucmVzZXQoKTsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBSZXNldHMgdGhpcyBjaXBoZXIgdG8gaXRzIGluaXRpYWwgc3RhdGUuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgY2lwaGVyLnJlc2V0KCk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7CgkJICAgICAgICAgICAgLy8gUmVzZXQgZGF0YSBidWZmZXIKCQkgICAgICAgICAgICBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLnJlc2V0LmNhbGwodGhpcyk7CgoJCSAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtY2lwaGVyIGxvZ2ljCgkJICAgICAgICAgICAgdGhpcy5fZG9SZXNldCgpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIEFkZHMgZGF0YSB0byBiZSBlbmNyeXB0ZWQgb3IgZGVjcnlwdGVkLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gZGF0YVVwZGF0ZSBUaGUgZGF0YSB0byBlbmNyeXB0IG9yIGRlY3J5cHQuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGF0YSBhZnRlciBwcm9jZXNzaW5nLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHZhciBlbmNyeXB0ZWQgPSBjaXBoZXIucHJvY2VzcygnZGF0YScpOwoJCSAgICAgICAgICogICAgIHZhciBlbmNyeXB0ZWQgPSBjaXBoZXIucHJvY2Vzcyh3b3JkQXJyYXkpOwoJCSAgICAgICAgICovCgkJICAgICAgICBwcm9jZXNzOiBmdW5jdGlvbiAoZGF0YVVwZGF0ZSkgewoJCSAgICAgICAgICAgIC8vIEFwcGVuZAoJCSAgICAgICAgICAgIHRoaXMuX2FwcGVuZChkYXRhVXBkYXRlKTsKCgkJICAgICAgICAgICAgLy8gUHJvY2VzcyBhdmFpbGFibGUgYmxvY2tzCgkJICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3MoKTsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBGaW5hbGl6ZXMgdGhlIGVuY3J5cHRpb24gb3IgZGVjcnlwdGlvbiBwcm9jZXNzLgoJCSAgICAgICAgICogTm90ZSB0aGF0IHRoZSBmaW5hbGl6ZSBvcGVyYXRpb24gaXMgZWZmZWN0aXZlbHkgYSBkZXN0cnVjdGl2ZSwgcmVhZC1vbmNlIG9wZXJhdGlvbi4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGRhdGFVcGRhdGUgVGhlIGZpbmFsIGRhdGEgdG8gZW5jcnlwdCBvciBkZWNyeXB0LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRhdGEgYWZ0ZXIgZmluYWwgcHJvY2Vzc2luZy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLmZpbmFsaXplKCk7CgkJICAgICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5maW5hbGl6ZSgnZGF0YScpOwoJCSAgICAgICAgICogICAgIHZhciBlbmNyeXB0ZWQgPSBjaXBoZXIuZmluYWxpemUod29yZEFycmF5KTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgZmluYWxpemU6IGZ1bmN0aW9uIChkYXRhVXBkYXRlKSB7CgkJICAgICAgICAgICAgLy8gRmluYWwgZGF0YSB1cGRhdGUKCQkgICAgICAgICAgICBpZiAoZGF0YVVwZGF0ZSkgewoJCSAgICAgICAgICAgICAgICB0aGlzLl9hcHBlbmQoZGF0YVVwZGF0ZSk7CgkJICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWNpcGhlciBsb2dpYwoJCSAgICAgICAgICAgIHZhciBmaW5hbFByb2Nlc3NlZERhdGEgPSB0aGlzLl9kb0ZpbmFsaXplKCk7CgoJCSAgICAgICAgICAgIHJldHVybiBmaW5hbFByb2Nlc3NlZERhdGE7CgkJICAgICAgICB9LAoKCQkgICAgICAgIGtleVNpemU6IDEyOC8zMiwKCgkJICAgICAgICBpdlNpemU6IDEyOC8zMiwKCgkJICAgICAgICBfRU5DX1hGT1JNX01PREU6IDEsCgoJCSAgICAgICAgX0RFQ19YRk9STV9NT0RFOiAyLAoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogQ3JlYXRlcyBzaG9ydGN1dCBmdW5jdGlvbnMgdG8gYSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciB0byBjcmVhdGUgYSBoZWxwZXIgZm9yLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gQW4gb2JqZWN0IHdpdGggZW5jcnlwdCBhbmQgZGVjcnlwdCBzaG9ydGN1dCBmdW5jdGlvbnMuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHN0YXRpYwoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHZhciBBRVMgPSBDcnlwdG9KUy5saWIuQ2lwaGVyLl9jcmVhdGVIZWxwZXIoQ3J5cHRvSlMuYWxnby5BRVMpOwoJCSAgICAgICAgICovCgkJICAgICAgICBfY3JlYXRlSGVscGVyOiAoZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIGZ1bmN0aW9uIHNlbGVjdENpcGhlclN0cmF0ZWd5KGtleSkgewoJCSAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJykgewoJCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBhc3N3b3JkQmFzZWRDaXBoZXI7CgkJICAgICAgICAgICAgICAgIH0gZWxzZSB7CgkJICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2VyaWFsaXphYmxlQ2lwaGVyOwoJCSAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNpcGhlcikgewoJCSAgICAgICAgICAgICAgICByZXR1cm4gewoJCSAgICAgICAgICAgICAgICAgICAgZW5jcnlwdDogZnVuY3Rpb24gKG1lc3NhZ2UsIGtleSwgY2ZnKSB7CgkJICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdENpcGhlclN0cmF0ZWd5KGtleSkuZW5jcnlwdChjaXBoZXIsIG1lc3NhZ2UsIGtleSwgY2ZnKTsKCQkgICAgICAgICAgICAgICAgICAgIH0sCgoJCSAgICAgICAgICAgICAgICAgICAgZGVjcnlwdDogZnVuY3Rpb24gKGNpcGhlcnRleHQsIGtleSwgY2ZnKSB7CgkJICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdENpcGhlclN0cmF0ZWd5KGtleSkuZGVjcnlwdChjaXBoZXIsIGNpcGhlcnRleHQsIGtleSwgY2ZnKTsKCQkgICAgICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICAgICAgfTsKCQkgICAgICAgICAgICB9OwoJCSAgICAgICAgfSgpKQoJCSAgICB9KTsKCgkJICAgIC8qKgoJCSAgICAgKiBBYnN0cmFjdCBiYXNlIHN0cmVhbSBjaXBoZXIgdGVtcGxhdGUuCgkJICAgICAqCgkJICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIG51bWJlciBvZiAzMi1iaXQgd29yZHMgdGhpcyBjaXBoZXIgb3BlcmF0ZXMgb24uIERlZmF1bHQ6IDEgKDMyIGJpdHMpCgkJICAgICAqLwoJCSAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyID0gQ2lwaGVyLmV4dGVuZCh7CgkJICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIC8vIFByb2Nlc3MgcGFydGlhbCBibG9ja3MKCQkgICAgICAgICAgICB2YXIgZmluYWxQcm9jZXNzZWRCbG9ja3MgPSB0aGlzLl9wcm9jZXNzKCEhJ2ZsdXNoJyk7CgoJCSAgICAgICAgICAgIHJldHVybiBmaW5hbFByb2Nlc3NlZEJsb2NrczsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgYmxvY2tTaXplOiAxCgkJICAgIH0pOwoKCQkgICAgLyoqCgkJICAgICAqIE1vZGUgbmFtZXNwYWNlLgoJCSAgICAgKi8KCQkgICAgdmFyIENfbW9kZSA9IEMubW9kZSA9IHt9OwoKCQkgICAgLyoqCgkJICAgICAqIEFic3RyYWN0IGJhc2UgYmxvY2sgY2lwaGVyIG1vZGUgdGVtcGxhdGUuCgkJICAgICAqLwoJCSAgICB2YXIgQmxvY2tDaXBoZXJNb2RlID0gQ19saWIuQmxvY2tDaXBoZXJNb2RlID0gQmFzZS5leHRlbmQoewoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBDcmVhdGVzIHRoaXMgbW9kZSBmb3IgZW5jcnlwdGlvbi4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIEEgYmxvY2sgY2lwaGVyIGluc3RhbmNlLgoJCSAgICAgICAgICogQHBhcmFtIHtBcnJheX0gaXYgVGhlIElWIHdvcmRzLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBzdGF0aWMKCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgbW9kZSA9IENyeXB0b0pTLm1vZGUuQ0JDLmNyZWF0ZUVuY3J5cHRvcihjaXBoZXIsIGl2LndvcmRzKTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgY3JlYXRlRW5jcnlwdG9yOiBmdW5jdGlvbiAoY2lwaGVyLCBpdikgewoJCSAgICAgICAgICAgIHJldHVybiB0aGlzLkVuY3J5cHRvci5jcmVhdGUoY2lwaGVyLCBpdik7CgkJICAgICAgICB9LAoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogQ3JlYXRlcyB0aGlzIG1vZGUgZm9yIGRlY3J5cHRpb24uCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBBIGJsb2NrIGNpcGhlciBpbnN0YW5jZS4KCQkgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGl2IFRoZSBJViB3b3Jkcy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAc3RhdGljCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIG1vZGUgPSBDcnlwdG9KUy5tb2RlLkNCQy5jcmVhdGVEZWNyeXB0b3IoY2lwaGVyLCBpdi53b3Jkcyk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIGNyZWF0ZURlY3J5cHRvcjogZnVuY3Rpb24gKGNpcGhlciwgaXYpIHsKCQkgICAgICAgICAgICByZXR1cm4gdGhpcy5EZWNyeXB0b3IuY3JlYXRlKGNpcGhlciwgaXYpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBtb2RlLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgQSBibG9jayBjaXBoZXIgaW5zdGFuY2UuCgkJICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBpdiBUaGUgSVYgd29yZHMuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIG1vZGUgPSBDcnlwdG9KUy5tb2RlLkNCQy5FbmNyeXB0b3IuY3JlYXRlKGNpcGhlciwgaXYud29yZHMpOwoJCSAgICAgICAgICovCgkJICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2lwaGVyLCBpdikgewoJCSAgICAgICAgICAgIHRoaXMuX2NpcGhlciA9IGNpcGhlcjsKCQkgICAgICAgICAgICB0aGlzLl9pdiA9IGl2OwoJCSAgICAgICAgfQoJCSAgICB9KTsKCgkJICAgIC8qKgoJCSAgICAgKiBDaXBoZXIgQmxvY2sgQ2hhaW5pbmcgbW9kZS4KCQkgICAgICovCgkJICAgIHZhciBDQkMgPSBDX21vZGUuQ0JDID0gKGZ1bmN0aW9uICgpIHsKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogQWJzdHJhY3QgYmFzZSBDQkMgbW9kZS4KCQkgICAgICAgICAqLwoJCSAgICAgICAgdmFyIENCQyA9IEJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTsKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENCQyBlbmNyeXB0b3IuCgkJICAgICAgICAgKi8KCQkgICAgICAgIENCQy5FbmNyeXB0b3IgPSBDQkMuZXh0ZW5kKHsKCQkgICAgICAgICAgICAvKioKCQkgICAgICAgICAgICAgKiBQcm9jZXNzZXMgdGhlIGRhdGEgYmxvY2sgYXQgb2Zmc2V0LgoJCSAgICAgICAgICAgICAqCgkJICAgICAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgVGhlIGRhdGEgd29yZHMgdG8gb3BlcmF0ZSBvbi4KCQkgICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IFRoZSBvZmZzZXQgd2hlcmUgdGhlIGJsb2NrIHN0YXJ0cy4KCQkgICAgICAgICAgICAgKgoJCSAgICAgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgICAgICoKCQkgICAgICAgICAgICAgKiAgICAgbW9kZS5wcm9jZXNzQmxvY2soZGF0YS53b3Jkcywgb2Zmc2V0KTsKCQkgICAgICAgICAgICAgKi8KCQkgICAgICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7CgkJICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyOwoJCSAgICAgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTsKCgkJICAgICAgICAgICAgICAgIC8vIFhPUiBhbmQgZW5jcnlwdAoJCSAgICAgICAgICAgICAgICB4b3JCbG9jay5jYWxsKHRoaXMsIHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSk7CgkJICAgICAgICAgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2sod29yZHMsIG9mZnNldCk7CgoJCSAgICAgICAgICAgICAgICAvLyBSZW1lbWJlciB0aGlzIGJsb2NrIHRvIHVzZSB3aXRoIG5leHQgYmxvY2sKCQkgICAgICAgICAgICAgICAgdGhpcy5fcHJldkJsb2NrID0gd29yZHMuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBibG9ja1NpemUpOwoJCSAgICAgICAgICAgIH0KCQkgICAgICAgIH0pOwoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogQ0JDIGRlY3J5cHRvci4KCQkgICAgICAgICAqLwoJCSAgICAgICAgQ0JDLkRlY3J5cHRvciA9IENCQy5leHRlbmQoewoJCSAgICAgICAgICAgIC8qKgoJCSAgICAgICAgICAgICAqIFByb2Nlc3NlcyB0aGUgZGF0YSBibG9jayBhdCBvZmZzZXQuCgkJICAgICAgICAgICAgICoKCQkgICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyBUaGUgZGF0YSB3b3JkcyB0byBvcGVyYXRlIG9uLgoJCSAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCB3aGVyZSB0aGUgYmxvY2sgc3RhcnRzLgoJCSAgICAgICAgICAgICAqCgkJICAgICAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAgICAgKgoJCSAgICAgICAgICAgICAqICAgICBtb2RlLnByb2Nlc3NCbG9jayhkYXRhLndvcmRzLCBvZmZzZXQpOwoJCSAgICAgICAgICAgICAqLwoJCSAgICAgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHsKCQkgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXI7CgkJICAgICAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplOwoKCQkgICAgICAgICAgICAgICAgLy8gUmVtZW1iZXIgdGhpcyBibG9jayB0byB1c2Ugd2l0aCBuZXh0IGJsb2NrCgkJICAgICAgICAgICAgICAgIHZhciB0aGlzQmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSk7CgoJCSAgICAgICAgICAgICAgICAvLyBEZWNyeXB0IGFuZCBYT1IKCQkgICAgICAgICAgICAgICAgY2lwaGVyLmRlY3J5cHRCbG9jayh3b3Jkcywgb2Zmc2V0KTsKCQkgICAgICAgICAgICAgICAgeG9yQmxvY2suY2FsbCh0aGlzLCB3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUpOwoKCQkgICAgICAgICAgICAgICAgLy8gVGhpcyBibG9jayBiZWNvbWVzIHRoZSBwcmV2aW91cyBibG9jawoJCSAgICAgICAgICAgICAgICB0aGlzLl9wcmV2QmxvY2sgPSB0aGlzQmxvY2s7CgkJICAgICAgICAgICAgfQoJCSAgICAgICAgfSk7CgoJCSAgICAgICAgZnVuY3Rpb24geG9yQmxvY2sod29yZHMsIG9mZnNldCwgYmxvY2tTaXplKSB7CgkJICAgICAgICAgICAgLy8gU2hvcnRjdXQKCQkgICAgICAgICAgICB2YXIgaXYgPSB0aGlzLl9pdjsKCgkJICAgICAgICAgICAgLy8gQ2hvb3NlIG1peGluZyBibG9jawoJCSAgICAgICAgICAgIGlmIChpdikgewoJCSAgICAgICAgICAgICAgICB2YXIgYmxvY2sgPSBpdjsKCgkJICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBJViBmb3Igc3Vic2VxdWVudCBibG9ja3MKCQkgICAgICAgICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWQ7CgkJICAgICAgICAgICAgfSBlbHNlIHsKCQkgICAgICAgICAgICAgICAgdmFyIGJsb2NrID0gdGhpcy5fcHJldkJsb2NrOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgLy8gWE9SIGJsb2NrcwoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHsKCQkgICAgICAgICAgICAgICAgd29yZHNbb2Zmc2V0ICsgaV0gXj0gYmxvY2tbaV07CgkJICAgICAgICAgICAgfQoJCSAgICAgICAgfQoKCQkgICAgICAgIHJldHVybiBDQkM7CgkJICAgIH0oKSk7CgoJCSAgICAvKioKCQkgICAgICogUGFkZGluZyBuYW1lc3BhY2UuCgkJICAgICAqLwoJCSAgICB2YXIgQ19wYWQgPSBDLnBhZCA9IHt9OwoKCQkgICAgLyoqCgkJICAgICAqIFBLQ1MgIzUvNyBwYWRkaW5nIHN0cmF0ZWd5LgoJCSAgICAgKi8KCQkgICAgdmFyIFBrY3M3ID0gQ19wYWQuUGtjczcgPSB7CgkJICAgICAgICAvKioKCQkgICAgICAgICAqIFBhZHMgZGF0YSB1c2luZyB0aGUgYWxnb3JpdGhtIGRlZmluZWQgaW4gUEtDUyAjNS83LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBkYXRhIFRoZSBkYXRhIHRvIHBhZC4KCQkgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIG11bHRpcGxlIHRoYXQgdGhlIGRhdGEgc2hvdWxkIGJlIHBhZGRlZCB0by4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAc3RhdGljCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgQ3J5cHRvSlMucGFkLlBrY3M3LnBhZCh3b3JkQXJyYXksIDQpOwoJCSAgICAgICAgICovCgkJICAgICAgICBwYWQ6IGZ1bmN0aW9uIChkYXRhLCBibG9ja1NpemUpIHsKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dAoJCSAgICAgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7CgoJCSAgICAgICAgICAgIC8vIENvdW50IHBhZGRpbmcgYnl0ZXMKCQkgICAgICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGJsb2NrU2l6ZUJ5dGVzIC0gZGF0YS5zaWdCeXRlcyAlIGJsb2NrU2l6ZUJ5dGVzOwoKCQkgICAgICAgICAgICAvLyBDcmVhdGUgcGFkZGluZyB3b3JkCgkJICAgICAgICAgICAgdmFyIHBhZGRpbmdXb3JkID0gKG5QYWRkaW5nQnl0ZXMgPDwgMjQpIHwgKG5QYWRkaW5nQnl0ZXMgPDwgMTYpIHwgKG5QYWRkaW5nQnl0ZXMgPDwgOCkgfCBuUGFkZGluZ0J5dGVzOwoKCQkgICAgICAgICAgICAvLyBDcmVhdGUgcGFkZGluZwoJCSAgICAgICAgICAgIHZhciBwYWRkaW5nV29yZHMgPSBbXTsKCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5QYWRkaW5nQnl0ZXM7IGkgKz0gNCkgewoJCSAgICAgICAgICAgICAgICBwYWRkaW5nV29yZHMucHVzaChwYWRkaW5nV29yZCk7CgkJICAgICAgICAgICAgfQoJCSAgICAgICAgICAgIHZhciBwYWRkaW5nID0gV29yZEFycmF5LmNyZWF0ZShwYWRkaW5nV29yZHMsIG5QYWRkaW5nQnl0ZXMpOwoKCQkgICAgICAgICAgICAvLyBBZGQgcGFkZGluZwoJCSAgICAgICAgICAgIGRhdGEuY29uY2F0KHBhZGRpbmcpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIFVucGFkcyBkYXRhIHRoYXQgaGFkIGJlZW4gcGFkZGVkIHVzaW5nIHRoZSBhbGdvcml0aG0gZGVmaW5lZCBpbiBQS0NTICM1LzcuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGRhdGEgVGhlIGRhdGEgdG8gdW5wYWQuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHN0YXRpYwoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIENyeXB0b0pTLnBhZC5Qa2NzNy51bnBhZCh3b3JkQXJyYXkpOwoJCSAgICAgICAgICovCgkJICAgICAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHsKCQkgICAgICAgICAgICAvLyBHZXQgbnVtYmVyIG9mIHBhZGRpbmcgYnl0ZXMgZnJvbSBsYXN0IGJ5dGUKCQkgICAgICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGRhdGEud29yZHNbKGRhdGEuc2lnQnl0ZXMgLSAxKSA+Pj4gMl0gJiAweGZmOwoKCQkgICAgICAgICAgICAvLyBSZW1vdmUgcGFkZGluZwoJCSAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gblBhZGRpbmdCeXRlczsKCQkgICAgICAgIH0KCQkgICAgfTsKCgkJICAgIC8qKgoJCSAgICAgKiBBYnN0cmFjdCBiYXNlIGJsb2NrIGNpcGhlciB0ZW1wbGF0ZS4KCQkgICAgICoKCQkgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgbnVtYmVyIG9mIDMyLWJpdCB3b3JkcyB0aGlzIGNpcGhlciBvcGVyYXRlcyBvbi4gRGVmYXVsdDogNCAoMTI4IGJpdHMpCgkJICAgICAqLwoJCSAgICB2YXIgQmxvY2tDaXBoZXIgPSBDX2xpYi5CbG9ja0NpcGhlciA9IENpcGhlci5leHRlbmQoewoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHByb3BlcnR5IHtNb2RlfSBtb2RlIFRoZSBibG9jayBtb2RlIHRvIHVzZS4gRGVmYXVsdDogQ0JDCgkJICAgICAgICAgKiBAcHJvcGVydHkge1BhZGRpbmd9IHBhZGRpbmcgVGhlIHBhZGRpbmcgc3RyYXRlZ3kgdG8gdXNlLiBEZWZhdWx0OiBQa2NzNwoJCSAgICAgICAgICovCgkJICAgICAgICBjZmc6IENpcGhlci5jZmcuZXh0ZW5kKHsKCQkgICAgICAgICAgICBtb2RlOiBDQkMsCgkJICAgICAgICAgICAgcGFkZGluZzogUGtjczcKCQkgICAgICAgIH0pLAoKCQkgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7CgkJICAgICAgICAgICAgLy8gUmVzZXQgY2lwaGVyCgkJICAgICAgICAgICAgQ2lwaGVyLnJlc2V0LmNhbGwodGhpcyk7CgoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgIHZhciBjZmcgPSB0aGlzLmNmZzsKCQkgICAgICAgICAgICB2YXIgaXYgPSBjZmcuaXY7CgkJICAgICAgICAgICAgdmFyIG1vZGUgPSBjZmcubW9kZTsKCgkJICAgICAgICAgICAgLy8gUmVzZXQgYmxvY2sgbW9kZQoJCSAgICAgICAgICAgIGlmICh0aGlzLl94Zm9ybU1vZGUgPT0gdGhpcy5fRU5DX1hGT1JNX01PREUpIHsKCQkgICAgICAgICAgICAgICAgdmFyIG1vZGVDcmVhdG9yID0gbW9kZS5jcmVhdGVFbmNyeXB0b3I7CgkJICAgICAgICAgICAgfSBlbHNlIC8qIGlmICh0aGlzLl94Zm9ybU1vZGUgPT0gdGhpcy5fREVDX1hGT1JNX01PREUpICovIHsKCQkgICAgICAgICAgICAgICAgdmFyIG1vZGVDcmVhdG9yID0gbW9kZS5jcmVhdGVEZWNyeXB0b3I7CgkJICAgICAgICAgICAgICAgIC8vIEtlZXAgYXQgbGVhc3Qgb25lIGJsb2NrIGluIHRoZSBidWZmZXIgZm9yIHVucGFkZGluZwoJCSAgICAgICAgICAgICAgICB0aGlzLl9taW5CdWZmZXJTaXplID0gMTsKCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIGlmICh0aGlzLl9tb2RlICYmIHRoaXMuX21vZGUuX19jcmVhdG9yID09IG1vZGVDcmVhdG9yKSB7CgkJICAgICAgICAgICAgICAgIHRoaXMuX21vZGUuaW5pdCh0aGlzLCBpdiAmJiBpdi53b3Jkcyk7CgkJICAgICAgICAgICAgfSBlbHNlIHsKCQkgICAgICAgICAgICAgICAgdGhpcy5fbW9kZSA9IG1vZGVDcmVhdG9yLmNhbGwobW9kZSwgdGhpcywgaXYgJiYgaXYud29yZHMpOwoJCSAgICAgICAgICAgICAgICB0aGlzLl9tb2RlLl9fY3JlYXRvciA9IG1vZGVDcmVhdG9yOwoJCSAgICAgICAgICAgIH0KCQkgICAgICAgIH0sCgoJCSAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkgewoJCSAgICAgICAgICAgIHRoaXMuX21vZGUucHJvY2Vzc0Jsb2NrKHdvcmRzLCBvZmZzZXQpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0CgkJICAgICAgICAgICAgdmFyIHBhZGRpbmcgPSB0aGlzLmNmZy5wYWRkaW5nOwoKCQkgICAgICAgICAgICAvLyBGaW5hbGl6ZQoJCSAgICAgICAgICAgIGlmICh0aGlzLl94Zm9ybU1vZGUgPT0gdGhpcy5fRU5DX1hGT1JNX01PREUpIHsKCQkgICAgICAgICAgICAgICAgLy8gUGFkIGRhdGEKCQkgICAgICAgICAgICAgICAgcGFkZGluZy5wYWQodGhpcy5fZGF0YSwgdGhpcy5ibG9ja1NpemUpOwoKCQkgICAgICAgICAgICAgICAgLy8gUHJvY2VzcyBmaW5hbCBibG9ja3MKCQkgICAgICAgICAgICAgICAgdmFyIGZpbmFsUHJvY2Vzc2VkQmxvY2tzID0gdGhpcy5fcHJvY2VzcyghISdmbHVzaCcpOwoJCSAgICAgICAgICAgIH0gZWxzZSAvKiBpZiAodGhpcy5feGZvcm1Nb2RlID09IHRoaXMuX0RFQ19YRk9STV9NT0RFKSAqLyB7CgkJICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgZmluYWwgYmxvY2tzCgkJICAgICAgICAgICAgICAgIHZhciBmaW5hbFByb2Nlc3NlZEJsb2NrcyA9IHRoaXMuX3Byb2Nlc3MoISEnZmx1c2gnKTsKCgkJICAgICAgICAgICAgICAgIC8vIFVucGFkIGRhdGEKCQkgICAgICAgICAgICAgICAgcGFkZGluZy51bnBhZChmaW5hbFByb2Nlc3NlZEJsb2Nrcyk7CgkJICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICByZXR1cm4gZmluYWxQcm9jZXNzZWRCbG9ja3M7CgkJICAgICAgICB9LAoKCQkgICAgICAgIGJsb2NrU2l6ZTogMTI4LzMyCgkJICAgIH0pOwoKCQkgICAgLyoqCgkJICAgICAqIEEgY29sbGVjdGlvbiBvZiBjaXBoZXIgcGFyYW1ldGVycy4KCQkgICAgICoKCQkgICAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IGNpcGhlcnRleHQgVGhlIHJhdyBjaXBoZXJ0ZXh0LgoJCSAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkgdG8gdGhpcyBjaXBoZXJ0ZXh0LgoJCSAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gaXYgVGhlIElWIHVzZWQgaW4gdGhlIGNpcGhlcmluZyBvcGVyYXRpb24uCgkJICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBzYWx0IFRoZSBzYWx0IHVzZWQgd2l0aCBhIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uLgoJCSAgICAgKiBAcHJvcGVydHkge0NpcGhlcn0gYWxnb3JpdGhtIFRoZSBjaXBoZXIgYWxnb3JpdGhtLgoJCSAgICAgKiBAcHJvcGVydHkge01vZGV9IG1vZGUgVGhlIGJsb2NrIG1vZGUgdXNlZCBpbiB0aGUgY2lwaGVyaW5nIG9wZXJhdGlvbi4KCQkgICAgICogQHByb3BlcnR5IHtQYWRkaW5nfSBwYWRkaW5nIFRoZSBwYWRkaW5nIHNjaGVtZSB1c2VkIGluIHRoZSBjaXBoZXJpbmcgb3BlcmF0aW9uLgoJCSAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBibG9jayBzaXplIG9mIHRoZSBjaXBoZXIuCgkJICAgICAqIEBwcm9wZXJ0eSB7Rm9ybWF0fSBmb3JtYXR0ZXIgVGhlIGRlZmF1bHQgZm9ybWF0dGluZyBzdHJhdGVneSB0byBjb252ZXJ0IHRoaXMgY2lwaGVyIHBhcmFtcyBvYmplY3QgdG8gYSBzdHJpbmcuCgkJICAgICAqLwoJCSAgICB2YXIgQ2lwaGVyUGFyYW1zID0gQ19saWIuQ2lwaGVyUGFyYW1zID0gQmFzZS5leHRlbmQoewoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgY2lwaGVyIHBhcmFtcyBvYmplY3QuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNpcGhlclBhcmFtcyBBbiBvYmplY3Qgd2l0aCBhbnkgb2YgdGhlIHBvc3NpYmxlIGNpcGhlciBwYXJhbWV0ZXJzLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHZhciBjaXBoZXJQYXJhbXMgPSBDcnlwdG9KUy5saWIuQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7CgkJICAgICAgICAgKiAgICAgICAgIGNpcGhlcnRleHQ6IGNpcGhlcnRleHRXb3JkQXJyYXksCgkJICAgICAgICAgKiAgICAgICAgIGtleToga2V5V29yZEFycmF5LAoJCSAgICAgICAgICogICAgICAgICBpdjogaXZXb3JkQXJyYXksCgkJICAgICAgICAgKiAgICAgICAgIHNhbHQ6IHNhbHRXb3JkQXJyYXksCgkJICAgICAgICAgKiAgICAgICAgIGFsZ29yaXRobTogQ3J5cHRvSlMuYWxnby5BRVMsCgkJICAgICAgICAgKiAgICAgICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuQ0JDLAoJCSAgICAgICAgICogICAgICAgICBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUEtDUzcsCgkJICAgICAgICAgKiAgICAgICAgIGJsb2NrU2l6ZTogNCwKCQkgICAgICAgICAqICAgICAgICAgZm9ybWF0dGVyOiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTAoJCSAgICAgICAgICogICAgIH0pOwoJCSAgICAgICAgICovCgkJICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2lwaGVyUGFyYW1zKSB7CgkJICAgICAgICAgICAgdGhpcy5taXhJbihjaXBoZXJQYXJhbXMpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENvbnZlcnRzIHRoaXMgY2lwaGVyIHBhcmFtcyBvYmplY3QgdG8gYSBzdHJpbmcuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtGb3JtYXR9IGZvcm1hdHRlciAoT3B0aW9uYWwpIFRoZSBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIHVzZS4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmdpZmllZCBjaXBoZXIgcGFyYW1zLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEB0aHJvd3MgRXJyb3IgSWYgbmVpdGhlciB0aGUgZm9ybWF0dGVyIG5vciB0aGUgZGVmYXVsdCBmb3JtYXR0ZXIgaXMgc2V0LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSBjaXBoZXJQYXJhbXMgKyAnJzsKCQkgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gY2lwaGVyUGFyYW1zLnRvU3RyaW5nKCk7CgkJICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IGNpcGhlclBhcmFtcy50b1N0cmluZyhDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoZm9ybWF0dGVyKSB7CgkJICAgICAgICAgICAgcmV0dXJuIChmb3JtYXR0ZXIgfHwgdGhpcy5mb3JtYXR0ZXIpLnN0cmluZ2lmeSh0aGlzKTsKCQkgICAgICAgIH0KCQkgICAgfSk7CgoJCSAgICAvKioKCQkgICAgICogRm9ybWF0IG5hbWVzcGFjZS4KCQkgICAgICovCgkJICAgIHZhciBDX2Zvcm1hdCA9IEMuZm9ybWF0ID0ge307CgoJCSAgICAvKioKCQkgICAgICogT3BlblNTTCBmb3JtYXR0aW5nIHN0cmF0ZWd5LgoJCSAgICAgKi8KCQkgICAgdmFyIE9wZW5TU0xGb3JtYXR0ZXIgPSBDX2Zvcm1hdC5PcGVuU1NMID0gewoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBDb252ZXJ0cyBhIGNpcGhlciBwYXJhbXMgb2JqZWN0IHRvIGFuIE9wZW5TU0wtY29tcGF0aWJsZSBzdHJpbmcuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN9IGNpcGhlclBhcmFtcyBUaGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgT3BlblNTTC1jb21wYXRpYmxlIHN0cmluZy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAc3RhdGljCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIG9wZW5TU0xTdHJpbmcgPSBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTC5zdHJpbmdpZnkoY2lwaGVyUGFyYW1zKTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAoY2lwaGVyUGFyYW1zKSB7CgkJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBjaXBoZXJQYXJhbXMuY2lwaGVydGV4dDsKCQkgICAgICAgICAgICB2YXIgc2FsdCA9IGNpcGhlclBhcmFtcy5zYWx0OwoKCQkgICAgICAgICAgICAvLyBGb3JtYXQKCQkgICAgICAgICAgICBpZiAoc2FsdCkgewoJCSAgICAgICAgICAgICAgICB2YXIgd29yZEFycmF5ID0gV29yZEFycmF5LmNyZWF0ZShbMHg1MzYxNmM3NCwgMHg2NTY0NWY1Zl0pLmNvbmNhdChzYWx0KS5jb25jYXQoY2lwaGVydGV4dCk7CgkJICAgICAgICAgICAgfSBlbHNlIHsKCQkgICAgICAgICAgICAgICAgdmFyIHdvcmRBcnJheSA9IGNpcGhlcnRleHQ7CgkJICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICByZXR1cm4gd29yZEFycmF5LnRvU3RyaW5nKEJhc2U2NCk7CgkJICAgICAgICB9LAoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogQ29udmVydHMgYW4gT3BlblNTTC1jb21wYXRpYmxlIHN0cmluZyB0byBhIGNpcGhlciBwYXJhbXMgb2JqZWN0LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcGVuU1NMU3RyIFRoZSBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gVGhlIGNpcGhlciBwYXJhbXMgb2JqZWN0LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBzdGF0aWMKCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgY2lwaGVyUGFyYW1zID0gQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wucGFyc2Uob3BlblNTTFN0cmluZyk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAob3BlblNTTFN0cikgewoJCSAgICAgICAgICAgIC8vIFBhcnNlIGJhc2U2NAoJCSAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gQmFzZTY0LnBhcnNlKG9wZW5TU0xTdHIpOwoKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dAoJCSAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0V29yZHMgPSBjaXBoZXJ0ZXh0LndvcmRzOwoKCQkgICAgICAgICAgICAvLyBUZXN0IGZvciBzYWx0CgkJICAgICAgICAgICAgaWYgKGNpcGhlcnRleHRXb3Jkc1swXSA9PSAweDUzNjE2Yzc0ICYmIGNpcGhlcnRleHRXb3Jkc1sxXSA9PSAweDY1NjQ1ZjVmKSB7CgkJICAgICAgICAgICAgICAgIC8vIEV4dHJhY3Qgc2FsdAoJCSAgICAgICAgICAgICAgICB2YXIgc2FsdCA9IFdvcmRBcnJheS5jcmVhdGUoY2lwaGVydGV4dFdvcmRzLnNsaWNlKDIsIDQpKTsKCgkJICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBzYWx0IGZyb20gY2lwaGVydGV4dAoJCSAgICAgICAgICAgICAgICBjaXBoZXJ0ZXh0V29yZHMuc3BsaWNlKDAsIDQpOwoJCSAgICAgICAgICAgICAgICBjaXBoZXJ0ZXh0LnNpZ0J5dGVzIC09IDE2OwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgcmV0dXJuIENpcGhlclBhcmFtcy5jcmVhdGUoeyBjaXBoZXJ0ZXh0OiBjaXBoZXJ0ZXh0LCBzYWx0OiBzYWx0IH0pOwoJCSAgICAgICAgfQoJCSAgICB9OwoKCQkgICAgLyoqCgkJICAgICAqIEEgY2lwaGVyIHdyYXBwZXIgdGhhdCByZXR1cm5zIGNpcGhlcnRleHQgYXMgYSBzZXJpYWxpemFibGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuCgkJICAgICAqLwoJCSAgICB2YXIgU2VyaWFsaXphYmxlQ2lwaGVyID0gQ19saWIuU2VyaWFsaXphYmxlQ2lwaGVyID0gQmFzZS5leHRlbmQoewoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHByb3BlcnR5IHtGb3JtYXR0ZXJ9IGZvcm1hdCBUaGUgZm9ybWF0dGluZyBzdHJhdGVneSB0byBjb252ZXJ0IGNpcGhlciBwYXJhbSBvYmplY3RzIHRvIGFuZCBmcm9tIGEgc3RyaW5nLiBEZWZhdWx0OiBPcGVuU1NMCgkJICAgICAgICAgKi8KCQkgICAgICAgIGNmZzogQmFzZS5leHRlbmQoewoJCSAgICAgICAgICAgIGZvcm1hdDogT3BlblNTTEZvcm1hdHRlcgoJCSAgICAgICAgfSksCgoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBFbmNyeXB0cyBhIG1lc3NhZ2UuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIGFsZ29yaXRobSB0byB1c2UuCgkJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gZW5jcnlwdC4KCQkgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS4KCQkgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBBIGNpcGhlciBwYXJhbXMgb2JqZWN0LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBzdGF0aWMKCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwga2V5KTsKCQkgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwga2V5LCB7IGl2OiBpdiB9KTsKCQkgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwga2V5LCB7IGl2OiBpdiwgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgZW5jcnlwdDogZnVuY3Rpb24gKGNpcGhlciwgbWVzc2FnZSwga2V5LCBjZmcpIHsKCQkgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHMKCQkgICAgICAgICAgICBjZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTsKCgkJICAgICAgICAgICAgLy8gRW5jcnlwdAoJCSAgICAgICAgICAgIHZhciBlbmNyeXB0b3IgPSBjaXBoZXIuY3JlYXRlRW5jcnlwdG9yKGtleSwgY2ZnKTsKCQkgICAgICAgICAgICB2YXIgY2lwaGVydGV4dCA9IGVuY3J5cHRvci5maW5hbGl6ZShtZXNzYWdlKTsKCgkJICAgICAgICAgICAgLy8gU2hvcnRjdXQKCQkgICAgICAgICAgICB2YXIgY2lwaGVyQ2ZnID0gZW5jcnlwdG9yLmNmZzsKCgkJICAgICAgICAgICAgLy8gQ3JlYXRlIGFuZCByZXR1cm4gc2VyaWFsaXphYmxlIGNpcGhlciBwYXJhbXMKCQkgICAgICAgICAgICByZXR1cm4gQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7CgkJICAgICAgICAgICAgICAgIGNpcGhlcnRleHQ6IGNpcGhlcnRleHQsCgkJICAgICAgICAgICAgICAgIGtleToga2V5LAoJCSAgICAgICAgICAgICAgICBpdjogY2lwaGVyQ2ZnLml2LAoJCSAgICAgICAgICAgICAgICBhbGdvcml0aG06IGNpcGhlciwKCQkgICAgICAgICAgICAgICAgbW9kZTogY2lwaGVyQ2ZnLm1vZGUsCgkJICAgICAgICAgICAgICAgIHBhZGRpbmc6IGNpcGhlckNmZy5wYWRkaW5nLAoJCSAgICAgICAgICAgICAgICBibG9ja1NpemU6IGNpcGhlci5ibG9ja1NpemUsCgkJICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogY2ZnLmZvcm1hdAoJCSAgICAgICAgICAgIH0pOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIERlY3J5cHRzIHNlcmlhbGl6ZWQgY2lwaGVydGV4dC4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgYWxnb3JpdGhtIHRvIHVzZS4KCQkgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyUGFyYW1zfHN0cmluZ30gY2lwaGVydGV4dCBUaGUgY2lwaGVydGV4dCB0byBkZWNyeXB0LgoJCSAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LgoJCSAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBwbGFpbnRleHQuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHN0YXRpYwoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHZhciBwbGFpbnRleHQgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLmRlY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIGZvcm1hdHRlZENpcGhlcnRleHQsIGtleSwgeyBpdjogaXYsIGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7CgkJICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgY2lwaGVydGV4dFBhcmFtcywga2V5LCB7IGl2OiBpdiwgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgZGVjcnlwdDogZnVuY3Rpb24gKGNpcGhlciwgY2lwaGVydGV4dCwga2V5LCBjZmcpIHsKCQkgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHMKCQkgICAgICAgICAgICBjZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTsKCgkJICAgICAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgdG8gQ2lwaGVyUGFyYW1zCgkJICAgICAgICAgICAgY2lwaGVydGV4dCA9IHRoaXMuX3BhcnNlKGNpcGhlcnRleHQsIGNmZy5mb3JtYXQpOwoKCQkgICAgICAgICAgICAvLyBEZWNyeXB0CgkJICAgICAgICAgICAgdmFyIHBsYWludGV4dCA9IGNpcGhlci5jcmVhdGVEZWNyeXB0b3Ioa2V5LCBjZmcpLmZpbmFsaXplKGNpcGhlcnRleHQuY2lwaGVydGV4dCk7CgoJCSAgICAgICAgICAgIHJldHVybiBwbGFpbnRleHQ7CgkJICAgICAgICB9LAoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogQ29udmVydHMgc2VyaWFsaXplZCBjaXBoZXJ0ZXh0IHRvIENpcGhlclBhcmFtcywKCQkgICAgICAgICAqIGVsc2UgYXNzdW1lZCBDaXBoZXJQYXJhbXMgYWxyZWFkeSBhbmQgcmV0dXJucyBjaXBoZXJ0ZXh0IHVuY2hhbmdlZC4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc3xzdHJpbmd9IGNpcGhlcnRleHQgVGhlIGNpcGhlcnRleHQuCgkJICAgICAgICAgKiBAcGFyYW0ge0Zvcm1hdHRlcn0gZm9ybWF0IFRoZSBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIHVzZSB0byBwYXJzZSBzZXJpYWxpemVkIGNpcGhlcnRleHQuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBUaGUgdW5zZXJpYWxpemVkIGNpcGhlcnRleHQuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHN0YXRpYwoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBleGFtcGxlCgkJICAgICAgICAgKgoJCSAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5fcGFyc2UoY2lwaGVydGV4dFN0cmluZ09yUGFyYW1zLCBmb3JtYXQpOwoJCSAgICAgICAgICovCgkJICAgICAgICBfcGFyc2U6IGZ1bmN0aW9uIChjaXBoZXJ0ZXh0LCBmb3JtYXQpIHsKCQkgICAgICAgICAgICBpZiAodHlwZW9mIGNpcGhlcnRleHQgPT0gJ3N0cmluZycpIHsKCQkgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdC5wYXJzZShjaXBoZXJ0ZXh0LCB0aGlzKTsKCQkgICAgICAgICAgICB9IGVsc2UgewoJCSAgICAgICAgICAgICAgICByZXR1cm4gY2lwaGVydGV4dDsKCQkgICAgICAgICAgICB9CgkJICAgICAgICB9CgkJICAgIH0pOwoKCQkgICAgLyoqCgkJICAgICAqIEtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uIG5hbWVzcGFjZS4KCQkgICAgICovCgkJICAgIHZhciBDX2tkZiA9IEMua2RmID0ge307CgoJCSAgICAvKioKCQkgICAgICogT3BlblNTTCBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbi4KCQkgICAgICovCgkJICAgIHZhciBPcGVuU1NMS2RmID0gQ19rZGYuT3BlblNTTCA9IHsKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogRGVyaXZlcyBhIGtleSBhbmQgSVYgZnJvbSBhIHBhc3N3b3JkLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQgdG8gZGVyaXZlIGZyb20uCgkJICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0ga2V5U2l6ZSBUaGUgc2l6ZSBpbiB3b3JkcyBvZiB0aGUga2V5IHRvIGdlbmVyYXRlLgoJCSAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGl2U2l6ZSBUaGUgc2l6ZSBpbiB3b3JkcyBvZiB0aGUgSVYgdG8gZ2VuZXJhdGUuCgkJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgKE9wdGlvbmFsKSBBIDY0LWJpdCBzYWx0IHRvIHVzZS4gSWYgb21pdHRlZCwgYSBzYWx0IHdpbGwgYmUgZ2VuZXJhdGVkIHJhbmRvbWx5LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gQSBjaXBoZXIgcGFyYW1zIG9iamVjdCB3aXRoIHRoZSBrZXksIElWLCBhbmQgc2FsdC4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAc3RhdGljCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIGRlcml2ZWRQYXJhbXMgPSBDcnlwdG9KUy5rZGYuT3BlblNTTC5leGVjdXRlKCdQYXNzd29yZCcsIDI1Ni8zMiwgMTI4LzMyKTsKCQkgICAgICAgICAqICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IENyeXB0b0pTLmtkZi5PcGVuU1NMLmV4ZWN1dGUoJ1Bhc3N3b3JkJywgMjU2LzMyLCAxMjgvMzIsICdzYWx0c2FsdCcpOwoJCSAgICAgICAgICovCgkJICAgICAgICBleGVjdXRlOiBmdW5jdGlvbiAocGFzc3dvcmQsIGtleVNpemUsIGl2U2l6ZSwgc2FsdCkgewoJCSAgICAgICAgICAgIC8vIEdlbmVyYXRlIHJhbmRvbSBzYWx0CgkJICAgICAgICAgICAgaWYgKCFzYWx0KSB7CgkJICAgICAgICAgICAgICAgIHNhbHQgPSBXb3JkQXJyYXkucmFuZG9tKDY0LzgpOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgLy8gRGVyaXZlIGtleSBhbmQgSVYKCQkgICAgICAgICAgICB2YXIga2V5ID0gRXZwS0RGLmNyZWF0ZSh7IGtleVNpemU6IGtleVNpemUgKyBpdlNpemUgfSkuY29tcHV0ZShwYXNzd29yZCwgc2FsdCk7CgoJCSAgICAgICAgICAgIC8vIFNlcGFyYXRlIGtleSBhbmQgSVYKCQkgICAgICAgICAgICB2YXIgaXYgPSBXb3JkQXJyYXkuY3JlYXRlKGtleS53b3Jkcy5zbGljZShrZXlTaXplKSwgaXZTaXplICogNCk7CgkJICAgICAgICAgICAga2V5LnNpZ0J5dGVzID0ga2V5U2l6ZSAqIDQ7CgoJCSAgICAgICAgICAgIC8vIFJldHVybiBwYXJhbXMKCQkgICAgICAgICAgICByZXR1cm4gQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7IGtleToga2V5LCBpdjogaXYsIHNhbHQ6IHNhbHQgfSk7CgkJICAgICAgICB9CgkJICAgIH07CgoJCSAgICAvKioKCQkgICAgICogQSBzZXJpYWxpemFibGUgY2lwaGVyIHdyYXBwZXIgdGhhdCBkZXJpdmVzIHRoZSBrZXkgZnJvbSBhIHBhc3N3b3JkLAoJCSAgICAgKiBhbmQgcmV0dXJucyBjaXBoZXJ0ZXh0IGFzIGEgc2VyaWFsaXphYmxlIGNpcGhlciBwYXJhbXMgb2JqZWN0LgoJCSAgICAgKi8KCQkgICAgdmFyIFBhc3N3b3JkQmFzZWRDaXBoZXIgPSBDX2xpYi5QYXNzd29yZEJhc2VkQ2lwaGVyID0gU2VyaWFsaXphYmxlQ2lwaGVyLmV4dGVuZCh7CgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcHJvcGVydHkge0tERn0ga2RmIFRoZSBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbiB0byB1c2UgdG8gZ2VuZXJhdGUgYSBrZXkgYW5kIElWIGZyb20gYSBwYXNzd29yZC4gRGVmYXVsdDogT3BlblNTTAoJCSAgICAgICAgICovCgkJICAgICAgICBjZmc6IFNlcmlhbGl6YWJsZUNpcGhlci5jZmcuZXh0ZW5kKHsKCQkgICAgICAgICAgICBrZGY6IE9wZW5TU0xLZGYKCQkgICAgICAgIH0pLAoKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogRW5jcnlwdHMgYSBtZXNzYWdlIHVzaW5nIGEgcGFzc3dvcmQuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIGFsZ29yaXRobSB0byB1c2UuCgkJICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gZW5jcnlwdC4KCQkgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuCgkJICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gQSBjaXBoZXIgcGFyYW1zIG9iamVjdC4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAc3RhdGljCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuUGFzc3dvcmRCYXNlZENpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCAncGFzc3dvcmQnKTsKCQkgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5QYXNzd29yZEJhc2VkQ2lwaGVyLmVuY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIG1lc3NhZ2UsICdwYXNzd29yZCcsIHsgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTsKCQkgICAgICAgICAqLwoJCSAgICAgICAgZW5jcnlwdDogZnVuY3Rpb24gKGNpcGhlciwgbWVzc2FnZSwgcGFzc3dvcmQsIGNmZykgewoJCSAgICAgICAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0cwoJCSAgICAgICAgICAgIGNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpOwoKCQkgICAgICAgICAgICAvLyBEZXJpdmUga2V5IGFuZCBvdGhlciBwYXJhbXMKCQkgICAgICAgICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IGNmZy5rZGYuZXhlY3V0ZShwYXNzd29yZCwgY2lwaGVyLmtleVNpemUsIGNpcGhlci5pdlNpemUpOwoKCQkgICAgICAgICAgICAvLyBBZGQgSVYgdG8gY29uZmlnCgkJICAgICAgICAgICAgY2ZnLml2ID0gZGVyaXZlZFBhcmFtcy5pdjsKCgkJICAgICAgICAgICAgLy8gRW5jcnlwdAoJCSAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gU2VyaWFsaXphYmxlQ2lwaGVyLmVuY3J5cHQuY2FsbCh0aGlzLCBjaXBoZXIsIG1lc3NhZ2UsIGRlcml2ZWRQYXJhbXMua2V5LCBjZmcpOwoKCQkgICAgICAgICAgICAvLyBNaXggaW4gZGVyaXZlZCBwYXJhbXMKCQkgICAgICAgICAgICBjaXBoZXJ0ZXh0Lm1peEluKGRlcml2ZWRQYXJhbXMpOwoKCQkgICAgICAgICAgICByZXR1cm4gY2lwaGVydGV4dDsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBEZWNyeXB0cyBzZXJpYWxpemVkIGNpcGhlcnRleHQgdXNpbmcgYSBwYXNzd29yZC4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgYWxnb3JpdGhtIHRvIHVzZS4KCQkgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyUGFyYW1zfHN0cmluZ30gY2lwaGVydGV4dCBUaGUgY2lwaGVydGV4dCB0byBkZWNyeXB0LgoJCSAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC4KCQkgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcGxhaW50ZXh0LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBzdGF0aWMKCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgcGxhaW50ZXh0ID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgZm9ybWF0dGVkQ2lwaGVydGV4dCwgJ3Bhc3N3b3JkJywgeyBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pOwoJCSAgICAgICAgICogICAgIHZhciBwbGFpbnRleHQgPSBDcnlwdG9KUy5saWIuUGFzc3dvcmRCYXNlZENpcGhlci5kZWNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBjaXBoZXJ0ZXh0UGFyYW1zLCAncGFzc3dvcmQnLCB7IGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIGRlY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXIsIGNpcGhlcnRleHQsIHBhc3N3b3JkLCBjZmcpIHsKCQkgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHMKCQkgICAgICAgICAgICBjZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTsKCgkJICAgICAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgdG8gQ2lwaGVyUGFyYW1zCgkJICAgICAgICAgICAgY2lwaGVydGV4dCA9IHRoaXMuX3BhcnNlKGNpcGhlcnRleHQsIGNmZy5mb3JtYXQpOwoKCQkgICAgICAgICAgICAvLyBEZXJpdmUga2V5IGFuZCBvdGhlciBwYXJhbXMKCQkgICAgICAgICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IGNmZy5rZGYuZXhlY3V0ZShwYXNzd29yZCwgY2lwaGVyLmtleVNpemUsIGNpcGhlci5pdlNpemUsIGNpcGhlcnRleHQuc2FsdCk7CgoJCSAgICAgICAgICAgIC8vIEFkZCBJViB0byBjb25maWcKCQkgICAgICAgICAgICBjZmcuaXYgPSBkZXJpdmVkUGFyYW1zLml2OwoKCQkgICAgICAgICAgICAvLyBEZWNyeXB0CgkJICAgICAgICAgICAgdmFyIHBsYWludGV4dCA9IFNlcmlhbGl6YWJsZUNpcGhlci5kZWNyeXB0LmNhbGwodGhpcywgY2lwaGVyLCBjaXBoZXJ0ZXh0LCBkZXJpdmVkUGFyYW1zLmtleSwgY2ZnKTsKCgkJICAgICAgICAgICAgcmV0dXJuIHBsYWludGV4dDsKCQkgICAgICAgIH0KCQkgICAgfSk7CgkJfSgpKTsKCgoJfSkpOwoKLyoqKi8gfSksCgovKioqLyAyMzA6Ci8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgk7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewoJCWlmICh0cnVlKSB7CgkJCS8vIENvbW1vbkpTCgkJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoX193ZWJwYWNrX3JlcXVpcmVfXygyMTMpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyOSkpOwoJCX0KCQllbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQpIHsKCQkJLy8gQU1ECgkJCWRlZmluZShbIi4vY29yZSIsICIuL2NpcGhlci1jb3JlIl0sIGZhY3RvcnkpOwoJCX0KCQllbHNlIHsKCQkJLy8gR2xvYmFsIChicm93c2VyKQoJCQlmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpOwoJCX0KCX0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgoJCS8qKgoJCSAqIENpcGhlciBGZWVkYmFjayBibG9jayBtb2RlLgoJCSAqLwoJCUNyeXB0b0pTLm1vZGUuQ0ZCID0gKGZ1bmN0aW9uICgpIHsKCQkgICAgdmFyIENGQiA9IENyeXB0b0pTLmxpYi5CbG9ja0NpcGhlck1vZGUuZXh0ZW5kKCk7CgoJCSAgICBDRkIuRW5jcnlwdG9yID0gQ0ZCLmV4dGVuZCh7CgkJICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7CgkJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlcjsKCQkgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTsKCgkJICAgICAgICAgICAgZ2VuZXJhdGVLZXlzdHJlYW1BbmRFbmNyeXB0LmNhbGwodGhpcywgd29yZHMsIG9mZnNldCwgYmxvY2tTaXplLCBjaXBoZXIpOwoKCQkgICAgICAgICAgICAvLyBSZW1lbWJlciB0aGlzIGJsb2NrIHRvIHVzZSB3aXRoIG5leHQgYmxvY2sKCQkgICAgICAgICAgICB0aGlzLl9wcmV2QmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSk7CgkJICAgICAgICB9CgkJICAgIH0pOwoKCQkgICAgQ0ZCLkRlY3J5cHRvciA9IENGQi5leHRlbmQoewoJCSAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXI7CgkJICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7CgoJCSAgICAgICAgICAgIC8vIFJlbWVtYmVyIHRoaXMgYmxvY2sgdG8gdXNlIHdpdGggbmV4dCBibG9jawoJCSAgICAgICAgICAgIHZhciB0aGlzQmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSk7CgoJCSAgICAgICAgICAgIGdlbmVyYXRlS2V5c3RyZWFtQW5kRW5jcnlwdC5jYWxsKHRoaXMsIHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSwgY2lwaGVyKTsKCgkJICAgICAgICAgICAgLy8gVGhpcyBibG9jayBiZWNvbWVzIHRoZSBwcmV2aW91cyBibG9jawoJCSAgICAgICAgICAgIHRoaXMuX3ByZXZCbG9jayA9IHRoaXNCbG9jazsKCQkgICAgICAgIH0KCQkgICAgfSk7CgoJCSAgICBmdW5jdGlvbiBnZW5lcmF0ZUtleXN0cmVhbUFuZEVuY3J5cHQod29yZHMsIG9mZnNldCwgYmxvY2tTaXplLCBjaXBoZXIpIHsKCQkgICAgICAgIC8vIFNob3J0Y3V0CgkJICAgICAgICB2YXIgaXYgPSB0aGlzLl9pdjsKCgkJICAgICAgICAvLyBHZW5lcmF0ZSBrZXlzdHJlYW0KCQkgICAgICAgIGlmIChpdikgewoJCSAgICAgICAgICAgIHZhciBrZXlzdHJlYW0gPSBpdi5zbGljZSgwKTsKCgkJICAgICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2NrcwoJCSAgICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkOwoJCSAgICAgICAgfSBlbHNlIHsKCQkgICAgICAgICAgICB2YXIga2V5c3RyZWFtID0gdGhpcy5fcHJldkJsb2NrOwoJCSAgICAgICAgfQoJCSAgICAgICAgY2lwaGVyLmVuY3J5cHRCbG9jayhrZXlzdHJlYW0sIDApOwoKCQkgICAgICAgIC8vIEVuY3J5cHQKCQkgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHsKCQkgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBrZXlzdHJlYW1baV07CgkJICAgICAgICB9CgkJICAgIH0KCgkJICAgIHJldHVybiBDRkI7CgkJfSgpKTsKCgoJCXJldHVybiBDcnlwdG9KUy5tb2RlLkNGQjsKCgl9KSk7CgovKioqLyB9KSwKCi8qKiovIDIzMToKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCTsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CgkJaWYgKHRydWUpIHsKCQkJLy8gQ29tbW9uSlMKCQkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMyksIF9fd2VicGFja19yZXF1aXJlX18oMjI5KSk7CgkJfQoJCWVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewoJCQkvLyBBTUQKCQkJZGVmaW5lKFsiLi9jb3JlIiwgIi4vY2lwaGVyLWNvcmUiXSwgZmFjdG9yeSk7CgkJfQoJCWVsc2UgewoJCQkvLyBHbG9iYWwgKGJyb3dzZXIpCgkJCWZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7CgkJfQoJfSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCgkJLyoqCgkJICogQ291bnRlciBibG9jayBtb2RlLgoJCSAqLwoJCUNyeXB0b0pTLm1vZGUuQ1RSID0gKGZ1bmN0aW9uICgpIHsKCQkgICAgdmFyIENUUiA9IENyeXB0b0pTLmxpYi5CbG9ja0NpcGhlck1vZGUuZXh0ZW5kKCk7CgoJCSAgICB2YXIgRW5jcnlwdG9yID0gQ1RSLkVuY3J5cHRvciA9IENUUi5leHRlbmQoewoJCSAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXIKCQkgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTsKCQkgICAgICAgICAgICB2YXIgaXYgPSB0aGlzLl9pdjsKCQkgICAgICAgICAgICB2YXIgY291bnRlciA9IHRoaXMuX2NvdW50ZXI7CgoJCSAgICAgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbQoJCSAgICAgICAgICAgIGlmIChpdikgewoJCSAgICAgICAgICAgICAgICBjb3VudGVyID0gdGhpcy5fY291bnRlciA9IGl2LnNsaWNlKDApOwoKCQkgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2NrcwoJCSAgICAgICAgICAgICAgICB0aGlzLl9pdiA9IHVuZGVmaW5lZDsKCQkgICAgICAgICAgICB9CgkJICAgICAgICAgICAgdmFyIGtleXN0cmVhbSA9IGNvdW50ZXIuc2xpY2UoMCk7CgkJICAgICAgICAgICAgY2lwaGVyLmVuY3J5cHRCbG9jayhrZXlzdHJlYW0sIDApOwoKCQkgICAgICAgICAgICAvLyBJbmNyZW1lbnQgY291bnRlcgoJCSAgICAgICAgICAgIGNvdW50ZXJbYmxvY2tTaXplIC0gMV0gPSAoY291bnRlcltibG9ja1NpemUgLSAxXSArIDEpIHwgMAoKCQkgICAgICAgICAgICAvLyBFbmNyeXB0CgkJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja1NpemU7IGkrKykgewoJCSAgICAgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBrZXlzdHJlYW1baV07CgkJICAgICAgICAgICAgfQoJCSAgICAgICAgfQoJCSAgICB9KTsKCgkJICAgIENUUi5EZWNyeXB0b3IgPSBFbmNyeXB0b3I7CgoJCSAgICByZXR1cm4gQ1RSOwoJCX0oKSk7CgoKCQlyZXR1cm4gQ3J5cHRvSlMubW9kZS5DVFI7CgoJfSkpOwoKLyoqKi8gfSksCgovKioqLyAyMzI6Ci8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgk7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewoJCWlmICh0cnVlKSB7CgkJCS8vIENvbW1vbkpTCgkJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoX193ZWJwYWNrX3JlcXVpcmVfXygyMTMpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyOSkpOwoJCX0KCQllbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQpIHsKCQkJLy8gQU1ECgkJCWRlZmluZShbIi4vY29yZSIsICIuL2NpcGhlci1jb3JlIl0sIGZhY3RvcnkpOwoJCX0KCQllbHNlIHsKCQkJLy8gR2xvYmFsIChicm93c2VyKQoJCQlmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpOwoJCX0KCX0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgoJCS8qKiBAcHJlc2VydmUKCQkgKiBDb3VudGVyIGJsb2NrIG1vZGUgY29tcGF0aWJsZSB3aXRoICBEciBCcmlhbiBHbGFkbWFuIGZpbGVlbmMuYwoJCSAqIGRlcml2ZWQgZnJvbSBDcnlwdG9KUy5tb2RlLkNUUgoJCSAqIEphbiBIcnVieSBqaHJ1Ynkud2ViQGdtYWlsLmNvbQoJCSAqLwoJCUNyeXB0b0pTLm1vZGUuQ1RSR2xhZG1hbiA9IChmdW5jdGlvbiAoKSB7CgkJICAgIHZhciBDVFJHbGFkbWFuID0gQ3J5cHRvSlMubGliLkJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTsKCgkJCWZ1bmN0aW9uIGluY1dvcmQod29yZCkKCQkJewoJCQkJaWYgKCgod29yZCA+PiAyNCkgJiAweGZmKSA9PT0gMHhmZikgeyAvL292ZXJmbG93CgkJCQl2YXIgYjEgPSAod29yZCA+PiAxNikmMHhmZjsKCQkJCXZhciBiMiA9ICh3b3JkID4+IDgpJjB4ZmY7CgkJCQl2YXIgYjMgPSB3b3JkICYgMHhmZjsKCgkJCQlpZiAoYjEgPT09IDB4ZmYpIC8vIG92ZXJmbG93IGIxCgkJCQl7CgkJCQliMSA9IDA7CgkJCQlpZiAoYjIgPT09IDB4ZmYpCgkJCQl7CgkJCQkJYjIgPSAwOwoJCQkJCWlmIChiMyA9PT0gMHhmZikKCQkJCQl7CgkJCQkJCWIzID0gMDsKCQkJCQl9CgkJCQkJZWxzZQoJCQkJCXsKCQkJCQkJKytiMzsKCQkJCQl9CgkJCQl9CgkJCQllbHNlCgkJCQl7CgkJCQkJKytiMjsKCQkJCX0KCQkJCX0KCQkJCWVsc2UKCQkJCXsKCQkJCSsrYjE7CgkJCQl9CgoJCQkJd29yZCA9IDA7CgkJCQl3b3JkICs9IChiMSA8PCAxNik7CgkJCQl3b3JkICs9IChiMiA8PCA4KTsKCQkJCXdvcmQgKz0gYjM7CgkJCQl9CgkJCQllbHNlCgkJCQl7CgkJCQl3b3JkICs9ICgweDAxIDw8IDI0KTsKCQkJCX0KCQkJCXJldHVybiB3b3JkOwoJCQl9CgoJCQlmdW5jdGlvbiBpbmNDb3VudGVyKGNvdW50ZXIpCgkJCXsKCQkJCWlmICgoY291bnRlclswXSA9IGluY1dvcmQoY291bnRlclswXSkpID09PSAwKQoJCQkJewoJCQkJCS8vIGVuY3JfZGF0YSBpbiBmaWxlZW5jLmMgZnJvbSAgRHIgQnJpYW4gR2xhZG1hbidzIGNvdW50cyBvbmx5IHdpdGggRFdPUkQgaiA8IDgKCQkJCQljb3VudGVyWzFdID0gaW5jV29yZChjb3VudGVyWzFdKTsKCQkJCX0KCQkJCXJldHVybiBjb3VudGVyOwoJCQl9CgoJCSAgICB2YXIgRW5jcnlwdG9yID0gQ1RSR2xhZG1hbi5FbmNyeXB0b3IgPSBDVFJHbGFkbWFuLmV4dGVuZCh7CgkJICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7CgkJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlcgoJCSAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplOwoJCSAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuX2l2OwoJCSAgICAgICAgICAgIHZhciBjb3VudGVyID0gdGhpcy5fY291bnRlcjsKCgkJICAgICAgICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtCgkJICAgICAgICAgICAgaWYgKGl2KSB7CgkJICAgICAgICAgICAgICAgIGNvdW50ZXIgPSB0aGlzLl9jb3VudGVyID0gaXYuc2xpY2UoMCk7CgoJCSAgICAgICAgICAgICAgICAvLyBSZW1vdmUgSVYgZm9yIHN1YnNlcXVlbnQgYmxvY2tzCgkJICAgICAgICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkOwoJCSAgICAgICAgICAgIH0KCgkJCQkJaW5jQ291bnRlcihjb3VudGVyKTsKCgkJCQkJdmFyIGtleXN0cmVhbSA9IGNvdW50ZXIuc2xpY2UoMCk7CgkJICAgICAgICAgICAgY2lwaGVyLmVuY3J5cHRCbG9jayhrZXlzdHJlYW0sIDApOwoKCQkgICAgICAgICAgICAvLyBFbmNyeXB0CgkJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja1NpemU7IGkrKykgewoJCSAgICAgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBrZXlzdHJlYW1baV07CgkJICAgICAgICAgICAgfQoJCSAgICAgICAgfQoJCSAgICB9KTsKCgkJICAgIENUUkdsYWRtYW4uRGVjcnlwdG9yID0gRW5jcnlwdG9yOwoKCQkgICAgcmV0dXJuIENUUkdsYWRtYW47CgkJfSgpKTsKCgoKCgkJcmV0dXJuIENyeXB0b0pTLm1vZGUuQ1RSR2xhZG1hbjsKCgl9KSk7CgovKioqLyB9KSwKCi8qKiovIDIzMzoKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCTsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CgkJaWYgKHRydWUpIHsKCQkJLy8gQ29tbW9uSlMKCQkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMyksIF9fd2VicGFja19yZXF1aXJlX18oMjI5KSk7CgkJfQoJCWVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewoJCQkvLyBBTUQKCQkJZGVmaW5lKFsiLi9jb3JlIiwgIi4vY2lwaGVyLWNvcmUiXSwgZmFjdG9yeSk7CgkJfQoJCWVsc2UgewoJCQkvLyBHbG9iYWwgKGJyb3dzZXIpCgkJCWZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7CgkJfQoJfSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCgkJLyoqCgkJICogT3V0cHV0IEZlZWRiYWNrIGJsb2NrIG1vZGUuCgkJICovCgkJQ3J5cHRvSlMubW9kZS5PRkIgPSAoZnVuY3Rpb24gKCkgewoJCSAgICB2YXIgT0ZCID0gQ3J5cHRvSlMubGliLkJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTsKCgkJICAgIHZhciBFbmNyeXB0b3IgPSBPRkIuRW5jcnlwdG9yID0gT0ZCLmV4dGVuZCh7CgkJICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7CgkJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlcgoJCSAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplOwoJCSAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuX2l2OwoJCSAgICAgICAgICAgIHZhciBrZXlzdHJlYW0gPSB0aGlzLl9rZXlzdHJlYW07CgoJCSAgICAgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbQoJCSAgICAgICAgICAgIGlmIChpdikgewoJCSAgICAgICAgICAgICAgICBrZXlzdHJlYW0gPSB0aGlzLl9rZXlzdHJlYW0gPSBpdi5zbGljZSgwKTsKCgkJICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBJViBmb3Igc3Vic2VxdWVudCBibG9ja3MKCQkgICAgICAgICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWQ7CgkJICAgICAgICAgICAgfQoJCSAgICAgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2soa2V5c3RyZWFtLCAwKTsKCgkJICAgICAgICAgICAgLy8gRW5jcnlwdAoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHsKCQkgICAgICAgICAgICAgICAgd29yZHNbb2Zmc2V0ICsgaV0gXj0ga2V5c3RyZWFtW2ldOwoJCSAgICAgICAgICAgIH0KCQkgICAgICAgIH0KCQkgICAgfSk7CgoJCSAgICBPRkIuRGVjcnlwdG9yID0gRW5jcnlwdG9yOwoKCQkgICAgcmV0dXJuIE9GQjsKCQl9KCkpOwoKCgkJcmV0dXJuIENyeXB0b0pTLm1vZGUuT0ZCOwoKCX0pKTsKCi8qKiovIH0pLAoKLyoqKi8gMjM0OgovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHsKCQlpZiAodHJ1ZSkgewoJCQkvLyBDb21tb25KUwoJCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oMjEzKSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMjkpKTsKCQl9CgkJZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSB7CgkJCS8vIEFNRAoJCQlkZWZpbmUoWyIuL2NvcmUiLCAiLi9jaXBoZXItY29yZSJdLCBmYWN0b3J5KTsKCQl9CgkJZWxzZSB7CgkJCS8vIEdsb2JhbCAoYnJvd3NlcikKCQkJZmFjdG9yeShyb290LkNyeXB0b0pTKTsKCQl9Cgl9KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKCQkvKioKCQkgKiBFbGVjdHJvbmljIENvZGVib29rIGJsb2NrIG1vZGUuCgkJICovCgkJQ3J5cHRvSlMubW9kZS5FQ0IgPSAoZnVuY3Rpb24gKCkgewoJCSAgICB2YXIgRUNCID0gQ3J5cHRvSlMubGliLkJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTsKCgkJICAgIEVDQi5FbmNyeXB0b3IgPSBFQ0IuZXh0ZW5kKHsKCQkgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHsKCQkgICAgICAgICAgICB0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHdvcmRzLCBvZmZzZXQpOwoJCSAgICAgICAgfQoJCSAgICB9KTsKCgkJICAgIEVDQi5EZWNyeXB0b3IgPSBFQ0IuZXh0ZW5kKHsKCQkgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHsKCQkgICAgICAgICAgICB0aGlzLl9jaXBoZXIuZGVjcnlwdEJsb2NrKHdvcmRzLCBvZmZzZXQpOwoJCSAgICAgICAgfQoJCSAgICB9KTsKCgkJICAgIHJldHVybiBFQ0I7CgkJfSgpKTsKCgoJCXJldHVybiBDcnlwdG9KUy5tb2RlLkVDQjsKCgl9KSk7CgovKioqLyB9KSwKCi8qKiovIDIzNToKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCTsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CgkJaWYgKHRydWUpIHsKCQkJLy8gQ29tbW9uSlMKCQkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMyksIF9fd2VicGFja19yZXF1aXJlX18oMjI5KSk7CgkJfQoJCWVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewoJCQkvLyBBTUQKCQkJZGVmaW5lKFsiLi9jb3JlIiwgIi4vY2lwaGVyLWNvcmUiXSwgZmFjdG9yeSk7CgkJfQoJCWVsc2UgewoJCQkvLyBHbG9iYWwgKGJyb3dzZXIpCgkJCWZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7CgkJfQoJfSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCgkJLyoqCgkJICogQU5TSSBYLjkyMyBwYWRkaW5nIHN0cmF0ZWd5LgoJCSAqLwoJCUNyeXB0b0pTLnBhZC5BbnNpWDkyMyA9IHsKCQkgICAgcGFkOiBmdW5jdGlvbiAoZGF0YSwgYmxvY2tTaXplKSB7CgkJICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgIHZhciBkYXRhU2lnQnl0ZXMgPSBkYXRhLnNpZ0J5dGVzOwoJCSAgICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDsKCgkJICAgICAgICAvLyBDb3VudCBwYWRkaW5nIGJ5dGVzCgkJICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGJsb2NrU2l6ZUJ5dGVzIC0gZGF0YVNpZ0J5dGVzICUgYmxvY2tTaXplQnl0ZXM7CgoJCSAgICAgICAgLy8gQ29tcHV0ZSBsYXN0IGJ5dGUgcG9zaXRpb24KCQkgICAgICAgIHZhciBsYXN0Qnl0ZVBvcyA9IGRhdGFTaWdCeXRlcyArIG5QYWRkaW5nQnl0ZXMgLSAxOwoKCQkgICAgICAgIC8vIFBhZAoJCSAgICAgICAgZGF0YS5jbGFtcCgpOwoJCSAgICAgICAgZGF0YS53b3Jkc1tsYXN0Qnl0ZVBvcyA+Pj4gMl0gfD0gblBhZGRpbmdCeXRlcyA8PCAoMjQgLSAobGFzdEJ5dGVQb3MgJSA0KSAqIDgpOwoJCSAgICAgICAgZGF0YS5zaWdCeXRlcyArPSBuUGFkZGluZ0J5dGVzOwoJCSAgICB9LAoKCQkgICAgdW5wYWQ6IGZ1bmN0aW9uIChkYXRhKSB7CgkJICAgICAgICAvLyBHZXQgbnVtYmVyIG9mIHBhZGRpbmcgYnl0ZXMgZnJvbSBsYXN0IGJ5dGUKCQkgICAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gZGF0YS53b3Jkc1soZGF0YS5zaWdCeXRlcyAtIDEpID4+PiAyXSAmIDB4ZmY7CgoJCSAgICAgICAgLy8gUmVtb3ZlIHBhZGRpbmcKCQkgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gblBhZGRpbmdCeXRlczsKCQkgICAgfQoJCX07CgoKCQlyZXR1cm4gQ3J5cHRvSlMucGFkLkFuc2l4OTIzOwoKCX0pKTsKCi8qKiovIH0pLAoKLyoqKi8gMjM2OgovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHsKCQlpZiAodHJ1ZSkgewoJCQkvLyBDb21tb25KUwoJCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oMjEzKSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMjkpKTsKCQl9CgkJZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSB7CgkJCS8vIEFNRAoJCQlkZWZpbmUoWyIuL2NvcmUiLCAiLi9jaXBoZXItY29yZSJdLCBmYWN0b3J5KTsKCQl9CgkJZWxzZSB7CgkJCS8vIEdsb2JhbCAoYnJvd3NlcikKCQkJZmFjdG9yeShyb290LkNyeXB0b0pTKTsKCQl9Cgl9KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKCQkvKioKCQkgKiBJU08gMTAxMjYgcGFkZGluZyBzdHJhdGVneS4KCQkgKi8KCQlDcnlwdG9KUy5wYWQuSXNvMTAxMjYgPSB7CgkJICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkgewoJCSAgICAgICAgLy8gU2hvcnRjdXQKCQkgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7CgoJCSAgICAgICAgLy8gQ291bnQgcGFkZGluZyBieXRlcwoJCSAgICAgICAgdmFyIG5QYWRkaW5nQnl0ZXMgPSBibG9ja1NpemVCeXRlcyAtIGRhdGEuc2lnQnl0ZXMgJSBibG9ja1NpemVCeXRlczsKCgkJICAgICAgICAvLyBQYWQKCQkgICAgICAgIGRhdGEuY29uY2F0KENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKG5QYWRkaW5nQnl0ZXMgLSAxKSkuCgkJICAgICAgICAgICAgIGNvbmNhdChDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZShbblBhZGRpbmdCeXRlcyA8PCAyNF0sIDEpKTsKCQkgICAgfSwKCgkJICAgIHVucGFkOiBmdW5jdGlvbiAoZGF0YSkgewoJCSAgICAgICAgLy8gR2V0IG51bWJlciBvZiBwYWRkaW5nIGJ5dGVzIGZyb20gbGFzdCBieXRlCgkJICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGRhdGEud29yZHNbKGRhdGEuc2lnQnl0ZXMgLSAxKSA+Pj4gMl0gJiAweGZmOwoKCQkgICAgICAgIC8vIFJlbW92ZSBwYWRkaW5nCgkJICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5QYWRkaW5nQnl0ZXM7CgkJICAgIH0KCQl9OwoKCgkJcmV0dXJuIENyeXB0b0pTLnBhZC5Jc28xMDEyNjsKCgl9KSk7CgovKioqLyB9KSwKCi8qKiovIDIzNzoKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCTsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CgkJaWYgKHRydWUpIHsKCQkJLy8gQ29tbW9uSlMKCQkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMyksIF9fd2VicGFja19yZXF1aXJlX18oMjI5KSk7CgkJfQoJCWVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewoJCQkvLyBBTUQKCQkJZGVmaW5lKFsiLi9jb3JlIiwgIi4vY2lwaGVyLWNvcmUiXSwgZmFjdG9yeSk7CgkJfQoJCWVsc2UgewoJCQkvLyBHbG9iYWwgKGJyb3dzZXIpCgkJCWZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7CgkJfQoJfSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCgkJLyoqCgkJICogSVNPL0lFQyA5Nzk3LTEgUGFkZGluZyBNZXRob2QgMi4KCQkgKi8KCQlDcnlwdG9KUy5wYWQuSXNvOTc5NzEgPSB7CgkJICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkgewoJCSAgICAgICAgLy8gQWRkIDB4ODAgYnl0ZQoJCSAgICAgICAgZGF0YS5jb25jYXQoQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoWzB4ODAwMDAwMDBdLCAxKSk7CgoJCSAgICAgICAgLy8gWmVybyBwYWQgdGhlIHJlc3QKCQkgICAgICAgIENyeXB0b0pTLnBhZC5aZXJvUGFkZGluZy5wYWQoZGF0YSwgYmxvY2tTaXplKTsKCQkgICAgfSwKCgkJICAgIHVucGFkOiBmdW5jdGlvbiAoZGF0YSkgewoJCSAgICAgICAgLy8gUmVtb3ZlIHplcm8gcGFkZGluZwoJCSAgICAgICAgQ3J5cHRvSlMucGFkLlplcm9QYWRkaW5nLnVucGFkKGRhdGEpOwoKCQkgICAgICAgIC8vIFJlbW92ZSBvbmUgbW9yZSBieXRlIC0tIHRoZSAweDgwIGJ5dGUKCQkgICAgICAgIGRhdGEuc2lnQnl0ZXMtLTsKCQkgICAgfQoJCX07CgoKCQlyZXR1cm4gQ3J5cHRvSlMucGFkLklzbzk3OTcxOwoKCX0pKTsKCi8qKiovIH0pLAoKLyoqKi8gMjM4OgovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHsKCQlpZiAodHJ1ZSkgewoJCQkvLyBDb21tb25KUwoJCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oMjEzKSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMjkpKTsKCQl9CgkJZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSB7CgkJCS8vIEFNRAoJCQlkZWZpbmUoWyIuL2NvcmUiLCAiLi9jaXBoZXItY29yZSJdLCBmYWN0b3J5KTsKCQl9CgkJZWxzZSB7CgkJCS8vIEdsb2JhbCAoYnJvd3NlcikKCQkJZmFjdG9yeShyb290LkNyeXB0b0pTKTsKCQl9Cgl9KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKCQkvKioKCQkgKiBaZXJvIHBhZGRpbmcgc3RyYXRlZ3kuCgkJICovCgkJQ3J5cHRvSlMucGFkLlplcm9QYWRkaW5nID0gewoJCSAgICBwYWQ6IGZ1bmN0aW9uIChkYXRhLCBibG9ja1NpemUpIHsKCQkgICAgICAgIC8vIFNob3J0Y3V0CgkJICAgICAgICB2YXIgYmxvY2tTaXplQnl0ZXMgPSBibG9ja1NpemUgKiA0OwoKCQkgICAgICAgIC8vIFBhZAoJCSAgICAgICAgZGF0YS5jbGFtcCgpOwoJCSAgICAgICAgZGF0YS5zaWdCeXRlcyArPSBibG9ja1NpemVCeXRlcyAtICgoZGF0YS5zaWdCeXRlcyAlIGJsb2NrU2l6ZUJ5dGVzKSB8fCBibG9ja1NpemVCeXRlcyk7CgkJICAgIH0sCgoJCSAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHsKCQkgICAgICAgIC8vIFNob3J0Y3V0CgkJICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkczsKCgkJICAgICAgICAvLyBVbnBhZAoJCSAgICAgICAgdmFyIGkgPSBkYXRhLnNpZ0J5dGVzIC0gMTsKCQkgICAgICAgIHdoaWxlICghKChkYXRhV29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmKSkgewoJCSAgICAgICAgICAgIGktLTsKCQkgICAgICAgIH0KCQkgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSBpICsgMTsKCQkgICAgfQoJCX07CgoKCQlyZXR1cm4gQ3J5cHRvSlMucGFkLlplcm9QYWRkaW5nOwoKCX0pKTsKCi8qKiovIH0pLAoKLyoqKi8gMjM5OgovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHsKCQlpZiAodHJ1ZSkgewoJCQkvLyBDb21tb25KUwoJCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oMjEzKSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMjkpKTsKCQl9CgkJZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSB7CgkJCS8vIEFNRAoJCQlkZWZpbmUoWyIuL2NvcmUiLCAiLi9jaXBoZXItY29yZSJdLCBmYWN0b3J5KTsKCQl9CgkJZWxzZSB7CgkJCS8vIEdsb2JhbCAoYnJvd3NlcikKCQkJZmFjdG9yeShyb290LkNyeXB0b0pTKTsKCQl9Cgl9KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKCQkvKioKCQkgKiBBIG5vb3AgcGFkZGluZyBzdHJhdGVneS4KCQkgKi8KCQlDcnlwdG9KUy5wYWQuTm9QYWRkaW5nID0gewoJCSAgICBwYWQ6IGZ1bmN0aW9uICgpIHsKCQkgICAgfSwKCgkJICAgIHVucGFkOiBmdW5jdGlvbiAoKSB7CgkJICAgIH0KCQl9OwoKCgkJcmV0dXJuIENyeXB0b0pTLnBhZC5Ob1BhZGRpbmc7CgoJfSkpOwoKLyoqKi8gfSksCgovKioqLyAyNDA6Ci8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgk7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewoJCWlmICh0cnVlKSB7CgkJCS8vIENvbW1vbkpTCgkJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoX193ZWJwYWNrX3JlcXVpcmVfXygyMTMpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyOSkpOwoJCX0KCQllbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQpIHsKCQkJLy8gQU1ECgkJCWRlZmluZShbIi4vY29yZSIsICIuL2NpcGhlci1jb3JlIl0sIGZhY3RvcnkpOwoJCX0KCQllbHNlIHsKCQkJLy8gR2xvYmFsIChicm93c2VyKQoJCQlmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpOwoJCX0KCX0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgoJCShmdW5jdGlvbiAodW5kZWZpbmVkKSB7CgkJICAgIC8vIFNob3J0Y3V0cwoJCSAgICB2YXIgQyA9IENyeXB0b0pTOwoJCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKCQkgICAgdmFyIENpcGhlclBhcmFtcyA9IENfbGliLkNpcGhlclBhcmFtczsKCQkgICAgdmFyIENfZW5jID0gQy5lbmM7CgkJICAgIHZhciBIZXggPSBDX2VuYy5IZXg7CgkJICAgIHZhciBDX2Zvcm1hdCA9IEMuZm9ybWF0OwoKCQkgICAgdmFyIEhleEZvcm1hdHRlciA9IENfZm9ybWF0LkhleCA9IHsKCQkgICAgICAgIC8qKgoJCSAgICAgICAgICogQ29udmVydHMgdGhlIGNpcGhlcnRleHQgb2YgYSBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhIGhleGFkZWNpbWFsbHkgZW5jb2RlZCBzdHJpbmcuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN9IGNpcGhlclBhcmFtcyBUaGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgaGV4YWRlY2ltYWxseSBlbmNvZGVkIHN0cmluZy4KCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAc3RhdGljCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQGV4YW1wbGUKCQkgICAgICAgICAqCgkJICAgICAgICAgKiAgICAgdmFyIGhleFN0cmluZyA9IENyeXB0b0pTLmZvcm1hdC5IZXguc3RyaW5naWZ5KGNpcGhlclBhcmFtcyk7CgkJICAgICAgICAgKi8KCQkgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKGNpcGhlclBhcmFtcykgewoJCSAgICAgICAgICAgIHJldHVybiBjaXBoZXJQYXJhbXMuY2lwaGVydGV4dC50b1N0cmluZyhIZXgpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICAvKioKCQkgICAgICAgICAqIENvbnZlcnRzIGEgaGV4YWRlY2ltYWxseSBlbmNvZGVkIGNpcGhlcnRleHQgc3RyaW5nIHRvIGEgY2lwaGVyIHBhcmFtcyBvYmplY3QuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IFRoZSBoZXhhZGVjaW1hbGx5IGVuY29kZWQgc3RyaW5nLgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gVGhlIGNpcGhlciBwYXJhbXMgb2JqZWN0LgoJCSAgICAgICAgICoKCQkgICAgICAgICAqIEBzdGF0aWMKCQkgICAgICAgICAqCgkJICAgICAgICAgKiBAZXhhbXBsZQoJCSAgICAgICAgICoKCQkgICAgICAgICAqICAgICB2YXIgY2lwaGVyUGFyYW1zID0gQ3J5cHRvSlMuZm9ybWF0LkhleC5wYXJzZShoZXhTdHJpbmcpOwoJCSAgICAgICAgICovCgkJICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGlucHV0KSB7CgkJICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBIZXgucGFyc2UoaW5wdXQpOwoJCSAgICAgICAgICAgIHJldHVybiBDaXBoZXJQYXJhbXMuY3JlYXRlKHsgY2lwaGVydGV4dDogY2lwaGVydGV4dCB9KTsKCQkgICAgICAgIH0KCQkgICAgfTsKCQl9KCkpOwoKCgkJcmV0dXJuIENyeXB0b0pTLmZvcm1hdC5IZXg7CgoJfSkpOwoKLyoqKi8gfSksCgovKioqLyAyNDE6Ci8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgk7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikgewoJCWlmICh0cnVlKSB7CgkJCS8vIENvbW1vbkpTCgkJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoX193ZWJwYWNrX3JlcXVpcmVfXygyMTMpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxNyksIF9fd2VicGFja19yZXF1aXJlX18oMjE4KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMjgpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyOSkpOwoJCX0KCQllbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQpIHsKCQkJLy8gQU1ECgkJCWRlZmluZShbIi4vY29yZSIsICIuL2VuYy1iYXNlNjQiLCAiLi9tZDUiLCAiLi9ldnBrZGYiLCAiLi9jaXBoZXItY29yZSJdLCBmYWN0b3J5KTsKCQl9CgkJZWxzZSB7CgkJCS8vIEdsb2JhbCAoYnJvd3NlcikKCQkJZmFjdG9yeShyb290LkNyeXB0b0pTKTsKCQl9Cgl9KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykgewoKCQkoZnVuY3Rpb24gKCkgewoJCSAgICAvLyBTaG9ydGN1dHMKCQkgICAgdmFyIEMgPSBDcnlwdG9KUzsKCQkgICAgdmFyIENfbGliID0gQy5saWI7CgkJICAgIHZhciBCbG9ja0NpcGhlciA9IENfbGliLkJsb2NrQ2lwaGVyOwoJCSAgICB2YXIgQ19hbGdvID0gQy5hbGdvOwoKCQkgICAgLy8gTG9va3VwIHRhYmxlcwoJCSAgICB2YXIgU0JPWCA9IFtdOwoJCSAgICB2YXIgSU5WX1NCT1ggPSBbXTsKCQkgICAgdmFyIFNVQl9NSVhfMCA9IFtdOwoJCSAgICB2YXIgU1VCX01JWF8xID0gW107CgkJICAgIHZhciBTVUJfTUlYXzIgPSBbXTsKCQkgICAgdmFyIFNVQl9NSVhfMyA9IFtdOwoJCSAgICB2YXIgSU5WX1NVQl9NSVhfMCA9IFtdOwoJCSAgICB2YXIgSU5WX1NVQl9NSVhfMSA9IFtdOwoJCSAgICB2YXIgSU5WX1NVQl9NSVhfMiA9IFtdOwoJCSAgICB2YXIgSU5WX1NVQl9NSVhfMyA9IFtdOwoKCQkgICAgLy8gQ29tcHV0ZSBsb29rdXAgdGFibGVzCgkJICAgIChmdW5jdGlvbiAoKSB7CgkJICAgICAgICAvLyBDb21wdXRlIGRvdWJsZSB0YWJsZQoJCSAgICAgICAgdmFyIGQgPSBbXTsKCQkgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHsKCQkgICAgICAgICAgICBpZiAoaSA8IDEyOCkgewoJCSAgICAgICAgICAgICAgICBkW2ldID0gaSA8PCAxOwoJCSAgICAgICAgICAgIH0gZWxzZSB7CgkJICAgICAgICAgICAgICAgIGRbaV0gPSAoaSA8PCAxKSBeIDB4MTFiOwoJCSAgICAgICAgICAgIH0KCQkgICAgICAgIH0KCgkJICAgICAgICAvLyBXYWxrIEdGKDJeOCkKCQkgICAgICAgIHZhciB4ID0gMDsKCQkgICAgICAgIHZhciB4aSA9IDA7CgkJICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7CgkJICAgICAgICAgICAgLy8gQ29tcHV0ZSBzYm94CgkJICAgICAgICAgICAgdmFyIHN4ID0geGkgXiAoeGkgPDwgMSkgXiAoeGkgPDwgMikgXiAoeGkgPDwgMykgXiAoeGkgPDwgNCk7CgkJICAgICAgICAgICAgc3ggPSAoc3ggPj4+IDgpIF4gKHN4ICYgMHhmZikgXiAweDYzOwoJCSAgICAgICAgICAgIFNCT1hbeF0gPSBzeDsKCQkgICAgICAgICAgICBJTlZfU0JPWFtzeF0gPSB4OwoKCQkgICAgICAgICAgICAvLyBDb21wdXRlIG11bHRpcGxpY2F0aW9uCgkJICAgICAgICAgICAgdmFyIHgyID0gZFt4XTsKCQkgICAgICAgICAgICB2YXIgeDQgPSBkW3gyXTsKCQkgICAgICAgICAgICB2YXIgeDggPSBkW3g0XTsKCgkJICAgICAgICAgICAgLy8gQ29tcHV0ZSBzdWIgYnl0ZXMsIG1peCBjb2x1bW5zIHRhYmxlcwoJCSAgICAgICAgICAgIHZhciB0ID0gKGRbc3hdICogMHgxMDEpIF4gKHN4ICogMHgxMDEwMTAwKTsKCQkgICAgICAgICAgICBTVUJfTUlYXzBbeF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOCk7CgkJICAgICAgICAgICAgU1VCX01JWF8xW3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KTsKCQkgICAgICAgICAgICBTVUJfTUlYXzJbeF0gPSAodCA8PCA4KSAgfCAodCA+Pj4gMjQpOwoJCSAgICAgICAgICAgIFNVQl9NSVhfM1t4XSA9IHQ7CgoJCSAgICAgICAgICAgIC8vIENvbXB1dGUgaW52IHN1YiBieXRlcywgaW52IG1peCBjb2x1bW5zIHRhYmxlcwoJCSAgICAgICAgICAgIHZhciB0ID0gKHg4ICogMHgxMDEwMTAxKSBeICh4NCAqIDB4MTAwMDEpIF4gKHgyICogMHgxMDEpIF4gKHggKiAweDEwMTAxMDApOwoJCSAgICAgICAgICAgIElOVl9TVUJfTUlYXzBbc3hdID0gKHQgPDwgMjQpIHwgKHQgPj4+IDgpOwoJCSAgICAgICAgICAgIElOVl9TVUJfTUlYXzFbc3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KTsKCQkgICAgICAgICAgICBJTlZfU1VCX01JWF8yW3N4XSA9ICh0IDw8IDgpICB8ICh0ID4+PiAyNCk7CgkJICAgICAgICAgICAgSU5WX1NVQl9NSVhfM1tzeF0gPSB0OwoKCQkgICAgICAgICAgICAvLyBDb21wdXRlIG5leHQgY291bnRlcgoJCSAgICAgICAgICAgIGlmICgheCkgewoJCSAgICAgICAgICAgICAgICB4ID0geGkgPSAxOwoJCSAgICAgICAgICAgIH0gZWxzZSB7CgkJICAgICAgICAgICAgICAgIHggPSB4MiBeIGRbZFtkW3g4IF4geDJdXV07CgkJICAgICAgICAgICAgICAgIHhpIF49IGRbZFt4aV1dOwoJCSAgICAgICAgICAgIH0KCQkgICAgICAgIH0KCQkgICAgfSgpKTsKCgkJICAgIC8vIFByZWNvbXB1dGVkIFJjb24gbG9va3VwCgkJICAgIHZhciBSQ09OID0gWzB4MDAsIDB4MDEsIDB4MDIsIDB4MDQsIDB4MDgsIDB4MTAsIDB4MjAsIDB4NDAsIDB4ODAsIDB4MWIsIDB4MzZdOwoKCQkgICAgLyoqCgkJICAgICAqIEFFUyBibG9jayBjaXBoZXIgYWxnb3JpdGhtLgoJCSAgICAgKi8KCQkgICAgdmFyIEFFUyA9IENfYWxnby5BRVMgPSBCbG9ja0NpcGhlci5leHRlbmQoewoJCSAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICAvLyBTa2lwIHJlc2V0IG9mIG5Sb3VuZHMgaGFzIGJlZW4gc2V0IGJlZm9yZSBhbmQga2V5IGRpZCBub3QgY2hhbmdlCgkJICAgICAgICAgICAgaWYgKHRoaXMuX25Sb3VuZHMgJiYgdGhpcy5fa2V5UHJpb3JSZXNldCA9PT0gdGhpcy5fa2V5KSB7CgkJICAgICAgICAgICAgICAgIHJldHVybjsKCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXlQcmlvclJlc2V0ID0gdGhpcy5fa2V5OwoJCSAgICAgICAgICAgIHZhciBrZXlXb3JkcyA9IGtleS53b3JkczsKCQkgICAgICAgICAgICB2YXIga2V5U2l6ZSA9IGtleS5zaWdCeXRlcyAvIDQ7CgoJCSAgICAgICAgICAgIC8vIENvbXB1dGUgbnVtYmVyIG9mIHJvdW5kcwoJCSAgICAgICAgICAgIHZhciBuUm91bmRzID0gdGhpcy5fblJvdW5kcyA9IGtleVNpemUgKyA2OwoKCQkgICAgICAgICAgICAvLyBDb21wdXRlIG51bWJlciBvZiBrZXkgc2NoZWR1bGUgcm93cwoJCSAgICAgICAgICAgIHZhciBrc1Jvd3MgPSAoblJvdW5kcyArIDEpICogNDsKCgkJICAgICAgICAgICAgLy8gQ29tcHV0ZSBrZXkgc2NoZWR1bGUKCQkgICAgICAgICAgICB2YXIga2V5U2NoZWR1bGUgPSB0aGlzLl9rZXlTY2hlZHVsZSA9IFtdOwoJCSAgICAgICAgICAgIGZvciAodmFyIGtzUm93ID0gMDsga3NSb3cgPCBrc1Jvd3M7IGtzUm93KyspIHsKCQkgICAgICAgICAgICAgICAgaWYgKGtzUm93IDwga2V5U2l6ZSkgewoJCSAgICAgICAgICAgICAgICAgICAga2V5U2NoZWR1bGVba3NSb3ddID0ga2V5V29yZHNba3NSb3ddOwoJCSAgICAgICAgICAgICAgICB9IGVsc2UgewoJCSAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBrZXlTY2hlZHVsZVtrc1JvdyAtIDFdOwoKCQkgICAgICAgICAgICAgICAgICAgIGlmICghKGtzUm93ICUga2V5U2l6ZSkpIHsKCQkgICAgICAgICAgICAgICAgICAgICAgICAvLyBSb3Qgd29yZAoJCSAgICAgICAgICAgICAgICAgICAgICAgIHQgPSAodCA8PCA4KSB8ICh0ID4+PiAyNCk7CgoJCSAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YiB3b3JkCgkJICAgICAgICAgICAgICAgICAgICAgICAgdCA9IChTQk9YW3QgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsodCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3QgJiAweGZmXTsKCgkJICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWl4IFJjb24KCQkgICAgICAgICAgICAgICAgICAgICAgICB0IF49IFJDT05bKGtzUm93IC8ga2V5U2l6ZSkgfCAwXSA8PCAyNDsKCQkgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5U2l6ZSA+IDYgJiYga3NSb3cgJSBrZXlTaXplID09IDQpIHsKCQkgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWIgd29yZAoJCSAgICAgICAgICAgICAgICAgICAgICAgIHQgPSAoU0JPWFt0ID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFt0ICYgMHhmZl07CgkJICAgICAgICAgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgICAgICAgICAga2V5U2NoZWR1bGVba3NSb3ddID0ga2V5U2NoZWR1bGVba3NSb3cgLSBrZXlTaXplXSBeIHQ7CgkJICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIC8vIENvbXB1dGUgaW52IGtleSBzY2hlZHVsZQoJCSAgICAgICAgICAgIHZhciBpbnZLZXlTY2hlZHVsZSA9IHRoaXMuX2ludktleVNjaGVkdWxlID0gW107CgkJICAgICAgICAgICAgZm9yICh2YXIgaW52S3NSb3cgPSAwOyBpbnZLc1JvdyA8IGtzUm93czsgaW52S3NSb3crKykgewoJCSAgICAgICAgICAgICAgICB2YXIga3NSb3cgPSBrc1Jvd3MgLSBpbnZLc1JvdzsKCgkJICAgICAgICAgICAgICAgIGlmIChpbnZLc1JvdyAlIDQpIHsKCQkgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ga2V5U2NoZWR1bGVba3NSb3ddOwoJCSAgICAgICAgICAgICAgICB9IGVsc2UgewoJCSAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBrZXlTY2hlZHVsZVtrc1JvdyAtIDRdOwoJCSAgICAgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgICAgICBpZiAoaW52S3NSb3cgPCA0IHx8IGtzUm93IDw9IDQpIHsKCQkgICAgICAgICAgICAgICAgICAgIGludktleVNjaGVkdWxlW2ludktzUm93XSA9IHQ7CgkJICAgICAgICAgICAgICAgIH0gZWxzZSB7CgkJICAgICAgICAgICAgICAgICAgICBpbnZLZXlTY2hlZHVsZVtpbnZLc1Jvd10gPSBJTlZfU1VCX01JWF8wW1NCT1hbdCA+Pj4gMjRdXSBeIElOVl9TVUJfTUlYXzFbU0JPWFsodCA+Pj4gMTYpICYgMHhmZl1dIF4KCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOVl9TVUJfTUlYXzJbU0JPWFsodCA+Pj4gOCkgJiAweGZmXV0gXiBJTlZfU1VCX01JWF8zW1NCT1hbdCAmIDB4ZmZdXTsKCQkgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgIH0KCQkgICAgICAgIH0sCgoJCSAgICAgICAgZW5jcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7CgkJICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5fa2V5U2NoZWR1bGUsIFNVQl9NSVhfMCwgU1VCX01JWF8xLCBTVUJfTUlYXzIsIFNVQl9NSVhfMywgU0JPWCk7CgkJICAgICAgICB9LAoKCQkgICAgICAgIGRlY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkgewoJCSAgICAgICAgICAgIC8vIFN3YXAgMm5kIGFuZCA0dGggcm93cwoJCSAgICAgICAgICAgIHZhciB0ID0gTVtvZmZzZXQgKyAxXTsKCQkgICAgICAgICAgICBNW29mZnNldCArIDFdID0gTVtvZmZzZXQgKyAzXTsKCQkgICAgICAgICAgICBNW29mZnNldCArIDNdID0gdDsKCgkJICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5faW52S2V5U2NoZWR1bGUsIElOVl9TVUJfTUlYXzAsIElOVl9TVUJfTUlYXzEsIElOVl9TVUJfTUlYXzIsIElOVl9TVUJfTUlYXzMsIElOVl9TQk9YKTsKCgkJICAgICAgICAgICAgLy8gSW52IHN3YXAgMm5kIGFuZCA0dGggcm93cwoJCSAgICAgICAgICAgIHZhciB0ID0gTVtvZmZzZXQgKyAxXTsKCQkgICAgICAgICAgICBNW29mZnNldCArIDFdID0gTVtvZmZzZXQgKyAzXTsKCQkgICAgICAgICAgICBNW29mZnNldCArIDNdID0gdDsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgX2RvQ3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCwga2V5U2NoZWR1bGUsIFNVQl9NSVhfMCwgU1VCX01JWF8xLCBTVUJfTUlYXzIsIFNVQl9NSVhfMywgU0JPWCkgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0CgkJICAgICAgICAgICAgdmFyIG5Sb3VuZHMgPSB0aGlzLl9uUm91bmRzOwoKCQkgICAgICAgICAgICAvLyBHZXQgaW5wdXQsIGFkZCByb3VuZCBrZXkKCQkgICAgICAgICAgICB2YXIgczAgPSBNW29mZnNldF0gICAgIF4ga2V5U2NoZWR1bGVbMF07CgkJICAgICAgICAgICAgdmFyIHMxID0gTVtvZmZzZXQgKyAxXSBeIGtleVNjaGVkdWxlWzFdOwoJCSAgICAgICAgICAgIHZhciBzMiA9IE1bb2Zmc2V0ICsgMl0gXiBrZXlTY2hlZHVsZVsyXTsKCQkgICAgICAgICAgICB2YXIgczMgPSBNW29mZnNldCArIDNdIF4ga2V5U2NoZWR1bGVbM107CgoJCSAgICAgICAgICAgIC8vIEtleSBzY2hlZHVsZSByb3cgY291bnRlcgoJCSAgICAgICAgICAgIHZhciBrc1JvdyA9IDQ7CgoJCSAgICAgICAgICAgIC8vIFJvdW5kcwoJCSAgICAgICAgICAgIGZvciAodmFyIHJvdW5kID0gMTsgcm91bmQgPCBuUm91bmRzOyByb3VuZCsrKSB7CgkJICAgICAgICAgICAgICAgIC8vIFNoaWZ0IHJvd3MsIHN1YiBieXRlcywgbWl4IGNvbHVtbnMsIGFkZCByb3VuZCBrZXkKCQkgICAgICAgICAgICAgICAgdmFyIHQwID0gU1VCX01JWF8wW3MwID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMxID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczIgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdOwoJCSAgICAgICAgICAgICAgICB2YXIgdDEgPSBTVUJfTUlYXzBbczEgPj4+IDI0XSBeIFNVQl9NSVhfMVsoczIgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWF8yWyhzMyA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVhfM1tzMCAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK107CgkJICAgICAgICAgICAgICAgIHZhciB0MiA9IFNVQl9NSVhfMFtzMiA+Pj4gMjRdIF4gU1VCX01JWF8xWyhzMyA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYXzJbKHMwID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWF8zW3MxICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXTsKCQkgICAgICAgICAgICAgICAgdmFyIHQzID0gU1VCX01JWF8wW3MzID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMwID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczEgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdOwoKCQkgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHN0YXRlCgkJICAgICAgICAgICAgICAgIHMwID0gdDA7CgkJICAgICAgICAgICAgICAgIHMxID0gdDE7CgkJICAgICAgICAgICAgICAgIHMyID0gdDI7CgkJICAgICAgICAgICAgICAgIHMzID0gdDM7CgkJICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICAvLyBTaGlmdCByb3dzLCBzdWIgYnl0ZXMsIGFkZCByb3VuZCBrZXkKCQkgICAgICAgICAgICB2YXIgdDAgPSAoKFNCT1hbczAgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczEgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMiA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTsKCQkgICAgICAgICAgICB2YXIgdDEgPSAoKFNCT1hbczEgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczIgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMyA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczAgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTsKCQkgICAgICAgICAgICB2YXIgdDIgPSAoKFNCT1hbczIgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczMgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczEgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTsKCQkgICAgICAgICAgICB2YXIgdDMgPSAoKFNCT1hbczMgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczAgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMSA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTsKCgkJICAgICAgICAgICAgLy8gU2V0IG91dHB1dAoJCSAgICAgICAgICAgIE1bb2Zmc2V0XSAgICAgPSB0MDsKCQkgICAgICAgICAgICBNW29mZnNldCArIDFdID0gdDE7CgkJICAgICAgICAgICAgTVtvZmZzZXQgKyAyXSA9IHQyOwoJCSAgICAgICAgICAgIE1bb2Zmc2V0ICsgM10gPSB0MzsKCQkgICAgICAgIH0sCgoJCSAgICAgICAga2V5U2l6ZTogMjU2LzMyCgkJICAgIH0pOwoKCQkgICAgLyoqCgkJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS4KCQkgICAgICoKCQkgICAgICogQGV4YW1wbGUKCQkgICAgICoKCQkgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuQUVTLmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpOwoJCSAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5BRVMuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7CgkJICAgICAqLwoJCSAgICBDLkFFUyA9IEJsb2NrQ2lwaGVyLl9jcmVhdGVIZWxwZXIoQUVTKTsKCQl9KCkpOwoKCgkJcmV0dXJuIENyeXB0b0pTLkFFUzsKCgl9KSk7CgovKioqLyB9KSwKCi8qKiovIDI0MjoKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCTsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CgkJaWYgKHRydWUpIHsKCQkJLy8gQ29tbW9uSlMKCQkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMyksIF9fd2VicGFja19yZXF1aXJlX18oMjE3KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMTgpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyOCksIF9fd2VicGFja19yZXF1aXJlX18oMjI5KSk7CgkJfQoJCWVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewoJCQkvLyBBTUQKCQkJZGVmaW5lKFsiLi9jb3JlIiwgIi4vZW5jLWJhc2U2NCIsICIuL21kNSIsICIuL2V2cGtkZiIsICIuL2NpcGhlci1jb3JlIl0sIGZhY3RvcnkpOwoJCX0KCQllbHNlIHsKCQkJLy8gR2xvYmFsIChicm93c2VyKQoJCQlmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpOwoJCX0KCX0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgoJCShmdW5jdGlvbiAoKSB7CgkJICAgIC8vIFNob3J0Y3V0cwoJCSAgICB2YXIgQyA9IENyeXB0b0pTOwoJCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKCQkgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTsKCQkgICAgdmFyIEJsb2NrQ2lwaGVyID0gQ19saWIuQmxvY2tDaXBoZXI7CgkJICAgIHZhciBDX2FsZ28gPSBDLmFsZ287CgoJCSAgICAvLyBQZXJtdXRlZCBDaG9pY2UgMSBjb25zdGFudHMKCQkgICAgdmFyIFBDMSA9IFsKCQkgICAgICAgIDU3LCA0OSwgNDEsIDMzLCAyNSwgMTcsIDksICAxLAoJCSAgICAgICAgNTgsIDUwLCA0MiwgMzQsIDI2LCAxOCwgMTAsIDIsCgkJICAgICAgICA1OSwgNTEsIDQzLCAzNSwgMjcsIDE5LCAxMSwgMywKCQkgICAgICAgIDYwLCA1MiwgNDQsIDM2LCA2MywgNTUsIDQ3LCAzOSwKCQkgICAgICAgIDMxLCAyMywgMTUsIDcsICA2MiwgNTQsIDQ2LCAzOCwKCQkgICAgICAgIDMwLCAyMiwgMTQsIDYsICA2MSwgNTMsIDQ1LCAzNywKCQkgICAgICAgIDI5LCAyMSwgMTMsIDUsICAyOCwgMjAsIDEyLCA0CgkJICAgIF07CgoJCSAgICAvLyBQZXJtdXRlZCBDaG9pY2UgMiBjb25zdGFudHMKCQkgICAgdmFyIFBDMiA9IFsKCQkgICAgICAgIDE0LCAxNywgMTEsIDI0LCAxLCAgNSwKCQkgICAgICAgIDMsICAyOCwgMTUsIDYsICAyMSwgMTAsCgkJICAgICAgICAyMywgMTksIDEyLCA0LCAgMjYsIDgsCgkJICAgICAgICAxNiwgNywgIDI3LCAyMCwgMTMsIDIsCgkJICAgICAgICA0MSwgNTIsIDMxLCAzNywgNDcsIDU1LAoJCSAgICAgICAgMzAsIDQwLCA1MSwgNDUsIDMzLCA0OCwKCQkgICAgICAgIDQ0LCA0OSwgMzksIDU2LCAzNCwgNTMsCgkJICAgICAgICA0NiwgNDIsIDUwLCAzNiwgMjksIDMyCgkJICAgIF07CgoJCSAgICAvLyBDdW11bGF0aXZlIGJpdCBzaGlmdCBjb25zdGFudHMKCQkgICAgdmFyIEJJVF9TSElGVFMgPSBbMSwgIDIsICA0LCAgNiwgIDgsICAxMCwgMTIsIDE0LCAxNSwgMTcsIDE5LCAyMSwgMjMsIDI1LCAyNywgMjhdOwoKCQkgICAgLy8gU0JPWGVzIGFuZCByb3VuZCBwZXJtdXRhdGlvbiBjb25zdGFudHMKCQkgICAgdmFyIFNCT1hfUCA9IFsKCQkgICAgICAgIHsKCQkgICAgICAgICAgICAweDA6IDB4ODA4MjAwLAoJCSAgICAgICAgICAgIDB4MTAwMDAwMDA6IDB4ODAwMCwKCQkgICAgICAgICAgICAweDIwMDAwMDAwOiAweDgwODAwMiwKCQkgICAgICAgICAgICAweDMwMDAwMDAwOiAweDIsCgkJICAgICAgICAgICAgMHg0MDAwMDAwMDogMHgyMDAsCgkJICAgICAgICAgICAgMHg1MDAwMDAwMDogMHg4MDgyMDIsCgkJICAgICAgICAgICAgMHg2MDAwMDAwMDogMHg4MDAyMDIsCgkJICAgICAgICAgICAgMHg3MDAwMDAwMDogMHg4MDAwMDAsCgkJICAgICAgICAgICAgMHg4MDAwMDAwMDogMHgyMDIsCgkJICAgICAgICAgICAgMHg5MDAwMDAwMDogMHg4MDAyMDAsCgkJICAgICAgICAgICAgMHhhMDAwMDAwMDogMHg4MjAwLAoJCSAgICAgICAgICAgIDB4YjAwMDAwMDA6IDB4ODA4MDAwLAoJCSAgICAgICAgICAgIDB4YzAwMDAwMDA6IDB4ODAwMiwKCQkgICAgICAgICAgICAweGQwMDAwMDAwOiAweDgwMDAwMiwKCQkgICAgICAgICAgICAweGUwMDAwMDAwOiAweDAsCgkJICAgICAgICAgICAgMHhmMDAwMDAwMDogMHg4MjAyLAoJCSAgICAgICAgICAgIDB4ODAwMDAwMDogMHgwLAoJCSAgICAgICAgICAgIDB4MTgwMDAwMDA6IDB4ODA4MjAyLAoJCSAgICAgICAgICAgIDB4MjgwMDAwMDA6IDB4ODIwMiwKCQkgICAgICAgICAgICAweDM4MDAwMDAwOiAweDgwMDAsCgkJICAgICAgICAgICAgMHg0ODAwMDAwMDogMHg4MDgyMDAsCgkJICAgICAgICAgICAgMHg1ODAwMDAwMDogMHgyMDAsCgkJICAgICAgICAgICAgMHg2ODAwMDAwMDogMHg4MDgwMDIsCgkJICAgICAgICAgICAgMHg3ODAwMDAwMDogMHgyLAoJCSAgICAgICAgICAgIDB4ODgwMDAwMDA6IDB4ODAwMjAwLAoJCSAgICAgICAgICAgIDB4OTgwMDAwMDA6IDB4ODIwMCwKCQkgICAgICAgICAgICAweGE4MDAwMDAwOiAweDgwODAwMCwKCQkgICAgICAgICAgICAweGI4MDAwMDAwOiAweDgwMDIwMiwKCQkgICAgICAgICAgICAweGM4MDAwMDAwOiAweDgwMDAwMiwKCQkgICAgICAgICAgICAweGQ4MDAwMDAwOiAweDgwMDIsCgkJICAgICAgICAgICAgMHhlODAwMDAwMDogMHgyMDIsCgkJICAgICAgICAgICAgMHhmODAwMDAwMDogMHg4MDAwMDAsCgkJICAgICAgICAgICAgMHgxOiAweDgwMDAsCgkJICAgICAgICAgICAgMHgxMDAwMDAwMTogMHgyLAoJCSAgICAgICAgICAgIDB4MjAwMDAwMDE6IDB4ODA4MjAwLAoJCSAgICAgICAgICAgIDB4MzAwMDAwMDE6IDB4ODAwMDAwLAoJCSAgICAgICAgICAgIDB4NDAwMDAwMDE6IDB4ODA4MDAyLAoJCSAgICAgICAgICAgIDB4NTAwMDAwMDE6IDB4ODIwMCwKCQkgICAgICAgICAgICAweDYwMDAwMDAxOiAweDIwMCwKCQkgICAgICAgICAgICAweDcwMDAwMDAxOiAweDgwMDIwMiwKCQkgICAgICAgICAgICAweDgwMDAwMDAxOiAweDgwODIwMiwKCQkgICAgICAgICAgICAweDkwMDAwMDAxOiAweDgwODAwMCwKCQkgICAgICAgICAgICAweGEwMDAwMDAxOiAweDgwMDAwMiwKCQkgICAgICAgICAgICAweGIwMDAwMDAxOiAweDgyMDIsCgkJICAgICAgICAgICAgMHhjMDAwMDAwMTogMHgyMDIsCgkJICAgICAgICAgICAgMHhkMDAwMDAwMTogMHg4MDAyMDAsCgkJICAgICAgICAgICAgMHhlMDAwMDAwMTogMHg4MDAyLAoJCSAgICAgICAgICAgIDB4ZjAwMDAwMDE6IDB4MCwKCQkgICAgICAgICAgICAweDgwMDAwMDE6IDB4ODA4MjAyLAoJCSAgICAgICAgICAgIDB4MTgwMDAwMDE6IDB4ODA4MDAwLAoJCSAgICAgICAgICAgIDB4MjgwMDAwMDE6IDB4ODAwMDAwLAoJCSAgICAgICAgICAgIDB4MzgwMDAwMDE6IDB4MjAwLAoJCSAgICAgICAgICAgIDB4NDgwMDAwMDE6IDB4ODAwMCwKCQkgICAgICAgICAgICAweDU4MDAwMDAxOiAweDgwMDAwMiwKCQkgICAgICAgICAgICAweDY4MDAwMDAxOiAweDIsCgkJICAgICAgICAgICAgMHg3ODAwMDAwMTogMHg4MjAyLAoJCSAgICAgICAgICAgIDB4ODgwMDAwMDE6IDB4ODAwMiwKCQkgICAgICAgICAgICAweDk4MDAwMDAxOiAweDgwMDIwMiwKCQkgICAgICAgICAgICAweGE4MDAwMDAxOiAweDIwMiwKCQkgICAgICAgICAgICAweGI4MDAwMDAxOiAweDgwODIwMCwKCQkgICAgICAgICAgICAweGM4MDAwMDAxOiAweDgwMDIwMCwKCQkgICAgICAgICAgICAweGQ4MDAwMDAxOiAweDAsCgkJICAgICAgICAgICAgMHhlODAwMDAwMTogMHg4MjAwLAoJCSAgICAgICAgICAgIDB4ZjgwMDAwMDE6IDB4ODA4MDAyCgkJICAgICAgICB9LAoJCSAgICAgICAgewoJCSAgICAgICAgICAgIDB4MDogMHg0MDA4NDAxMCwKCQkgICAgICAgICAgICAweDEwMDAwMDA6IDB4NDAwMCwKCQkgICAgICAgICAgICAweDIwMDAwMDA6IDB4ODAwMDAsCgkJICAgICAgICAgICAgMHgzMDAwMDAwOiAweDQwMDgwMDEwLAoJCSAgICAgICAgICAgIDB4NDAwMDAwMDogMHg0MDAwMDAxMCwKCQkgICAgICAgICAgICAweDUwMDAwMDA6IDB4NDAwODQwMDAsCgkJICAgICAgICAgICAgMHg2MDAwMDAwOiAweDQwMDA0MDAwLAoJCSAgICAgICAgICAgIDB4NzAwMDAwMDogMHgxMCwKCQkgICAgICAgICAgICAweDgwMDAwMDA6IDB4ODQwMDAsCgkJICAgICAgICAgICAgMHg5MDAwMDAwOiAweDQwMDA0MDEwLAoJCSAgICAgICAgICAgIDB4YTAwMDAwMDogMHg0MDAwMDAwMCwKCQkgICAgICAgICAgICAweGIwMDAwMDA6IDB4ODQwMTAsCgkJICAgICAgICAgICAgMHhjMDAwMDAwOiAweDgwMDEwLAoJCSAgICAgICAgICAgIDB4ZDAwMDAwMDogMHgwLAoJCSAgICAgICAgICAgIDB4ZTAwMDAwMDogMHg0MDEwLAoJCSAgICAgICAgICAgIDB4ZjAwMDAwMDogMHg0MDA4MDAwMCwKCQkgICAgICAgICAgICAweDgwMDAwMDogMHg0MDAwNDAwMCwKCQkgICAgICAgICAgICAweDE4MDAwMDA6IDB4ODQwMTAsCgkJICAgICAgICAgICAgMHgyODAwMDAwOiAweDEwLAoJCSAgICAgICAgICAgIDB4MzgwMDAwMDogMHg0MDAwNDAxMCwKCQkgICAgICAgICAgICAweDQ4MDAwMDA6IDB4NDAwODQwMTAsCgkJICAgICAgICAgICAgMHg1ODAwMDAwOiAweDQwMDAwMDAwLAoJCSAgICAgICAgICAgIDB4NjgwMDAwMDogMHg4MDAwMCwKCQkgICAgICAgICAgICAweDc4MDAwMDA6IDB4NDAwODAwMTAsCgkJICAgICAgICAgICAgMHg4ODAwMDAwOiAweDgwMDEwLAoJCSAgICAgICAgICAgIDB4OTgwMDAwMDogMHgwLAoJCSAgICAgICAgICAgIDB4YTgwMDAwMDogMHg0MDAwLAoJCSAgICAgICAgICAgIDB4YjgwMDAwMDogMHg0MDA4MDAwMCwKCQkgICAgICAgICAgICAweGM4MDAwMDA6IDB4NDAwMDAwMTAsCgkJICAgICAgICAgICAgMHhkODAwMDAwOiAweDg0MDAwLAoJCSAgICAgICAgICAgIDB4ZTgwMDAwMDogMHg0MDA4NDAwMCwKCQkgICAgICAgICAgICAweGY4MDAwMDA6IDB4NDAxMCwKCQkgICAgICAgICAgICAweDEwMDAwMDAwOiAweDAsCgkJICAgICAgICAgICAgMHgxMTAwMDAwMDogMHg0MDA4MDAxMCwKCQkgICAgICAgICAgICAweDEyMDAwMDAwOiAweDQwMDA0MDEwLAoJCSAgICAgICAgICAgIDB4MTMwMDAwMDA6IDB4NDAwODQwMDAsCgkJICAgICAgICAgICAgMHgxNDAwMDAwMDogMHg0MDA4MDAwMCwKCQkgICAgICAgICAgICAweDE1MDAwMDAwOiAweDEwLAoJCSAgICAgICAgICAgIDB4MTYwMDAwMDA6IDB4ODQwMTAsCgkJICAgICAgICAgICAgMHgxNzAwMDAwMDogMHg0MDAwLAoJCSAgICAgICAgICAgIDB4MTgwMDAwMDA6IDB4NDAxMCwKCQkgICAgICAgICAgICAweDE5MDAwMDAwOiAweDgwMDAwLAoJCSAgICAgICAgICAgIDB4MWEwMDAwMDA6IDB4ODAwMTAsCgkJICAgICAgICAgICAgMHgxYjAwMDAwMDogMHg0MDAwMDAxMCwKCQkgICAgICAgICAgICAweDFjMDAwMDAwOiAweDg0MDAwLAoJCSAgICAgICAgICAgIDB4MWQwMDAwMDA6IDB4NDAwMDQwMDAsCgkJICAgICAgICAgICAgMHgxZTAwMDAwMDogMHg0MDAwMDAwMCwKCQkgICAgICAgICAgICAweDFmMDAwMDAwOiAweDQwMDg0MDEwLAoJCSAgICAgICAgICAgIDB4MTA4MDAwMDA6IDB4ODQwMTAsCgkJICAgICAgICAgICAgMHgxMTgwMDAwMDogMHg4MDAwMCwKCQkgICAgICAgICAgICAweDEyODAwMDAwOiAweDQwMDgwMDAwLAoJCSAgICAgICAgICAgIDB4MTM4MDAwMDA6IDB4NDAwMCwKCQkgICAgICAgICAgICAweDE0ODAwMDAwOiAweDQwMDA0MDAwLAoJCSAgICAgICAgICAgIDB4MTU4MDAwMDA6IDB4NDAwODQwMTAsCgkJICAgICAgICAgICAgMHgxNjgwMDAwMDogMHgxMCwKCQkgICAgICAgICAgICAweDE3ODAwMDAwOiAweDQwMDAwMDAwLAoJCSAgICAgICAgICAgIDB4MTg4MDAwMDA6IDB4NDAwODQwMDAsCgkJICAgICAgICAgICAgMHgxOTgwMDAwMDogMHg0MDAwMDAxMCwKCQkgICAgICAgICAgICAweDFhODAwMDAwOiAweDQwMDA0MDEwLAoJCSAgICAgICAgICAgIDB4MWI4MDAwMDA6IDB4ODAwMTAsCgkJICAgICAgICAgICAgMHgxYzgwMDAwMDogMHgwLAoJCSAgICAgICAgICAgIDB4MWQ4MDAwMDA6IDB4NDAxMCwKCQkgICAgICAgICAgICAweDFlODAwMDAwOiAweDQwMDgwMDEwLAoJCSAgICAgICAgICAgIDB4MWY4MDAwMDA6IDB4ODQwMDAKCQkgICAgICAgIH0sCgkJICAgICAgICB7CgkJICAgICAgICAgICAgMHgwOiAweDEwNCwKCQkgICAgICAgICAgICAweDEwMDAwMDogMHgwLAoJCSAgICAgICAgICAgIDB4MjAwMDAwOiAweDQwMDAxMDAsCgkJICAgICAgICAgICAgMHgzMDAwMDA6IDB4MTAxMDQsCgkJICAgICAgICAgICAgMHg0MDAwMDA6IDB4MTAwMDQsCgkJICAgICAgICAgICAgMHg1MDAwMDA6IDB4NDAwMDAwNCwKCQkgICAgICAgICAgICAweDYwMDAwMDogMHg0MDEwMTA0LAoJCSAgICAgICAgICAgIDB4NzAwMDAwOiAweDQwMTAwMDAsCgkJICAgICAgICAgICAgMHg4MDAwMDA6IDB4NDAwMDAwMCwKCQkgICAgICAgICAgICAweDkwMDAwMDogMHg0MDEwMTAwLAoJCSAgICAgICAgICAgIDB4YTAwMDAwOiAweDEwMTAwLAoJCSAgICAgICAgICAgIDB4YjAwMDAwOiAweDQwMTAwMDQsCgkJICAgICAgICAgICAgMHhjMDAwMDA6IDB4NDAwMDEwNCwKCQkgICAgICAgICAgICAweGQwMDAwMDogMHgxMDAwMCwKCQkgICAgICAgICAgICAweGUwMDAwMDogMHg0LAoJCSAgICAgICAgICAgIDB4ZjAwMDAwOiAweDEwMCwKCQkgICAgICAgICAgICAweDgwMDAwOiAweDQwMTAxMDAsCgkJICAgICAgICAgICAgMHgxODAwMDA6IDB4NDAxMDAwNCwKCQkgICAgICAgICAgICAweDI4MDAwMDogMHgwLAoJCSAgICAgICAgICAgIDB4MzgwMDAwOiAweDQwMDAxMDAsCgkJICAgICAgICAgICAgMHg0ODAwMDA6IDB4NDAwMDAwNCwKCQkgICAgICAgICAgICAweDU4MDAwMDogMHgxMDAwMCwKCQkgICAgICAgICAgICAweDY4MDAwMDogMHgxMDAwNCwKCQkgICAgICAgICAgICAweDc4MDAwMDogMHgxMDQsCgkJICAgICAgICAgICAgMHg4ODAwMDA6IDB4NCwKCQkgICAgICAgICAgICAweDk4MDAwMDogMHgxMDAsCgkJICAgICAgICAgICAgMHhhODAwMDA6IDB4NDAxMDAwMCwKCQkgICAgICAgICAgICAweGI4MDAwMDogMHgxMDEwNCwKCQkgICAgICAgICAgICAweGM4MDAwMDogMHgxMDEwMCwKCQkgICAgICAgICAgICAweGQ4MDAwMDogMHg0MDAwMTA0LAoJCSAgICAgICAgICAgIDB4ZTgwMDAwOiAweDQwMTAxMDQsCgkJICAgICAgICAgICAgMHhmODAwMDA6IDB4NDAwMDAwMCwKCQkgICAgICAgICAgICAweDEwMDAwMDA6IDB4NDAxMDEwMCwKCQkgICAgICAgICAgICAweDExMDAwMDA6IDB4MTAwMDQsCgkJICAgICAgICAgICAgMHgxMjAwMDAwOiAweDEwMDAwLAoJCSAgICAgICAgICAgIDB4MTMwMDAwMDogMHg0MDAwMTAwLAoJCSAgICAgICAgICAgIDB4MTQwMDAwMDogMHgxMDAsCgkJICAgICAgICAgICAgMHgxNTAwMDAwOiAweDQwMTAxMDQsCgkJICAgICAgICAgICAgMHgxNjAwMDAwOiAweDQwMDAwMDQsCgkJICAgICAgICAgICAgMHgxNzAwMDAwOiAweDAsCgkJICAgICAgICAgICAgMHgxODAwMDAwOiAweDQwMDAxMDQsCgkJICAgICAgICAgICAgMHgxOTAwMDAwOiAweDQwMDAwMDAsCgkJICAgICAgICAgICAgMHgxYTAwMDAwOiAweDQsCgkJICAgICAgICAgICAgMHgxYjAwMDAwOiAweDEwMTAwLAoJCSAgICAgICAgICAgIDB4MWMwMDAwMDogMHg0MDEwMDAwLAoJCSAgICAgICAgICAgIDB4MWQwMDAwMDogMHgxMDQsCgkJICAgICAgICAgICAgMHgxZTAwMDAwOiAweDEwMTA0LAoJCSAgICAgICAgICAgIDB4MWYwMDAwMDogMHg0MDEwMDA0LAoJCSAgICAgICAgICAgIDB4MTA4MDAwMDogMHg0MDAwMDAwLAoJCSAgICAgICAgICAgIDB4MTE4MDAwMDogMHgxMDQsCgkJICAgICAgICAgICAgMHgxMjgwMDAwOiAweDQwMTAxMDAsCgkJICAgICAgICAgICAgMHgxMzgwMDAwOiAweDAsCgkJICAgICAgICAgICAgMHgxNDgwMDAwOiAweDEwMDA0LAoJCSAgICAgICAgICAgIDB4MTU4MDAwMDogMHg0MDAwMTAwLAoJCSAgICAgICAgICAgIDB4MTY4MDAwMDogMHgxMDAsCgkJICAgICAgICAgICAgMHgxNzgwMDAwOiAweDQwMTAwMDQsCgkJICAgICAgICAgICAgMHgxODgwMDAwOiAweDEwMDAwLAoJCSAgICAgICAgICAgIDB4MTk4MDAwMDogMHg0MDEwMTA0LAoJCSAgICAgICAgICAgIDB4MWE4MDAwMDogMHgxMDEwNCwKCQkgICAgICAgICAgICAweDFiODAwMDA6IDB4NDAwMDAwNCwKCQkgICAgICAgICAgICAweDFjODAwMDA6IDB4NDAwMDEwNCwKCQkgICAgICAgICAgICAweDFkODAwMDA6IDB4NDAxMDAwMCwKCQkgICAgICAgICAgICAweDFlODAwMDA6IDB4NCwKCQkgICAgICAgICAgICAweDFmODAwMDA6IDB4MTAxMDAKCQkgICAgICAgIH0sCgkJICAgICAgICB7CgkJICAgICAgICAgICAgMHgwOiAweDgwNDAxMDAwLAoJCSAgICAgICAgICAgIDB4MTAwMDA6IDB4ODAwMDEwNDAsCgkJICAgICAgICAgICAgMHgyMDAwMDogMHg0MDEwNDAsCgkJICAgICAgICAgICAgMHgzMDAwMDogMHg4MDQwMDAwMCwKCQkgICAgICAgICAgICAweDQwMDAwOiAweDAsCgkJICAgICAgICAgICAgMHg1MDAwMDogMHg0MDEwMDAsCgkJICAgICAgICAgICAgMHg2MDAwMDogMHg4MDAwMDA0MCwKCQkgICAgICAgICAgICAweDcwMDAwOiAweDQwMDA0MCwKCQkgICAgICAgICAgICAweDgwMDAwOiAweDgwMDAwMDAwLAoJCSAgICAgICAgICAgIDB4OTAwMDA6IDB4NDAwMDAwLAoJCSAgICAgICAgICAgIDB4YTAwMDA6IDB4NDAsCgkJICAgICAgICAgICAgMHhiMDAwMDogMHg4MDAwMTAwMCwKCQkgICAgICAgICAgICAweGMwMDAwOiAweDgwNDAwMDQwLAoJCSAgICAgICAgICAgIDB4ZDAwMDA6IDB4MTA0MCwKCQkgICAgICAgICAgICAweGUwMDAwOiAweDEwMDAsCgkJICAgICAgICAgICAgMHhmMDAwMDogMHg4MDQwMTA0MCwKCQkgICAgICAgICAgICAweDgwMDA6IDB4ODAwMDEwNDAsCgkJICAgICAgICAgICAgMHgxODAwMDogMHg0MCwKCQkgICAgICAgICAgICAweDI4MDAwOiAweDgwNDAwMDQwLAoJCSAgICAgICAgICAgIDB4MzgwMDA6IDB4ODAwMDEwMDAsCgkJICAgICAgICAgICAgMHg0ODAwMDogMHg0MDEwMDAsCgkJICAgICAgICAgICAgMHg1ODAwMDogMHg4MDQwMTA0MCwKCQkgICAgICAgICAgICAweDY4MDAwOiAweDAsCgkJICAgICAgICAgICAgMHg3ODAwMDogMHg4MDQwMDAwMCwKCQkgICAgICAgICAgICAweDg4MDAwOiAweDEwMDAsCgkJICAgICAgICAgICAgMHg5ODAwMDogMHg4MDQwMTAwMCwKCQkgICAgICAgICAgICAweGE4MDAwOiAweDQwMDAwMCwKCQkgICAgICAgICAgICAweGI4MDAwOiAweDEwNDAsCgkJICAgICAgICAgICAgMHhjODAwMDogMHg4MDAwMDAwMCwKCQkgICAgICAgICAgICAweGQ4MDAwOiAweDQwMDA0MCwKCQkgICAgICAgICAgICAweGU4MDAwOiAweDQwMTA0MCwKCQkgICAgICAgICAgICAweGY4MDAwOiAweDgwMDAwMDQwLAoJCSAgICAgICAgICAgIDB4MTAwMDAwOiAweDQwMDA0MCwKCQkgICAgICAgICAgICAweDExMDAwMDogMHg0MDEwMDAsCgkJICAgICAgICAgICAgMHgxMjAwMDA6IDB4ODAwMDAwNDAsCgkJICAgICAgICAgICAgMHgxMzAwMDA6IDB4MCwKCQkgICAgICAgICAgICAweDE0MDAwMDogMHgxMDQwLAoJCSAgICAgICAgICAgIDB4MTUwMDAwOiAweDgwNDAwMDQwLAoJCSAgICAgICAgICAgIDB4MTYwMDAwOiAweDgwNDAxMDAwLAoJCSAgICAgICAgICAgIDB4MTcwMDAwOiAweDgwMDAxMDQwLAoJCSAgICAgICAgICAgIDB4MTgwMDAwOiAweDgwNDAxMDQwLAoJCSAgICAgICAgICAgIDB4MTkwMDAwOiAweDgwMDAwMDAwLAoJCSAgICAgICAgICAgIDB4MWEwMDAwOiAweDgwNDAwMDAwLAoJCSAgICAgICAgICAgIDB4MWIwMDAwOiAweDQwMTA0MCwKCQkgICAgICAgICAgICAweDFjMDAwMDogMHg4MDAwMTAwMCwKCQkgICAgICAgICAgICAweDFkMDAwMDogMHg0MDAwMDAsCgkJICAgICAgICAgICAgMHgxZTAwMDA6IDB4NDAsCgkJICAgICAgICAgICAgMHgxZjAwMDA6IDB4MTAwMCwKCQkgICAgICAgICAgICAweDEwODAwMDogMHg4MDQwMDAwMCwKCQkgICAgICAgICAgICAweDExODAwMDogMHg4MDQwMTA0MCwKCQkgICAgICAgICAgICAweDEyODAwMDogMHgwLAoJCSAgICAgICAgICAgIDB4MTM4MDAwOiAweDQwMTAwMCwKCQkgICAgICAgICAgICAweDE0ODAwMDogMHg0MDAwNDAsCgkJICAgICAgICAgICAgMHgxNTgwMDA6IDB4ODAwMDAwMDAsCgkJICAgICAgICAgICAgMHgxNjgwMDA6IDB4ODAwMDEwNDAsCgkJICAgICAgICAgICAgMHgxNzgwMDA6IDB4NDAsCgkJICAgICAgICAgICAgMHgxODgwMDA6IDB4ODAwMDAwNDAsCgkJICAgICAgICAgICAgMHgxOTgwMDA6IDB4MTAwMCwKCQkgICAgICAgICAgICAweDFhODAwMDogMHg4MDAwMTAwMCwKCQkgICAgICAgICAgICAweDFiODAwMDogMHg4MDQwMDA0MCwKCQkgICAgICAgICAgICAweDFjODAwMDogMHgxMDQwLAoJCSAgICAgICAgICAgIDB4MWQ4MDAwOiAweDgwNDAxMDAwLAoJCSAgICAgICAgICAgIDB4MWU4MDAwOiAweDQwMDAwMCwKCQkgICAgICAgICAgICAweDFmODAwMDogMHg0MDEwNDAKCQkgICAgICAgIH0sCgkJICAgICAgICB7CgkJICAgICAgICAgICAgMHgwOiAweDgwLAoJCSAgICAgICAgICAgIDB4MTAwMDogMHgxMDQwMDAwLAoJCSAgICAgICAgICAgIDB4MjAwMDogMHg0MDAwMCwKCQkgICAgICAgICAgICAweDMwMDA6IDB4MjAwMDAwMDAsCgkJICAgICAgICAgICAgMHg0MDAwOiAweDIwMDQwMDgwLAoJCSAgICAgICAgICAgIDB4NTAwMDogMHgxMDAwMDgwLAoJCSAgICAgICAgICAgIDB4NjAwMDogMHgyMTAwMDA4MCwKCQkgICAgICAgICAgICAweDcwMDA6IDB4NDAwODAsCgkJICAgICAgICAgICAgMHg4MDAwOiAweDEwMDAwMDAsCgkJICAgICAgICAgICAgMHg5MDAwOiAweDIwMDQwMDAwLAoJCSAgICAgICAgICAgIDB4YTAwMDogMHgyMDAwMDA4MCwKCQkgICAgICAgICAgICAweGIwMDA6IDB4MjEwNDAwODAsCgkJICAgICAgICAgICAgMHhjMDAwOiAweDIxMDQwMDAwLAoJCSAgICAgICAgICAgIDB4ZDAwMDogMHgwLAoJCSAgICAgICAgICAgIDB4ZTAwMDogMHgxMDQwMDgwLAoJCSAgICAgICAgICAgIDB4ZjAwMDogMHgyMTAwMDAwMCwKCQkgICAgICAgICAgICAweDgwMDogMHgxMDQwMDgwLAoJCSAgICAgICAgICAgIDB4MTgwMDogMHgyMTAwMDA4MCwKCQkgICAgICAgICAgICAweDI4MDA6IDB4ODAsCgkJICAgICAgICAgICAgMHgzODAwOiAweDEwNDAwMDAsCgkJICAgICAgICAgICAgMHg0ODAwOiAweDQwMDAwLAoJCSAgICAgICAgICAgIDB4NTgwMDogMHgyMDA0MDA4MCwKCQkgICAgICAgICAgICAweDY4MDA6IDB4MjEwNDAwMDAsCgkJICAgICAgICAgICAgMHg3ODAwOiAweDIwMDAwMDAwLAoJCSAgICAgICAgICAgIDB4ODgwMDogMHgyMDA0MDAwMCwKCQkgICAgICAgICAgICAweDk4MDA6IDB4MCwKCQkgICAgICAgICAgICAweGE4MDA6IDB4MjEwNDAwODAsCgkJICAgICAgICAgICAgMHhiODAwOiAweDEwMDAwODAsCgkJICAgICAgICAgICAgMHhjODAwOiAweDIwMDAwMDgwLAoJCSAgICAgICAgICAgIDB4ZDgwMDogMHgyMTAwMDAwMCwKCQkgICAgICAgICAgICAweGU4MDA6IDB4MTAwMDAwMCwKCQkgICAgICAgICAgICAweGY4MDA6IDB4NDAwODAsCgkJICAgICAgICAgICAgMHgxMDAwMDogMHg0MDAwMCwKCQkgICAgICAgICAgICAweDExMDAwOiAweDgwLAoJCSAgICAgICAgICAgIDB4MTIwMDA6IDB4MjAwMDAwMDAsCgkJICAgICAgICAgICAgMHgxMzAwMDogMHgyMTAwMDA4MCwKCQkgICAgICAgICAgICAweDE0MDAwOiAweDEwMDAwODAsCgkJICAgICAgICAgICAgMHgxNTAwMDogMHgyMTA0MDAwMCwKCQkgICAgICAgICAgICAweDE2MDAwOiAweDIwMDQwMDgwLAoJCSAgICAgICAgICAgIDB4MTcwMDA6IDB4MTAwMDAwMCwKCQkgICAgICAgICAgICAweDE4MDAwOiAweDIxMDQwMDgwLAoJCSAgICAgICAgICAgIDB4MTkwMDA6IDB4MjEwMDAwMDAsCgkJICAgICAgICAgICAgMHgxYTAwMDogMHgxMDQwMDAwLAoJCSAgICAgICAgICAgIDB4MWIwMDA6IDB4MjAwNDAwMDAsCgkJICAgICAgICAgICAgMHgxYzAwMDogMHg0MDA4MCwKCQkgICAgICAgICAgICAweDFkMDAwOiAweDIwMDAwMDgwLAoJCSAgICAgICAgICAgIDB4MWUwMDA6IDB4MCwKCQkgICAgICAgICAgICAweDFmMDAwOiAweDEwNDAwODAsCgkJICAgICAgICAgICAgMHgxMDgwMDogMHgyMTAwMDA4MCwKCQkgICAgICAgICAgICAweDExODAwOiAweDEwMDAwMDAsCgkJICAgICAgICAgICAgMHgxMjgwMDogMHgxMDQwMDAwLAoJCSAgICAgICAgICAgIDB4MTM4MDA6IDB4MjAwNDAwODAsCgkJICAgICAgICAgICAgMHgxNDgwMDogMHgyMDAwMDAwMCwKCQkgICAgICAgICAgICAweDE1ODAwOiAweDEwNDAwODAsCgkJICAgICAgICAgICAgMHgxNjgwMDogMHg4MCwKCQkgICAgICAgICAgICAweDE3ODAwOiAweDIxMDQwMDAwLAoJCSAgICAgICAgICAgIDB4MTg4MDA6IDB4NDAwODAsCgkJICAgICAgICAgICAgMHgxOTgwMDogMHgyMTA0MDA4MCwKCQkgICAgICAgICAgICAweDFhODAwOiAweDAsCgkJICAgICAgICAgICAgMHgxYjgwMDogMHgyMTAwMDAwMCwKCQkgICAgICAgICAgICAweDFjODAwOiAweDEwMDAwODAsCgkJICAgICAgICAgICAgMHgxZDgwMDogMHg0MDAwMCwKCQkgICAgICAgICAgICAweDFlODAwOiAweDIwMDQwMDAwLAoJCSAgICAgICAgICAgIDB4MWY4MDA6IDB4MjAwMDAwODAKCQkgICAgICAgIH0sCgkJICAgICAgICB7CgkJICAgICAgICAgICAgMHgwOiAweDEwMDAwMDA4LAoJCSAgICAgICAgICAgIDB4MTAwOiAweDIwMDAsCgkJICAgICAgICAgICAgMHgyMDA6IDB4MTAyMDAwMDAsCgkJICAgICAgICAgICAgMHgzMDA6IDB4MTAyMDIwMDgsCgkJICAgICAgICAgICAgMHg0MDA6IDB4MTAwMDIwMDAsCgkJICAgICAgICAgICAgMHg1MDA6IDB4MjAwMDAwLAoJCSAgICAgICAgICAgIDB4NjAwOiAweDIwMDAwOCwKCQkgICAgICAgICAgICAweDcwMDogMHgxMDAwMDAwMCwKCQkgICAgICAgICAgICAweDgwMDogMHgwLAoJCSAgICAgICAgICAgIDB4OTAwOiAweDEwMDAyMDA4LAoJCSAgICAgICAgICAgIDB4YTAwOiAweDIwMjAwMCwKCQkgICAgICAgICAgICAweGIwMDogMHg4LAoJCSAgICAgICAgICAgIDB4YzAwOiAweDEwMjAwMDA4LAoJCSAgICAgICAgICAgIDB4ZDAwOiAweDIwMjAwOCwKCQkgICAgICAgICAgICAweGUwMDogMHgyMDA4LAoJCSAgICAgICAgICAgIDB4ZjAwOiAweDEwMjAyMDAwLAoJCSAgICAgICAgICAgIDB4ODA6IDB4MTAyMDAwMDAsCgkJICAgICAgICAgICAgMHgxODA6IDB4MTAyMDIwMDgsCgkJICAgICAgICAgICAgMHgyODA6IDB4OCwKCQkgICAgICAgICAgICAweDM4MDogMHgyMDAwMDAsCgkJICAgICAgICAgICAgMHg0ODA6IDB4MjAyMDA4LAoJCSAgICAgICAgICAgIDB4NTgwOiAweDEwMDAwMDA4LAoJCSAgICAgICAgICAgIDB4NjgwOiAweDEwMDAyMDAwLAoJCSAgICAgICAgICAgIDB4NzgwOiAweDIwMDgsCgkJICAgICAgICAgICAgMHg4ODA6IDB4MjAwMDA4LAoJCSAgICAgICAgICAgIDB4OTgwOiAweDIwMDAsCgkJICAgICAgICAgICAgMHhhODA6IDB4MTAwMDIwMDgsCgkJICAgICAgICAgICAgMHhiODA6IDB4MTAyMDAwMDgsCgkJICAgICAgICAgICAgMHhjODA6IDB4MCwKCQkgICAgICAgICAgICAweGQ4MDogMHgxMDIwMjAwMCwKCQkgICAgICAgICAgICAweGU4MDogMHgyMDIwMDAsCgkJICAgICAgICAgICAgMHhmODA6IDB4MTAwMDAwMDAsCgkJICAgICAgICAgICAgMHgxMDAwOiAweDEwMDAyMDAwLAoJCSAgICAgICAgICAgIDB4MTEwMDogMHgxMDIwMDAwOCwKCQkgICAgICAgICAgICAweDEyMDA6IDB4MTAyMDIwMDgsCgkJICAgICAgICAgICAgMHgxMzAwOiAweDIwMDgsCgkJICAgICAgICAgICAgMHgxNDAwOiAweDIwMDAwMCwKCQkgICAgICAgICAgICAweDE1MDA6IDB4MTAwMDAwMDAsCgkJICAgICAgICAgICAgMHgxNjAwOiAweDEwMDAwMDA4LAoJCSAgICAgICAgICAgIDB4MTcwMDogMHgyMDIwMDAsCgkJICAgICAgICAgICAgMHgxODAwOiAweDIwMjAwOCwKCQkgICAgICAgICAgICAweDE5MDA6IDB4MCwKCQkgICAgICAgICAgICAweDFhMDA6IDB4OCwKCQkgICAgICAgICAgICAweDFiMDA6IDB4MTAyMDAwMDAsCgkJICAgICAgICAgICAgMHgxYzAwOiAweDIwMDAsCgkJICAgICAgICAgICAgMHgxZDAwOiAweDEwMDAyMDA4LAoJCSAgICAgICAgICAgIDB4MWUwMDogMHgxMDIwMjAwMCwKCQkgICAgICAgICAgICAweDFmMDA6IDB4MjAwMDA4LAoJCSAgICAgICAgICAgIDB4MTA4MDogMHg4LAoJCSAgICAgICAgICAgIDB4MTE4MDogMHgyMDIwMDAsCgkJICAgICAgICAgICAgMHgxMjgwOiAweDIwMDAwMCwKCQkgICAgICAgICAgICAweDEzODA6IDB4MTAwMDAwMDgsCgkJICAgICAgICAgICAgMHgxNDgwOiAweDEwMDAyMDAwLAoJCSAgICAgICAgICAgIDB4MTU4MDogMHgyMDA4LAoJCSAgICAgICAgICAgIDB4MTY4MDogMHgxMDIwMjAwOCwKCQkgICAgICAgICAgICAweDE3ODA6IDB4MTAyMDAwMDAsCgkJICAgICAgICAgICAgMHgxODgwOiAweDEwMjAyMDAwLAoJCSAgICAgICAgICAgIDB4MTk4MDogMHgxMDIwMDAwOCwKCQkgICAgICAgICAgICAweDFhODA6IDB4MjAwMCwKCQkgICAgICAgICAgICAweDFiODA6IDB4MjAyMDA4LAoJCSAgICAgICAgICAgIDB4MWM4MDogMHgyMDAwMDgsCgkJICAgICAgICAgICAgMHgxZDgwOiAweDAsCgkJICAgICAgICAgICAgMHgxZTgwOiAweDEwMDAwMDAwLAoJCSAgICAgICAgICAgIDB4MWY4MDogMHgxMDAwMjAwOAoJCSAgICAgICAgfSwKCQkgICAgICAgIHsKCQkgICAgICAgICAgICAweDA6IDB4MTAwMDAwLAoJCSAgICAgICAgICAgIDB4MTA6IDB4MjAwMDQwMSwKCQkgICAgICAgICAgICAweDIwOiAweDQwMCwKCQkgICAgICAgICAgICAweDMwOiAweDEwMDQwMSwKCQkgICAgICAgICAgICAweDQwOiAweDIxMDA0MDEsCgkJICAgICAgICAgICAgMHg1MDogMHgwLAoJCSAgICAgICAgICAgIDB4NjA6IDB4MSwKCQkgICAgICAgICAgICAweDcwOiAweDIxMDAwMDEsCgkJICAgICAgICAgICAgMHg4MDogMHgyMDAwNDAwLAoJCSAgICAgICAgICAgIDB4OTA6IDB4MTAwMDAxLAoJCSAgICAgICAgICAgIDB4YTA6IDB4MjAwMDAwMSwKCQkgICAgICAgICAgICAweGIwOiAweDIxMDA0MDAsCgkJICAgICAgICAgICAgMHhjMDogMHgyMTAwMDAwLAoJCSAgICAgICAgICAgIDB4ZDA6IDB4NDAxLAoJCSAgICAgICAgICAgIDB4ZTA6IDB4MTAwNDAwLAoJCSAgICAgICAgICAgIDB4ZjA6IDB4MjAwMDAwMCwKCQkgICAgICAgICAgICAweDg6IDB4MjEwMDAwMSwKCQkgICAgICAgICAgICAweDE4OiAweDAsCgkJICAgICAgICAgICAgMHgyODogMHgyMDAwNDAxLAoJCSAgICAgICAgICAgIDB4Mzg6IDB4MjEwMDQwMCwKCQkgICAgICAgICAgICAweDQ4OiAweDEwMDAwMCwKCQkgICAgICAgICAgICAweDU4OiAweDIwMDAwMDEsCgkJICAgICAgICAgICAgMHg2ODogMHgyMDAwMDAwLAoJCSAgICAgICAgICAgIDB4Nzg6IDB4NDAxLAoJCSAgICAgICAgICAgIDB4ODg6IDB4MTAwNDAxLAoJCSAgICAgICAgICAgIDB4OTg6IDB4MjAwMDQwMCwKCQkgICAgICAgICAgICAweGE4OiAweDIxMDAwMDAsCgkJICAgICAgICAgICAgMHhiODogMHgxMDAwMDEsCgkJICAgICAgICAgICAgMHhjODogMHg0MDAsCgkJICAgICAgICAgICAgMHhkODogMHgyMTAwNDAxLAoJCSAgICAgICAgICAgIDB4ZTg6IDB4MSwKCQkgICAgICAgICAgICAweGY4OiAweDEwMDQwMCwKCQkgICAgICAgICAgICAweDEwMDogMHgyMDAwMDAwLAoJCSAgICAgICAgICAgIDB4MTEwOiAweDEwMDAwMCwKCQkgICAgICAgICAgICAweDEyMDogMHgyMDAwNDAxLAoJCSAgICAgICAgICAgIDB4MTMwOiAweDIxMDAwMDEsCgkJICAgICAgICAgICAgMHgxNDA6IDB4MTAwMDAxLAoJCSAgICAgICAgICAgIDB4MTUwOiAweDIwMDA0MDAsCgkJICAgICAgICAgICAgMHgxNjA6IDB4MjEwMDQwMCwKCQkgICAgICAgICAgICAweDE3MDogMHgxMDA0MDEsCgkJICAgICAgICAgICAgMHgxODA6IDB4NDAxLAoJCSAgICAgICAgICAgIDB4MTkwOiAweDIxMDA0MDEsCgkJICAgICAgICAgICAgMHgxYTA6IDB4MTAwNDAwLAoJCSAgICAgICAgICAgIDB4MWIwOiAweDEsCgkJICAgICAgICAgICAgMHgxYzA6IDB4MCwKCQkgICAgICAgICAgICAweDFkMDogMHgyMTAwMDAwLAoJCSAgICAgICAgICAgIDB4MWUwOiAweDIwMDAwMDEsCgkJICAgICAgICAgICAgMHgxZjA6IDB4NDAwLAoJCSAgICAgICAgICAgIDB4MTA4OiAweDEwMDQwMCwKCQkgICAgICAgICAgICAweDExODogMHgyMDAwNDAxLAoJCSAgICAgICAgICAgIDB4MTI4OiAweDIxMDAwMDEsCgkJICAgICAgICAgICAgMHgxMzg6IDB4MSwKCQkgICAgICAgICAgICAweDE0ODogMHgyMDAwMDAwLAoJCSAgICAgICAgICAgIDB4MTU4OiAweDEwMDAwMCwKCQkgICAgICAgICAgICAweDE2ODogMHg0MDEsCgkJICAgICAgICAgICAgMHgxNzg6IDB4MjEwMDQwMCwKCQkgICAgICAgICAgICAweDE4ODogMHgyMDAwMDAxLAoJCSAgICAgICAgICAgIDB4MTk4OiAweDIxMDAwMDAsCgkJICAgICAgICAgICAgMHgxYTg6IDB4MCwKCQkgICAgICAgICAgICAweDFiODogMHgyMTAwNDAxLAoJCSAgICAgICAgICAgIDB4MWM4OiAweDEwMDQwMSwKCQkgICAgICAgICAgICAweDFkODogMHg0MDAsCgkJICAgICAgICAgICAgMHgxZTg6IDB4MjAwMDQwMCwKCQkgICAgICAgICAgICAweDFmODogMHgxMDAwMDEKCQkgICAgICAgIH0sCgkJICAgICAgICB7CgkJICAgICAgICAgICAgMHgwOiAweDgwMDA4MjAsCgkJICAgICAgICAgICAgMHgxOiAweDIwMDAwLAoJCSAgICAgICAgICAgIDB4MjogMHg4MDAwMDAwLAoJCSAgICAgICAgICAgIDB4MzogMHgyMCwKCQkgICAgICAgICAgICAweDQ6IDB4MjAwMjAsCgkJICAgICAgICAgICAgMHg1OiAweDgwMjA4MjAsCgkJICAgICAgICAgICAgMHg2OiAweDgwMjA4MDAsCgkJICAgICAgICAgICAgMHg3OiAweDgwMCwKCQkgICAgICAgICAgICAweDg6IDB4ODAyMDAwMCwKCQkgICAgICAgICAgICAweDk6IDB4ODAwMDgwMCwKCQkgICAgICAgICAgICAweGE6IDB4MjA4MDAsCgkJICAgICAgICAgICAgMHhiOiAweDgwMjAwMjAsCgkJICAgICAgICAgICAgMHhjOiAweDgyMCwKCQkgICAgICAgICAgICAweGQ6IDB4MCwKCQkgICAgICAgICAgICAweGU6IDB4ODAwMDAyMCwKCQkgICAgICAgICAgICAweGY6IDB4MjA4MjAsCgkJICAgICAgICAgICAgMHg4MDAwMDAwMDogMHg4MDAsCgkJICAgICAgICAgICAgMHg4MDAwMDAwMTogMHg4MDIwODIwLAoJCSAgICAgICAgICAgIDB4ODAwMDAwMDI6IDB4ODAwMDgyMCwKCQkgICAgICAgICAgICAweDgwMDAwMDAzOiAweDgwMDAwMDAsCgkJICAgICAgICAgICAgMHg4MDAwMDAwNDogMHg4MDIwMDAwLAoJCSAgICAgICAgICAgIDB4ODAwMDAwMDU6IDB4MjA4MDAsCgkJICAgICAgICAgICAgMHg4MDAwMDAwNjogMHgyMDgyMCwKCQkgICAgICAgICAgICAweDgwMDAwMDA3OiAweDIwLAoJCSAgICAgICAgICAgIDB4ODAwMDAwMDg6IDB4ODAwMDAyMCwKCQkgICAgICAgICAgICAweDgwMDAwMDA5OiAweDgyMCwKCQkgICAgICAgICAgICAweDgwMDAwMDBhOiAweDIwMDIwLAoJCSAgICAgICAgICAgIDB4ODAwMDAwMGI6IDB4ODAyMDgwMCwKCQkgICAgICAgICAgICAweDgwMDAwMDBjOiAweDAsCgkJICAgICAgICAgICAgMHg4MDAwMDAwZDogMHg4MDIwMDIwLAoJCSAgICAgICAgICAgIDB4ODAwMDAwMGU6IDB4ODAwMDgwMCwKCQkgICAgICAgICAgICAweDgwMDAwMDBmOiAweDIwMDAwLAoJCSAgICAgICAgICAgIDB4MTA6IDB4MjA4MjAsCgkJICAgICAgICAgICAgMHgxMTogMHg4MDIwODAwLAoJCSAgICAgICAgICAgIDB4MTI6IDB4MjAsCgkJICAgICAgICAgICAgMHgxMzogMHg4MDAsCgkJICAgICAgICAgICAgMHgxNDogMHg4MDAwODAwLAoJCSAgICAgICAgICAgIDB4MTU6IDB4ODAwMDAyMCwKCQkgICAgICAgICAgICAweDE2OiAweDgwMjAwMjAsCgkJICAgICAgICAgICAgMHgxNzogMHgyMDAwMCwKCQkgICAgICAgICAgICAweDE4OiAweDAsCgkJICAgICAgICAgICAgMHgxOTogMHgyMDAyMCwKCQkgICAgICAgICAgICAweDFhOiAweDgwMjAwMDAsCgkJICAgICAgICAgICAgMHgxYjogMHg4MDAwODIwLAoJCSAgICAgICAgICAgIDB4MWM6IDB4ODAyMDgyMCwKCQkgICAgICAgICAgICAweDFkOiAweDIwODAwLAoJCSAgICAgICAgICAgIDB4MWU6IDB4ODIwLAoJCSAgICAgICAgICAgIDB4MWY6IDB4ODAwMDAwMCwKCQkgICAgICAgICAgICAweDgwMDAwMDEwOiAweDIwMDAwLAoJCSAgICAgICAgICAgIDB4ODAwMDAwMTE6IDB4ODAwLAoJCSAgICAgICAgICAgIDB4ODAwMDAwMTI6IDB4ODAyMDAyMCwKCQkgICAgICAgICAgICAweDgwMDAwMDEzOiAweDIwODIwLAoJCSAgICAgICAgICAgIDB4ODAwMDAwMTQ6IDB4MjAsCgkJICAgICAgICAgICAgMHg4MDAwMDAxNTogMHg4MDIwMDAwLAoJCSAgICAgICAgICAgIDB4ODAwMDAwMTY6IDB4ODAwMDAwMCwKCQkgICAgICAgICAgICAweDgwMDAwMDE3OiAweDgwMDA4MjAsCgkJICAgICAgICAgICAgMHg4MDAwMDAxODogMHg4MDIwODIwLAoJCSAgICAgICAgICAgIDB4ODAwMDAwMTk6IDB4ODAwMDAyMCwKCQkgICAgICAgICAgICAweDgwMDAwMDFhOiAweDgwMDA4MDAsCgkJICAgICAgICAgICAgMHg4MDAwMDAxYjogMHgwLAoJCSAgICAgICAgICAgIDB4ODAwMDAwMWM6IDB4MjA4MDAsCgkJICAgICAgICAgICAgMHg4MDAwMDAxZDogMHg4MjAsCgkJICAgICAgICAgICAgMHg4MDAwMDAxZTogMHgyMDAyMCwKCQkgICAgICAgICAgICAweDgwMDAwMDFmOiAweDgwMjA4MDAKCQkgICAgICAgIH0KCQkgICAgXTsKCgkJICAgIC8vIE1hc2tzIHRoYXQgc2VsZWN0IHRoZSBTQk9YIGlucHV0CgkJICAgIHZhciBTQk9YX01BU0sgPSBbCgkJICAgICAgICAweGY4MDAwMDAxLCAweDFmODAwMDAwLCAweDAxZjgwMDAwLCAweDAwMWY4MDAwLAoJCSAgICAgICAgMHgwMDAxZjgwMCwgMHgwMDAwMWY4MCwgMHgwMDAwMDFmOCwgMHg4MDAwMDAxZgoJCSAgICBdOwoKCQkgICAgLyoqCgkJICAgICAqIERFUyBibG9jayBjaXBoZXIgYWxnb3JpdGhtLgoJCSAgICAgKi8KCQkgICAgdmFyIERFUyA9IENfYWxnby5ERVMgPSBCbG9ja0NpcGhlci5leHRlbmQoewoJCSAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHsKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5OwoJCSAgICAgICAgICAgIHZhciBrZXlXb3JkcyA9IGtleS53b3JkczsKCgkJICAgICAgICAgICAgLy8gU2VsZWN0IDU2IGJpdHMgYWNjb3JkaW5nIHRvIFBDMQoJCSAgICAgICAgICAgIHZhciBrZXlCaXRzID0gW107CgkJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA1NjsgaSsrKSB7CgkJICAgICAgICAgICAgICAgIHZhciBrZXlCaXRQb3MgPSBQQzFbaV0gLSAxOwoJCSAgICAgICAgICAgICAgICBrZXlCaXRzW2ldID0gKGtleVdvcmRzW2tleUJpdFBvcyA+Pj4gNV0gPj4+ICgzMSAtIGtleUJpdFBvcyAlIDMyKSkgJiAxOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgLy8gQXNzZW1ibGUgMTYgc3Via2V5cwoJCSAgICAgICAgICAgIHZhciBzdWJLZXlzID0gdGhpcy5fc3ViS2V5cyA9IFtdOwoJCSAgICAgICAgICAgIGZvciAodmFyIG5TdWJLZXkgPSAwOyBuU3ViS2V5IDwgMTY7IG5TdWJLZXkrKykgewoJCSAgICAgICAgICAgICAgICAvLyBDcmVhdGUgc3Via2V5CgkJICAgICAgICAgICAgICAgIHZhciBzdWJLZXkgPSBzdWJLZXlzW25TdWJLZXldID0gW107CgoJCSAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dAoJCSAgICAgICAgICAgICAgICB2YXIgYml0U2hpZnQgPSBCSVRfU0hJRlRTW25TdWJLZXldOwoKCQkgICAgICAgICAgICAgICAgLy8gU2VsZWN0IDQ4IGJpdHMgYWNjb3JkaW5nIHRvIFBDMgoJCSAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI0OyBpKyspIHsKCQkgICAgICAgICAgICAgICAgICAgIC8vIFNlbGVjdCBmcm9tIHRoZSBsZWZ0IDI4IGtleSBiaXRzCgkJICAgICAgICAgICAgICAgICAgICBzdWJLZXlbKGkgLyA2KSB8IDBdIHw9IGtleUJpdHNbKChQQzJbaV0gLSAxKSArIGJpdFNoaWZ0KSAlIDI4XSA8PCAoMzEgLSBpICUgNik7CgoJCSAgICAgICAgICAgICAgICAgICAgLy8gU2VsZWN0IGZyb20gdGhlIHJpZ2h0IDI4IGtleSBiaXRzCgkJICAgICAgICAgICAgICAgICAgICBzdWJLZXlbNCArICgoaSAvIDYpIHwgMCldIHw9IGtleUJpdHNbMjggKyAoKChQQzJbaSArIDI0XSAtIDEpICsgYml0U2hpZnQpICUgMjgpXSA8PCAoMzEgLSBpICUgNik7CgkJICAgICAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgICAgIC8vIFNpbmNlIGVhY2ggc3Via2V5IGlzIGFwcGxpZWQgdG8gYW4gZXhwYW5kZWQgMzItYml0IGlucHV0LAoJCSAgICAgICAgICAgICAgICAvLyB0aGUgc3Via2V5IGNhbiBiZSBicm9rZW4gaW50byA4IHZhbHVlcyBzY2FsZWQgdG8gMzItYml0cywKCQkgICAgICAgICAgICAgICAgLy8gd2hpY2ggYWxsb3dzIHRoZSBrZXkgdG8gYmUgdXNlZCB3aXRob3V0IGV4cGFuc2lvbgoJCSAgICAgICAgICAgICAgICBzdWJLZXlbMF0gPSAoc3ViS2V5WzBdIDw8IDEpIHwgKHN1YktleVswXSA+Pj4gMzEpOwoJCSAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IDc7IGkrKykgewoJCSAgICAgICAgICAgICAgICAgICAgc3ViS2V5W2ldID0gc3ViS2V5W2ldID4+PiAoKGkgLSAxKSAqIDQgKyAzKTsKCQkgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgICAgICBzdWJLZXlbN10gPSAoc3ViS2V5WzddIDw8IDUpIHwgKHN1YktleVs3XSA+Pj4gMjcpOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgLy8gQ29tcHV0ZSBpbnZlcnNlIHN1YmtleXMKCQkgICAgICAgICAgICB2YXIgaW52U3ViS2V5cyA9IHRoaXMuX2ludlN1YktleXMgPSBbXTsKCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHsKCQkgICAgICAgICAgICAgICAgaW52U3ViS2V5c1tpXSA9IHN1YktleXNbMTUgLSBpXTsKCQkgICAgICAgICAgICB9CgkJICAgICAgICB9LAoKCQkgICAgICAgIGVuY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkgewoJCSAgICAgICAgICAgIHRoaXMuX2RvQ3J5cHRCbG9jayhNLCBvZmZzZXQsIHRoaXMuX3N1YktleXMpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICBkZWNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHsKCQkgICAgICAgICAgICB0aGlzLl9kb0NyeXB0QmxvY2soTSwgb2Zmc2V0LCB0aGlzLl9pbnZTdWJLZXlzKTsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgX2RvQ3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCwgc3ViS2V5cykgewoJCSAgICAgICAgICAgIC8vIEdldCBpbnB1dAoJCSAgICAgICAgICAgIHRoaXMuX2xCbG9jayA9IE1bb2Zmc2V0XTsKCQkgICAgICAgICAgICB0aGlzLl9yQmxvY2sgPSBNW29mZnNldCArIDFdOwoKCQkgICAgICAgICAgICAvLyBJbml0aWFsIHBlcm11dGF0aW9uCgkJICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDQsICAweDBmMGYwZjBmKTsKCQkgICAgICAgICAgICBleGNoYW5nZUxSLmNhbGwodGhpcywgMTYsIDB4MDAwMGZmZmYpOwoJCSAgICAgICAgICAgIGV4Y2hhbmdlUkwuY2FsbCh0aGlzLCAyLCAgMHgzMzMzMzMzMyk7CgkJICAgICAgICAgICAgZXhjaGFuZ2VSTC5jYWxsKHRoaXMsIDgsICAweDAwZmYwMGZmKTsKCQkgICAgICAgICAgICBleGNoYW5nZUxSLmNhbGwodGhpcywgMSwgIDB4NTU1NTU1NTUpOwoKCQkgICAgICAgICAgICAvLyBSb3VuZHMKCQkgICAgICAgICAgICBmb3IgKHZhciByb3VuZCA9IDA7IHJvdW5kIDwgMTY7IHJvdW5kKyspIHsKCQkgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgICAgIHZhciBzdWJLZXkgPSBzdWJLZXlzW3JvdW5kXTsKCQkgICAgICAgICAgICAgICAgdmFyIGxCbG9jayA9IHRoaXMuX2xCbG9jazsKCQkgICAgICAgICAgICAgICAgdmFyIHJCbG9jayA9IHRoaXMuX3JCbG9jazsKCgkJICAgICAgICAgICAgICAgIC8vIEZlaXN0ZWwgZnVuY3Rpb24KCQkgICAgICAgICAgICAgICAgdmFyIGYgPSAwOwoJCSAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykgewoJCSAgICAgICAgICAgICAgICAgICAgZiB8PSBTQk9YX1BbaV1bKChyQmxvY2sgXiBzdWJLZXlbaV0pICYgU0JPWF9NQVNLW2ldKSA+Pj4gMF07CgkJICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICAgICAgdGhpcy5fbEJsb2NrID0gckJsb2NrOwoJCSAgICAgICAgICAgICAgICB0aGlzLl9yQmxvY2sgPSBsQmxvY2sgXiBmOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgLy8gVW5kbyBzd2FwIGZyb20gbGFzdCByb3VuZAoJCSAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fbEJsb2NrOwoJCSAgICAgICAgICAgIHRoaXMuX2xCbG9jayA9IHRoaXMuX3JCbG9jazsKCQkgICAgICAgICAgICB0aGlzLl9yQmxvY2sgPSB0OwoKCQkgICAgICAgICAgICAvLyBGaW5hbCBwZXJtdXRhdGlvbgoJCSAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxLCAgMHg1NTU1NTU1NSk7CgkJICAgICAgICAgICAgZXhjaGFuZ2VSTC5jYWxsKHRoaXMsIDgsICAweDAwZmYwMGZmKTsKCQkgICAgICAgICAgICBleGNoYW5nZVJMLmNhbGwodGhpcywgMiwgIDB4MzMzMzMzMzMpOwoJCSAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxNiwgMHgwMDAwZmZmZik7CgkJICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDQsICAweDBmMGYwZjBmKTsKCgkJICAgICAgICAgICAgLy8gU2V0IG91dHB1dAoJCSAgICAgICAgICAgIE1bb2Zmc2V0XSA9IHRoaXMuX2xCbG9jazsKCQkgICAgICAgICAgICBNW29mZnNldCArIDFdID0gdGhpcy5fckJsb2NrOwoJCSAgICAgICAgfSwKCgkJICAgICAgICBrZXlTaXplOiA2NC8zMiwKCgkJICAgICAgICBpdlNpemU6IDY0LzMyLAoKCQkgICAgICAgIGJsb2NrU2l6ZTogNjQvMzIKCQkgICAgfSk7CgoJCSAgICAvLyBTd2FwIGJpdHMgYWNyb3NzIHRoZSBsZWZ0IGFuZCByaWdodCB3b3JkcwoJCSAgICBmdW5jdGlvbiBleGNoYW5nZUxSKG9mZnNldCwgbWFzaykgewoJCSAgICAgICAgdmFyIHQgPSAoKHRoaXMuX2xCbG9jayA+Pj4gb2Zmc2V0KSBeIHRoaXMuX3JCbG9jaykgJiBtYXNrOwoJCSAgICAgICAgdGhpcy5fckJsb2NrIF49IHQ7CgkJICAgICAgICB0aGlzLl9sQmxvY2sgXj0gdCA8PCBvZmZzZXQ7CgkJICAgIH0KCgkJICAgIGZ1bmN0aW9uIGV4Y2hhbmdlUkwob2Zmc2V0LCBtYXNrKSB7CgkJICAgICAgICB2YXIgdCA9ICgodGhpcy5fckJsb2NrID4+PiBvZmZzZXQpIF4gdGhpcy5fbEJsb2NrKSAmIG1hc2s7CgkJICAgICAgICB0aGlzLl9sQmxvY2sgXj0gdDsKCQkgICAgICAgIHRoaXMuX3JCbG9jayBePSB0IDw8IG9mZnNldDsKCQkgICAgfQoKCQkgICAgLyoqCgkJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS4KCQkgICAgICoKCQkgICAgICogQGV4YW1wbGUKCQkgICAgICoKCQkgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuREVTLmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpOwoJCSAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5ERVMuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7CgkJICAgICAqLwoJCSAgICBDLkRFUyA9IEJsb2NrQ2lwaGVyLl9jcmVhdGVIZWxwZXIoREVTKTsKCgkJICAgIC8qKgoJCSAgICAgKiBUcmlwbGUtREVTIGJsb2NrIGNpcGhlciBhbGdvcml0aG0uCgkJICAgICAqLwoJCSAgICB2YXIgVHJpcGxlREVTID0gQ19hbGdvLlRyaXBsZURFUyA9IEJsb2NrQ2lwaGVyLmV4dGVuZCh7CgkJICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXk7CgkJICAgICAgICAgICAgdmFyIGtleVdvcmRzID0ga2V5LndvcmRzOwoKCQkgICAgICAgICAgICAvLyBDcmVhdGUgREVTIGluc3RhbmNlcwoJCSAgICAgICAgICAgIHRoaXMuX2RlczEgPSBERVMuY3JlYXRlRW5jcnlwdG9yKFdvcmRBcnJheS5jcmVhdGUoa2V5V29yZHMuc2xpY2UoMCwgMikpKTsKCQkgICAgICAgICAgICB0aGlzLl9kZXMyID0gREVTLmNyZWF0ZUVuY3J5cHRvcihXb3JkQXJyYXkuY3JlYXRlKGtleVdvcmRzLnNsaWNlKDIsIDQpKSk7CgkJICAgICAgICAgICAgdGhpcy5fZGVzMyA9IERFUy5jcmVhdGVFbmNyeXB0b3IoV29yZEFycmF5LmNyZWF0ZShrZXlXb3Jkcy5zbGljZSg0LCA2KSkpOwoJCSAgICAgICAgfSwKCgkJICAgICAgICBlbmNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHsKCQkgICAgICAgICAgICB0aGlzLl9kZXMxLmVuY3J5cHRCbG9jayhNLCBvZmZzZXQpOwoJCSAgICAgICAgICAgIHRoaXMuX2RlczIuZGVjcnlwdEJsb2NrKE0sIG9mZnNldCk7CgkJICAgICAgICAgICAgdGhpcy5fZGVzMy5lbmNyeXB0QmxvY2soTSwgb2Zmc2V0KTsKCQkgICAgICAgIH0sCgoJCSAgICAgICAgZGVjcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7CgkJICAgICAgICAgICAgdGhpcy5fZGVzMy5kZWNyeXB0QmxvY2soTSwgb2Zmc2V0KTsKCQkgICAgICAgICAgICB0aGlzLl9kZXMyLmVuY3J5cHRCbG9jayhNLCBvZmZzZXQpOwoJCSAgICAgICAgICAgIHRoaXMuX2RlczEuZGVjcnlwdEJsb2NrKE0sIG9mZnNldCk7CgkJICAgICAgICB9LAoKCQkgICAgICAgIGtleVNpemU6IDE5Mi8zMiwKCgkJICAgICAgICBpdlNpemU6IDY0LzMyLAoKCQkgICAgICAgIGJsb2NrU2l6ZTogNjQvMzIKCQkgICAgfSk7CgoJCSAgICAvKioKCQkgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLgoJCSAgICAgKgoJCSAgICAgKiBAZXhhbXBsZQoJCSAgICAgKgoJCSAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5UcmlwbGVERVMuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7CgkJICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlRyaXBsZURFUy5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTsKCQkgICAgICovCgkJICAgIEMuVHJpcGxlREVTID0gQmxvY2tDaXBoZXIuX2NyZWF0ZUhlbHBlcihUcmlwbGVERVMpOwoJCX0oKSk7CgoKCQlyZXR1cm4gQ3J5cHRvSlMuVHJpcGxlREVTOwoKCX0pKTsKCi8qKiovIH0pLAoKLyoqKi8gMjQzOgovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHsKCQlpZiAodHJ1ZSkgewoJCQkvLyBDb21tb25KUwoJCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oMjEzKSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMTcpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxOCksIF9fd2VicGFja19yZXF1aXJlX18oMjI4KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMjkpKTsKCQl9CgkJZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSB7CgkJCS8vIEFNRAoJCQlkZWZpbmUoWyIuL2NvcmUiLCAiLi9lbmMtYmFzZTY0IiwgIi4vbWQ1IiwgIi4vZXZwa2RmIiwgIi4vY2lwaGVyLWNvcmUiXSwgZmFjdG9yeSk7CgkJfQoJCWVsc2UgewoJCQkvLyBHbG9iYWwgKGJyb3dzZXIpCgkJCWZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7CgkJfQoJfSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCgkJKGZ1bmN0aW9uICgpIHsKCQkgICAgLy8gU2hvcnRjdXRzCgkJICAgIHZhciBDID0gQ3J5cHRvSlM7CgkJICAgIHZhciBDX2xpYiA9IEMubGliOwoJCSAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyOwoJCSAgICB2YXIgQ19hbGdvID0gQy5hbGdvOwoKCQkgICAgLyoqCgkJICAgICAqIFJDNCBzdHJlYW0gY2lwaGVyIGFsZ29yaXRobS4KCQkgICAgICovCgkJICAgIHZhciBSQzQgPSBDX2FsZ28uUkM0ID0gU3RyZWFtQ2lwaGVyLmV4dGVuZCh7CgkJICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXk7CgkJICAgICAgICAgICAgdmFyIGtleVdvcmRzID0ga2V5LndvcmRzOwoJCSAgICAgICAgICAgIHZhciBrZXlTaWdCeXRlcyA9IGtleS5zaWdCeXRlczsKCgkJICAgICAgICAgICAgLy8gSW5pdCBzYm94CgkJICAgICAgICAgICAgdmFyIFMgPSB0aGlzLl9TID0gW107CgkJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykgewoJCSAgICAgICAgICAgICAgICBTW2ldID0gaTsKCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIC8vIEtleSBzZXR1cAoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gMDsgaSA8IDI1NjsgaSsrKSB7CgkJICAgICAgICAgICAgICAgIHZhciBrZXlCeXRlSW5kZXggPSBpICUga2V5U2lnQnl0ZXM7CgkJICAgICAgICAgICAgICAgIHZhciBrZXlCeXRlID0gKGtleVdvcmRzW2tleUJ5dGVJbmRleCA+Pj4gMl0gPj4+ICgyNCAtIChrZXlCeXRlSW5kZXggJSA0KSAqIDgpKSAmIDB4ZmY7CgoJCSAgICAgICAgICAgICAgICBqID0gKGogKyBTW2ldICsga2V5Qnl0ZSkgJSAyNTY7CgoJCSAgICAgICAgICAgICAgICAvLyBTd2FwCgkJICAgICAgICAgICAgICAgIHZhciB0ID0gU1tpXTsKCQkgICAgICAgICAgICAgICAgU1tpXSA9IFNbal07CgkJICAgICAgICAgICAgICAgIFNbal0gPSB0OwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgLy8gQ291bnRlcnMKCQkgICAgICAgICAgICB0aGlzLl9pID0gdGhpcy5faiA9IDA7CgkJICAgICAgICB9LAoKCQkgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkgewoJCSAgICAgICAgICAgIE1bb2Zmc2V0XSBePSBnZW5lcmF0ZUtleXN0cmVhbVdvcmQuY2FsbCh0aGlzKTsKCQkgICAgICAgIH0sCgoJCSAgICAgICAga2V5U2l6ZTogMjU2LzMyLAoKCQkgICAgICAgIGl2U2l6ZTogMAoJCSAgICB9KTsKCgkJICAgIGZ1bmN0aW9uIGdlbmVyYXRlS2V5c3RyZWFtV29yZCgpIHsKCQkgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgdmFyIFMgPSB0aGlzLl9TOwoJCSAgICAgICAgdmFyIGkgPSB0aGlzLl9pOwoJCSAgICAgICAgdmFyIGogPSB0aGlzLl9qOwoKCQkgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbSB3b3JkCgkJICAgICAgICB2YXIga2V5c3RyZWFtV29yZCA9IDA7CgkJICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IDQ7IG4rKykgewoJCSAgICAgICAgICAgIGkgPSAoaSArIDEpICUgMjU2OwoJCSAgICAgICAgICAgIGogPSAoaiArIFNbaV0pICUgMjU2OwoKCQkgICAgICAgICAgICAvLyBTd2FwCgkJICAgICAgICAgICAgdmFyIHQgPSBTW2ldOwoJCSAgICAgICAgICAgIFNbaV0gPSBTW2pdOwoJCSAgICAgICAgICAgIFNbal0gPSB0OwoKCQkgICAgICAgICAgICBrZXlzdHJlYW1Xb3JkIHw9IFNbKFNbaV0gKyBTW2pdKSAlIDI1Nl0gPDwgKDI0IC0gbiAqIDgpOwoJCSAgICAgICAgfQoKCQkgICAgICAgIC8vIFVwZGF0ZSBjb3VudGVycwoJCSAgICAgICAgdGhpcy5faSA9IGk7CgkJICAgICAgICB0aGlzLl9qID0gajsKCgkJICAgICAgICByZXR1cm4ga2V5c3RyZWFtV29yZDsKCQkgICAgfQoKCQkgICAgLyoqCgkJICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS4KCQkgICAgICoKCQkgICAgICogQGV4YW1wbGUKCQkgICAgICoKCQkgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuUkM0LmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpOwoJCSAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5SQzQuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7CgkJICAgICAqLwoJCSAgICBDLlJDNCA9IFN0cmVhbUNpcGhlci5fY3JlYXRlSGVscGVyKFJDNCk7CgoJCSAgICAvKioKCQkgICAgICogTW9kaWZpZWQgUkM0IHN0cmVhbSBjaXBoZXIgYWxnb3JpdGhtLgoJCSAgICAgKi8KCQkgICAgdmFyIFJDNERyb3AgPSBDX2FsZ28uUkM0RHJvcCA9IFJDNC5leHRlbmQoewoJCSAgICAgICAgLyoqCgkJICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuCgkJICAgICAgICAgKgoJCSAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGRyb3AgVGhlIG51bWJlciBvZiBrZXlzdHJlYW0gd29yZHMgdG8gZHJvcC4gRGVmYXVsdCAxOTIKCQkgICAgICAgICAqLwoJCSAgICAgICAgY2ZnOiBSQzQuY2ZnLmV4dGVuZCh7CgkJICAgICAgICAgICAgZHJvcDogMTkyCgkJICAgICAgICB9KSwKCgkJICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIFJDNC5fZG9SZXNldC5jYWxsKHRoaXMpOwoKCQkgICAgICAgICAgICAvLyBEcm9wCgkJICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuY2ZnLmRyb3A7IGkgPiAwOyBpLS0pIHsKCQkgICAgICAgICAgICAgICAgZ2VuZXJhdGVLZXlzdHJlYW1Xb3JkLmNhbGwodGhpcyk7CgkJICAgICAgICAgICAgfQoJCSAgICAgICAgfQoJCSAgICB9KTsKCgkJICAgIC8qKgoJCSAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuCgkJICAgICAqCgkJICAgICAqIEBleGFtcGxlCgkJICAgICAqCgkJICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLlJDNERyb3AuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7CgkJICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlJDNERyb3AuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7CgkJICAgICAqLwoJCSAgICBDLlJDNERyb3AgPSBTdHJlYW1DaXBoZXIuX2NyZWF0ZUhlbHBlcihSQzREcm9wKTsKCQl9KCkpOwoKCgkJcmV0dXJuIENyeXB0b0pTLlJDNDsKCgl9KSk7CgovKioqLyB9KSwKCi8qKiovIDI0NDoKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCTsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7CgkJaWYgKHRydWUpIHsKCQkJLy8gQ29tbW9uSlMKCQkJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMyksIF9fd2VicGFja19yZXF1aXJlX18oMjE3KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMTgpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyOCksIF9fd2VicGFja19yZXF1aXJlX18oMjI5KSk7CgkJfQoJCWVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewoJCQkvLyBBTUQKCQkJZGVmaW5lKFsiLi9jb3JlIiwgIi4vZW5jLWJhc2U2NCIsICIuL21kNSIsICIuL2V2cGtkZiIsICIuL2NpcGhlci1jb3JlIl0sIGZhY3RvcnkpOwoJCX0KCQllbHNlIHsKCQkJLy8gR2xvYmFsIChicm93c2VyKQoJCQlmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpOwoJCX0KCX0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7CgoJCShmdW5jdGlvbiAoKSB7CgkJICAgIC8vIFNob3J0Y3V0cwoJCSAgICB2YXIgQyA9IENyeXB0b0pTOwoJCSAgICB2YXIgQ19saWIgPSBDLmxpYjsKCQkgICAgdmFyIFN0cmVhbUNpcGhlciA9IENfbGliLlN0cmVhbUNpcGhlcjsKCQkgICAgdmFyIENfYWxnbyA9IEMuYWxnbzsKCgkJICAgIC8vIFJldXNhYmxlIG9iamVjdHMKCQkgICAgdmFyIFMgID0gW107CgkJICAgIHZhciBDXyA9IFtdOwoJCSAgICB2YXIgRyAgPSBbXTsKCgkJICAgIC8qKgoJCSAgICAgKiBSYWJiaXQgc3RyZWFtIGNpcGhlciBhbGdvcml0aG0KCQkgICAgICovCgkJICAgIHZhciBSYWJiaXQgPSBDX2FsZ28uUmFiYml0ID0gU3RyZWFtQ2lwaGVyLmV4dGVuZCh7CgkJICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkgewoJCSAgICAgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgICAgIHZhciBLID0gdGhpcy5fa2V5LndvcmRzOwoJCSAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuY2ZnLml2OwoKCQkgICAgICAgICAgICAvLyBTd2FwIGVuZGlhbgoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7CgkJICAgICAgICAgICAgICAgIEtbaV0gPSAoKChLW2ldIDw8IDgpICB8IChLW2ldID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfAoJCSAgICAgICAgICAgICAgICAgICAgICAgKCgoS1tpXSA8PCAyNCkgfCAoS1tpXSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgLy8gR2VuZXJhdGUgaW5pdGlhbCBzdGF0ZSB2YWx1ZXMKCQkgICAgICAgICAgICB2YXIgWCA9IHRoaXMuX1ggPSBbCgkJICAgICAgICAgICAgICAgIEtbMF0sIChLWzNdIDw8IDE2KSB8IChLWzJdID4+PiAxNiksCgkJICAgICAgICAgICAgICAgIEtbMV0sIChLWzBdIDw8IDE2KSB8IChLWzNdID4+PiAxNiksCgkJICAgICAgICAgICAgICAgIEtbMl0sIChLWzFdIDw8IDE2KSB8IChLWzBdID4+PiAxNiksCgkJICAgICAgICAgICAgICAgIEtbM10sIChLWzJdIDw8IDE2KSB8IChLWzFdID4+PiAxNikKCQkgICAgICAgICAgICBdOwoKCQkgICAgICAgICAgICAvLyBHZW5lcmF0ZSBpbml0aWFsIGNvdW50ZXIgdmFsdWVzCgkJICAgICAgICAgICAgdmFyIEMgPSB0aGlzLl9DID0gWwoJCSAgICAgICAgICAgICAgICAoS1syXSA8PCAxNikgfCAoS1syXSA+Pj4gMTYpLCAoS1swXSAmIDB4ZmZmZjAwMDApIHwgKEtbMV0gJiAweDAwMDBmZmZmKSwKCQkgICAgICAgICAgICAgICAgKEtbM10gPDwgMTYpIHwgKEtbM10gPj4+IDE2KSwgKEtbMV0gJiAweGZmZmYwMDAwKSB8IChLWzJdICYgMHgwMDAwZmZmZiksCgkJICAgICAgICAgICAgICAgIChLWzBdIDw8IDE2KSB8IChLWzBdID4+PiAxNiksIChLWzJdICYgMHhmZmZmMDAwMCkgfCAoS1szXSAmIDB4MDAwMGZmZmYpLAoJCSAgICAgICAgICAgICAgICAoS1sxXSA8PCAxNikgfCAoS1sxXSA+Pj4gMTYpLCAoS1szXSAmIDB4ZmZmZjAwMDApIHwgKEtbMF0gJiAweDAwMDBmZmZmKQoJCSAgICAgICAgICAgIF07CgoJCSAgICAgICAgICAgIC8vIENhcnJ5IGJpdAoJCSAgICAgICAgICAgIHRoaXMuX2IgPSAwOwoKCQkgICAgICAgICAgICAvLyBJdGVyYXRlIHRoZSBzeXN0ZW0gZm91ciB0aW1lcwoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7CgkJICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgLy8gTW9kaWZ5IHRoZSBjb3VudGVycwoJCSAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7CgkJICAgICAgICAgICAgICAgIENbaV0gXj0gWFsoaSArIDQpICYgN107CgkJICAgICAgICAgICAgfQoKCQkgICAgICAgICAgICAvLyBJViBzZXR1cAoJCSAgICAgICAgICAgIGlmIChpdikgewoJCSAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgICAgICAgICAgdmFyIElWID0gaXYud29yZHM7CgkJICAgICAgICAgICAgICAgIHZhciBJVl8wID0gSVZbMF07CgkJICAgICAgICAgICAgICAgIHZhciBJVl8xID0gSVZbMV07CgoJCSAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIHN1YnZlY3RvcnMKCQkgICAgICAgICAgICAgICAgdmFyIGkwID0gKCgoSVZfMCA8PCA4KSB8IChJVl8wID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfCAoKChJVl8wIDw8IDI0KSB8IChJVl8wID4+PiA4KSkgJiAweGZmMDBmZjAwKTsKCQkgICAgICAgICAgICAgICAgdmFyIGkyID0gKCgoSVZfMSA8PCA4KSB8IChJVl8xID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfCAoKChJVl8xIDw8IDI0KSB8IChJVl8xID4+PiA4KSkgJiAweGZmMDBmZjAwKTsKCQkgICAgICAgICAgICAgICAgdmFyIGkxID0gKGkwID4+PiAxNikgfCAoaTIgJiAweGZmZmYwMDAwKTsKCQkgICAgICAgICAgICAgICAgdmFyIGkzID0gKGkyIDw8IDE2KSAgfCAoaTAgJiAweDAwMDBmZmZmKTsKCgkJICAgICAgICAgICAgICAgIC8vIE1vZGlmeSBjb3VudGVyIHZhbHVlcwoJCSAgICAgICAgICAgICAgICBDWzBdIF49IGkwOwoJCSAgICAgICAgICAgICAgICBDWzFdIF49IGkxOwoJCSAgICAgICAgICAgICAgICBDWzJdIF49IGkyOwoJCSAgICAgICAgICAgICAgICBDWzNdIF49IGkzOwoJCSAgICAgICAgICAgICAgICBDWzRdIF49IGkwOwoJCSAgICAgICAgICAgICAgICBDWzVdIF49IGkxOwoJCSAgICAgICAgICAgICAgICBDWzZdIF49IGkyOwoJCSAgICAgICAgICAgICAgICBDWzddIF49IGkzOwoKCQkgICAgICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtIGZvdXIgdGltZXMKCQkgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHsKCQkgICAgICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpOwoJCSAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgfQoJCSAgICAgICAgfSwKCgkJICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHsKCQkgICAgICAgICAgICAvLyBTaG9ydGN1dAoJCSAgICAgICAgICAgIHZhciBYID0gdGhpcy5fWDsKCgkJICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtCgkJICAgICAgICAgICAgbmV4dFN0YXRlLmNhbGwodGhpcyk7CgoJCSAgICAgICAgICAgIC8vIEdlbmVyYXRlIGZvdXIga2V5c3RyZWFtIHdvcmRzCgkJICAgICAgICAgICAgU1swXSA9IFhbMF0gXiAoWFs1XSA+Pj4gMTYpIF4gKFhbM10gPDwgMTYpOwoJCSAgICAgICAgICAgIFNbMV0gPSBYWzJdIF4gKFhbN10gPj4+IDE2KSBeIChYWzVdIDw8IDE2KTsKCQkgICAgICAgICAgICBTWzJdID0gWFs0XSBeIChYWzFdID4+PiAxNikgXiAoWFs3XSA8PCAxNik7CgkJICAgICAgICAgICAgU1szXSA9IFhbNl0gXiAoWFszXSA+Pj4gMTYpIF4gKFhbMV0gPDwgMTYpOwoKCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykgewoJCSAgICAgICAgICAgICAgICAvLyBTd2FwIGVuZGlhbgoJCSAgICAgICAgICAgICAgICBTW2ldID0gKCgoU1tpXSA8PCA4KSAgfCAoU1tpXSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKCQkgICAgICAgICAgICAgICAgICAgICAgICgoKFNbaV0gPDwgMjQpIHwgKFNbaV0gPj4+IDgpKSAgJiAweGZmMDBmZjAwKTsKCgkJICAgICAgICAgICAgICAgIC8vIEVuY3J5cHQKCQkgICAgICAgICAgICAgICAgTVtvZmZzZXQgKyBpXSBePSBTW2ldOwoJCSAgICAgICAgICAgIH0KCQkgICAgICAgIH0sCgoJCSAgICAgICAgYmxvY2tTaXplOiAxMjgvMzIsCgoJCSAgICAgICAgaXZTaXplOiA2NC8zMgoJCSAgICB9KTsKCgkJICAgIGZ1bmN0aW9uIG5leHRTdGF0ZSgpIHsKCQkgICAgICAgIC8vIFNob3J0Y3V0cwoJCSAgICAgICAgdmFyIFggPSB0aGlzLl9YOwoJCSAgICAgICAgdmFyIEMgPSB0aGlzLl9DOwoKCQkgICAgICAgIC8vIFNhdmUgb2xkIGNvdW50ZXIgdmFsdWVzCgkJICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykgewoJCSAgICAgICAgICAgIENfW2ldID0gQ1tpXTsKCQkgICAgICAgIH0KCgkJICAgICAgICAvLyBDYWxjdWxhdGUgbmV3IGNvdW50ZXIgdmFsdWVzCgkJICAgICAgICBDWzBdID0gKENbMF0gKyAweDRkMzRkMzRkICsgdGhpcy5fYikgfCAwOwoJCSAgICAgICAgQ1sxXSA9IChDWzFdICsgMHhkMzRkMzRkMyArICgoQ1swXSA+Pj4gMCkgPCAoQ19bMF0gPj4+IDApID8gMSA6IDApKSB8IDA7CgkJICAgICAgICBDWzJdID0gKENbMl0gKyAweDM0ZDM0ZDM0ICsgKChDWzFdID4+PiAwKSA8IChDX1sxXSA+Pj4gMCkgPyAxIDogMCkpIHwgMDsKCQkgICAgICAgIENbM10gPSAoQ1szXSArIDB4NGQzNGQzNGQgKyAoKENbMl0gPj4+IDApIDwgKENfWzJdID4+PiAwKSA/IDEgOiAwKSkgfCAwOwoJCSAgICAgICAgQ1s0XSA9IChDWzRdICsgMHhkMzRkMzRkMyArICgoQ1szXSA+Pj4gMCkgPCAoQ19bM10gPj4+IDApID8gMSA6IDApKSB8IDA7CgkJICAgICAgICBDWzVdID0gKENbNV0gKyAweDM0ZDM0ZDM0ICsgKChDWzRdID4+PiAwKSA8IChDX1s0XSA+Pj4gMCkgPyAxIDogMCkpIHwgMDsKCQkgICAgICAgIENbNl0gPSAoQ1s2XSArIDB4NGQzNGQzNGQgKyAoKENbNV0gPj4+IDApIDwgKENfWzVdID4+PiAwKSA/IDEgOiAwKSkgfCAwOwoJCSAgICAgICAgQ1s3XSA9IChDWzddICsgMHhkMzRkMzRkMyArICgoQ1s2XSA+Pj4gMCkgPCAoQ19bNl0gPj4+IDApID8gMSA6IDApKSB8IDA7CgkJICAgICAgICB0aGlzLl9iID0gKENbN10gPj4+IDApIDwgKENfWzddID4+PiAwKSA/IDEgOiAwOwoKCQkgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZy12YWx1ZXMKCQkgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7CgkJICAgICAgICAgICAgdmFyIGd4ID0gWFtpXSArIENbaV07CgoJCSAgICAgICAgICAgIC8vIENvbnN0cnVjdCBoaWdoIGFuZCBsb3cgYXJndW1lbnQgZm9yIHNxdWFyaW5nCgkJICAgICAgICAgICAgdmFyIGdhID0gZ3ggJiAweGZmZmY7CgkJICAgICAgICAgICAgdmFyIGdiID0gZ3ggPj4+IDE2OwoKCQkgICAgICAgICAgICAvLyBDYWxjdWxhdGUgaGlnaCBhbmQgbG93IHJlc3VsdCBvZiBzcXVhcmluZwoJCSAgICAgICAgICAgIHZhciBnaCA9ICgoKChnYSAqIGdhKSA+Pj4gMTcpICsgZ2EgKiBnYikgPj4+IDE1KSArIGdiICogZ2I7CgkJICAgICAgICAgICAgdmFyIGdsID0gKCgoZ3ggJiAweGZmZmYwMDAwKSAqIGd4KSB8IDApICsgKCgoZ3ggJiAweDAwMDBmZmZmKSAqIGd4KSB8IDApOwoKCQkgICAgICAgICAgICAvLyBIaWdoIFhPUiBsb3cKCQkgICAgICAgICAgICBHW2ldID0gZ2ggXiBnbDsKCQkgICAgICAgIH0KCgkJICAgICAgICAvLyBDYWxjdWxhdGUgbmV3IHN0YXRlIHZhbHVlcwoJCSAgICAgICAgWFswXSA9IChHWzBdICsgKChHWzddIDw8IDE2KSB8IChHWzddID4+PiAxNikpICsgKChHWzZdIDw8IDE2KSB8IChHWzZdID4+PiAxNikpKSB8IDA7CgkJICAgICAgICBYWzFdID0gKEdbMV0gKyAoKEdbMF0gPDwgOCkgIHwgKEdbMF0gPj4+IDI0KSkgKyBHWzddKSB8IDA7CgkJICAgICAgICBYWzJdID0gKEdbMl0gKyAoKEdbMV0gPDwgMTYpIHwgKEdbMV0gPj4+IDE2KSkgKyAoKEdbMF0gPDwgMTYpIHwgKEdbMF0gPj4+IDE2KSkpIHwgMDsKCQkgICAgICAgIFhbM10gPSAoR1szXSArICgoR1syXSA8PCA4KSAgfCAoR1syXSA+Pj4gMjQpKSArIEdbMV0pIHwgMDsKCQkgICAgICAgIFhbNF0gPSAoR1s0XSArICgoR1szXSA8PCAxNikgfCAoR1szXSA+Pj4gMTYpKSArICgoR1syXSA8PCAxNikgfCAoR1syXSA+Pj4gMTYpKSkgfCAwOwoJCSAgICAgICAgWFs1XSA9IChHWzVdICsgKChHWzRdIDw8IDgpICB8IChHWzRdID4+PiAyNCkpICsgR1szXSkgfCAwOwoJCSAgICAgICAgWFs2XSA9IChHWzZdICsgKChHWzVdIDw8IDE2KSB8IChHWzVdID4+PiAxNikpICsgKChHWzRdIDw8IDE2KSB8IChHWzRdID4+PiAxNikpKSB8IDA7CgkJICAgICAgICBYWzddID0gKEdbN10gKyAoKEdbNl0gPDwgOCkgIHwgKEdbNl0gPj4+IDI0KSkgKyBHWzVdKSB8IDA7CgkJICAgIH0KCgkJICAgIC8qKgoJCSAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuCgkJICAgICAqCgkJICAgICAqIEBleGFtcGxlCgkJICAgICAqCgkJICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLlJhYmJpdC5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTsKCQkgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuUmFiYml0LmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpOwoJCSAgICAgKi8KCQkgICAgQy5SYWJiaXQgPSBTdHJlYW1DaXBoZXIuX2NyZWF0ZUhlbHBlcihSYWJiaXQpOwoJCX0oKSk7CgoKCQlyZXR1cm4gQ3J5cHRvSlMuUmFiYml0OwoKCX0pKTsKCi8qKiovIH0pLAoKLyoqKi8gMjQ1OgovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHsKCQlpZiAodHJ1ZSkgewoJCQkvLyBDb21tb25KUwoJCQltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oMjEzKSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMTcpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxOCksIF9fd2VicGFja19yZXF1aXJlX18oMjI4KSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMjkpKTsKCQl9CgkJZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSB7CgkJCS8vIEFNRAoJCQlkZWZpbmUoWyIuL2NvcmUiLCAiLi9lbmMtYmFzZTY0IiwgIi4vbWQ1IiwgIi4vZXZwa2RmIiwgIi4vY2lwaGVyLWNvcmUiXSwgZmFjdG9yeSk7CgkJfQoJCWVsc2UgewoJCQkvLyBHbG9iYWwgKGJyb3dzZXIpCgkJCWZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7CgkJfQoJfSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHsKCgkJKGZ1bmN0aW9uICgpIHsKCQkgICAgLy8gU2hvcnRjdXRzCgkJICAgIHZhciBDID0gQ3J5cHRvSlM7CgkJICAgIHZhciBDX2xpYiA9IEMubGliOwoJCSAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyOwoJCSAgICB2YXIgQ19hbGdvID0gQy5hbGdvOwoKCQkgICAgLy8gUmV1c2FibGUgb2JqZWN0cwoJCSAgICB2YXIgUyAgPSBbXTsKCQkgICAgdmFyIENfID0gW107CgkJICAgIHZhciBHICA9IFtdOwoKCQkgICAgLyoqCgkJICAgICAqIFJhYmJpdCBzdHJlYW0gY2lwaGVyIGFsZ29yaXRobS4KCQkgICAgICoKCQkgICAgICogVGhpcyBpcyBhIGxlZ2FjeSB2ZXJzaW9uIHRoYXQgbmVnbGVjdGVkIHRvIGNvbnZlcnQgdGhlIGtleSB0byBsaXR0bGUtZW5kaWFuLgoJCSAgICAgKiBUaGlzIGVycm9yIGRvZXNuJ3QgYWZmZWN0IHRoZSBjaXBoZXIncyBzZWN1cml0eSwKCQkgICAgICogYnV0IGl0IGRvZXMgYWZmZWN0IGl0cyBjb21wYXRpYmlsaXR5IHdpdGggb3RoZXIgaW1wbGVtZW50YXRpb25zLgoJCSAgICAgKi8KCQkgICAgdmFyIFJhYmJpdExlZ2FjeSA9IENfYWxnby5SYWJiaXRMZWdhY3kgPSBTdHJlYW1DaXBoZXIuZXh0ZW5kKHsKCQkgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7CgkJICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgdmFyIEsgPSB0aGlzLl9rZXkud29yZHM7CgkJICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5jZmcuaXY7CgoJCSAgICAgICAgICAgIC8vIEdlbmVyYXRlIGluaXRpYWwgc3RhdGUgdmFsdWVzCgkJICAgICAgICAgICAgdmFyIFggPSB0aGlzLl9YID0gWwoJCSAgICAgICAgICAgICAgICBLWzBdLCAoS1szXSA8PCAxNikgfCAoS1syXSA+Pj4gMTYpLAoJCSAgICAgICAgICAgICAgICBLWzFdLCAoS1swXSA8PCAxNikgfCAoS1szXSA+Pj4gMTYpLAoJCSAgICAgICAgICAgICAgICBLWzJdLCAoS1sxXSA8PCAxNikgfCAoS1swXSA+Pj4gMTYpLAoJCSAgICAgICAgICAgICAgICBLWzNdLCAoS1syXSA8PCAxNikgfCAoS1sxXSA+Pj4gMTYpCgkJICAgICAgICAgICAgXTsKCgkJICAgICAgICAgICAgLy8gR2VuZXJhdGUgaW5pdGlhbCBjb3VudGVyIHZhbHVlcwoJCSAgICAgICAgICAgIHZhciBDID0gdGhpcy5fQyA9IFsKCQkgICAgICAgICAgICAgICAgKEtbMl0gPDwgMTYpIHwgKEtbMl0gPj4+IDE2KSwgKEtbMF0gJiAweGZmZmYwMDAwKSB8IChLWzFdICYgMHgwMDAwZmZmZiksCgkJICAgICAgICAgICAgICAgIChLWzNdIDw8IDE2KSB8IChLWzNdID4+PiAxNiksIChLWzFdICYgMHhmZmZmMDAwMCkgfCAoS1syXSAmIDB4MDAwMGZmZmYpLAoJCSAgICAgICAgICAgICAgICAoS1swXSA8PCAxNikgfCAoS1swXSA+Pj4gMTYpLCAoS1syXSAmIDB4ZmZmZjAwMDApIHwgKEtbM10gJiAweDAwMDBmZmZmKSwKCQkgICAgICAgICAgICAgICAgKEtbMV0gPDwgMTYpIHwgKEtbMV0gPj4+IDE2KSwgKEtbM10gJiAweGZmZmYwMDAwKSB8IChLWzBdICYgMHgwMDAwZmZmZikKCQkgICAgICAgICAgICBdOwoKCQkgICAgICAgICAgICAvLyBDYXJyeSBiaXQKCQkgICAgICAgICAgICB0aGlzLl9iID0gMDsKCgkJICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtIGZvdXIgdGltZXMKCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykgewoJCSAgICAgICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKTsKCQkgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgIC8vIE1vZGlmeSB0aGUgY291bnRlcnMKCQkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykgewoJCSAgICAgICAgICAgICAgICBDW2ldIF49IFhbKGkgKyA0KSAmIDddOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgLy8gSVYgc2V0dXAKCQkgICAgICAgICAgICBpZiAoaXYpIHsKCQkgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzCgkJICAgICAgICAgICAgICAgIHZhciBJViA9IGl2LndvcmRzOwoJCSAgICAgICAgICAgICAgICB2YXIgSVZfMCA9IElWWzBdOwoJCSAgICAgICAgICAgICAgICB2YXIgSVZfMSA9IElWWzFdOwoKCQkgICAgICAgICAgICAgICAgLy8gR2VuZXJhdGUgZm91ciBzdWJ2ZWN0b3JzCgkJICAgICAgICAgICAgICAgIHZhciBpMCA9ICgoKElWXzAgPDwgOCkgfCAoSVZfMCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwgKCgoSVZfMCA8PCAyNCkgfCAoSVZfMCA+Pj4gOCkpICYgMHhmZjAwZmYwMCk7CgkJICAgICAgICAgICAgICAgIHZhciBpMiA9ICgoKElWXzEgPDwgOCkgfCAoSVZfMSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwgKCgoSVZfMSA8PCAyNCkgfCAoSVZfMSA+Pj4gOCkpICYgMHhmZjAwZmYwMCk7CgkJICAgICAgICAgICAgICAgIHZhciBpMSA9IChpMCA+Pj4gMTYpIHwgKGkyICYgMHhmZmZmMDAwMCk7CgkJICAgICAgICAgICAgICAgIHZhciBpMyA9IChpMiA8PCAxNikgIHwgKGkwICYgMHgwMDAwZmZmZik7CgoJCSAgICAgICAgICAgICAgICAvLyBNb2RpZnkgY291bnRlciB2YWx1ZXMKCQkgICAgICAgICAgICAgICAgQ1swXSBePSBpMDsKCQkgICAgICAgICAgICAgICAgQ1sxXSBePSBpMTsKCQkgICAgICAgICAgICAgICAgQ1syXSBePSBpMjsKCQkgICAgICAgICAgICAgICAgQ1szXSBePSBpMzsKCQkgICAgICAgICAgICAgICAgQ1s0XSBePSBpMDsKCQkgICAgICAgICAgICAgICAgQ1s1XSBePSBpMTsKCQkgICAgICAgICAgICAgICAgQ1s2XSBePSBpMjsKCQkgICAgICAgICAgICAgICAgQ1s3XSBePSBpMzsKCgkJICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbSBmb3VyIHRpbWVzCgkJICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7CgkJICAgICAgICAgICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKTsKCQkgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgIH0KCQkgICAgICAgIH0sCgoJCSAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7CgkJICAgICAgICAgICAgLy8gU2hvcnRjdXQKCQkgICAgICAgICAgICB2YXIgWCA9IHRoaXMuX1g7CgoJCSAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbQoJCSAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpOwoKCQkgICAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIGtleXN0cmVhbSB3b3JkcwoJCSAgICAgICAgICAgIFNbMF0gPSBYWzBdIF4gKFhbNV0gPj4+IDE2KSBeIChYWzNdIDw8IDE2KTsKCQkgICAgICAgICAgICBTWzFdID0gWFsyXSBeIChYWzddID4+PiAxNikgXiAoWFs1XSA8PCAxNik7CgkJICAgICAgICAgICAgU1syXSA9IFhbNF0gXiAoWFsxXSA+Pj4gMTYpIF4gKFhbN10gPDwgMTYpOwoJCSAgICAgICAgICAgIFNbM10gPSBYWzZdIF4gKFhbM10gPj4+IDE2KSBeIChYWzFdIDw8IDE2KTsKCgkJICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHsKCQkgICAgICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW4KCQkgICAgICAgICAgICAgICAgU1tpXSA9ICgoKFNbaV0gPDwgOCkgIHwgKFNbaV0gPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8CgkJICAgICAgICAgICAgICAgICAgICAgICAoKChTW2ldIDw8IDI0KSB8IChTW2ldID4+PiA4KSkgICYgMHhmZjAwZmYwMCk7CgoJCSAgICAgICAgICAgICAgICAvLyBFbmNyeXB0CgkJICAgICAgICAgICAgICAgIE1bb2Zmc2V0ICsgaV0gXj0gU1tpXTsKCQkgICAgICAgICAgICB9CgkJICAgICAgICB9LAoKCQkgICAgICAgIGJsb2NrU2l6ZTogMTI4LzMyLAoKCQkgICAgICAgIGl2U2l6ZTogNjQvMzIKCQkgICAgfSk7CgoJCSAgICBmdW5jdGlvbiBuZXh0U3RhdGUoKSB7CgkJICAgICAgICAvLyBTaG9ydGN1dHMKCQkgICAgICAgIHZhciBYID0gdGhpcy5fWDsKCQkgICAgICAgIHZhciBDID0gdGhpcy5fQzsKCgkJICAgICAgICAvLyBTYXZlIG9sZCBjb3VudGVyIHZhbHVlcwoJCSAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHsKCQkgICAgICAgICAgICBDX1tpXSA9IENbaV07CgkJICAgICAgICB9CgoJCSAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBjb3VudGVyIHZhbHVlcwoJCSAgICAgICAgQ1swXSA9IChDWzBdICsgMHg0ZDM0ZDM0ZCArIHRoaXMuX2IpIHwgMDsKCQkgICAgICAgIENbMV0gPSAoQ1sxXSArIDB4ZDM0ZDM0ZDMgKyAoKENbMF0gPj4+IDApIDwgKENfWzBdID4+PiAwKSA/IDEgOiAwKSkgfCAwOwoJCSAgICAgICAgQ1syXSA9IChDWzJdICsgMHgzNGQzNGQzNCArICgoQ1sxXSA+Pj4gMCkgPCAoQ19bMV0gPj4+IDApID8gMSA6IDApKSB8IDA7CgkJICAgICAgICBDWzNdID0gKENbM10gKyAweDRkMzRkMzRkICsgKChDWzJdID4+PiAwKSA8IChDX1syXSA+Pj4gMCkgPyAxIDogMCkpIHwgMDsKCQkgICAgICAgIENbNF0gPSAoQ1s0XSArIDB4ZDM0ZDM0ZDMgKyAoKENbM10gPj4+IDApIDwgKENfWzNdID4+PiAwKSA/IDEgOiAwKSkgfCAwOwoJCSAgICAgICAgQ1s1XSA9IChDWzVdICsgMHgzNGQzNGQzNCArICgoQ1s0XSA+Pj4gMCkgPCAoQ19bNF0gPj4+IDApID8gMSA6IDApKSB8IDA7CgkJICAgICAgICBDWzZdID0gKENbNl0gKyAweDRkMzRkMzRkICsgKChDWzVdID4+PiAwKSA8IChDX1s1XSA+Pj4gMCkgPyAxIDogMCkpIHwgMDsKCQkgICAgICAgIENbN10gPSAoQ1s3XSArIDB4ZDM0ZDM0ZDMgKyAoKENbNl0gPj4+IDApIDwgKENfWzZdID4+PiAwKSA/IDEgOiAwKSkgfCAwOwoJCSAgICAgICAgdGhpcy5fYiA9IChDWzddID4+PiAwKSA8IChDX1s3XSA+Pj4gMCkgPyAxIDogMDsKCgkJICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGctdmFsdWVzCgkJICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykgewoJCSAgICAgICAgICAgIHZhciBneCA9IFhbaV0gKyBDW2ldOwoKCQkgICAgICAgICAgICAvLyBDb25zdHJ1Y3QgaGlnaCBhbmQgbG93IGFyZ3VtZW50IGZvciBzcXVhcmluZwoJCSAgICAgICAgICAgIHZhciBnYSA9IGd4ICYgMHhmZmZmOwoJCSAgICAgICAgICAgIHZhciBnYiA9IGd4ID4+PiAxNjsKCgkJICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGhpZ2ggYW5kIGxvdyByZXN1bHQgb2Ygc3F1YXJpbmcKCQkgICAgICAgICAgICB2YXIgZ2ggPSAoKCgoZ2EgKiBnYSkgPj4+IDE3KSArIGdhICogZ2IpID4+PiAxNSkgKyBnYiAqIGdiOwoJCSAgICAgICAgICAgIHZhciBnbCA9ICgoKGd4ICYgMHhmZmZmMDAwMCkgKiBneCkgfCAwKSArICgoKGd4ICYgMHgwMDAwZmZmZikgKiBneCkgfCAwKTsKCgkJICAgICAgICAgICAgLy8gSGlnaCBYT1IgbG93CgkJICAgICAgICAgICAgR1tpXSA9IGdoIF4gZ2w7CgkJICAgICAgICB9CgoJCSAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBzdGF0ZSB2YWx1ZXMKCQkgICAgICAgIFhbMF0gPSAoR1swXSArICgoR1s3XSA8PCAxNikgfCAoR1s3XSA+Pj4gMTYpKSArICgoR1s2XSA8PCAxNikgfCAoR1s2XSA+Pj4gMTYpKSkgfCAwOwoJCSAgICAgICAgWFsxXSA9IChHWzFdICsgKChHWzBdIDw8IDgpICB8IChHWzBdID4+PiAyNCkpICsgR1s3XSkgfCAwOwoJCSAgICAgICAgWFsyXSA9IChHWzJdICsgKChHWzFdIDw8IDE2KSB8IChHWzFdID4+PiAxNikpICsgKChHWzBdIDw8IDE2KSB8IChHWzBdID4+PiAxNikpKSB8IDA7CgkJICAgICAgICBYWzNdID0gKEdbM10gKyAoKEdbMl0gPDwgOCkgIHwgKEdbMl0gPj4+IDI0KSkgKyBHWzFdKSB8IDA7CgkJICAgICAgICBYWzRdID0gKEdbNF0gKyAoKEdbM10gPDwgMTYpIHwgKEdbM10gPj4+IDE2KSkgKyAoKEdbMl0gPDwgMTYpIHwgKEdbMl0gPj4+IDE2KSkpIHwgMDsKCQkgICAgICAgIFhbNV0gPSAoR1s1XSArICgoR1s0XSA8PCA4KSAgfCAoR1s0XSA+Pj4gMjQpKSArIEdbM10pIHwgMDsKCQkgICAgICAgIFhbNl0gPSAoR1s2XSArICgoR1s1XSA8PCAxNikgfCAoR1s1XSA+Pj4gMTYpKSArICgoR1s0XSA8PCAxNikgfCAoR1s0XSA+Pj4gMTYpKSkgfCAwOwoJCSAgICAgICAgWFs3XSA9IChHWzddICsgKChHWzZdIDw8IDgpICB8IChHWzZdID4+PiAyNCkpICsgR1s1XSkgfCAwOwoJCSAgICB9CgoJCSAgICAvKioKCQkgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLgoJCSAgICAgKgoJCSAgICAgKiBAZXhhbXBsZQoJCSAgICAgKgoJCSAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5SYWJiaXRMZWdhY3kuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7CgkJICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlJhYmJpdExlZ2FjeS5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTsKCQkgICAgICovCgkJICAgIEMuUmFiYml0TGVnYWN5ID0gU3RyZWFtQ2lwaGVyLl9jcmVhdGVIZWxwZXIoUmFiYml0TGVnYWN5KTsKCQl9KCkpOwoKCgkJcmV0dXJuIENyeXB0b0pTLlJhYmJpdExlZ2FjeTsKCgl9KSk7CgovKioqLyB9KSwKCi8qKiovIDI0ODoKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCgltb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjQ5KTsKCi8qKiovIH0pLAoKLyoqKi8gMjQ5OgovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCXZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07CgoJdmFyIF92ZXJzaW9uID0gJzEuNC4yJzsKCXZhciBfY29kZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjA4KS5jb2RlOwoJdmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMjA3KS51dGlsczsKCXZhciBfbXNnID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNTApOwoJdmFyIF9tZXNzYWdlID0gX21zZy5fbXNnOwoJdmFyIF9tc2dIYXNoID0ge307Cgl2YXIgUXVldWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1MSkuUXVldWU7Cgl2YXIgQ3J5cHRvSlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMik7Cgl2YXIgXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjUyKTsKCXZhciBzdHJvcGhlQ29ubiA9IG51bGw7CgoJd2luZG93LlVSTCA9IHdpbmRvdy5VUkwgfHwgd2luZG93LndlYmtpdFVSTCB8fCB3aW5kb3cubW96VVJMIHx8IHdpbmRvdy5tc1VSTDsKCglpZiAod2luZG93LlhEb21haW5SZXF1ZXN0KSB7CgkgICAgLy8gbm90IHN1cHBvcnQgaWU4IHNlbmQgaXMgbm90IGEgZnVuY3Rpb24gLCBjYW5vdCAKCSAgICAvLyBjYXNlIHNlbmQgaXMgb2JqZWN0LCBkb2Vzbid0IGhhcyBhIGF0dHIgb2YgY2FsbAoJICAgIC8vIFhEb21haW5SZXF1ZXN0LnByb3RvdHlwZS5vbGRzZW5kID0gWERvbWFpblJlcXVlc3QucHJvdG90eXBlLnNlbmQ7CgkgICAgLy8gWERvbWFpblJlcXVlc3QucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoKSB7CgkgICAgLy8gICAgIFhEb21haW5SZXF1ZXN0LnByb3RvdHlwZS5vbGRzZW5kLmNhbGwodGhpcywgYXJndW1lbnRzKTsKCSAgICAvLyAgICAgdGhpcy5yZWFkeVN0YXRlID0gMjsKCSAgICAvLyB9OwoJfQoKCVN0cm9waGUuQ29ubmVjdGlvbi5wcm90b3R5cGUuX3Nhc2xfYXV0aDFfY2IgPSBmdW5jdGlvbiAoZWxlbSkgewoJICAgIC8vIHNhdmUgc3RyZWFtOmZlYXR1cmVzIGZvciBmdXR1cmUgdXNhZ2UKCSAgICB0aGlzLmZlYXR1cmVzID0gZWxlbTsKCSAgICB2YXIgaSwgY2hpbGQ7CgkgICAgZm9yIChpID0gMDsgaSA8IGVsZW0uY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykgewoJICAgICAgICBjaGlsZCA9IGVsZW0uY2hpbGROb2Rlc1tpXTsKCSAgICAgICAgaWYgKGNoaWxkLm5vZGVOYW1lID09ICdiaW5kJykgewoJICAgICAgICAgICAgdGhpcy5kb19iaW5kID0gdHJ1ZTsKCSAgICAgICAgfQoKCSAgICAgICAgaWYgKGNoaWxkLm5vZGVOYW1lID09ICdzZXNzaW9uJykgewoJICAgICAgICAgICAgdGhpcy5kb19zZXNzaW9uID0gdHJ1ZTsKCSAgICAgICAgfQoJICAgIH0KCgkgICAgaWYgKCF0aGlzLmRvX2JpbmQpIHsKCSAgICAgICAgdGhpcy5fY2hhbmdlQ29ubmVjdFN0YXR1cyhTdHJvcGhlLlN0YXR1cy5BVVRIRkFJTCwgbnVsbCk7CgkgICAgICAgIHJldHVybiBmYWxzZTsKCSAgICB9IGVsc2UgewoJICAgICAgICB0aGlzLl9hZGRTeXNIYW5kbGVyKHRoaXMuX3Nhc2xfYmluZF9jYi5iaW5kKHRoaXMpLCBudWxsLCBudWxsLCBudWxsLCAiX2JpbmRfYXV0aF8yIik7CgoJICAgICAgICB2YXIgcmVzb3VyY2UgPSBTdHJvcGhlLmdldFJlc291cmNlRnJvbUppZCh0aGlzLmppZCk7CgkgICAgICAgIGlmIChyZXNvdXJjZSkgewoJICAgICAgICAgICAgLy8gdGhpcy5zZW5kKCRpcSh7dHlwZTogInNldCIsIGlkOiAiX2JpbmRfYXV0aF8yIn0pCgkgICAgICAgICAgICAvLyAgICAgLmMoJ2JpbmQnLCB7eG1sbnM6IFN0cm9waGUuTlMuQklORH0pCgkgICAgICAgICAgICAvLyAgICAgLmMoJ3Jlc291cmNlJywge30pLnQocmVzb3VyY2UpLnRyZWUoKSk7CgkgICAgICAgICAgICB2YXIgZGV2aWNlX3V1aWQgPSAiZGV2aWNlX3V1aWQiOwoJICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pc011bHRpTG9naW5TZXNzaW9ucykgewoJICAgICAgICAgICAgICAgIGRldmljZV91dWlkID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkudG9GaXhlZCg2KSAqIDEwMDAwMDApOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgdHJ5IHsKCSAgICAgICAgICAgICAgICB0aGlzLnNlbmQoJGlxKHsgdHlwZTogInNldCIsIGlkOiAiX2JpbmRfYXV0aF8yIiB9KS5jKCdiaW5kJywgeyB4bWxuczogU3Ryb3BoZS5OUy5CSU5EIH0pLmMoJ3Jlc291cmNlJywge30pLnQocmVzb3VyY2UpLnVwKCkuYygnb3MnKS50KCd3ZWJpbScpLnVwKCkuYygnZGV2aWNlX3V1aWQnKS50KGRldmljZV91dWlkKS51cCgpLmMoJ2lzX21hbnVhbF9sb2dpbicpLnQoJ3RydWUnKS50cmVlKCkpOwoJICAgICAgICAgICAgfSBjYXRjaCAoZSkgewoJICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJCaW5kIEVycm9yOiAiLCBlLm1lc3NhZ2UpOwoJICAgICAgICAgICAgfQoJICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgdGhpcy5zZW5kKCRpcSh7IHR5cGU6ICJzZXQiLCBpZDogIl9iaW5kX2F1dGhfMiIgfSkuYygnYmluZCcsIHsgeG1sbnM6IFN0cm9waGUuTlMuQklORCB9KS50cmVlKCkpOwoJICAgICAgICB9CgkgICAgfQoJICAgIHJldHVybiBmYWxzZTsKCX07CgoJU3Ryb3BoZS5SZXF1ZXN0LnByb3RvdHlwZS5fbmV3WEhSID0gZnVuY3Rpb24gKCkgewoJICAgIHZhciB4aHIgPSBfdXRpbHMueG1scmVxdWVzdCh0cnVlKTsKCSAgICBpZiAoeGhyLm92ZXJyaWRlTWltZVR5cGUpIHsKCSAgICAgICAgeGhyLm92ZXJyaWRlTWltZVR5cGUoJ3RleHQveG1sJyk7CgkgICAgfQoJICAgIC8vIHVzZSBGdW5jdGlvbi5iaW5kKCkgdG8gcHJlcGVuZCBvdXJzZWx2ZXMgYXMgYW4gYXJndW1lbnQKCSAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gdGhpcy5mdW5jLmJpbmQobnVsbCwgdGhpcyk7CgkgICAgcmV0dXJuIHhocjsKCX07CgoJU3Ryb3BoZS5XZWJzb2NrZXQucHJvdG90eXBlLl9jbG9zZVNvY2tldCA9IGZ1bmN0aW9uICgpIHsKCSAgICBpZiAodGhpcy5zb2NrZXQpIHsKCSAgICAgICAgdmFyIG1lID0gdGhpczsKCSAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CgkgICAgICAgICAgICB0cnkgewoJICAgICAgICAgICAgICAgIG1lLnNvY2tldC5jbG9zZSgpOwoJICAgICAgICAgICAgfSBjYXRjaCAoZSkge30KCSAgICAgICAgfSwgMCk7CgkgICAgfSBlbHNlIHsKCSAgICAgICAgdGhpcy5zb2NrZXQgPSBudWxsOwoJICAgIH0KCX07CgoJLyoqCgkgKgoJICogU3Ryb3BoZS5XZWJzb2NrZXQgaGFzIGEgYnVnIHdoaWxlIGxvZ291dDoKCSAqIDEuc2VuZDogPHByZXNlbmNlIHhtbG5zPSdqYWJiZXI6Y2xpZW50JyB0eXBlPSd1bmF2YWlsYWJsZScvPiBpcyBvazsKCSAqIDIuc2VuZDogPGNsb3NlIHhtbG5zPSd1cm46aWV0ZjpwYXJhbXM6eG1sOm5zOnhtcHAtZnJhbWluZycvPiB3aWxsIGNhdXNlIGEgcHJvYmxlbSxsb2cgYXMgZm9sbG93czoKCSAqIFdlYlNvY2tldCBjb25uZWN0aW9uIHRvICd3czovL2ltLWFwaS5lYXNlbW9iLmNvbS93cy8nIGZhaWxlZDogRGF0YSBmcmFtZSByZWNlaXZlZCBhZnRlciBjbG9zZV9jb25uZWN0IEAgc3Ryb3BoZS5qczo1MjkyY29ubmVjdCBAIHN0cm9waGUuanM6MjQ5MV9sb2dpbiBAIHdlYnNkay0xLjEuMi5qczoyNzhzdWMgQCB3ZWJzZGstMS4xLjIuanM6NjM2eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSBAIHdlYnNkay0xLjEuMi5qczoyNTgyCgkgKiAzICJXZWJzb2NrZXQgZXJyb3IgW29iamVjdCBFdmVudF0iCgkgKiBfY2hhbmdlQ29ubmVjdFN0YXR1cwoJICogb25FcnJvciBPYmplY3Qge3R5cGU6IDcsIG1zZzogIlRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbiBjb3VsZCBub3QgYmUgZXN0YWJsaXNoZWQgb3Igd2FzIGRpc2Nvbm5lY3RlZC4iLCByZWNvbm5lY3Q6IHRydWV9CgkgKgoJICogdGhpcyB3aWxsIHRyaWdnZXIgc29ja2V0Lm9uRXJyb3IsIHRoZXJlZm9yZSBfZG9EaXNjb25uZWN0IGFnYWluLgoJICogRml4IGl0IGJ5IG92ZXJpZGUgIF9vbk1lc3NhZ2UKCSAqLwoJU3Ryb3BoZS5XZWJzb2NrZXQucHJvdG90eXBlLl9vbk1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkgewoJICAgIGxvZ01lc3NhZ2UobWVzc2FnZSk7CgkgICAgLy8g6I635Y+WUmVzb3VyY2UKCSAgICB2YXIgZGF0YSA9IG1lc3NhZ2UuZGF0YTsKCSAgICBpZiAoZGF0YS5pbmRleE9mKCc8amlkPicpID4gMCkgewoJICAgICAgICB2YXIgc3RhcnQgPSBkYXRhLmluZGV4T2YoJzxqaWQ+JyksCgkgICAgICAgICAgICBlbmQgPSBkYXRhLmluZGV4T2YoJzwvamlkPicpLAoJICAgICAgICAgICAgZGF0YSA9IGRhdGEuc3Vic3RyaW5nKHN0YXJ0ICsgNSwgZW5kKTsKCSAgICAgICAgc3Ryb3BoZUNvbm4uc2V0SmlkKGRhdGEpOwoJICAgIH0KCgkgICAgdmFyIGVsZW0sIGRhdGE7CgkgICAgLy8gY2hlY2sgZm9yIGNsb3Npbmcgc3RyZWFtCgkgICAgLy8gdmFyIGNsb3NlID0gJzxjbG9zZSB4bWxucz0idXJuOmlldGY6cGFyYW1zOnhtbDpuczp4bXBwLWZyYW1pbmciIC8+JzsKCSAgICAvLyBpZiAobWVzc2FnZS5kYXRhID09PSBjbG9zZSkgewoJICAgIC8vICAgICB0aGlzLl9jb25uLnJhd0lucHV0KGNsb3NlKTsKCSAgICAvLyAgICAgdGhpcy5fY29ubi54bWxJbnB1dChtZXNzYWdlKTsKCSAgICAvLyAgICAgaWYgKCF0aGlzLl9jb25uLmRpc2Nvbm5lY3RpbmcpIHsKCSAgICAvLyAgICAgICAgIHRoaXMuX2Nvbm4uX2RvRGlzY29ubmVjdCgpOwoJICAgIC8vICAgICB9CgkgICAgLy8gICAgIHJldHVybjsKCSAgICAvLwoJICAgIC8vIHNlbmQgYW5kIHJlY2VpdmUgY2xvc2UgeG1sOiA8Y2xvc2UgeG1sbnM9J3VybjppZXRmOnBhcmFtczp4bWw6bnM6eG1wcC1mcmFtaW5nJy8+CgkgICAgLy8gc28gd2UgY2FuJ3QganVkZ2Ugd2hldGhlciBtZXNzYWdlLmRhdGEgZXF1YWxzIGNsb3NlIGJ5ID09PSBzaW1wbHkuCgkgICAgaWYgKG1lc3NhZ2UuZGF0YS5pbmRleE9mKCI8Y2xvc2UgIikgPT09IDApIHsKCSAgICAgICAgZWxlbSA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcobWVzc2FnZS5kYXRhLCAidGV4dC94bWwiKS5kb2N1bWVudEVsZW1lbnQ7CgkgICAgICAgIHZhciBzZWVfdXJpID0gZWxlbS5nZXRBdHRyaWJ1dGUoInNlZS1vdGhlci11cmkiKTsKCSAgICAgICAgaWYgKHNlZV91cmkpIHsKCSAgICAgICAgICAgIHRoaXMuX2Nvbm4uX2NoYW5nZUNvbm5lY3RTdGF0dXMoU3Ryb3BoZS5TdGF0dXMuUkVESVJFQ1QsICJSZWNlaXZlZCBzZWUtb3RoZXItdXJpLCByZXNldHRpbmcgY29ubmVjdGlvbiIpOwoJICAgICAgICAgICAgdGhpcy5fY29ubi5yZXNldCgpOwoJICAgICAgICAgICAgdGhpcy5fY29ubi5zZXJ2aWNlID0gc2VlX3VyaTsKCSAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3QoKTsKCSAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgIC8vIGlmICghdGhpcy5fY29ubi5kaXNjb25uZWN0aW5nKSB7CgkgICAgICAgICAgICB0aGlzLl9jb25uLl9kb0Rpc2Nvbm5lY3QoInJlY2VpdmUgPGNsb3NlPiBmcm9tIHNlcnZlciIpOwoJICAgICAgICAgICAgLy8gfQoJICAgICAgICB9CgkgICAgICAgIHJldHVybjsKCSAgICB9IGVsc2UgaWYgKG1lc3NhZ2UuZGF0YS5zZWFyY2goIjxvcGVuICIpID09PSAwKSB7CgkgICAgICAgIC8vIFRoaXMgaGFuZGxlcyBzdHJlYW0gcmVzdGFydHMKCSAgICAgICAgZWxlbSA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcobWVzc2FnZS5kYXRhLCAidGV4dC94bWwiKS5kb2N1bWVudEVsZW1lbnQ7CgkgICAgICAgIGlmICghdGhpcy5faGFuZGxlU3RyZWFtU3RhcnQoZWxlbSkpIHsKCSAgICAgICAgICAgIHJldHVybjsKCSAgICAgICAgfQoJICAgIH0gZWxzZSB7CgkgICAgICAgIGRhdGEgPSB0aGlzLl9zdHJlYW1XcmFwKG1lc3NhZ2UuZGF0YSk7CgkgICAgICAgIGVsZW0gPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGRhdGEsICJ0ZXh0L3htbCIpLmRvY3VtZW50RWxlbWVudDsKCSAgICB9CgoJICAgIGlmICh0aGlzLl9jaGVja19zdHJlYW1lcnJvcihlbGVtLCBTdHJvcGhlLlN0YXR1cy5FUlJPUikpIHsKCSAgICAgICAgcmV0dXJuOwoJICAgIH0KCgkgICAgLy9oYW5kbGUgdW5hdmFpbGFibGUgcHJlc2VuY2Ugc3RhbnphIGJlZm9yZSBkaXNjb25uZWN0aW5nCgkgICAgaWYgKHRoaXMuX2Nvbm4uZGlzY29ubmVjdGluZyAmJiBlbGVtLmZpcnN0Q2hpbGQubm9kZU5hbWUgPT09ICJwcmVzZW5jZSIgJiYgZWxlbS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgidHlwZSIpID09PSAidW5hdmFpbGFibGUiKSB7CgkgICAgICAgIHRoaXMuX2Nvbm4ueG1sSW5wdXQoZWxlbSk7CgkgICAgICAgIHRoaXMuX2Nvbm4ucmF3SW5wdXQoU3Ryb3BoZS5zZXJpYWxpemUoZWxlbSkpOwoJICAgICAgICAvLyBpZiB3ZSBhcmUgYWxyZWFkeSBkaXNjb25uZWN0aW5nIHdlIHdpbGwgaWdub3JlIHRoZSB1bmF2YWlsYWJsZSBzdGFuemEgYW5kCgkgICAgICAgIC8vIHdhaXQgZm9yIHRoZSA8L3N0cmVhbTpzdHJlYW0+IHRhZyBiZWZvcmUgd2UgY2xvc2UgdGhlIGNvbm5lY3Rpb24KCSAgICAgICAgcmV0dXJuOwoJICAgIH0KCSAgICB0aGlzLl9jb25uLl9kYXRhUmVjdihlbGVtLCBtZXNzYWdlLmRhdGEpOwoJfTsKCgl2YXIgX2xpc3Rlbk5ldHdvcmsgPSBmdW5jdGlvbiBfbGlzdGVuTmV0d29yayhvbmxpbmVDYWxsYmFjaywgb2ZmbGluZUNhbGxiYWNrKSB7CgoJICAgIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikgewoJICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25saW5lJywgb25saW5lQ2FsbGJhY2spOwoJICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIG9mZmxpbmVDYWxsYmFjayk7CgkgICAgfSBlbHNlIGlmICh3aW5kb3cuYXR0YWNoRXZlbnQpIHsKCSAgICAgICAgaWYgKGRvY3VtZW50LmJvZHkpIHsKCSAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXR0YWNoRXZlbnQoJ29ub25saW5lJywgb25saW5lQ2FsbGJhY2spOwoJICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hdHRhY2hFdmVudCgnb25vZmZsaW5lJywgb2ZmbGluZUNhbGxiYWNrKTsKCSAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgIHdpbmRvdy5hdHRhY2hFdmVudCgnbG9hZCcsIGZ1bmN0aW9uICgpIHsKCSAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmF0dGFjaEV2ZW50KCdvbm9ubGluZScsIG9ubGluZUNhbGxiYWNrKTsKCSAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmF0dGFjaEV2ZW50KCdvbm9mZmxpbmUnLCBvZmZsaW5lQ2FsbGJhY2spOwoJICAgICAgICAgICAgfSk7CgkgICAgICAgIH0KCSAgICB9IGVsc2UgewoJICAgICAgICAvKnZhciBvbmxpbmVUbXAgPSB3aW5kb3cub25vbmxpbmU7CgkgICAgICAgICB2YXIgb2ZmbGluZVRtcCA9IHdpbmRvdy5vbm9mZmxpbmU7CgkgICAgICAgICAgd2luZG93LmF0dGFjaEV2ZW50KCdvbm9ubGluZScsIGZ1bmN0aW9uICgpIHsKCSAgICAgICAgIHRyeSB7CgkgICAgICAgICB0eXBlb2Ygb25saW5lVG1wID09PSAnZnVuY3Rpb24nICYmIG9ubGluZVRtcCgpOwoJICAgICAgICAgfSBjYXRjaCAoIGUgKSB7fQoJICAgICAgICAgb25saW5lQ2FsbGJhY2soKTsKCSAgICAgICAgIH0pOwoJICAgICAgICAgd2luZG93LmF0dGFjaEV2ZW50KCdvbm9mZmxpbmUnLCBmdW5jdGlvbiAoKSB7CgkgICAgICAgICB0cnkgewoJICAgICAgICAgdHlwZW9mIG9mZmxpbmVUbXAgPT09ICdmdW5jdGlvbicgJiYgb2ZmbGluZVRtcCgpOwoJICAgICAgICAgfSBjYXRjaCAoIGUgKSB7fQoJICAgICAgICAgb2ZmbGluZUNhbGxiYWNrKCk7CgkgICAgICAgICB9KTsqLwoJICAgIH0KCX07CgoJdmFyIF9wYXJzZVJvb20gPSBmdW5jdGlvbiBfcGFyc2VSb29tKHJlc3VsdCkgewoJICAgIHZhciByb29tcyA9IFtdOwoJICAgIHZhciBpdGVtcyA9IHJlc3VsdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaXRlbScpOwoJICAgIGlmIChpdGVtcykgewoJICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7CgkgICAgICAgICAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldOwoJICAgICAgICAgICAgdmFyIHJvb21KaWQgPSBpdGVtLmdldEF0dHJpYnV0ZSgnamlkJyk7CgkgICAgICAgICAgICB2YXIgdG1wID0gcm9vbUppZC5zcGxpdCgnQCcpWzBdOwoJICAgICAgICAgICAgdmFyIHJvb20gPSB7CgkgICAgICAgICAgICAgICAgamlkOiByb29tSmlkLAoJICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0uZ2V0QXR0cmlidXRlKCduYW1lJyksCgkgICAgICAgICAgICAgICAgcm9vbUlkOiB0bXAuc3BsaXQoJ18nKVsxXQoJICAgICAgICAgICAgfTsKCSAgICAgICAgICAgIHJvb21zLnB1c2gocm9vbSk7CgkgICAgICAgIH0KCSAgICB9CgkgICAgcmV0dXJuIHJvb21zOwoJfTsKCgl2YXIgX3BhcnNlUm9vbU9jY3VwYW50cyA9IGZ1bmN0aW9uIF9wYXJzZVJvb21PY2N1cGFudHMocmVzdWx0KSB7CgkgICAgdmFyIG9jY3VwYW50cyA9IFtdOwoJICAgIHZhciBpdGVtcyA9IHJlc3VsdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaXRlbScpOwoJICAgIGlmIChpdGVtcykgewoJICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7CgkgICAgICAgICAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldOwoJICAgICAgICAgICAgdmFyIHJvb20gPSB7CgkgICAgICAgICAgICAgICAgamlkOiBpdGVtLmdldEF0dHJpYnV0ZSgnamlkJyksCgkgICAgICAgICAgICAgICAgbmFtZTogaXRlbS5nZXRBdHRyaWJ1dGUoJ25hbWUnKQoJICAgICAgICAgICAgfTsKCSAgICAgICAgICAgIG9jY3VwYW50cy5wdXNoKHJvb20pOwoJICAgICAgICB9CgkgICAgfQoJICAgIHJldHVybiBvY2N1cGFudHM7Cgl9OwoKCXZhciBfcGFyc2VSZXNwb25zZU1lc3NhZ2UgPSBmdW5jdGlvbiBfcGFyc2VSZXNwb25zZU1lc3NhZ2UobXNnaW5mbykgewoJICAgIHZhciBwYXJzZU1zZ0RhdGEgPSB7IGVycm9yTXNnOiB0cnVlLCBkYXRhOiBbXSB9OwoKCSAgICB2YXIgbXNnQm9kaWVzID0gbXNnaW5mby5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpOwoJICAgIGlmIChtc2dCb2RpZXMpIHsKCSAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2dCb2RpZXMubGVuZ3RoOyBpKyspIHsKCSAgICAgICAgICAgIHZhciBtc2dCb2R5ID0gbXNnQm9kaWVzW2ldOwoJICAgICAgICAgICAgdmFyIGNoaWxkTm9kZXMgPSBtc2dCb2R5LmNoaWxkTm9kZXM7CgkgICAgICAgICAgICBpZiAoY2hpbGROb2RlcyAmJiBjaGlsZE5vZGVzLmxlbmd0aCA+IDApIHsKCSAgICAgICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gbXNnQm9keS5jaGlsZE5vZGVzWzBdOwoJICAgICAgICAgICAgICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT0gU3Ryb3BoZS5FbGVtZW50VHlwZS5URVhUKSB7CgkgICAgICAgICAgICAgICAgICAgIHZhciBqc29uZGF0YSA9IGNoaWxkTm9kZS53aG9sZVRleHQgfHwgY2hpbGROb2RlLm5vZGVWYWx1ZTsKCSAgICAgICAgICAgICAgICAgICAganNvbmRhdGEgPSBqc29uZGF0YS5yZXBsYWNlKCdcbicsICc8YnI+Jyk7CgkgICAgICAgICAgICAgICAgICAgIHRyeSB7CgkgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGV2YWwoJygnICsganNvbmRhdGEgKyAnKScpOwoJICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VNc2dEYXRhLmVycm9yTXNnID0gZmFsc2U7CgkgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZU1zZ0RhdGEuZGF0YSA9IFtkYXRhXTsKCSAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge30KCSAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICB9CgkgICAgICAgIH0KCgkgICAgICAgIHZhciBkZWxheVRhZ3MgPSBtc2dpbmZvLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkZWxheScpOwoJICAgICAgICBpZiAoZGVsYXlUYWdzICYmIGRlbGF5VGFncy5sZW5ndGggPiAwKSB7CgkgICAgICAgICAgICB2YXIgZGVsYXlUYWcgPSBkZWxheVRhZ3NbMF07CgkgICAgICAgICAgICB2YXIgZGVsYXlNc2dUaW1lID0gZGVsYXlUYWcuZ2V0QXR0cmlidXRlKCdzdGFtcCcpOwoJICAgICAgICAgICAgaWYgKGRlbGF5TXNnVGltZSkgewoJICAgICAgICAgICAgICAgIHBhcnNlTXNnRGF0YS5kZWxheVRpbWVTdGFtcCA9IGRlbGF5TXNnVGltZTsKCSAgICAgICAgICAgIH0KCSAgICAgICAgfQoJICAgIH0gZWxzZSB7CgkgICAgICAgIHZhciBjaGlsZHJlbnMgPSBtc2dpbmZvLmNoaWxkTm9kZXM7CgkgICAgICAgIGlmIChjaGlsZHJlbnMgJiYgY2hpbGRyZW5zLmxlbmd0aCA+IDApIHsKCSAgICAgICAgICAgIHZhciBjaGlsZCA9IG1zZ2luZm8uY2hpbGROb2Rlc1swXTsKCSAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PSBTdHJvcGhlLkVsZW1lbnRUeXBlLlRFWFQpIHsKCSAgICAgICAgICAgICAgICB0cnkgewoJICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGV2YWwoJygnICsgY2hpbGQubm9kZVZhbHVlICsgJyknKTsKCSAgICAgICAgICAgICAgICAgICAgcGFyc2VNc2dEYXRhLmVycm9yTXNnID0gZmFsc2U7CgkgICAgICAgICAgICAgICAgICAgIHBhcnNlTXNnRGF0YS5kYXRhID0gW2RhdGFdOwoJICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9CgkgICAgICAgICAgICB9CgkgICAgICAgIH0KCSAgICB9CgkgICAgcmV0dXJuIHBhcnNlTXNnRGF0YTsKCX07CgoJdmFyIF9wYXJzZU5hbWVGcm9tSmlkRm4gPSBmdW5jdGlvbiBfcGFyc2VOYW1lRnJvbUppZEZuKGppZCwgZG9tYWluKSB7CgkgICAgZG9tYWluID0gZG9tYWluIHx8ICcnOwoJICAgIHZhciB0ZW1wc3RyID0gamlkOwoJICAgIHZhciBmaW5kZXggPSB0ZW1wc3RyLmluZGV4T2YoJ18nKTsKCgkgICAgaWYgKGZpbmRleCAhPT0gLTEpIHsKCSAgICAgICAgdGVtcHN0ciA9IHRlbXBzdHIuc3Vic3RyaW5nKGZpbmRleCArIDEpOwoJICAgIH0KCSAgICB2YXIgYXRpbmRleCA9IHRlbXBzdHIuaW5kZXhPZignQCcgKyBkb21haW4pOwoJICAgIGlmIChhdGluZGV4ICE9PSAtMSkgewoJICAgICAgICB0ZW1wc3RyID0gdGVtcHN0ci5zdWJzdHJpbmcoMCwgYXRpbmRleCk7CgkgICAgfQoJICAgIHJldHVybiB0ZW1wc3RyOwoJfTsKCgl2YXIgX3BhcnNlRnJpZW5kID0gZnVuY3Rpb24gX3BhcnNlRnJpZW5kKHF1ZXJ5VGFnLCBjb25uLCBmcm9tKSB7CgkgICAgdmFyIHJvdXN0ZXIgPSBbXTsKCSAgICB2YXIgaXRlbXMgPSBxdWVyeVRhZy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaXRlbScpOwoJICAgIGlmIChpdGVtcykgewoJICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7CgkgICAgICAgICAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldOwoJICAgICAgICAgICAgdmFyIGppZCA9IGl0ZW0uZ2V0QXR0cmlidXRlKCdqaWQnKTsKCSAgICAgICAgICAgIGlmICghamlkKSB7CgkgICAgICAgICAgICAgICAgY29udGludWU7CgkgICAgICAgICAgICB9CgkgICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gaXRlbS5nZXRBdHRyaWJ1dGUoJ3N1YnNjcmlwdGlvbicpOwoJICAgICAgICAgICAgdmFyIGZyaWVuZCA9IHsKCSAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvbiwKCSAgICAgICAgICAgICAgICBqaWQ6IGppZAoJICAgICAgICAgICAgfTsKCSAgICAgICAgICAgIHZhciBhc2sgPSBpdGVtLmdldEF0dHJpYnV0ZSgnYXNrJyk7CgkgICAgICAgICAgICBpZiAoYXNrKSB7CgkgICAgICAgICAgICAgICAgZnJpZW5kLmFzayA9IGFzazsKCSAgICAgICAgICAgIH0KCSAgICAgICAgICAgIHZhciBuYW1lID0gaXRlbS5nZXRBdHRyaWJ1dGUoJ25hbWUnKTsKCSAgICAgICAgICAgIGlmIChuYW1lKSB7CgkgICAgICAgICAgICAgICAgZnJpZW5kLm5hbWUgPSBuYW1lOwoJICAgICAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgICAgICB2YXIgbiA9IF9wYXJzZU5hbWVGcm9tSmlkRm4oamlkKTsKCSAgICAgICAgICAgICAgICBmcmllbmQubmFtZSA9IG47CgkgICAgICAgICAgICB9CgkgICAgICAgICAgICB2YXIgZ3JvdXBzID0gW107CgkgICAgICAgICAgICBTdHJvcGhlLmZvckVhY2hDaGlsZChpdGVtLCAnZ3JvdXAnLCBmdW5jdGlvbiAoZ3JvdXApIHsKCSAgICAgICAgICAgICAgICBncm91cHMucHVzaChTdHJvcGhlLmdldFRleHQoZ3JvdXApKTsKCSAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgZnJpZW5kLmdyb3VwcyA9IGdyb3VwczsKCSAgICAgICAgICAgIHJvdXN0ZXIucHVzaChmcmllbmQpOwoJICAgICAgICAgICAgLy8gQuWQjOaEj+S5i+WQjiAtPiBC6K6i6ZiFQQoJICAgICAgICAgICAgLy8gZml4OiDlkKvmnIlhc2vmoIfnpLrnmoTlpb3lj4vku6Pooajlt7Lnu4/lj5HpgIHov4flj43lkJHorqLpmIXmtojmga/vvIzkuI3pnIDopoHlho3mrKHlj5HpgIHjgIIKCSAgICAgICAgICAgIGlmIChjb25uICYmIHN1YnNjcmlwdGlvbiA9PSAnZnJvbScgJiYgIWFzaykgewoJICAgICAgICAgICAgICAgIGNvbm4uc3Vic2NyaWJlKHsKCSAgICAgICAgICAgICAgICAgICAgdG9KaWQ6IGppZCwKCSAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogIltyZXNwOnRydWVdIgoJICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgfQoKCSAgICAgICAgICAgIGlmIChjb25uICYmIHN1YnNjcmlwdGlvbiA9PSAndG8nKSB7CgkgICAgICAgICAgICAgICAgY29ubi5zdWJzY3JpYmVkKHsKCSAgICAgICAgICAgICAgICAgICAgdG9KaWQ6IGppZAoJICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgfQoJICAgICAgICB9CgkgICAgfQoJICAgIHJldHVybiByb3VzdGVyOwoJfTsKCgl2YXIgX2xvZ2luID0gZnVuY3Rpb24gX2xvZ2luKG9wdGlvbnMsIGNvbm4pIHsKCSAgICB2YXIgYWNjZXNzVG9rZW4gPSBvcHRpb25zLmFjY2Vzc190b2tlbiB8fCAnJzsKCSAgICBpZiAoYWNjZXNzVG9rZW4gPT0gJycpIHsKCSAgICAgICAgdmFyIGxvZ2luZm8gPSBfdXRpbHMuc3RyaW5naWZ5KG9wdGlvbnMpOwoJICAgICAgICBjb25uLm9uRXJyb3IoewoJICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX09QRU5fVVNFUkdSSURfRVJST1IsCgkgICAgICAgICAgICBkYXRhOiBvcHRpb25zCgkgICAgICAgIH0pOwoJICAgICAgICByZXR1cm47CgkgICAgfQoJICAgIGNvbm4uY29udGV4dC5hY2Nlc3NUb2tlbiA9IG9wdGlvbnMuYWNjZXNzX3Rva2VuOwoJICAgIGNvbm4uY29udGV4dC5hY2Nlc3NUb2tlbkV4cGlyZXMgPSBvcHRpb25zLmV4cGlyZXNfaW47CgkgICAgaWYgKGNvbm4uaXNPcGVuaW5nKCkgJiYgY29ubi5jb250ZXh0LnN0cm9waGVDb25uKSB7CgkgICAgICAgIHN0cm9waGVDb25uID0gY29ubi5nZXRTdHJvcGhlKCk7CgkgICAgfSBlbHNlIGlmIChjb25uLmlzT3BlbmVkKCkgJiYgY29ubi5jb250ZXh0LnN0cm9waGVDb25uKSB7CgkgICAgICAgIC8vIHJldHVybjsKCSAgICAgICAgc3Ryb3BoZUNvbm4gPSBjb25uLmdldFN0cm9waGUoKTsKCSAgICB9IGVsc2UgewoJICAgICAgICBzdHJvcGhlQ29ubiA9IGNvbm4uZ2V0U3Ryb3BoZSgpOwoJICAgIH0KCSAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjayhzdGF0dXMsIG1zZykgewoJICAgICAgICBfbG9naW5DYWxsYmFjayhzdGF0dXMsIG1zZywgY29ubik7CgkgICAgfTsKCgkgICAgY29ubi5jb250ZXh0LnN0cm9waGVDb25uID0gc3Ryb3BoZUNvbm47CgkgICAgaWYgKGNvbm4ucm91dGUpIHsKCSAgICAgICAgc3Ryb3BoZUNvbm4uY29ubmVjdChjb25uLmNvbnRleHQuamlkLCAnJHQkJyArIGFjY2Vzc1Rva2VuLCBjYWxsYmFjaywgY29ubi53YWl0LCBjb25uLmhvbGQsIGNvbm4ucm91dGUpOwoJICAgIH0gZWxzZSB7CgkgICAgICAgIHN0cm9waGVDb25uLmNvbm5lY3QoY29ubi5jb250ZXh0LmppZCwgJyR0JCcgKyBhY2Nlc3NUb2tlbiwgY2FsbGJhY2ssIGNvbm4ud2FpdCwgY29ubi5ob2xkKTsKCSAgICB9Cgl9OwoKCXZhciBfcGFyc2VNZXNzYWdlVHlwZSA9IGZ1bmN0aW9uIF9wYXJzZU1lc3NhZ2VUeXBlKG1zZ2luZm8pIHsKCSAgICB2YXIgcmVjZWl2ZWluZm8gPSBtc2dpbmZvLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdyZWNlaXZlZCcpLAoJICAgICAgICBpbnZpdGVpbmZvID0gbXNnaW5mby5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW52aXRlJyksCgkgICAgICAgIGRlbGl2ZXJ5aW5mbyA9IG1zZ2luZm8uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RlbGl2ZXJ5JyksCgkgICAgICAgIGFja2VkID0gbXNnaW5mby5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYWNrZWQnKSwKCSAgICAgICAgZXJyb3IgPSBtc2dpbmZvLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdlcnJvcicpLAoJICAgICAgICBtc2d0eXBlID0gJ25vcm1hbCc7CgkgICAgaWYgKHJlY2VpdmVpbmZvICYmIHJlY2VpdmVpbmZvLmxlbmd0aCA+IDAgJiYgcmVjZWl2ZWluZm9bMF0ubmFtZXNwYWNlVVJJID09PSAndXJuOnhtcHA6cmVjZWlwdHMnKSB7CgoJICAgICAgICBtc2d0eXBlID0gJ3JlY2VpdmVkJzsKCSAgICB9IGVsc2UgaWYgKGludml0ZWluZm8gJiYgaW52aXRlaW5mby5sZW5ndGggPiAwKSB7CgoJICAgICAgICBtc2d0eXBlID0gJ2ludml0ZSc7CgkgICAgfSBlbHNlIGlmIChkZWxpdmVyeWluZm8gJiYgZGVsaXZlcnlpbmZvLmxlbmd0aCA+IDApIHsKCgkgICAgICAgIG1zZ3R5cGUgPSAnZGVsaXZlcnknOyAvLyDmtojmga/pgIHovr4KCSAgICB9IGVsc2UgaWYgKGFja2VkICYmIGFja2VkLmxlbmd0aCkgewoKCSAgICAgICAgbXNndHlwZSA9ICdhY2tlZCc7IC8vIOa2iOaBr+W3suivuwoJICAgIH0gZWxzZSBpZiAoZXJyb3IgJiYgZXJyb3IubGVuZ3RoKSB7CgoJICAgICAgICB2YXIgZXJyb3JJdGVtID0gZXJyb3JbMF0sCgkgICAgICAgICAgICB1c2VyTXV0ZWQgPSBlcnJvckl0ZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3VzZXItbXV0ZWQnKTsKCgkgICAgICAgIGlmICh1c2VyTXV0ZWQgJiYgdXNlck11dGVkLmxlbmd0aCkgewoKCSAgICAgICAgICAgIG1zZ3R5cGUgPSAndXNlck11dGVkJzsKCSAgICAgICAgfQoJICAgIH0KCSAgICByZXR1cm4gbXNndHlwZTsKCX07CgoJdmFyIF9oYW5kbGVNZXNzYWdlUXVldWUgPSBmdW5jdGlvbiBfaGFuZGxlTWVzc2FnZVF1ZXVlKGNvbm4pIHsKCSAgICBmb3IgKHZhciBpIGluIF9tc2dIYXNoKSB7CgkgICAgICAgIGlmIChfbXNnSGFzaC5oYXNPd25Qcm9wZXJ0eShpKSkgewoJICAgICAgICAgICAgX21zZ0hhc2hbaV0uc2VuZChjb25uKTsKCSAgICAgICAgfQoJICAgIH0KCX07CgoJdmFyIF9sb2dpbkNhbGxiYWNrID0gZnVuY3Rpb24gX2xvZ2luQ2FsbGJhY2soc3RhdHVzLCBtc2csIGNvbm4pIHsKCSAgICB2YXIgY29uZmxpY3QsIGVycm9yOwoKCSAgICBpZiAobXNnID09PSAnY29uZmxpY3QnKSB7CgkgICAgICAgIGNvbmZsaWN0ID0gdHJ1ZTsKCSAgICAgICAgY29ubi5jbG9zZSgpOwoJICAgIH0KCgkgICAgaWYgKHN0YXR1cyA9PSBTdHJvcGhlLlN0YXR1cy5DT05ORkFJTCkgewoJICAgICAgICAvL2NsaWVudCBvZmZsaW5lLCBwaW5nL3BvbmcgdGltZW91dCwgc2VydmVyIHF1aXQsIHNlcnZlciBvZmZsaW5lCgkgICAgICAgIGVycm9yID0gewoJICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX1NFUlZFUl9DTE9TRV9FUlJPUiwKCSAgICAgICAgICAgIG1zZzogbXNnLAoJICAgICAgICAgICAgcmVjb25uZWN0OiB0cnVlCgkgICAgICAgIH07CgoJICAgICAgICBjb25mbGljdCAmJiAoZXJyb3IuY29uZmxpY3QgPSB0cnVlKTsKCSAgICAgICAgY29ubi5vbkVycm9yKGVycm9yKTsKCSAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSBTdHJvcGhlLlN0YXR1cy5BVFRBQ0hFRCB8fCBzdGF0dXMgPT0gU3Ryb3BoZS5TdGF0dXMuQ09OTkVDVEVEKSB7CgkgICAgICAgIC8vIGNsaWVudCBzaG91bGQgbGltaXQgdGhlIHNwZWVkIG9mIHNlbmRpbmcgYWNrIG1lc3NhZ2VzICB1cCB0byA1L3MKCSAgICAgICAgY29ubi5hdXRvUmVjb25uZWN0TnVtVG90YWwgPSAwOwoJICAgICAgICBjb25uLmludGVydmFsSWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CgkgICAgICAgICAgICBjb25uLmhhbmRlbFNlbmRRdWV1ZSgpOwoJICAgICAgICB9LCAyMDApOwoJICAgICAgICB2YXIgaGFuZGxlTWVzc2FnZSA9IGZ1bmN0aW9uIGhhbmRsZU1lc3NhZ2UobXNnaW5mbykgewoJICAgICAgICAgICAgdmFyIGRlbGl2ZXJ5ID0gbXNnaW5mby5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGVsaXZlcnknKTsKCSAgICAgICAgICAgIHZhciBhY2tlZCA9IG1zZ2luZm8uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2Fja2VkJyk7CgkgICAgICAgICAgICBpZiAoZGVsaXZlcnkubGVuZ3RoKSB7CgkgICAgICAgICAgICAgICAgY29ubi5oYW5kbGVEZWxpdmVyZWRNZXNzYWdlKG1zZ2luZm8pOwoJICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgaWYgKGFja2VkLmxlbmd0aCkgewoJICAgICAgICAgICAgICAgIGNvbm4uaGFuZGxlQWNrZWRNZXNzYWdlKG1zZ2luZm8pOwoJICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgdmFyIHR5cGUgPSBfcGFyc2VNZXNzYWdlVHlwZShtc2dpbmZvKTsKCSAgICAgICAgICAgIHN3aXRjaCAodHlwZSkgewoJICAgICAgICAgICAgICAgIGNhc2UgInJlY2VpdmVkIjoKCSAgICAgICAgICAgICAgICAgICAgY29ubi5oYW5kbGVSZWNlaXZlZE1lc3NhZ2UobXNnaW5mbyk7CgkgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwoJICAgICAgICAgICAgICAgIGNhc2UgImludml0ZSI6CgkgICAgICAgICAgICAgICAgICAgIGNvbm4uaGFuZGxlSW52aXRlTWVzc2FnZShtc2dpbmZvKTsKCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CgkgICAgICAgICAgICAgICAgY2FzZSAiZGVsaXZlcnkiOgoJICAgICAgICAgICAgICAgICAgICBjb25uLmhhbmRsZURlbGl2ZXJlZE1lc3NhZ2UobXNnaW5mbyk7CgkgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwoJICAgICAgICAgICAgICAgIGNhc2UgImFja2VkIjoKCSAgICAgICAgICAgICAgICAgICAgY29ubi5oYW5kbGVBY2tlZE1lc3NhZ2UobXNnaW5mbyk7CgkgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwoJICAgICAgICAgICAgICAgIGNhc2UgInVzZXJNdXRlZCI6CgkgICAgICAgICAgICAgICAgICAgIGNvbm4uaGFuZGxlTXV0ZWRNZXNzYWdlKG1zZ2luZm8pOwoJICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKCSAgICAgICAgICAgICAgICBkZWZhdWx0OgoJICAgICAgICAgICAgICAgICAgICBjb25uLmhhbmRsZU1lc3NhZ2UobXNnaW5mbyk7CgkgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwoJICAgICAgICAgICAgfQoJICAgICAgICB9OwoJICAgICAgICB2YXIgaGFuZGxlUHJlc2VuY2UgPSBmdW5jdGlvbiBoYW5kbGVQcmVzZW5jZShtc2dpbmZvKSB7CgkgICAgICAgICAgICBjb25uLmhhbmRsZVByZXNlbmNlKG1zZ2luZm8pOwoJICAgICAgICAgICAgcmV0dXJuIHRydWU7CgkgICAgICAgIH07CgkgICAgICAgIHZhciBoYW5kbGVQaW5nID0gZnVuY3Rpb24gaGFuZGxlUGluZyhtc2dpbmZvKSB7CgkgICAgICAgICAgICBjb25uLmhhbmRsZVBpbmcobXNnaW5mbyk7CgkgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKCSAgICAgICAgfTsKCSAgICAgICAgdmFyIGhhbmRsZUlxUm9zdGVyID0gZnVuY3Rpb24gaGFuZGxlSXFSb3N0ZXIobXNnaW5mbykgewoJICAgICAgICAgICAgY29ubi5oYW5kbGVJcVJvc3Rlcihtc2dpbmZvKTsKCSAgICAgICAgICAgIHJldHVybiB0cnVlOwoJICAgICAgICB9OwoJICAgICAgICB2YXIgaGFuZGxlSXFQcml2YWN5ID0gZnVuY3Rpb24gaGFuZGxlSXFQcml2YWN5KG1zZ2luZm8pIHsKCSAgICAgICAgICAgIGNvbm4uaGFuZGxlSXFQcml2YWN5KG1zZ2luZm8pOwoJICAgICAgICAgICAgcmV0dXJuIHRydWU7CgkgICAgICAgIH07CgkgICAgICAgIHZhciBoYW5kbGVJcSA9IGZ1bmN0aW9uIGhhbmRsZUlxKG1zZ2luZm8pIHsKCSAgICAgICAgICAgIGNvbm4uaGFuZGxlSXEobXNnaW5mbyk7CgkgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKCSAgICAgICAgfTsKCgkgICAgICAgIGNvbm4uYWRkSGFuZGxlcihoYW5kbGVNZXNzYWdlLCBudWxsLCAnbWVzc2FnZScsIG51bGwsIG51bGwsIG51bGwpOwoJICAgICAgICBjb25uLmFkZEhhbmRsZXIoaGFuZGxlUHJlc2VuY2UsIG51bGwsICdwcmVzZW5jZScsIG51bGwsIG51bGwsIG51bGwpOwoJICAgICAgICBjb25uLmFkZEhhbmRsZXIoaGFuZGxlUGluZywgJ3Vybjp4bXBwOnBpbmcnLCAnaXEnLCAnZ2V0JywgbnVsbCwgbnVsbCk7CgkgICAgICAgIGNvbm4uYWRkSGFuZGxlcihoYW5kbGVJcVJvc3RlciwgJ2phYmJlcjppcTpyb3N0ZXInLCAnaXEnLCAnc2V0JywgbnVsbCwgbnVsbCk7CgkgICAgICAgIGNvbm4uYWRkSGFuZGxlcihoYW5kbGVJcVByaXZhY3ksICdqYWJiZXI6aXE6cHJpdmFjeScsICdpcScsICdzZXQnLCBudWxsLCBudWxsKTsKCSAgICAgICAgY29ubi5hZGRIYW5kbGVyKGhhbmRsZUlxLCBudWxsLCAnaXEnLCBudWxsLCBudWxsLCBudWxsKTsKCgkgICAgICAgIGNvbm4ucmVnaXN0ZXJDb25mcklRSGFuZGxlciAmJiBjb25uLnJlZ2lzdGVyQ29uZnJJUUhhbmRsZXIoKTsKCgkgICAgICAgIGNvbm4uY29udGV4dC5zdGF0dXMgPSBfY29kZS5TVEFUVVNfT1BFTkVEOwoKCSAgICAgICAgdmFyIHN1cHBvcnRSZWNNZXNzYWdlID0gW19jb2RlLldFQklNX01FU1NBR0VfUkVDX1RFWFQsIF9jb2RlLldFQklNX01FU1NBR0VfUkVDX0VNT0pJXTsKCgkgICAgICAgIGlmIChfdXRpbHMuaXNDYW5Eb3duTG9hZEZpbGUpIHsKCSAgICAgICAgICAgIHN1cHBvcnRSZWNNZXNzYWdlLnB1c2goX2NvZGUuV0VCSU1fTUVTU0FHRV9SRUNfUEhPVE8pOwoJICAgICAgICAgICAgc3VwcG9ydFJlY01lc3NhZ2UucHVzaChfY29kZS5XRUJJTV9NRVNTQUdFX1JFQ19BVURJT19GSUxFKTsKCSAgICAgICAgfQoJICAgICAgICB2YXIgc3VwcG9ydFNlZE1lc3NhZ2UgPSBbX2NvZGUuV0VCSU1fTUVTU0FHRV9TRURfVEVYVF07CgkgICAgICAgIGlmIChfdXRpbHMuaXNDYW5VcGxvYWRGaWxlKSB7CgkgICAgICAgICAgICBzdXBwb3J0U2VkTWVzc2FnZS5wdXNoKF9jb2RlLldFQklNX01FU1NBR0VfUkVDX1BIT1RPKTsKCSAgICAgICAgICAgIHN1cHBvcnRTZWRNZXNzYWdlLnB1c2goX2NvZGUuV0VCSU1fTUVTU0FHRV9SRUNfQVVESU9fRklMRSk7CgkgICAgICAgIH0KCSAgICAgICAgY29ubi5ub3RpZnlWZXJzaW9uKCk7CgkgICAgICAgIGNvbm4ucmV0cnkgJiYgX2hhbmRsZU1lc3NhZ2VRdWV1ZShjb25uKTsKCSAgICAgICAgY29ubi5oZWFydEJlYXQoKTsKCSAgICAgICAgY29ubi5pc0F1dG9Mb2dpbiAmJiBjb25uLnNldFByZXNlbmNlKCk7CgoJICAgICAgICB0cnkgewoJICAgICAgICAgICAgaWYgKGNvbm4udW5TZW5kTXNnQXJyLmxlbmd0aCA+IDApIHsKCSAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIGNvbm4udW5TZW5kTXNnQXJyKSB7CgkgICAgICAgICAgICAgICAgICAgIHZhciBkb20gPSBjb25uLnVuU2VuZE1zZ0FycltpXTsKCSAgICAgICAgICAgICAgICAgICAgY29ubi5zZW5kQ29tbWFuZChkb20pOwoJICAgICAgICAgICAgICAgICAgICBkZWxldGUgY29ubi51blNlbmRNc2dBcnJbaV07CgkgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgfQoJICAgICAgICB9IGNhdGNoIChlKSB7CgkgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUubWVzc2FnZSk7CgkgICAgICAgIH0KCSAgICAgICAgY29ubi5vZmZMaW5lU2VuZENvbm5lY3RpbmcgPSBmYWxzZTsKCSAgICAgICAgY29ubi5sb2dPdXQgPSBmYWxzZTsKCgkgICAgICAgIGNvbm4ub25PcGVuZWQoewoJICAgICAgICAgICAgY2FuUmVjZWl2ZTogc3VwcG9ydFJlY01lc3NhZ2UsCgkgICAgICAgICAgICBjYW5TZW5kOiBzdXBwb3J0U2VkTWVzc2FnZSwKCSAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiBjb25uLmNvbnRleHQuYWNjZXNzVG9rZW4KCSAgICAgICAgfSk7CgkgICAgfSBlbHNlIGlmIChzdGF0dXMgPT0gU3Ryb3BoZS5TdGF0dXMuRElTQ09OTkVDVElORykgewoJICAgICAgICBpZiAoY29ubi5pc09wZW5lZCgpKSB7CgkgICAgICAgICAgICBjb25uLnN0b3BIZWFydEJlYXQoKTsKCSAgICAgICAgICAgIGNvbm4uY29udGV4dC5zdGF0dXMgPSBfY29kZS5TVEFUVVNfQ0xPU0lORzsKCgkgICAgICAgICAgICBlcnJvciA9IHsKCSAgICAgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9DT05OQ1RJT05fU0VSVkVSX0NMT1NFX0VSUk9SLAoJICAgICAgICAgICAgICAgIG1zZzogbXNnLAoJICAgICAgICAgICAgICAgIHJlY29ubmVjdDogdHJ1ZQoJICAgICAgICAgICAgfTsKCgkgICAgICAgICAgICBjb25mbGljdCAmJiAoZXJyb3IuY29uZmxpY3QgPSB0cnVlKTsKCSAgICAgICAgICAgIGNvbm4ub25FcnJvcihlcnJvcik7CgkgICAgICAgIH0KCSAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSBTdHJvcGhlLlN0YXR1cy5ESVNDT05ORUNURUQpIHsKCSAgICAgICAgaWYgKGNvbm4uaXNPcGVuZWQoKSkgewoJICAgICAgICAgICAgaWYgKGNvbm4uYXV0b1JlY29ubmVjdE51bVRvdGFsIDwgY29ubi5hdXRvUmVjb25uZWN0TnVtTWF4KSB7CgkgICAgICAgICAgICAgICAgY29ubi5yZWNvbm5lY3QoKTsKCSAgICAgICAgICAgICAgICByZXR1cm47CgkgICAgICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgICAgIGVycm9yID0gewoJICAgICAgICAgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9DT05OQ1RJT05fRElTQ09OTkVDVEVECgkgICAgICAgICAgICAgICAgfTsKCSAgICAgICAgICAgICAgICBjb25uLm9uRXJyb3IoZXJyb3IpOwoJICAgICAgICAgICAgfQoJICAgICAgICB9CgkgICAgICAgIGNvbm4uY29udGV4dC5zdGF0dXMgPSBfY29kZS5TVEFUVVNfQ0xPU0VEOwoJICAgICAgICBjb25uLmNsZWFyKCk7CgkgICAgICAgIGNvbm4ub25DbG9zZWQoKTsKCSAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSBTdHJvcGhlLlN0YXR1cy5BVVRIRkFJTCkgewoJICAgICAgICBlcnJvciA9IHsKCSAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0NPTk5DVElPTl9BVVRIX0VSUk9SCgkgICAgICAgIH07CgoJICAgICAgICBjb25mbGljdCAmJiAoZXJyb3IuY29uZmxpY3QgPSB0cnVlKTsKCSAgICAgICAgY29ubi5vbkVycm9yKGVycm9yKTsKCSAgICAgICAgY29ubi5jbGVhcigpOwoJICAgIH0gZWxzZSBpZiAoc3RhdHVzID09IFN0cm9waGUuU3RhdHVzLkVSUk9SKSB7CgkgICAgICAgIGNvbm4uY29udGV4dC5zdGF0dXMgPSBfY29kZS5TVEFUVVNfRVJST1I7CgkgICAgICAgIGVycm9yID0gewoJICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX1NFUlZFUl9FUlJPUgoJICAgICAgICB9OwoKCSAgICAgICAgY29uZmxpY3QgJiYgKGVycm9yLmNvbmZsaWN0ID0gdHJ1ZSk7CgkgICAgICAgIGNvbm4ub25FcnJvcihlcnJvcik7CgkgICAgfQoJICAgIGNvbm4uY29udGV4dC5zdGF0dXNfbm93ID0gc3RhdHVzOwoJfTsKCgl2YXIgX2dldEppZCA9IGZ1bmN0aW9uIF9nZXRKaWQob3B0aW9ucywgY29ubikgewoJICAgIHZhciBqaWQgPSBvcHRpb25zLnRvSmlkIHx8ICcnOwoKCSAgICBpZiAoamlkID09PSAnJykgewoJICAgICAgICB2YXIgYXBwS2V5ID0gY29ubi5jb250ZXh0LmFwcEtleSB8fCAnJzsKCSAgICAgICAgdmFyIHRvSmlkID0gYXBwS2V5ICsgJ18nICsgb3B0aW9ucy50byArICdAJyArIGNvbm4uZG9tYWluOwoKCSAgICAgICAgaWYgKG9wdGlvbnMucmVzb3VyY2UpIHsKCSAgICAgICAgICAgIHRvSmlkID0gdG9KaWQgKyAnLycgKyBvcHRpb25zLnJlc291cmNlOwoJICAgICAgICB9CgkgICAgICAgIGppZCA9IHRvSmlkOwoJICAgIH0KCSAgICByZXR1cm4gamlkOwoJfTsKCgl2YXIgX2dldEppZEJ5TmFtZSA9IGZ1bmN0aW9uIF9nZXRKaWRCeU5hbWUobmFtZSwgY29ubikgewoJICAgIHZhciBvcHRpb25zID0gewoJICAgICAgICB0bzogbmFtZQoJICAgIH07CgkgICAgcmV0dXJuIF9nZXRKaWQob3B0aW9ucywgY29ubik7Cgl9OwoKCXZhciBfdmFsaWRDaGVjayA9IGZ1bmN0aW9uIF92YWxpZENoZWNrKG9wdGlvbnMsIGNvbm4pIHsKCSAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCgkgICAgaWYgKG9wdGlvbnMudXNlciA9PSAnJykgewoJICAgICAgICBjb25uLm9uRXJyb3IoewoJICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX1VTRVJfTk9UX0FTU0lHTl9FUlJPUgoJICAgICAgICB9KTsKCSAgICAgICAgcmV0dXJuIGZhbHNlOwoJICAgIH0KCgkgICAgdmFyIHVzZXIgPSBvcHRpb25zLnVzZXIgKyAnJyB8fCAnJzsKCSAgICB2YXIgYXBwS2V5ID0gb3B0aW9ucy5hcHBLZXkgfHwgJyc7CgkgICAgdmFyIGRldkluZm9zID0gYXBwS2V5LnNwbGl0KCcjJyk7CgoJICAgIGlmIChkZXZJbmZvcy5sZW5ndGggIT09IDIpIHsKCSAgICAgICAgY29ubi5vbkVycm9yKHsKCSAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0NPTk5DVElPTl9BUFBLRVlfTk9UX0FTU0lHTl9FUlJPUgoJICAgICAgICB9KTsKCSAgICAgICAgcmV0dXJuIGZhbHNlOwoJICAgIH0KCSAgICB2YXIgb3JnTmFtZSA9IGRldkluZm9zWzBdOwoJICAgIHZhciBhcHBOYW1lID0gZGV2SW5mb3NbMV07CgoJICAgIGlmICghb3JnTmFtZSkgewoJICAgICAgICBjb25uLm9uRXJyb3IoewoJICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX0FQUEtFWV9OT1RfQVNTSUdOX0VSUk9SCgkgICAgICAgIH0pOwoJICAgICAgICByZXR1cm4gZmFsc2U7CgkgICAgfQoJICAgIGlmICghYXBwTmFtZSkgewoJICAgICAgICBjb25uLm9uRXJyb3IoewoJICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX0FQUEtFWV9OT1RfQVNTSUdOX0VSUk9SCgkgICAgICAgIH0pOwoJICAgICAgICByZXR1cm4gZmFsc2U7CgkgICAgfQoKCSAgICB2YXIgamlkID0gYXBwS2V5ICsgJ18nICsgdXNlci50b0xvd2VyQ2FzZSgpICsgJ0AnICsgY29ubi5kb21haW4sCgkgICAgICAgIHJlc291cmNlID0gb3B0aW9ucy5yZXNvdXJjZSB8fCAnd2ViaW0nOwoKCSAgICBjb25uLmNvbnRleHQuamlkID0gamlkICsgJy8nICsgcmVzb3VyY2U7CgkgICAgY29ubi5jb250ZXh0LnVzZXJJZCA9IHVzZXI7CgkgICAgY29ubi5jb250ZXh0LmFwcEtleSA9IGFwcEtleTsKCSAgICBjb25uLmNvbnRleHQuYXBwTmFtZSA9IGFwcE5hbWU7CgkgICAgY29ubi5jb250ZXh0Lm9yZ05hbWUgPSBvcmdOYW1lOwoKCSAgICByZXR1cm4gdHJ1ZTsKCX07CgoJdmFyIF9nZXRYbXBwVXJsID0gZnVuY3Rpb24gX2dldFhtcHBVcmwoYmFzZVVybCwgaHR0cHMpIHsKCSAgICBpZiAoL14od3N8aHR0cClzPzpcL1wvPy8udGVzdChiYXNlVXJsKSkgewoJICAgICAgICByZXR1cm4gYmFzZVVybDsKCSAgICB9CgoJICAgIHZhciB1cmwgPSB7CgkgICAgICAgIHByZWZpeDogJ2h0dHAnLAoJICAgICAgICBiYXNlOiAnOi8vJyArIGJhc2VVcmwsCgkgICAgICAgIHN1ZmZpeDogJy9odHRwLWJpbmQvJwoJICAgIH07CgoJICAgIGlmIChodHRwcyAmJiBfdXRpbHMuaXNTdXBwb3J0V3NzKSB7CgkgICAgICAgIHVybC5wcmVmaXggPSAnd3NzJzsKCSAgICAgICAgdXJsLnN1ZmZpeCA9ICcvd3MvJzsKCSAgICB9IGVsc2UgewoJICAgICAgICBpZiAoaHR0cHMpIHsKCSAgICAgICAgICAgIHVybC5wcmVmaXggPSAnaHR0cHMnOwoJICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5XZWJTb2NrZXQpIHsKCSAgICAgICAgICAgIHVybC5wcmVmaXggPSAnd3MnOwoJICAgICAgICAgICAgdXJsLnN1ZmZpeCA9ICcvd3MvJzsKCSAgICAgICAgfQoJICAgIH0KCgkgICAgcmV0dXJuIHVybC5wcmVmaXggKyB1cmwuYmFzZSArIHVybC5zdWZmaXg7Cgl9OwoKCWZ1bmN0aW9uIF9kZWVwQ2xvbmUoZGF0YSkgewoJICAgIHZhciB0ID0gdHlwZW9mIGRhdGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGRhdGEpLAoJICAgICAgICBvLAoJICAgICAgICBpLAoJICAgICAgICBuaTsKCgkgICAgaWYgKHQgPT09ICdhcnJheScpIHsKCSAgICAgICAgbyA9IFtdOwoJICAgIH0gZWxzZSBpZiAodCA9PT0gJ29iamVjdCcpIHsKCSAgICAgICAgbyA9IHt9OwoJICAgIH0gZWxzZSB7CgkgICAgICAgIHJldHVybiBkYXRhOwoJICAgIH0KCgkgICAgaWYgKHQgPT09ICdhcnJheScpIHsKCSAgICAgICAgZm9yIChpID0gMCwgbmkgPSBkYXRhLmxlbmd0aDsgaSA8IG5pOyBpKyspIHsKCSAgICAgICAgICAgIG8ucHVzaChfZGVlcENsb25lKGRhdGFbaV0pKTsKCSAgICAgICAgfQoJICAgICAgICByZXR1cm4gbzsKCSAgICB9IGVsc2UgaWYgKHQgPT09ICdvYmplY3QnKSB7CgkgICAgICAgIGZvciAoaSBpbiBkYXRhKSB7CgkgICAgICAgICAgICBvW2ldID0gX2RlZXBDbG9uZShkYXRhW2ldKTsKCSAgICAgICAgfQoJICAgICAgICByZXR1cm4gbzsKCSAgICB9Cgl9CgoJLyoqCgkgKiBUaGUgY29ubmVjdGlvbiBjbGFzcy4KCSAqIEBjb25zdHJ1Y3RvcgoJICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSDliJvlu7rov57mjqXnmoTliJ3lp4vljJblj4LmlbAKCSAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLnVybCAtIHhtcHDmnI3liqHlmajnmoRVUkwKCSAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmFwaVVybCAtIEFQSeacjeWKoeWZqOeahFVSTAoJICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmlzSHR0cEROUyAtIOmYsuatouWfn+WQjeWKq+aMgQoJICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmlzTXVsdGlMb2dpblNlc3Npb25zIC0g5Li6dHJ1ZeaXtuWQjOS4gOi0puaIt+WPr+S7peWQjOaXtuWcqOWkmuS4qldlYumhtemdoueZu+W9le+8iOWkmuagh+etvueZu+W9le+8jOm7mOiupOS4jeW8gOWQr++8jOWmguaciemcgOimgeivt+iBlOezu+WVhuWKoe+8ie+8jOS4umZhbHNl5pe25ZCM5LiA6LSm5Y+35Y+q6IO95Zyo5LiA5LiqV2Vi6aG16Z2i55m75b2VCgkgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuaHR0cHMgLSDmmK/lkKblkK/nlKh3c3MuCgkgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5oZWFydEJlYXRXYWl0IC0g5Y+R6YCB5b+D6Lez5YyF55qE5pe26Ze06Ze06ZqU77yI5q+r56eS77yJCgkgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuaXNBdXRvTG9naW4gLSDnmbvlvZXmiJDlip/lkI7mmK/lkKboh6rliqjlh7rluK0KCSAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmF1dG9SZWNvbm5lY3ROdW1NYXggLSDmjonnur/lkI7ph43ov57nmoTmnIDlpKfmrKHmlbAKCSAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmF1dG9SZWNvbm5lY3RJbnRlcnZhbCAtICDmjonnur/lkI7ph43ov57nmoTpl7TpmpTml7bpl7TvvIjmr6vnp5LvvIkKCSAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5pc1dpbmRvd1NESyAtIOaYr+WQpui/kOihjOWcqFdpbmRvd3NTREvkuIoKCSAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5lbmNyeXB0IC0g5piv5ZCm5Yqg5a+G5paH5pys5raI5oGvCgkgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuZGVsaXZlcnkgLSDmmK/lkKblj5HpgIFkZWxpdmVyZWQgYWNrCgkgKiBAcmV0dXJucyB7Q2xhc3N9ICDov57mjqXlrp7kvosKCSAqLwoKCXZhciBjb25uZWN0aW9uID0gZnVuY3Rpb24gY29ubmVjdGlvbihvcHRpb25zKSB7CgkgICAgaWYgKCF0aGlzIGluc3RhbmNlb2YgY29ubmVjdGlvbikgewoJICAgICAgICByZXR1cm4gbmV3IGNvbm5lY3Rpb24ob3B0aW9ucyk7CgkgICAgfQoKCSAgICB2YXIgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgoJICAgIHRoaXMuaXNIdHRwRE5TID0gb3B0aW9ucy5pc0h0dHBETlMgfHwgZmFsc2U7CgkgICAgdGhpcy5pc011bHRpTG9naW5TZXNzaW9ucyA9IG9wdGlvbnMuaXNNdWx0aUxvZ2luU2Vzc2lvbnMgfHwgZmFsc2U7CgkgICAgdGhpcy53YWl0ID0gb3B0aW9ucy53YWl0IHx8IDMwOwoJICAgIHRoaXMuaG9sZCA9IG9wdGlvbnMuaG9sZCB8fCAxOwoJICAgIHRoaXMucmV0cnkgPSBvcHRpb25zLnJldHJ5IHx8IGZhbHNlOwoJICAgIHRoaXMuaHR0cHMgPSBvcHRpb25zLmh0dHBzIHx8IGxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JzsKCSAgICB0aGlzLnVybCA9IF9nZXRYbXBwVXJsKG9wdGlvbnMudXJsLCB0aGlzLmh0dHBzKTsKCSAgICB0aGlzLnJvdXRlID0gb3B0aW9ucy5yb3V0ZSB8fCBudWxsOwoJICAgIHRoaXMuZG9tYWluID0gb3B0aW9ucy5kb21haW4gfHwgJ2Vhc2Vtb2IuY29tJzsKCSAgICB0aGlzLmluYWN0aXZpdHkgPSBvcHRpb25zLmluYWN0aXZpdHkgfHwgMzA7CgkgICAgdGhpcy5oZWFydEJlYXRXYWl0ID0gb3B0aW9ucy5oZWFydEJlYXRXYWl0IHx8IDQ1MDA7CgkgICAgdGhpcy5tYXhSZXRyaWVzID0gb3B0aW9ucy5tYXhSZXRyaWVzIHx8IDU7CgkgICAgdGhpcy5pc0F1dG9Mb2dpbiA9IG9wdGlvbnMuaXNBdXRvTG9naW4gPT09IGZhbHNlID8gZmFsc2UgOiB0cnVlOwoJICAgIHRoaXMucG9sbGluZ1RpbWUgPSBvcHRpb25zLnBvbGxpbmdUaW1lIHx8IDgwMDsKCSAgICB0aGlzLnN0cm9waGVDb25uID0gZmFsc2U7CgkgICAgdGhpcy5hdXRvUmVjb25uZWN0TnVtTWF4ID0gb3B0aW9ucy5hdXRvUmVjb25uZWN0TnVtTWF4IHx8IDA7CgkgICAgdGhpcy5hdXRvUmVjb25uZWN0TnVtVG90YWwgPSAwOwoJICAgIHRoaXMuYXV0b1JlY29ubmVjdEludGVydmFsID0gb3B0aW9ucy5hdXRvUmVjb25uZWN0SW50ZXJ2YWwgfHwgMDsKCSAgICB0aGlzLmNvbnRleHQgPSB7IHN0YXR1czogX2NvZGUuU1RBVFVTX0lOSVQgfTsKCSAgICB0aGlzLnNlbmRRdWV1ZSA9IG5ldyBRdWV1ZSgpOyAvL2luc3RlYWQgb2Ygc2VuZGluZyBtZXNzYWdlIGltbWVkaWF0ZWx5LGNhY2hlIHRoZW0gaW4gdGhpcyBxdWV1ZQoJICAgIHRoaXMuaW50ZXJ2YWxJZCA9IG51bGw7IC8vY2xlYXJJbnRlcnZhbCByZXR1cm4gdmFsdWUKCSAgICB0aGlzLmFwaVVybCA9IG9wdGlvbnMuYXBpVXJsIHx8ICcnOwoJICAgIHRoaXMuaXNXaW5kb3dTREsgPSBvcHRpb25zLmlzV2luZG93U0RLIHx8IGZhbHNlOwoJICAgIHRoaXMuZW5jcnlwdCA9IG9wdGlvbnMuZW5jcnlwdCB8fCB7IGVuY3J5cHQ6IHsgdHlwZTogJ25vbmUnIH0gfTsKCSAgICB0aGlzLmRlbGl2ZXJ5ID0gb3B0aW9ucy5kZWxpdmVyeSB8fCBmYWxzZTsKCSAgICB0aGlzLnNhdmVMb2NhbCA9IG9wdGlvbnMuc2F2ZUxvY2FsIHx8IGZhbHNlOwoJICAgIHRoaXMudXNlciA9ICcnOwoJICAgIHRoaXMub3JnTmFtZSA9ICcnOwoJICAgIHRoaXMuYXBwTmFtZSA9ICcnOwoJICAgIHRoaXMudG9rZW4gPSAnJzsKCSAgICB0aGlzLnVuU2VuZE1zZ0FyciA9IFtdOwoJICAgIHRoaXMub2ZmTGluZVNlbmRDb25uZWN0aW5nID0gZmFsc2U7CgkgICAgdGhpcy5sb2dPdXQgPSBmYWxzZTsKCgkgICAgdGhpcy5kbnNBcnIgPSBbJ2h0dHBzOi8vcnMuZWFzZW1vYi5jb20nLCAnaHR0cHM6Ly9yc2Jhay5lYXNlbW9iLmNvbScsICdodHRwOi8vMTgyLjkyLjE3NC43OCcsICdodHRwOi8vMTEyLjEyNi42Ni4xMTEnXTsgLy9odHRwIGRucyBzZXJ2ZXIgaG9zdHMKCSAgICB0aGlzLmRuc0luZGV4ID0gMDsgLy90aGUgZG5zIGlwIHVzZWQgaW4gZG5zQXJyIGN1cnJlbnRseQoJICAgIHRoaXMuZG5zVG90YWwgPSB0aGlzLmRuc0Fyci5sZW5ndGg7IC8vbWF4IG51bWJlciBvZiBnZXR0aW5nIGRucyByZXRyaWVzCgkgICAgdGhpcy5yZXN0SG9zdHMgPSBudWxsOyAvL3Jlc3Qgc2VydmVyIGlwcwoJICAgIHRoaXMucmVzdEluZGV4ID0gMDsgLy90aGUgcmVzdCBpcCB1c2VkIGluIHJlc3RIb3N0cyBjdXJyZW50bHkKCSAgICB0aGlzLnJlc3RUb3RhbCA9IDA7IC8vbWF4IG51bWJlciBvZiBnZXR0aW5nIHJlc3QgdG9rZW4gcmV0cmllcwoJICAgIHRoaXMueG1wcEhvc3RzID0gbnVsbDsgLy94bXBwIHNlcnZlciBpcHMKCSAgICB0aGlzLnhtcHBJbmRleCA9IDA7IC8vdGhlIHhtcHAgaXAgdXNlZCBpbiB4bXBwSG9zdHMgY3VycmVudGx5CgkgICAgdGhpcy54bXBwVG90YWwgPSAwOyAvL21heCBudW1iZXIgb2YgY3JlYXRpbmcgeG1wcCBzZXJ2ZXIgY29ubmVjdGlvbih3cy9ib3NoKSByZXRyaWVzCgoJICAgIHRoaXMuZ3JvdXBPcHRpb24gPSB7fTsKCgkgICAgLyoKCSAgICAgRGVtby5jaGF0UmVjb3JkID0gewoJICAgICB0YXJnZXRJZDogewoJICAgICBtZXNzYWdlczogWwoJICAgICB7CgkgICAgIG1zZzogJ21zZycsCgkgICAgIHR5cGU6ICd0eXBlJwoJICAgICB9LAoJICAgICB7CgkgICAgIG1zZzogJ21zZycsCgkgICAgIHR5cGU6ICd0eXBlJwoJICAgICB9XSwKCSAgICAgYnJpZWY6ICdicmllZicKCSAgICAgfQoJICAgICB9CgkgICAgICovCgl9OwoKCWNvbm5lY3Rpb24ucHJvdG90eXBlLnRlc3RJbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKCSAgICB0aGlzLm9yZ05hbWUgPSBvcHRpb25zLm9yZ05hbWU7CgkgICAgdGhpcy5hcHBOYW1lID0gb3B0aW9ucy5hcHBOYW1lOwoJICAgIHRoaXMudXNlciA9IG9wdGlvbnMudXNlcjsKCSAgICB0aGlzLnRva2VuID0gb3B0aW9ucy50b2tlbjsKCX07CgoJLyoqCgkgKiDms6jlhozmlrDnlKjmiLcKCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0g55So5oi35L+h5oGvCgkgKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy51c2VybmFtZSAtIOeUqOaIt+WQjQoJICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMucGFzc3dvcmQgLSDlr4bnoIEKCSAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLm5pY2tuYW1lIC0g55So5oi35pi156ewCgkgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLnN1Y2Nlc3MgLSDms6jlhozmiJDlip/lm57osIMKCSAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbnMuZXJyb3IgLSDms6jlhozlpLHotKUKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUucmVnaXN0ZXJVc2VyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKCSAgICBpZiAobG9jYXRpb24ucHJvdG9jb2wgIT0gJ2h0dHBzOicgJiYgdGhpcy5pc0h0dHBETlMpIHsKCSAgICAgICAgdGhpcy5kbnNJbmRleCA9IDA7CgkgICAgICAgIHRoaXMuZ2V0SHR0cEROUyhvcHRpb25zLCAnc2lnbnVwJyk7CgkgICAgfSBlbHNlIHsKCSAgICAgICAgdGhpcy5zaWdudXAob3B0aW9ucyk7CgkgICAgfQoJfTsKCgkvKioKCSAqIOWkhOeQhuWPkemAgemYn+WIlwoJICogQHByaXZhdGUKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuaGFuZGVsU2VuZFF1ZXVlID0gZnVuY3Rpb24gKCkgewoJICAgIHZhciBvcHRpb25zID0gdGhpcy5zZW5kUXVldWUucG9wKCk7CgkgICAgaWYgKG9wdGlvbnMgIT09IG51bGwpIHsKCSAgICAgICAgdGhpcy5zZW5kUmVjZWlwdHNNZXNzYWdlKG9wdGlvbnMpOwoJICAgIH0KCX07CgoJLyoqCgkgKiDms6jlhoznm5HlkKzlh73mlbAKCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0g5Zue6LCD5Ye95pWw6ZuG5ZCICgkgKiBAcGFyYW0ge2Nvbm5lY3Rpb25+b25PcGVuZWR9IG9wdGlvbnMub25PcGVuZWQgLSDlpITnkIbnmbvlvZXnmoTlm57osIMKCSAqIEBwYXJhbSB7Y29ubmVjdGlvbn5vblRleHRNZXNzYWdlfSBvcHRpb25zLm9uVGV4dE1lc3NhZ2UgLSDlpITnkIbmlofmnKzmtojmga/nmoTlm57osIMKCSAqIEBwYXJhbSB7Y29ubmVjdGlvbn5vbkVtb2ppTWVzc2FnZX0gb3B0aW9ucy5vbkVtb2ppTWVzc2FnZSAtIOWkhOeQhuihqOaDhea2iOaBr+eahOWbnuiwgwoJICogQHBhcmFtIHtjb25uZWN0aW9ufm9uUGljdHVyZU1lc3NhZ2V9IG9wdGlvbnMub25QaWN0dXJlTWVzc2FnZSAtIOWkhOeQhuWbvueJh+a2iOaBr+eahOWbnuiwgwoJICogQHBhcmFtIHtjb25uZWN0aW9ufm9uQXVkaW9NZXNzYWdlfSBvcHRpb25zLm9uQXVkaW9NZXNzYWdlIC0g5aSE55CG6Z+z6aKR5raI5oGv55qE5Zue6LCDCgkgKiBAcGFyYW0ge2Nvbm5lY3Rpb25+b25WaWRlb01lc3NhZ2V9IG9wdGlvbnMub25WaWRlb01lc3NhZ2UgLSDlpITnkIbop4bpopHmtojmga/nmoTlm57osIMKCSAqIEBwYXJhbSB7Y29ubmVjdGlvbn5vbkZpbGVNZXNzYWdlfSBvcHRpb25zLm9uRmlsZU1lc3NhZ2UgLSDlpITnkIbmlofku7bmtojmga/nmoTlm57osIMKCSAqIEBwYXJhbSB7Y29ubmVjdGlvbn5vbkxvY2F0aW9uTWVzc2FnZX0gb3B0aW9ucy5vbkxvY2F0aW9uTWVzc2FnZSAtIOWkhOeQhuS9jee9rua2iOaBr+eahOWbnuiwgwoJICogQHBhcmFtIHtjb25uZWN0aW9ufm9uQ21kTWVzc2FnZX0gb3B0aW9ucy5vbkNtZE1lc3NhZ2UgLSDlpITnkIblkb3ku6Tmtojmga/nmoTlm57osIMKCSAqIEBwYXJhbSB7Y29ubmVjdGlvbn5vblByZXNlbmNlfSBvcHRpb25zLm9uUHJlc2VuY2UgLSDlpITnkIZQcmVzZW5jZea2iOaBr+eahOWbnuiwgwoJICogQHBhcmFtIHtjb25uZWN0aW9ufm9uRXJyb3J9IG9wdGlvbnMub25FcnJvciAtIOWkhOeQhumUmeivr+a2iOaBr+eahOWbnuiwgwoJICogQHBhcmFtIHtjb25uZWN0aW9ufm9uUmVjZWl2ZWRNZXNzYWdlfSBvcHRpb25zLm9uUmVjZWl2ZWRNZXNzYWdlIC0g5aSE55CGUmVjZWl2ZWTmtojmga/nmoTlm57osIMKCSAqIEBwYXJhbSB7Y29ubmVjdGlvbn5vbkludml0ZU1lc3NhZ2V9IG9wdGlvbnMub25JbnZpdGVNZXNzYWdlIC0g5aSE55CG6YKA6K+35raI5oGv55qE5Zue6LCDCgkgKiBAcGFyYW0ge2Nvbm5lY3Rpb25+b25EZWxpdmVyZE1lc3NhZ2V9IG9wdGlvbnMub25EZWxpdmVyZE1lc3NhZ2UgLSDlpITnkIZEZWxpdmVyZWQgQUNL5raI5oGv55qE5Zue6LCDCgkgKiBAcGFyYW0ge2Nvbm5lY3Rpb25+b25SZWFkTWVzc2FnZX0gb3B0aW9ucy5vblJlYWRNZXNzYWdlIC0g5aSE55CGUmVhZCBBQ0vmtojmga/nmoTlm57osIMKCSAqIEBwYXJhbSB7Y29ubmVjdGlvbn5vbk11dGVkTWVzc2FnZX0gb3B0aW9ucy5vbk11dGVkTWVzc2FnZSAtIOWkhOeQhuemgeiogOa2iOaBr+eahOWbnuiwgwoJICogQHBhcmFtIHtjb25uZWN0aW9ufm9uT2ZmbGluZX0gb3B0aW9ucy5vbk9mZmxpbmUgLSDlpITnkIbmlq3nvZHnmoTlm57osIMKCSAqIEBwYXJhbSB7Y29ubmVjdGlvbn5vbk9ubGluZX0gb3B0aW9ucy5vbk9ubGluZSAtIOWkhOeQhuiBlOe9keeahOWbnuiwgwoJICogQHBhcmFtIHtjb25uZWN0aW9ufm9uQ3JlYXRlR3JvdXB9IG9wdGlvbnMub25DcmVhdGVHcm91cCAtIOWkhOeQhuWIm+W7uue+pOe7hOeahOWbnuiwgwoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIC8qKgoJICAgICAqIOeZu+W9leaIkOWKn+WQjuiwg+eUqAoJICAgICAqIEBjYWxsYmFjayBjb25uZWN0aW9ufm9uT3BlbmVkCgkgICAgICovCgkgICAgLyoqCgkgICAgICog5pS25Yiw5paH5pys5raI5oGvCgkgICAgICogQGNhbGxiYWNrIGNvbm5lY3Rpb25+b25UZXh0TWVzc2FnZQoJICAgICAqLwoJICAgIC8qKgoJICAgICAqIOaUtuWIsOihqOaDhea2iOaBrwoJICAgICAqIEBjYWxsYmFjayBjb25uZWN0aW9ufm9uRW1vamlNZXNzYWdlCgkgICAgICovCgkgICAgLyoqCgkgICAgICog5pS25Yiw5Zu+54mH5raI5oGvCgkgICAgICogQGNhbGxiYWNrIGNvbm5lY3Rpb25+b25QaWN0dXJlTWVzc2FnZQoJICAgICAqLwoJICAgIC8qKgoJICAgICAqIOaUtuWIsOmfs+mikea2iOaBrwoJICAgICAqIEBjYWxsYmFjayBjb25uZWN0aW9ufm9uQXVkaW9NZXNzYWdlCgkgICAgICovCgkgICAgLyoqCgkgICAgICog5pS25Yiw6KeG6aKR5raI5oGvCgkgICAgICogQGNhbGxiYWNrIGNvbm5lY3Rpb25+b25WaWRlb01lc3NhZ2UKCSAgICAgKi8KCSAgICAvKioKCSAgICAgKiDmlLbliLDmlofku7bmtojmga8KCSAgICAgKiBAY2FsbGJhY2sgY29ubmVjdGlvbn5vbkZpbGVNZXNzYWdlCgkgICAgICovCgkgICAgLyoqCgkgICAgICog5pS25Yiw5L2N572u5raI5oGvCgkgICAgICogQGNhbGxiYWNrIGNvbm5lY3Rpb25+b25Mb2NhdGlvbk1lc3NhZ2UKCSAgICAgKi8KCSAgICAvKioKCSAgICAgKiDmlLbliLDlkb3ku6Tmtojmga8KCSAgICAgKiBAY2FsbGJhY2sgY29ubmVjdGlvbn5vbkNtZE1lc3NhZ2UKCSAgICAgKi8KCSAgICAvKioKCSAgICAgKiDmlLbliLDplJnor6/mtojmga8KCSAgICAgKiBAY2FsbGJhY2sgY29ubmVjdGlvbn5vbkVycm9yCgkgICAgICovCgkgICAgLyoqCgkgICAgICog5pS25YiwUHJlc2VuY2Xmtojmga8KCSAgICAgKiBAY2FsbGJhY2sgY29ubmVjdGlvbn5vblByZXNlbmNlCgkgICAgICovCgkgICAgLyoqCgkgICAgICog5pS25YiwUmVjZWl2ZWTmtojmga8KCSAgICAgKiBAY2FsbGJhY2sgY29ubmVjdGlvbn5vblJlY2VpdmVkTWVzc2FnZQoJICAgICAqLwoJICAgIC8qKgoJICAgICAqIOiiq+mCgOivt+i/m+e+pAoJICAgICAqIEBjYWxsYmFjayBjb25uZWN0aW9ufm9uSW52aXRlTWVzc2FnZQoJICAgICAqLwoJICAgIC8qKgoJICAgICAqIOaUtuWIsOW3sumAgei+vuWbnuaJpwoJICAgICAqIEBjYWxsYmFjayBjb25uZWN0aW9ufm9uRGVsaXZlcmRNZXNzYWdlCgkgICAgICovCgkgICAgLyoqCgkgICAgICog5pS25Yiw5bey6K+75Zue5omnCgkgICAgICogQGNhbGxiYWNrIGNvbm5lY3Rpb25+b25SZWFkTWVzc2FnZQoJICAgICAqLwoJICAgIC8qKgoJICAgICAqIOiiq+e+pOeuoeeQhuWRmOemgeiogAoJICAgICAqIEBjYWxsYmFjayBjb25uZWN0aW9ufm9uTXV0ZWRNZXNzYWdlCgkgICAgICovCgkgICAgLyoqCgkgICAgICog5rWP6KeI5Zmo6KKr5pat572R5pe26LCD55SoCgkgICAgICogQGNhbGxiYWNrIGNvbm5lY3Rpb25+b25PZmZsaW5lCgkgICAgICovCgkgICAgLyoqCgkgICAgICog5rWP6KeI5Zmo6IGU572R5pe26LCD55SoCgkgICAgICogQGNhbGxiYWNrIGNvbm5lY3Rpb25+b25PbmxpbmUKCSAgICAgKi8KCSAgICAvKioKCSAgICAgKiDlu7rnvqTmiJDlip/lkI7osIPnlKgKCSAgICAgKiBAY2FsbGJhY2sgY29ubmVjdGlvbn5vbkNyZWF0ZUdyb3VwCgkgICAgICovCgkgICAgdGhpcy5vbk9wZW5lZCA9IG9wdGlvbnMub25PcGVuZWQgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdGhpcy5vbkNsb3NlZCA9IG9wdGlvbnMub25DbG9zZWQgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdGhpcy5vblRleHRNZXNzYWdlID0gb3B0aW9ucy5vblRleHRNZXNzYWdlIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHRoaXMub25FbW9qaU1lc3NhZ2UgPSBvcHRpb25zLm9uRW1vamlNZXNzYWdlIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHRoaXMub25QaWN0dXJlTWVzc2FnZSA9IG9wdGlvbnMub25QaWN0dXJlTWVzc2FnZSB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB0aGlzLm9uQXVkaW9NZXNzYWdlID0gb3B0aW9ucy5vbkF1ZGlvTWVzc2FnZSB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB0aGlzLm9uVmlkZW9NZXNzYWdlID0gb3B0aW9ucy5vblZpZGVvTWVzc2FnZSB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB0aGlzLm9uRmlsZU1lc3NhZ2UgPSBvcHRpb25zLm9uRmlsZU1lc3NhZ2UgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdGhpcy5vbkxvY2F0aW9uTWVzc2FnZSA9IG9wdGlvbnMub25Mb2NhdGlvbk1lc3NhZ2UgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdGhpcy5vbkNtZE1lc3NhZ2UgPSBvcHRpb25zLm9uQ21kTWVzc2FnZSB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB0aGlzLm9uUHJlc2VuY2UgPSBvcHRpb25zLm9uUHJlc2VuY2UgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdGhpcy5vblJvc3RlciA9IG9wdGlvbnMub25Sb3N0ZXIgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdGhpcy5vbkVycm9yID0gb3B0aW9ucy5vbkVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHRoaXMub25SZWNlaXZlZE1lc3NhZ2UgPSBvcHRpb25zLm9uUmVjZWl2ZWRNZXNzYWdlIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHRoaXMub25JbnZpdGVNZXNzYWdlID0gb3B0aW9ucy5vbkludml0ZU1lc3NhZ2UgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdGhpcy5vbkRlbGl2ZXJkTWVzc2FnZSA9IG9wdGlvbnMub25EZWxpdmVyZWRNZXNzYWdlIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHRoaXMub25SZWFkTWVzc2FnZSA9IG9wdGlvbnMub25SZWFkTWVzc2FnZSB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB0aGlzLm9uTXV0ZWRNZXNzYWdlID0gb3B0aW9ucy5vbk11dGVkTWVzc2FnZSB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB0aGlzLm9uT2ZmbGluZSA9IG9wdGlvbnMub25PZmZsaW5lIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHRoaXMub25PbmxpbmUgPSBvcHRpb25zLm9uT25saW5lIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHRoaXMub25Db25maXJtUG9wID0gb3B0aW9ucy5vbkNvbmZpcm1Qb3AgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdGhpcy5vbkNyZWF0ZUdyb3VwID0gb3B0aW9ucy5vbkNyZWF0ZUdyb3VwIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIC8vZm9yIFdpbmRvd1NESyBzdGFydAoJICAgIHRoaXMub25VcGRhdGVNeUdyb3VwTGlzdCA9IG9wdGlvbnMub25VcGRhdGVNeUdyb3VwTGlzdCB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB0aGlzLm9uVXBkYXRlTXlSb3N0ZXIgPSBvcHRpb25zLm9uVXBkYXRlTXlSb3N0ZXIgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgLy9mb3IgV2luZG93U0RLIGVuZAoJICAgIHRoaXMub25CbGFja2xpc3RVcGRhdGUgPSBvcHRpb25zLm9uQmxhY2tsaXN0VXBkYXRlIHx8IF91dGlscy5lbXB0eWZuOwoKCSAgICBfbGlzdGVuTmV0d29yayh0aGlzLm9uT25saW5lLCB0aGlzLm9uT2ZmbGluZSk7Cgl9OwoKCS8qKgoJICog5Y+R6YCB5b+D6LezCgkgKiB3ZWJydGPpnIDopoHlvLrliLblv4Pot7PvvIzliqDkuKrpu5jorqTkuLpmYWxzZeeahOWPguaVsCDlkJHkuIvlhbzlrrkKCSAqIEBwYXJhbSB7Qm9vbGVhbn0gZm9yY2luZyAtIOaYr+WQpuW8uuWItuWPkemAgQoJICogQHByaXZhdGUKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuaGVhcnRCZWF0ID0gZnVuY3Rpb24gKGZvcmNpbmcpIHsKCSAgICBpZiAoZm9yY2luZyAhPT0gdHJ1ZSkgewoJICAgICAgICBmb3JjaW5nID0gZmFsc2U7CgkgICAgfQoJICAgIHZhciBtZSA9IHRoaXM7CgkgICAgLy9JRTg6IHN0cm9waGUgYXV0byBzd2l0Y2ggZnJvbSB3cyB0byBCT1NILCBuZWVkIGhlYXJ0YmVhdAoJICAgIHZhciBpc05lZWQgPSAhL153c3x3c3MvLnRlc3QobWUudXJsKSB8fCAvbW9iaWxlLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOwoKCSAgICBpZiAodGhpcy5oZWFydEJlYXRJRCB8fCAhZm9yY2luZyAmJiAhaXNOZWVkKSB7CgkgICAgICAgIHJldHVybjsKCSAgICB9CgoJICAgIHZhciBvcHRpb25zID0gewoJICAgICAgICB0b0ppZDogdGhpcy5kb21haW4sCgkgICAgICAgIHR5cGU6ICdub3JtYWwnCgkgICAgfTsKCSAgICB0aGlzLmhlYXJ0QmVhdElEID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewoJICAgICAgICAvLyBmaXg6IGRvIGhlYXJ0YmVhdCBvbmx5IHdoZW4gd2Vic29ja2V0IAoJICAgICAgICBfdXRpbHMuaXNTdXBwb3J0V3NzICYmIG1lLnBpbmcob3B0aW9ucyk7CgkgICAgfSwgdGhpcy5oZWFydEJlYXRXYWl0KTsKCX07CgoJLyoqCgkgKiBAcHJpdmF0ZQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5zdG9wSGVhcnRCZWF0ID0gZnVuY3Rpb24gKCkgewoJICAgIGlmICh0eXBlb2YgdGhpcy5oZWFydEJlYXRJRCA9PSAibnVtYmVyIikgewoJICAgICAgICB0aGlzLmhlYXJ0QmVhdElEID0gY2xlYXJJbnRlcnZhbCh0aGlzLmhlYXJ0QmVhdElEKTsKCSAgICB9Cgl9OwoKCS8qKgoJICog5Y+R6YCB5o6l5pS25raI5oGv5Zue5omnCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtCgkgKiBAcHJpdmF0ZQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5zZW5kUmVjZWlwdHNNZXNzYWdlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKCSAgICB2YXIgZG9tID0gJG1zZyh7CgkgICAgICAgIGZyb206IHRoaXMuY29udGV4dC5qaWQgfHwgJycsCgkgICAgICAgIHRvOiB0aGlzLmRvbWFpbiwKCSAgICAgICAgaWQ6IG9wdGlvbnMuaWQgfHwgJycKCSAgICB9KS5jKCdyZWNlaXZlZCcsIHsKCSAgICAgICAgeG1sbnM6ICd1cm46eG1wcDpyZWNlaXB0cycsCgkgICAgICAgIGlkOiBvcHRpb25zLmlkIHx8ICcnCgkgICAgfSk7CgkgICAgdGhpcy5zZW5kQ29tbWFuZChkb20udHJlZSgpKTsKCX07CgoJLyoqCgkgKiBAcHJpdmF0ZQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5jYWNoZVJlY2VpcHRzTWVzc2FnZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CgkgICAgdGhpcy5zZW5kUXVldWUucHVzaChvcHRpb25zKTsKCX07CgoJLyoqCgkgKiBAcHJpdmF0ZQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTdHJvcGhlID0gZnVuY3Rpb24gKCkgewoJICAgIGlmIChsb2NhdGlvbi5wcm90b2NvbCAhPSAnaHR0cHM6JyAmJiB0aGlzLmlzSHR0cEROUykgewoJICAgICAgICAvL1RPRE86IHRyeSB0aGlzLnhtcHBUb3RhbCB0aW1lcyBvbiBmYWlsCgkgICAgICAgIHZhciB1cmwgPSAnJzsKCSAgICAgICAgdmFyIGhvc3QgPSB0aGlzLnhtcHBIb3N0c1t0aGlzLnhtcHBJbmRleF07CgkgICAgICAgIHZhciBkb21haW4gPSBfdXRpbHMuZ2V0WG1sRmlyc3RDaGlsZChob3N0LCAnZG9tYWluJyk7CgkgICAgICAgIHZhciBpcCA9IF91dGlscy5nZXRYbWxGaXJzdENoaWxkKGhvc3QsICdpcCcpOwoJICAgICAgICBpZiAoaXApIHsKCSAgICAgICAgICAgIHVybCA9IGlwLnRleHRDb250ZW50OwoJICAgICAgICAgICAgdmFyIHBvcnQgPSBfdXRpbHMuZ2V0WG1sRmlyc3RDaGlsZChob3N0LCAncG9ydCcpOwoJICAgICAgICAgICAgaWYgKHBvcnQudGV4dENvbnRlbnQgIT0gJzgwJykgewoJICAgICAgICAgICAgICAgIHVybCArPSAnOicgKyBwb3J0LnRleHRDb250ZW50OwoJICAgICAgICAgICAgfQoJICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgdXJsID0gZG9tYWluLnRleHRDb250ZW50OwoJICAgICAgICB9CgoJICAgICAgICBpZiAodXJsICE9ICcnKSB7CgkgICAgICAgICAgICB2YXIgcGFydGVyID0gLyguK1wvXC8pLisoXC8uKykvOwoJICAgICAgICAgICAgdGhpcy51cmwgPSB0aGlzLnVybC5yZXBsYWNlKHBhcnRlciwgIiQxIiArIHVybCArICIkMiIpOwoJICAgICAgICB9CgkgICAgfQoKCSAgICB2YXIgc3Ryb3BoZUNvbm4gPSBuZXcgU3Ryb3BoZS5Db25uZWN0aW9uKHRoaXMudXJsLCB7CgkgICAgICAgIGlzTXVsdGlMb2dpblNlc3Npb25zOiB0aGlzLmlzTXVsdGlMb2dpblNlc3Npb25zLAoJICAgICAgICBpbmFjdGl2aXR5OiB0aGlzLmluYWN0aXZpdHksCgkgICAgICAgIG1heFJldHJpZXM6IHRoaXMubWF4UmV0cmllcywKCSAgICAgICAgcG9sbGluZ1RpbWU6IHRoaXMucG9sbGluZ1RpbWUKCSAgICB9KTsKCSAgICByZXR1cm4gc3Ryb3BoZUNvbm47Cgl9OwoKCS8qKgoJICoKCSAqIEBwYXJhbSBkYXRhCgkgKiBAcGFyYW0gdGFnTmFtZQoJICogQHByaXZhdGUKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0SG9zdHNCeVRhZyA9IGZ1bmN0aW9uIChkYXRhLCB0YWdOYW1lKSB7CgkgICAgdmFyIHRhZyA9IF91dGlscy5nZXRYbWxGaXJzdENoaWxkKGRhdGEsIHRhZ05hbWUpOwoJICAgIGlmICghdGFnKSB7CgkgICAgICAgIGNvbnNvbGUubG9nKHRhZ05hbWUgKyAnIGhvc3RzIGVycm9yJyk7CgkgICAgICAgIHJldHVybiBudWxsOwoJICAgIH0KCSAgICB2YXIgaG9zdHMgPSB0YWcuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hvc3RzJyk7CgkgICAgaWYgKGhvc3RzLmxlbmd0aCA9PSAwKSB7CgkgICAgICAgIGNvbnNvbGUubG9nKHRhZ05hbWUgKyAnIGhvc3RzIGVycm9yMicpOwoJICAgICAgICByZXR1cm4gbnVsbDsKCSAgICB9CgkgICAgcmV0dXJuIGhvc3RzWzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdob3N0Jyk7Cgl9OwoKCS8qKgoJICogQHByaXZhdGUKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVzdEZyb21IdHRwRE5TID0gZnVuY3Rpb24gKG9wdGlvbnMsIHR5cGUpIHsKCSAgICBpZiAodGhpcy5yZXN0SW5kZXggPiB0aGlzLnJlc3RUb3RhbCkgewoJICAgICAgICBjb25zb2xlLmxvZygncmVzdCBob3N0cyBhbGwgdHJpZWQscXVpdCcpOwoJICAgICAgICByZXR1cm47CgkgICAgfQoJICAgIHZhciB1cmwgPSAnJzsKCSAgICB2YXIgaG9zdCA9IHRoaXMucmVzdEhvc3RzW3RoaXMucmVzdEluZGV4XTsKCSAgICB2YXIgZG9tYWluID0gX3V0aWxzLmdldFhtbEZpcnN0Q2hpbGQoaG9zdCwgJ2RvbWFpbicpOwoJICAgIHZhciBpcCA9IF91dGlscy5nZXRYbWxGaXJzdENoaWxkKGhvc3QsICdpcCcpOwoJICAgIGlmIChpcCkgewoJICAgICAgICB2YXIgcG9ydCA9IF91dGlscy5nZXRYbWxGaXJzdENoaWxkKGhvc3QsICdwb3J0Jyk7CgkgICAgICAgIHVybCA9IChsb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyAnaHR0cHM6JyA6ICdodHRwOicpICsgJy8vJyArIGlwLnRleHRDb250ZW50ICsgJzonICsgcG9ydC50ZXh0Q29udGVudDsKCSAgICB9IGVsc2UgewoJICAgICAgICB1cmwgPSAobG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonID8gJ2h0dHBzOicgOiAnaHR0cDonKSArICcvLycgKyBkb21haW4udGV4dENvbnRlbnQ7CgkgICAgfQoKCSAgICBpZiAodXJsICE9ICcnKSB7CgkgICAgICAgIHRoaXMuYXBpVXJsID0gdXJsOwoJICAgICAgICBvcHRpb25zLmFwaVVybCA9IHVybDsKCSAgICB9CgoJICAgIGlmICh0eXBlID09ICdsb2dpbicpIHsKCSAgICAgICAgdGhpcy5sb2dpbihvcHRpb25zKTsKCSAgICB9IGVsc2UgewoJICAgICAgICB0aGlzLnNpZ251cChvcHRpb25zKTsKCSAgICB9Cgl9OwoKCS8qKgoJICogQHByaXZhdGUKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0SHR0cEROUyA9IGZ1bmN0aW9uIChvcHRpb25zLCB0eXBlKSB7CgkgICAgaWYgKHRoaXMucmVzdEhvc3RzKSB7CgkgICAgICAgIHRoaXMuZ2V0UmVzdEZyb21IdHRwRE5TKG9wdGlvbnMsIHR5cGUpOwoJICAgICAgICByZXR1cm47CgkgICAgfQoJICAgIHZhciBzZWxmID0gdGhpczsKCSAgICB2YXIgc3VjID0gZnVuY3Rpb24gc3VjKGRhdGEsIHhocikgewoJICAgICAgICBkYXRhID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhkYXRhLCAidGV4dC94bWwiKS5kb2N1bWVudEVsZW1lbnQ7CgkgICAgICAgIC8vZ2V0IHJlc3QgaXBzCgkgICAgICAgIHZhciByZXN0SG9zdHMgPSBzZWxmLmdldEhvc3RzQnlUYWcoZGF0YSwgJ3Jlc3QnKTsKCSAgICAgICAgaWYgKCFyZXN0SG9zdHMpIHsKCSAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXN0IGhvc3RzIGVycm9yMycpOwoJICAgICAgICAgICAgcmV0dXJuOwoJICAgICAgICB9CgkgICAgICAgIHNlbGYucmVzdEhvc3RzID0gcmVzdEhvc3RzOwoJICAgICAgICBzZWxmLnJlc3RUb3RhbCA9IHJlc3RIb3N0cy5sZW5ndGg7CgoJICAgICAgICAvL2dldCB4bXBwIGlwcwoJICAgICAgICB2YXIgeG1wcEhvc3RzID0gc2VsZi5nZXRIb3N0c0J5VGFnKGRhdGEsICd4bXBwJyk7CgkgICAgICAgIGlmICgheG1wcEhvc3RzKSB7CgkgICAgICAgICAgICBjb25zb2xlLmxvZygneG1wcCBob3N0cyBlcnJvcjMnKTsKCSAgICAgICAgICAgIHJldHVybjsKCSAgICAgICAgfQoJICAgICAgICBzZWxmLnhtcHBIb3N0cyA9IHhtcHBIb3N0czsKCSAgICAgICAgc2VsZi54bXBwVG90YWwgPSB4bXBwSG9zdHMubGVuZ3RoOwoKCSAgICAgICAgc2VsZi5nZXRSZXN0RnJvbUh0dHBETlMob3B0aW9ucywgdHlwZSk7CgkgICAgfTsKCSAgICB2YXIgZXJyb3IgPSBmdW5jdGlvbiBlcnJvcihyZXMsIHhociwgbXNnKSB7CgoJICAgICAgICBjb25zb2xlLmxvZygnZ2V0SHR0cEROUyBlcnJvcicsIHJlcywgbXNnKTsKCSAgICAgICAgc2VsZi5kbnNJbmRleCsrOwoJICAgICAgICBpZiAoc2VsZi5kbnNJbmRleCA8IHNlbGYuZG5zVG90YWwpIHsKCSAgICAgICAgICAgIHNlbGYuZ2V0SHR0cEROUyhvcHRpb25zLCB0eXBlKTsKCSAgICAgICAgfQoJICAgIH07CgkgICAgdmFyIG9wdGlvbnMyID0gewoJICAgICAgICB1cmw6IHRoaXMuZG5zQXJyW3RoaXMuZG5zSW5kZXhdICsgJy9lYXNlbW9iL3NlcnZlci54bWwnLAoJICAgICAgICBkYXRhVHlwZTogJ3RleHQnLAoJICAgICAgICB0eXBlOiAnR0VUJywKCgkgICAgICAgIC8vIHVybDogJ2h0dHA6Ly93d3cuZWFzZW1vYi5jb20vZWFzZW1vYi9zZXJ2ZXIueG1sJywKCSAgICAgICAgLy8gZGF0YVR5cGU6ICd4bWwnLAoJICAgICAgICBkYXRhOiB7IGFwcF9rZXk6IGVuY29kZVVSSUNvbXBvbmVudChvcHRpb25zLmFwcEtleSkgfSwKCSAgICAgICAgc3VjY2Vzczogc3VjIHx8IF91dGlscy5lbXB0eWZuLAoJICAgICAgICBlcnJvcjogZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm4KCSAgICB9OwoJICAgIF91dGlscy5hamF4KG9wdGlvbnMyKTsKCX07CgoJLyoqCgkgKiBAcHJpdmF0ZQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5zaWdudXAgPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIHZhciBzZWxmID0gdGhpczsKCSAgICB2YXIgb3JnTmFtZSA9IG9wdGlvbnMub3JnTmFtZSB8fCAnJzsKCSAgICB2YXIgYXBwTmFtZSA9IG9wdGlvbnMuYXBwTmFtZSB8fCAnJzsKCSAgICB2YXIgYXBwS2V5ID0gb3B0aW9ucy5hcHBLZXkgfHwgJyc7CgkgICAgdmFyIHN1YyA9IG9wdGlvbnMuc3VjY2VzcyB8fCBFTVBUWUZOOwoJICAgIHZhciBlcnIgPSBvcHRpb25zLmVycm9yIHx8IEVNUFRZRk47CgoJICAgIGlmICghb3JnTmFtZSAmJiAhYXBwTmFtZSAmJiBhcHBLZXkpIHsKCSAgICAgICAgdmFyIGRldkluZm9zID0gYXBwS2V5LnNwbGl0KCcjJyk7CgkgICAgICAgIGlmIChkZXZJbmZvcy5sZW5ndGggPT09IDIpIHsKCSAgICAgICAgICAgIG9yZ05hbWUgPSBkZXZJbmZvc1swXTsKCSAgICAgICAgICAgIGFwcE5hbWUgPSBkZXZJbmZvc1sxXTsKCSAgICAgICAgfQoJICAgIH0KCSAgICBpZiAoIW9yZ05hbWUgJiYgIWFwcE5hbWUpIHsKCSAgICAgICAgZXJyKHsKCSAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0NPTk5DVElPTl9BUFBLRVlfTk9UX0FTU0lHTl9FUlJPUgoJICAgICAgICB9KTsKCSAgICAgICAgcmV0dXJuOwoJICAgIH0KCgkgICAgdmFyIGVycm9yID0gZnVuY3Rpb24gZXJyb3IocmVzLCB4aHIsIG1zZykgewoJICAgICAgICBpZiAobG9jYXRpb24ucHJvdG9jb2wgIT0gJ2h0dHBzOicgJiYgc2VsZi5pc0h0dHBETlMpIHsKCSAgICAgICAgICAgIGlmIChzZWxmLnJlc3RJbmRleCArIDEgPCBzZWxmLnJlc3RUb3RhbCkgewoJICAgICAgICAgICAgICAgIHNlbGYucmVzdEluZGV4Kys7CgkgICAgICAgICAgICAgICAgc2VsZi5nZXRSZXN0RnJvbUh0dHBETlMob3B0aW9ucywgJ3NpZ251cCcpOwoJICAgICAgICAgICAgICAgIHJldHVybjsKCSAgICAgICAgICAgIH0KCSAgICAgICAgfQoJICAgICAgICBzZWxmLmNsZWFyKCk7CgkgICAgICAgIGVycihyZXMpOwoJICAgIH07CgkgICAgdmFyIGh0dHBzID0gb3B0aW9ucy5odHRwcyB8fCBodHRwczsKCSAgICB2YXIgYXBpVXJsID0gb3B0aW9ucy5hcGlVcmw7CgkgICAgdmFyIHJlc3RVcmwgPSBhcGlVcmwgKyAnLycgKyBvcmdOYW1lICsgJy8nICsgYXBwTmFtZSArICcvdXNlcnMnOwoKCSAgICB2YXIgdXNlcmpzb24gPSB7CgkgICAgICAgIHVzZXJuYW1lOiBvcHRpb25zLnVzZXJuYW1lLAoJICAgICAgICBwYXNzd29yZDogb3B0aW9ucy5wYXNzd29yZCwKCSAgICAgICAgbmlja25hbWU6IG9wdGlvbnMubmlja25hbWUgfHwgJycKCSAgICB9OwoKCSAgICB2YXIgdXNlcmluZm8gPSBfdXRpbHMuc3RyaW5naWZ5KHVzZXJqc29uKTsKCSAgICB2YXIgb3B0aW9uczIgPSB7CgkgICAgICAgIHVybDogcmVzdFVybCwKCSAgICAgICAgZGF0YVR5cGU6ICdqc29uJywKCSAgICAgICAgZGF0YTogdXNlcmluZm8sCgkgICAgICAgIHN1Y2Nlc3M6IHN1YywKCSAgICAgICAgZXJyb3I6IGVycm9yCgkgICAgfTsKCSAgICBfdXRpbHMuYWpheChvcHRpb25zMik7Cgl9OwoKCS8qKgoJICog55m75b2VCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIOeUqOaIt+S/oeaBrwoJICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMudXNlciAtIOeUqOaIt+WQjQoJICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMucHdkIC0g55So5oi35a+G56CB77yM6LefdG9rZW7kuozpgInkuIAKCSAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmFjY2Vzc1Rva2VuIC0gdG9rZW7vvIzot5/lr4bnoIHkuozpgInkuIAKCSAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmFwcEtleSAtIEFwcGtleQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKCSAgICB2YXIgYXBwa2V5ID0gb3B0aW9ucy5hcHBLZXksCgkgICAgICAgIG9yZ05hbWUgPSBhcHBrZXkuc3BsaXQoJyMnKVswXSwKCSAgICAgICAgYXBwTmFtZSA9IGFwcGtleS5zcGxpdCgnIycpWzFdOwoJICAgIHRoaXMub3JnTmFtZSA9IG9yZ05hbWU7CgkgICAgdGhpcy5hcHBOYW1lID0gYXBwTmFtZTsKCSAgICBpZiAob3B0aW9ucy5hY2Nlc3NUb2tlbikgewoJICAgICAgICB0aGlzLnRva2VuID0gb3B0aW9ucy5hY2Nlc3NUb2tlbjsKCSAgICB9CgkgICAgaWYgKG9wdGlvbnMueG1wcFVSTCkgewoJICAgICAgICB0aGlzLnVybCA9IF9nZXRYbXBwVXJsKG9wdGlvbnMueG1wcFVSTCwgdGhpcy5odHRwcyk7CgkgICAgfQoJICAgIGlmIChsb2NhdGlvbi5wcm90b2NvbCAhPSAnaHR0cHM6JyAmJiB0aGlzLmlzSHR0cEROUykgewoJICAgICAgICB0aGlzLmRuc0luZGV4ID0gMDsKCSAgICAgICAgdGhpcy5nZXRIdHRwRE5TKG9wdGlvbnMsICdsb2dpbicpOwoJICAgIH0gZWxzZSB7CgkgICAgICAgIHRoaXMubG9naW4ob3B0aW9ucyk7CgkgICAgfQoJfTsKCgkvKioKCSAqCgkgKiBAcGFyYW0gb3B0aW9ucwoJICogQHByaXZhdGUKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUubG9naW4gPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIHRoaXMudXNlciA9IG9wdGlvbnMudXNlcjsKCSAgICB2YXIgcGFzcyA9IF92YWxpZENoZWNrKG9wdGlvbnMsIHRoaXMpOwoKCSAgICBpZiAoIXBhc3MpIHsKCSAgICAgICAgcmV0dXJuOwoJICAgIH0KCgkgICAgdmFyIGNvbm4gPSB0aGlzOwoKCSAgICBpZiAoY29ubi5pc09wZW5lZCgpKSB7CgkgICAgICAgIHJldHVybjsKCSAgICB9CgoJICAgIGlmIChvcHRpb25zLmFjY2Vzc1Rva2VuKSB7CgkgICAgICAgIG9wdGlvbnMuYWNjZXNzX3Rva2VuID0gb3B0aW9ucy5hY2Nlc3NUb2tlbjsKCSAgICAgICAgY29ubi5jb250ZXh0LnJlc3RUb2tlbkRhdGEgPSBvcHRpb25zOwoJICAgICAgICBfbG9naW4ob3B0aW9ucywgY29ubik7CgkgICAgfSBlbHNlIHsKCSAgICAgICAgdmFyIGFwaVVybCA9IHRoaXMuYXBpVXJsOwoJICAgICAgICB2YXIgdXNlcklkID0gdGhpcy5jb250ZXh0LnVzZXJJZDsKCSAgICAgICAgdmFyIHB3ZCA9IG9wdGlvbnMucHdkIHx8ICcnOwoJICAgICAgICB2YXIgYXBwTmFtZSA9IHRoaXMuY29udGV4dC5hcHBOYW1lOwoJICAgICAgICB2YXIgb3JnTmFtZSA9IHRoaXMuY29udGV4dC5vcmdOYW1lOwoKCSAgICAgICAgdmFyIHN1YyA9IGZ1bmN0aW9uIHN1YyhkYXRhLCB4aHIpIHsKCSAgICAgICAgICAgIGNvbm4uY29udGV4dC5zdGF0dXMgPSBfY29kZS5TVEFUVVNfRE9MT0dJTl9JTTsKCSAgICAgICAgICAgIGNvbm4uY29udGV4dC5yZXN0VG9rZW5EYXRhID0gZGF0YTsKCSAgICAgICAgICAgIGlmIChvcHRpb25zLnN1Y2Nlc3MpIG9wdGlvbnMuc3VjY2VzcyhkYXRhKTsKCSAgICAgICAgICAgIGNvbm4udG9rZW4gPSBkYXRhLmFjY2Vzc190b2tlbjsKCSAgICAgICAgICAgIF9sb2dpbihkYXRhLCBjb25uKTsKCSAgICAgICAgfTsKCSAgICAgICAgdmFyIGVycm9yID0gZnVuY3Rpb24gZXJyb3IocmVzLCB4aHIsIG1zZykgewoJICAgICAgICAgICAgaWYgKG9wdGlvbnMuZXJyb3IpIG9wdGlvbnMuZXJyb3IoKTsKCSAgICAgICAgICAgIGlmIChsb2NhdGlvbi5wcm90b2NvbCAhPSAnaHR0cHM6JyAmJiBjb25uLmlzSHR0cEROUykgewoJICAgICAgICAgICAgICAgIGlmIChjb25uLnJlc3RJbmRleCArIDEgPCBjb25uLnJlc3RUb3RhbCkgewoJICAgICAgICAgICAgICAgICAgICBjb25uLnJlc3RJbmRleCsrOwoJICAgICAgICAgICAgICAgICAgICBjb25uLmdldFJlc3RGcm9tSHR0cEROUyhvcHRpb25zLCAnbG9naW4nKTsKCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwoJICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgIH0KCSAgICAgICAgICAgIGNvbm4uY2xlYXIoKTsKCSAgICAgICAgICAgIGlmIChyZXMuZXJyb3IgJiYgcmVzLmVycm9yX2Rlc2NyaXB0aW9uKSB7CgkgICAgICAgICAgICAgICAgY29ubi5vbkVycm9yKHsKCSAgICAgICAgICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX09QRU5fVVNFUkdSSURfRVJST1IsCgkgICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlcywKCSAgICAgICAgICAgICAgICAgICAgeGhyOiB4aHIKCSAgICAgICAgICAgICAgICB9KTsKCSAgICAgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICAgICAgY29ubi5vbkVycm9yKHsKCSAgICAgICAgICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX09QRU5fRVJST1IsCgkgICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlcywKCSAgICAgICAgICAgICAgICAgICAgeGhyOiB4aHIKCSAgICAgICAgICAgICAgICB9KTsKCSAgICAgICAgICAgIH0KCSAgICAgICAgfTsKCgkgICAgICAgIHRoaXMuY29udGV4dC5zdGF0dXMgPSBfY29kZS5TVEFUVVNfRE9MT0dJTl9VU0VSR1JJRDsKCgkgICAgICAgIHZhciBsb2dpbkpzb24gPSB7CgkgICAgICAgICAgICBncmFudF90eXBlOiAncGFzc3dvcmQnLAoJICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJJZCwKCSAgICAgICAgICAgIHBhc3N3b3JkOiBwd2QsCgkgICAgICAgICAgICB0aW1lc3RhbXA6ICtuZXcgRGF0ZSgpCgkgICAgICAgIH07CgkgICAgICAgIHZhciBsb2dpbmZvID0gX3V0aWxzLnN0cmluZ2lmeShsb2dpbkpzb24pOwoKCSAgICAgICAgdmFyIG9wdGlvbnMyID0gewoJICAgICAgICAgICAgdXJsOiBhcGlVcmwgKyAnLycgKyBvcmdOYW1lICsgJy8nICsgYXBwTmFtZSArICcvdG9rZW4nLAoJICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJywKCSAgICAgICAgICAgIGRhdGE6IGxvZ2luZm8sCgkgICAgICAgICAgICBzdWNjZXNzOiBzdWMgfHwgX3V0aWxzLmVtcHR5Zm4sCgkgICAgICAgICAgICBlcnJvcjogZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm4KCSAgICAgICAgfTsKCSAgICAgICAgX3V0aWxzLmFqYXgob3B0aW9uczIpOwoJICAgIH0KCX07CgoJLyoqCgkgKiBhdHRhY2ggdG8geG1wcCBzZXJ2ZXIgZm9yIEJPU0gKCSAqIEBwcml2YXRlCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CgkgICAgdmFyIHBhc3MgPSBfdmFsaWRDaGVjayhvcHRpb25zLCB0aGlzKTsKCgkgICAgaWYgKCFwYXNzKSB7CgkgICAgICAgIHJldHVybjsKCSAgICB9CgoJICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKCSAgICB2YXIgYWNjZXNzVG9rZW4gPSBvcHRpb25zLmFjY2Vzc1Rva2VuIHx8ICcnOwoJICAgIGlmIChhY2Nlc3NUb2tlbiA9PSAnJykgewoJICAgICAgICB0aGlzLm9uRXJyb3IoewoJICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX1RPS0VOX05PVF9BU1NJR05fRVJST1IKCSAgICAgICAgfSk7CgkgICAgICAgIHJldHVybjsKCSAgICB9CgoJICAgIHZhciBzaWQgPSBvcHRpb25zLnNpZCB8fCAnJzsKCSAgICBpZiAoc2lkID09PSAnJykgewoJICAgICAgICB0aGlzLm9uRXJyb3IoewoJICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX1NFU1NJT05JRF9OT1RfQVNTSUdOX0VSUk9SCgkgICAgICAgIH0pOwoJICAgICAgICByZXR1cm47CgkgICAgfQoKCSAgICB2YXIgcmlkID0gb3B0aW9ucy5yaWQgfHwgJyc7CgkgICAgaWYgKHJpZCA9PT0gJycpIHsKCSAgICAgICAgdGhpcy5vbkVycm9yKHsKCSAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0NPTk5DVElPTl9SSURfTk9UX0FTU0lHTl9FUlJPUgoJICAgICAgICB9KTsKCSAgICAgICAgcmV0dXJuOwoJICAgIH0KCgkgICAgc3Ryb3BoZUNvbm4gPSB0aGlzLmdldFN0cm9waGUoKTsKCgkgICAgdGhpcy5jb250ZXh0LmFjY2Vzc1Rva2VuID0gYWNjZXNzVG9rZW47CgkgICAgdGhpcy5jb250ZXh0LnN0cm9waGVDb25uID0gc3Ryb3BoZUNvbm47CgkgICAgdGhpcy5jb250ZXh0LnN0YXR1cyA9IF9jb2RlLlNUQVRVU19ET0xPR0lOX0lNOwoKCSAgICB2YXIgY29ubiA9IHRoaXM7CgkgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2soc3RhdHVzLCBtc2cpIHsKCSAgICAgICAgX2xvZ2luQ2FsbGJhY2soc3RhdHVzLCBtc2csIGNvbm4pOwoJICAgIH07CgoJICAgIHZhciBqaWQgPSB0aGlzLmNvbnRleHQuamlkOwoJICAgIHZhciB3YWl0ID0gdGhpcy53YWl0OwoJICAgIHZhciBob2xkID0gdGhpcy5ob2xkOwoJICAgIHZhciB3aW5kID0gdGhpcy53aW5kIHx8IDU7CgkgICAgc3Ryb3BoZUNvbm4uYXR0YWNoKGppZCwgc2lkLCByaWQsIGNhbGxiYWNrLCB3YWl0LCBob2xkLCB3aW5kKTsKCX07CgoJLyoqCgkgKiDlhbPpl63ov57mjqUKCSAqIEBwYXJhbSB7U3RyaW5nfSByZWFzb24KCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAocmVhc29uKSB7CgkgICAgdGhpcy5sb2dPdXQgPSB0cnVlOwoJICAgIHRoaXMuc3RvcEhlYXJ0QmVhdCgpOwoKCSAgICB2YXIgc3RhdHVzID0gdGhpcy5jb250ZXh0LnN0YXR1czsKCSAgICBpZiAoc3RhdHVzID09IF9jb2RlLlNUQVRVU19JTklUKSB7CgkgICAgICAgIHJldHVybjsKCSAgICB9CgoJICAgIGlmICh0aGlzLmlzQ2xvc2VkKCkgfHwgdGhpcy5pc0Nsb3NpbmcoKSkgewoJICAgICAgICByZXR1cm47CgkgICAgfQoKCSAgICB0aGlzLmNvbnRleHQuc3RhdHVzID0gX2NvZGUuU1RBVFVTX0NMT1NJTkc7CgkgICAgdGhpcy5jb250ZXh0LnN0cm9waGVDb25uLmRpc2Nvbm5lY3QocmVhc29uKTsKCX07CgoJLyoqCgkgKiBAcHJpdmF0ZQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5hZGRIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIsIG5zLCBuYW1lLCB0eXBlLCBpZCwgZnJvbSwgb3B0aW9ucykgewoJICAgIHRoaXMuY29udGV4dC5zdHJvcGhlQ29ubi5hZGRIYW5kbGVyKGhhbmRsZXIsIG5zLCBuYW1lLCB0eXBlLCBpZCwgZnJvbSwgb3B0aW9ucyk7Cgl9OwoKCS8qKgoJICogQHByaXZhdGUKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUubm90aWZ5VmVyc2lvbiA9IGZ1bmN0aW9uIChzdWMsIGZhaWwpIHsKCSAgICB2YXIgamlkID0gc3Ryb3BoZUNvbm4uZ2V0SmlkKCk7CgkgICAgdGhpcy5jb250ZXh0LmppZCA9IGppZDsKCSAgICB2YXIgZG9tID0gJGlxKHsKCSAgICAgICAgZnJvbTogamlkIHx8ICcnLAoJICAgICAgICB0bzogdGhpcy5kb21haW4sCgkgICAgICAgIHR5cGU6ICdyZXN1bHQnCgkgICAgfSkuYygncXVlcnknLCB7IHhtbG5zOiAnamFiYmVyOmlxOnZlcnNpb24nIH0pLmMoJ25hbWUnKS50KCdlYXNlbW9iJykudXAoKS5jKCd2ZXJzaW9uJykudChfdmVyc2lvbikudXAoKS5jKCdvcycpLnQoJ3dlYmltJyk7CgoJICAgIHZhciBzdWMgPSBzdWMgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdmFyIGVycm9yID0gZmFpbCB8fCB0aGlzLm9uRXJyb3I7CgkgICAgdmFyIGZhaWxGbiA9IGZ1bmN0aW9uIGZhaWxGbihlbGUpIHsKCSAgICAgICAgZXJyb3IoewoJICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX05PVElGWVZFUlNJT05fRVJST1IsCgkgICAgICAgICAgICBkYXRhOiBlbGUKCSAgICAgICAgfSk7CgkgICAgfTsKCSAgICB0aGlzLmNvbnRleHQuc3Ryb3BoZUNvbm4uc2VuZElRKGRvbS50cmVlKCksIHN1YywgZmFpbEZuKTsKCSAgICByZXR1cm47Cgl9OwoKCS8qKgoJICogaGFuZGxlIGFsbCB0eXBlcyBvZiBwcmVzZW5jZSBtZXNzYWdlCgkgKiBAcHJpdmF0ZQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5oYW5kbGVQcmVzZW5jZSA9IGZ1bmN0aW9uIChtc2dpbmZvKSB7CgkgICAgaWYgKHRoaXMuaXNDbG9zZWQoKSkgewoJICAgICAgICByZXR1cm47CgkgICAgfQoJICAgIHZhciBmcm9tID0gbXNnaW5mby5nZXRBdHRyaWJ1dGUoJ2Zyb20nKSB8fCAnJzsKCSAgICB2YXIgdG8gPSBtc2dpbmZvLmdldEF0dHJpYnV0ZSgndG8nKSB8fCAnJzsKCSAgICB2YXIgdHlwZSA9IG1zZ2luZm8uZ2V0QXR0cmlidXRlKCd0eXBlJykgfHwgJyc7CgkgICAgdmFyIHByZXNlbmNlX3R5cGUgPSBtc2dpbmZvLmdldEF0dHJpYnV0ZSgncHJlc2VuY2VfdHlwZScpIHx8ICcnOwoJICAgIHZhciBmcm9tVXNlciA9IF9wYXJzZU5hbWVGcm9tSmlkRm4oZnJvbSk7CgkgICAgdmFyIHRvVXNlciA9IF9wYXJzZU5hbWVGcm9tSmlkRm4odG8pOwoJICAgIHZhciBpc0NyZWF0ZSA9IGZhbHNlOwoJICAgIHZhciBpc01lbWJlckpvaW4gPSBmYWxzZTsKCSAgICB2YXIgaXNEZWNsaW5lID0gZmFsc2U7CgkgICAgdmFyIGlzQXBwbHkgPSBmYWxzZTsKCSAgICB2YXIgaW5mbyA9IHsKCSAgICAgICAgZnJvbTogZnJvbVVzZXIsCgkgICAgICAgIHRvOiB0b1VzZXIsCgkgICAgICAgIGZyb21KaWQ6IGZyb20sCgkgICAgICAgIHRvSmlkOiB0bywKCSAgICAgICAgdHlwZTogdHlwZSwKCSAgICAgICAgY2hhdHJvb206IG1zZ2luZm8uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3Jvb210eXBlJykubGVuZ3RoID8gdHJ1ZSA6IGZhbHNlCgkgICAgfTsKCgkgICAgdmFyIHNob3dUYWdzID0gbXNnaW5mby5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2hvdycpOwoJICAgIGlmIChzaG93VGFncyAmJiBzaG93VGFncy5sZW5ndGggPiAwKSB7CgkgICAgICAgIHZhciBzaG93VGFnID0gc2hvd1RhZ3NbMF07CgkgICAgICAgIGluZm8uc2hvdyA9IFN0cm9waGUuZ2V0VGV4dChzaG93VGFnKTsKCSAgICB9CgkgICAgdmFyIHN0YXR1c1RhZ3MgPSBtc2dpbmZvLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzdGF0dXMnKTsKCSAgICBpZiAoc3RhdHVzVGFncyAmJiBzdGF0dXNUYWdzLmxlbmd0aCA+IDApIHsKCSAgICAgICAgdmFyIHN0YXR1c1RhZyA9IHN0YXR1c1RhZ3NbMF07CgkgICAgICAgIGluZm8uc3RhdHVzID0gU3Ryb3BoZS5nZXRUZXh0KHN0YXR1c1RhZyk7CgkgICAgICAgIGluZm8uY29kZSA9IHN0YXR1c1RhZy5nZXRBdHRyaWJ1dGUoJ2NvZGUnKTsKCSAgICB9CgoJICAgIHZhciBwcmlvcml0eVRhZ3MgPSBtc2dpbmZvLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdwcmlvcml0eScpOwoJICAgIGlmIChwcmlvcml0eVRhZ3MgJiYgcHJpb3JpdHlUYWdzLmxlbmd0aCA+IDApIHsKCSAgICAgICAgdmFyIHByaW9yaXR5VGFnID0gcHJpb3JpdHlUYWdzWzBdOwoJICAgICAgICBpbmZvLnByaW9yaXR5ID0gU3Ryb3BoZS5nZXRUZXh0KHByaW9yaXR5VGFnKTsKCSAgICB9CgoJICAgIHZhciBlcnJvciA9IG1zZ2luZm8uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2Vycm9yJyk7CgkgICAgaWYgKGVycm9yICYmIGVycm9yLmxlbmd0aCA+IDApIHsKCSAgICAgICAgdmFyIGVycm9yID0gZXJyb3JbMF07CgkgICAgICAgIGluZm8uZXJyb3IgPSB7CgkgICAgICAgICAgICBjb2RlOiBlcnJvci5nZXRBdHRyaWJ1dGUoJ2NvZGUnKQoJICAgICAgICB9OwoJICAgIH0KCgkgICAgdmFyIGRlc3Ryb3kgPSBtc2dpbmZvLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkZXN0cm95Jyk7CgkgICAgaWYgKGRlc3Ryb3kgJiYgZGVzdHJveS5sZW5ndGggPiAwKSB7CgkgICAgICAgIHZhciBkZXN0cm95ID0gZGVzdHJveVswXTsKCSAgICAgICAgaW5mby5kZXN0cm95ID0gdHJ1ZTsKCgkgICAgICAgIHZhciByZWFzb24gPSBkZXN0cm95LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdyZWFzb24nKTsKCSAgICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ubGVuZ3RoID4gMCkgewoJICAgICAgICAgICAgaW5mby5yZWFzb24gPSBTdHJvcGhlLmdldFRleHQocmVhc29uWzBdKTsKCSAgICAgICAgfQoJICAgIH0KCgkgICAgdmFyIG1lbWJlcnMgPSBtc2dpbmZvLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpdGVtJyk7CgkgICAgaWYgKG1lbWJlcnMgJiYgbWVtYmVycy5sZW5ndGggPiAwKSB7CgkgICAgICAgIHZhciBtZW1iZXIgPSBtZW1iZXJzWzBdOwoJICAgICAgICB2YXIgcm9sZSA9IG1lbWJlci5nZXRBdHRyaWJ1dGUoJ3JvbGUnKTsKCSAgICAgICAgdmFyIGppZCA9IG1lbWJlci5nZXRBdHRyaWJ1dGUoJ2ppZCcpOwoJICAgICAgICB2YXIgYWZmaWxpYXRpb24gPSBtZW1iZXIuZ2V0QXR0cmlidXRlKCdhZmZpbGlhdGlvbicpOwoJICAgICAgICAvLyBkaXNtaXNzZWQgYnkgZ3JvdXAKCSAgICAgICAgaWYgKHJvbGUgPT0gJ25vbmUnICYmIGppZCkgewoJICAgICAgICAgICAgdmFyIGtpY2tlZE1lbWJlciA9IF9wYXJzZU5hbWVGcm9tSmlkRm4oamlkKTsKCSAgICAgICAgICAgIHZhciBhY3RvciA9IG1lbWJlci5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYWN0b3InKVswXTsKCSAgICAgICAgICAgIHZhciBhY3Rvck5pY2sgPSBhY3Rvci5nZXRBdHRyaWJ1dGUoJ25pY2snKTsKCSAgICAgICAgICAgIGluZm8uYWN0b3IgPSBhY3Rvck5pY2s7CgkgICAgICAgICAgICBpbmZvLmtpY2tlZCA9IGtpY2tlZE1lbWJlcjsKCSAgICAgICAgfQoJICAgICAgICAvLyBTZXJ2aWNlIEFja25vd2xlZGdlcyBSb29tIENyZWF0aW9uIGBjcmVhdGVHcm91cEFDS2AKCSAgICAgICAgaWYgKHJvbGUgPT0gJ21vZGVyYXRvcicgJiYgaW5mby5jb2RlID09ICcyMDEnKSB7CgkgICAgICAgICAgICBpZiAoYWZmaWxpYXRpb24gPT09ICdvd25lcicpIHsKCSAgICAgICAgICAgICAgICBpbmZvLnR5cGUgPSAnY3JlYXRlR3JvdXBBQ0snOwoJICAgICAgICAgICAgICAgIGlzQ3JlYXRlID0gdHJ1ZTsKCSAgICAgICAgICAgIH0KCSAgICAgICAgICAgIC8vIGVsc2UKCSAgICAgICAgICAgIC8vICAgICBpbmZvLnR5cGUgPSAnam9pblB1YmxpY0dyb3VwU3VjY2Vzcyc7CgkgICAgICAgIH0KCSAgICB9CgoJICAgIHZhciB4ID0gbXNnaW5mby5nZXRFbGVtZW50c0J5VGFnTmFtZSgneCcpOwoJICAgIGlmICh4ICYmIHgubGVuZ3RoID4gMCkgewoJICAgICAgICAvLyDliqDnvqTnlLPor7cKCSAgICAgICAgdmFyIGFwcGx5ID0geFswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYXBwbHknKTsKCSAgICAgICAgLy8g5Yqg576k5oiQ5YqfCgkgICAgICAgIHZhciBhY2NlcHQgPSB4WzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhY2NlcHQnKTsKCSAgICAgICAgLy8g5ZCM5oSP5Yqg576k5ZCO55So5oi36L+b576k6YCa55+lCgkgICAgICAgIHZhciBpdGVtID0geFswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaXRlbScpOwoJICAgICAgICAvLyDliqDnvqTooqvmi5Lnu50KCSAgICAgICAgdmFyIGRlY2xpbmUgPSB4WzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkZWNsaW5lJyk7CgkgICAgICAgIC8vIOiiq+iuvuS4uueuoeeQhuWRmAoJICAgICAgICB2YXIgYWRkQWRtaW4gPSB4WzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhZGRfYWRtaW4nKTsKCSAgICAgICAgLy8g6KKr5Y+W5raI566h55CG5ZGYCgkgICAgICAgIHZhciByZW1vdmVBZG1pbiA9IHhbMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3JlbW92ZV9hZG1pbicpOwoJICAgICAgICAvLyDooqvnpoHoqIAKCSAgICAgICAgdmFyIGFkZE11dGUgPSB4WzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhZGRfbXV0ZScpOwoJICAgICAgICAvLyDlj5bmtojnpoHoqIAKCSAgICAgICAgdmFyIHJlbW92ZU11dGUgPSB4WzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdyZW1vdmVfbXV0ZScpOwoKCSAgICAgICAgaWYgKGFwcGx5ICYmIGFwcGx5Lmxlbmd0aCA+IDApIHsKCSAgICAgICAgICAgIGlzQXBwbHkgPSB0cnVlOwoJICAgICAgICAgICAgaW5mby50b05pY2sgPSBhcHBseVswXS5nZXRBdHRyaWJ1dGUoJ3RvTmljaycpOwoJICAgICAgICAgICAgaW5mby50eXBlID0gJ2pvaW5Hcm91cE5vdGlmaWNhdGlvbnMnOwoJICAgICAgICAgICAgdmFyIGdyb3VwSmlkID0gYXBwbHlbMF0uZ2V0QXR0cmlidXRlKCd0bycpOwoJICAgICAgICAgICAgdmFyIGdpZCA9IGdyb3VwSmlkLnNwbGl0KCdAJylbMF0uc3BsaXQoJ18nKTsKCSAgICAgICAgICAgIGdpZCA9IGdpZFtnaWQubGVuZ3RoIC0gMV07CgkgICAgICAgICAgICBpbmZvLmdpZCA9IGdpZDsKCSAgICAgICAgfSBlbHNlIGlmIChhY2NlcHQgJiYgYWNjZXB0Lmxlbmd0aCA+IDApIHsKCSAgICAgICAgICAgIGluZm8udHlwZSA9ICdqb2luUHVibGljR3JvdXBTdWNjZXNzJzsKCSAgICAgICAgfSBlbHNlIGlmIChpdGVtICYmIGl0ZW0ubGVuZ3RoID4gMCkgewoJICAgICAgICAgICAgdmFyIGFmZmlsaWF0aW9uID0gaXRlbVswXS5nZXRBdHRyaWJ1dGUoJ2FmZmlsaWF0aW9uJyksCgkgICAgICAgICAgICAgICAgcm9sZSA9IGl0ZW1bMF0uZ2V0QXR0cmlidXRlKCdyb2xlJyk7CgkgICAgICAgICAgICBpZiAoYWZmaWxpYXRpb24gPT0gJ21lbWJlcicgfHwgcm9sZSA9PSAncGFydGljaXBhbnQnKSB7CgkgICAgICAgICAgICAgICAgaXNNZW1iZXJKb2luID0gdHJ1ZTsKCSAgICAgICAgICAgICAgICBpbmZvLm1pZCA9IGluZm8uZnJvbUppZC5zcGxpdCgnLycpOwoJICAgICAgICAgICAgICAgIGluZm8ubWlkID0gaW5mby5taWRbaW5mby5taWQubGVuZ3RoIC0gMV07CgkgICAgICAgICAgICAgICAgaW5mby50eXBlID0gJ21lbWJlckpvaW5QdWJsaWNHcm91cFN1Y2Nlc3MnOwoJICAgICAgICAgICAgICAgIHZhciByb29tdHlwZSA9IG1zZ2luZm8uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3Jvb210eXBlJyk7CgkgICAgICAgICAgICAgICAgaWYgKHJvb210eXBlICYmIHJvb210eXBlLmxlbmd0aCA+IDApIHsKCSAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSByb29tdHlwZVswXS5nZXRBdHRyaWJ1dGUoJ3R5cGUnKTsKCSAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gJ2NoYXRyb29tJykgewoJICAgICAgICAgICAgICAgICAgICAgICAgaW5mby50eXBlID0gJ21lbWJlckpvaW5DaGF0Um9vbVN1Y2Nlc3MnOwoJICAgICAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgfQoJICAgICAgICB9IGVsc2UgaWYgKGRlY2xpbmUgJiYgZGVjbGluZS5sZW5ndGgpIHsKCSAgICAgICAgICAgIGlzRGVjbGluZSA9IHRydWU7CgkgICAgICAgICAgICB2YXIgZ2lkID0gZGVjbGluZVswXS5nZXRBdHRyaWJ1dGUoImZyb21OaWNrIik7CgkgICAgICAgICAgICB2YXIgb3duZXIgPSBfcGFyc2VOYW1lRnJvbUppZEZuKGRlY2xpbmVbMF0uZ2V0QXR0cmlidXRlKCJmcm9tIikpOwoJICAgICAgICAgICAgaW5mby50eXBlID0gImpvaW5QdWJsaWNHcm91cERlY2xpbmVkIjsKCSAgICAgICAgICAgIGluZm8ub3duZXIgPSBvd25lcjsKCSAgICAgICAgICAgIGluZm8uZ2lkID0gZ2lkOwoJICAgICAgICB9IGVsc2UgaWYgKGFkZEFkbWluICYmIGFkZEFkbWluLmxlbmd0aCA+IDApIHsKCSAgICAgICAgICAgIHZhciBnaWQgPSBfcGFyc2VOYW1lRnJvbUppZEZuKGFkZEFkbWluWzBdLmdldEF0dHJpYnV0ZSgnbXVjamlkJykpOwoJICAgICAgICAgICAgdmFyIG93bmVyID0gX3BhcnNlTmFtZUZyb21KaWRGbihhZGRBZG1pblswXS5nZXRBdHRyaWJ1dGUoJ2Zyb20nKSk7CgkgICAgICAgICAgICBpbmZvLm93bmVyID0gb3duZXI7CgkgICAgICAgICAgICBpbmZvLmdpZCA9IGdpZDsKCSAgICAgICAgICAgIGluZm8udHlwZSA9ICJhZGRBZG1pbiI7CgkgICAgICAgIH0gZWxzZSBpZiAocmVtb3ZlQWRtaW4gJiYgcmVtb3ZlQWRtaW4ubGVuZ3RoID4gMCkgewoJICAgICAgICAgICAgdmFyIGdpZCA9IF9wYXJzZU5hbWVGcm9tSmlkRm4ocmVtb3ZlQWRtaW5bMF0uZ2V0QXR0cmlidXRlKCdtdWNqaWQnKSk7CgkgICAgICAgICAgICB2YXIgb3duZXIgPSBfcGFyc2VOYW1lRnJvbUppZEZuKHJlbW92ZUFkbWluWzBdLmdldEF0dHJpYnV0ZSgnZnJvbScpKTsKCSAgICAgICAgICAgIGluZm8ub3duZXIgPSBvd25lcjsKCSAgICAgICAgICAgIGluZm8uZ2lkID0gZ2lkOwoJICAgICAgICAgICAgaW5mby50eXBlID0gInJlbW92ZUFkbWluIjsKCSAgICAgICAgfSBlbHNlIGlmIChhZGRNdXRlICYmIGFkZE11dGUubGVuZ3RoID4gMCkgewoJICAgICAgICAgICAgdmFyIGdpZCA9IF9wYXJzZU5hbWVGcm9tSmlkRm4oYWRkTXV0ZVswXS5nZXRBdHRyaWJ1dGUoJ211Y2ppZCcpKTsKCSAgICAgICAgICAgIHZhciBvd25lciA9IF9wYXJzZU5hbWVGcm9tSmlkRm4oYWRkTXV0ZVswXS5nZXRBdHRyaWJ1dGUoJ2Zyb20nKSk7CgkgICAgICAgICAgICBpbmZvLm93bmVyID0gb3duZXI7CgkgICAgICAgICAgICBpbmZvLmdpZCA9IGdpZDsKCSAgICAgICAgICAgIGluZm8udHlwZSA9ICJhZGRNdXRlIjsKCSAgICAgICAgfSBlbHNlIGlmIChyZW1vdmVNdXRlICYmIHJlbW92ZU11dGUubGVuZ3RoID4gMCkgewoJICAgICAgICAgICAgdmFyIGdpZCA9IF9wYXJzZU5hbWVGcm9tSmlkRm4ocmVtb3ZlTXV0ZVswXS5nZXRBdHRyaWJ1dGUoJ211Y2ppZCcpKTsKCSAgICAgICAgICAgIHZhciBvd25lciA9IF9wYXJzZU5hbWVGcm9tSmlkRm4ocmVtb3ZlTXV0ZVswXS5nZXRBdHRyaWJ1dGUoJ2Zyb20nKSk7CgkgICAgICAgICAgICBpbmZvLm93bmVyID0gb3duZXI7CgkgICAgICAgICAgICBpbmZvLmdpZCA9IGdpZDsKCSAgICAgICAgICAgIGluZm8udHlwZSA9ICJyZW1vdmVNdXRlIjsKCSAgICAgICAgfQoJICAgIH0KCgkgICAgaWYgKGluZm8uY2hhdHJvb20pIHsKCSAgICAgICAgLy8gZGlmZiB0aGUKCSAgICAgICAgaW5mby5wcmVzZW5jZV90eXBlID0gcHJlc2VuY2VfdHlwZTsKCSAgICAgICAgaW5mby5vcmlnaW5hbF90eXBlID0gaW5mby50eXBlOwoJICAgICAgICB2YXIgcmVmbGVjdFVzZXIgPSBmcm9tLnNsaWNlKGZyb20ubGFzdEluZGV4T2YoJy8nKSArIDEpOwoKCSAgICAgICAgaWYgKHJlZmxlY3RVc2VyID09PSB0aGlzLmNvbnRleHQudXNlcklkKSB7CgkgICAgICAgICAgICBpZiAoaW5mby50eXBlID09PSAnJyAmJiAhaW5mby5jb2RlKSB7CgkgICAgICAgICAgICAgICAgaW5mby50eXBlID0gJ2pvaW5DaGF0Um9vbVN1Y2Nlc3MnOwoJICAgICAgICAgICAgfSBlbHNlIGlmIChwcmVzZW5jZV90eXBlID09PSAndW5hdmFpbGFibGUnIHx8IGluZm8udHlwZSA9PT0gJ3VuYXZhaWxhYmxlJykgewoJICAgICAgICAgICAgICAgIGlmICghaW5mby5zdGF0dXMpIHsKCSAgICAgICAgICAgICAgICAgICAgLy8gbG9nb3V0IHN1Y2Nlc3NmdWxseS4KCSAgICAgICAgICAgICAgICAgICAgaW5mby50eXBlID0gJ2xlYXZlQ2hhdFJvb20nOwoJICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5mby5jb2RlID09IDExMCkgewoJICAgICAgICAgICAgICAgICAgICAvLyBsb2dvdXQgb3IgZGlzbWlzc2llZCBieSBhZG1pbi4KCSAgICAgICAgICAgICAgICAgICAgaW5mby50eXBlID0gJ2xlYXZlQ2hhdFJvb20nOwoJICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5mby5lcnJvciAmJiBpbmZvLmVycm9yLmNvZGUgPT0gNDA2KSB7CgkgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBjaGF0IHJvb20gaXMgZnVsbC4KCSAgICAgICAgICAgICAgICAgICAgaW5mby50eXBlID0gJ3JlYWNoQ2hhdFJvb21DYXBhY2l0eSc7CgkgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgfQoJICAgICAgICB9CgkgICAgfSBlbHNlIHsKCSAgICAgICAgaW5mby5wcmVzZW5jZV90eXBlID0gcHJlc2VuY2VfdHlwZTsKCSAgICAgICAgaW5mby5vcmlnaW5hbF90eXBlID0gdHlwZTsKCgkgICAgICAgIGlmICgvc3Vic2NyaWJlLy50ZXN0KGluZm8udHlwZSkpIHsKCSAgICAgICAgICAgIC8vc3Vic2NyaWJlIHwgc3Vic2NyaWJlZCB8IHVuc3Vic2NyaWJlIHwgdW5zdWJzY3JpYmVkCgkgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAiIiAmJiAhaW5mby5zdGF0dXMgJiYgIWluZm8uZXJyb3IgJiYgIWlzQ3JlYXRlICYmICFpc0FwcGx5ICYmICFpc01lbWJlckpvaW4gJiYgIWlzRGVjbGluZSkgewoJICAgICAgICAgICAgLy8gaW5mby50eXBlID0gJ2pvaW5QdWJsaWNHcm91cFN1Y2Nlc3MnOwoJICAgICAgICB9IGVsc2UgaWYgKHByZXNlbmNlX3R5cGUgPT09ICd1bmF2YWlsYWJsZScgfHwgdHlwZSA9PT0gJ3VuYXZhaWxhYmxlJykgewoJICAgICAgICAgICAgLy8gVGhlcmUgaXMgbm8gcm9vbXR5cGUgd2hlbiBhIGNoYXQgcm9vbSBpcyBkZWxldGVkLgoJICAgICAgICAgICAgaWYgKGluZm8uZGVzdHJveSkgewoJICAgICAgICAgICAgICAgIC8vIEdyb3VwIG9yIENoYXQgcm9vbSBEZWxldGVkLgoJICAgICAgICAgICAgICAgIGluZm8udHlwZSA9ICdkZWxldGVHcm91cENoYXQnOwoJICAgICAgICAgICAgfSBlbHNlIGlmIChpbmZvLmNvZGUgPT0gMzA3IHx8IGluZm8uY29kZSA9PSAzMjEpIHsKCSAgICAgICAgICAgICAgICAvLyBEaXNtaXNzZWQgYnkgZ3JvdXAuCgkgICAgICAgICAgICAgICAgdmFyIG5pY2sgPSBtc2dpbmZvLmdldEF0dHJpYnV0ZSgnbmljaycpOwoJICAgICAgICAgICAgICAgIGlmICghbmljaykgaW5mby50eXBlID0gJ2xlYXZlR3JvdXAnO2Vsc2UgaW5mby50eXBlID0gJ3JlbW92ZWRGcm9tR3JvdXAnOwoJICAgICAgICAgICAgfQoJICAgICAgICB9CgkgICAgfQoJICAgIHRoaXMub25QcmVzZW5jZShpbmZvLCBtc2dpbmZvKTsKCX07CgoJLyoqCgkgKiBAcHJpdmF0ZQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5oYW5kbGVQaW5nID0gZnVuY3Rpb24gKGUpIHsKCSAgICBpZiAodGhpcy5pc0Nsb3NlZCgpKSB7CgkgICAgICAgIHJldHVybjsKCSAgICB9CgkgICAgdmFyIGlkID0gZS5nZXRBdHRyaWJ1dGUoJ2lkJyk7CgkgICAgdmFyIGZyb20gPSBlLmdldEF0dHJpYnV0ZSgnZnJvbScpOwoJICAgIHZhciB0byA9IGUuZ2V0QXR0cmlidXRlKCd0bycpOwoJICAgIHZhciBkb20gPSAkaXEoewoJICAgICAgICBmcm9tOiB0bywKCSAgICAgICAgdG86IGZyb20sCgkgICAgICAgIGlkOiBpZCwKCSAgICAgICAgdHlwZTogJ3Jlc3VsdCcKCSAgICB9KTsKCSAgICB0aGlzLnNlbmRDb21tYW5kKGRvbS50cmVlKCkpOwoJfTsKCgkvKioKCSAqIEBwcml2YXRlCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmhhbmRsZUlxID0gZnVuY3Rpb24gKGlxKSB7CgkgICAgcmV0dXJuIHRydWU7Cgl9OwoKCS8qKgoJICogQHByaXZhdGUKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuaGFuZGxlSXFQcml2YWN5ID0gZnVuY3Rpb24gKG1zZ2luZm8pIHsKCSAgICB2YXIgbGlzdCA9IG1zZ2luZm8uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2xpc3QnKTsKCSAgICBpZiAobGlzdC5sZW5ndGggPT0gMCkgewoJICAgICAgICByZXR1cm47CgkgICAgfQoJICAgIHRoaXMuZ2V0QmxhY2tsaXN0KCk7Cgl9OwoKCS8qKgoJICogQHByaXZhdGUKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuaGFuZGxlSXFSb3N0ZXIgPSBmdW5jdGlvbiAoZSkgewoJICAgIHZhciBpZCA9IGUuZ2V0QXR0cmlidXRlKCdpZCcpOwoJICAgIHZhciBmcm9tID0gZS5nZXRBdHRyaWJ1dGUoJ2Zyb20nKSB8fCAnJzsKCSAgICB2YXIgbmFtZSA9IF9wYXJzZU5hbWVGcm9tSmlkRm4oZnJvbSk7CgkgICAgdmFyIGN1ckppZCA9IHRoaXMuY29udGV4dC5qaWQ7CgkgICAgdmFyIGN1clVzZXIgPSB0aGlzLmNvbnRleHQudXNlcklkOwoKCSAgICB2YXIgaXFyZXN1bHQgPSAkaXEoeyB0eXBlOiAncmVzdWx0JywgaWQ6IGlkLCBmcm9tOiBjdXJKaWQgfSk7CgkgICAgdGhpcy5zZW5kQ29tbWFuZChpcXJlc3VsdC50cmVlKCkpOwoKCSAgICB2YXIgbXNnQm9kaWVzID0gZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgncXVlcnknKTsKCSAgICBpZiAobXNnQm9kaWVzICYmIG1zZ0JvZGllcy5sZW5ndGggPiAwKSB7CgkgICAgICAgIHZhciBxdWVyeVRhZyA9IG1zZ0JvZGllc1swXTsKCSAgICAgICAgdmFyIHJvdXN0ZXIgPSBfcGFyc2VGcmllbmQocXVlcnlUYWcsIHRoaXMsIGZyb20pOwoJICAgICAgICB0aGlzLm9uUm9zdGVyKHJvdXN0ZXIpOwoJICAgIH0KCSAgICByZXR1cm4gdHJ1ZTsKCX07CgoJLyoqCgkgKiBAcHJpdmF0ZQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5oYW5kbGVNZXNzYWdlID0gZnVuY3Rpb24gKG1zZ2luZm8pIHsKCSAgICB2YXIgc2VsZiA9IHRoaXM7CgkgICAgaWYgKHRoaXMuaXNDbG9zZWQoKSkgewoJICAgICAgICByZXR1cm47CgkgICAgfQoKCSAgICB2YXIgaWQgPSBtc2dpbmZvLmdldEF0dHJpYnV0ZSgnaWQnKSB8fCAnJzsKCgkgICAgLy8gY2FjaGUgYWNrIGludG8gc2VuZFF1ZXVlIGZpcnN0ICwgaGFuZGVsU2VuZFF1ZXVlIHdpbGwgZG8gdGhlIHNlbmQgdGhpbmcgd2l0aCB0aGUgc3BlZWQgb2YgIDUvcwoJICAgIHRoaXMuY2FjaGVSZWNlaXB0c01lc3NhZ2UoewoJICAgICAgICBpZDogaWQKCSAgICB9KTsKCSAgICB2YXIgcGFyc2VNc2dEYXRhID0gX3BhcnNlUmVzcG9uc2VNZXNzYWdlKG1zZ2luZm8pOwoJICAgIGlmIChwYXJzZU1zZ0RhdGEuZXJyb3JNc2cpIHsKCSAgICAgICAgdGhpcy5oYW5kbGVQcmVzZW5jZShtc2dpbmZvKTsKCSAgICAgICAgcmV0dXJuOwoJICAgIH0KCSAgICAvLyBzZW5kIGVycm9yCgkgICAgdmFyIGVycm9yID0gbXNnaW5mby5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZXJyb3InKTsKCSAgICB2YXIgZXJyb3JDb2RlID0gJyc7CgkgICAgdmFyIGVycm9yVGV4dCA9ICcnOwoJICAgIHZhciBlcnJvckJvb2wgPSBmYWxzZTsKCSAgICBpZiAoZXJyb3IubGVuZ3RoID4gMCkgewoJICAgICAgICBlcnJvckJvb2wgPSB0cnVlOwoJICAgICAgICBlcnJvckNvZGUgPSBlcnJvclswXS5nZXRBdHRyaWJ1dGUoJ2NvZGUnKTsKCSAgICAgICAgdmFyIHRleHRET00gPSBlcnJvclswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGV4dCcpOwoJICAgICAgICBlcnJvclRleHQgPSB0ZXh0RE9NWzBdLnRleHRDb250ZW50IHx8IHRleHRET01bMF0udGV4dDsKCSAgICB9CgoJICAgIHZhciBtc2dEYXRhcyA9IHBhcnNlTXNnRGF0YS5kYXRhOwoJICAgIGZvciAodmFyIGkgaW4gbXNnRGF0YXMpIHsKCSAgICAgICAgaWYgKCFtc2dEYXRhcy5oYXNPd25Qcm9wZXJ0eShpKSkgewoJICAgICAgICAgICAgY29udGludWU7CgkgICAgICAgIH0KCSAgICAgICAgdmFyIG1zZyA9IG1zZ0RhdGFzW2ldOwoJICAgICAgICBpZiAoIW1zZy5mcm9tIHx8ICFtc2cudG8pIHsKCSAgICAgICAgICAgIGNvbnRpbnVlOwoJICAgICAgICB9CgoJICAgICAgICB2YXIgZnJvbSA9IChtc2cuZnJvbSArICcnKS50b0xvd2VyQ2FzZSgpOwoJICAgICAgICB2YXIgdG9vID0gKG1zZy50byArICcnKS50b0xvd2VyQ2FzZSgpOwoJICAgICAgICB2YXIgZXh0bXNnID0gbXNnLmV4dCB8fCB7fTsKCSAgICAgICAgdmFyIGNoYXR0eXBlID0gJyc7CgkgICAgICAgIHZhciB0eXBlRWwgPSBtc2dpbmZvLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdyb29tdHlwZScpOwoJICAgICAgICBpZiAodHlwZUVsLmxlbmd0aCkgewoJICAgICAgICAgICAgY2hhdHR5cGUgPSB0eXBlRWxbMF0uZ2V0QXR0cmlidXRlKCd0eXBlJykgfHwgJ2NoYXQnOwoJICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgY2hhdHR5cGUgPSBtc2dpbmZvLmdldEF0dHJpYnV0ZSgndHlwZScpIHx8ICdjaGF0JzsKCSAgICAgICAgfQoKCSAgICAgICAgdmFyIG1zZ0JvZGllcyA9IG1zZy5ib2RpZXM7CgkgICAgICAgIGlmICghbXNnQm9kaWVzIHx8IG1zZ0JvZGllcy5sZW5ndGggPT0gMCkgewoJICAgICAgICAgICAgY29udGludWU7CgkgICAgICAgIH0KCSAgICAgICAgdmFyIG1zZ0JvZHkgPSBtc2cuYm9kaWVzWzBdOwoJICAgICAgICB2YXIgdHlwZSA9IG1zZ0JvZHkudHlwZTsKCgkgICAgICAgIHRyeSB7CgkgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHsKCSAgICAgICAgICAgICAgICBjYXNlICd0eHQnOgoJICAgICAgICAgICAgICAgICAgICB2YXIgcmVjZWl2ZU1zZyA9IG1zZ0JvZHkubXNnOwoJICAgICAgICAgICAgICAgICAgICB2YXIgc291cmNlTXNnID0gXy5jbG9uZShyZWNlaXZlTXNnKTsKCSAgICAgICAgICAgICAgICAgICAgLyoKCSAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmVuY3J5cHQudHlwZSA9PT0gJ2Jhc2U2NCcpIHsKCSAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVNc2cgPSBhdG9iKHJlY2VpdmVNc2cpOwoJICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxmLmVuY3J5cHQudHlwZSA9PT0gJ2FlcycpIHsKCSAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShzZWxmLmVuY3J5cHQua2V5KTsKCSAgICAgICAgICAgICAgICAgICAgIHZhciBpdiA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHNlbGYuZW5jcnlwdC5pdik7CgkgICAgICAgICAgICAgICAgICAgICB2YXIgbW9kZSA9IHNlbGYuZW5jcnlwdC5tb2RlLnRvTG93ZXJDYXNlKCk7CgkgICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9uID0ge307CgkgICAgICAgICAgICAgICAgICAgICBpZiAobW9kZSA9PT0gJ2NiYycpIHsKCSAgICAgICAgICAgICAgICAgICAgIG9wdGlvbiA9IHsKCSAgICAgICAgICAgICAgICAgICAgIGl2OiBpdiwKCSAgICAgICAgICAgICAgICAgICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuQ0JDLAoJICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogQ3J5cHRvSlMucGFkLlBrY3M3CgkgICAgICAgICAgICAgICAgICAgICB9OwoJICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnZWJjJykgewoJICAgICAgICAgICAgICAgICAgICAgb3B0aW9uID0gewoJICAgICAgICAgICAgICAgICAgICAgbW9kZTogQ3J5cHRvSlMubW9kZS5FQ0IsCgkgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUGtjczcKCSAgICAgICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgICAgICAgICAgIHZhciBlbmNyeXB0ZWRCYXNlNjRTdHIgPSByZWNlaXZlTXNnOwoJICAgICAgICAgICAgICAgICAgICAgdmFyIGRlY3J5cHRlZERhdGEgPSBDcnlwdG9KUy5BRVMuZGVjcnlwdChlbmNyeXB0ZWRCYXNlNjRTdHIsIGtleSwgb3B0aW9uKTsKCSAgICAgICAgICAgICAgICAgICAgIHZhciBkZWNyeXB0ZWRTdHIgPSBkZWNyeXB0ZWREYXRhLnRvU3RyaW5nKENyeXB0b0pTLmVuYy5VdGY4KTsKCSAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVNc2cgPSBkZWNyeXB0ZWRTdHI7CgkgICAgICAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgICAgICAqLwoJICAgICAgICAgICAgICAgICAgICByZWNlaXZlTXNnID0gc2VsZi5kZWNyeXB0KHJlY2VpdmVNc2cpOwoJICAgICAgICAgICAgICAgICAgICB2YXIgZW1vamlib2R5ID0gX3V0aWxzLnBhcnNlVGV4dE1lc3NhZ2UocmVjZWl2ZU1zZywgV2ViSU0uRW1vamkpOwoJICAgICAgICAgICAgICAgICAgICBpZiAoZW1vamlib2R5ICYmIGVtb2ppYm9keS5pc2Vtb2ppKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXNnID0gewoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpZCwKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBjaGF0dHlwZSwKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiBmcm9tLAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOiB0b28sCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk6IHBhcnNlTXNnRGF0YS5kZWxheVRpbWVTdGFtcCwKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBlbW9qaWJvZHkuYm9keSwKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHQ6IGV4dG1zZywKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VNc2c6IHNvdXJjZU1zZwoJICAgICAgICAgICAgICAgICAgICAgICAgfTsKCSAgICAgICAgICAgICAgICAgICAgICAgICFtc2cuZGVsYXkgJiYgZGVsZXRlIG1zZy5kZWxheTsKCSAgICAgICAgICAgICAgICAgICAgICAgIG1zZy5lcnJvciA9IGVycm9yQm9vbDsKCSAgICAgICAgICAgICAgICAgICAgICAgIG1zZy5lcnJvclRleHQgPSBlcnJvclRleHQ7CgkgICAgICAgICAgICAgICAgICAgICAgICBtc2cuZXJyb3JDb2RlID0gZXJyb3JDb2RlOwoJICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkVtb2ppTWVzc2FnZShtc2cpOwoJICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1zZyA9IHsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaWQsCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogY2hhdHR5cGUsCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogZnJvbSwKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogdG9vLAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiBwYXJzZU1zZ0RhdGEuZGVsYXlUaW1lU3RhbXAsCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcmVjZWl2ZU1zZywKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHQ6IGV4dG1zZywKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VNc2c6IHNvdXJjZU1zZwoJICAgICAgICAgICAgICAgICAgICAgICAgfTsKCSAgICAgICAgICAgICAgICAgICAgICAgICFtc2cuZGVsYXkgJiYgZGVsZXRlIG1zZy5kZWxheTsKCSAgICAgICAgICAgICAgICAgICAgICAgIG1zZy5lcnJvciA9IGVycm9yQm9vbDsKCSAgICAgICAgICAgICAgICAgICAgICAgIG1zZy5lcnJvclRleHQgPSBlcnJvclRleHQ7CgkgICAgICAgICAgICAgICAgICAgICAgICBtc2cuZXJyb3JDb2RlID0gZXJyb3JDb2RlOwoJICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblRleHRNZXNzYWdlKG1zZyk7CgkgICAgICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkgICAgICAgICAgICAgICAgY2FzZSAnaW1nJzoKCSAgICAgICAgICAgICAgICAgICAgdmFyIHJ3aWR0aCA9IDA7CgkgICAgICAgICAgICAgICAgICAgIHZhciByaGVpZ2h0ID0gMDsKCSAgICAgICAgICAgICAgICAgICAgaWYgKG1zZ0JvZHkuc2l6ZSkgewoJICAgICAgICAgICAgICAgICAgICAgICAgcndpZHRoID0gbXNnQm9keS5zaXplLndpZHRoOwoJICAgICAgICAgICAgICAgICAgICAgICAgcmhlaWdodCA9IG1zZ0JvZHkuc2l6ZS5oZWlnaHQ7CgkgICAgICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgICAgICAgICAgdmFyIG1zZyA9IHsKCSAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpZCwKCSAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGNoYXR0eXBlLAoJICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogZnJvbSwKCSAgICAgICAgICAgICAgICAgICAgICAgIHRvOiB0b28sCgoJICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBsb2NhdGlvbi5wcm90b2NvbCAhPSAnaHR0cHM6JyAmJiBzZWxmLmlzSHR0cEROUyA/IHNlbGYuYXBpVXJsICsgbXNnQm9keS51cmwuc3Vic3RyKG1zZ0JvZHkudXJsLmluZGV4T2YoIi8iLCA5KSkgOiBtc2dCb2R5LnVybCwKCSAgICAgICAgICAgICAgICAgICAgICAgIHNlY3JldDogbXNnQm9keS5zZWNyZXQsCgkgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogbXNnQm9keS5maWxlbmFtZSwKCSAgICAgICAgICAgICAgICAgICAgICAgIHRodW1iOiBtc2dCb2R5LnRodW1iLAoJICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJfc2VjcmV0OiBtc2dCb2R5LnRodW1iX3NlY3JldCwKCSAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfbGVuZ3RoOiBtc2dCb2R5LmZpbGVfbGVuZ3RoIHx8ICcnLAoJICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHJ3aWR0aCwKCSAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogcmhlaWdodCwKCSAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlOiBtc2dCb2R5LmZpbGV0eXBlIHx8ICcnLAoJICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW46IHRoaXMuY29udGV4dC5hY2Nlc3NUb2tlbiB8fCAnJywKCSAgICAgICAgICAgICAgICAgICAgICAgIGV4dDogZXh0bXNnLAoJICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk6IHBhcnNlTXNnRGF0YS5kZWxheVRpbWVTdGFtcAoJICAgICAgICAgICAgICAgICAgICB9OwoJICAgICAgICAgICAgICAgICAgICAhbXNnLmRlbGF5ICYmIGRlbGV0ZSBtc2cuZGVsYXk7CgkgICAgICAgICAgICAgICAgICAgIG1zZy5lcnJvciA9IGVycm9yQm9vbDsKCSAgICAgICAgICAgICAgICAgICAgbXNnLmVycm9yVGV4dCA9IGVycm9yVGV4dDsKCSAgICAgICAgICAgICAgICAgICAgbXNnLmVycm9yQ29kZSA9IGVycm9yQ29kZTsKCSAgICAgICAgICAgICAgICAgICAgdGhpcy5vblBpY3R1cmVNZXNzYWdlKG1zZyk7CgkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJICAgICAgICAgICAgICAgIGNhc2UgJ2F1ZGlvJzoKCSAgICAgICAgICAgICAgICAgICAgdmFyIG1zZyA9IHsKCSAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpZCwKCSAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGNoYXR0eXBlLAoJICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogZnJvbSwKCSAgICAgICAgICAgICAgICAgICAgICAgIHRvOiB0b28sCgoJICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBsb2NhdGlvbi5wcm90b2NvbCAhPSAnaHR0cHM6JyAmJiBzZWxmLmlzSHR0cEROUyA/IHNlbGYuYXBpVXJsICsgbXNnQm9keS51cmwuc3Vic3RyKG1zZ0JvZHkudXJsLmluZGV4T2YoIi8iLCA5KSkgOiBtc2dCb2R5LnVybCwKCSAgICAgICAgICAgICAgICAgICAgICAgIHNlY3JldDogbXNnQm9keS5zZWNyZXQsCgkgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogbXNnQm9keS5maWxlbmFtZSwKCSAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aDogbXNnQm9keS5sZW5ndGggfHwgJycsCgkgICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2xlbmd0aDogbXNnQm9keS5maWxlX2xlbmd0aCB8fCAnJywKCSAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlOiBtc2dCb2R5LmZpbGV0eXBlIHx8ICcnLAoJICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW46IHRoaXMuY29udGV4dC5hY2Nlc3NUb2tlbiB8fCAnJywKCSAgICAgICAgICAgICAgICAgICAgICAgIGV4dDogZXh0bXNnLAoJICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk6IHBhcnNlTXNnRGF0YS5kZWxheVRpbWVTdGFtcAoJICAgICAgICAgICAgICAgICAgICB9OwoJICAgICAgICAgICAgICAgICAgICAhbXNnLmRlbGF5ICYmIGRlbGV0ZSBtc2cuZGVsYXk7CgkgICAgICAgICAgICAgICAgICAgIG1zZy5lcnJvciA9IGVycm9yQm9vbDsKCSAgICAgICAgICAgICAgICAgICAgbXNnLmVycm9yVGV4dCA9IGVycm9yVGV4dDsKCSAgICAgICAgICAgICAgICAgICAgbXNnLmVycm9yQ29kZSA9IGVycm9yQ29kZTsKCSAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkF1ZGlvTWVzc2FnZShtc2cpOwoJICAgICAgICAgICAgICAgICAgICBicmVhazsKCSAgICAgICAgICAgICAgICBjYXNlICdmaWxlJzoKCSAgICAgICAgICAgICAgICAgICAgdmFyIG1zZyA9IHsKCSAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpZCwKCSAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGNoYXR0eXBlLAoJICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogZnJvbSwKCSAgICAgICAgICAgICAgICAgICAgICAgIHRvOiB0b28sCgoJICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBsb2NhdGlvbi5wcm90b2NvbCAhPSAnaHR0cHM6JyAmJiBzZWxmLmlzSHR0cEROUyA/IHNlbGYuYXBpVXJsICsgbXNnQm9keS51cmwuc3Vic3RyKG1zZ0JvZHkudXJsLmluZGV4T2YoIi8iLCA5KSkgOiBtc2dCb2R5LnVybCwKCSAgICAgICAgICAgICAgICAgICAgICAgIHNlY3JldDogbXNnQm9keS5zZWNyZXQsCgkgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogbXNnQm9keS5maWxlbmFtZSwKCSAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfbGVuZ3RoOiBtc2dCb2R5LmZpbGVfbGVuZ3RoLAoJICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW46IHRoaXMuY29udGV4dC5hY2Nlc3NUb2tlbiB8fCAnJywKCSAgICAgICAgICAgICAgICAgICAgICAgIGV4dDogZXh0bXNnLAoJICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk6IHBhcnNlTXNnRGF0YS5kZWxheVRpbWVTdGFtcAoJICAgICAgICAgICAgICAgICAgICB9OwoJICAgICAgICAgICAgICAgICAgICAhbXNnLmRlbGF5ICYmIGRlbGV0ZSBtc2cuZGVsYXk7CgkgICAgICAgICAgICAgICAgICAgIG1zZy5lcnJvciA9IGVycm9yQm9vbDsKCSAgICAgICAgICAgICAgICAgICAgbXNnLmVycm9yVGV4dCA9IGVycm9yVGV4dDsKCSAgICAgICAgICAgICAgICAgICAgbXNnLmVycm9yQ29kZSA9IGVycm9yQ29kZTsKCSAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkZpbGVNZXNzYWdlKG1zZyk7CgkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJICAgICAgICAgICAgICAgIGNhc2UgJ2xvYyc6CgkgICAgICAgICAgICAgICAgICAgIHZhciBtc2cgPSB7CgkgICAgICAgICAgICAgICAgICAgICAgICBpZDogaWQsCgkgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBjaGF0dHlwZSwKCSAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IGZyb20sCgkgICAgICAgICAgICAgICAgICAgICAgICB0bzogdG9vLAoJICAgICAgICAgICAgICAgICAgICAgICAgYWRkcjogbXNnQm9keS5hZGRyLAoJICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBtc2dCb2R5LmxhdCwKCSAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogbXNnQm9keS5sbmcsCgkgICAgICAgICAgICAgICAgICAgICAgICBleHQ6IGV4dG1zZywKCSAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiBwYXJzZU1zZ0RhdGEuZGVsYXlUaW1lU3RhbXAKCSAgICAgICAgICAgICAgICAgICAgfTsKCSAgICAgICAgICAgICAgICAgICAgIW1zZy5kZWxheSAmJiBkZWxldGUgbXNnLmRlbGF5OwoJICAgICAgICAgICAgICAgICAgICBtc2cuZXJyb3IgPSBlcnJvckJvb2w7CgkgICAgICAgICAgICAgICAgICAgIG1zZy5lcnJvclRleHQgPSBlcnJvclRleHQ7CgkgICAgICAgICAgICAgICAgICAgIG1zZy5lcnJvckNvZGUgPSBlcnJvckNvZGU7CgkgICAgICAgICAgICAgICAgICAgIHRoaXMub25Mb2NhdGlvbk1lc3NhZ2UobXNnKTsKCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkgICAgICAgICAgICAgICAgY2FzZSAndmlkZW8nOgoJICAgICAgICAgICAgICAgICAgICB2YXIgbXNnID0gewoJICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGlkLAoJICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogY2hhdHR5cGUsCgkgICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiBmcm9tLAoJICAgICAgICAgICAgICAgICAgICAgICAgdG86IHRvbywKCgkgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGxvY2F0aW9uLnByb3RvY29sICE9ICdodHRwczonICYmIHNlbGYuaXNIdHRwRE5TID8gc2VsZi5hcGlVcmwgKyBtc2dCb2R5LnVybC5zdWJzdHIobXNnQm9keS51cmwuaW5kZXhPZigiLyIsIDkpKSA6IG1zZ0JvZHkudXJsLAoJICAgICAgICAgICAgICAgICAgICAgICAgc2VjcmV0OiBtc2dCb2R5LnNlY3JldCwKCSAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBtc2dCb2R5LmZpbGVuYW1lLAoJICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9sZW5ndGg6IG1zZ0JvZHkuZmlsZV9sZW5ndGgsCgkgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbjogdGhpcy5jb250ZXh0LmFjY2Vzc1Rva2VuIHx8ICcnLAoJICAgICAgICAgICAgICAgICAgICAgICAgZXh0OiBleHRtc2csCgkgICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogcGFyc2VNc2dEYXRhLmRlbGF5VGltZVN0YW1wCgkgICAgICAgICAgICAgICAgICAgIH07CgkgICAgICAgICAgICAgICAgICAgICFtc2cuZGVsYXkgJiYgZGVsZXRlIG1zZy5kZWxheTsKCSAgICAgICAgICAgICAgICAgICAgbXNnLmVycm9yID0gZXJyb3JCb29sOwoJICAgICAgICAgICAgICAgICAgICBtc2cuZXJyb3JUZXh0ID0gZXJyb3JUZXh0OwoJICAgICAgICAgICAgICAgICAgICBtc2cuZXJyb3JDb2RlID0gZXJyb3JDb2RlOwoJICAgICAgICAgICAgICAgICAgICB0aGlzLm9uVmlkZW9NZXNzYWdlKG1zZyk7CgkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJICAgICAgICAgICAgICAgIGNhc2UgJ2NtZCc6CgkgICAgICAgICAgICAgICAgICAgIHZhciBtc2cgPSB7CgkgICAgICAgICAgICAgICAgICAgICAgICBpZDogaWQsCgkgICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiBmcm9tLAoJICAgICAgICAgICAgICAgICAgICAgICAgdG86IHRvbywKCSAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogbXNnQm9keS5hY3Rpb24sCgkgICAgICAgICAgICAgICAgICAgICAgICBleHQ6IGV4dG1zZywKCSAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiBwYXJzZU1zZ0RhdGEuZGVsYXlUaW1lU3RhbXAKCSAgICAgICAgICAgICAgICAgICAgfTsKCSAgICAgICAgICAgICAgICAgICAgIW1zZy5kZWxheSAmJiBkZWxldGUgbXNnLmRlbGF5OwoJICAgICAgICAgICAgICAgICAgICBtc2cuZXJyb3IgPSBlcnJvckJvb2w7CgkgICAgICAgICAgICAgICAgICAgIG1zZy5lcnJvclRleHQgPSBlcnJvclRleHQ7CgkgICAgICAgICAgICAgICAgICAgIG1zZy5lcnJvckNvZGUgPSBlcnJvckNvZGU7CgkgICAgICAgICAgICAgICAgICAgIHRoaXMub25DbWRNZXNzYWdlKG1zZyk7CgkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgOwoJICAgICAgICAgICAgaWYgKHNlbGYuZGVsaXZlcnkpIHsKCSAgICAgICAgICAgICAgICB2YXIgbXNnSWQgPSBzZWxmLmdldFVuaXF1ZUlkKCk7CgkgICAgICAgICAgICAgICAgdmFyIGJvZHlJZCA9IG1zZy5pZDsKCSAgICAgICAgICAgICAgICB2YXIgZGVsaXZlck1lc3NhZ2UgPSBuZXcgV2ViSU0ubWVzc2FnZSgnZGVsaXZlcnknLCBtc2dJZCk7CgkgICAgICAgICAgICAgICAgZGVsaXZlck1lc3NhZ2Uuc2V0KHsKCSAgICAgICAgICAgICAgICAgICAgaWQ6IGJvZHlJZCwKCSAgICAgICAgICAgICAgICAgICAgdG86IG1zZy5mcm9tCgkgICAgICAgICAgICAgICAgfSk7CgkgICAgICAgICAgICAgICAgc2VsZi5zZW5kKGRlbGl2ZXJNZXNzYWdlLmJvZHkpOwoJICAgICAgICAgICAgfQoJICAgICAgICB9IGNhdGNoIChlKSB7CgkgICAgICAgICAgICB0aGlzLm9uRXJyb3IoewoJICAgICAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0NPTk5DVElPTl9DQUxMQkFDS19JTk5FUl9FUlJPUiwKCSAgICAgICAgICAgICAgICBkYXRhOiBlCgkgICAgICAgICAgICB9KTsKCSAgICAgICAgfQoJICAgIH0KCX07CgoJLyoqCgkgKiBAcHJpdmF0ZQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5oYW5kbGVEZWxpdmVyZWRNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHsKCSAgICB2YXIgaWQgPSBtZXNzYWdlLmlkOwoJICAgIHZhciBib2R5ID0gbWVzc2FnZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpOwoJICAgIHZhciBtaWQgPSAwOwoJICAgIG1pZCA9IGJvZHlbMF0uaW5uZXJIVE1MOwoJICAgIHZhciBtc2cgPSB7CgkgICAgICAgIG1pZDogbWlkCgkgICAgfTsKCSAgICB0aGlzLm9uRGVsaXZlcmRNZXNzYWdlKG1zZyk7CgkgICAgdGhpcy5zZW5kUmVjZWlwdHNNZXNzYWdlKHsKCSAgICAgICAgaWQ6IGlkCgkgICAgfSk7Cgl9OwoKCS8qKgoJICogQHByaXZhdGUKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuaGFuZGxlQWNrZWRNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHsKCSAgICB2YXIgaWQgPSBtZXNzYWdlLmlkOwoJICAgIHZhciBib2R5ID0gbWVzc2FnZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpOwoJICAgIHZhciBtaWQgPSAwOwoJICAgIG1pZCA9IGJvZHlbMF0uaW5uZXJIVE1MOwoJICAgIHZhciBtc2cgPSB7CgkgICAgICAgIG1pZDogbWlkCgkgICAgfTsKCSAgICB0aGlzLm9uUmVhZE1lc3NhZ2UobXNnKTsKCSAgICB0aGlzLnNlbmRSZWNlaXB0c01lc3NhZ2UoewoJICAgICAgICBpZDogaWQKCSAgICB9KTsKCX07CgoJLyoqCgkgKiBAcHJpdmF0ZQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5oYW5kbGVSZWNlaXZlZE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkgewoJICAgIHRyeSB7CgkgICAgICAgIHZhciByZWNlaXZlZCA9IG1lc3NhZ2UuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInJlY2VpdmVkIik7CgkgICAgICAgIHZhciBtaWQgPSByZWNlaXZlZFswXS5nZXRBdHRyaWJ1dGUoJ21pZCcpOwoJICAgICAgICB2YXIgYm9keSA9IG1lc3NhZ2UuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImJvZHkiKTsKCSAgICAgICAgdmFyIGlkID0gYm9keVswXS5pbm5lckhUTUw7CgkgICAgICAgIHZhciBtc2cgPSB7CgkgICAgICAgICAgICBtaWQ6IG1pZCwKCSAgICAgICAgICAgIGlkOiBpZAoJICAgICAgICB9OwoJICAgICAgICB0aGlzLm9uUmVjZWl2ZWRNZXNzYWdlKG1zZyk7CgkgICAgfSBjYXRjaCAoZSkgewoJICAgICAgICB0aGlzLm9uRXJyb3IoewoJICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX0NBTExCQUNLX0lOTkVSX0VSUk9SLAoJICAgICAgICAgICAgZGF0YTogZQoJICAgICAgICB9KTsKCSAgICB9CgoJICAgIHZhciByY3YgPSBtZXNzYWdlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdyZWNlaXZlZCcpLAoJICAgICAgICBpZCwKCSAgICAgICAgbWlkOwoKCSAgICBpZiAocmN2Lmxlbmd0aCA+IDApIHsKCSAgICAgICAgaWYgKHJjdlswXS5jaGlsZE5vZGVzICYmIHJjdlswXS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHsKCSAgICAgICAgICAgIGlkID0gcmN2WzBdLmNoaWxkTm9kZXNbMF0ubm9kZVZhbHVlOwoJICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgaWQgPSByY3ZbMF0uaW5uZXJIVE1MIHx8IHJjdlswXS5pbm5lclRleHQ7CgkgICAgICAgIH0KCSAgICAgICAgbWlkID0gcmN2WzBdLmdldEF0dHJpYnV0ZSgnbWlkJyk7CgkgICAgfQoKCSAgICBpZiAoX21zZ0hhc2hbaWRdKSB7CgkgICAgICAgIHRyeSB7CgkgICAgICAgICAgICBfbXNnSGFzaFtpZF0ubXNnLnN1Y2Nlc3MgaW5zdGFuY2VvZiBGdW5jdGlvbiAmJiBfbXNnSGFzaFtpZF0ubXNnLnN1Y2Nlc3MoaWQsIG1pZCk7CgkgICAgICAgIH0gY2F0Y2ggKGUpIHsKCSAgICAgICAgICAgIHRoaXMub25FcnJvcih7CgkgICAgICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX0NBTExCQUNLX0lOTkVSX0VSUk9SLAoJICAgICAgICAgICAgICAgIGRhdGE6IGUKCSAgICAgICAgICAgIH0pOwoJICAgICAgICB9CgkgICAgICAgIGRlbGV0ZSBfbXNnSGFzaFtpZF07CgkgICAgfQoJfTsKCgkvKioKCSAqIEBwcml2YXRlCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmhhbmRsZUludml0ZU1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkgewoJICAgIHZhciBmb3JtID0gbnVsbDsKCSAgICB2YXIgaW52aXRlbXNnID0gbWVzc2FnZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW52aXRlJyk7CgkgICAgdmFyIHJlYXNvbkRvbSA9IG1lc3NhZ2UuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3JlYXNvbicpWzBdOwoJICAgIHZhciByZWFzb25Nc2cgPSByZWFzb25Eb20udGV4dENvbnRlbnQ7CgkgICAgdmFyIGlkID0gbWVzc2FnZS5nZXRBdHRyaWJ1dGUoJ2lkJykgfHwgJyc7CgkgICAgdGhpcy5zZW5kUmVjZWlwdHNNZXNzYWdlKHsKCSAgICAgICAgaWQ6IGlkCgkgICAgfSk7CgoJICAgIGlmIChpbnZpdGVtc2cgJiYgaW52aXRlbXNnLmxlbmd0aCA+IDApIHsKCSAgICAgICAgdmFyIGZyb21KaWQgPSBpbnZpdGVtc2dbMF0uZ2V0QXR0cmlidXRlKCdmcm9tJyk7CgkgICAgICAgIGZvcm0gPSBfcGFyc2VOYW1lRnJvbUppZEZuKGZyb21KaWQpOwoJICAgIH0KCSAgICB2YXIgeG1zZyA9IG1lc3NhZ2UuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3gnKTsKCSAgICB2YXIgcm9vbWlkID0gbnVsbDsKCSAgICBpZiAoeG1zZyAmJiB4bXNnLmxlbmd0aCA+IDApIHsKCSAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4bXNnLmxlbmd0aDsgaSsrKSB7CgkgICAgICAgICAgICBpZiAoJ2phYmJlcjp4OmNvbmZlcmVuY2UnID09PSB4bXNnW2ldLm5hbWVzcGFjZVVSSSkgewoJICAgICAgICAgICAgICAgIHZhciByb29tamlkID0geG1zZ1tpXS5nZXRBdHRyaWJ1dGUoJ2ppZCcpOwoJICAgICAgICAgICAgICAgIHJvb21pZCA9IF9wYXJzZU5hbWVGcm9tSmlkRm4ocm9vbWppZCk7CgkgICAgICAgICAgICB9CgkgICAgICAgIH0KCSAgICB9CgkgICAgdGhpcy5vbkludml0ZU1lc3NhZ2UoewoJICAgICAgICB0eXBlOiAnaW52aXRlJywKCSAgICAgICAgZnJvbTogZm9ybSwKCSAgICAgICAgcm9vbWlkOiByb29taWQsCgkgICAgICAgIHJlYXNvbjogcmVhc29uTXNnCgkgICAgfSk7Cgl9OwoKCS8qKgoJICogQHByaXZhdGUKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuaGFuZGxlTXV0ZWRNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHsKCSAgICB2YXIgaWQgPSBtZXNzYWdlLmlkOwoJICAgIHRoaXMub25NdXRlZE1lc3NhZ2UoewoJICAgICAgICBtaWQ6IGlkCgkgICAgfSk7Cgl9OwoKCS8qKgoJICogQHByaXZhdGUKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZENvbW1hbmQgPSBmdW5jdGlvbiAoZG9tLCBpZCkgewoJICAgIGlmICh0aGlzLmlzT3BlbmVkKCkpIHsKCSAgICAgICAgdGhpcy5jb250ZXh0LnN0cm9waGVDb25uLnNlbmQoZG9tKTsKCSAgICB9IGVsc2UgewoJICAgICAgICB0aGlzLnVuU2VuZE1zZ0Fyci5wdXNoKGRvbSk7CgkgICAgICAgIGlmICghdGhpcy5vZmZMaW5lU2VuZENvbm5lY3RpbmcgJiYgIXRoaXMubG9nT3V0KSB7CgkgICAgICAgICAgICB0aGlzLm9mZkxpbmVTZW5kQ29ubmVjdGluZyA9IHRydWU7CgkgICAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpOwoJICAgICAgICB9CgkgICAgICAgIHRoaXMub25FcnJvcih7CgkgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9DT05OQ1RJT05fRElTQ09OTkVDVEVELAoJICAgICAgICAgICAgcmVjb25uZWN0OiB0cnVlCgkgICAgICAgIH0pOwoJICAgIH0KCX07CgoJLyoqCgkgKiDpmo/mnLrnlJ/miJDkuIDkuKppZOeUqOS6jua2iOaBr2lkCgkgKiBAcGFyYW0ge1N0cmluZ30gW3ByZWZpeD1XRUJJTV9dIC0g5YmN57yACgkgKiBAcmV0dXJucyB7U3RyaW5nfSDllK/kuIDnmoRpZAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5nZXRVbmlxdWVJZCA9IGZ1bmN0aW9uIChwcmVmaXgpIHsKCSAgICAvLyBmaXg6IHRvbyBmcmVxdWVudGx5IG1zZyBzZW5kaW5nIHdpbGwgbWFrZSBzYW1lIGlkCgkgICAgaWYgKHRoaXMuYXV0b0luY3JlbWVudCkgewoJICAgICAgICB0aGlzLmF1dG9JbmNyZW1lbnQrKzsKCSAgICB9IGVsc2UgewoJICAgICAgICB0aGlzLmF1dG9JbmNyZW1lbnQgPSAxOwoJICAgIH0KCSAgICB2YXIgY2RhdGUgPSBuZXcgRGF0ZSgpOwoJICAgIHZhciBvZmZkYXRlID0gbmV3IERhdGUoMjAxMCwgMSwgMSk7CgkgICAgdmFyIG9mZnNldCA9IGNkYXRlLmdldFRpbWUoKSAtIG9mZmRhdGUuZ2V0VGltZSgpOwoJICAgIHZhciBoZXhkID0gcGFyc2VGbG9hdChvZmZzZXQpLnRvU3RyaW5nKDE2KSArIHRoaXMuYXV0b0luY3JlbWVudDsKCgkgICAgaWYgKHR5cGVvZiBwcmVmaXggPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBwcmVmaXggPT09ICdudW1iZXInKSB7CgkgICAgICAgIHJldHVybiBwcmVmaXggKyAnXycgKyBoZXhkOwoJICAgIH0gZWxzZSB7CgkgICAgICAgIHJldHVybiAnV0VCSU1fJyArIGhleGQ7CgkgICAgfQoJfTsKCgkvKioKCSAqIHNlbmQgbWVzc2FnZQoJICogQHBhcmFtIHtPYmplY3R9IG1lc3NhZ2VTb3VyY2UgLSDnlLEgQ2xhc3MgTWVzc2FnZSDnlJ/miJAKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChtZXNzYWdlU291cmNlKSB7CgkgICAgdmFyIHNlbGYgPSB0aGlzOwoJICAgIHZhciBtZXNzYWdlID0gbWVzc2FnZVNvdXJjZTsKCSAgICBpZiAobWVzc2FnZS50eXBlID09PSAndHh0JykgewoJICAgICAgICBpZiAodGhpcy5lbmNyeXB0LnR5cGUgPT09ICdiYXNlNjQnKSB7CgkgICAgICAgICAgICBtZXNzYWdlID0gXy5jbG9uZShtZXNzYWdlU291cmNlKTsKCSAgICAgICAgICAgIG1lc3NhZ2UubXNnID0gYnRvYShtZXNzYWdlLm1zZyk7CgkgICAgICAgIH0gZWxzZSBpZiAodGhpcy5lbmNyeXB0LnR5cGUgPT09ICdhZXMnKSB7CgkgICAgICAgICAgICBtZXNzYWdlID0gXy5jbG9uZShtZXNzYWdlU291cmNlKTsKCSAgICAgICAgICAgIHZhciBrZXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZSh0aGlzLmVuY3J5cHQua2V5KTsKCSAgICAgICAgICAgIHZhciBpdiA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHRoaXMuZW5jcnlwdC5pdik7CgkgICAgICAgICAgICB2YXIgbW9kZSA9IHRoaXMuZW5jcnlwdC5tb2RlLnRvTG93ZXJDYXNlKCk7CgkgICAgICAgICAgICB2YXIgb3B0aW9uID0ge307CgkgICAgICAgICAgICBpZiAobW9kZSA9PT0gJ2NiYycpIHsKCSAgICAgICAgICAgICAgICBvcHRpb24gPSB7CgkgICAgICAgICAgICAgICAgICAgIGl2OiBpdiwKCSAgICAgICAgICAgICAgICAgICAgbW9kZTogQ3J5cHRvSlMubW9kZS5DQkMsCgkgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5Qa2NzNwoJICAgICAgICAgICAgICAgIH07CgkgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdlYmMnKSB7CgkgICAgICAgICAgICAgICAgb3B0aW9uID0gewoJICAgICAgICAgICAgICAgICAgICBtb2RlOiBDcnlwdG9KUy5tb2RlLkVDQiwKCSAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogQ3J5cHRvSlMucGFkLlBrY3M3CgkgICAgICAgICAgICAgICAgfTsKCSAgICAgICAgICAgIH0KCSAgICAgICAgICAgIHZhciBlbmNyeXB0ZWREYXRhID0gQ3J5cHRvSlMuQUVTLmVuY3J5cHQobWVzc2FnZS5tc2csIGtleSwgb3B0aW9uKTsKCgkgICAgICAgICAgICBtZXNzYWdlLm1zZyA9IGVuY3J5cHRlZERhdGEudG9TdHJpbmcoKTsKCSAgICAgICAgfQoJICAgIH0KCSAgICBpZiAodGhpcy5pc1dpbmRvd1NESykgewoJICAgICAgICBXZWJJTS5kb1F1ZXJ5KCd7InR5cGUiOiJzZW5kTWVzc2FnZSIsInRvIjoiJyArIG1lc3NhZ2UudG8gKyAnIiwibWVzc2FnZV90eXBlIjoiJyArIG1lc3NhZ2UudHlwZSArICciLCJtc2ciOiInICsgZW5jb2RlVVJJKG1lc3NhZ2UubXNnKSArICciLCJjaGF0VHlwZSI6IicgKyBtZXNzYWdlLmNoYXRUeXBlICsgJyJ9JywgZnVuY3Rpb24gKHJlc3BvbnNlKSB7fSwgZnVuY3Rpb24gKGNvZGUsIG1zZykgewoJICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSB7CgkgICAgICAgICAgICAgICAgZGF0YTogewoJICAgICAgICAgICAgICAgICAgICBkYXRhOiAic2VuZCIKCSAgICAgICAgICAgICAgICB9LAoJICAgICAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX01FU1NBR0VfU0VEX0VSUk9SCgkgICAgICAgICAgICB9OwoJICAgICAgICAgICAgc2VsZi5vbkVycm9yKG1lc3NhZ2UpOwoJICAgICAgICB9KTsKCSAgICB9IGVsc2UgewoJICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG1lc3NhZ2UpID09PSAnW29iamVjdCBPYmplY3RdJykgewoJICAgICAgICAgICAgdmFyIGFwcEtleSA9IHRoaXMuY29udGV4dC5hcHBLZXkgfHwgJyc7CgkgICAgICAgICAgICB2YXIgdG9KaWQgPSBhcHBLZXkgKyAnXycgKyBtZXNzYWdlLnRvICsgJ0AnICsgdGhpcy5kb21haW47CgoJICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZ3JvdXApIHsKCSAgICAgICAgICAgICAgICB0b0ppZCA9IGFwcEtleSArICdfJyArIG1lc3NhZ2UudG8gKyAnQGNvbmZlcmVuY2UuJyArIHRoaXMuZG9tYWluOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgaWYgKG1lc3NhZ2UucmVzb3VyY2UpIHsKCSAgICAgICAgICAgICAgICB0b0ppZCA9IHRvSmlkICsgJy8nICsgbWVzc2FnZS5yZXNvdXJjZTsKCSAgICAgICAgICAgIH0KCgkgICAgICAgICAgICBtZXNzYWdlLnRvSmlkID0gdG9KaWQ7CgkgICAgICAgICAgICBtZXNzYWdlLmlkID0gbWVzc2FnZS5pZCB8fCB0aGlzLmdldFVuaXF1ZUlkKCk7CgkgICAgICAgICAgICBfbXNnSGFzaFttZXNzYWdlLmlkXSA9IG5ldyBfbWVzc2FnZShtZXNzYWdlKTsKCSAgICAgICAgICAgIF9tc2dIYXNoW21lc3NhZ2UuaWRdLnNlbmQodGhpcyk7CgkgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7CgkgICAgICAgICAgICBfbXNnSGFzaFttZXNzYWdlXSAmJiBfbXNnSGFzaFttZXNzYWdlXS5zZW5kKHRoaXMpOwoJICAgICAgICB9CgkgICAgfQoJfTsKCgkvKioKCSAqIOa3u+WKoOiBlOezu+S6uu+8jOW3suW6n+W8g+S4jeeUqAoJICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKCSAqIEBkZXByZWNhdGVkCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFJvc3RlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CgkgICAgdmFyIGppZCA9IF9nZXRKaWQob3B0aW9ucywgdGhpcyk7CgkgICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgJyc7CgkgICAgdmFyIGdyb3VwcyA9IG9wdGlvbnMuZ3JvdXBzIHx8ICcnOwoKCSAgICB2YXIgaXEgPSAkaXEoeyB0eXBlOiAnc2V0JyB9KTsKCSAgICBpcS5jKCdxdWVyeScsIHsgeG1sbnM6ICdqYWJiZXI6aXE6cm9zdGVyJyB9KTsKCSAgICBpcS5jKCdpdGVtJywgeyBqaWQ6IGppZCwgbmFtZTogbmFtZSB9KTsKCgkgICAgaWYgKGdyb3VwcykgewoJICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykgewoJICAgICAgICAgICAgaXEuYygnZ3JvdXAnKS50KGdyb3Vwc1tpXSkudXAoKTsKCSAgICAgICAgfQoJICAgIH0KCSAgICB2YXIgc3VjID0gb3B0aW9ucy5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHZhciBlcnJvciA9IG9wdGlvbnMuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdGhpcy5jb250ZXh0LnN0cm9waGVDb25uLnNlbmRJUShpcS50cmVlKCksIHN1YywgZXJyb3IpOwoJfTsKCgkvKioKCSAqIOWIoOmZpOiBlOezu+S6ugoJICoKCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zCgkgKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy50byAtIOaDs+imgeWIoOmZpOeahOiBlOezu+S6uklECgkgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLnN1Y2Nlc3MgLSDmiJDlip/lm57osIPvvIzlnKjov5nph4zpnaLosIPnlKhjb25uZWN0aW9uLnVuc3Vic2NyaWJlZOaJjeiDveecn+ato+WIoOmZpOiBlOezu+S6ugoJICogQGZpcmVzIGNvbm5lY3Rpb24jdW5zdWJzY3JpYmVkCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVJvc3RlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CgkgICAgdmFyIGppZCA9IF9nZXRKaWQob3B0aW9ucywgdGhpcyk7CgkgICAgdmFyIGlxID0gJGlxKHsgdHlwZTogJ3NldCcgfSkuYygncXVlcnknLCB7IHhtbG5zOiAnamFiYmVyOmlxOnJvc3RlcicgfSkuYygnaXRlbScsIHsKCSAgICAgICAgamlkOiBqaWQsCgkgICAgICAgIHN1YnNjcmlwdGlvbjogJ3JlbW92ZScKCSAgICB9KTsKCgkgICAgdmFyIHN1YyA9IG9wdGlvbnMuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB2YXIgZXJyb3IgPSBvcHRpb25zLmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHRoaXMuY29udGV4dC5zdHJvcGhlQ29ubi5zZW5kSVEoaXEsIHN1YywgZXJyb3IpOwoJfTsKCgkvKioKCSAqIOiOt+WPluiBlOezu+S6ugoJICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKCSAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbnMuc3VjY2VzcyAtIOiOt+WPluWlveWPi+WIl+ihqOaIkOWKnwoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5nZXRSb3N0ZXIgPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIHZhciBkb20gPSAkaXEoewoJICAgICAgICB0eXBlOiAnZ2V0JwoJICAgIH0pLmMoJ3F1ZXJ5JywgeyB4bWxuczogJ2phYmJlcjppcTpyb3N0ZXInIH0pOwoKCSAgICB2YXIgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgkgICAgdmFyIHN1YyA9IG9wdGlvbnMuc3VjY2VzcyB8fCB0aGlzLm9uUm9zdGVyOwoJICAgIHZhciBjb21wbGV0ZUZuID0gZnVuY3Rpb24gY29tcGxldGVGbihlbGUpIHsKCSAgICAgICAgdmFyIHJvdXN0ZXIgPSBbXTsKCSAgICAgICAgdmFyIG1zZ0JvZGllcyA9IGVsZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgncXVlcnknKTsKCSAgICAgICAgaWYgKG1zZ0JvZGllcyAmJiBtc2dCb2RpZXMubGVuZ3RoID4gMCkgewoJICAgICAgICAgICAgdmFyIHF1ZXJ5VGFnID0gbXNnQm9kaWVzWzBdOwoJICAgICAgICAgICAgcm91c3RlciA9IF9wYXJzZUZyaWVuZChxdWVyeVRhZyk7CgkgICAgICAgIH0KCSAgICAgICAgc3VjKHJvdXN0ZXIsIGVsZSk7CgkgICAgfTsKCSAgICB2YXIgZXJyb3IgPSBvcHRpb25zLmVycm9yIHx8IHRoaXMub25FcnJvcjsKCSAgICB2YXIgZmFpbEZuID0gZnVuY3Rpb24gZmFpbEZuKGVsZSkgewoJICAgICAgICBlcnJvcih7CgkgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9DT05OQ1RJT05fR0VUUk9TVEVSX0VSUk9SLAoJICAgICAgICAgICAgZGF0YTogZWxlCgkgICAgICAgIH0pOwoJICAgIH07CgkgICAgaWYgKHRoaXMuaXNPcGVuZWQoKSkgewoJICAgICAgICB0aGlzLmNvbnRleHQuc3Ryb3BoZUNvbm4uc2VuZElRKGRvbS50cmVlKCksIGNvbXBsZXRlRm4sIGZhaWxGbik7CgkgICAgfSBlbHNlIHsKCSAgICAgICAgZXJyb3IoewoJICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX0RJU0NPTk5FQ1RFRAoJICAgICAgICB9KTsKCSAgICB9Cgl9OwoKCS8qKgoJICog6K6i6ZiF5ZKM5Y+N5ZCR6K6i6ZiFCgkgKiBAZXhhbXBsZQoJICoKCSAqIEHorqLpmIVC77yIQea3u+WKoELkuLrlpb3lj4vvvIkKCSAqIEHmiafooYzvvJoKCSAqICBjb25uLnN1YnNjcmliZSh7CgkgICAgICAgICAgICAgICAgdG86ICdCJywKCSAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSGVsbG9+JwoJICAgICAgICAgICAgfSk7CgkgQueahOebkeWQrOWHveaVsG9uUHJlc2VuY2Xlj4LmlbBtZXNzYWdlLnR5cGUgPT0gc3Vic2NyaWJl55uR5ZCs5Yiw5pyJ5Lq66K6i6ZiF5LuWCgkgQuaJp+ihjO+8mgoJIGNvbm4uc3Vic2NyaWJlZCh7CgkgICAgICAgICAgICAgICAgdG86ICdBJywKCSAgICAgICAgICAgICAgICBtZXNzYWdlOiAnW3Jlc3A6dHJ1ZV0nCgkgICAgICAgICAgfSk7Cgkg5ZCM5oSPQeeahOiuoumYheivt+axggoJIELnu6fnu63miafooYzvvJoKCSBjb25uLnN1YnNjcmliZSh7CgkgICAgICAgICAgICAgICAgdG86ICdBJywKCSAgICAgICAgICAgICAgICBtZXNzYWdlOiAnW3Jlc3A6dHJ1ZV0nCgkgICAgICAgICAgICB9KTsKCSDlj43lkJHorqLpmIVB77yM6L+Z5qC35omN566X5Y+M5pa55re75Yqg5aW95Y+L5oiQ5Yqf44CCCgkg6IulQuaLkue7nUHnmoTorqLpmIXor7fmsYLvvIzlj6rpnIDmiafooYzvvJoKCSBjb25uLnVuc3Vic2NyaWJlZCh7CgkgICAgICAgICAgICAgICAgICAgICAgICB0bzogJ0EnLAoJICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0kgZG9uJ3Qgd2FudCB0byBiZSBzdWJzY3JpYmVkJwoJICAgICAgICAgICAgICAgICAgICB9KTsKCSDlj6blpJbvvIzlnKjnm5HlkKzlh73mlbBvblByZXNlbmNl5Y+C5pWwbWVzc2FnZS50eXBlID09ICJzdWJzY3JpYmUi6L+Z5LiqY2FzZeS4re+8jOWKoOS4gOWPpQoJIGlmIChtZXNzYWdlICYmIG1lc3NhZ2Uuc3RhdHVzID09PSAnW3Jlc3A6dHJ1ZV0nKSB7CgkgICAgICAgICAgICByZXR1cm47CgkgICAgICAgIH0KCSDlkKbliJnkvJrov5vlhaXmrbvlvqrnjq8KCSAqCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIOaDs+imgeiuoumYheeahOiBlOezu+S6uuS/oeaBrwoJICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMudG8gLSDmg7PopoHorqLpmIXnmoTogZTns7vkurpJRAoJICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMubWVzc2FnZSAtIOWPkemAgee7meaDs+imgeiuoumYheeahOiBlOezu+S6uueahOmqjOivgea2iOaBrwoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIHZhciBqaWQgPSBfZ2V0SmlkKG9wdGlvbnMsIHRoaXMpOwoJICAgIHZhciBwcmVzID0gJHByZXMoeyB0bzogamlkLCB0eXBlOiAnc3Vic2NyaWJlJyB9KTsKCSAgICBpZiAob3B0aW9ucy5tZXNzYWdlKSB7CgkgICAgICAgIHByZXMuYygnc3RhdHVzJykudChvcHRpb25zLm1lc3NhZ2UpLnVwKCk7CgkgICAgfQoJICAgIGlmIChvcHRpb25zLm5pY2spIHsKCSAgICAgICAgcHJlcy5jKCduaWNrJywgeyAneG1sbnMnOiAnaHR0cDovL2phYmJlci5vcmcvcHJvdG9jb2wvbmljaycgfSkudChvcHRpb25zLm5pY2spOwoJICAgIH0KCSAgICB0aGlzLnNlbmRDb21tYW5kKHByZXMudHJlZSgpKTsKCX07CgoJLyoqCgkgKiDooqvorqLpmIXlkI7noa7orqTlkIzmhI/ooqvorqLpmIUKCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0g6K6i6ZiF5Lq655qE5L+h5oGvCgkgKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy50byAtIOiuoumYheS6uueahElECgkgKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy5tZXNzYWdlPVtyZXNwOnRydWVdIC0g6buY6K6k5Li6W3Jlc3A6dHJ1ZV3vvIzlkI7nu63lsIbljrvmjonor6Xlj4LmlbAKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuc3Vic2NyaWJlZCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CgkgICAgdmFyIG1lc3NhZ2UgPSAnW3Jlc3A6dHJ1ZV0nOwoJICAgIHZhciBqaWQgPSBfZ2V0SmlkKG9wdGlvbnMsIHRoaXMpOwoJICAgIHZhciBwcmVzID0gJHByZXMoeyB0bzogamlkLCB0eXBlOiAnc3Vic2NyaWJlZCcgfSk7CgoJICAgIGlmIChvcHRpb25zLm1lc3NhZ2UpIHsKCSAgICAgICAgcHJlcy5jKCdzdGF0dXMnKS50KG9wdGlvbnMubWVzc2FnZSkudXAoKTsKCSAgICB9CgkgICAgdGhpcy5zZW5kQ29tbWFuZChwcmVzLnRyZWUoKSk7Cgl9OwoKCS8qKgoJICog5Y+W5raI6K6i6ZiF5oiQ5Yqf77yM5bqf5byD5LiN55SoCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucwoJICogQGRlcHJlY2F0ZWQKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIHZhciBqaWQgPSBfZ2V0SmlkKG9wdGlvbnMsIHRoaXMpOwoJICAgIHZhciBwcmVzID0gJHByZXMoeyB0bzogamlkLCB0eXBlOiAndW5zdWJzY3JpYmUnIH0pOwoKCSAgICBpZiAob3B0aW9ucy5tZXNzYWdlKSB7CgkgICAgICAgIHByZXMuYygnc3RhdHVzJykudChvcHRpb25zLm1lc3NhZ2UpOwoJICAgIH0KCSAgICB0aGlzLnNlbmRDb21tYW5kKHByZXMudHJlZSgpKTsKCX07CgoJLyoqCgkgKiDmi5Lnu53lr7nmlrnnmoTorqLpmIXor7fmsYIKCSAqIEBmdW5jdGlvbiBjb25uZWN0aW9uI2V2ZW50OnVuc3Vic2NyaWJlZAoJICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLQoJICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMudG8gLSDorqLpmIXkurrnmoRJRAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZWQgPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIHZhciBqaWQgPSBfZ2V0SmlkKG9wdGlvbnMsIHRoaXMpOwoJICAgIHZhciBwcmVzID0gJHByZXMoeyB0bzogamlkLCB0eXBlOiAndW5zdWJzY3JpYmVkJyB9KTsKCgkgICAgaWYgKG9wdGlvbnMubWVzc2FnZSkgewoJICAgICAgICBwcmVzLmMoJ3N0YXR1cycpLnQob3B0aW9ucy5tZXNzYWdlKS51cCgpOwoJICAgIH0KCSAgICB0aGlzLnNlbmRDb21tYW5kKHByZXMudHJlZSgpKTsKCX07CgoJLyoqCgkgKiDliqDlhaXlhazlvIDnvqTnu4QKCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zCgkgKiBAZGVwcmVjYXRlZAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5qb2luUHVibGljR3JvdXAgPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIHZhciByb29tSmlkID0gdGhpcy5jb250ZXh0LmFwcEtleSArICdfJyArIG9wdGlvbnMucm9vbUlkICsgJ0Bjb25mZXJlbmNlLicgKyB0aGlzLmRvbWFpbjsKCSAgICB2YXIgcm9vbV9uaWNrID0gcm9vbUppZCArICcvJyArIHRoaXMuY29udGV4dC51c2VySWQ7CgkgICAgdmFyIHN1YyA9IG9wdGlvbnMuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB2YXIgZXJyID0gb3B0aW9ucy5lcnJvciB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB2YXIgZXJyb3JGbiA9IGZ1bmN0aW9uIGVycm9yRm4oZWxlKSB7CgkgICAgICAgIGVycih7CgkgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9DT05OQ1RJT05fSk9JTlJPT01fRVJST1IsCgkgICAgICAgICAgICBkYXRhOiBlbGUKCSAgICAgICAgfSk7CgkgICAgfTsKCSAgICB2YXIgaXEgPSAkcHJlcyh7CgkgICAgICAgIGZyb206IHRoaXMuY29udGV4dC5qaWQsCgkgICAgICAgIHRvOiByb29tX25pY2sKCSAgICB9KS5jKCd4JywgeyB4bWxuczogU3Ryb3BoZS5OUy5NVUMgfSk7CgoJICAgIHRoaXMuY29udGV4dC5zdHJvcGhlQ29ubi5zZW5kSVEoaXEudHJlZSgpLCBzdWMsIGVycm9yRm4pOwoJfTsKCgkvKioKCSAqIOiOt+WPluiBiuWkqeWupOWIl+ihqAoJICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKCSAqIEBkZXByZWNhdGVkCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmxpc3RSb29tcyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CgkgICAgdmFyIGlxID0gJGlxKHsKCSAgICAgICAgdG86IG9wdGlvbnMuc2VydmVyIHx8ICdjb25mZXJlbmNlLicgKyB0aGlzLmRvbWFpbiwKCSAgICAgICAgZnJvbTogdGhpcy5jb250ZXh0LmppZCwKCSAgICAgICAgdHlwZTogJ2dldCcKCSAgICB9KS5jKCdxdWVyeScsIHsgeG1sbnM6IFN0cm9waGUuTlMuRElTQ09fSVRFTVMgfSk7CgoJICAgIHZhciBzdWMgPSBvcHRpb25zLnN1Y2Nlc3MgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdmFyIGVycm9yID0gb3B0aW9ucy5lcnJvciB8fCB0aGlzLm9uRXJyb3I7CgkgICAgdmFyIGNvbXBsZXRlRm4gPSBmdW5jdGlvbiBjb21wbGV0ZUZuKHJlc3VsdCkgewoJICAgICAgICB2YXIgcm9vbXMgPSBbXTsKCSAgICAgICAgcm9vbXMgPSBfcGFyc2VSb29tKHJlc3VsdCk7CgkgICAgICAgIHRyeSB7CgkgICAgICAgICAgICBzdWMocm9vbXMpOwoJICAgICAgICB9IGNhdGNoIChlKSB7CgkgICAgICAgICAgICBlcnJvcih7CgkgICAgICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX0dFVFJPT01fRVJST1IsCgkgICAgICAgICAgICAgICAgZGF0YTogZQoJICAgICAgICAgICAgfSk7CgkgICAgICAgIH0KCSAgICB9OwoJICAgIHZhciBlcnIgPSBvcHRpb25zLmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHZhciBlcnJvckZuID0gZnVuY3Rpb24gZXJyb3JGbihlbGUpIHsKCSAgICAgICAgZXJyKHsKCSAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0NPTk5DVElPTl9HRVRST09NX0VSUk9SLAoJICAgICAgICAgICAgZGF0YTogZWxlCgkgICAgICAgIH0pOwoJICAgIH07CgkgICAgdGhpcy5jb250ZXh0LnN0cm9waGVDb25uLnNlbmRJUShpcS50cmVlKCksIGNvbXBsZXRlRm4sIGVycm9yRm4pOwoJfTsKCgkvKioKCSAqIOiOt+WPlue+pOe7hOaIkOWRmOWIl+ihqAoJICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKCSAqIEBkZXByZWNhdGVkCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLnF1ZXJ5Um9vbU1lbWJlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CgkgICAgdmFyIGRvbWFpbiA9IHRoaXMuZG9tYWluOwoJICAgIHZhciBtZW1iZXJzID0gW107CgkgICAgdmFyIGlxID0gJGlxKHsKCSAgICAgICAgdG86IHRoaXMuY29udGV4dC5hcHBLZXkgKyAnXycgKyBvcHRpb25zLnJvb21JZCArICdAY29uZmVyZW5jZS4nICsgdGhpcy5kb21haW4sCgkgICAgICAgIHR5cGU6ICdnZXQnCgkgICAgfSkuYygncXVlcnknLCB7IHhtbG5zOiBTdHJvcGhlLk5TLk1VQyArICcjYWRtaW4nIH0pLmMoJ2l0ZW0nLCB7IGFmZmlsaWF0aW9uOiAnbWVtYmVyJyB9KTsKCgkgICAgdmFyIHN1YyA9IG9wdGlvbnMuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB2YXIgY29tcGxldGVGbiA9IGZ1bmN0aW9uIGNvbXBsZXRlRm4ocmVzdWx0KSB7CgkgICAgICAgIHZhciBpdGVtcyA9IHJlc3VsdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaXRlbScpOwoKCSAgICAgICAgaWYgKGl0ZW1zKSB7CgkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7CgkgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTsKCSAgICAgICAgICAgICAgICB2YXIgbWVtID0gewoJICAgICAgICAgICAgICAgICAgICBqaWQ6IGl0ZW0uZ2V0QXR0cmlidXRlKCdqaWQnKSwKCSAgICAgICAgICAgICAgICAgICAgYWZmaWxpYXRpb246ICdtZW1iZXInCgkgICAgICAgICAgICAgICAgfTsKCSAgICAgICAgICAgICAgICBtZW1iZXJzLnB1c2gobWVtKTsKCSAgICAgICAgICAgIH0KCSAgICAgICAgfQoJICAgICAgICBzdWMobWVtYmVycyk7CgkgICAgfTsKCSAgICB2YXIgZXJyID0gb3B0aW9ucy5lcnJvciB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB2YXIgZXJyb3JGbiA9IGZ1bmN0aW9uIGVycm9yRm4oZWxlKSB7CgkgICAgICAgIGVycih7CgkgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9DT05OQ1RJT05fR0VUUk9PTU1FTUJFUl9FUlJPUiwKCSAgICAgICAgICAgIGRhdGE6IGVsZQoJICAgICAgICB9KTsKCSAgICB9OwoJICAgIHRoaXMuY29udGV4dC5zdHJvcGhlQ29ubi5zZW5kSVEoaXEudHJlZSgpLCBjb21wbGV0ZUZuLCBlcnJvckZuKTsKCX07CgoJLyoqCgkgKiDojrflj5bnvqTnu4Tkv6Hmga8KCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zCgkgKiBAZGVwcmVjYXRlZAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5xdWVyeVJvb21JbmZvID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKCSAgICBjb25zb2xlLmxvZygnUXVlcnlSb29tSW5mbycpOwoJICAgIHZhciBkb21haW4gPSB0aGlzLmRvbWFpbjsKCSAgICB2YXIgaXEgPSAkaXEoewoJICAgICAgICB0bzogdGhpcy5jb250ZXh0LmFwcEtleSArICdfJyArIG9wdGlvbnMucm9vbUlkICsgJ0Bjb25mZXJlbmNlLicgKyBkb21haW4sCgkgICAgICAgIHR5cGU6ICdnZXQnCgkgICAgfSkuYygncXVlcnknLCB7IHhtbG5zOiBTdHJvcGhlLk5TLkRJU0NPX0lORk8gfSk7CgoJICAgIHZhciBzdWMgPSBvcHRpb25zLnN1Y2Nlc3MgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdmFyIG1lbWJlcnMgPSBbXTsKCgkgICAgdmFyIGNvbXBsZXRlRm4gPSBmdW5jdGlvbiBjb21wbGV0ZUZuKHJlc3VsdCkgewoJICAgICAgICB2YXIgc2V0dGluZ3MgPSAnJzsKCSAgICAgICAgdmFyIGZlYXR1cmVzID0gcmVzdWx0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdmZWF0dXJlJyk7CgkgICAgICAgIGlmIChmZWF0dXJlcykgewoJICAgICAgICAgICAgc2V0dGluZ3MgPSBmZWF0dXJlc1sxXS5nZXRBdHRyaWJ1dGUoJ3ZhcicpICsgJ3wnICsgZmVhdHVyZXNbM10uZ2V0QXR0cmlidXRlKCd2YXInKSArICd8JyArIGZlYXR1cmVzWzRdLmdldEF0dHJpYnV0ZSgndmFyJyk7CgkgICAgICAgIH0KCSAgICAgICAgc3dpdGNoIChzZXR0aW5ncykgewoJICAgICAgICAgICAgY2FzZSAnbXVjX3B1YmxpY3xtdWNfbWVtYmVyc29ubHl8bXVjX25vdGFsbG93aW52aXRlcyc6CgkgICAgICAgICAgICAgICAgc2V0dGluZ3MgPSAnUFVCTElDX0pPSU5fQVBQUk9WQUwnOwoJICAgICAgICAgICAgICAgIGJyZWFrOwoJICAgICAgICAgICAgY2FzZSAnbXVjX3B1YmxpY3xtdWNfb3BlbnxtdWNfbm90YWxsb3dpbnZpdGVzJzoKCSAgICAgICAgICAgICAgICBzZXR0aW5ncyA9ICdQVUJMSUNfSk9JTl9PUEVOJzsKCSAgICAgICAgICAgICAgICBicmVhazsKCSAgICAgICAgICAgIGNhc2UgJ211Y19oaWRkZW58bXVjX21lbWJlcnNvbmx5fG11Y19hbGxvd2ludml0ZXMnOgoJICAgICAgICAgICAgICAgIHNldHRpbmdzID0gJ1BSSVZBVEVfTUVNQkVSX0lOVklURSc7CgkgICAgICAgICAgICAgICAgYnJlYWs7CgkgICAgICAgICAgICBjYXNlICdtdWNfaGlkZGVufG11Y19tZW1iZXJzb25seXxtdWNfbm90YWxsb3dpbnZpdGVzJzoKCSAgICAgICAgICAgICAgICBzZXR0aW5ncyA9ICdQUklWQVRFX09XTkVSX0lOVklURSc7CgkgICAgICAgICAgICAgICAgYnJlYWs7CgkgICAgICAgIH0KCSAgICAgICAgdmFyIG93bmVyID0gJyc7CgkgICAgICAgIHZhciBmaWVsZHMgPSByZXN1bHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ZpZWxkJyk7CgkgICAgICAgIHZhciBmaWVsZFZhbHVlcyA9IHt9OwoJICAgICAgICBpZiAoZmllbGRzKSB7CgkgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykgewoJICAgICAgICAgICAgICAgIHZhciBmaWVsZCA9IGZpZWxkc1tpXTsKCSAgICAgICAgICAgICAgICB2YXIgZmllbGRWYXIgPSBmaWVsZC5nZXRBdHRyaWJ1dGUoJ3ZhcicpOwoJICAgICAgICAgICAgICAgIHZhciBmaWVsZFNpbXBsaWZ5ID0gZmllbGRWYXIuc3BsaXQoJ18nKVsxXTsKCSAgICAgICAgICAgICAgICBzd2l0Y2ggKGZpZWxkVmFyKSB7CgkgICAgICAgICAgICAgICAgICAgIGNhc2UgJ211YyNyb29taW5mb19vY2N1cGFudHMnOgoJICAgICAgICAgICAgICAgICAgICBjYXNlICdtdWMjcm9vbWluZm9fbWF4dXNlcnMnOgoJICAgICAgICAgICAgICAgICAgICBjYXNlICdtdWMjcm9vbWluZm9fYWZmaWxpYXRpb25zJzoKCSAgICAgICAgICAgICAgICAgICAgY2FzZSAnbXVjI3Jvb21pbmZvX2Rlc2NyaXB0aW9uJzoKCSAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkVmFsdWVzW2ZpZWxkU2ltcGxpZnldID0gZmllbGQudGV4dENvbnRlbnQgfHwgZmllbGQudGV4dCB8fCAnJzsKCSAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJICAgICAgICAgICAgICAgICAgICBjYXNlICdtdWMjcm9vbWluZm9fb3duZXInOgoJICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lbSA9IHsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBqaWQ6IChmaWVsZC50ZXh0Q29udGVudCB8fCBmaWVsZC50ZXh0KSArICdAJyArIGRvbWFpbiwKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZmZpbGlhdGlvbjogJ293bmVyJwoJICAgICAgICAgICAgICAgICAgICAgICAgfTsKCSAgICAgICAgICAgICAgICAgICAgICAgIG1lbWJlcnMucHVzaChtZW0pOwoJICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRWYWx1ZXNbZmllbGRTaW1wbGlmeV0gPSBmaWVsZC50ZXh0Q29udGVudCB8fCBmaWVsZC50ZXh0OwoJICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkgICAgICAgICAgICAgICAgfQoKCSAgICAgICAgICAgICAgICAvLyBpZiAoZmllbGQuZ2V0QXR0cmlidXRlKCdsYWJlbCcpID09PSAnb3duZXInKSB7CgkgICAgICAgICAgICAgICAgLy8gICAgIHZhciBtZW0gPSB7CgkgICAgICAgICAgICAgICAgLy8gICAgICAgICBqaWQ6IChmaWVsZC50ZXh0Q29udGVudCB8fCBmaWVsZC50ZXh0KSArICdAJyArIGRvbWFpbgoJICAgICAgICAgICAgICAgIC8vICAgICAgICAgLCBhZmZpbGlhdGlvbjogJ293bmVyJwoJICAgICAgICAgICAgICAgIC8vICAgICB9OwoJICAgICAgICAgICAgICAgIC8vICAgICBtZW1iZXJzLnB1c2gobWVtKTsKCSAgICAgICAgICAgICAgICAvLyAgICAgYnJlYWs7CgkgICAgICAgICAgICAgICAgLy8gfQoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgZmllbGRWYWx1ZXNbJ25hbWUnXSA9IHJlc3VsdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaWRlbnRpdHknKVswXS5nZXRBdHRyaWJ1dGUoJ25hbWUnKTsKCSAgICAgICAgfQoJICAgICAgICBzdWMoc2V0dGluZ3MsIG1lbWJlcnMsIGZpZWxkVmFsdWVzKTsKCSAgICB9OwoJICAgIHZhciBlcnIgPSBvcHRpb25zLmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHZhciBlcnJvckZuID0gZnVuY3Rpb24gZXJyb3JGbihlbGUpIHsKCSAgICAgICAgZXJyKHsKCSAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0NPTk5DVElPTl9HRVRST09NSU5GT19FUlJPUiwKCSAgICAgICAgICAgIGRhdGE6IGVsZQoJICAgICAgICB9KTsKCSAgICB9OwoJICAgIHRoaXMuY29udGV4dC5zdHJvcGhlQ29ubi5zZW5kSVEoaXEudHJlZSgpLCBjb21wbGV0ZUZuLCBlcnJvckZuKTsKCX07CgoJLyoqCgkgKiDojrflj5bogYrlpKnlrqTnrqHnkIblkZgKCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zCgkgKiBAZGVwcmVjYXRlZAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5xdWVyeVJvb21PY2N1cGFudHMgPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIHZhciBzdWMgPSBvcHRpb25zLnN1Y2Nlc3MgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdmFyIGNvbXBsZXRlRm4gPSBmdW5jdGlvbiBjb21wbGV0ZUZuKHJlc3VsdCkgewoJICAgICAgICB2YXIgb2NjdXBhbnRzID0gW107CgkgICAgICAgIG9jY3VwYW50cyA9IF9wYXJzZVJvb21PY2N1cGFudHMocmVzdWx0KTsKCSAgICAgICAgc3VjKG9jY3VwYW50cyk7CgkgICAgfTsKCSAgICB2YXIgZXJyID0gb3B0aW9ucy5lcnJvciB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB2YXIgZXJyb3JGbiA9IGZ1bmN0aW9uIGVycm9yRm4oZWxlKSB7CgkgICAgICAgIGVycih7CgkgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9DT05OQ1RJT05fR0VUUk9PTU9DQ1VQQU5UU19FUlJPUiwKCSAgICAgICAgICAgIGRhdGE6IGVsZQoJICAgICAgICB9KTsKCSAgICB9OwoJICAgIHZhciBhdHRycyA9IHsKCSAgICAgICAgeG1sbnM6IFN0cm9waGUuTlMuRElTQ09fSVRFTVMKCSAgICB9OwoJICAgIHZhciBpbmZvID0gJGlxKHsKCSAgICAgICAgZnJvbTogdGhpcy5jb250ZXh0LmppZCwKCSAgICAgICAgdG86IHRoaXMuY29udGV4dC5hcHBLZXkgKyAnXycgKyBvcHRpb25zLnJvb21JZCArICdAY29uZmVyZW5jZS4nICsgdGhpcy5kb21haW4sCgkgICAgICAgIHR5cGU6ICdnZXQnCgkgICAgfSkuYygncXVlcnknLCBhdHRycyk7CgkgICAgdGhpcy5jb250ZXh0LnN0cm9waGVDb25uLnNlbmRJUShpbmZvLnRyZWUoKSwgY29tcGxldGVGbiwgZXJyb3JGbik7Cgl9OwoKCS8qKgoJICoKCSAqIEBkZXByZWNhdGVkCgkgKiBAcHJpdmF0ZQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5zZXRVc2VyU2lnID0gZnVuY3Rpb24gKGRlc2MpIHsKCSAgICB2YXIgZG9tID0gJHByZXMoeyB4bWxuczogJ2phYmJlcjpjbGllbnQnIH0pOwoJICAgIGRlc2MgPSBkZXNjIHx8ICcnOwoJICAgIGRvbS5jKCdzdGF0dXMnKS50KGRlc2MpOwoJICAgIHRoaXMuc2VuZENvbW1hbmQoZG9tLnRyZWUoKSk7Cgl9OwoKCS8qKgoJICoKCSAqIEBwcml2YXRlCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLnNldFByZXNlbmNlID0gZnVuY3Rpb24gKHR5cGUsIHN0YXR1cykgewoJICAgIHZhciBkb20gPSAkcHJlcyh7IHhtbG5zOiAnamFiYmVyOmNsaWVudCcgfSk7CgkgICAgaWYgKHR5cGUpIHsKCSAgICAgICAgaWYgKHN0YXR1cykgewoJICAgICAgICAgICAgZG9tLmMoJ3Nob3cnKS50KHR5cGUpOwoJICAgICAgICAgICAgZG9tLnVwKCkuYygnc3RhdHVzJykudChzdGF0dXMpOwoJICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgZG9tLmMoJ3Nob3cnKS50KHR5cGUpOwoJICAgICAgICB9CgkgICAgfQoJICAgIHRoaXMuc2VuZENvbW1hbmQoZG9tLnRyZWUoKSk7Cgl9OwoKCS8qKgoJICogQHByaXZhdGUKCSAqCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFByZXNlbmNlID0gZnVuY3Rpb24gKCkgewoJICAgIHZhciBkb20gPSAkcHJlcyh7IHhtbG5zOiAnamFiYmVyOmNsaWVudCcgfSk7CgkgICAgdmFyIGNvbm4gPSB0aGlzOwoJICAgIHRoaXMuc2VuZENvbW1hbmQoZG9tLnRyZWUoKSk7Cgl9OwoKCS8qKgoJICogQHByaXZhdGUKCSAqCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLnBpbmcgPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIHZhciBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCSAgICB2YXIgamlkID0gX2dldEppZChvcHRpb25zLCB0aGlzKTsKCgkgICAgdmFyIGRvbSA9ICRpcSh7CgkgICAgICAgIGZyb206IHRoaXMuY29udGV4dC5qaWQgfHwgJycsCgkgICAgICAgIHRvOiBqaWQsCgkgICAgICAgIHR5cGU6ICdnZXQnCgkgICAgfSkuYygncGluZycsIHsgeG1sbnM6ICd1cm46eG1wcDpwaW5nJyB9KTsKCgkgICAgdmFyIHN1YyA9IG9wdGlvbnMuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB2YXIgZXJyb3IgPSBvcHRpb25zLmVycm9yIHx8IHRoaXMub25FcnJvcjsKCSAgICB2YXIgZmFpbEZuID0gZnVuY3Rpb24gZmFpbEZuKGVsZSkgewoJICAgICAgICBlcnJvcih7CgkgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9DT05OQ1RJT05fUElOR19FUlJPUiwKCSAgICAgICAgICAgIGRhdGE6IGVsZQoJICAgICAgICB9KTsKCSAgICB9OwoJICAgIGlmICh0aGlzLmlzT3BlbmVkKCkpIHsKCSAgICAgICAgdGhpcy5jb250ZXh0LnN0cm9waGVDb25uLnNlbmRJUShkb20udHJlZSgpLCBzdWMsIGZhaWxGbik7CgkgICAgfSBlbHNlIHsKCSAgICAgICAgZXJyb3IoewoJICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX0RJU0NPTk5FQ1RFRAoJICAgICAgICB9KTsKCSAgICB9CgkgICAgcmV0dXJuOwoJfTsKCgkvKioKCSAqIEBwcml2YXRlCgkgKgoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5pc09wZW5lZCA9IGZ1bmN0aW9uICgpIHsKCSAgICByZXR1cm4gdGhpcy5jb250ZXh0LnN0YXR1cyA9PSBfY29kZS5TVEFUVVNfT1BFTkVEOwoJfTsKCgkvKioKCSAqIEBwcml2YXRlCgkgKgoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5pc09wZW5pbmcgPSBmdW5jdGlvbiAoKSB7CgkgICAgdmFyIHN0YXR1cyA9IHRoaXMuY29udGV4dC5zdGF0dXM7CgkgICAgcmV0dXJuIHN0YXR1cyA9PSBfY29kZS5TVEFUVVNfRE9MT0dJTl9VU0VSR1JJRCB8fCBzdGF0dXMgPT0gX2NvZGUuU1RBVFVTX0RPTE9HSU5fSU07Cgl9OwoKCS8qKgoJICogQHByaXZhdGUKCSAqCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmlzQ2xvc2luZyA9IGZ1bmN0aW9uICgpIHsKCSAgICByZXR1cm4gdGhpcy5jb250ZXh0LnN0YXR1cyA9PSBfY29kZS5TVEFUVVNfQ0xPU0lORzsKCX07CgoJLyoqCgkgKiBAcHJpdmF0ZQoJICoKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuaXNDbG9zZWQgPSBmdW5jdGlvbiAoKSB7CgkgICAgcmV0dXJuIHRoaXMuY29udGV4dC5zdGF0dXMgPT0gX2NvZGUuU1RBVFVTX0NMT1NFRDsKCX07CgoJLyoqCgkgKiBAcHJpdmF0ZQoJICoKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7CgkgICAgdmFyIGtleSA9IHRoaXMuY29udGV4dC5hcHBLZXk7CgkgICAgaWYgKHRoaXMuZXJyb3JUeXBlICE9IF9jb2RlLldFQklNX0NPTk5DVElPTl9ESVNDT05ORUNURUQpIHsKCSAgICAgICAgaWYgKHRoaXMubG9nT3V0KSB7CgkgICAgICAgICAgICB0aGlzLnVuU2VuZE1zZ0FyciA9IFtdOwoJICAgICAgICAgICAgdGhpcy5vZmZMaW5lU2VuZENvbm5lY3RpbmcgPSBmYWxzZTsKCSAgICAgICAgICAgIHRoaXMuY29udGV4dCA9IHsKCSAgICAgICAgICAgICAgICBzdGF0dXM6IF9jb2RlLlNUQVRVU19JTklULAoJICAgICAgICAgICAgICAgIGFwcEtleToga2V5CgkgICAgICAgICAgICB9OwoJICAgICAgICB9CgkgICAgfQoJICAgIGlmICh0aGlzLmludGVydmFsSWQpIHsKCSAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsSWQpOwoJICAgIH0KCSAgICB0aGlzLnJlc3RJbmRleCA9IDA7CgkgICAgdGhpcy54bXBwSW5kZXggPSAwOwoKCSAgICBpZiAodGhpcy5lcnJvclR5cGUgPT0gX2NvZGUuV0VCSU1fQ09OTkNUSU9OX0NMSUVOVF9MT0dPVVQgfHwgdGhpcy5lcnJvclR5cGUgPT0gLTEpIHsKCSAgICAgICAgdmFyIG1lc3NhZ2UgPSB7CgkgICAgICAgICAgICBkYXRhOiB7CgkgICAgICAgICAgICAgICAgZGF0YTogImxvZ291dCIKCSAgICAgICAgICAgIH0sCgkgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9DT05OQ1RJT05fQ0xJRU5UX0xPR09VVAoJICAgICAgICB9OwoJICAgICAgICB0aGlzLm9uRXJyb3IobWVzc2FnZSk7CgkgICAgfQoJfTsKCgkvKioKCSAqIOiOt+WPluiBiuWkqeWupOWIl+ihqAoJICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKCSAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLnBhZ2VudW0KCSAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLnBhZ2VzaXplCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmdldENoYXRSb29tcyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CgoJICAgIHZhciBjb25uID0gdGhpcywKCSAgICAgICAgdG9rZW4gPSBvcHRpb25zLmFjY2Vzc1Rva2VuIHx8IHRoaXMuY29udGV4dC5hY2Nlc3NUb2tlbjsKCgkgICAgaWYgKCFfdXRpbHMuaXNDYW5TZXRSZXF1ZXN0SGVhZGVyKSB7CgkgICAgICAgIGNvbm4ub25FcnJvcih7CgkgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9DT05OQ1RJT05fTk9UX1NVUFBPUlRfQ0hBVFJPT01fRVJST1IKCSAgICAgICAgfSk7CgkgICAgICAgIHJldHVybjsKCSAgICB9CgoJICAgIGlmICh0b2tlbikgewoJICAgICAgICB2YXIgYXBpVXJsID0gdGhpcy5hcGlVcmw7CgkgICAgICAgIHZhciBhcHBOYW1lID0gdGhpcy5jb250ZXh0LmFwcE5hbWU7CgkgICAgICAgIHZhciBvcmdOYW1lID0gdGhpcy5jb250ZXh0Lm9yZ05hbWU7CgoJICAgICAgICBpZiAoIWFwcE5hbWUgfHwgIW9yZ05hbWUpIHsKCSAgICAgICAgICAgIGNvbm4ub25FcnJvcih7CgkgICAgICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX0FVVEhfRVJST1IKCSAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgcmV0dXJuOwoJICAgICAgICB9CgoJICAgICAgICB2YXIgc3VjID0gZnVuY3Rpb24gc3VjKGRhdGEsIHhocikgewoJICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuc3VjY2VzcyA9PT0gJ2Z1bmN0aW9uJyAmJiBvcHRpb25zLnN1Y2Nlc3MoZGF0YSk7CgkgICAgICAgIH07CgoJICAgICAgICB2YXIgZXJyb3IgPSBmdW5jdGlvbiBlcnJvcihyZXMsIHhociwgbXNnKSB7CgkgICAgICAgICAgICBpZiAocmVzLmVycm9yICYmIHJlcy5lcnJvcl9kZXNjcmlwdGlvbikgewoJICAgICAgICAgICAgICAgIGNvbm4ub25FcnJvcih7CgkgICAgICAgICAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0NPTk5DVElPTl9MT0FEX0NIQVRST09NX0VSUk9SLAoJICAgICAgICAgICAgICAgICAgICBtc2c6IHJlcy5lcnJvcl9kZXNjcmlwdGlvbiwKCSAgICAgICAgICAgICAgICAgICAgZGF0YTogcmVzLAoJICAgICAgICAgICAgICAgICAgICB4aHI6IHhocgoJICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgfQoJICAgICAgICB9OwoKCSAgICAgICAgdmFyIHBhZ2VJbmZvID0gewoJICAgICAgICAgICAgcGFnZW51bTogcGFyc2VJbnQob3B0aW9ucy5wYWdlbnVtKSB8fCAxLAoJICAgICAgICAgICAgcGFnZXNpemU6IHBhcnNlSW50KG9wdGlvbnMucGFnZXNpemUpIHx8IDIwCgkgICAgICAgIH07CgoJICAgICAgICB2YXIgb3B0cyA9IHsKCSAgICAgICAgICAgIHVybDogYXBpVXJsICsgJy8nICsgb3JnTmFtZSArICcvJyArIGFwcE5hbWUgKyAnL2NoYXRyb29tcycsCgkgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLAoJICAgICAgICAgICAgdHlwZTogJ0dFVCcsCgkgICAgICAgICAgICBoZWFkZXJzOiB7ICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgdG9rZW4gfSwKCSAgICAgICAgICAgIGRhdGE6IHBhZ2VJbmZvLAoJICAgICAgICAgICAgc3VjY2Vzczogc3VjIHx8IF91dGlscy5lbXB0eWZuLAoJICAgICAgICAgICAgZXJyb3I6IGVycm9yIHx8IF91dGlscy5lbXB0eWZuCgkgICAgICAgIH07CgkgICAgICAgIF91dGlscy5hamF4KG9wdHMpOwoJICAgIH0gZWxzZSB7CgkgICAgICAgIGNvbm4ub25FcnJvcih7CgkgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9DT05OQ1RJT05fVE9LRU5fTk9UX0FTU0lHTl9FUlJPUgoJICAgICAgICB9KTsKCSAgICB9Cgl9OwoKCS8qKgoJICog5Yqg5YWl6IGK5aSp5a6kCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucwoJICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMucm9vbUlkCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmpvaW5DaGF0Um9vbSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CgkgICAgdmFyIHJvb21KaWQgPSB0aGlzLmNvbnRleHQuYXBwS2V5ICsgJ18nICsgb3B0aW9ucy5yb29tSWQgKyAnQGNvbmZlcmVuY2UuJyArIHRoaXMuZG9tYWluOwoJICAgIHZhciByb29tX25pY2sgPSByb29tSmlkICsgJy8nICsgdGhpcy5jb250ZXh0LnVzZXJJZDsKCSAgICB2YXIgc3VjID0gb3B0aW9ucy5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHZhciBlcnIgPSBvcHRpb25zLmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHZhciBlcnJvckZuID0gZnVuY3Rpb24gZXJyb3JGbihlbGUpIHsKCSAgICAgICAgZXJyKHsKCSAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0NPTk5DVElPTl9KT0lOQ0hBVFJPT01fRVJST1IsCgkgICAgICAgICAgICBkYXRhOiBlbGUKCSAgICAgICAgfSk7CgkgICAgfTsKCgkgICAgdmFyIGlxID0gJHByZXMoewoJICAgICAgICBmcm9tOiB0aGlzLmNvbnRleHQuamlkLAoJICAgICAgICB0bzogcm9vbV9uaWNrCgkgICAgfSkuYygneCcsIHsgeG1sbnM6IFN0cm9waGUuTlMuTVVDICsgJyN1c2VyJyB9KS5jKCdpdGVtJywgeyBhZmZpbGlhdGlvbjogJ21lbWJlcicsIHJvbGU6ICdwYXJ0aWNpcGFudCcgfSkudXAoKS51cCgpLmMoJ3Jvb210eXBlJywgeyB4bWxuczogJ2Vhc2Vtb2I6eDpyb29tdHlwZScsIHR5cGU6ICdjaGF0cm9vbScgfSk7CgoJICAgIHRoaXMuY29udGV4dC5zdHJvcGhlQ29ubi5zZW5kSVEoaXEudHJlZSgpLCBzdWMsIGVycm9yRm4pOwoJfTsKCgkvKioKCSAqIOmAgOWHuuiBiuWkqeWupAoJICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKCSAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLnJvb21JZAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5xdWl0Q2hhdFJvb20gPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIHZhciByb29tSmlkID0gdGhpcy5jb250ZXh0LmFwcEtleSArICdfJyArIG9wdGlvbnMucm9vbUlkICsgJ0Bjb25mZXJlbmNlLicgKyB0aGlzLmRvbWFpbjsKCSAgICB2YXIgcm9vbV9uaWNrID0gcm9vbUppZCArICcvJyArIHRoaXMuY29udGV4dC51c2VySWQ7CgkgICAgdmFyIHN1YyA9IG9wdGlvbnMuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB2YXIgZXJyID0gb3B0aW9ucy5lcnJvciB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB2YXIgZXJyb3JGbiA9IGZ1bmN0aW9uIGVycm9yRm4oZWxlKSB7CgkgICAgICAgIGVycih7CgkgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9DT05OQ1RJT05fUVVJVENIQVRST09NX0VSUk9SLAoJICAgICAgICAgICAgZGF0YTogZWxlCgkgICAgICAgIH0pOwoJICAgIH07CgkgICAgdmFyIGlxID0gJHByZXMoewoJICAgICAgICBmcm9tOiB0aGlzLmNvbnRleHQuamlkLAoJICAgICAgICB0bzogcm9vbV9uaWNrLAoJICAgICAgICB0eXBlOiAndW5hdmFpbGFibGUnCgkgICAgfSkuYygneCcsIHsgeG1sbnM6IFN0cm9waGUuTlMuTVVDICsgJyN1c2VyJyB9KS5jKCdpdGVtJywgeyBhZmZpbGlhdGlvbjogJ25vbmUnLCByb2xlOiAnbm9uZScgfSkudXAoKS51cCgpLmMoJ3Jvb210eXBlJywgeyB4bWxuczogJ2Vhc2Vtb2I6eDpyb29tdHlwZScsIHR5cGU6ICdjaGF0cm9vbScgfSk7CgoJICAgIHRoaXMuY29udGV4dC5zdHJvcGhlQ29ubi5zZW5kSVEoaXEudHJlZSgpLCBzdWMsIGVycm9yRm4pOwoJfTsKCgkvKioKCSAqIGZvciB3aW5kb3dTREsKCSAqIEBwcml2YXRlCgkgKgoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5fb25SZWNlaXZlSW52aXRlRnJvbUdyb3VwID0gZnVuY3Rpb24gKGluZm8pIHsKCSAgICBpbmZvID0gZXZhbCgnKCcgKyBpbmZvICsgJyknKTsKCSAgICB2YXIgc2VsZiA9IHRoaXM7CgkgICAgdmFyIG9wdGlvbnMgPSB7CgkgICAgICAgIHRpdGxlOiAiR3JvdXAgaW52aXRhdGlvbiIsCgkgICAgICAgIG1zZzogaW5mby51c2VyICsgIiBpbnZpdGVzIHlvdSB0byBqb2luIGludG8gZ3JvdXA6IiArIGluZm8uZ3JvdXBfaWQsCgkgICAgICAgIGFncmVlOiBmdW5jdGlvbiBhZ3JlZSgpIHsKCSAgICAgICAgICAgIFdlYklNLmRvUXVlcnkoJ3sidHlwZSI6ImFjY2VwdEludml0YXRpb25Gcm9tR3JvdXAiLCJpZCI6IicgKyBpbmZvLmdyb3VwX2lkICsgJyIsInVzZXIiOiInICsgaW5mby51c2VyICsgJyJ9JywgZnVuY3Rpb24gKHJlc3BvbnNlKSB7fSwgZnVuY3Rpb24gKGNvZGUsIG1zZykgewoJICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gewoJICAgICAgICAgICAgICAgICAgICBkYXRhOiB7CgkgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiAiYWNjZXB0SW52aXRhdGlvbkZyb21Hcm91cCBlcnJvcjoiICsgbXNnCgkgICAgICAgICAgICAgICAgICAgIH0sCgkgICAgICAgICAgICAgICAgICAgIHR5cGU6IF9jb2RlLldFQklNX0NPTk5FQ1RJT05fQUNDRVBUX0lOVklUQVRJT05fRlJPTV9HUk9VUAoJICAgICAgICAgICAgICAgIH07CgkgICAgICAgICAgICAgICAgc2VsZi5vbkVycm9yKG1lc3NhZ2UpOwoJICAgICAgICAgICAgfSk7CgkgICAgICAgIH0sCgkgICAgICAgIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KCkgewoJICAgICAgICAgICAgV2ViSU0uZG9RdWVyeSgneyJ0eXBlIjoiZGVjbGluZUludml0YXRpb25Gcm9tR3JvdXAiLCJpZCI6IicgKyBpbmZvLmdyb3VwX2lkICsgJyIsInVzZXIiOiInICsgaW5mby51c2VyICsgJyJ9JywgZnVuY3Rpb24gKHJlc3BvbnNlKSB7fSwgZnVuY3Rpb24gKGNvZGUsIG1zZykgewoJICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gewoJICAgICAgICAgICAgICAgICAgICBkYXRhOiB7CgkgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiAiZGVjbGluZUludml0YXRpb25Gcm9tR3JvdXAgZXJyb3I6IiArIG1zZwoJICAgICAgICAgICAgICAgICAgICB9LAoJICAgICAgICAgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9DT05ORUNUSU9OX0RFQ0xJTkVfSU5WSVRBVElPTl9GUk9NX0dST1VQCgkgICAgICAgICAgICAgICAgfTsKCSAgICAgICAgICAgICAgICBzZWxmLm9uRXJyb3IobWVzc2FnZSk7CgkgICAgICAgICAgICB9KTsKCSAgICAgICAgfQoJICAgIH07CgoJICAgIHRoaXMub25Db25maXJtUG9wKG9wdGlvbnMpOwoJfTsKCgkvKioKCSAqIGZvciB3aW5kb3dTREsKCSAqIEBwcml2YXRlCgkgKgoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5fb25SZWNlaXZlSW52aXRlQWNjZXB0aW9uRnJvbUdyb3VwID0gZnVuY3Rpb24gKGluZm8pIHsKCSAgICBpbmZvID0gZXZhbCgnKCcgKyBpbmZvICsgJyknKTsKCSAgICB2YXIgb3B0aW9ucyA9IHsKCSAgICAgICAgdGl0bGU6ICJHcm91cCBpbnZpdGF0aW9uIHJlc3BvbnNlIiwKCSAgICAgICAgbXNnOiBpbmZvLnVzZXIgKyAiIGFncmVlZCB0byBqb2luIGludG8gZ3JvdXA6IiArIGluZm8uZ3JvdXBfaWQsCgkgICAgICAgIGFncmVlOiBmdW5jdGlvbiBhZ3JlZSgpIHt9CgkgICAgfTsKCSAgICB0aGlzLm9uQ29uZmlybVBvcChvcHRpb25zKTsKCX07CgoJLyoqCgkgKiBmb3Igd2luZG93U0RLCgkgKiBAcHJpdmF0ZQoJICoKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuX29uUmVjZWl2ZUludml0ZURlY2xpbmVGcm9tR3JvdXAgPSBmdW5jdGlvbiAoaW5mbykgewoJICAgIGluZm8gPSBldmFsKCcoJyArIGluZm8gKyAnKScpOwoJICAgIHZhciBvcHRpb25zID0gewoJICAgICAgICB0aXRsZTogIkdyb3VwIGludml0YXRpb24gcmVzcG9uc2UiLAoJICAgICAgICBtc2c6IGluZm8udXNlciArICIgcmVqZWN0ZWQgdG8gam9pbiBpbnRvIGdyb3VwOiIgKyBpbmZvLmdyb3VwX2lkLAoJICAgICAgICBhZ3JlZTogZnVuY3Rpb24gYWdyZWUoKSB7fQoJICAgIH07CgkgICAgdGhpcy5vbkNvbmZpcm1Qb3Aob3B0aW9ucyk7Cgl9OwoKCS8qKgoJICogZm9yIHdpbmRvd1NESwoJICogQHByaXZhdGUKCSAqCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLl9vbkF1dG9BY2NlcHRJbnZpdGF0aW9uRnJvbUdyb3VwID0gZnVuY3Rpb24gKGluZm8pIHsKCSAgICBpbmZvID0gZXZhbCgnKCcgKyBpbmZvICsgJyknKTsKCSAgICB2YXIgb3B0aW9ucyA9IHsKCSAgICAgICAgdGl0bGU6ICJHcm91cCBpbnZpdGF0aW9uIiwKCSAgICAgICAgbXNnOiAiWW91IGhhZCBqb2luZWQgaW50byB0aGUgZ3JvdXA6IiArIGluZm8uZ3JvdXBfbmFtZSArICIgYXV0b21hdGljYWxseS5JbnZpdGVyOiIgKyBpbmZvLnVzZXIsCgkgICAgICAgIGFncmVlOiBmdW5jdGlvbiBhZ3JlZSgpIHt9CgkgICAgfTsKCSAgICB0aGlzLm9uQ29uZmlybVBvcChvcHRpb25zKTsKCX07CgoJLyoqCgkgKiBmb3Igd2luZG93U0RLCgkgKiBAcHJpdmF0ZQoJICoKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuX29uTGVhdmVHcm91cCA9IGZ1bmN0aW9uIChpbmZvKSB7CgkgICAgaW5mbyA9IGV2YWwoJygnICsgaW5mbyArICcpJyk7CgkgICAgdmFyIG9wdGlvbnMgPSB7CgkgICAgICAgIHRpdGxlOiAiR3JvdXAgbm90aWZpY2F0aW9uIiwKCSAgICAgICAgbXNnOiAiWW91IGhhdmUgYmVlbiBvdXQgb2YgdGhlIGdyb3VwOiIgKyBpbmZvLmdyb3VwX2lkICsgIi5SZWFzb246IiArIGluZm8ubXNnLAoJICAgICAgICBhZ3JlZTogZnVuY3Rpb24gYWdyZWUoKSB7fQoJICAgIH07CgkgICAgdGhpcy5vbkNvbmZpcm1Qb3Aob3B0aW9ucyk7Cgl9OwoKCS8qKgoJICogZm9yIHdpbmRvd1NESwoJICogQHByaXZhdGUKCSAqCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLl9vblJlY2VpdmVKb2luR3JvdXBBcHBsaWNhdGlvbiA9IGZ1bmN0aW9uIChpbmZvKSB7CgkgICAgaW5mbyA9IGV2YWwoJygnICsgaW5mbyArICcpJyk7CgkgICAgdmFyIHNlbGYgPSB0aGlzOwoJICAgIHZhciBvcHRpb25zID0gewoJICAgICAgICB0aXRsZTogIkdyb3VwIGpvaW4gYXBwbGljYXRpb24iLAoJICAgICAgICBtc2c6IGluZm8udXNlciArICIgYXBwbHlzIHRvIGpvaW4gaW50byBncm91cDoiICsgaW5mby5ncm91cF9pZCwKCSAgICAgICAgYWdyZWU6IGZ1bmN0aW9uIGFncmVlKCkgewoJICAgICAgICAgICAgV2ViSU0uZG9RdWVyeSgneyJ0eXBlIjoiYWNjZXB0Sm9pbkdyb3VwQXBwbGljYXRpb24iLCJpZCI6IicgKyBpbmZvLmdyb3VwX2lkICsgJyIsInVzZXIiOiInICsgaW5mby51c2VyICsgJyJ9JywgZnVuY3Rpb24gKHJlc3BvbnNlKSB7fSwgZnVuY3Rpb24gKGNvZGUsIG1zZykgewoJICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gewoJICAgICAgICAgICAgICAgICAgICBkYXRhOiB7CgkgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiAiYWNjZXB0Sm9pbkdyb3VwQXBwbGljYXRpb24gZXJyb3I6IiArIG1zZwoJICAgICAgICAgICAgICAgICAgICB9LAoJICAgICAgICAgICAgICAgICAgICB0eXBlOiBfY29kZS5XRUJJTV9DT05ORUNUSU9OX0FDQ0VQVF9KT0lOX0dST1VQCgkgICAgICAgICAgICAgICAgfTsKCSAgICAgICAgICAgICAgICBzZWxmLm9uRXJyb3IobWVzc2FnZSk7CgkgICAgICAgICAgICB9KTsKCSAgICAgICAgfSwKCSAgICAgICAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3QoKSB7CgkgICAgICAgICAgICBXZWJJTS5kb1F1ZXJ5KCd7InR5cGUiOiJkZWNsaW5lSm9pbkdyb3VwQXBwbGljYXRpb24iLCJpZCI6IicgKyBpbmZvLmdyb3VwX2lkICsgJyIsInVzZXIiOiInICsgaW5mby51c2VyICsgJyJ9JywgZnVuY3Rpb24gKHJlc3BvbnNlKSB7fSwgZnVuY3Rpb24gKGNvZGUsIG1zZykgewoJICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gewoJICAgICAgICAgICAgICAgICAgICBkYXRhOiB7CgkgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiAiZGVjbGluZUpvaW5Hcm91cEFwcGxpY2F0aW9uIGVycm9yOiIgKyBtc2cKCSAgICAgICAgICAgICAgICAgICAgfSwKCSAgICAgICAgICAgICAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkVDVElPTl9ERUNMSU5FX0pPSU5fR1JPVVAKCSAgICAgICAgICAgICAgICB9OwoJICAgICAgICAgICAgICAgIHNlbGYub25FcnJvcihtZXNzYWdlKTsKCSAgICAgICAgICAgIH0pOwoJICAgICAgICB9CgkgICAgfTsKCSAgICB0aGlzLm9uQ29uZmlybVBvcChvcHRpb25zKTsKCX07CgoJLyoqCgkgKiBmb3Igd2luZG93U0RLCgkgKiBAcHJpdmF0ZQoJICoKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuX29uUmVjZWl2ZUFjY2VwdGlvbkZyb21Hcm91cCA9IGZ1bmN0aW9uIChpbmZvKSB7CgkgICAgaW5mbyA9IGV2YWwoJygnICsgaW5mbyArICcpJyk7CgkgICAgdmFyIG9wdGlvbnMgPSB7CgkgICAgICAgIHRpdGxlOiAiR3JvdXAgbm90aWZpY2F0aW9uIiwKCSAgICAgICAgbXNnOiAiWW91IGhhZCBqb2luZWQgaW50byB0aGUgZ3JvdXA6IiArIGluZm8uZ3JvdXBfbmFtZSArICIuIiwKCSAgICAgICAgYWdyZWU6IGZ1bmN0aW9uIGFncmVlKCkge30KCSAgICB9OwoJICAgIHRoaXMub25Db25maXJtUG9wKG9wdGlvbnMpOwoJfTsKCgkvKioKCSAqIGZvciB3aW5kb3dTREsKCSAqIEBwcml2YXRlCgkgKgoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5fb25SZWNlaXZlUmVqZWN0aW9uRnJvbUdyb3VwID0gZnVuY3Rpb24gKCkgewoJICAgIGluZm8gPSBldmFsKCcoJyArIGluZm8gKyAnKScpOwoJICAgIHZhciBvcHRpb25zID0gewoJICAgICAgICB0aXRsZTogIkdyb3VwIG5vdGlmaWNhdGlvbiIsCgkgICAgICAgIG1zZzogIllvdSBoYXZlIGJlZW4gcmVqZWN0ZWQgdG8gam9pbiBpbnRvIHRoZSBncm91cDoiICsgaW5mby5ncm91cF9uYW1lICsgIi4iLAoJICAgICAgICBhZ3JlZTogZnVuY3Rpb24gYWdyZWUoKSB7fQoJICAgIH07CgkgICAgdGhpcy5vbkNvbmZpcm1Qb3Aob3B0aW9ucyk7Cgl9OwoKCS8qKgoJICogZm9yIHdpbmRvd1NESwoJICogQHByaXZhdGUKCSAqCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLl9vblVwZGF0ZU15R3JvdXBMaXN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKCSAgICB0aGlzLm9uVXBkYXRlTXlHcm91cExpc3Qob3B0aW9ucyk7Cgl9OwoKCS8qKgoJICogZm9yIHdpbmRvd1NESwoJICogQHByaXZhdGUKCSAqCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLl9vblVwZGF0ZU15Um9zdGVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKCSAgICB0aGlzLm9uVXBkYXRlTXlSb3N0ZXIob3B0aW9ucyk7Cgl9OwoKCS8qKgoJICogQHByaXZhdGUKCSAqCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLnJlY29ubmVjdCA9IGZ1bmN0aW9uICgpIHsKCSAgICB2YXIgdGhhdCA9IHRoaXM7CgkgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CgkgICAgICAgIF9sb2dpbih0aGF0LmNvbnRleHQucmVzdFRva2VuRGF0YSwgdGhhdCk7CgkgICAgfSwgKHRoaXMuYXV0b1JlY29ubmVjdE51bVRvdGFsID09IDAgPyAwIDogdGhpcy5hdXRvUmVjb25uZWN0SW50ZXJ2YWwpICogMTAwMCk7CgkgICAgdGhpcy5hdXRvUmVjb25uZWN0TnVtVG90YWwrKzsKCX07CgoJLyoqCgkgKgoJICogQHByaXZhdGUKCSAqIEBkZXByZWNhdGVkCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmNsb3NlZCA9IGZ1bmN0aW9uICgpIHsKCSAgICB2YXIgbWVzc2FnZSA9IHsKCSAgICAgICAgZGF0YTogewoJICAgICAgICAgICAgZGF0YTogIkNsb3NlZCBlcnJvciIKCSAgICAgICAgfSwKCSAgICAgICAgdHlwZTogX2NvZGUuV0VCSU1fQ09OTkVDVElPTl9DTE9TRUQKCSAgICB9OwoJICAgIHRoaXMub25FcnJvcihtZXNzYWdlKTsKCX07CgoJLyoqCgkgKiDlsIbmtojmga/luo/liJfljJblkI7lrZjlhaVsb2NhbFN0b3JhZ2UKCSAqIEBwYXJhbSBtZXNzYWdlIHtPYmplY3R9IOa2iOaBr+WunuS9kwoJICogQHBhcmFtIHR5cGUge1N0cmluZ30g5raI5oGv57G75Z6LCgkgKiBAcGFyYW0gc3RhdHVzIHtTdHJpbmd9IOa2iOaBr+eKtuaAgQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUb0xvY2FsID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHR5cGUsIHN0YXR1cykgewoJICAgIGlmICghdGhpcy5zYXZlTG9jYWwpIHsKCSAgICAgICAgcmV0dXJuOwoJICAgIH0KCSAgICB2YXIgc2VuZEJ5TWUgPSB0eXBlb2YgbWVzc2FnZS5tc2cgPT0gJ3N0cmluZyc7CgkgICAgaWYgKCF3aW5kb3cubG9jYWxTdG9yYWdlKSByZXR1cm47CgkgICAgdHJ5IHsKCSAgICAgICAgdmFyIG1zZyA9IF9kZWVwQ2xvbmUobWVzc2FnZSk7CgkgICAgfSBjYXRjaCAoZSkgewoJICAgICAgICBjb25zb2xlLmxvZyhlLm1lc3NhZ2UpOwoJICAgIH0KCSAgICBtc2cuZGF0YSA9IG1zZy5zb3VyY2VNc2c7CgkgICAgaWYgKHR5cGUgPT0gJ3R4dCcpIHsKCSAgICAgICAgaWYgKCFtZXNzYWdlLmRhdGEgJiYgIW1lc3NhZ2UubXNnKSB7CgkgICAgICAgICAgICByZXR1cm47CgkgICAgICAgIH0KCSAgICAgICAgaWYgKHNlbmRCeU1lKSB7CgkgICAgICAgICAgICBtc2cuZGF0YSA9IHRoaXMuZW5jKG1zZy5tc2cpOwoJICAgICAgICAgICAgZGVsZXRlIG1zZy5tc2c7CgkgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICBtc2cuZGF0YSA9IG1zZy5zb3VyY2VNc2c7CgkgICAgICAgIH0KCSAgICB9CgkgICAgbXNnLm1zZ1R5cGUgPSB0eXBlOwoJICAgIG1zZy5tc2dTdGF0dXMgPSBzdGF0dXM7CgkgICAgdmFyIG9sZFJlY29yZCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLnVzZXIpOwoJICAgIHZhciBzZXJpYWxpemVkQ2hhdFJlY29yZCA9IEpTT04uc3RyaW5naWZ5KG1zZyk7CgkgICAgaWYgKG9sZFJlY29yZCAmJiAob2xkUmVjb3JkLmluZGV4T2YobWVzc2FnZS5pZCkgPj0gMCB8fCBvbGRSZWNvcmQuaW5kZXhPZihzZXJpYWxpemVkQ2hhdFJlY29yZCkgPj0gMCkpIHsKCSAgICAgICAgcmV0dXJuOwoJICAgIH0KCSAgICB2YXIgcmVjb3JkID0gIiI7CgkgICAgaWYgKCFvbGRSZWNvcmQgfHwgb2xkUmVjb3JkID09ICIiKSB7CgkgICAgICAgIHJlY29yZCA9IHNlcmlhbGl6ZWRDaGF0UmVjb3JkOwoJICAgIH0gZWxzZSB7CgkgICAgICAgIHJlY29yZCA9IG9sZFJlY29yZCArICdcbicgKyBzZXJpYWxpemVkQ2hhdFJlY29yZDsKCSAgICB9CgkgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMudXNlciwgcmVjb3JkKTsKCX07CgoJLyoqCgkgKiDlsIbmlofmnKzmtojmga/liqDlr4YKCSAqIEBwYXJhbSBtZXNzYWdlU291cmNlIHtPYmplY3R9IOa2iOaBr+WunuS9kwoJICovCgoJY29ubmVjdGlvbi5wcm90b3R5cGUuZW5jID0gZnVuY3Rpb24gKG1lc3NhZ2VTb3VyY2UpIHsKCSAgICB2YXIgbWVzc2FnZSA9IF8uY2xvbmUobWVzc2FnZVNvdXJjZSk7CgkgICAgaWYgKHRoaXMuZW5jcnlwdC50eXBlID09PSAnYmFzZTY0JykgewoJICAgICAgICBtZXNzYWdlID0gYnRvYShtZXNzYWdlU291cmNlKTsKCSAgICB9IGVsc2UgaWYgKHRoaXMuZW5jcnlwdC50eXBlID09PSAnYWVzJykgewoJICAgICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UodGhpcy5lbmNyeXB0LmtleSk7CgkgICAgICAgIHZhciBpdiA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHRoaXMuZW5jcnlwdC5pdik7CgkgICAgICAgIHZhciBtb2RlID0gdGhpcy5lbmNyeXB0Lm1vZGUudG9Mb3dlckNhc2UoKTsKCSAgICAgICAgdmFyIG9wdGlvbiA9IHt9OwoJICAgICAgICBpZiAobW9kZSA9PT0gJ2NiYycpIHsKCSAgICAgICAgICAgIG9wdGlvbiA9IHsKCSAgICAgICAgICAgICAgICBpdjogaXYsCgkgICAgICAgICAgICAgICAgbW9kZTogQ3J5cHRvSlMubW9kZS5DQkMsCgkgICAgICAgICAgICAgICAgcGFkZGluZzogQ3J5cHRvSlMucGFkLlBrY3M3CgkgICAgICAgICAgICB9OwoJICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdlYmMnKSB7CgkgICAgICAgICAgICBvcHRpb24gPSB7CgkgICAgICAgICAgICAgICAgbW9kZTogQ3J5cHRvSlMubW9kZS5FQ0IsCgkgICAgICAgICAgICAgICAgcGFkZGluZzogQ3J5cHRvSlMucGFkLlBrY3M3CgkgICAgICAgICAgICB9OwoJICAgICAgICB9CgkgICAgICAgIHZhciBlbmNyeXB0ZWREYXRhID0gQ3J5cHRvSlMuQUVTLmVuY3J5cHQobWVzc2FnZSwga2V5LCBvcHRpb24pOwoKCSAgICAgICAgbWVzc2FnZSA9IGVuY3J5cHRlZERhdGEudG9TdHJpbmcoKTsKCSAgICB9CgkgICAgcmV0dXJuIG1lc3NhZ2U7Cgl9OwoKCS8qKgoJICog5bCG5paH5pys5raI5oGv6Kej5a+GCgkgKiBAcGFyYW0gc291cmNlIHtPYmplY3R9IOa2iOaBr+WunuS9kwoJICogQHJldHVybnMge09iamVjdH0g6Kej5a+G5ZCO55qE5raI5oGvCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmRlY3J5cHQgPSBmdW5jdGlvbiAoc291cmNlKSB7CgkgICAgdmFyIHJlY2VpdmVNc2cgPSBzb3VyY2UsCgkgICAgICAgIHNlbGYgPSB0aGlzOwoJICAgIGlmIChzZWxmLmVuY3J5cHQudHlwZSA9PT0gJ2Jhc2U2NCcpIHsKCSAgICAgICAgcmVjZWl2ZU1zZyA9IGF0b2IocmVjZWl2ZU1zZyk7CgkgICAgfSBlbHNlIGlmIChzZWxmLmVuY3J5cHQudHlwZSA9PT0gJ2FlcycpIHsKCSAgICAgICAgdmFyIGtleSA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHNlbGYuZW5jcnlwdC5rZXkpOwoJICAgICAgICB2YXIgaXYgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShzZWxmLmVuY3J5cHQuaXYpOwoJICAgICAgICB2YXIgbW9kZSA9IHNlbGYuZW5jcnlwdC5tb2RlLnRvTG93ZXJDYXNlKCk7CgkgICAgICAgIHZhciBvcHRpb24gPSB7fTsKCSAgICAgICAgaWYgKG1vZGUgPT09ICdjYmMnKSB7CgkgICAgICAgICAgICBvcHRpb24gPSB7CgkgICAgICAgICAgICAgICAgaXY6IGl2LAoJICAgICAgICAgICAgICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuQ0JDLAoJICAgICAgICAgICAgICAgIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5Qa2NzNwoJICAgICAgICAgICAgfTsKCSAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnZWJjJykgewoJICAgICAgICAgICAgb3B0aW9uID0gewoJICAgICAgICAgICAgICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuRUNCLAoJICAgICAgICAgICAgICAgIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5Qa2NzNwoJICAgICAgICAgICAgfTsKCSAgICAgICAgfQoJICAgICAgICB2YXIgZW5jcnlwdGVkQmFzZTY0U3RyID0gcmVjZWl2ZU1zZzsKCSAgICAgICAgdmFyIGRlY3J5cHRlZERhdGEgPSBDcnlwdG9KUy5BRVMuZGVjcnlwdChlbmNyeXB0ZWRCYXNlNjRTdHIsIGtleSwgb3B0aW9uKTsKCSAgICAgICAgdmFyIGRlY3J5cHRlZFN0ciA9IGRlY3J5cHRlZERhdGEudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLlV0ZjgpOwoJICAgICAgICByZWNlaXZlTXNnID0gZGVjcnlwdGVkU3RyOwoJICAgIH0KCSAgICByZXR1cm4gcmVjZWl2ZU1zZzsKCX07CgoJLyoqCgkgKiDku45sb2NhbFN0b3JhZ2Xojrflj5bmtojmga/lubblj43luo/liJfljJYKCSAqIEByZXR1cm5zIHtBcnJheXwqfSDmiYDmnInmtojmga/nu4TmiJDnmoTmlbDnu4QKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0TG9jYWwgPSBmdW5jdGlvbiAoKSB7CgkgICAgaWYgKCF3aW5kb3cubG9jYWxTdG9yYWdlIHx8ICF0aGlzLnNhdmVMb2NhbCkgcmV0dXJuOwoJICAgIHZhciB1c2VyID0gdGhpcy51c2VyOwoJICAgIHZhciByZWNvcmQgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0odXNlcik7CgoJICAgIGlmICghcmVjb3JkIHx8IHJlY29yZCA9PSAnJykgcmV0dXJuOwoKCSAgICB2YXIgcmVjb3JkQXJyID0gcmVjb3JkLnNwbGl0KCdcbicpOwoJICAgIGZvciAodmFyIGkgaW4gcmVjb3JkQXJyKSB7CgkgICAgICAgIHZhciByZWNvcmRJdGVtID0gcmVjb3JkQXJyW2ldOwoJICAgICAgICByZWNvcmRJdGVtID0gSlNPTi5wYXJzZShyZWNvcmRJdGVtKTsKCSAgICAgICAgcmVjb3JkSXRlbS5kYXRhID0gdGhpcy5kZWNyeXB0KHJlY29yZEl0ZW0uZGF0YSk7CgkgICAgICAgIHJlY29yZEFycltpXSA9IHJlY29yZEl0ZW07CgkgICAgfQoJICAgIHJldHVybiByZWNvcmRBcnI7Cgl9OwoKCS8qKgoJICogdXNlZCBmb3IgYmxhY2tsaXN0CgkgKiBAcHJpdmF0ZQoJICoKCSAqLwoJZnVuY3Rpb24gX3BhcnNlUHJpdmFjeShpcSkgewoJICAgIHZhciBsaXN0ID0gW107CgkgICAgdmFyIGl0ZW1zID0gaXEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2l0ZW0nKTsKCgkgICAgaWYgKGl0ZW1zKSB7CgkgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHsKCSAgICAgICAgICAgIHZhciBpdGVtID0gaXRlbXNbaV07CgkgICAgICAgICAgICB2YXIgamlkID0gaXRlbS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7CgkgICAgICAgICAgICB2YXIgb3JkZXIgPSBpdGVtLmdldEF0dHJpYnV0ZSgnb3JkZXInKTsKCSAgICAgICAgICAgIHZhciB0eXBlID0gaXRlbS5nZXRBdHRyaWJ1dGUoJ3R5cGUnKTsKCSAgICAgICAgICAgIGlmICghamlkKSB7CgkgICAgICAgICAgICAgICAgY29udGludWU7CgkgICAgICAgICAgICB9CgkgICAgICAgICAgICB2YXIgbiA9IF9wYXJzZU5hbWVGcm9tSmlkRm4oamlkKTsKCSAgICAgICAgICAgIGxpc3Rbbl0gPSB7CgkgICAgICAgICAgICAgICAgdHlwZTogdHlwZSwKCSAgICAgICAgICAgICAgICBvcmRlcjogb3JkZXIsCgkgICAgICAgICAgICAgICAgamlkOiBqaWQsCgkgICAgICAgICAgICAgICAgbmFtZTogbgoJICAgICAgICAgICAgfTsKCSAgICAgICAgfQoJICAgIH0KCSAgICByZXR1cm4gbGlzdDsKCX07CgoJLyoqCgkgKiDojrflj5blpb3lj4vpu5HlkI3ljZUKCSAqCgkgKiBAcmV0dXJucyB7T2JqZWN0fSDlpb3lj4vliJfooagKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0QmxhY2tsaXN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKCSAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCSAgICB2YXIgaXEgPSAkaXEoeyB0eXBlOiAnZ2V0JyB9KTsKCSAgICB2YXIgc3VjRm4gPSBvcHRpb25zLnN1Y2Nlc3MgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdmFyIGVyckZuID0gb3B0aW9ucy5lcnJvciB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB2YXIgbWUgPSB0aGlzOwoKCSAgICBpcS5jKCdxdWVyeScsIHsgeG1sbnM6ICdqYWJiZXI6aXE6cHJpdmFjeScgfSkuYygnbGlzdCcsIHsgbmFtZTogJ3NwZWNpYWwnIH0pOwoKCSAgICB0aGlzLmNvbnRleHQuc3Ryb3BoZUNvbm4uc2VuZElRKGlxLnRyZWUoKSwgZnVuY3Rpb24gKGlxKSB7CgkgICAgICAgIG1lLm9uQmxhY2tsaXN0VXBkYXRlKF9wYXJzZVByaXZhY3koaXEpKTsKCSAgICAgICAgc3VjRm4oKTsKCSAgICB9LCBmdW5jdGlvbiAoKSB7CgkgICAgICAgIG1lLm9uQmxhY2tsaXN0VXBkYXRlKFtdKTsKCSAgICAgICAgZXJyRm4oKTsKCSAgICB9KTsKCX07CgoJLyoqCgkgKiDlsIblpb3lj4vliqDlhaXliLDpu5HlkI3ljZUKCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zCgkgKiBAcGFyYW0ge09iamVjdFtdfSBvcHRpb25zLmxpc3QgLSDosIPnlKjov5nkuKrlh73mlbDlkI7pu5HlkI3ljZXnmoTmiYDmnInlkI3ljZXliJfooajvvIxrZXnlgLzkuLrlpb3lj4vnmoRJRAoJICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMubGlzdFtdLnR5cGU9amlkIC0g6KaB5Yqg5Yiw6buR5ZCN5Y2V55qE5aW95Y+L5a+56LGh55qEdHlwZe+8jOm7mOiupOaYr2ppZAoJICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMubGlzdFtdLm9yZGVyIC0g6KaB5Yqg5Yiw6buR5ZCN5Y2V55qE5aW95Y+L5a+56LGh55qEb3JkZXLvvIzmiYDmnIlvcmRlcuS4jemHjeWkjQoJICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubGlzdFtdLmppZCAtIOimgeWKoOWIsOm7keWQjeWNleeahOWlveWPi+eahGppZAoJICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubGlzdFtdLm5hbWUgLSDopoHliqDliLDpu5HlkI3ljZXnmoTlpb3lj4vnmoRJRAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUb0JsYWNrTGlzdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CgkgICAgdmFyIGlxID0gJGlxKHsgdHlwZTogJ3NldCcgfSk7CgkgICAgdmFyIGJsYWNrbGlzdCA9IG9wdGlvbnMubGlzdCB8fCB7fTsKCSAgICB2YXIgc3VjRm4gPSBvcHRpb25zLnN1Y2Nlc3MgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdmFyIGVyckZuID0gb3B0aW9ucy5lcnJvciB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB2YXIgcGllY2UgPSBpcS5jKCdxdWVyeScsIHsgeG1sbnM6ICdqYWJiZXI6aXE6cHJpdmFjeScgfSkuYygnbGlzdCcsIHsgbmFtZTogJ3NwZWNpYWwnIH0pOwoKCSAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGJsYWNrbGlzdCk7CgkgICAgdmFyIGxlbiA9IGtleXMubGVuZ3RoOwoJICAgIHZhciBvcmRlciA9IDI7CgoJICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKCSAgICAgICAgdmFyIGl0ZW0gPSBibGFja2xpc3Rba2V5c1tpXV07CgkgICAgICAgIHZhciB0eXBlID0gaXRlbS50eXBlIHx8ICdqaWQnOwoJICAgICAgICB2YXIgamlkID0gaXRlbS5qaWQ7CgoJICAgICAgICBwaWVjZSA9IHBpZWNlLmMoJ2l0ZW0nLCB7IGFjdGlvbjogJ2RlbnknLCBvcmRlcjogb3JkZXIrKywgdHlwZTogdHlwZSwgdmFsdWU6IGppZCB9KS5jKCdtZXNzYWdlJyk7CgkgICAgICAgIGlmIChpICE9PSBsZW4gLSAxKSB7CgkgICAgICAgICAgICBwaWVjZSA9IHBpZWNlLnVwKCkudXAoKTsKCSAgICAgICAgfQoJICAgIH0KCgkgICAgdGhpcy5jb250ZXh0LnN0cm9waGVDb25uLnNlbmRJUShwaWVjZS50cmVlKCksIHN1Y0ZuLCBlcnJGbik7Cgl9OwoKCS8qKgoJICog5bCG5aW95Y+L5LuO6buR5ZCN5Y2V56e76ZmkCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucwoJICogQHBhcmFtIHtPYmplY3RbXX0gb3B0aW9ucy5saXN0IC0g6LCD55So6L+Z5Liq5Ye95pWw5ZCO6buR5ZCN5Y2V55qE5omA5pyJ5ZCN5Y2V5YiX6KGo77yMa2V55YC85Li65aW95Y+L55qESUQKCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLmxpc3RbXS50eXBlPWppZCAtIOimgeWKoOWIsOm7keWQjeWNleeahOWlveWPi+WvueixoeeahHR5cGXvvIzpu5jorqTmmK9qaWQKCSAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmxpc3RbXS5vcmRlciAtIOimgeWKoOWIsOm7keWQjeWNleeahOWlveWPi+WvueixoeeahG9yZGVy77yM5omA5pyJb3JkZXLkuI3ph43lpI0KCSAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmxpc3RbXS5qaWQgLSDopoHliqDliLDpu5HlkI3ljZXnmoTlpb3lj4vnmoRqaWQKCSAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmxpc3RbXS5uYW1lIC0g6KaB5Yqg5Yiw6buR5ZCN5Y2V55qE5aW95Y+L55qESUQKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlRnJvbUJsYWNrTGlzdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CgkgICAgY29uc29sZS5sb2coJ3JlbW92ZUZyb21CbGFja0xpc3Q6ICcsIG9wdGlvbnMpOwoJICAgIHZhciBpcSA9ICRpcSh7IHR5cGU6ICdzZXQnIH0pOwoJICAgIHZhciBibGFja2xpc3QgPSBvcHRpb25zLmxpc3QgfHwge307CgkgICAgdmFyIHN1Y0ZuID0gb3B0aW9ucy5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHZhciBlcnJGbiA9IG9wdGlvbnMuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdmFyIHBpZWNlID0gaXEuYygncXVlcnknLCB7IHhtbG5zOiAnamFiYmVyOmlxOnByaXZhY3knIH0pLmMoJ2xpc3QnLCB7IG5hbWU6ICdzcGVjaWFsJyB9KTsKCgkgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhibGFja2xpc3QpOwoJICAgIHZhciBsZW4gPSBrZXlzLmxlbmd0aDsKCgkgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykgewoJICAgICAgICB2YXIgaXRlbSA9IGJsYWNrbGlzdFtrZXlzW2ldXTsKCSAgICAgICAgdmFyIHR5cGUgPSBpdGVtLnR5cGUgfHwgJ2ppZCc7CgkgICAgICAgIHZhciBqaWQgPSBpdGVtLmppZDsKCSAgICAgICAgdmFyIG9yZGVyID0gaXRlbS5vcmRlcjsKCgkgICAgICAgIHBpZWNlID0gcGllY2UuYygnaXRlbScsIHsgYWN0aW9uOiAnZGVueScsIG9yZGVyOiBvcmRlciwgdHlwZTogdHlwZSwgdmFsdWU6IGppZCB9KS5jKCdtZXNzYWdlJyk7CgkgICAgICAgIGlmIChpICE9PSBsZW4gLSAxKSB7CgkgICAgICAgICAgICBwaWVjZSA9IHBpZWNlLnVwKCkudXAoKTsKCSAgICAgICAgfQoJICAgIH0KCgkgICAgdGhpcy5jb250ZXh0LnN0cm9waGVDb25uLnNlbmRJUShwaWVjZS50cmVlKCksIHN1Y0ZuLCBlcnJGbik7Cgl9OwoKCS8qKgoJICoKCSAqIEBwcml2YXRlCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLl9nZXRHcm91cEppZCA9IGZ1bmN0aW9uICh0bykgewoJICAgIHZhciBhcHBLZXkgPSB0aGlzLmNvbnRleHQuYXBwS2V5IHx8ICcnOwoJICAgIHJldHVybiBhcHBLZXkgKyAnXycgKyB0byArICdAY29uZmVyZW5jZS4nICsgdGhpcy5kb21haW47Cgl9OwoKCS8qKgoJICog5Yqg5YWl576k57uE6buR5ZCN5Y2VCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucwoJICogQGRlcHJlY2F0ZWQKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVG9Hcm91cEJsYWNrTGlzdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CgkgICAgdmFyIHN1Y0ZuID0gb3B0aW9ucy5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHZhciBlcnJGbiA9IG9wdGlvbnMuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdmFyIGppZCA9IF9nZXRKaWQob3B0aW9ucywgdGhpcyk7CgkgICAgdmFyIGFmZmlsaWF0aW9uID0gJ2FkbWluJzsgLy9vcHRpb25zLmFmZmlsaWF0aW9uIHx8ICdhZG1pbic7CgkgICAgdmFyIHRvID0gdGhpcy5fZ2V0R3JvdXBKaWQob3B0aW9ucy5yb29tSWQpOwoJICAgIHZhciBpcSA9ICRpcSh7IHR5cGU6ICdzZXQnLCB0bzogdG8gfSk7CgoJICAgIGlxLmMoJ3F1ZXJ5JywgeyB4bWxuczogJ2h0dHA6Ly9qYWJiZXIub3JnL3Byb3RvY29sL211YyMnICsgYWZmaWxpYXRpb24gfSkuYygnaXRlbScsIHsKCSAgICAgICAgYWZmaWxpYXRpb246ICdvdXRjYXN0JywKCSAgICAgICAgamlkOiBqaWQKCSAgICB9KTsKCgkgICAgdGhpcy5jb250ZXh0LnN0cm9waGVDb25uLnNlbmRJUShpcS50cmVlKCksIHN1Y0ZuLCBlcnJGbik7Cgl9OwoKCS8qKgoJICoKCSAqIEBwcml2YXRlCgkgKi8KCWZ1bmN0aW9uIF9wYXJzZUdyb3VwQmxhY2tsaXN0KGlxKSB7CgkgICAgdmFyIGxpc3QgPSB7fTsKCSAgICB2YXIgaXRlbXMgPSBpcS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaXRlbScpOwoKCSAgICBpZiAoaXRlbXMpIHsKCSAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykgewoJICAgICAgICAgICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTsKCSAgICAgICAgICAgIHZhciBqaWQgPSBpdGVtLmdldEF0dHJpYnV0ZSgnamlkJyk7CgkgICAgICAgICAgICB2YXIgYWZmaWxpYXRpb24gPSBpdGVtLmdldEF0dHJpYnV0ZSgnYWZmaWxpYXRpb24nKTsKCSAgICAgICAgICAgIHZhciBuaWNrID0gaXRlbS5nZXRBdHRyaWJ1dGUoJ25pY2snKTsKCSAgICAgICAgICAgIGlmICghamlkKSB7CgkgICAgICAgICAgICAgICAgY29udGludWU7CgkgICAgICAgICAgICB9CgkgICAgICAgICAgICB2YXIgbiA9IF9wYXJzZU5hbWVGcm9tSmlkRm4oamlkKTsKCSAgICAgICAgICAgIGxpc3Rbbl0gPSB7CgkgICAgICAgICAgICAgICAgamlkOiBqaWQsCgkgICAgICAgICAgICAgICAgYWZmaWxpYXRpb246IGFmZmlsaWF0aW9uLAoJICAgICAgICAgICAgICAgIG5pY2s6IG5pY2ssCgkgICAgICAgICAgICAgICAgbmFtZTogbgoJICAgICAgICAgICAgfTsKCSAgICAgICAgfQoJICAgIH0KCSAgICByZXR1cm4gbGlzdDsKCX0KCgkvKioKCSAqIOiOt+WPlue+pOe7hOm7keWQjeWNlQoJICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMKCSAqIEBkZXByZWNhdGVkCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmdldEdyb3VwQmxhY2tsaXN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKCSAgICB2YXIgc3VjRm4gPSBvcHRpb25zLnN1Y2Nlc3MgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdmFyIGVyckZuID0gb3B0aW9ucy5lcnJvciB8fCBfdXRpbHMuZW1wdHlmbjsKCgkgICAgLy8gdmFyIGppZCA9IF9nZXRKaWQob3B0aW9ucywgdGhpcyk7CgkgICAgdmFyIGFmZmlsaWF0aW9uID0gJ2FkbWluJzsgLy9vcHRpb25zLmFmZmlsaWF0aW9uIHx8ICdhZG1pbic7CgkgICAgdmFyIHRvID0gdGhpcy5fZ2V0R3JvdXBKaWQob3B0aW9ucy5yb29tSWQpOwoJICAgIHZhciBpcSA9ICRpcSh7IHR5cGU6ICdnZXQnLCB0bzogdG8gfSk7CgoJICAgIGlxLmMoJ3F1ZXJ5JywgeyB4bWxuczogJ2h0dHA6Ly9qYWJiZXIub3JnL3Byb3RvY29sL211YyMnICsgYWZmaWxpYXRpb24gfSkuYygnaXRlbScsIHsKCSAgICAgICAgYWZmaWxpYXRpb246ICdvdXRjYXN0JwoJICAgIH0pOwoKCSAgICB0aGlzLmNvbnRleHQuc3Ryb3BoZUNvbm4uc2VuZElRKGlxLnRyZWUoKSwgZnVuY3Rpb24gKG1zZ2luZm8pIHsKCSAgICAgICAgc3VjRm4oX3BhcnNlR3JvdXBCbGFja2xpc3QobXNnaW5mbykpOwoJICAgIH0sIGZ1bmN0aW9uICgpIHsKCSAgICAgICAgZXJyRm4oKTsKCSAgICB9KTsKCX07CgoJLyoqCgkgKiDku47nvqTnu4Tpu5HlkI3ljZXliKDpmaQKCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zCgkgKiBAZGVwcmVjYXRlZAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVHcm91cE1lbWJlckZyb21CbGFja2xpc3QgPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIHZhciBzdWNGbiA9IG9wdGlvbnMuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB2YXIgZXJyRm4gPSBvcHRpb25zLmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoKCSAgICB2YXIgamlkID0gX2dldEppZChvcHRpb25zLCB0aGlzKTsKCSAgICB2YXIgYWZmaWxpYXRpb24gPSAnYWRtaW4nOyAvL29wdGlvbnMuYWZmaWxpYXRpb24gfHwgJ2FkbWluJzsKCSAgICB2YXIgdG8gPSB0aGlzLl9nZXRHcm91cEppZChvcHRpb25zLnJvb21JZCk7CgkgICAgdmFyIGlxID0gJGlxKHsgdHlwZTogJ3NldCcsIHRvOiB0byB9KTsKCgkgICAgaXEuYygncXVlcnknLCB7IHhtbG5zOiAnaHR0cDovL2phYmJlci5vcmcvcHJvdG9jb2wvbXVjIycgKyBhZmZpbGlhdGlvbiB9KS5jKCdpdGVtJywgewoJICAgICAgICBhZmZpbGlhdGlvbjogJ25vbmUnLAoJICAgICAgICBqaWQ6IGppZAoJICAgIH0pOwoKCSAgICB0aGlzLmNvbnRleHQuc3Ryb3BoZUNvbm4uc2VuZElRKGlxLnRyZWUoKSwgZnVuY3Rpb24gKG1zZ2luZm8pIHsKCSAgICAgICAgc3VjRm4oKTsKCSAgICB9LCBmdW5jdGlvbiAoKSB7CgkgICAgICAgIGVyckZuKCk7CgkgICAgfSk7Cgl9OwoKCS8qKgoJICog5L+u5pS5576k5ZCN56ewCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtCgkgKiBAZGVwcmVjYXRlZAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5jaGFuZ2VHcm91cFN1YmplY3QgPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIHZhciBzdWNGbiA9IG9wdGlvbnMuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB2YXIgZXJyRm4gPSBvcHRpb25zLmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoKCSAgICAvLyBtdXN0IGJlIGBvd25lcmAKCSAgICB2YXIgYWZmaWxpYXRpb24gPSAnb3duZXInOwoJICAgIHZhciB0byA9IHRoaXMuX2dldEdyb3VwSmlkKG9wdGlvbnMucm9vbUlkKTsKCSAgICB2YXIgaXEgPSAkaXEoeyB0eXBlOiAnc2V0JywgdG86IHRvIH0pOwoKCSAgICBpcS5jKCdxdWVyeScsIHsgeG1sbnM6ICdodHRwOi8vamFiYmVyLm9yZy9wcm90b2NvbC9tdWMjJyArIGFmZmlsaWF0aW9uIH0pLmMoJ3gnLCB7IHR5cGU6ICdzdWJtaXQnLCB4bWxuczogJ2phYmJlcjp4OmRhdGEnIH0pLmMoJ2ZpZWxkJywgeyAndmFyJzogJ0ZPUk1fVFlQRScgfSkuYygndmFsdWUnKS50KCdodHRwOi8vamFiYmVyLm9yZy9wcm90b2NvbC9tdWMjcm9vbWNvbmZpZycpLnVwKCkudXAoKS5jKCdmaWVsZCcsIHsgJ3Zhcic6ICdtdWMjcm9vbWNvbmZpZ19yb29tbmFtZScgfSkuYygndmFsdWUnKS50KG9wdGlvbnMuc3ViamVjdCkudXAoKS51cCgpLmMoJ2ZpZWxkJywgeyAndmFyJzogJ211YyNyb29tY29uZmlnX3Jvb21kZXNjJyB9KS5jKCd2YWx1ZScpLnQob3B0aW9ucy5kZXNjcmlwdGlvbik7CgoJICAgIHRoaXMuY29udGV4dC5zdHJvcGhlQ29ubi5zZW5kSVEoaXEudHJlZSgpLCBmdW5jdGlvbiAobXNnaW5mbykgewoJICAgICAgICBzdWNGbigpOwoJICAgIH0sIGZ1bmN0aW9uICgpIHsKCSAgICAgICAgZXJyRm4oKTsKCSAgICB9KTsKCX07CgoJLyoqCgkgKiDliKDpmaTnvqTnu4QKCSAqCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtCgkgKiBAZXhhbXBsZQoJIDxpcSBpZD0iOUJFRjVEMjAtODQxQS00MDQ4LUIzM0EtRjNGODcxMTIwRTU4IiB0bz0iZWFzZW1vYi1kZW1vI2NoYXRkZW1vdWlfMTQ3NzQ2MjIzMTQ5OUBjb25mZXJlbmNlLmVhc2Vtb2IuY29tIiB0eXBlPSJzZXQiPgoJIDxxdWVyeSB4bWxucz0iaHR0cDovL2phYmJlci5vcmcvcHJvdG9jb2wvbXVjI293bmVyIj4KCSA8ZGVzdHJveT4KCSA8cmVhc29uPnh4eCBkZXN0b3J5IGdyb3VwIHl5eTwvcmVhc29uPgoJIDwvZGVzdHJveT4KCSA8L3F1ZXJ5PgoJIDwvaXE+CgkgKiBAZGVwcmVjYXRlZAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5kZXN0cm95R3JvdXAgPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIHZhciBzdWNGbiA9IG9wdGlvbnMuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB2YXIgZXJyRm4gPSBvcHRpb25zLmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoKCSAgICAvLyBtdXN0IGJlIGBvd25lcmAKCSAgICB2YXIgYWZmaWxpYXRpb24gPSAnb3duZXInOwoJICAgIHZhciB0byA9IHRoaXMuX2dldEdyb3VwSmlkKG9wdGlvbnMucm9vbUlkKTsKCSAgICB2YXIgaXEgPSAkaXEoeyB0eXBlOiAnc2V0JywgdG86IHRvIH0pOwoKCSAgICBpcS5jKCdxdWVyeScsIHsgeG1sbnM6ICdodHRwOi8vamFiYmVyLm9yZy9wcm90b2NvbC9tdWMjJyArIGFmZmlsaWF0aW9uIH0pLmMoJ2Rlc3Ryb3knKS5jKCdyZWFzb24nKS50KG9wdGlvbnMucmVhc29uIHx8ICcnKTsKCgkgICAgdGhpcy5jb250ZXh0LnN0cm9waGVDb25uLnNlbmRJUShpcS50cmVlKCksIGZ1bmN0aW9uIChtc2dpbmZvKSB7CgkgICAgICAgIHN1Y0ZuKCk7CgkgICAgfSwgZnVuY3Rpb24gKCkgewoJICAgICAgICBlcnJGbigpOwoJICAgIH0pOwoJfTsKCgkvKioKCSAqIOS4u+WKqOemu+W8gOe+pOe7hAoJICoKCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0KCSAqIEBleGFtcGxlCgkgPGlxIGlkPSI1Q0QzMzE3Mi03QjYyLTQxQjctOThCQy1DRTZFRjg0MEM0RjZfZWFzZW1vYl9vY2N1cGFudHNfY2hhbmdlX2FmZmlsaWF0aW9uIiB0bz0iZWFzZW1vYi1kZW1vI2NoYXRkZW1vdWlfMTQ3NzQ4MTYwOTM5MkBjb25mZXJlbmNlLmVhc2Vtb2IuY29tIiB0eXBlPSJzZXQiPgoJIDxxdWVyeSB4bWxucz0iaHR0cDovL2phYmJlci5vcmcvcHJvdG9jb2wvbXVjI2FkbWluIj4KCSA8aXRlbSBhZmZpbGlhdGlvbj0ibm9uZSIgamlkPSJlYXNlbW9iLWRlbW8jY2hhdGRlbW91aV9sd3oyQGVhc2Vtb2IuY29tIi8+CgkgPC9xdWVyeT4KCSA8L2lxPgoJIDxwcmVzZW5jZSB0bz0iZWFzZW1vYi1kZW1vI2NoYXRkZW1vdWlfMTQ3OTgxMTE3MjM0OUBjb25mZXJlbmNlLmVhc2Vtb2IuY29tL210MDAyIiB0eXBlPSJ1bmF2YWlsYWJsZSIvPgoJICogQGRlcHJlY2F0ZWQKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUubGVhdmVHcm91cEJ5U2VsZiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CgkgICAgdmFyIHNlbGYgPSB0aGlzOwoJICAgIHZhciBzdWNGbiA9IG9wdGlvbnMuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB2YXIgZXJyRm4gPSBvcHRpb25zLmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoKCSAgICAvLyBtdXN0IGJlIGBvd25lcmAKCSAgICB2YXIgamlkID0gX2dldEppZChvcHRpb25zLCB0aGlzKTsKCSAgICB2YXIgYWZmaWxpYXRpb24gPSAnYWRtaW4nOwoJICAgIHZhciB0byA9IHRoaXMuX2dldEdyb3VwSmlkKG9wdGlvbnMucm9vbUlkKTsKCSAgICB2YXIgaXEgPSAkaXEoeyB0eXBlOiAnc2V0JywgdG86IHRvIH0pOwoKCSAgICBpcS5jKCdxdWVyeScsIHsgeG1sbnM6ICdodHRwOi8vamFiYmVyLm9yZy9wcm90b2NvbC9tdWMjJyArIGFmZmlsaWF0aW9uIH0pLmMoJ2l0ZW0nLCB7CgkgICAgICAgIGFmZmlsaWF0aW9uOiAnbm9uZScsCgkgICAgICAgIGppZDogamlkCgkgICAgfSk7CgoJICAgIHRoaXMuY29udGV4dC5zdHJvcGhlQ29ubi5zZW5kSVEoaXEudHJlZSgpLCBmdW5jdGlvbiAobXNnSW5mbykgewoJICAgICAgICBzdWNGbihtc2dJbmZvKTsKCSAgICAgICAgdmFyIHByZXMgPSAkcHJlcyh7IHR5cGU6ICd1bmF2YWlsYWJsZScsIHRvOiB0byArICcvJyArIHNlbGYuY29udGV4dC51c2VySWQgfSk7CgkgICAgICAgIHNlbGYuc2VuZENvbW1hbmQocHJlcy50cmVlKCkpOwoJICAgIH0sIGZ1bmN0aW9uIChlcnJJbmZvKSB7CgkgICAgICAgIGVyckZuKGVyckluZm8pOwoJICAgIH0pOwoJfTsKCgkvKioKCSAqIOe+pOS4u+S7jue+pOe7hOS4rei4ouS6uu+8jOWQjue7reS8muaUueS4uuiwg+eUqFJlc3RGdWwgQVBJCgkgKgoJICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLQoJICogQHBhcmFtIHtzdHJpbmdbXX0gb3B0aW9ucy5saXN0IC0g6ZyA6KaB5LuO576k57uE56e76Zmk55qE5aW95Y+LSUTnu4TmiJDnmoTmlbDnu4QKCSAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnJvb21JZCAtIOe+pOe7hElECgkgKiBAZGVwcmVjYXRlZAoJICogQGV4YW1wbGUKCSA8aXEgaWQ9IjlmYjI1Y2Y0LTExODMtNDNjOS05NjFlLTlkZjcwZTMwMGRlNDpzZW5kSVEiIHRvPSJlYXNlbW9iLWRlbW8jY2hhdGRlbW91aV8xNDc3NDgxNTk3MTIwQGNvbmZlcmVuY2UuZWFzZW1vYi5jb20iIHR5cGU9InNldCIgeG1sbnM9ImphYmJlcjpjbGllbnQiPgoJIDxxdWVyeSB4bWxucz0iaHR0cDovL2phYmJlci5vcmcvcHJvdG9jb2wvbXVjI2FkbWluIj4KCSA8aXRlbSBhZmZpbGlhdGlvbj0ibm9uZSIgamlkPSJlYXNlbW9iLWRlbW8jY2hhdGRlbW91aV9sd3o0QGVhc2Vtb2IuY29tIi8+CgkgPGl0ZW0gamlkPSJlYXNlbW9iLWRlbW8jY2hhdGRlbW91aV9sd3o0QGVhc2Vtb2IuY29tIiByb2xlPSJub25lIi8+CgkgPGl0ZW0gYWZmaWxpYXRpb249Im5vbmUiIGppZD0iZWFzZW1vYi1kZW1vI2NoYXRkZW1vdWlfbHd6MkBlYXNlbW9iLmNvbSIvPgoJIDxpdGVtIGppZD0iZWFzZW1vYi1kZW1vI2NoYXRkZW1vdWlfbHd6MkBlYXNlbW9iLmNvbSIgcm9sZT0ibm9uZSIvPgoJIDwvcXVlcnk+CgkgPC9pcT4KCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUubGVhdmVHcm91cCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CgkgICAgdmFyIHN1Y0ZuID0gb3B0aW9ucy5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHZhciBlcnJGbiA9IG9wdGlvbnMuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgdmFyIGxpc3QgPSBvcHRpb25zLmxpc3QgfHwgW107CgkgICAgdmFyIGFmZmlsaWF0aW9uID0gJ2FkbWluJzsKCSAgICB2YXIgdG8gPSB0aGlzLl9nZXRHcm91cEppZChvcHRpb25zLnJvb21JZCk7CgkgICAgdmFyIGlxID0gJGlxKHsgdHlwZTogJ3NldCcsIHRvOiB0byB9KTsKCSAgICB2YXIgcGllY2UgPSBpcS5jKCdxdWVyeScsIHsgeG1sbnM6ICdodHRwOi8vamFiYmVyLm9yZy9wcm90b2NvbC9tdWMjJyArIGFmZmlsaWF0aW9uIH0pOwoJICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMobGlzdCk7CgkgICAgdmFyIGxlbiA9IGtleXMubGVuZ3RoOwoKCSAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CgkgICAgICAgIHZhciBuYW1lID0gbGlzdFtrZXlzW2ldXTsKCSAgICAgICAgdmFyIGppZCA9IF9nZXRKaWRCeU5hbWUobmFtZSwgdGhpcyk7CgoJICAgICAgICBwaWVjZSA9IHBpZWNlLmMoJ2l0ZW0nLCB7CgkgICAgICAgICAgICBhZmZpbGlhdGlvbjogJ25vbmUnLAoJICAgICAgICAgICAgamlkOiBqaWQKCSAgICAgICAgfSkudXAoKS5jKCdpdGVtJywgewoJICAgICAgICAgICAgcm9sZTogJ25vbmUnLAoJICAgICAgICAgICAgamlkOiBqaWQKCSAgICAgICAgfSkudXAoKTsKCSAgICB9CgoJICAgIHRoaXMuY29udGV4dC5zdHJvcGhlQ29ubi5zZW5kSVEoaXEudHJlZSgpLCBmdW5jdGlvbiAobXNnSW5mbykgewoJICAgICAgICBzdWNGbihtc2dJbmZvKTsKCSAgICB9LCBmdW5jdGlvbiAoZXJySW5mbykgewoJICAgICAgICBlcnJGbihlcnJJbmZvKTsKCSAgICB9KTsKCX07CgoJLyoqCgkgKiDmt7vliqDnvqTnu4TmiJDlkZgKCSAqCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtCgkgKiBAZGVwcmVjYXRlZAoJICogQGV4YW1wbGUKCSBBdHRlbnRpb24gdGhlIHNlcXVlbmNlOiBtZXNzYWdlIGZpcnN0ICjmr4/kuKrmiJDlkZjljZXni6zlj5HkuIDmnaFtZXNzYWdlKSwgaXEgc2Vjb25kICjlpJrkuKrmiJDlkZjlj6/ku6XlkIjmiJDkuIDmnaFpceWPkSkKCSA8IS0tIOa3u+WKoOaIkOWRmOmAmuefpe+8mnNlbmQgLS0+CgkgPG1lc3NhZ2UgdG89J2Vhc2Vtb2ItZGVtbyNjaGF0ZGVtb3VpXzE0Nzc0ODI3Mzk2OThAY29uZmVyZW5jZS5lYXNlbW9iLmNvbSc+CgkgPHggeG1sbnM9J2h0dHA6Ly9qYWJiZXIub3JnL3Byb3RvY29sL211YyN1c2VyJz4KCSA8aW52aXRlIHRvPSdlYXNlbW9iLWRlbW8jY2hhdGRlbW91aV9sd3oyQGVhc2Vtb2IuY29tJz4KCSA8cmVhc29uPmxpdXd6IGludml0ZSB5b3UgdG8gam9pbiBncm91cCAn6LCi6LCiJzwvcmVhc29uPgoJIDwvaW52aXRlPgoJIDwveD4KCSA8L21lc3NhZ2U+CgkgPCEtLSDmt7vliqDmiJDlkZjvvJpzZW5kIC0tPgoJIDxpcSBpZD0nMDlERkIxRTUtQzkzOS00QzQzLUI1QTctODAwMERBMEUzQjczX2Vhc2Vtb2Jfb2NjdXBhbnRzX2NoYW5nZV9hZmZpbGlhdGlvbicgdG89J2Vhc2Vtb2ItZGVtbyNjaGF0ZGVtb3VpXzE0Nzc0ODI3Mzk2OThAY29uZmVyZW5jZS5lYXNlbW9iLmNvbScgdHlwZT0nc2V0Jz4KCSA8cXVlcnkgeG1sbnM9J2h0dHA6Ly9qYWJiZXIub3JnL3Byb3RvY29sL211YyNhZG1pbic+CgkgPGl0ZW0gYWZmaWxpYXRpb249J21lbWJlcicgamlkPSdlYXNlbW9iLWRlbW8jY2hhdGRlbW91aV9sd3oyQGVhc2Vtb2IuY29tJy8+CgkgPC9xdWVyeT4KCSA8L2lxPgoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5hZGRHcm91cE1lbWJlcnMgPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIHZhciBzdWNGbiA9IG9wdGlvbnMuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICB2YXIgZXJyRm4gPSBvcHRpb25zLmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIHZhciBsaXN0ID0gb3B0aW9ucy5saXN0IHx8IFtdOwoJICAgIHZhciBhZmZpbGlhdGlvbiA9ICdhZG1pbic7CgkgICAgdmFyIHRvID0gdGhpcy5fZ2V0R3JvdXBKaWQob3B0aW9ucy5yb29tSWQpOwoJICAgIHZhciBpcSA9ICRpcSh7IHR5cGU6ICdzZXQnLCB0bzogdG8gfSk7CgkgICAgdmFyIHBpZWNlID0gaXEuYygncXVlcnknLCB7IHhtbG5zOiAnaHR0cDovL2phYmJlci5vcmcvcHJvdG9jb2wvbXVjIycgKyBhZmZpbGlhdGlvbiB9KTsKCSAgICB2YXIgbGVuID0gbGlzdC5sZW5ndGg7CgoJICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKCgkgICAgICAgIHZhciBuYW1lID0gbGlzdFtpXTsKCSAgICAgICAgdmFyIGppZCA9IF9nZXRKaWRCeU5hbWUobmFtZSwgdGhpcyk7CgoJICAgICAgICBwaWVjZSA9IHBpZWNlLmMoJ2l0ZW0nLCB7CgkgICAgICAgICAgICBhZmZpbGlhdGlvbjogJ21lbWJlcicsCgkgICAgICAgICAgICBqaWQ6IGppZAoJICAgICAgICB9KS51cCgpOwoKCSAgICAgICAgdmFyIGRvbSA9ICRtc2coewoJICAgICAgICAgICAgdG86IHRvCgkgICAgICAgIH0pLmMoJ3gnLCB7CgkgICAgICAgICAgICB4bWxuczogJ2h0dHA6Ly9qYWJiZXIub3JnL3Byb3RvY29sL211YyN1c2VyJwoJICAgICAgICB9KS5jKCdpbnZpdGUnLCB7CgkgICAgICAgICAgICB0bzogamlkCgkgICAgICAgIH0pLmMoJ3JlYXNvbicpLnQob3B0aW9ucy5yZWFzb24gfHwgJycpOwoKCSAgICAgICAgdGhpcy5zZW5kQ29tbWFuZChkb20udHJlZSgpKTsKCSAgICB9CgoJICAgIHRoaXMuY29udGV4dC5zdHJvcGhlQ29ubi5zZW5kSVEoaXEudHJlZSgpLCBmdW5jdGlvbiAobXNnSW5mbykgewoJICAgICAgICBzdWNGbihtc2dJbmZvKTsKCSAgICB9LCBmdW5jdGlvbiAoZXJySW5mbykgewoJICAgICAgICBlcnJGbihlcnJJbmZvKTsKCSAgICB9KTsKCX07CgoJLyoqCgkgKiDmjqXlj5fliqDlhaXnlLPor7cKCSAqCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtCgkgKiBAZGVwcmVjYXRlZAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5hY2NlcHRJbnZpdGVGcm9tR3JvdXAgPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHsKCSAgICAgICAgLy8gdGhlbiBzZW5kIHNlbmRBY2NlcHRJbnZpdGVNZXNzYWdlCgkgICAgICAgIC8vIGNvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmRBY2NlcHRJbnZpdGVNZXNzYWdlKG9wdG9pbnMpOwoJICAgIH07CgkgICAgdGhpcy5hZGRHcm91cE1lbWJlcnMob3B0aW9ucyk7Cgl9OwoKCS8qKgoJICog5ouS57ud5YWl576k55Sz6K+3CgkgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtCgkgKiBAZXhhbXBsZQoJIHRocm93IHJlcXVlc3QgZm9yIG5vdyDmmoLml7bkuI3lpITnkIbvvIznm7TmjqXkuKLlvIMKCgkgPG1lc3NhZ2UgdG89J2Vhc2Vtb2ItZGVtbyNjaGF0ZGVtb3VpX210MDAyQGVhc2Vtb2IuY29tJyBmcm9tPSdlYXNtZW9iLWRlbW8jY2hhdGRlbW91aV9tdDAwMUBlYXNlbW9iLmNvbScgaWQ9J0I4M0I3MjEwLUJDRkYtNERFRS1BQjI4LUI5RkU1NTc5QzFFMic+CgkgPHggeG1sbnM9J2h0dHA6Ly9qYWJiZXIub3JnL3Byb3RvY29sL211YyN1c2VyJz4KCSA8YXBwbHkgdG89J2Vhc2Vtb2ItZGVtbyNjaGF0ZGVtb3VpX2dyb3VwaWQxQGNvbmZlcmVuY2UuZWFzZW1vYi5jb20nIGZyb209J2Vhc21lb2ItZGVtbyNjaGF0ZGVtb3VpX210MDAxQGVhc2Vtb2IuY29tJyB0b05pY2s9J2xsbGxsbCc+CgkgPHJlYXNvbj5yZWplY3Q8L3JlYXNvbj4KCSA8L2FwcGx5PgoJIDwveD4KCSA8L21lc3NhZ2U+CgkgKiBAZGVwcmVjYXRlZAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5yZWplY3RJbnZpdGVGcm9tR3JvdXAgPSBmdW5jdGlvbiAob3B0aW9ucykgewoJICAgIC8vIHZhciBmcm9tID0gX2dldEppZEJ5TmFtZShvcHRpb25zLmZyb20sIHRoaXMpOwoJICAgIC8vIHZhciBkb20gPSAkbXNnKHsKCSAgICAvLyAgICAgZnJvbTogZnJvbSwKCSAgICAvLyAgICAgdG86IF9nZXRKaWRCeU5hbWUob3B0aW9ucy50bywgdGhpcykKCSAgICAvLyB9KS5jKCd4JywgewoJICAgIC8vICAgICB4bWxuczogJ2h0dHA6Ly9qYWJiZXIub3JnL3Byb3RvY29sL211YyN1c2VyJwoJICAgIC8vIH0pLmMoJ2FwcGx5JywgewoJICAgIC8vICAgICBmcm9tOiBmcm9tLAoJICAgIC8vICAgICB0bzogdGhpcy5fZ2V0R3JvdXBKaWQob3B0aW9ucy5ncm91cElkKSwKCSAgICAvLyAgICAgdG9OaWNrOiBvcHRpb25zLmdyb3VwTmFtZQoJICAgIC8vIH0pLmMoJ3JlYXNvbicpLnQob3B0aW9ucy5yZWFzb24gfHwgJycpOwoJICAgIC8vCgkgICAgLy8gdGhpcy5zZW5kQ29tbWFuZChkb20udHJlZSgpKTsKCX07CgoJLyoqCgkgKiDliJvlu7rnvqTnu4Qt5byC5q2lCgkgKiBAcGFyYW0ge09iamVjdH0gcCAtCgkgKiBAZGVwcmVjYXRlZAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVHcm91cEFzeW5jID0gZnVuY3Rpb24gKHApIHsKCSAgICB2YXIgcm9vbUlkID0gcC5mcm9tOwoJICAgIHZhciBtZSA9IHRoaXM7CgkgICAgdmFyIHRvUm9vbSA9IHRoaXMuX2dldEdyb3VwSmlkKHJvb21JZCk7CgkgICAgdmFyIHRvID0gdG9Sb29tICsgJy8nICsgdGhpcy5jb250ZXh0LnVzZXJJZDsKCSAgICB2YXIgb3B0aW9ucyA9IHRoaXMuZ3JvdXBPcHRpb247CgkgICAgdmFyIHN1YyA9IHAuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCgkgICAgLy8gQ3JlYXRpbmcgYSBSZXNlcnZlZCBSb29tCgkgICAgdmFyIGlxID0gJGlxKHsgdHlwZTogJ2dldCcsIHRvOiB0b1Jvb20gfSkuYygncXVlcnknLCB7IHhtbG5zOiAnaHR0cDovL2phYmJlci5vcmcvcHJvdG9jb2wvbXVjI293bmVyJyB9KTsKCgkgICAgLy8gU3Ryb3BoZS5pbmZvKCdzdGVwIDEgLS0tLS0tLS0tLScpOwoJICAgIC8vIFN0cm9waGUuaW5mbyhvcHRpb25zKTsKCSAgICBtZS5jb250ZXh0LnN0cm9waGVDb25uLnNlbmRJUShpcS50cmVlKCksIGZ1bmN0aW9uIChtc2dJbmZvKSB7CgkgICAgICAgIC8vIGNvbnNvbGUubG9nKG1zZ0luZm8pOwoKCSAgICAgICAgLy8gZm9yIGllIGhhY2sKCSAgICAgICAgaWYgKCdzZXRBdHRyaWJ1dGUnIGluIG1zZ0luZm8pIHsKCSAgICAgICAgICAgIC8vIFN0cm9waGUuaW5mbygnc3RlcCAzIC0tLS0tLS0tLS0nKTsKCSAgICAgICAgICAgIHZhciB4ID0gbXNnSW5mby5nZXRFbGVtZW50c0J5VGFnTmFtZSgneCcpWzBdOwoJICAgICAgICAgICAgeC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnc3VibWl0Jyk7CgkgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICAvLyBTdHJvcGhlLmluZm8oJ3N0ZXAgNCAtLS0tLS0tLS0tJyk7CgkgICAgICAgICAgICBTdHJvcGhlLmZvckVhY2hDaGlsZChtc2dJbmZvLCAneCcsIGZ1bmN0aW9uIChmaWVsZCkgewoJICAgICAgICAgICAgICAgIGZpZWxkLnNldEF0dHJpYnV0ZSgndHlwZScsICdzdWJtaXQnKTsKCSAgICAgICAgICAgIH0pOwoJICAgICAgICB9CgoJICAgICAgICBTdHJvcGhlLmluZm8oJ3N0ZXAgNSAtLS0tLS0tLS0tJyk7CgkgICAgICAgIFN0cm9waGUuZm9yRWFjaENoaWxkKHgsICdmaWVsZCcsIGZ1bmN0aW9uIChmaWVsZCkgewoJICAgICAgICAgICAgdmFyIGZpZWxkVmFyID0gZmllbGQuZ2V0QXR0cmlidXRlKCd2YXInKTsKCSAgICAgICAgICAgIHZhciB2YWx1ZURvbSA9IGZpZWxkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd2YWx1ZScpWzBdOwoJICAgICAgICAgICAgU3Ryb3BoZS5pbmZvKGZpZWxkVmFyKTsKCSAgICAgICAgICAgIHN3aXRjaCAoZmllbGRWYXIpIHsKCSAgICAgICAgICAgICAgICBjYXNlICdtdWMjcm9vbWNvbmZpZ19tYXh1c2Vycyc6CgkgICAgICAgICAgICAgICAgICAgIF9zZXRUZXh0KHZhbHVlRG9tLCBvcHRpb25zLm9wdGlvbnNNYXhVc2VycyB8fCAyMDApOwoJICAgICAgICAgICAgICAgICAgICBicmVhazsKCSAgICAgICAgICAgICAgICBjYXNlICdtdWMjcm9vbWNvbmZpZ19yb29tbmFtZSc6CgkgICAgICAgICAgICAgICAgICAgIF9zZXRUZXh0KHZhbHVlRG9tLCBvcHRpb25zLnN1YmplY3QgfHwgJycpOwoJICAgICAgICAgICAgICAgICAgICBicmVhazsKCSAgICAgICAgICAgICAgICBjYXNlICdtdWMjcm9vbWNvbmZpZ19yb29tZGVzYyc6CgkgICAgICAgICAgICAgICAgICAgIF9zZXRUZXh0KHZhbHVlRG9tLCBvcHRpb25zLmRlc2NyaXB0aW9uIHx8ICcnKTsKCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkgICAgICAgICAgICAgICAgY2FzZSAnbXVjI3Jvb21jb25maWdfcHVibGljcm9vbSc6CgkgICAgICAgICAgICAgICAgICAgIC8vIHB1YmxpYyAxCgkgICAgICAgICAgICAgICAgICAgIF9zZXRUZXh0KHZhbHVlRG9tLCArb3B0aW9ucy5vcHRpb25zUHVibGljKTsKCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkgICAgICAgICAgICAgICAgY2FzZSAnbXVjI3Jvb21jb25maWdfbWVtYmVyc29ubHknOgoJICAgICAgICAgICAgICAgICAgICBfc2V0VGV4dCh2YWx1ZURvbSwgK29wdGlvbnMub3B0aW9uc01lbWJlcnNPbmx5KTsKCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkgICAgICAgICAgICAgICAgY2FzZSAnbXVjI3Jvb21jb25maWdfbW9kZXJhdGVkcm9vbSc6CgkgICAgICAgICAgICAgICAgICAgIF9zZXRUZXh0KHZhbHVlRG9tLCArb3B0aW9ucy5vcHRpb25zTW9kZXJhdGUpOwoJICAgICAgICAgICAgICAgICAgICBicmVhazsKCSAgICAgICAgICAgICAgICBjYXNlICdtdWMjcm9vbWNvbmZpZ19wZXJzaXN0ZW50cm9vbSc6CgkgICAgICAgICAgICAgICAgICAgIF9zZXRUZXh0KHZhbHVlRG9tLCAxKTsKCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkgICAgICAgICAgICAgICAgY2FzZSAnbXVjI3Jvb21jb25maWdfYWxsb3dpbnZpdGVzJzoKCSAgICAgICAgICAgICAgICAgICAgX3NldFRleHQodmFsdWVEb20sICtvcHRpb25zLm9wdGlvbnNBbGxvd0ludml0ZXMpOwoJICAgICAgICAgICAgICAgICAgICBicmVhazsKCSAgICAgICAgICAgICAgICBjYXNlICdtdWMjcm9vbWNvbmZpZ19hbGxvd3Zpc2l0b3JuaWNrY2hhbmdlJzoKCSAgICAgICAgICAgICAgICAgICAgX3NldFRleHQodmFsdWVEb20sIDApOwoJICAgICAgICAgICAgICAgICAgICBicmVhazsKCSAgICAgICAgICAgICAgICBjYXNlICdtdWMjcm9vbWNvbmZpZ19hbGxvd3Zpc2l0b3JzdGF0dXMnOgoJICAgICAgICAgICAgICAgICAgICBfc2V0VGV4dCh2YWx1ZURvbSwgMCk7CgkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJICAgICAgICAgICAgICAgIGNhc2UgJ2FsbG93X3ByaXZhdGVfbWVzc2FnZXMnOgoJICAgICAgICAgICAgICAgICAgICBfc2V0VGV4dCh2YWx1ZURvbSwgMCk7CgkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJICAgICAgICAgICAgICAgIGNhc2UgJ2FsbG93X3ByaXZhdGVfbWVzc2FnZXNfZnJvbV92aXNpdG9ycyc6CgkgICAgICAgICAgICAgICAgICAgIF9zZXRUZXh0KHZhbHVlRG9tLCAnbm9ib2R5Jyk7CgkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJICAgICAgICAgICAgICAgIGRlZmF1bHQ6CgkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJICAgICAgICAgICAgfQoJICAgICAgICB9KTsKCgkgICAgICAgIHZhciBpcSA9ICRpcSh7IHRvOiB0b1Jvb20sIHR5cGU6ICdzZXQnIH0pLmMoJ3F1ZXJ5JywgeyB4bWxuczogJ2h0dHA6Ly9qYWJiZXIub3JnL3Byb3RvY29sL211YyNvd25lcicgfSkuY25vZGUoeCk7CgoJICAgICAgICBtZS5jb250ZXh0LnN0cm9waGVDb25uLnNlbmRJUShpcS50cmVlKCksIGZ1bmN0aW9uIChtc2dJbmZvKSB7CgkgICAgICAgICAgICBtZS5hZGRHcm91cE1lbWJlcnMoewoJICAgICAgICAgICAgICAgIGxpc3Q6IG9wdGlvbnMubWVtYmVycywKCSAgICAgICAgICAgICAgICByb29tSWQ6IHJvb21JZAoJICAgICAgICAgICAgfSk7CgoJICAgICAgICAgICAgc3VjKG9wdGlvbnMpOwoJICAgICAgICB9LCBmdW5jdGlvbiAoZXJySW5mbykgewoJICAgICAgICAgICAgLy8gZXJyRm4oZXJySW5mbyk7CgkgICAgICAgIH0pOwoJICAgICAgICAvLyBzdWNGbihtc2dJbmZvKTsKCSAgICB9LCBmdW5jdGlvbiAoZXJySW5mbykgewoJICAgICAgICAvLyBlcnJGbihlcnJJbmZvKTsKCSAgICB9KTsKCX07CgoJLyoqCgkgKiDliJvlu7rnvqTnu4QKCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0KCSAqIEBkZXByZWNhdGVkCgkgKiBAZXhhbXBsZQoJICogMS4g5Yib5bu655Sz6K+3IC0+IOW+l+WIsOaIv+S4u+i6q+S7vQoJICogMi4g6I635Y+W5oi/5Li75L+h5oGvIC0+IOW+l+WIsOaIv+mXtGZvcm0KCSAqIDMuIOWujOWWhOaIv+mXtGZvcm0gLT4g5Yib5bu65oiQ5YqfCgkgKiA0LiDmt7vliqDmiL/pl7TmiJDlkZgKCSAqIDUuIOa2iOaBr+mAmuefpeaIkOWRmAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVHcm91cCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CgkgICAgdGhpcy5ncm91cE9wdGlvbiA9IG9wdGlvbnM7CgkgICAgdmFyIHJvb21JZCA9ICtuZXcgRGF0ZSgpOwoJICAgIHZhciB0b1Jvb20gPSB0aGlzLl9nZXRHcm91cEppZChyb29tSWQpOwoJICAgIHZhciB0byA9IHRvUm9vbSArICcvJyArIHRoaXMuY29udGV4dC51c2VySWQ7CgoJICAgIHZhciBwcmVzID0gJHByZXMoeyB0bzogdG8gfSkuYygneCcsIHsgeG1sbnM6ICdodHRwOi8vamFiYmVyLm9yZy9wcm90b2NvbC9tdWMnIH0pLnVwKCkuYygnY3JlYXRlJywgeyB4bWxuczogJ2h0dHA6Ly9qYWJiZXIub3JnL3Byb3RvY29sL211YycgfSkudXAoKTsKCgkgICAgLy8gY3JlYXRlR3JvdXBBQ0sKCSAgICB0aGlzLnNlbmRDb21tYW5kKHByZXMudHJlZSgpKTsKCX07CgoJLyoqCgkgKiDpgJrov4dSZXN0RnVsIEFQSeaOpeWPo+WIm+W7uue+pOe7hAoJICogQHBhcmFtIG9wdCB7T2JqZWN0fSAtIOe+pOe7hOS/oeaBrwoJICogQHBhcmFtIG9wdC5kYXRhLmdyb3VwbmFtZSB7c3RyaW5nfSAtIOe+pOe7hOWQjQoJICogQHBhcmFtIG9wdC5kYXRhLmRlc2Mge3N0cmluZ30gLSDnvqTnu4Tmj4/ov7AKCSAqIEBwYXJhbSBvcHQuZGF0YS5tZW1iZXJzIHtzdHJpbmdbXX0gLSDnvqTlpb3lj4vliJfooagKCSAqIEBwYXJhbSBvcHQuZGF0YS5wdWJsaWMge0Jvb2xlYW59IC0gdHJ1ZTog5YWs5byA576k77yMZmFsc2U6IOengeaciee+pAoJICogQHBhcmFtIG9wdC5kYXRhLmFwcHJvdmFsIHtCb29sZWFufSAtIOWJjeaPkO+8mm9wdC5kYXRhLnB1YmxpYz10cnVlLCB0cnVlOiDliqDnvqTpnIDopoHlrqHmibnvvIxmYWxzZTog5Yqg576k5peg6ZyA5a6h5om5CgkgKiBAcGFyYW0gb3B0LmRhdGEuYWxsb3dpbnZpdGVzIHtCb29sZWFufSAtIOWJjeaPkO+8mm9wdC5kYXRhLnB1YmxpYz1mYWxzZSwgdHJ1ZTog5YWB6K645oiQ5ZGY6YKA6K+35YWl576k77yMZmFsc2U6IOS4jeWFgeiuuOaIkOWRmOmCgOivt+WFpee+pAoJICogQHNpbmNlIDEuNC4xMQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVHcm91cE5ldyA9IGZ1bmN0aW9uIChvcHQpIHsKCSAgICBvcHQuZGF0YS5vd25lciA9IHRoaXMudXNlcjsKCSAgICB2YXIgb3B0aW9ucyA9IHsKCSAgICAgICAgdXJsOiB0aGlzLmFwaVVybCArICcvJyArIHRoaXMub3JnTmFtZSArICcvJyArIHRoaXMuYXBwTmFtZSArICcvY2hhdGdyb3VwcycsCgkgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCgkgICAgICAgIHR5cGU6ICdQT1NUJywKCSAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkob3B0LmRhdGEpLAoJICAgICAgICBoZWFkZXJzOiB7CgkgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIHRoaXMudG9rZW4sCgkgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCgkgICAgICAgIH0KCSAgICB9OwoJICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uIChyZXNwRGF0YSkgewoJICAgICAgICBvcHQuc3VjY2VzcyhyZXNwRGF0YSk7CgkgICAgICAgIHRoaXMub25DcmVhdGVHcm91cChyZXNwRGF0YSk7CgkgICAgfS5iaW5kKHRoaXMpOwoJICAgIG9wdGlvbnMuZXJyb3IgPSBvcHQuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgV2ViSU0udXRpbHMuYWpheChvcHRpb25zKTsKCX07CgoJLyoqCgkgKiDpgJrov4dSZXN0RnVsIEFQSeWxj+iUvee+pOe7hO+8jOWPquWvueenu+WKqOerr+acieaViAoJICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLQoJICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuZ3JvdXBJZCAtIOmcgOimgeWxj+iUveeahOe+pOe7hElECgkgKiBAc2luY2UgMS40LjExCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmJsb2NrR3JvdXAgPSBmdW5jdGlvbiAob3B0KSB7CgkgICAgdmFyIGdyb3VwSWQgPSBvcHQuZ3JvdXBJZDsKCSAgICBncm91cElkID0gJ25vdGlmaWNhdGlvbl9pZ25vcmVfJyArIGdyb3VwSWQ7CgkgICAgdmFyIGRhdGEgPSB7CgkgICAgICAgIGVudGl0aWVzOiBbXQoJICAgIH07CgkgICAgZGF0YS5lbnRpdGllc1swXSA9IHt9OwoJICAgIGRhdGEuZW50aXRpZXNbMF1bZ3JvdXBJZF0gPSB0cnVlOwoJICAgIHZhciBvcHRpb25zID0gewoJICAgICAgICB0eXBlOiAnUFVUJywKCSAgICAgICAgdXJsOiB0aGlzLmFwaVVybCArICcvJyArIHRoaXMub3JnTmFtZSArICcvJyArIHRoaXMuYXBwTmFtZSArICcvJyArICd1c2VycycgKyAnLycgKyB0aGlzLnVzZXIsCgkgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KGRhdGEpLAoJICAgICAgICBoZWFkZXJzOiB7CgkgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIHRoaXMudG9rZW4sCgkgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCgkgICAgICAgIH0KCSAgICB9OwoJICAgIG9wdGlvbnMuc3VjY2VzcyA9IG9wdC5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIG9wdGlvbnMuZXJyb3IgPSBvcHQuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgV2ViSU0udXRpbHMuYWpheChvcHRpb25zKTsKCX07CgoJLyoqCgkgKiDpgJrov4dSZXN0RnVsIEFQSeWPkeWHuuWFpee+pOeUs+ivtwoJICogQHBhcmFtIHtPYmplY3R9IG9wdCAtCgkgKiBAcGFyYW0ge3N0cmluZ30gb3B0Lmdyb3VwSWQgLSDnvqTnu4RJRAoJICogQHNpbmNlIDEuNC4xMQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5qb2luR3JvdXAgPSBmdW5jdGlvbiAob3B0KSB7CgkgICAgdmFyIG9wdGlvbnMgPSB7CgkgICAgICAgIHVybDogdGhpcy5hcGlVcmwgKyAnLycgKyB0aGlzLm9yZ05hbWUgKyAnLycgKyB0aGlzLmFwcE5hbWUgKyAnLycgKyAnY2hhdGdyb3VwcycgKyAnLycgKyBvcHQuZ3JvdXBJZCArICcvJyArICdhcHBseScsCgkgICAgICAgIHR5cGU6ICdQT1NUJywKCSAgICAgICAgZGF0YVR5cGU6ICdqc29uJywKCSAgICAgICAgaGVhZGVyczogewoJICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyB0aGlzLnRva2VuLAoJICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwoJICAgICAgICB9CgkgICAgfTsKCSAgICBvcHRpb25zLnN1Y2Nlc3MgPSBvcHQuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICBvcHRpb25zLmVycm9yID0gb3B0LmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIFdlYklNLnV0aWxzLmFqYXgob3B0aW9ucyk7Cgl9OwoKCS8qKgoJICog6YCa6L+HUmVzdEZ1bCBBUEnliIbpobXojrflj5bnvqTnu4TliJfooagKCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHQgLQoJICogQHBhcmFtIHtOdW1iZXJ9IG9wdC5saW1pdCAtIOavj+S4gOmhtee+pOe7hOeahOacgOWkp+aVsOebrgoJICogQHBhcmFtIHtzdHJpbmd9IG9wdC5jdXJzb3I9bnVsbCAtIOa4uOagh++8jOWmguaenOaVsOaNrui/mOacieS4i+S4gOmhte+8jEFQSSDov5Tlm57lgLzkvJrljIXlkKvmraTlrZfmrrXvvIzkvKDpgJLmraTlrZfmrrXlj6/ojrflj5bkuIvkuIDpobXnmoTmlbDmja7vvIzkuLpudWxs5pe26I635Y+W56ys5LiA6aG15pWw5o2uCgkgKiBAc2luY2UgMS40LjExCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmxpc3RHcm91cHMgPSBmdW5jdGlvbiAob3B0KSB7CgkgICAgdmFyIHJlcXVlc3REYXRhID0gW107CgkgICAgcmVxdWVzdERhdGFbJ2xpbWl0J10gPSBvcHQubGltaXQ7CgkgICAgcmVxdWVzdERhdGFbJ2N1cnNvciddID0gb3B0LmN1cnNvcjsKCSAgICBpZiAoIXJlcXVlc3REYXRhWydjdXJzb3InXSkgZGVsZXRlIHJlcXVlc3REYXRhWydjdXJzb3InXTsKCSAgICBpZiAoaXNOYU4ob3B0LmxpbWl0KSkgewoJICAgICAgICB0aHJvdyAnVGhlIHBhcmFtZXRlciBcImxpbWl0XCIgc2hvdWxkIGJlIGEgbnVtYmVyJzsKCSAgICAgICAgcmV0dXJuOwoJICAgIH0KCSAgICB2YXIgb3B0aW9ucyA9IHsKCSAgICAgICAgdXJsOiB0aGlzLmFwaVVybCArICcvJyArIHRoaXMub3JnTmFtZSArICcvJyArIHRoaXMuYXBwTmFtZSArICcvcHVibGljY2hhdGdyb3VwcycsCgkgICAgICAgIHR5cGU6ICdHRVQnLAoJICAgICAgICBkYXRhVHlwZTogJ2pzb24nLAoJICAgICAgICBkYXRhOiByZXF1ZXN0RGF0YSwKCSAgICAgICAgaGVhZGVyczogewoJICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyB0aGlzLnRva2VuLAoJICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwoJICAgICAgICB9CgkgICAgfTsKCSAgICBvcHRpb25zLnN1Y2Nlc3MgPSBvcHQuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICBvcHRpb25zLmVycm9yID0gb3B0LmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIFdlYklNLnV0aWxzLmFqYXgob3B0aW9ucyk7Cgl9OwoKCS8qKgoJICog6YCa6L+HUmVzdEZ1bCBBUEnmoLnmja5ncm91cElk6I635Y+W576k57uE6K+m5oOFCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0IC0KCSAqIEBwYXJhbSB7c3RyaW5nfSBvcHQuZ3JvdXBJZCAtIOe+pOe7hElECgkgKiBAc2luY2UgMS40LjExCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmdldEdyb3VwSW5mbyA9IGZ1bmN0aW9uIChvcHQpIHsKCSAgICB2YXIgb3B0aW9ucyA9IHsKCSAgICAgICAgdXJsOiB0aGlzLmFwaVVybCArICcvJyArIHRoaXMub3JnTmFtZSArICcvJyArIHRoaXMuYXBwTmFtZSArICcvY2hhdGdyb3Vwcy8nICsgb3B0Lmdyb3VwSWQsCgkgICAgICAgIHR5cGU6ICdHRVQnLAoJICAgICAgICBkYXRhVHlwZTogJ2pzb24nLAoJICAgICAgICBoZWFkZXJzOiB7CgkgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIHRoaXMudG9rZW4sCgkgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCgkgICAgICAgIH0KCSAgICB9OwoJICAgIG9wdGlvbnMuc3VjY2VzcyA9IG9wdC5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIG9wdGlvbnMuZXJyb3IgPSBvcHQuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgV2ViSU0udXRpbHMuYWpheChvcHRpb25zKTsKCX07CgoJLyoqCgkgKiDpgJrov4dSZXN0RnVsIEFQSeWIl+WHuuafkOeUqOaIt+aJgOWKoOWFpeeahOaJgOaciee+pOe7hAoJICogQHBhcmFtIHtPYmplY3R9IG9wdCAtIOWKoOWFpeS4pOS4quWbnuiwg+WHveaVsOWNs+WPr++8jHN1Y2Nlc3MsIGVycm9yCgkgKiBAc2luY2UgMS40LjExCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmdldEdyb3VwID0gZnVuY3Rpb24gKG9wdCkgewoJICAgIHZhciBvcHRpb25zID0gewoJICAgICAgICB1cmw6IHRoaXMuYXBpVXJsICsgJy8nICsgdGhpcy5vcmdOYW1lICsgJy8nICsgdGhpcy5hcHBOYW1lICsgJy8nICsgJ3VzZXJzJyArICcvJyArIHRoaXMudXNlciArICcvJyArICdqb2luZWRfY2hhdGdyb3VwcycsCgkgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCgkgICAgICAgIHR5cGU6ICdHRVQnLAoJICAgICAgICBoZWFkZXJzOiB7CgkgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIHRoaXMudG9rZW4sCgkgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCgkgICAgICAgIH0KCSAgICB9OwoJICAgIG9wdGlvbnMuc3VjY2VzcyA9IG9wdC5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIG9wdGlvbnMuZXJyb3IgPSBvcHQuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgV2ViSU0udXRpbHMuYWpheChvcHRpb25zKTsKCX07CgoJLyoqCgkgKiDpgJrov4dSZXN0RnVsIEFQSeWIhumhteWIl+WHuue+pOe7hOeahOaJgOacieaIkOWRmAoJICogQHBhcmFtIHtPYmplY3R9IG9wdCAtCgkgKiBAcGFyYW0ge051bWJlcn0gb3B0LnBhZ2VOdW0gLSDpobXnoIEKCSAqIEBwYXJhbSB7TnVtYmVyfSBvcHQucGFnZVNpemUgLSDmr4/kuIDpobXnmoTmnIDlpKfnvqTmiJDlkZjmlbDnm64KCSAqIEBwYXJhbSB7c3RyaW5nfSBvcHQuZ3JvdXBJZCAtIOe+pElECgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmxpc3RHcm91cE1lbWJlciA9IGZ1bmN0aW9uIChvcHQpIHsKCSAgICBpZiAoaXNOYU4ob3B0LnBhZ2VOdW0pIHx8IG9wdC5wYWdlTnVtIDw9IDApIHsKCSAgICAgICAgdGhyb3cgJ1RoZSBwYXJhbWV0ZXIgXCJwYWdlTnVtXCIgc2hvdWxkIGJlIGEgcG9zaXRpdmUgbnVtYmVyJzsKCSAgICAgICAgcmV0dXJuOwoJICAgIH0gZWxzZSBpZiAoaXNOYU4ob3B0LnBhZ2VTaXplKSB8fCBvcHQucGFnZVNpemUgPD0gMCkgewoJICAgICAgICB0aHJvdyAnVGhlIHBhcmFtZXRlciBcInBhZ2VTaXplXCIgc2hvdWxkIGJlIGEgcG9zaXRpdmUgbnVtYmVyJzsKCSAgICAgICAgcmV0dXJuOwoJICAgIH0gZWxzZSBpZiAob3B0Lmdyb3VwSWQgPT09IG51bGwgJiYgdHlwZW9mIG9wdC5ncm91cElkID09PSAndW5kZWZpbmVkJykgewoJICAgICAgICB0aHJvdyAnVGhlIHBhcmFtZXRlciBcImdyb3VwSWRcIiBzaG91bGQgYmUgYWRkZWQnOwoJICAgICAgICByZXR1cm47CgkgICAgfQoJICAgIHZhciByZXF1ZXN0RGF0YSA9IFtdLAoJICAgICAgICBncm91cElkID0gb3B0Lmdyb3VwSWQ7CgkgICAgcmVxdWVzdERhdGFbJ3BhZ2VudW0nXSA9IG9wdC5wYWdlTnVtOwoJICAgIHJlcXVlc3REYXRhWydwYWdlc2l6ZSddID0gb3B0LnBhZ2VTaXplOwoJICAgIHZhciBvcHRpb25zID0gewoJICAgICAgICB1cmw6IHRoaXMuYXBpVXJsICsgJy8nICsgdGhpcy5vcmdOYW1lICsgJy8nICsgdGhpcy5hcHBOYW1lICsgJy9jaGF0Z3JvdXBzJyArICcvJyArIGdyb3VwSWQgKyAnL3VzZXJzJywKCSAgICAgICAgZGF0YVR5cGU6ICdqc29uJywKCSAgICAgICAgdHlwZTogJ0dFVCcsCgkgICAgICAgIGRhdGE6IHJlcXVlc3REYXRhLAoJICAgICAgICBoZWFkZXJzOiB7CgkgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIHRoaXMudG9rZW4sCgkgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCgkgICAgICAgIH0KCSAgICB9OwoJICAgIG9wdGlvbnMuc3VjY2VzcyA9IG9wdC5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIG9wdGlvbnMuZXJyb3IgPSBvcHQuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgV2ViSU0udXRpbHMuYWpheChvcHRpb25zKTsKCX07Cgljb25uZWN0aW9uLnByb3RvdHlwZS5saXN0Um9vbU1lbWJlciA9IGZ1bmN0aW9uIChvcHQpIHsKCSAgICBpZiAoaXNOYU4ob3B0LnBhZ2VOdW0pIHx8IG9wdC5wYWdlTnVtIDw9IDApIHsKCSAgICAgICAgdGhyb3cgJ1RoZSBwYXJhbWV0ZXIgXCJwYWdlTnVtXCIgc2hvdWxkIGJlIGEgcG9zaXRpdmUgbnVtYmVyJzsKCSAgICAgICAgcmV0dXJuOwoJICAgIH0gZWxzZSBpZiAoaXNOYU4ob3B0LnBhZ2VTaXplKSB8fCBvcHQucGFnZVNpemUgPD0gMCkgewoJICAgICAgICB0aHJvdyAnVGhlIHBhcmFtZXRlciBcInBhZ2VTaXplXCIgc2hvdWxkIGJlIGEgcG9zaXRpdmUgbnVtYmVyJzsKCSAgICAgICAgcmV0dXJuOwoJICAgIH0gZWxzZSBpZiAob3B0Lmdyb3VwSWQgPT09IG51bGwgJiYgdHlwZW9mIG9wdC5ncm91cElkID09PSAndW5kZWZpbmVkJykgewoJICAgICAgICB0aHJvdyAnVGhlIHBhcmFtZXRlciBcImdyb3VwSWRcIiBzaG91bGQgYmUgYWRkZWQnOwoJICAgICAgICByZXR1cm47CgkgICAgfQoJICAgIHZhciByZXF1ZXN0RGF0YSA9IFtdLAoJICAgICAgICBncm91cElkID0gb3B0Lmdyb3VwSWQ7CgkgICAgcmVxdWVzdERhdGFbJ3BhZ2VudW0nXSA9IG9wdC5wYWdlTnVtOwoJICAgIHJlcXVlc3REYXRhWydwYWdlc2l6ZSddID0gb3B0LnBhZ2VTaXplOwoJICAgIHZhciBvcHRpb25zID0gewoJICAgICAgICB1cmw6IHRoaXMuYXBpVXJsICsgJy8nICsgdGhpcy5vcmdOYW1lICsgJy8nICsgdGhpcy5hcHBOYW1lICsgJy9jaGF0cm9vbXMnICsgJy8nICsgZ3JvdXBJZCArICcvdXNlcnMnLAoJICAgICAgICBkYXRhVHlwZTogJ2pzb24nLAoJICAgICAgICB0eXBlOiAnR0VUJywKCSAgICAgICAgZGF0YTogcmVxdWVzdERhdGEsCgkgICAgICAgIGhlYWRlcnM6IHsKCSAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgdGhpcy50b2tlbiwKCSAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKCSAgICAgICAgfQoJICAgIH07CgkgICAgb3B0aW9ucy5zdWNjZXNzID0gb3B0LnN1Y2Nlc3MgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgb3B0aW9ucy5lcnJvciA9IG9wdC5lcnJvciB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICBXZWJJTS51dGlscy5hamF4KG9wdGlvbnMpOwoJfTsKCgkvKioKCSAqIOmAmui/h1Jlc3RGdWwgQVBJ56aB5q2i576k55So5oi35Y+R6KiACgkgKiBAcGFyYW0ge09iamVjdH0gb3B0IC0KCSAqIEBwYXJhbSB7c3RyaW5nfSBvcHQudXNlcm5hbWUgLSDooqvnpoHoqIDnmoTnvqTmiJDlkZjnmoRJRAoJICogQHBhcmFtIHtOdW1iZXJ9IG9wdC5tdXRlRHVyYXRpb24gLSDooqvnpoHoqIDnmoTml7bplb8KCSAqIEBwYXJhbSB7c3RyaW5nfSBvcHQuZ3JvdXBJZCAtIOe+pElECgkgKiBAc2luY2UgMS40LjExCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLm11dGUgPSBmdW5jdGlvbiAob3B0KSB7CgkgICAgdmFyIGdyb3VwSWQgPSBvcHQuZ3JvdXBJZCwKCSAgICAgICAgcmVxdWVzdERhdGEgPSB7CgkgICAgICAgICJ1c2VybmFtZXMiOiBbb3B0LnVzZXJuYW1lXSwKCSAgICAgICAgIm11dGVfZHVyYXRpb24iOiBvcHQubXV0ZUR1cmF0aW9uCgkgICAgfSwKCSAgICAgICAgb3B0aW9ucyA9IHsKCSAgICAgICAgdXJsOiB0aGlzLmFwaVVybCArICcvJyArIHRoaXMub3JnTmFtZSArICcvJyArIHRoaXMuYXBwTmFtZSArICcvJyArICdjaGF0Z3JvdXBzJyArICcvJyArIGdyb3VwSWQgKyAnLycgKyAnbXV0ZScsCgkgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCgkgICAgICAgIHR5cGU6ICdQT1NUJywKCSAgICAgICAgaGVhZGVyczogewoJICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyB0aGlzLnRva2VuLAoJICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwoJICAgICAgICB9LAoJICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0RGF0YSkKCSAgICB9OwoJICAgIG9wdGlvbnMuc3VjY2VzcyA9IG9wdC5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIG9wdGlvbnMuZXJyb3IgPSBvcHQuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgV2ViSU0udXRpbHMuYWpheChvcHRpb25zKTsKCX07CgoJLyoqCgkgKiDpgJrov4dSZXN0RnVsIEFQSeWPlua2iOWvueeUqOaIt+emgeiogAoJICogQHBhcmFtIHtPYmplY3R9IG9wdCAtCgkgKiBAcGFyYW0ge3N0cmluZ30gb3B0Lmdyb3VwSWQgLSDnvqRJRAoJICogQHBhcmFtIHtzdHJpbmd9IG9wdC51c2VybmFtZSAtIOiiq+WPlua2iOemgeiogOeahOe+pOeUqOaIt0lECgkgKiBAc2luY2UgMS40LjExCgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZU11dGUgPSBmdW5jdGlvbiAob3B0KSB7CgkgICAgdmFyIGdyb3VwSWQgPSBvcHQuZ3JvdXBJZCwKCSAgICAgICAgdXNlcm5hbWUgPSBvcHQudXNlcm5hbWU7CgkgICAgdmFyIG9wdGlvbnMgPSB7CgkgICAgICAgIHVybDogdGhpcy5hcGlVcmwgKyAnLycgKyB0aGlzLm9yZ05hbWUgKyAnLycgKyB0aGlzLmFwcE5hbWUgKyAnLycgKyAnY2hhdGdyb3VwcycgKyAnLycgKyBncm91cElkICsgJy8nICsgJ211dGUnICsgJy8nICsgdXNlcm5hbWUsCgkgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCgkgICAgICAgIHR5cGU6ICdERUxFVEUnLAoJICAgICAgICBoZWFkZXJzOiB7CgkgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIHRoaXMudG9rZW4sCgkgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCgkgICAgICAgIH0KCSAgICB9OwoJICAgIG9wdGlvbnMuc3VjY2VzcyA9IG9wdC5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIG9wdGlvbnMuZXJyb3IgPSBvcHQuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgV2ViSU0udXRpbHMuYWpheChvcHRpb25zKTsKCX07CgoJLyoqCgkgKiDpgJrov4dSZXN0RnVsIEFQSeiOt+WPlue+pOe7hOS4i+aJgOacieeuoeeQhuWRmAoJICogQHBhcmFtIHtPYmplY3R9IG9wdCAtCgkgKiBAcGFyYW0ge3N0cmluZ30gb3B0Lmdyb3VwSWQgLSDnvqTnu4RJRAoJICogQHNpbmNlIDEuNC4xMQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5nZXRHcm91cEFkbWluID0gZnVuY3Rpb24gKG9wdCkgewoJICAgIHZhciBncm91cElkID0gb3B0Lmdyb3VwSWQ7CgkgICAgdmFyIG9wdGlvbnMgPSB7CgkgICAgICAgIHVybDogdGhpcy5hcGlVcmwgKyAnLycgKyB0aGlzLm9yZ05hbWUgKyAnLycgKyB0aGlzLmFwcE5hbWUgKyAnL2NoYXRncm91cHMnICsgJy8nICsgZ3JvdXBJZCArICcvYWRtaW4nLAoJICAgICAgICBkYXRhVHlwZTogJ2pzb24nLAoJICAgICAgICB0eXBlOiAnR0VUJywKCSAgICAgICAgaGVhZGVyczogewoJICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyB0aGlzLnRva2VuLAoJICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwoJICAgICAgICB9CgkgICAgfTsKCSAgICBvcHRpb25zLnN1Y2Nlc3MgPSBvcHQuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICBvcHRpb25zLmVycm9yID0gb3B0LmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIFdlYklNLnV0aWxzLmFqYXgob3B0aW9ucyk7Cgl9OwoKCS8qKgoJICog6YCa6L+HUmVzdEZ1bCBBUEnojrflj5bnvqTnu4TkuIvmiYDmnInooqvnpoHoqIDmiJDlkZgKCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHQgLQoJICogQHBhcmFtIHtzdHJpbmd9IG9wdC5ncm91cElkIC0g576k57uESUQKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0TXV0ZWQgPSBmdW5jdGlvbiAob3B0KSB7CgkgICAgdmFyIGdyb3VwSWQgPSBvcHQuZ3JvdXBJZDsKCSAgICB2YXIgb3B0aW9ucyA9IHsKCSAgICAgICAgdXJsOiB0aGlzLmFwaVVybCArICcvJyArIHRoaXMub3JnTmFtZSArICcvJyArIHRoaXMuYXBwTmFtZSArICcvY2hhdGdyb3VwcycgKyAnLycgKyBncm91cElkICsgJy9tdXRlJywKCSAgICAgICAgZGF0YVR5cGU6ICdqc29uJywKCSAgICAgICAgdHlwZTogJ0dFVCcsCgkgICAgICAgIGhlYWRlcnM6IHsKCSAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgdGhpcy50b2tlbiwKCSAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKCSAgICAgICAgfQoJICAgIH07CgkgICAgb3B0aW9ucy5zdWNjZXNzID0gb3B0LnN1Y2Nlc3MgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgb3B0aW9ucy5lcnJvciA9IG9wdC5lcnJvciB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICBXZWJJTS51dGlscy5hamF4KG9wdGlvbnMpOwoJfTsKCgkvKioKCSAqIOmAmui/h1Jlc3RGdWwgQVBJ6K6+572u576k566h55CG5ZGYCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0IC0KCSAqIEBwYXJhbSB7c3RyaW5nfSBvcHQuZ3JvdXBJZCAtIOe+pOe7hElECgkgKiBAcGFyYW0ge3N0cmluZ30gb3B0LnVzZXJuYW1lIC0g55So5oi3SUQKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuc2V0QWRtaW4gPSBmdW5jdGlvbiAob3B0KSB7CgkgICAgdmFyIGdyb3VwSWQgPSBvcHQuZ3JvdXBJZCwKCSAgICAgICAgcmVxdWVzdERhdGEgPSB7CgkgICAgICAgIG5ld2FkbWluOiBvcHQudXNlcm5hbWUKCSAgICB9LAoJICAgICAgICBvcHRpb25zID0gewoJICAgICAgICB1cmw6IHRoaXMuYXBpVXJsICsgJy8nICsgdGhpcy5vcmdOYW1lICsgJy8nICsgdGhpcy5hcHBOYW1lICsgJy8nICsgJ2NoYXRncm91cHMnICsgJy8nICsgZ3JvdXBJZCArICcvJyArICdhZG1pbicsCgkgICAgICAgIHR5cGU6ICJQT1NUIiwKCSAgICAgICAgZGF0YVR5cGU6ICdqc29uJywKCSAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdERhdGEpLAoJICAgICAgICBoZWFkZXJzOiB7CgkgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIHRoaXMudG9rZW4sCgkgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCgkgICAgICAgIH0KCSAgICB9OwoJICAgIG9wdGlvbnMuc3VjY2VzcyA9IG9wdC5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIG9wdGlvbnMuZXJyb3IgPSBvcHQuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgV2ViSU0udXRpbHMuYWpheChvcHRpb25zKTsKCX07CgoJLyoqCgkgKiDpgJrov4dSZXN0RnVsIEFQSeWPlua2iOe+pOeuoeeQhuWRmAoJICogQHBhcmFtIHtPYmplY3R9IG9wdCAtCgkgKiBAcGFyYW0ge3N0cmluZ30gb3B0LmdvcnVwSWQgLSDnvqTnu4RJRAoJICogQHBhcmFtIHtzdHJpbmd9IG9wdC51c2VybmFtZSAtIOeUqOaIt0lECgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZUFkbWluID0gZnVuY3Rpb24gKG9wdCkgewoJICAgIHZhciBncm91cElkID0gb3B0Lmdyb3VwSWQsCgkgICAgICAgIHVzZXJuYW1lID0gb3B0LnVzZXJuYW1lLAoJICAgICAgICBvcHRpb25zID0gewoJICAgICAgICB1cmw6IHRoaXMuYXBpVXJsICsgJy8nICsgdGhpcy5vcmdOYW1lICsgJy8nICsgdGhpcy5hcHBOYW1lICsgJy8nICsgJ2NoYXRncm91cHMnICsgJy8nICsgZ3JvdXBJZCArICcvJyArICdhZG1pbicgKyAnLycgKyB1c2VybmFtZSwKCSAgICAgICAgdHlwZTogJ0RFTEVURScsCgkgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCgkgICAgICAgIGhlYWRlcnM6IHsKCSAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgdGhpcy50b2tlbiwKCSAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKCSAgICAgICAgfQoJICAgIH07CgkgICAgb3B0aW9ucy5zdWNjZXNzID0gb3B0LnN1Y2Nlc3MgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgb3B0aW9ucy5lcnJvciA9IG9wdC5lcnJvciB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICBXZWJJTS51dGlscy5hamF4KG9wdGlvbnMpOwoJfTsKCgkvKioKCSAqIOmAmui/h1Jlc3RGdWwgQVBJ5ZCM5oSP55So5oi35Yqg5YWl576kCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0IC0KCSAqIEBwYXJhbSB7c3RyaW5nfSBvcHQuYXBwbGljYW50IC0g55Sz6K+35Yqg576k55qE55So5oi35ZCNCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0Lmdyb3VwSWQgLSDnvqTnu4RJRAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5hZ3JlZUpvaW5Hcm91cCA9IGZ1bmN0aW9uIChvcHQpIHsKCSAgICB2YXIgZ3JvdXBJZCA9IG9wdC5ncm91cElkLAoJICAgICAgICByZXF1ZXN0RGF0YSA9IHsKCSAgICAgICAgImFwcGxpY2FudCI6IG9wdC5hcHBsaWNhbnQsCgkgICAgICAgICJ2ZXJpZnlSZXN1bHQiOiB0cnVlLAoJICAgICAgICAicmVhc29uIjogIm5vIGNsdWUiCgkgICAgfSwKCSAgICAgICAgb3B0aW9ucyA9IHsKCSAgICAgICAgdXJsOiB0aGlzLmFwaVVybCArICcvJyArIHRoaXMub3JnTmFtZSArICcvJyArIHRoaXMuYXBwTmFtZSArICcvJyArICdjaGF0Z3JvdXBzJyArICcvJyArIGdyb3VwSWQgKyAnLycgKyAnYXBwbHlfdmVyaWZ5JywKCSAgICAgICAgdHlwZTogJ1BPU1QnLAoJICAgICAgICBkYXRhVHlwZTogImpzb24iLAoJICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0RGF0YSksCgkgICAgICAgIGhlYWRlcnM6IHsKCSAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgdGhpcy50b2tlbiwKCSAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKCSAgICAgICAgfQoJICAgIH07CgkgICAgb3B0aW9ucy5zdWNjZXNzID0gb3B0LnN1Y2Nlc3MgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgb3B0aW9ucy5lcnJvciA9IG9wdC5lcnJvciB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICBXZWJJTS51dGlscy5hamF4KG9wdGlvbnMpOwoJfTsKCgkvKioKCSAqIOmAmui/h1Jlc3RGdWwgQVBJ5ouS57ud55So5oi35Yqg5YWl576kCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0IC0KCSAqIEBwYXJhbSB7c3RyaW5nfSBvcHQuYXBwbGljYW50IC0g55Sz6K+35Yqg576k55qE55So5oi35ZCNCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0Lmdyb3VwSWQgLSDnvqTnu4RJRAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5yZWplY3RKb2luR3JvdXAgPSBmdW5jdGlvbiAob3B0KSB7CgkgICAgdmFyIGdyb3VwSWQgPSBvcHQuZ3JvdXBJZCwKCSAgICAgICAgcmVxdWVzdERhdGEgPSB7CgkgICAgICAgICJhcHBsaWNhbnQiOiBvcHQuYXBwbGljYW50LAoJICAgICAgICAidmVyaWZ5UmVzdWx0IjogZmFsc2UsCgkgICAgICAgICJyZWFzb24iOiAibm8gY2x1ZSIKCSAgICB9LAoJICAgICAgICBvcHRpb25zID0gewoJICAgICAgICB1cmw6IHRoaXMuYXBpVXJsICsgJy8nICsgdGhpcy5vcmdOYW1lICsgJy8nICsgdGhpcy5hcHBOYW1lICsgJy8nICsgJ2NoYXRncm91cHMnICsgJy8nICsgZ3JvdXBJZCArICcvJyArICdhcHBseV92ZXJpZnknLAoJICAgICAgICB0eXBlOiAnUE9TVCcsCgkgICAgICAgIGRhdGFUeXBlOiAianNvbiIsCgkgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3REYXRhKSwKCSAgICAgICAgaGVhZGVyczogewoJICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyB0aGlzLnRva2VuLAoJICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwoJICAgICAgICB9CgkgICAgfTsKCSAgICBvcHRpb25zLnN1Y2Nlc3MgPSBvcHQuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICBvcHRpb25zLmVycm9yID0gb3B0LmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIFdlYklNLnV0aWxzLmFqYXgob3B0aW9ucyk7Cgl9OwoKCS8qKgoJICog6YCa6L+HUmVzdEZ1bCBBUEnmt7vliqDnlKjmiLfoh7PnvqTnu4Tpu5HlkI3ljZUo5Y2V5LiqKQoJICogQHBhcmFtIHtPYmplY3R9IG9wdCAtCgkgKiBAcGFyYW0ge3N0cmluZ30gb3B0Lmdyb3VwSWQgLSDnvqTnu4RJRAoJICogQHBhcmFtIHtzdGlybmd9IG9wdC51c2VybmFtZSAtIOeUqOaIt0lECgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmdyb3VwQmxvY2tTaW5nbGUgPSBmdW5jdGlvbiAob3B0KSB7CgkgICAgdmFyIGdyb3VwSWQgPSBvcHQuZ3JvdXBJZCwKCSAgICAgICAgdXNlcm5hbWUgPSBvcHQudXNlcm5hbWUsCgkgICAgICAgIG9wdGlvbnMgPSB7CgkgICAgICAgIHVybDogdGhpcy5hcGlVcmwgKyAnLycgKyB0aGlzLm9yZ05hbWUgKyAnLycgKyB0aGlzLmFwcE5hbWUgKyAnLycgKyAnY2hhdGdyb3VwcycgKyAnLycgKyBncm91cElkICsgJy8nICsgJ2Jsb2NrcycgKyAnLycgKyAndXNlcnMnICsgJy8nICsgdXNlcm5hbWUsCgkgICAgICAgIHR5cGU6ICdQT1NUJywKCSAgICAgICAgZGF0YVR5cGU6ICdqc29uJywKCSAgICAgICAgaGVhZGVyczogewoJICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyB0aGlzLnRva2VuLAoJICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwoJICAgICAgICB9CgkgICAgfTsKCSAgICBvcHRpb25zLnN1Y2Nlc3MgPSBvcHQuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICBvcHRpb25zLmVycm9yID0gb3B0LmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIFdlYklNLnV0aWxzLmFqYXgob3B0aW9ucyk7Cgl9OwoKCS8qKgoJICog6YCa6L+HUmVzdEZ1bCBBUEnmt7vliqDnlKjmiLfoh7PnvqTnu4Tpu5HlkI3ljZUo5om56YePKQoJICogQHBhcmFtIHtPYmplY3R9IG9wdCAtCgkgKiBAcGFyYW0ge3N0cmluZ1tdfSBvcHQudXNlcm5hbWUgLSDnlKjmiLdJROaVsOe7hAoJICogQHBhcmFtIHtzdHJpbmd9IG9wdC5ncm91cElkIC0g576k57uESUQKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuZ3JvdXBCbG9ja011bHRpID0gZnVuY3Rpb24gKG9wdCkgewoJICAgIHZhciBncm91cElkID0gb3B0Lmdyb3VwSWQsCgkgICAgICAgIHVzZXJuYW1lcyA9IG9wdC51c2VybmFtZXMsCgkgICAgICAgIHJlcXVlc3REYXRhID0gewoJICAgICAgICB1c2VybmFtZXM6IHVzZXJuYW1lcwoJICAgIH0sCgkgICAgICAgIG9wdGlvbnMgPSB7CgkgICAgICAgIHVybDogdGhpcy5hcGlVcmwgKyAnLycgKyB0aGlzLm9yZ05hbWUgKyAnLycgKyB0aGlzLmFwcE5hbWUgKyAnLycgKyAnY2hhdGdyb3VwcycgKyAnLycgKyBncm91cElkICsgJy8nICsgJ2Jsb2NrcycgKyAnLycgKyAndXNlcnMnLAoJICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0RGF0YSksCgkgICAgICAgIHR5cGU6ICdQT1NUJywKCSAgICAgICAgZGF0YVR5cGU6ICdqc29uJywKCSAgICAgICAgaGVhZGVyczogewoJICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyB0aGlzLnRva2VuLAoJICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwoJICAgICAgICB9CgkgICAgfTsKCSAgICBvcHRpb25zLnN1Y2Nlc3MgPSBvcHQuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICBvcHRpb25zLmVycm9yID0gb3B0LmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIFdlYklNLnV0aWxzLmFqYXgob3B0aW9ucyk7Cgl9OwoKCS8qKgoJICog6YCa6L+HUmVzdEZ1bCBBUEnlsIbnlKjmiLfku47nvqTpu5HlkI3ljZXnp7vpmaTvvIjljZXkuKrvvIkKCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHQgLQoJICogQHBhcmFtIHtzdHJpbmd9IG9wdC5ncm91cElkIC0g576k57uESUQKCSAqIEBwYXJhbSB7c3RyaW5nfSBvcHQudXNlcm5hbWUgLSDnlKjmiLflkI0KCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlR3JvdXBCbG9ja1NpbmdsZSA9IGZ1bmN0aW9uIChvcHQpIHsKCSAgICB2YXIgZ3JvdXBJZCA9IG9wdC5ncm91cElkLAoJICAgICAgICB1c2VybmFtZSA9IG9wdC51c2VybmFtZSwKCSAgICAgICAgb3B0aW9ucyA9IHsKCSAgICAgICAgdXJsOiB0aGlzLmFwaVVybCArICcvJyArIHRoaXMub3JnTmFtZSArICcvJyArIHRoaXMuYXBwTmFtZSArICcvJyArICdjaGF0Z3JvdXBzJyArICcvJyArIGdyb3VwSWQgKyAnLycgKyAnYmxvY2tzJyArICcvJyArICd1c2VycycgKyAnLycgKyB1c2VybmFtZSwKCSAgICAgICAgdHlwZTogJ0RFTEVURScsCgkgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCgkgICAgICAgIGhlYWRlcnM6IHsKCSAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgdGhpcy50b2tlbiwKCSAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKCSAgICAgICAgfQoJICAgIH07CgkgICAgb3B0aW9ucy5zdWNjZXNzID0gb3B0LnN1Y2Nlc3MgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgb3B0aW9ucy5lcnJvciA9IG9wdC5lcnJvciB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICBXZWJJTS51dGlscy5hamF4KG9wdGlvbnMpOwoJfTsKCgkvKioKCSAqIOmAmui/h1Jlc3RGdWwgQVBJ5bCG55So5oi35LuO576k6buR5ZCN5Y2V56e76Zmk77yI5om56YeP77yJCgkgKiBAcGFyYW0ge09iamVjdH0gb3B0IC0KCSAqIEBwYXJhbSB7c3RyaW5nfSBvcHQuZ3JvdXBJZCAtIOe+pOe7hOWQjQoJICogQHBhcmFtIHtzdHJpbmdbXX0gb3B0LnVzZXJuYW1lIC0g55So5oi3SUTmlbDnu4QKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlR3JvdXBCbG9ja011bHRpID0gZnVuY3Rpb24gKG9wdCkgewoJICAgIHZhciBncm91cElkID0gb3B0Lmdyb3VwSWQsCgkgICAgICAgIHVzZXJuYW1lID0gb3B0LnVzZXJuYW1lLmpvaW4oJywnKSwKCSAgICAgICAgb3B0aW9ucyA9IHsKCSAgICAgICAgdXJsOiB0aGlzLmFwaVVybCArICcvJyArIHRoaXMub3JnTmFtZSArICcvJyArIHRoaXMuYXBwTmFtZSArICcvJyArICdjaGF0Z3JvdXBzJyArICcvJyArIGdyb3VwSWQgKyAnLycgKyAnYmxvY2tzJyArICcvJyArICd1c2VycycgKyAnLycgKyB1c2VybmFtZSwKCSAgICAgICAgdHlwZTogJ0RFTEVURScsCgkgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCgkgICAgICAgIGhlYWRlcnM6IHsKCSAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgdGhpcy50b2tlbiwKCSAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKCSAgICAgICAgfQoJICAgIH07CgkgICAgb3B0aW9ucy5zdWNjZXNzID0gb3B0LnN1Y2Nlc3MgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgb3B0aW9ucy5lcnJvciA9IG9wdC5lcnJvciB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICBXZWJJTS51dGlscy5hamF4KG9wdGlvbnMpOwoJfTsKCgkvKioKCSAqIOmAmui/h1Jlc3RGdWwgQVBJ6Kej5pWj576k57uECgkgKiBAcGFyYW0ge09iamVjdH0gb3B0IC0KCSAqIEBwYXJhbSB7c3RyaW5nfSBvcHQuZ3JvdXBJZCAtIOe+pOe7hElECgkgKi8KCWNvbm5lY3Rpb24ucHJvdG90eXBlLmRpc3NvbHZlR3JvdXAgPSBmdW5jdGlvbiAob3B0KSB7CgkgICAgdmFyIGdyb3VwSWQgPSBvcHQuZ3JvdXBJZCwKCSAgICAgICAgb3B0aW9ucyA9IHsKCSAgICAgICAgdXJsOiB0aGlzLmFwaVVybCArICcvJyArIHRoaXMub3JnTmFtZSArICcvJyArIHRoaXMuYXBwTmFtZSArICcvJyArICdjaGF0Z3JvdXBzJyArICcvJyArIGdyb3VwSWQgKyAnP3ZlcnNpb249djMnLAoJICAgICAgICB0eXBlOiAnREVMRVRFJywKCSAgICAgICAgZGF0YVR5cGU6ICdqc29uJywKCSAgICAgICAgaGVhZGVyczogewoJICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyB0aGlzLnRva2VuLAoJICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwoJICAgICAgICB9CgkgICAgfTsKCSAgICBvcHRpb25zLnN1Y2Nlc3MgPSBvcHQuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICBvcHRpb25zLmVycm9yID0gb3B0LmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIFdlYklNLnV0aWxzLmFqYXgob3B0aW9ucyk7Cgl9OwoKCS8qKgoJICog6YCa6L+HUmVzdEZ1bCBBUEnojrflj5bnvqTnu4Tpu5HlkI3ljZUKCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHQgLQoJICogQHBhcmFtIHtzdHJpbmd9IG9wdC5ncm91cElkIC0g576k57uESUQKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0R3JvdXBCbGFja2xpc3ROZXcgPSBmdW5jdGlvbiAob3B0KSB7CgkgICAgdmFyIGdyb3VwSWQgPSBvcHQuZ3JvdXBJZCwKCSAgICAgICAgb3B0aW9ucyA9IHsKCSAgICAgICAgdXJsOiB0aGlzLmFwaVVybCArICcvJyArIHRoaXMub3JnTmFtZSArICcvJyArIHRoaXMuYXBwTmFtZSArICcvJyArICdjaGF0Z3JvdXBzJyArICcvJyArIGdyb3VwSWQgKyAnLycgKyAnYmxvY2tzJyArICcvJyArICd1c2VycycsCgkgICAgICAgIHR5cGU6ICdHRVQnLAoJICAgICAgICBkYXRhVHlwZTogJ2pzb24nLAoJICAgICAgICBoZWFkZXJzOiB7CgkgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIHRoaXMudG9rZW4sCgkgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCgkgICAgICAgIH0KCSAgICB9OwoJICAgIG9wdGlvbnMuc3VjY2VzcyA9IG9wdC5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIG9wdGlvbnMuZXJyb3IgPSBvcHQuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgV2ViSU0udXRpbHMuYWpheChvcHRpb25zKTsKCX07CgoJLyoqCgkgKiDpgJrov4dSZXN0RnVsIEFQSeemu+W8gOe+pOe7hAoJICogQHBhcmFtIHtPYmplY3R9IG9wdCAtCgkgKiBAcGFyYW0ge3N0cmluZ30gb3B0Lmdyb3VwSWQgLSDnvqTnu4RJRAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5xdWl0R3JvdXAgPSBmdW5jdGlvbiAob3B0KSB7CgkgICAgdmFyIGdyb3VwSWQgPSBvcHQuZ3JvdXBJZCwKCSAgICAgICAgb3B0aW9ucyA9IHsKCSAgICAgICAgdXJsOiB0aGlzLmFwaVVybCArICcvJyArIHRoaXMub3JnTmFtZSArICcvJyArIHRoaXMuYXBwTmFtZSArICcvJyArICdjaGF0Z3JvdXBzJyArICcvJyArIGdyb3VwSWQgKyAnLycgKyAncXVpdCcsCgkgICAgICAgIHR5cGU6ICdERUxFVEUnLAoJICAgICAgICBkYXRhVHlwZTogJ2pzb24nLAoJICAgICAgICBoZWFkZXJzOiB7CgkgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIHRoaXMudG9rZW4sCgkgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCgkgICAgICAgIH0KCSAgICB9OwoJICAgIG9wdGlvbnMuc3VjY2VzcyA9IG9wdC5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIG9wdGlvbnMuZXJyb3IgPSBvcHQuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgV2ViSU0udXRpbHMuYWpheChvcHRpb25zKTsKCX07CgoJLyoqCgkgKiDpgJrov4dSZXN0RnVsIEFQSeS/ruaUuee+pOS/oeaBrwoJICogQHBhcmFtIHtPYmplY3R9IG9wdCAtCgkgKiBAcGFyYW0ge3N0cmluZ30gb3B0Lmdyb3VwSWQgLSDnvqTnu4RJRAoJICogQHBhcmFtIHtzdHJpbmd9IG9wdC5ncm91cE5hbWUgLSDnvqTnu4TlkI0KCSAqIEBwYXJhbSB7c3RyaW5nfSBvcHQuZGVzY3JpcHRpb24gLSDnvqTnu4TnroDku4sKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUubW9kaWZ5R3JvdXAgPSBmdW5jdGlvbiAob3B0KSB7CgkgICAgdmFyIGdyb3VwSWQgPSBvcHQuZ3JvdXBJZCwKCSAgICAgICAgcmVxdWVzdERhdGEgPSB7CgkgICAgICAgIGdyb3VwbmFtZTogb3B0Lmdyb3VwTmFtZSwKCSAgICAgICAgZGVzY3JpcHRpb246IG9wdC5kZXNjcmlwdGlvbgoJICAgIH0sCgkgICAgICAgIG9wdGlvbnMgPSB7CgkgICAgICAgIHVybDogdGhpcy5hcGlVcmwgKyAnLycgKyB0aGlzLm9yZ05hbWUgKyAnLycgKyB0aGlzLmFwcE5hbWUgKyAnLycgKyAnY2hhdGdyb3VwcycgKyAnLycgKyBncm91cElkLAoJICAgICAgICB0eXBlOiAnUFVUJywKCSAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdERhdGEpLAoJICAgICAgICBkYXRhVHlwZTogJ2pzb24nLAoJICAgICAgICBoZWFkZXJzOiB7CgkgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIHRoaXMudG9rZW4sCgkgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCgkgICAgICAgIH0KCSAgICB9OwoJICAgIG9wdGlvbnMuc3VjY2VzcyA9IG9wdC5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIG9wdGlvbnMuZXJyb3IgPSBvcHQuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgV2ViSU0udXRpbHMuYWpheChvcHRpb25zKTsKCX07CgoJLyoqCgkgKiDpgJrov4dSZXN0RnVsIEFQSeWIoOmZpOWNleS4que+pOaIkOWRmAoJICogQHBhcmFtIHtPYmplY3R9IG9wdCAtCgkgKiBAcGFyYW0ge3N0cmluZ30gb3B0Lmdyb3VwSWQgLSDnvqTnu4RJRAoJICogQHBhcmFtIHtzdHJpbmd9IG9wdC51c2VybmFtZSAtIOeUqOaIt+WQjQoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVTaW5nbGVHcm91cE1lbWJlciA9IGZ1bmN0aW9uIChvcHQpIHsKCSAgICB2YXIgZ3JvdXBJZCA9IG9wdC5ncm91cElkLAoJICAgICAgICB1c2VybmFtZSA9IG9wdC51c2VybmFtZSwKCSAgICAgICAgb3B0aW9ucyA9IHsKCSAgICAgICAgdXJsOiB0aGlzLmFwaVVybCArICcvJyArIHRoaXMub3JnTmFtZSArICcvJyArIHRoaXMuYXBwTmFtZSArICcvJyArICdjaGF0Z3JvdXBzJyArICcvJyArIGdyb3VwSWQgKyAnLycgKyAndXNlcnMnICsgJy8nICsgdXNlcm5hbWUsCgkgICAgICAgIHR5cGU6ICdERUxFVEUnLAoJICAgICAgICBkYXRhVHlwZTogJ2pzb24nLAoJICAgICAgICBoZWFkZXJzOiB7CgkgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIHRoaXMudG9rZW4sCgkgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCgkgICAgICAgIH0KCSAgICB9OwoJICAgIG9wdGlvbnMuc3VjY2VzcyA9IG9wdC5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIG9wdGlvbnMuZXJyb3IgPSBvcHQuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgV2ViSU0udXRpbHMuYWpheChvcHRpb25zKTsKCX07CgoJLyoqCgkgKiDpgJrov4dSZXN0RnVsIEFQSeWIoOmZpOWkmuS4que+pOaIkOWRmAoJICogQHBhcmFtIHtPYmplY3R9IG9wdCAtCgkgKiBAcGFyYW0ge3N0cmluZ30gb3B0Lmdyb3VwSWQgLSDnvqTnu4RJRAoJICogQHBhcmFtIHtzdHJpbmdbXX0gb3B0LnVzZXJzIC0g55So5oi3SUTmlbDnu4QKCSAqLwoJY29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlTXVsdGlHcm91cE1lbWJlciA9IGZ1bmN0aW9uIChvcHQpIHsKCSAgICB2YXIgZ3JvdXBJZCA9IG9wdC5ncm91cElkLAoJICAgICAgICB1c2VycyA9IG9wdC51c2Vycy5qb2luKCcsJyksCgkgICAgICAgIG9wdGlvbnMgPSB7CgkgICAgICAgIHVybDogdGhpcy5hcGlVcmwgKyAnLycgKyB0aGlzLm9yZ05hbWUgKyAnLycgKyB0aGlzLmFwcE5hbWUgKyAnLycgKyAnY2hhdGdyb3VwcycgKyAnLycgKyBncm91cElkICsgJy8nICsgJ3VzZXJzJyArICcvJyArIHVzZXJzLAoJICAgICAgICB0eXBlOiAnREVMRVRFJywKCSAgICAgICAgZGF0YVR5cGU6ICdqc29uJywKCSAgICAgICAgaGVhZGVyczogewoJICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyB0aGlzLnRva2VuLAoJICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwoJICAgICAgICB9CgkgICAgfTsKCSAgICBvcHRpb25zLnN1Y2Nlc3MgPSBvcHQuc3VjY2VzcyB8fCBfdXRpbHMuZW1wdHlmbjsKCSAgICBvcHRpb25zLmVycm9yID0gb3B0LmVycm9yIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIFdlYklNLnV0aWxzLmFqYXgob3B0aW9ucyk7Cgl9OwoKCS8qKgoJICog6YCa6L+HUmVzdEZ1bCBBUEnpgoDor7fnvqTmiJDlkZgKCSAqIEBwYXJhbSB7T2JqZWN0fSBvcHQgLQoJICogQHBhcmFtIHtzdHJpbmd9IG9wdC5ncm91cElkIC0g576k57uE5ZCNCgkgKiBAcGFyYW0ge3N0cmluZ1tdfSBvcHQudXNlcnMgLSDnlKjmiLflkI1JROaVsOe7hAoJICovCgljb25uZWN0aW9uLnByb3RvdHlwZS5pbnZpdGVUb0dyb3VwID0gZnVuY3Rpb24gKG9wdCkgewoJICAgIHZhciBncm91cElkID0gb3B0Lmdyb3VwSWQsCgkgICAgICAgIHVzZXJzID0gb3B0LnVzZXJzLAoJICAgICAgICByZXF1ZXN0RGF0YSA9IHsKCSAgICAgICAgdXNlcm5hbWVzOiB1c2VycwoJICAgIH0sCgkgICAgICAgIG9wdGlvbnMgPSB7CgkgICAgICAgIHVybDogdGhpcy5hcGlVcmwgKyAnLycgKyB0aGlzLm9yZ05hbWUgKyAnLycgKyB0aGlzLmFwcE5hbWUgKyAnLycgKyAnY2hhdGdyb3VwcycgKyAnLycgKyBncm91cElkICsgJy8nICsgJ2ludml0ZScsCgkgICAgICAgIHR5cGU6ICdQT1NUJywKCSAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdERhdGEpLAoJICAgICAgICBkYXRhVHlwZTogJ2pzb24nLAoJICAgICAgICBoZWFkZXJzOiB7CgkgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIHRoaXMudG9rZW4sCgkgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCgkgICAgICAgIH0KCSAgICB9OwoJICAgIG9wdGlvbnMuc3VjY2VzcyA9IG9wdC5zdWNjZXNzIHx8IF91dGlscy5lbXB0eWZuOwoJICAgIG9wdGlvbnMuZXJyb3IgPSBvcHQuZXJyb3IgfHwgX3V0aWxzLmVtcHR5Zm47CgkgICAgV2ViSU0udXRpbHMuYWpheChvcHRpb25zKTsKCX07CgoJZnVuY3Rpb24gX3NldFRleHQodmFsdWVEb20sIHYpIHsKCSAgICBpZiAoJ3RleHRDb250ZW50JyBpbiB2YWx1ZURvbSkgewoJICAgICAgICB2YWx1ZURvbS50ZXh0Q29udGVudCA9IHY7CgkgICAgfSBlbHNlIGlmICgndGV4dCcgaW4gdmFsdWVEb20pIHsKCSAgICAgICAgdmFsdWVEb20udGV4dCA9IHY7CgkgICAgfSBlbHNlIHsKCSAgICAgICAgLy8gU3Ryb3BoZS5pbmZvKCdfc2V0VGV4dCA0IC0tLS0tLS0tLS0nKTsKCSAgICAgICAgLy8gdmFsdWVEb20uaW5uZXJIVE1MID0gdjsKCSAgICB9Cgl9CgoJdmFyIFdlYklNID0gd2luZG93LldlYklNIHx8IHt9OwoJV2ViSU0uY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247CglXZWJJTS51dGlscyA9IF91dGlsczsKCVdlYklNLnN0YXR1c0NvZGUgPSBfY29kZTsKCVdlYklNLm1lc3NhZ2UgPSBfbXNnLm1lc3NhZ2U7CglXZWJJTS5kb1F1ZXJ5ID0gZnVuY3Rpb24gKHN0ciwgc3VjLCBmYWlsKSB7CgkgICAgaWYgKHR5cGVvZiB3aW5kb3cuY2VmUXVlcnkgPT09ICd1bmRlZmluZWQnKSB7CgkgICAgICAgIHJldHVybjsKCSAgICB9CgkgICAgd2luZG93LmNlZlF1ZXJ5KHsKCSAgICAgICAgcmVxdWVzdDogc3RyLAoJICAgICAgICBwZXJzaXN0ZW50OiBmYWxzZSwKCSAgICAgICAgb25TdWNjZXNzOiBzdWMsCgkgICAgICAgIG9uRmFpbHVyZTogZmFpbAoJICAgIH0pOwoJfTsKCgkvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBkZWJ1ZyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoJZnVuY3Rpb24gbG9nTWVzc2FnZShtZXNzYWdlKSB7CgkgICAgV2ViSU0gJiYgV2ViSU0uY29uZmlnLmlzRGVidWcgJiYgY29uc29sZS5sb2coV2ViSU0udXRpbHMudHMoKSArICdbcmVjdl0gJywgbWVzc2FnZS5kYXRhKTsKCX0KCglpZiAoV2ViSU0gJiYgV2ViSU0uY29uZmlnLmlzRGVidWcpIHsKCSAgICBTdHJvcGhlLkNvbm5lY3Rpb24ucHJvdG90eXBlLnJhd091dHB1dCA9IGZ1bmN0aW9uIChkYXRhKSB7CgkgICAgICAgIGNvbnNvbGUubG9nKCclYyAnICsgV2ViSU0udXRpbHMudHMoKSArICdbc2VuZF0gJyArIGRhdGEsICJiYWNrZ3JvdW5kLWNvbG9yOiAjZTJmN2RhIik7CgkgICAgfTsKCX0KCglpZiAoV2ViSU0gJiYgV2ViSU0uY29uZmlnICYmIFdlYklNLmNvbmZpZy5pc1NhbmRCb3gpIHsKCSAgICBXZWJJTS5jb25maWcueG1wcFVSTCA9IFdlYklNLmNvbmZpZy54bXBwVVJMLnJlcGxhY2UoJy5lYXNlbW9iLicsICctc2FuZGJveC5lYXNlbW9iLicpOwoJICAgIFdlYklNLmNvbmZpZy5hcGlVUkwgPSBXZWJJTS5jb25maWcuYXBpVVJMLnJlcGxhY2UoJy5lYXNlbW9iLicsICctc2RiLmVhc2Vtb2IuJyk7Cgl9CgoJbW9kdWxlLmV4cG9ydHMgPSBXZWJJTTsKCglpZiAoZmFsc2UpIHsKCSAgICBtb2R1bGUuaG90LmFjY2VwdCgpOwoJfQoKLyoqKi8gfSksCgovKioqLyAyNTA6Ci8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJdmFyIENyeXB0b0pTID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMTIpOwoJOyhmdW5jdGlvbiAoKSB7CgkgICAgJ3VzZSBzdHJpY3QnOwoKCSAgICB2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMDcpLnV0aWxzOwoJICAgIHZhciBNZXNzYWdlID0gZnVuY3Rpb24gTWVzc2FnZSh0eXBlLCBpZCkgewoJICAgICAgICBpZiAoIXRoaXMgaW5zdGFuY2VvZiBNZXNzYWdlKSB7CgkgICAgICAgICAgICByZXR1cm4gbmV3IE1lc3NhZ2UodHlwZSk7CgkgICAgICAgIH0KCgkgICAgICAgIHRoaXMuX21zZyA9IHt9OwoKCSAgICAgICAgaWYgKHR5cGVvZiBNZXNzYWdlW3R5cGVdID09PSAnZnVuY3Rpb24nKSB7CgkgICAgICAgICAgICBNZXNzYWdlW3R5cGVdLnByb3RvdHlwZS5zZXRHcm91cCA9IHRoaXMuc2V0R3JvdXA7CgkgICAgICAgICAgICB0aGlzLl9tc2cgPSBuZXcgTWVzc2FnZVt0eXBlXShpZCk7CgkgICAgICAgIH0KCSAgICAgICAgcmV0dXJuIHRoaXMuX21zZzsKCSAgICB9OwoJICAgIE1lc3NhZ2UucHJvdG90eXBlLnNldEdyb3VwID0gZnVuY3Rpb24gKGdyb3VwKSB7CgkgICAgICAgIHRoaXMuYm9keS5ncm91cCA9IGdyb3VwOwoJICAgIH07CgoJICAgIC8qCgkgICAgICogUmVhZCBNZXNzYWdlCgkgICAgICovCgkgICAgTWVzc2FnZS5yZWFkID0gZnVuY3Rpb24gKGlkKSB7CgkgICAgICAgIHRoaXMuaWQgPSBpZDsKCSAgICAgICAgdGhpcy50eXBlID0gJ3JlYWQnOwoJICAgIH07CgoJICAgIE1lc3NhZ2UucmVhZC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKG9wdCkgewoJICAgICAgICB0aGlzLmJvZHkgPSB7CgkgICAgICAgICAgICBhY2tJZDogb3B0LmlkLAoJICAgICAgICAgICAgdG86IG9wdC50bwoJICAgICAgICB9OwoJICAgIH07CgoJICAgIC8qCgkgICAgICogZGVsaXZlciBtZXNzYWdlCgkgICAgICovCgkgICAgTWVzc2FnZS5kZWxpdmVyeSA9IGZ1bmN0aW9uIChpZCkgewoJICAgICAgICB0aGlzLmlkID0gaWQ7CgkgICAgICAgIHRoaXMudHlwZSA9ICdkZWxpdmVyeSc7CgkgICAgfTsKCgkgICAgTWVzc2FnZS5kZWxpdmVyeS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKG9wdCkgewoJICAgICAgICB0aGlzLmJvZHkgPSB7CgkgICAgICAgICAgICBib2R5SWQ6IG9wdC5pZCwKCSAgICAgICAgICAgIHRvOiBvcHQudG8KCSAgICAgICAgfTsKCSAgICB9OwoKCSAgICAvKgoJICAgICAqIHRleHQgbWVzc2FnZQoJICAgICAqLwoJICAgIE1lc3NhZ2UudHh0ID0gZnVuY3Rpb24gKGlkKSB7CgkgICAgICAgIHRoaXMuaWQgPSBpZDsKCSAgICAgICAgdGhpcy50eXBlID0gJ3R4dCc7CgkgICAgICAgIHRoaXMuYm9keSA9IHt9OwoJICAgIH07CgkgICAgTWVzc2FnZS50eHQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChvcHQpIHsKCSAgICAgICAgdGhpcy52YWx1ZSA9IG9wdC5tc2c7CgkgICAgICAgIHRoaXMuYm9keSA9IHsKCSAgICAgICAgICAgIGlkOiB0aGlzLmlkLAoJICAgICAgICAgICAgdG86IG9wdC50bywKCSAgICAgICAgICAgIG1zZzogdGhpcy52YWx1ZSwKCSAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSwKCSAgICAgICAgICAgIHJvb21UeXBlOiBvcHQucm9vbVR5cGUsCgkgICAgICAgICAgICBleHQ6IG9wdC5leHQgfHwge30sCgkgICAgICAgICAgICBzdWNjZXNzOiBvcHQuc3VjY2VzcywKCSAgICAgICAgICAgIGZhaWw6IG9wdC5mYWlsCgkgICAgICAgIH07CgoJICAgICAgICAhb3B0LnJvb21UeXBlICYmIGRlbGV0ZSB0aGlzLmJvZHkucm9vbVR5cGU7CgkgICAgfTsKCgkgICAgLyoKCSAgICAgKiBjbWQgbWVzc2FnZQoJICAgICAqLwoJICAgIE1lc3NhZ2UuY21kID0gZnVuY3Rpb24gKGlkKSB7CgkgICAgICAgIHRoaXMuaWQgPSBpZDsKCSAgICAgICAgdGhpcy50eXBlID0gJ2NtZCc7CgkgICAgICAgIHRoaXMuYm9keSA9IHt9OwoJICAgIH07CgkgICAgTWVzc2FnZS5jbWQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChvcHQpIHsKCSAgICAgICAgdGhpcy52YWx1ZSA9ICcnOwoKCSAgICAgICAgdGhpcy5ib2R5ID0gewoJICAgICAgICAgICAgdG86IG9wdC50bywKCSAgICAgICAgICAgIGFjdGlvbjogb3B0LmFjdGlvbiwKCSAgICAgICAgICAgIG1zZzogdGhpcy52YWx1ZSwKCSAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSwKCSAgICAgICAgICAgIHJvb21UeXBlOiBvcHQucm9vbVR5cGUsCgkgICAgICAgICAgICBleHQ6IG9wdC5leHQgfHwge30sCgkgICAgICAgICAgICBzdWNjZXNzOiBvcHQuc3VjY2VzcwoJICAgICAgICB9OwoJICAgICAgICAhb3B0LnJvb21UeXBlICYmIGRlbGV0ZSB0aGlzLmJvZHkucm9vbVR5cGU7CgkgICAgfTsKCgkgICAgLyoKCSAgICAgKiBsb2MgbWVzc2FnZQoJICAgICAqLwoJICAgIE1lc3NhZ2UubG9jYXRpb24gPSBmdW5jdGlvbiAoaWQpIHsKCSAgICAgICAgdGhpcy5pZCA9IGlkOwoJICAgICAgICB0aGlzLnR5cGUgPSAnbG9jJzsKCSAgICAgICAgdGhpcy5ib2R5ID0ge307CgkgICAgfTsKCSAgICBNZXNzYWdlLmxvY2F0aW9uLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAob3B0KSB7CgkgICAgICAgIHRoaXMuYm9keSA9IHsKCSAgICAgICAgICAgIHRvOiBvcHQudG8sCgkgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsCgkgICAgICAgICAgICByb29tVHlwZTogb3B0LnJvb21UeXBlLAoJICAgICAgICAgICAgYWRkcjogb3B0LmFkZHIsCgkgICAgICAgICAgICBsYXQ6IG9wdC5sYXQsCgkgICAgICAgICAgICBsbmc6IG9wdC5sbmcsCgkgICAgICAgICAgICBleHQ6IG9wdC5leHQgfHwge30KCSAgICAgICAgfTsKCSAgICB9OwoKCSAgICAvKgoJICAgICAqIGltZyBtZXNzYWdlCgkgICAgICovCgkgICAgTWVzc2FnZS5pbWcgPSBmdW5jdGlvbiAoaWQpIHsKCSAgICAgICAgdGhpcy5pZCA9IGlkOwoJICAgICAgICB0aGlzLnR5cGUgPSAnaW1nJzsKCSAgICAgICAgdGhpcy5ib2R5ID0ge307CgkgICAgfTsKCSAgICBNZXNzYWdlLmltZy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKG9wdCkgewoJICAgICAgICBvcHQuZmlsZSA9IG9wdC5maWxlIHx8IF91dGlscy5nZXRGaWxlVXJsKG9wdC5maWxlSW5wdXRJZCk7CgoJICAgICAgICB0aGlzLnZhbHVlID0gb3B0LmZpbGU7CgoJICAgICAgICB0aGlzLmJvZHkgPSB7CgkgICAgICAgICAgICBpZDogdGhpcy5pZCwKCSAgICAgICAgICAgIGZpbGU6IHRoaXMudmFsdWUsCgkgICAgICAgICAgICBhcGlVcmw6IG9wdC5hcGlVcmwsCgkgICAgICAgICAgICB0bzogb3B0LnRvLAoJICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLAoJICAgICAgICAgICAgZXh0OiBvcHQuZXh0IHx8IHt9LAoJICAgICAgICAgICAgcm9vbVR5cGU6IG9wdC5yb29tVHlwZSwKCSAgICAgICAgICAgIG9uRmlsZVVwbG9hZEVycm9yOiBvcHQub25GaWxlVXBsb2FkRXJyb3IsCgkgICAgICAgICAgICBvbkZpbGVVcGxvYWRDb21wbGV0ZTogb3B0Lm9uRmlsZVVwbG9hZENvbXBsZXRlLAoJICAgICAgICAgICAgc3VjY2Vzczogb3B0LnN1Y2Nlc3MsCgkgICAgICAgICAgICBmYWlsOiBvcHQuZmFpbCwKCSAgICAgICAgICAgIGZsYXNoVXBsb2FkOiBvcHQuZmxhc2hVcGxvYWQsCgkgICAgICAgICAgICB3aWR0aDogb3B0LndpZHRoLAoJICAgICAgICAgICAgaGVpZ2h0OiBvcHQuaGVpZ2h0LAoJICAgICAgICAgICAgYm9keTogb3B0LmJvZHksCgkgICAgICAgICAgICB1cGxvYWRFcnJvcjogb3B0LnVwbG9hZEVycm9yLAoJICAgICAgICAgICAgdXBsb2FkQ29tcGxldGU6IG9wdC51cGxvYWRDb21wbGV0ZQoJICAgICAgICB9OwoKCSAgICAgICAgIW9wdC5yb29tVHlwZSAmJiBkZWxldGUgdGhpcy5ib2R5LnJvb21UeXBlOwoJICAgIH07CgoJICAgIC8qCgkgICAgICogYXVkaW8gbWVzc2FnZQoJICAgICAqLwoJICAgIE1lc3NhZ2UuYXVkaW8gPSBmdW5jdGlvbiAoaWQpIHsKCSAgICAgICAgdGhpcy5pZCA9IGlkOwoJICAgICAgICB0aGlzLnR5cGUgPSAnYXVkaW8nOwoJICAgICAgICB0aGlzLmJvZHkgPSB7fTsKCSAgICB9OwoJICAgIE1lc3NhZ2UuYXVkaW8ucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChvcHQpIHsKCSAgICAgICAgb3B0LmZpbGUgPSBvcHQuZmlsZSB8fCBfdXRpbHMuZ2V0RmlsZVVybChvcHQuZmlsZUlucHV0SWQpOwoKCSAgICAgICAgdGhpcy52YWx1ZSA9IG9wdC5maWxlOwoJICAgICAgICB0aGlzLmZpbGVuYW1lID0gb3B0LmZpbGVuYW1lIHx8IHRoaXMudmFsdWUuZmlsZW5hbWU7CgoJICAgICAgICB0aGlzLmJvZHkgPSB7CgkgICAgICAgICAgICBpZDogdGhpcy5pZCwKCSAgICAgICAgICAgIGZpbGU6IHRoaXMudmFsdWUsCgkgICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5maWxlbmFtZSwKCSAgICAgICAgICAgIGFwaVVybDogb3B0LmFwaVVybCwKCSAgICAgICAgICAgIHRvOiBvcHQudG8sCgkgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsCgkgICAgICAgICAgICBleHQ6IG9wdC5leHQgfHwge30sCgkgICAgICAgICAgICBsZW5ndGg6IG9wdC5sZW5ndGggfHwgMCwKCSAgICAgICAgICAgIHJvb21UeXBlOiBvcHQucm9vbVR5cGUsCgkgICAgICAgICAgICBmaWxlX2xlbmd0aDogb3B0LmZpbGVfbGVuZ3RoLAoJICAgICAgICAgICAgb25GaWxlVXBsb2FkRXJyb3I6IG9wdC5vbkZpbGVVcGxvYWRFcnJvciwKCSAgICAgICAgICAgIG9uRmlsZVVwbG9hZENvbXBsZXRlOiBvcHQub25GaWxlVXBsb2FkQ29tcGxldGUsCgkgICAgICAgICAgICBzdWNjZXNzOiBvcHQuc3VjY2VzcywKCSAgICAgICAgICAgIGZhaWw6IG9wdC5mYWlsLAoJICAgICAgICAgICAgZmxhc2hVcGxvYWQ6IG9wdC5mbGFzaFVwbG9hZCwKCSAgICAgICAgICAgIGJvZHk6IG9wdC5ib2R5CgkgICAgICAgIH07CgkgICAgICAgICFvcHQucm9vbVR5cGUgJiYgZGVsZXRlIHRoaXMuYm9keS5yb29tVHlwZTsKCSAgICB9OwoKCSAgICAvKgoJICAgICAqIGZpbGUgbWVzc2FnZQoJICAgICAqLwoJICAgIE1lc3NhZ2UuZmlsZSA9IGZ1bmN0aW9uIChpZCkgewoJICAgICAgICB0aGlzLmlkID0gaWQ7CgkgICAgICAgIHRoaXMudHlwZSA9ICdmaWxlJzsKCSAgICAgICAgdGhpcy5ib2R5ID0ge307CgkgICAgfTsKCSAgICBNZXNzYWdlLmZpbGUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChvcHQpIHsKCSAgICAgICAgb3B0LmZpbGUgPSBvcHQuZmlsZSB8fCBfdXRpbHMuZ2V0RmlsZVVybChvcHQuZmlsZUlucHV0SWQpOwoKCSAgICAgICAgdGhpcy52YWx1ZSA9IG9wdC5maWxlOwoJICAgICAgICB0aGlzLmZpbGVuYW1lID0gb3B0LmZpbGVuYW1lIHx8IHRoaXMudmFsdWUuZmlsZW5hbWU7CgoJICAgICAgICB0aGlzLmJvZHkgPSB7CgkgICAgICAgICAgICBpZDogdGhpcy5pZCwKCSAgICAgICAgICAgIGZpbGU6IHRoaXMudmFsdWUsCgkgICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5maWxlbmFtZSwKCSAgICAgICAgICAgIGFwaVVybDogb3B0LmFwaVVybCwKCSAgICAgICAgICAgIHRvOiBvcHQudG8sCgkgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsCgkgICAgICAgICAgICBleHQ6IG9wdC5leHQgfHwge30sCgkgICAgICAgICAgICByb29tVHlwZTogb3B0LnJvb21UeXBlLAoJICAgICAgICAgICAgb25GaWxlVXBsb2FkRXJyb3I6IG9wdC5vbkZpbGVVcGxvYWRFcnJvciwKCSAgICAgICAgICAgIG9uRmlsZVVwbG9hZENvbXBsZXRlOiBvcHQub25GaWxlVXBsb2FkQ29tcGxldGUsCgkgICAgICAgICAgICBzdWNjZXNzOiBvcHQuc3VjY2VzcywKCSAgICAgICAgICAgIGZhaWw6IG9wdC5mYWlsLAoJICAgICAgICAgICAgZmxhc2hVcGxvYWQ6IG9wdC5mbGFzaFVwbG9hZCwKCSAgICAgICAgICAgIGJvZHk6IG9wdC5ib2R5CgkgICAgICAgIH07CgkgICAgICAgICFvcHQucm9vbVR5cGUgJiYgZGVsZXRlIHRoaXMuYm9keS5yb29tVHlwZTsKCSAgICB9OwoKCSAgICAvKgoJICAgICAqIHZpZGVvIG1lc3NhZ2UKCSAgICAgKi8KCSAgICBNZXNzYWdlLnZpZGVvID0gZnVuY3Rpb24gKGlkKSB7fTsKCSAgICBNZXNzYWdlLnZpZGVvLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAob3B0KSB7fTsKCgkgICAgdmFyIF9NZXNzYWdlID0gZnVuY3Rpb24gX01lc3NhZ2UobWVzc2FnZSkgewoKCSAgICAgICAgaWYgKCF0aGlzIGluc3RhbmNlb2YgX01lc3NhZ2UpIHsKCSAgICAgICAgICAgIHJldHVybiBuZXcgX01lc3NhZ2UobWVzc2FnZSwgY29ubik7CgkgICAgICAgIH0KCgkgICAgICAgIHRoaXMubXNnID0gbWVzc2FnZTsKCSAgICB9OwoKCSAgICBfTWVzc2FnZS5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChjb25uKSB7CgkgICAgICAgIHZhciBtZSA9IHRoaXM7CgoJICAgICAgICB2YXIgX3NlbmQgPSBmdW5jdGlvbiBfc2VuZChtZXNzYWdlKSB7CgoJICAgICAgICAgICAgbWVzc2FnZS5leHQgPSBtZXNzYWdlLmV4dCB8fCB7fTsKCSAgICAgICAgICAgIG1lc3NhZ2UuZXh0LndlaWNoYXQgPSBtZXNzYWdlLmV4dC53ZWljaGF0IHx8IHt9OwoJICAgICAgICAgICAgbWVzc2FnZS5leHQud2VpY2hhdC5vcmlnaW5UeXBlID0gbWVzc2FnZS5leHQud2VpY2hhdC5vcmlnaW5UeXBlIHx8ICd3ZWJpbSc7CgoJICAgICAgICAgICAgdmFyIGRvbTsKCSAgICAgICAgICAgIHZhciBqc29uID0gewoJICAgICAgICAgICAgICAgIGZyb206IGNvbm4uY29udGV4dC51c2VySWQgfHwgJycsCgkgICAgICAgICAgICAgICAgdG86IG1lc3NhZ2UudG8sCgkgICAgICAgICAgICAgICAgYm9kaWVzOiBbbWVzc2FnZS5ib2R5XSwKCSAgICAgICAgICAgICAgICBleHQ6IG1lc3NhZ2UuZXh0IHx8IHt9CgkgICAgICAgICAgICB9OwoJICAgICAgICAgICAgdmFyIGpzb25zdHIgPSBfdXRpbHMuc3RyaW5naWZ5KGpzb24pOwoJICAgICAgICAgICAgZG9tID0gJG1zZyh7CgkgICAgICAgICAgICAgICAgdHlwZTogbWVzc2FnZS5ncm91cCB8fCAnY2hhdCcsCgkgICAgICAgICAgICAgICAgdG86IG1lc3NhZ2UudG9KaWQsCgkgICAgICAgICAgICAgICAgaWQ6IG1lc3NhZ2UuaWQsCgkgICAgICAgICAgICAgICAgeG1sbnM6ICdqYWJiZXI6Y2xpZW50JwoJICAgICAgICAgICAgfSkuYygnYm9keScpLnQoanNvbnN0cik7CgoJICAgICAgICAgICAgaWYgKG1lc3NhZ2Uucm9vbVR5cGUpIHsKCSAgICAgICAgICAgICAgICBkb20udXAoKS5jKCdyb29tdHlwZScsIHsgeG1sbnM6ICdlYXNlbW9iOng6cm9vbXR5cGUnLCB0eXBlOiAnY2hhdHJvb20nIH0pOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgaWYgKG1lc3NhZ2UuYm9keUlkKSB7CgkgICAgICAgICAgICAgICAgZG9tID0gJG1zZyh7CgkgICAgICAgICAgICAgICAgICAgIGZyb206IGNvbm4uY29udGV4dC5qaWQgfHwgJycsCgkgICAgICAgICAgICAgICAgICAgIHRvOiBtZXNzYWdlLnRvSmlkLAoJICAgICAgICAgICAgICAgICAgICBpZDogbWVzc2FnZS5pZCwKCSAgICAgICAgICAgICAgICAgICAgeG1sbnM6ICdqYWJiZXI6Y2xpZW50JwoJICAgICAgICAgICAgICAgIH0pLmMoJ2JvZHknKS50KG1lc3NhZ2UuYm9keUlkKTsKCSAgICAgICAgICAgICAgICB2YXIgZGVsaXZlcnkgPSB7CgkgICAgICAgICAgICAgICAgICAgIHhtbG5zOiAndXJuOnhtcHA6cmVjZWlwdHMnLAoJICAgICAgICAgICAgICAgICAgICBpZDogbWVzc2FnZS5ib2R5SWQKCSAgICAgICAgICAgICAgICB9OwoJICAgICAgICAgICAgICAgIGRvbS51cCgpLmMoJ2RlbGl2ZXJ5JywgZGVsaXZlcnkpOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgaWYgKG1lc3NhZ2UuYWNrSWQpIHsKCgkgICAgICAgICAgICAgICAgaWYgKGNvbm4uY29udGV4dC5qaWQuaW5kZXhPZihtZXNzYWdlLnRvSmlkKSA+PSAwKSB7CgkgICAgICAgICAgICAgICAgICAgIHJldHVybjsKCSAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgZG9tID0gJG1zZyh7CgkgICAgICAgICAgICAgICAgICAgIGZyb206IGNvbm4uY29udGV4dC5qaWQgfHwgJycsCgkgICAgICAgICAgICAgICAgICAgIHRvOiBtZXNzYWdlLnRvSmlkLAoJICAgICAgICAgICAgICAgICAgICBpZDogbWVzc2FnZS5pZCwKCSAgICAgICAgICAgICAgICAgICAgeG1sbnM6ICdqYWJiZXI6Y2xpZW50JwoJICAgICAgICAgICAgICAgIH0pLmMoJ2JvZHknKS50KG1lc3NhZ2UuYWNrSWQpOwoJICAgICAgICAgICAgICAgIHZhciByZWFkID0gewoJICAgICAgICAgICAgICAgICAgICB4bWxuczogJ3Vybjp4bXBwOnJlY2VpcHRzJywKCSAgICAgICAgICAgICAgICAgICAgaWQ6IG1lc3NhZ2UuYWNrSWQKCSAgICAgICAgICAgICAgICB9OwoJICAgICAgICAgICAgICAgIGRvbS51cCgpLmMoJ2Fja2VkJywgcmVhZCk7CgkgICAgICAgICAgICB9CgoJICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CgkgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBfbXNnSGFzaCAhPT0gJ3VuZGVmaW5lZCcgJiYgX21zZ0hhc2hbbWVzc2FnZS5pZF0pIHsKCSAgICAgICAgICAgICAgICAgICAgX21zZ0hhc2hbbWVzc2FnZS5pZF0ubXNnLmZhaWwgaW5zdGFuY2VvZiBGdW5jdGlvbiAmJiBfbXNnSGFzaFttZXNzYWdlLmlkXS5tc2cuZmFpbChtZXNzYWdlLmlkKTsKCSAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICB9LCA2MDAwMCk7CgkgICAgICAgICAgICBjb25uLnNlbmRDb21tYW5kKGRvbS50cmVlKCksIG1lc3NhZ2UuaWQpOwoJICAgICAgICB9OwoKCSAgICAgICAgaWYgKG1lLm1zZy5maWxlKSB7CgkgICAgICAgICAgICBpZiAobWUubXNnLmJvZHkgJiYgbWUubXNnLmJvZHkudXJsKSB7CgkgICAgICAgICAgICAgICAgLy8gT25seSBzZW5kIG1zZwoJICAgICAgICAgICAgICAgIF9zZW5kKG1lLm1zZyk7CgkgICAgICAgICAgICAgICAgcmV0dXJuOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgdmFyIF90bXBDb21wbGV0ZSA9IG1lLm1zZy5vbkZpbGVVcGxvYWRDb21wbGV0ZTsKCSAgICAgICAgICAgIHZhciBfY29tcGxldGUgPSBmdW5jdGlvbiBfY29tcGxldGUoZGF0YSkgewoJICAgICAgICAgICAgICAgIGlmIChkYXRhLmVudGl0aWVzWzBdWydmaWxlLW1ldGFkYXRhJ10pIHsKCSAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVfbGVuID0gZGF0YS5lbnRpdGllc1swXVsnZmlsZS1tZXRhZGF0YSddWydjb250ZW50LWxlbmd0aCddOwoJICAgICAgICAgICAgICAgICAgICAvLyBtZS5tc2cuZmlsZV9sZW5ndGggPSBmaWxlX2xlbjsKCSAgICAgICAgICAgICAgICAgICAgbWUubXNnLmZpbGV0eXBlID0gZGF0YS5lbnRpdGllc1swXVsnZmlsZS1tZXRhZGF0YSddWydjb250ZW50LXR5cGUnXTsKCSAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVfbGVuID4gMjA0ODAwKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICBtZS5tc2cudGh1bWJuYWlsID0gdHJ1ZTsKCSAgICAgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgICAgIH0KCgkgICAgICAgICAgICAgICAgbWUubXNnLmJvZHkgPSB7CgkgICAgICAgICAgICAgICAgICAgIHR5cGU6IG1lLm1zZy50eXBlIHx8ICdmaWxlJywKCgkgICAgICAgICAgICAgICAgICAgIHVybDogKGxvY2F0aW9uLnByb3RvY29sICE9ICdodHRwczonICYmIGNvbm4uaXNIdHRwRE5TID8gY29ubi5hcGlVcmwgKyBkYXRhLnVyaS5zdWJzdHIoZGF0YS51cmkuaW5kZXhPZigiLyIsIDkpKSA6IGRhdGEudXJpKSArICcvJyArIGRhdGEuZW50aXRpZXNbMF1bJ3V1aWQnXSwKCSAgICAgICAgICAgICAgICAgICAgc2VjcmV0OiBkYXRhLmVudGl0aWVzWzBdWydzaGFyZS1zZWNyZXQnXSwKCSAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IG1lLm1zZy5maWxlLmZpbGVuYW1lIHx8IG1lLm1zZy5maWxlbmFtZSwKCSAgICAgICAgICAgICAgICAgICAgc2l6ZTogewoJICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IG1lLm1zZy53aWR0aCB8fCAwLAoJICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBtZS5tc2cuaGVpZ2h0IHx8IDAKCSAgICAgICAgICAgICAgICAgICAgfSwKCSAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiBtZS5tc2cubGVuZ3RoIHx8IDAsCgkgICAgICAgICAgICAgICAgICAgIGZpbGVfbGVuZ3RoOiBtZS5tc2cuZXh0LmZpbGVfbGVuZ3RoIHx8IDAsCgkgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlOiBtZS5tc2cuZmlsZXR5cGUKCSAgICAgICAgICAgICAgICB9OwoJICAgICAgICAgICAgICAgIF9zZW5kKG1lLm1zZyk7CgkgICAgICAgICAgICAgICAgX3RtcENvbXBsZXRlIGluc3RhbmNlb2YgRnVuY3Rpb24gJiYgX3RtcENvbXBsZXRlKGRhdGEsIG1lLm1zZy5pZCk7CgkgICAgICAgICAgICB9OwoKCSAgICAgICAgICAgIG1lLm1zZy5vbkZpbGVVcGxvYWRDb21wbGV0ZSA9IF9jb21wbGV0ZTsKCSAgICAgICAgICAgIF91dGlscy51cGxvYWRGaWxlLmNhbGwoY29ubiwgbWUubXNnKTsKCSAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgIG1lLm1zZy5ib2R5ID0gewoJICAgICAgICAgICAgICAgIHR5cGU6IG1lLm1zZy50eXBlID09PSAnY2hhdCcgPyAndHh0JyA6IG1lLm1zZy50eXBlLAoJICAgICAgICAgICAgICAgIG1zZzogbWUubXNnLm1zZwoJICAgICAgICAgICAgfTsKCSAgICAgICAgICAgIGlmIChtZS5tc2cudHlwZSA9PT0gJ2NtZCcpIHsKCSAgICAgICAgICAgICAgICBtZS5tc2cuYm9keS5hY3Rpb24gPSBtZS5tc2cuYWN0aW9uOwoJICAgICAgICAgICAgfSBlbHNlIGlmIChtZS5tc2cudHlwZSA9PT0gJ2xvYycpIHsKCSAgICAgICAgICAgICAgICBtZS5tc2cuYm9keS5hZGRyID0gbWUubXNnLmFkZHI7CgkgICAgICAgICAgICAgICAgbWUubXNnLmJvZHkubGF0ID0gbWUubXNnLmxhdDsKCSAgICAgICAgICAgICAgICBtZS5tc2cuYm9keS5sbmcgPSBtZS5tc2cubG5nOwoJICAgICAgICAgICAgfQoKCSAgICAgICAgICAgIF9zZW5kKG1lLm1zZyk7CgkgICAgICAgIH0KCSAgICB9OwoKCSAgICBleHBvcnRzLl9tc2cgPSBfTWVzc2FnZTsKCSAgICBleHBvcnRzLm1lc3NhZ2UgPSBNZXNzYWdlOwoJfSkoKTsKCi8qKiovIH0pLAoKLyoqKi8gMjUxOgovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgoJInVzZSBzdHJpY3QiOwoKCTsoZnVuY3Rpb24gKCkgewoJICAgIGZ1bmN0aW9uIEFycmF5X2gobGVuZ3RoKSB7CgkgICAgICAgIHRoaXMuYXJyYXkgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IFtdIDogbmV3IEFycmF5KGxlbmd0aCk7CgkgICAgfQoKCSAgICBBcnJheV9oLnByb3RvdHlwZSA9IHsKCSAgICAgICAgLyoqCgkgICAgICAgICAqIOi/lOWbnuaVsOe7hOmVv+W6pgoJICAgICAgICAgKgoJICAgICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGxlbmd0aCBb5pWw57uE6ZW/5bqmXQoJICAgICAgICAgKi8KCSAgICAgICAgbGVuZ3RoOiBmdW5jdGlvbiBsZW5ndGgoKSB7CgkgICAgICAgICAgICByZXR1cm4gdGhpcy5hcnJheS5sZW5ndGg7CgkgICAgICAgIH0sCgoJICAgICAgICBhdDogZnVuY3Rpb24gYXQoaW5kZXgpIHsKCSAgICAgICAgICAgIHJldHVybiB0aGlzLmFycmF5W2luZGV4XTsKCSAgICAgICAgfSwKCgkgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KGluZGV4LCBvYmopIHsKCSAgICAgICAgICAgIHRoaXMuYXJyYXlbaW5kZXhdID0gb2JqOwoJICAgICAgICB9LAoKCSAgICAgICAgLyoqCgkgICAgICAgICAqIOWQkeaVsOe7hOeahOacq+Wwvua3u+WKoOS4gOS4quaIluWkmuS4quWFg+e0oO+8jOW5tui/lOWbnuaWsOeahOmVv+W6puOAggoJICAgICAgICAgKgoJICAgICAgICAgKiBAcGFyYW0gIHsqfSBvYmogW2Rlc2NyaXB0aW9uXQoJICAgICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGxlbmd0aCBb5paw5pWw57uE55qE6ZW/5bqmXQoJICAgICAgICAgKi8KCSAgICAgICAgcHVzaDogZnVuY3Rpb24gcHVzaChvYmopIHsKCSAgICAgICAgICAgIHJldHVybiB0aGlzLmFycmF5LnB1c2gob2JqKTsKCSAgICAgICAgfSwKCgkgICAgICAgIC8qKgoJICAgICAgICAgKiDov5Tlm57mlbDnu4TkuK3pgInlrprnmoTlhYPntKAKCSAgICAgICAgICoKCSAgICAgICAgICogQHBhcmFtICB7TnVtYmVyfSBzdGFydCBb5byA5aeL57Si5byV5YC8XQoJICAgICAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGVuZCBb57uT5p2f57Si5byV5YC8XQoJICAgICAgICAgKiBAcmV0dXJuIHtBcnJheX0gbmV3QXJyYXkgIFvmlrDnmoTmlbDnu4RdCgkgICAgICAgICAqLwoJICAgICAgICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkgewoJICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXJyYXkgPSB0aGlzLmFycmF5LnNsaWNlKHN0YXJ0LCBlbmQpOwoJICAgICAgICB9LAoKCSAgICAgICAgY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoYXJyYXkpIHsKCSAgICAgICAgICAgIHRoaXMuYXJyYXkgPSB0aGlzLmFycmF5LmNvbmNhdChhcnJheSk7CgkgICAgICAgIH0sCgoJICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShpbmRleCwgY291bnQpIHsKCSAgICAgICAgICAgIGNvdW50ID0gY291bnQgPT09IHVuZGVmaW5lZCA/IDEgOiBjb3VudDsKCSAgICAgICAgICAgIHRoaXMuYXJyYXkuc3BsaWNlKGluZGV4LCBjb3VudCk7CgkgICAgICAgIH0sCgoJICAgICAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikgewoJICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXJyYXkuam9pbihzZXBhcmF0b3IpOwoJICAgICAgICB9LAoKCSAgICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkgewoJICAgICAgICAgICAgdGhpcy5hcnJheS5sZW5ndGggPSAwOwoJICAgICAgICB9CgkgICAgfTsKCgkgICAgLyoqCgkgICAgICog5YWI6L+b5YWI5Ye66Zif5YiXIChGaXJzdCBJbnB1dCBGaXJzdCBPdXRwdXQpCgkgICAgICoKCSAgICAgKiDkuIDnp43lhYjov5vlhYjlh7rnmoTmlbDmja7nvJPlrZjlmagKCSAgICAgKi8KCSAgICB2YXIgUXVldWUgPSBmdW5jdGlvbiBRdWV1ZSgpIHsKCSAgICAgICAgdGhpcy5fYXJyYXlfaCA9IG5ldyBBcnJheV9oKCk7CgkgICAgfTsKCgkgICAgUXVldWUucHJvdG90eXBlID0gewoJICAgICAgICBfaW5kZXg6IDAsCgoJICAgICAgICAvKioKCSAgICAgICAgICog5o6S6ZifCgkgICAgICAgICAqCgkgICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gb2JqIFtkZXNjcmlwdGlvbl0KCSAgICAgICAgICogQHJldHVybiB7W3R5cGVdfSAgICAgW2Rlc2NyaXB0aW9uXQoJICAgICAgICAgKi8KCSAgICAgICAgcHVzaDogZnVuY3Rpb24gcHVzaChvYmopIHsKCSAgICAgICAgICAgIHRoaXMuX2FycmF5X2gucHVzaChvYmopOwoJICAgICAgICB9LAoKCSAgICAgICAgLyoqCgkgICAgICAgICAqIOWHuumYnwoJICAgICAgICAgKgoJICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFtkZXNjcmlwdGlvbl0KCSAgICAgICAgICovCgkgICAgICAgIHBvcDogZnVuY3Rpb24gcG9wKCkgewoJICAgICAgICAgICAgdmFyIHJldCA9IG51bGw7CgkgICAgICAgICAgICBpZiAodGhpcy5fYXJyYXlfaC5sZW5ndGgoKSkgewoJICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuX2FycmF5X2guYXQodGhpcy5faW5kZXgpOwoJICAgICAgICAgICAgICAgIGlmICgrK3RoaXMuX2luZGV4ICogMiA+PSB0aGlzLl9hcnJheV9oLmxlbmd0aCgpKSB7CgkgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FycmF5X2guc2xpY2UodGhpcy5faW5kZXgpOwoJICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IDA7CgkgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgcmV0dXJuIHJldDsKCSAgICAgICAgfSwKCgkgICAgICAgIC8qKgoJICAgICAgICAgKiDov5Tlm57pmJ/liJfkuK3lpLTpg6go5Y2z5pyA5paw5re75Yqg55qEKeeahOWKqOaAgeWvueixoQoJICAgICAgICAgKgoJICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFtkZXNjcmlwdGlvbl0KCSAgICAgICAgICovCgkgICAgICAgIGhlYWQ6IGZ1bmN0aW9uIGhlYWQoKSB7CgkgICAgICAgICAgICB2YXIgcmV0ID0gbnVsbCwKCSAgICAgICAgICAgICAgICBsZW4gPSB0aGlzLl9hcnJheV9oLmxlbmd0aCgpOwoJICAgICAgICAgICAgaWYgKGxlbikgewoJICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuX2FycmF5X2guYXQobGVuIC0gMSk7CgkgICAgICAgICAgICB9CgkgICAgICAgICAgICByZXR1cm4gcmV0OwoJICAgICAgICB9LAoKCSAgICAgICAgLyoqCgkgICAgICAgICAqIOi/lOWbnumYn+WIl+S4reWwvumDqCjljbPmnIDml6nmt7vliqDnmoQp55qE5Yqo5oCB5a+56LGhCgkgICAgICAgICAqCgkgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gW2Rlc2NyaXB0aW9uXQoJICAgICAgICAgKi8KCSAgICAgICAgdGFpbDogZnVuY3Rpb24gdGFpbCgpIHsKCSAgICAgICAgICAgIHZhciByZXQgPSBudWxsLAoJICAgICAgICAgICAgICAgIGxlbiA9IHRoaXMuX2FycmF5X2gubGVuZ3RoKCk7CgkgICAgICAgICAgICBpZiAobGVuKSB7CgkgICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5fYXJyYXlfaC5hdCh0aGlzLl9pbmRleCk7CgkgICAgICAgICAgICB9CgkgICAgICAgICAgICByZXR1cm4gcmV0OwoJICAgICAgICB9LAoKCSAgICAgICAgLyoqCgkgICAgICAgICAqIOi/lOWbnuaVsOaNrumYn+WIl+mVv+W6pgoJICAgICAgICAgKgoJICAgICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFtkZXNjcmlwdGlvbl0KCSAgICAgICAgICovCgkgICAgICAgIGxlbmd0aDogZnVuY3Rpb24gbGVuZ3RoKCkgewoJICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FycmF5X2gubGVuZ3RoKCkgLSB0aGlzLl9pbmRleDsKCSAgICAgICAgfSwKCgkgICAgICAgIC8qKgoJICAgICAgICAgKiDpmJ/liJfmmK/lkKbkuLrnqboKCSAgICAgICAgICoKCSAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn0gW2Rlc2NyaXB0aW9uXQoJICAgICAgICAgKi8KCSAgICAgICAgZW1wdHk6IGZ1bmN0aW9uIGVtcHR5KCkgewoJICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FycmF5X2gubGVuZ3RoKCkgPT09IDA7CgkgICAgICAgIH0sCgoJICAgICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7CgkgICAgICAgICAgICB0aGlzLl9hcnJheV9oLmNsZWFyKCk7CgkgICAgICAgIH0KCSAgICB9OwoJICAgIGV4cG9ydHMuUXVldWUgPSBRdWV1ZTsKCX0pKCk7CgovKioqLyB9KSwKCi8qKiovIDI1MjoKLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCXZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsvLyAgICAgVW5kZXJzY29yZS5qcyAxLjguMwoJLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnCgkvLyAgICAgKGMpIDIwMDktMjAxNSBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9ycwoJLy8gICAgIFVuZGVyc2NvcmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCgoJKGZ1bmN0aW9uKCkgewoKCSAgLy8gQmFzZWxpbmUgc2V0dXAKCSAgLy8gLS0tLS0tLS0tLS0tLS0KCgkgIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZXhwb3J0c2Agb24gdGhlIHNlcnZlci4KCSAgdmFyIHJvb3QgPSB0aGlzOwoKCSAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGBfYCB2YXJpYWJsZS4KCSAgdmFyIHByZXZpb3VzVW5kZXJzY29yZSA9IHJvb3QuXzsKCgkgIC8vIFNhdmUgYnl0ZXMgaW4gdGhlIG1pbmlmaWVkIChidXQgbm90IGd6aXBwZWQpIHZlcnNpb246CgkgIHZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLCBPYmpQcm90byA9IE9iamVjdC5wcm90b3R5cGUsIEZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTsKCgkgIC8vIENyZWF0ZSBxdWljayByZWZlcmVuY2UgdmFyaWFibGVzIGZvciBzcGVlZCBhY2Nlc3MgdG8gY29yZSBwcm90b3R5cGVzLgoJICB2YXIKCSAgICBwdXNoICAgICAgICAgICAgID0gQXJyYXlQcm90by5wdXNoLAoJICAgIHNsaWNlICAgICAgICAgICAgPSBBcnJheVByb3RvLnNsaWNlLAoJICAgIHRvU3RyaW5nICAgICAgICAgPSBPYmpQcm90by50b1N0cmluZywKCSAgICBoYXNPd25Qcm9wZXJ0eSAgID0gT2JqUHJvdG8uaGFzT3duUHJvcGVydHk7CgoJICAvLyBBbGwgKipFQ01BU2NyaXB0IDUqKiBuYXRpdmUgZnVuY3Rpb24gaW1wbGVtZW50YXRpb25zIHRoYXQgd2UgaG9wZSB0byB1c2UKCSAgLy8gYXJlIGRlY2xhcmVkIGhlcmUuCgkgIHZhcgoJICAgIG5hdGl2ZUlzQXJyYXkgICAgICA9IEFycmF5LmlzQXJyYXksCgkgICAgbmF0aXZlS2V5cyAgICAgICAgID0gT2JqZWN0LmtleXMsCgkgICAgbmF0aXZlQmluZCAgICAgICAgID0gRnVuY1Byb3RvLmJpbmQsCgkgICAgbmF0aXZlQ3JlYXRlICAgICAgID0gT2JqZWN0LmNyZWF0ZTsKCgkgIC8vIE5ha2VkIGZ1bmN0aW9uIHJlZmVyZW5jZSBmb3Igc3Vycm9nYXRlLXByb3RvdHlwZS1zd2FwcGluZy4KCSAgdmFyIEN0b3IgPSBmdW5jdGlvbigpe307CgoJICAvLyBDcmVhdGUgYSBzYWZlIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yIHVzZSBiZWxvdy4KCSAgdmFyIF8gPSBmdW5jdGlvbihvYmopIHsKCSAgICBpZiAob2JqIGluc3RhbmNlb2YgXykgcmV0dXJuIG9iajsKCSAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgXykpIHJldHVybiBuZXcgXyhvYmopOwoJICAgIHRoaXMuX3dyYXBwZWQgPSBvYmo7CgkgIH07CgoJICAvLyBFeHBvcnQgdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciAqKk5vZGUuanMqKiwgd2l0aAoJICAvLyBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBmb3IgdGhlIG9sZCBgcmVxdWlyZSgpYCBBUEkuIElmIHdlJ3JlIGluCgkgIC8vIHRoZSBicm93c2VyLCBhZGQgYF9gIGFzIGEgZ2xvYmFsIG9iamVjdC4KCSAgaWYgKHRydWUpIHsKCSAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHsKCSAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF87CgkgICAgfQoJICAgIGV4cG9ydHMuXyA9IF87CgkgIH0gZWxzZSB7CgkgICAgcm9vdC5fID0gXzsKCSAgfQoKCSAgLy8gQ3VycmVudCB2ZXJzaW9uLgoJICBfLlZFUlNJT04gPSAnMS44LjMnOwoKCSAgLy8gSW50ZXJuYWwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIGVmZmljaWVudCAoZm9yIGN1cnJlbnQgZW5naW5lcykgdmVyc2lvbgoJICAvLyBvZiB0aGUgcGFzc2VkLWluIGNhbGxiYWNrLCB0byBiZSByZXBlYXRlZGx5IGFwcGxpZWQgaW4gb3RoZXIgVW5kZXJzY29yZQoJICAvLyBmdW5jdGlvbnMuCgkgIHZhciBvcHRpbWl6ZUNiID0gZnVuY3Rpb24oZnVuYywgY29udGV4dCwgYXJnQ291bnQpIHsKCSAgICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSByZXR1cm4gZnVuYzsKCSAgICBzd2l0Y2ggKGFyZ0NvdW50ID09IG51bGwgPyAzIDogYXJnQ291bnQpIHsKCSAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7CgkgICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUpOwoJICAgICAgfTsKCSAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikgewoJICAgICAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIHZhbHVlLCBvdGhlcik7CgkgICAgICB9OwoJICAgICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7CgkgICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTsKCSAgICAgIH07CgkgICAgICBjYXNlIDQ6IHJldHVybiBmdW5jdGlvbihhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7CgkgICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7CgkgICAgICB9OwoJICAgIH0KCSAgICByZXR1cm4gZnVuY3Rpb24oKSB7CgkgICAgICByZXR1cm4gZnVuYy5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpOwoJICAgIH07CgkgIH07CgoJICAvLyBBIG1vc3RseS1pbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBjYWxsYmFja3MgdGhhdCBjYW4gYmUgYXBwbGllZAoJICAvLyB0byBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uLCByZXR1cm5pbmcgdGhlIGRlc2lyZWQgcmVzdWx0IOKAlCBlaXRoZXIKCSAgLy8gaWRlbnRpdHksIGFuIGFyYml0cmFyeSBjYWxsYmFjaywgYSBwcm9wZXJ0eSBtYXRjaGVyLCBvciBhIHByb3BlcnR5IGFjY2Vzc29yLgoJICB2YXIgY2IgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpIHsKCSAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIF8uaWRlbnRpdHk7CgkgICAgaWYgKF8uaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybiBvcHRpbWl6ZUNiKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCk7CgkgICAgaWYgKF8uaXNPYmplY3QodmFsdWUpKSByZXR1cm4gXy5tYXRjaGVyKHZhbHVlKTsKCSAgICByZXR1cm4gXy5wcm9wZXJ0eSh2YWx1ZSk7CgkgIH07CgkgIF8uaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCkgewoJICAgIHJldHVybiBjYih2YWx1ZSwgY29udGV4dCwgSW5maW5pdHkpOwoJICB9OwoKCSAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGFzc2lnbmVyIGZ1bmN0aW9ucy4KCSAgdmFyIGNyZWF0ZUFzc2lnbmVyID0gZnVuY3Rpb24oa2V5c0Z1bmMsIHVuZGVmaW5lZE9ubHkpIHsKCSAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7CgkgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsKCSAgICAgIGlmIChsZW5ndGggPCAyIHx8IG9iaiA9PSBudWxsKSByZXR1cm4gb2JqOwoJICAgICAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykgewoJICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2luZGV4XSwKCSAgICAgICAgICAgIGtleXMgPSBrZXlzRnVuYyhzb3VyY2UpLAoJICAgICAgICAgICAgbCA9IGtleXMubGVuZ3RoOwoJICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykgewoJICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldOwoJICAgICAgICAgIGlmICghdW5kZWZpbmVkT25seSB8fCBvYmpba2V5XSA9PT0gdm9pZCAwKSBvYmpba2V5XSA9IHNvdXJjZVtrZXldOwoJICAgICAgICB9CgkgICAgICB9CgkgICAgICByZXR1cm4gb2JqOwoJICAgIH07CgkgIH07CgoJICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBuZXcgb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSBhbm90aGVyLgoJICB2YXIgYmFzZUNyZWF0ZSA9IGZ1bmN0aW9uKHByb3RvdHlwZSkgewoJICAgIGlmICghXy5pc09iamVjdChwcm90b3R5cGUpKSByZXR1cm4ge307CgkgICAgaWYgKG5hdGl2ZUNyZWF0ZSkgcmV0dXJuIG5hdGl2ZUNyZWF0ZShwcm90b3R5cGUpOwoJICAgIEN0b3IucHJvdG90eXBlID0gcHJvdG90eXBlOwoJICAgIHZhciByZXN1bHQgPSBuZXcgQ3RvcjsKCSAgICBDdG9yLnByb3RvdHlwZSA9IG51bGw7CgkgICAgcmV0dXJuIHJlc3VsdDsKCSAgfTsKCgkgIHZhciBwcm9wZXJ0eSA9IGZ1bmN0aW9uKGtleSkgewoJICAgIHJldHVybiBmdW5jdGlvbihvYmopIHsKCSAgICAgIHJldHVybiBvYmogPT0gbnVsbCA/IHZvaWQgMCA6IG9ialtrZXldOwoJICAgIH07CgkgIH07CgoJICAvLyBIZWxwZXIgZm9yIGNvbGxlY3Rpb24gbWV0aG9kcyB0byBkZXRlcm1pbmUgd2hldGhlciBhIGNvbGxlY3Rpb24KCSAgLy8gc2hvdWxkIGJlIGl0ZXJhdGVkIGFzIGFuIGFycmF5IG9yIGFzIGFuIG9iamVjdAoJICAvLyBSZWxhdGVkOiBodHRwOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b2xlbmd0aAoJICAvLyBBdm9pZHMgYSB2ZXJ5IG5hc3R5IGlPUyA4IEpJVCBidWcgb24gQVJNLTY0LiAjMjA5NAoJICB2YXIgTUFYX0FSUkFZX0lOREVYID0gTWF0aC5wb3coMiwgNTMpIC0gMTsKCSAgdmFyIGdldExlbmd0aCA9IHByb3BlcnR5KCdsZW5ndGgnKTsKCSAgdmFyIGlzQXJyYXlMaWtlID0gZnVuY3Rpb24oY29sbGVjdGlvbikgewoJICAgIHZhciBsZW5ndGggPSBnZXRMZW5ndGgoY29sbGVjdGlvbik7CgkgICAgcmV0dXJuIHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicgJiYgbGVuZ3RoID49IDAgJiYgbGVuZ3RoIDw9IE1BWF9BUlJBWV9JTkRFWDsKCSAgfTsKCgkgIC8vIENvbGxlY3Rpb24gRnVuY3Rpb25zCgkgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tCgoJICAvLyBUaGUgY29ybmVyc3RvbmUsIGFuIGBlYWNoYCBpbXBsZW1lbnRhdGlvbiwgYWthIGBmb3JFYWNoYC4KCSAgLy8gSGFuZGxlcyByYXcgb2JqZWN0cyBpbiBhZGRpdGlvbiB0byBhcnJheS1saWtlcy4gVHJlYXRzIGFsbAoJICAvLyBzcGFyc2UgYXJyYXktbGlrZXMgYXMgaWYgdGhleSB3ZXJlIGRlbnNlLgoJICBfLmVhY2ggPSBfLmZvckVhY2ggPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7CgkgICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0KTsKCSAgICB2YXIgaSwgbGVuZ3RoOwoJICAgIGlmIChpc0FycmF5TGlrZShvYmopKSB7CgkgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKCSAgICAgICAgaXRlcmF0ZWUob2JqW2ldLCBpLCBvYmopOwoJICAgICAgfQoJICAgIH0gZWxzZSB7CgkgICAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopOwoJICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewoJICAgICAgICBpdGVyYXRlZShvYmpba2V5c1tpXV0sIGtleXNbaV0sIG9iaik7CgkgICAgICB9CgkgICAgfQoJICAgIHJldHVybiBvYmo7CgkgIH07CgoJICAvLyBSZXR1cm4gdGhlIHJlc3VsdHMgb2YgYXBwbHlpbmcgdGhlIGl0ZXJhdGVlIHRvIGVhY2ggZWxlbWVudC4KCSAgXy5tYXAgPSBfLmNvbGxlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7CgkgICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7CgkgICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSwKCSAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsCgkgICAgICAgIHJlc3VsdHMgPSBBcnJheShsZW5ndGgpOwoJICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHsKCSAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7CgkgICAgICByZXN1bHRzW2luZGV4XSA9IGl0ZXJhdGVlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKTsKCSAgICB9CgkgICAgcmV0dXJuIHJlc3VsdHM7CgkgIH07CgoJICAvLyBDcmVhdGUgYSByZWR1Y2luZyBmdW5jdGlvbiBpdGVyYXRpbmcgbGVmdCBvciByaWdodC4KCSAgZnVuY3Rpb24gY3JlYXRlUmVkdWNlKGRpcikgewoJICAgIC8vIE9wdGltaXplZCBpdGVyYXRvciBmdW5jdGlvbiBhcyB1c2luZyBhcmd1bWVudHMubGVuZ3RoCgkgICAgLy8gaW4gdGhlIG1haW4gZnVuY3Rpb24gd2lsbCBkZW9wdGltaXplIHRoZSwgc2VlICMxOTkxLgoJICAgIGZ1bmN0aW9uIGl0ZXJhdG9yKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGtleXMsIGluZGV4LCBsZW5ndGgpIHsKCSAgICAgIGZvciAoOyBpbmRleCA+PSAwICYmIGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSBkaXIpIHsKCSAgICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDsKCSAgICAgICAgbWVtbyA9IGl0ZXJhdGVlKG1lbW8sIG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKTsKCSAgICAgIH0KCSAgICAgIHJldHVybiBtZW1vOwoJICAgIH0KCgkgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGNvbnRleHQpIHsKCSAgICAgIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgNCk7CgkgICAgICB2YXIga2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIF8ua2V5cyhvYmopLAoJICAgICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLAoJICAgICAgICAgIGluZGV4ID0gZGlyID4gMCA/IDAgOiBsZW5ndGggLSAxOwoJICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBpbml0aWFsIHZhbHVlIGlmIG5vbmUgaXMgcHJvdmlkZWQuCgkgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHsKCSAgICAgICAgbWVtbyA9IG9ialtrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleF07CgkgICAgICAgIGluZGV4ICs9IGRpcjsKCSAgICAgIH0KCSAgICAgIHJldHVybiBpdGVyYXRvcihvYmosIGl0ZXJhdGVlLCBtZW1vLCBrZXlzLCBpbmRleCwgbGVuZ3RoKTsKCSAgICB9OwoJICB9CgoJICAvLyAqKlJlZHVjZSoqIGJ1aWxkcyB1cCBhIHNpbmdsZSByZXN1bHQgZnJvbSBhIGxpc3Qgb2YgdmFsdWVzLCBha2EgYGluamVjdGAsCgkgIC8vIG9yIGBmb2xkbGAuCgkgIF8ucmVkdWNlID0gXy5mb2xkbCA9IF8uaW5qZWN0ID0gY3JlYXRlUmVkdWNlKDEpOwoKCSAgLy8gVGhlIHJpZ2h0LWFzc29jaWF0aXZlIHZlcnNpb24gb2YgcmVkdWNlLCBhbHNvIGtub3duIGFzIGBmb2xkcmAuCgkgIF8ucmVkdWNlUmlnaHQgPSBfLmZvbGRyID0gY3JlYXRlUmVkdWNlKC0xKTsKCgkgIC8vIFJldHVybiB0aGUgZmlyc3QgdmFsdWUgd2hpY2ggcGFzc2VzIGEgdHJ1dGggdGVzdC4gQWxpYXNlZCBhcyBgZGV0ZWN0YC4KCSAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkgewoJICAgIHZhciBrZXk7CgkgICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHsKCSAgICAgIGtleSA9IF8uZmluZEluZGV4KG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KTsKCSAgICB9IGVsc2UgewoJICAgICAga2V5ID0gXy5maW5kS2V5KG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KTsKCSAgICB9CgkgICAgaWYgKGtleSAhPT0gdm9pZCAwICYmIGtleSAhPT0gLTEpIHJldHVybiBvYmpba2V5XTsKCSAgfTsKCgkgIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgcGFzcyBhIHRydXRoIHRlc3QuCgkgIC8vIEFsaWFzZWQgYXMgYHNlbGVjdGAuCgkgIF8uZmlsdGVyID0gXy5zZWxlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkgewoJICAgIHZhciByZXN1bHRzID0gW107CgkgICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTsKCSAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKCSAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBsaXN0KSkgcmVzdWx0cy5wdXNoKHZhbHVlKTsKCSAgICB9KTsKCSAgICByZXR1cm4gcmVzdWx0czsKCSAgfTsKCgkgIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGZvciB3aGljaCBhIHRydXRoIHRlc3QgZmFpbHMuCgkgIF8ucmVqZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHsKCSAgICByZXR1cm4gXy5maWx0ZXIob2JqLCBfLm5lZ2F0ZShjYihwcmVkaWNhdGUpKSwgY29udGV4dCk7CgkgIH07CgoJICAvLyBEZXRlcm1pbmUgd2hldGhlciBhbGwgb2YgdGhlIGVsZW1lbnRzIG1hdGNoIGEgdHJ1dGggdGVzdC4KCSAgLy8gQWxpYXNlZCBhcyBgYWxsYC4KCSAgXy5ldmVyeSA9IF8uYWxsID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHsKCSAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpOwoJICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksCgkgICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoOwoJICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHsKCSAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7CgkgICAgICBpZiAoIXByZWRpY2F0ZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaikpIHJldHVybiBmYWxzZTsKCSAgICB9CgkgICAgcmV0dXJuIHRydWU7CgkgIH07CgoJICAvLyBEZXRlcm1pbmUgaWYgYXQgbGVhc3Qgb25lIGVsZW1lbnQgaW4gdGhlIG9iamVjdCBtYXRjaGVzIGEgdHJ1dGggdGVzdC4KCSAgLy8gQWxpYXNlZCBhcyBgYW55YC4KCSAgXy5zb21lID0gXy5hbnkgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkgewoJICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7CgkgICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSwKCSAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGg7CgkgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykgewoJICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDsKCSAgICAgIGlmIChwcmVkaWNhdGUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopKSByZXR1cm4gdHJ1ZTsKCSAgICB9CgkgICAgcmV0dXJuIGZhbHNlOwoJICB9OwoKCSAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBhcnJheSBvciBvYmplY3QgY29udGFpbnMgYSBnaXZlbiBpdGVtICh1c2luZyBgPT09YCkuCgkgIC8vIEFsaWFzZWQgYXMgYGluY2x1ZGVzYCBhbmQgYGluY2x1ZGVgLgoJICBfLmNvbnRhaW5zID0gXy5pbmNsdWRlcyA9IF8uaW5jbHVkZSA9IGZ1bmN0aW9uKG9iaiwgaXRlbSwgZnJvbUluZGV4LCBndWFyZCkgewoJICAgIGlmICghaXNBcnJheUxpa2Uob2JqKSkgb2JqID0gXy52YWx1ZXMob2JqKTsKCSAgICBpZiAodHlwZW9mIGZyb21JbmRleCAhPSAnbnVtYmVyJyB8fCBndWFyZCkgZnJvbUluZGV4ID0gMDsKCSAgICByZXR1cm4gXy5pbmRleE9mKG9iaiwgaXRlbSwgZnJvbUluZGV4KSA+PSAwOwoJICB9OwoKCSAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uCgkgIF8uaW52b2tlID0gZnVuY3Rpb24ob2JqLCBtZXRob2QpIHsKCSAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTsKCSAgICB2YXIgaXNGdW5jID0gXy5pc0Z1bmN0aW9uKG1ldGhvZCk7CgkgICAgcmV0dXJuIF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUpIHsKCSAgICAgIHZhciBmdW5jID0gaXNGdW5jID8gbWV0aG9kIDogdmFsdWVbbWV0aG9kXTsKCSAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyBmdW5jIDogZnVuYy5hcHBseSh2YWx1ZSwgYXJncyk7CgkgICAgfSk7CgkgIH07CgoJICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBtYXBgOiBmZXRjaGluZyBhIHByb3BlcnR5LgoJICBfLnBsdWNrID0gZnVuY3Rpb24ob2JqLCBrZXkpIHsKCSAgICByZXR1cm4gXy5tYXAob2JqLCBfLnByb3BlcnR5KGtleSkpOwoJICB9OwoKCSAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgZmlsdGVyYDogc2VsZWN0aW5nIG9ubHkgb2JqZWN0cwoJICAvLyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLgoJICBfLndoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycykgewoJICAgIHJldHVybiBfLmZpbHRlcihvYmosIF8ubWF0Y2hlcihhdHRycykpOwoJICB9OwoKCSAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgZmluZGA6IGdldHRpbmcgdGhlIGZpcnN0IG9iamVjdAoJICAvLyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLgoJICBfLmZpbmRXaGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHsKCSAgICByZXR1cm4gXy5maW5kKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7CgkgIH07CgoJICAvLyBSZXR1cm4gdGhlIG1heGltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuCgkgIF8ubWF4ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkgewoJICAgIHZhciByZXN1bHQgPSAtSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IC1JbmZpbml0eSwKCSAgICAgICAgdmFsdWUsIGNvbXB1dGVkOwoJICAgIGlmIChpdGVyYXRlZSA9PSBudWxsICYmIG9iaiAhPSBudWxsKSB7CgkgICAgICBvYmogPSBpc0FycmF5TGlrZShvYmopID8gb2JqIDogXy52YWx1ZXMob2JqKTsKCSAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKCSAgICAgICAgdmFsdWUgPSBvYmpbaV07CgkgICAgICAgIGlmICh2YWx1ZSA+IHJlc3VsdCkgewoJICAgICAgICAgIHJlc3VsdCA9IHZhbHVlOwoJICAgICAgICB9CgkgICAgICB9CgkgICAgfSBlbHNlIHsKCSAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpOwoJICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CgkgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBsaXN0KTsKCSAgICAgICAgaWYgKGNvbXB1dGVkID4gbGFzdENvbXB1dGVkIHx8IGNvbXB1dGVkID09PSAtSW5maW5pdHkgJiYgcmVzdWx0ID09PSAtSW5maW5pdHkpIHsKCSAgICAgICAgICByZXN1bHQgPSB2YWx1ZTsKCSAgICAgICAgICBsYXN0Q29tcHV0ZWQgPSBjb21wdXRlZDsKCSAgICAgICAgfQoJICAgICAgfSk7CgkgICAgfQoJICAgIHJldHVybiByZXN1bHQ7CgkgIH07CgoJICAvLyBSZXR1cm4gdGhlIG1pbmltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuCgkgIF8ubWluID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkgewoJICAgIHZhciByZXN1bHQgPSBJbmZpbml0eSwgbGFzdENvbXB1dGVkID0gSW5maW5pdHksCgkgICAgICAgIHZhbHVlLCBjb21wdXRlZDsKCSAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCAmJiBvYmogIT0gbnVsbCkgewoJICAgICAgb2JqID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IF8udmFsdWVzKG9iaik7CgkgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CgkgICAgICAgIHZhbHVlID0gb2JqW2ldOwoJICAgICAgICBpZiAodmFsdWUgPCByZXN1bHQpIHsKCSAgICAgICAgICByZXN1bHQgPSB2YWx1ZTsKCSAgICAgICAgfQoJICAgICAgfQoJICAgIH0gZWxzZSB7CgkgICAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTsKCSAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewoJICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgbGlzdCk7CgkgICAgICAgIGlmIChjb21wdXRlZCA8IGxhc3RDb21wdXRlZCB8fCBjb21wdXRlZCA9PT0gSW5maW5pdHkgJiYgcmVzdWx0ID09PSBJbmZpbml0eSkgewoJICAgICAgICAgIHJlc3VsdCA9IHZhbHVlOwoJICAgICAgICAgIGxhc3RDb21wdXRlZCA9IGNvbXB1dGVkOwoJICAgICAgICB9CgkgICAgICB9KTsKCSAgICB9CgkgICAgcmV0dXJuIHJlc3VsdDsKCSAgfTsKCgkgIC8vIFNodWZmbGUgYSBjb2xsZWN0aW9uLCB1c2luZyB0aGUgbW9kZXJuIHZlcnNpb24gb2YgdGhlCgkgIC8vIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXLigJNZYXRlc19zaHVmZmxlKS4KCSAgXy5zaHVmZmxlID0gZnVuY3Rpb24ob2JqKSB7CgkgICAgdmFyIHNldCA9IGlzQXJyYXlMaWtlKG9iaikgPyBvYmogOiBfLnZhbHVlcyhvYmopOwoJICAgIHZhciBsZW5ndGggPSBzZXQubGVuZ3RoOwoJICAgIHZhciBzaHVmZmxlZCA9IEFycmF5KGxlbmd0aCk7CgkgICAgZm9yICh2YXIgaW5kZXggPSAwLCByYW5kOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykgewoJICAgICAgcmFuZCA9IF8ucmFuZG9tKDAsIGluZGV4KTsKCSAgICAgIGlmIChyYW5kICE9PSBpbmRleCkgc2h1ZmZsZWRbaW5kZXhdID0gc2h1ZmZsZWRbcmFuZF07CgkgICAgICBzaHVmZmxlZFtyYW5kXSA9IHNldFtpbmRleF07CgkgICAgfQoJICAgIHJldHVybiBzaHVmZmxlZDsKCSAgfTsKCgkgIC8vIFNhbXBsZSAqKm4qKiByYW5kb20gdmFsdWVzIGZyb20gYSBjb2xsZWN0aW9uLgoJICAvLyBJZiAqKm4qKiBpcyBub3Qgc3BlY2lmaWVkLCByZXR1cm5zIGEgc2luZ2xlIHJhbmRvbSBlbGVtZW50LgoJICAvLyBUaGUgaW50ZXJuYWwgYGd1YXJkYCBhcmd1bWVudCBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBtYXBgLgoJICBfLnNhbXBsZSA9IGZ1bmN0aW9uKG9iaiwgbiwgZ3VhcmQpIHsKCSAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSB7CgkgICAgICBpZiAoIWlzQXJyYXlMaWtlKG9iaikpIG9iaiA9IF8udmFsdWVzKG9iaik7CgkgICAgICByZXR1cm4gb2JqW18ucmFuZG9tKG9iai5sZW5ndGggLSAxKV07CgkgICAgfQoJICAgIHJldHVybiBfLnNodWZmbGUob2JqKS5zbGljZSgwLCBNYXRoLm1heCgwLCBuKSk7CgkgIH07CgoJICAvLyBTb3J0IHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24gcHJvZHVjZWQgYnkgYW4gaXRlcmF0ZWUuCgkgIF8uc29ydEJ5ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkgewoJICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpOwoJICAgIHJldHVybiBfLnBsdWNrKF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CgkgICAgICByZXR1cm4gewoJICAgICAgICB2YWx1ZTogdmFsdWUsCgkgICAgICAgIGluZGV4OiBpbmRleCwKCSAgICAgICAgY3JpdGVyaWE6IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgbGlzdCkKCSAgICAgIH07CgkgICAgfSkuc29ydChmdW5jdGlvbihsZWZ0LCByaWdodCkgewoJICAgICAgdmFyIGEgPSBsZWZ0LmNyaXRlcmlhOwoJICAgICAgdmFyIGIgPSByaWdodC5jcml0ZXJpYTsKCSAgICAgIGlmIChhICE9PSBiKSB7CgkgICAgICAgIGlmIChhID4gYiB8fCBhID09PSB2b2lkIDApIHJldHVybiAxOwoJICAgICAgICBpZiAoYSA8IGIgfHwgYiA9PT0gdm9pZCAwKSByZXR1cm4gLTE7CgkgICAgICB9CgkgICAgICByZXR1cm4gbGVmdC5pbmRleCAtIHJpZ2h0LmluZGV4OwoJICAgIH0pLCAndmFsdWUnKTsKCSAgfTsKCgkgIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHVzZWQgZm9yIGFnZ3JlZ2F0ZSAiZ3JvdXAgYnkiIG9wZXJhdGlvbnMuCgkgIHZhciBncm91cCA9IGZ1bmN0aW9uKGJlaGF2aW9yKSB7CgkgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHsKCSAgICAgIHZhciByZXN1bHQgPSB7fTsKCSAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpOwoJICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7CgkgICAgICAgIHZhciBrZXkgPSBpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIG9iaik7CgkgICAgICAgIGJlaGF2aW9yKHJlc3VsdCwgdmFsdWUsIGtleSk7CgkgICAgICB9KTsKCSAgICAgIHJldHVybiByZXN1bHQ7CgkgICAgfTsKCSAgfTsKCgkgIC8vIEdyb3VwcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLiBQYXNzIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGUKCSAgLy8gdG8gZ3JvdXAgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjcml0ZXJpb24uCgkgIF8uZ3JvdXBCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkgewoJICAgIGlmIChfLmhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldLnB1c2godmFsdWUpOyBlbHNlIHJlc3VsdFtrZXldID0gW3ZhbHVlXTsKCSAgfSk7CgoJICAvLyBJbmRleGVzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24sIHNpbWlsYXIgdG8gYGdyb3VwQnlgLCBidXQgZm9yCgkgIC8vIHdoZW4geW91IGtub3cgdGhhdCB5b3VyIGluZGV4IHZhbHVlcyB3aWxsIGJlIHVuaXF1ZS4KCSAgXy5pbmRleEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7CgkgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTsKCSAgfSk7CgoJICAvLyBDb3VudHMgaW5zdGFuY2VzIG9mIGFuIG9iamVjdCB0aGF0IGdyb3VwIGJ5IGEgY2VydGFpbiBjcml0ZXJpb24uIFBhc3MKCSAgLy8gZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZSB0byBjb3VudCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlCgkgIC8vIGNyaXRlcmlvbi4KCSAgXy5jb3VudEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7CgkgICAgaWYgKF8uaGFzKHJlc3VsdCwga2V5KSkgcmVzdWx0W2tleV0rKzsgZWxzZSByZXN1bHRba2V5XSA9IDE7CgkgIH0pOwoKCSAgLy8gU2FmZWx5IGNyZWF0ZSBhIHJlYWwsIGxpdmUgYXJyYXkgZnJvbSBhbnl0aGluZyBpdGVyYWJsZS4KCSAgXy50b0FycmF5ID0gZnVuY3Rpb24ob2JqKSB7CgkgICAgaWYgKCFvYmopIHJldHVybiBbXTsKCSAgICBpZiAoXy5pc0FycmF5KG9iaikpIHJldHVybiBzbGljZS5jYWxsKG9iaik7CgkgICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHJldHVybiBfLm1hcChvYmosIF8uaWRlbnRpdHkpOwoJICAgIHJldHVybiBfLnZhbHVlcyhvYmopOwoJICB9OwoKCSAgLy8gUmV0dXJuIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gYW4gb2JqZWN0LgoJICBfLnNpemUgPSBmdW5jdGlvbihvYmopIHsKCSAgICBpZiAob2JqID09IG51bGwpIHJldHVybiAwOwoJICAgIHJldHVybiBpc0FycmF5TGlrZShvYmopID8gb2JqLmxlbmd0aCA6IF8ua2V5cyhvYmopLmxlbmd0aDsKCSAgfTsKCgkgIC8vIFNwbGl0IGEgY29sbGVjdGlvbiBpbnRvIHR3byBhcnJheXM6IG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgc2F0aXNmeSB0aGUgZ2l2ZW4KCSAgLy8gcHJlZGljYXRlLCBhbmQgb25lIHdob3NlIGVsZW1lbnRzIGFsbCBkbyBub3Qgc2F0aXNmeSB0aGUgcHJlZGljYXRlLgoJICBfLnBhcnRpdGlvbiA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7CgkgICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTsKCSAgICB2YXIgcGFzcyA9IFtdLCBmYWlsID0gW107CgkgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqKSB7CgkgICAgICAocHJlZGljYXRlKHZhbHVlLCBrZXksIG9iaikgPyBwYXNzIDogZmFpbCkucHVzaCh2YWx1ZSk7CgkgICAgfSk7CgkgICAgcmV0dXJuIFtwYXNzLCBmYWlsXTsKCSAgfTsKCgkgIC8vIEFycmF5IEZ1bmN0aW9ucwoJICAvLyAtLS0tLS0tLS0tLS0tLS0KCgkgIC8vIEdldCB0aGUgZmlyc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgZmlyc3QgTgoJICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LiBBbGlhc2VkIGFzIGBoZWFkYCBhbmQgYHRha2VgLiBUaGUgKipndWFyZCoqIGNoZWNrCgkgIC8vIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC4KCSAgXy5maXJzdCA9IF8uaGVhZCA9IF8udGFrZSA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkgewoJICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gdm9pZCAwOwoJICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHJldHVybiBhcnJheVswXTsKCSAgICByZXR1cm4gXy5pbml0aWFsKGFycmF5LCBhcnJheS5sZW5ndGggLSBuKTsKCSAgfTsKCgkgIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGxhc3QgZW50cnkgb2YgdGhlIGFycmF5LiBFc3BlY2lhbGx5IHVzZWZ1bCBvbgoJICAvLyB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiBhbGwgdGhlIHZhbHVlcyBpbgoJICAvLyB0aGUgYXJyYXksIGV4Y2x1ZGluZyB0aGUgbGFzdCBOLgoJICBfLmluaXRpYWwgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHsKCSAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgMCwgTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoIC0gKG4gPT0gbnVsbCB8fCBndWFyZCA/IDEgOiBuKSkpOwoJICB9OwoKCSAgLy8gR2V0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGxhc3QgTgoJICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LgoJICBfLmxhc3QgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHsKCSAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDsKCSAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07CgkgICAgcmV0dXJuIF8ucmVzdChhcnJheSwgTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoIC0gbikpOwoJICB9OwoKCSAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgZmlyc3QgZW50cnkgb2YgdGhlIGFycmF5LiBBbGlhc2VkIGFzIGB0YWlsYCBhbmQgYGRyb3BgLgoJICAvLyBFc3BlY2lhbGx5IHVzZWZ1bCBvbiB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyBhbiAqKm4qKiB3aWxsIHJldHVybgoJICAvLyB0aGUgcmVzdCBOIHZhbHVlcyBpbiB0aGUgYXJyYXkuCgkgIF8ucmVzdCA9IF8udGFpbCA9IF8uZHJvcCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkgewoJICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCBuID09IG51bGwgfHwgZ3VhcmQgPyAxIDogbik7CgkgIH07CgoJICAvLyBUcmltIG91dCBhbGwgZmFsc3kgdmFsdWVzIGZyb20gYW4gYXJyYXkuCgkgIF8uY29tcGFjdCA9IGZ1bmN0aW9uKGFycmF5KSB7CgkgICAgcmV0dXJuIF8uZmlsdGVyKGFycmF5LCBfLmlkZW50aXR5KTsKCSAgfTsKCgkgIC8vIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIGEgcmVjdXJzaXZlIGBmbGF0dGVuYCBmdW5jdGlvbi4KCSAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbihpbnB1dCwgc2hhbGxvdywgc3RyaWN0LCBzdGFydEluZGV4KSB7CgkgICAgdmFyIG91dHB1dCA9IFtdLCBpZHggPSAwOwoJICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4IHx8IDAsIGxlbmd0aCA9IGdldExlbmd0aChpbnB1dCk7IGkgPCBsZW5ndGg7IGkrKykgewoJICAgICAgdmFyIHZhbHVlID0gaW5wdXRbaV07CgkgICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmIChfLmlzQXJyYXkodmFsdWUpIHx8IF8uaXNBcmd1bWVudHModmFsdWUpKSkgewoJICAgICAgICAvL2ZsYXR0ZW4gY3VycmVudCBsZXZlbCBvZiBhcnJheSBvciBhcmd1bWVudHMgb2JqZWN0CgkgICAgICAgIGlmICghc2hhbGxvdykgdmFsdWUgPSBmbGF0dGVuKHZhbHVlLCBzaGFsbG93LCBzdHJpY3QpOwoJICAgICAgICB2YXIgaiA9IDAsIGxlbiA9IHZhbHVlLmxlbmd0aDsKCSAgICAgICAgb3V0cHV0Lmxlbmd0aCArPSBsZW47CgkgICAgICAgIHdoaWxlIChqIDwgbGVuKSB7CgkgICAgICAgICAgb3V0cHV0W2lkeCsrXSA9IHZhbHVlW2orK107CgkgICAgICAgIH0KCSAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCkgewoJICAgICAgICBvdXRwdXRbaWR4KytdID0gdmFsdWU7CgkgICAgICB9CgkgICAgfQoJICAgIHJldHVybiBvdXRwdXQ7CgkgIH07CgoJICAvLyBGbGF0dGVuIG91dCBhbiBhcnJheSwgZWl0aGVyIHJlY3Vyc2l2ZWx5IChieSBkZWZhdWx0KSwgb3IganVzdCBvbmUgbGV2ZWwuCgkgIF8uZmxhdHRlbiA9IGZ1bmN0aW9uKGFycmF5LCBzaGFsbG93KSB7CgkgICAgcmV0dXJuIGZsYXR0ZW4oYXJyYXksIHNoYWxsb3csIGZhbHNlKTsKCSAgfTsKCgkgIC8vIFJldHVybiBhIHZlcnNpb24gb2YgdGhlIGFycmF5IHRoYXQgZG9lcyBub3QgY29udGFpbiB0aGUgc3BlY2lmaWVkIHZhbHVlKHMpLgoJICBfLndpdGhvdXQgPSBmdW5jdGlvbihhcnJheSkgewoJICAgIHJldHVybiBfLmRpZmZlcmVuY2UoYXJyYXksIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7CgkgIH07CgoJICAvLyBQcm9kdWNlIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiB0aGUgYXJyYXkuIElmIHRoZSBhcnJheSBoYXMgYWxyZWFkeQoJICAvLyBiZWVuIHNvcnRlZCwgeW91IGhhdmUgdGhlIG9wdGlvbiBvZiB1c2luZyBhIGZhc3RlciBhbGdvcml0aG0uCgkgIC8vIEFsaWFzZWQgYXMgYHVuaXF1ZWAuCgkgIF8udW5pcSA9IF8udW5pcXVlID0gZnVuY3Rpb24oYXJyYXksIGlzU29ydGVkLCBpdGVyYXRlZSwgY29udGV4dCkgewoJICAgIGlmICghXy5pc0Jvb2xlYW4oaXNTb3J0ZWQpKSB7CgkgICAgICBjb250ZXh0ID0gaXRlcmF0ZWU7CgkgICAgICBpdGVyYXRlZSA9IGlzU29ydGVkOwoJICAgICAgaXNTb3J0ZWQgPSBmYWxzZTsKCSAgICB9CgkgICAgaWYgKGl0ZXJhdGVlICE9IG51bGwpIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpOwoJICAgIHZhciByZXN1bHQgPSBbXTsKCSAgICB2YXIgc2VlbiA9IFtdOwoJICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpOyBpIDwgbGVuZ3RoOyBpKyspIHsKCSAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2ldLAoJICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSwgaSwgYXJyYXkpIDogdmFsdWU7CgkgICAgICBpZiAoaXNTb3J0ZWQpIHsKCSAgICAgICAgaWYgKCFpIHx8IHNlZW4gIT09IGNvbXB1dGVkKSByZXN1bHQucHVzaCh2YWx1ZSk7CgkgICAgICAgIHNlZW4gPSBjb21wdXRlZDsKCSAgICAgIH0gZWxzZSBpZiAoaXRlcmF0ZWUpIHsKCSAgICAgICAgaWYgKCFfLmNvbnRhaW5zKHNlZW4sIGNvbXB1dGVkKSkgewoJICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7CgkgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpOwoJICAgICAgICB9CgkgICAgICB9IGVsc2UgaWYgKCFfLmNvbnRhaW5zKHJlc3VsdCwgdmFsdWUpKSB7CgkgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTsKCSAgICAgIH0KCSAgICB9CgkgICAgcmV0dXJuIHJlc3VsdDsKCSAgfTsKCgkgIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyB0aGUgdW5pb246IGVhY2ggZGlzdGluY3QgZWxlbWVudCBmcm9tIGFsbCBvZgoJICAvLyB0aGUgcGFzc2VkLWluIGFycmF5cy4KCSAgXy51bmlvbiA9IGZ1bmN0aW9uKCkgewoJICAgIHJldHVybiBfLnVuaXEoZmxhdHRlbihhcmd1bWVudHMsIHRydWUsIHRydWUpKTsKCSAgfTsKCgkgIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyBldmVyeSBpdGVtIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGUKCSAgLy8gcGFzc2VkLWluIGFycmF5cy4KCSAgXy5pbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihhcnJheSkgewoJICAgIHZhciByZXN1bHQgPSBbXTsKCSAgICB2YXIgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7CgkgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7IGkgPCBsZW5ndGg7IGkrKykgewoJICAgICAgdmFyIGl0ZW0gPSBhcnJheVtpXTsKCSAgICAgIGlmIChfLmNvbnRhaW5zKHJlc3VsdCwgaXRlbSkpIGNvbnRpbnVlOwoJICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBhcmdzTGVuZ3RoOyBqKyspIHsKCSAgICAgICAgaWYgKCFfLmNvbnRhaW5zKGFyZ3VtZW50c1tqXSwgaXRlbSkpIGJyZWFrOwoJICAgICAgfQoJICAgICAgaWYgKGogPT09IGFyZ3NMZW5ndGgpIHJlc3VsdC5wdXNoKGl0ZW0pOwoJICAgIH0KCSAgICByZXR1cm4gcmVzdWx0OwoJICB9OwoKCSAgLy8gVGFrZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG9uZSBhcnJheSBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgYXJyYXlzLgoJICAvLyBPbmx5IHRoZSBlbGVtZW50cyBwcmVzZW50IGluIGp1c3QgdGhlIGZpcnN0IGFycmF5IHdpbGwgcmVtYWluLgoJICBfLmRpZmZlcmVuY2UgPSBmdW5jdGlvbihhcnJheSkgewoJICAgIHZhciByZXN0ID0gZmxhdHRlbihhcmd1bWVudHMsIHRydWUsIHRydWUsIDEpOwoJICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgZnVuY3Rpb24odmFsdWUpewoJICAgICAgcmV0dXJuICFfLmNvbnRhaW5zKHJlc3QsIHZhbHVlKTsKCSAgICB9KTsKCSAgfTsKCgkgIC8vIFppcCB0b2dldGhlciBtdWx0aXBsZSBsaXN0cyBpbnRvIGEgc2luZ2xlIGFycmF5IC0tIGVsZW1lbnRzIHRoYXQgc2hhcmUKCSAgLy8gYW4gaW5kZXggZ28gdG9nZXRoZXIuCgkgIF8uemlwID0gZnVuY3Rpb24oKSB7CgkgICAgcmV0dXJuIF8udW56aXAoYXJndW1lbnRzKTsKCSAgfTsKCgkgIC8vIENvbXBsZW1lbnQgb2YgXy56aXAuIFVuemlwIGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIGFuZCBncm91cHMKCSAgLy8gZWFjaCBhcnJheSdzIGVsZW1lbnRzIG9uIHNoYXJlZCBpbmRpY2VzCgkgIF8udW56aXAgPSBmdW5jdGlvbihhcnJheSkgewoJICAgIHZhciBsZW5ndGggPSBhcnJheSAmJiBfLm1heChhcnJheSwgZ2V0TGVuZ3RoKS5sZW5ndGggfHwgMDsKCSAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTsKCgkgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykgewoJICAgICAgcmVzdWx0W2luZGV4XSA9IF8ucGx1Y2soYXJyYXksIGluZGV4KTsKCSAgICB9CgkgICAgcmV0dXJuIHJlc3VsdDsKCSAgfTsKCgkgIC8vIENvbnZlcnRzIGxpc3RzIGludG8gb2JqZWN0cy4gUGFzcyBlaXRoZXIgYSBzaW5nbGUgYXJyYXkgb2YgYFtrZXksIHZhbHVlXWAKCSAgLy8gcGFpcnMsIG9yIHR3byBwYXJhbGxlbCBhcnJheXMgb2YgdGhlIHNhbWUgbGVuZ3RoIC0tIG9uZSBvZiBrZXlzLCBhbmQgb25lIG9mCgkgIC8vIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlcy4KCSAgXy5vYmplY3QgPSBmdW5jdGlvbihsaXN0LCB2YWx1ZXMpIHsKCSAgICB2YXIgcmVzdWx0ID0ge307CgkgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChsaXN0KTsgaSA8IGxlbmd0aDsgaSsrKSB7CgkgICAgICBpZiAodmFsdWVzKSB7CgkgICAgICAgIHJlc3VsdFtsaXN0W2ldXSA9IHZhbHVlc1tpXTsKCSAgICAgIH0gZWxzZSB7CgkgICAgICAgIHJlc3VsdFtsaXN0W2ldWzBdXSA9IGxpc3RbaV1bMV07CgkgICAgICB9CgkgICAgfQoJICAgIHJldHVybiByZXN1bHQ7CgkgIH07CgoJICAvLyBHZW5lcmF0b3IgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBmaW5kSW5kZXggYW5kIGZpbmRMYXN0SW5kZXggZnVuY3Rpb25zCgkgIGZ1bmN0aW9uIGNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyKGRpcikgewoJICAgIHJldHVybiBmdW5jdGlvbihhcnJheSwgcHJlZGljYXRlLCBjb250ZXh0KSB7CgkgICAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpOwoJICAgICAgdmFyIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7CgkgICAgICB2YXIgaW5kZXggPSBkaXIgPiAwID8gMCA6IGxlbmd0aCAtIDE7CgkgICAgICBmb3IgKDsgaW5kZXggPj0gMCAmJiBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gZGlyKSB7CgkgICAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSByZXR1cm4gaW5kZXg7CgkgICAgICB9CgkgICAgICByZXR1cm4gLTE7CgkgICAgfTsKCSAgfQoKCSAgLy8gUmV0dXJucyB0aGUgZmlyc3QgaW5kZXggb24gYW4gYXJyYXktbGlrZSB0aGF0IHBhc3NlcyBhIHByZWRpY2F0ZSB0ZXN0CgkgIF8uZmluZEluZGV4ID0gY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoMSk7CgkgIF8uZmluZExhc3RJbmRleCA9IGNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyKC0xKTsKCgkgIC8vIFVzZSBhIGNvbXBhcmF0b3IgZnVuY3Rpb24gdG8gZmlndXJlIG91dCB0aGUgc21hbGxlc3QgaW5kZXggYXQgd2hpY2gKCSAgLy8gYW4gb2JqZWN0IHNob3VsZCBiZSBpbnNlcnRlZCBzbyBhcyB0byBtYWludGFpbiBvcmRlci4gVXNlcyBiaW5hcnkgc2VhcmNoLgoJICBfLnNvcnRlZEluZGV4ID0gZnVuY3Rpb24oYXJyYXksIG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHsKCSAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0LCAxKTsKCSAgICB2YXIgdmFsdWUgPSBpdGVyYXRlZShvYmopOwoJICAgIHZhciBsb3cgPSAwLCBoaWdoID0gZ2V0TGVuZ3RoKGFycmF5KTsKCSAgICB3aGlsZSAobG93IDwgaGlnaCkgewoJICAgICAgdmFyIG1pZCA9IE1hdGguZmxvb3IoKGxvdyArIGhpZ2gpIC8gMik7CgkgICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbbWlkXSkgPCB2YWx1ZSkgbG93ID0gbWlkICsgMTsgZWxzZSBoaWdoID0gbWlkOwoJICAgIH0KCSAgICByZXR1cm4gbG93OwoJICB9OwoKCSAgLy8gR2VuZXJhdG9yIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgaW5kZXhPZiBhbmQgbGFzdEluZGV4T2YgZnVuY3Rpb25zCgkgIGZ1bmN0aW9uIGNyZWF0ZUluZGV4RmluZGVyKGRpciwgcHJlZGljYXRlRmluZCwgc29ydGVkSW5kZXgpIHsKCSAgICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGlkeCkgewoJICAgICAgdmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpOwoJICAgICAgaWYgKHR5cGVvZiBpZHggPT0gJ251bWJlcicpIHsKCSAgICAgICAgaWYgKGRpciA+IDApIHsKCSAgICAgICAgICAgIGkgPSBpZHggPj0gMCA/IGlkeCA6IE1hdGgubWF4KGlkeCArIGxlbmd0aCwgaSk7CgkgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICBsZW5ndGggPSBpZHggPj0gMCA/IE1hdGgubWluKGlkeCArIDEsIGxlbmd0aCkgOiBpZHggKyBsZW5ndGggKyAxOwoJICAgICAgICB9CgkgICAgICB9IGVsc2UgaWYgKHNvcnRlZEluZGV4ICYmIGlkeCAmJiBsZW5ndGgpIHsKCSAgICAgICAgaWR4ID0gc29ydGVkSW5kZXgoYXJyYXksIGl0ZW0pOwoJICAgICAgICByZXR1cm4gYXJyYXlbaWR4XSA9PT0gaXRlbSA/IGlkeCA6IC0xOwoJICAgICAgfQoJICAgICAgaWYgKGl0ZW0gIT09IGl0ZW0pIHsKCSAgICAgICAgaWR4ID0gcHJlZGljYXRlRmluZChzbGljZS5jYWxsKGFycmF5LCBpLCBsZW5ndGgpLCBfLmlzTmFOKTsKCSAgICAgICAgcmV0dXJuIGlkeCA+PSAwID8gaWR4ICsgaSA6IC0xOwoJICAgICAgfQoJICAgICAgZm9yIChpZHggPSBkaXIgPiAwID8gaSA6IGxlbmd0aCAtIDE7IGlkeCA+PSAwICYmIGlkeCA8IGxlbmd0aDsgaWR4ICs9IGRpcikgewoJICAgICAgICBpZiAoYXJyYXlbaWR4XSA9PT0gaXRlbSkgcmV0dXJuIGlkeDsKCSAgICAgIH0KCSAgICAgIHJldHVybiAtMTsKCSAgICB9OwoJICB9CgoJICAvLyBSZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGFuIGl0ZW0gaW4gYW4gYXJyYXksCgkgIC8vIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuCgkgIC8vIElmIHRoZSBhcnJheSBpcyBsYXJnZSBhbmQgYWxyZWFkeSBpbiBzb3J0IG9yZGVyLCBwYXNzIGB0cnVlYAoJICAvLyBmb3IgKippc1NvcnRlZCoqIHRvIHVzZSBiaW5hcnkgc2VhcmNoLgoJICBfLmluZGV4T2YgPSBjcmVhdGVJbmRleEZpbmRlcigxLCBfLmZpbmRJbmRleCwgXy5zb3J0ZWRJbmRleCk7CgkgIF8ubGFzdEluZGV4T2YgPSBjcmVhdGVJbmRleEZpbmRlcigtMSwgXy5maW5kTGFzdEluZGV4KTsKCgkgIC8vIEdlbmVyYXRlIGFuIGludGVnZXIgQXJyYXkgY29udGFpbmluZyBhbiBhcml0aG1ldGljIHByb2dyZXNzaW9uLiBBIHBvcnQgb2YKCSAgLy8gdGhlIG5hdGl2ZSBQeXRob24gYHJhbmdlKClgIGZ1bmN0aW9uLiBTZWUKCSAgLy8gW3RoZSBQeXRob24gZG9jdW1lbnRhdGlvbl0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L2Z1bmN0aW9ucy5odG1sI3JhbmdlKS4KCSAgXy5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7CgkgICAgaWYgKHN0b3AgPT0gbnVsbCkgewoJICAgICAgc3RvcCA9IHN0YXJ0IHx8IDA7CgkgICAgICBzdGFydCA9IDA7CgkgICAgfQoJICAgIHN0ZXAgPSBzdGVwIHx8IDE7CgoJICAgIHZhciBsZW5ndGggPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7CgkgICAgdmFyIHJhbmdlID0gQXJyYXkobGVuZ3RoKTsKCgkgICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKywgc3RhcnQgKz0gc3RlcCkgewoJICAgICAgcmFuZ2VbaWR4XSA9IHN0YXJ0OwoJICAgIH0KCgkgICAgcmV0dXJuIHJhbmdlOwoJICB9OwoKCSAgLy8gRnVuY3Rpb24gKGFoZW0pIEZ1bmN0aW9ucwoJICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0KCgkgIC8vIERldGVybWluZXMgd2hldGhlciB0byBleGVjdXRlIGEgZnVuY3Rpb24gYXMgYSBjb25zdHJ1Y3RvcgoJICAvLyBvciBhIG5vcm1hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBhcmd1bWVudHMKCSAgdmFyIGV4ZWN1dGVCb3VuZCA9IGZ1bmN0aW9uKHNvdXJjZUZ1bmMsIGJvdW5kRnVuYywgY29udGV4dCwgY2FsbGluZ0NvbnRleHQsIGFyZ3MpIHsKCSAgICBpZiAoIShjYWxsaW5nQ29udGV4dCBpbnN0YW5jZW9mIGJvdW5kRnVuYykpIHJldHVybiBzb3VyY2VGdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwoJICAgIHZhciBzZWxmID0gYmFzZUNyZWF0ZShzb3VyY2VGdW5jLnByb3RvdHlwZSk7CgkgICAgdmFyIHJlc3VsdCA9IHNvdXJjZUZ1bmMuYXBwbHkoc2VsZiwgYXJncyk7CgkgICAgaWYgKF8uaXNPYmplY3QocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDsKCSAgICByZXR1cm4gc2VsZjsKCSAgfTsKCgkgIC8vIENyZWF0ZSBhIGZ1bmN0aW9uIGJvdW5kIHRvIGEgZ2l2ZW4gb2JqZWN0IChhc3NpZ25pbmcgYHRoaXNgLCBhbmQgYXJndW1lbnRzLAoJICAvLyBvcHRpb25hbGx5KS4gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYEZ1bmN0aW9uLmJpbmRgIGlmCgkgIC8vIGF2YWlsYWJsZS4KCSAgXy5iaW5kID0gZnVuY3Rpb24oZnVuYywgY29udGV4dCkgewoJICAgIGlmIChuYXRpdmVCaW5kICYmIGZ1bmMuYmluZCA9PT0gbmF0aXZlQmluZCkgcmV0dXJuIG5hdGl2ZUJpbmQuYXBwbHkoZnVuYywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKCSAgICBpZiAoIV8uaXNGdW5jdGlvbihmdW5jKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQmluZCBtdXN0IGJlIGNhbGxlZCBvbiBhIGZ1bmN0aW9uJyk7CgkgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7CgkgICAgdmFyIGJvdW5kID0gZnVuY3Rpb24oKSB7CgkgICAgICByZXR1cm4gZXhlY3V0ZUJvdW5kKGZ1bmMsIGJvdW5kLCBjb250ZXh0LCB0aGlzLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTsKCSAgICB9OwoJICAgIHJldHVybiBib3VuZDsKCSAgfTsKCgkgIC8vIFBhcnRpYWxseSBhcHBseSBhIGZ1bmN0aW9uIGJ5IGNyZWF0aW5nIGEgdmVyc2lvbiB0aGF0IGhhcyBoYWQgc29tZSBvZiBpdHMKCSAgLy8gYXJndW1lbnRzIHByZS1maWxsZWQsIHdpdGhvdXQgY2hhbmdpbmcgaXRzIGR5bmFtaWMgYHRoaXNgIGNvbnRleHQuIF8gYWN0cwoJICAvLyBhcyBhIHBsYWNlaG9sZGVyLCBhbGxvd2luZyBhbnkgY29tYmluYXRpb24gb2YgYXJndW1lbnRzIHRvIGJlIHByZS1maWxsZWQuCgkgIF8ucGFydGlhbCA9IGZ1bmN0aW9uKGZ1bmMpIHsKCSAgICB2YXIgYm91bmRBcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwoJICAgIHZhciBib3VuZCA9IGZ1bmN0aW9uKCkgewoJICAgICAgdmFyIHBvc2l0aW9uID0gMCwgbGVuZ3RoID0gYm91bmRBcmdzLmxlbmd0aDsKCSAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoKTsKCSAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKCSAgICAgICAgYXJnc1tpXSA9IGJvdW5kQXJnc1tpXSA9PT0gXyA/IGFyZ3VtZW50c1twb3NpdGlvbisrXSA6IGJvdW5kQXJnc1tpXTsKCSAgICAgIH0KCSAgICAgIHdoaWxlIChwb3NpdGlvbiA8IGFyZ3VtZW50cy5sZW5ndGgpIGFyZ3MucHVzaChhcmd1bWVudHNbcG9zaXRpb24rK10pOwoJICAgICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgdGhpcywgdGhpcywgYXJncyk7CgkgICAgfTsKCSAgICByZXR1cm4gYm91bmQ7CgkgIH07CgoJICAvLyBCaW5kIGEgbnVtYmVyIG9mIGFuIG9iamVjdCdzIG1ldGhvZHMgdG8gdGhhdCBvYmplY3QuIFJlbWFpbmluZyBhcmd1bWVudHMKCSAgLy8gYXJlIHRoZSBtZXRob2QgbmFtZXMgdG8gYmUgYm91bmQuIFVzZWZ1bCBmb3IgZW5zdXJpbmcgdGhhdCBhbGwgY2FsbGJhY2tzCgkgIC8vIGRlZmluZWQgb24gYW4gb2JqZWN0IGJlbG9uZyB0byBpdC4KCSAgXy5iaW5kQWxsID0gZnVuY3Rpb24ob2JqKSB7CgkgICAgdmFyIGksIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsIGtleTsKCSAgICBpZiAobGVuZ3RoIDw9IDEpIHRocm93IG5ldyBFcnJvcignYmluZEFsbCBtdXN0IGJlIHBhc3NlZCBmdW5jdGlvbiBuYW1lcycpOwoJICAgIGZvciAoaSA9IDE7IGkgPCBsZW5ndGg7IGkrKykgewoJICAgICAga2V5ID0gYXJndW1lbnRzW2ldOwoJICAgICAgb2JqW2tleV0gPSBfLmJpbmQob2JqW2tleV0sIG9iaik7CgkgICAgfQoJICAgIHJldHVybiBvYmo7CgkgIH07CgoJICAvLyBNZW1vaXplIGFuIGV4cGVuc2l2ZSBmdW5jdGlvbiBieSBzdG9yaW5nIGl0cyByZXN1bHRzLgoJICBfLm1lbW9pemUgPSBmdW5jdGlvbihmdW5jLCBoYXNoZXIpIHsKCSAgICB2YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uKGtleSkgewoJICAgICAgdmFyIGNhY2hlID0gbWVtb2l6ZS5jYWNoZTsKCSAgICAgIHZhciBhZGRyZXNzID0gJycgKyAoaGFzaGVyID8gaGFzaGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrZXkpOwoJICAgICAgaWYgKCFfLmhhcyhjYWNoZSwgYWRkcmVzcykpIGNhY2hlW2FkZHJlc3NdID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoJICAgICAgcmV0dXJuIGNhY2hlW2FkZHJlc3NdOwoJICAgIH07CgkgICAgbWVtb2l6ZS5jYWNoZSA9IHt9OwoJICAgIHJldHVybiBtZW1vaXplOwoJICB9OwoKCSAgLy8gRGVsYXlzIGEgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCBhbmQgdGhlbiBjYWxscwoJICAvLyBpdCB3aXRoIHRoZSBhcmd1bWVudHMgc3VwcGxpZWQuCgkgIF8uZGVsYXkgPSBmdW5jdGlvbihmdW5jLCB3YWl0KSB7CgkgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7CgkgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKCSAgICAgIHJldHVybiBmdW5jLmFwcGx5KG51bGwsIGFyZ3MpOwoJICAgIH0sIHdhaXQpOwoJICB9OwoKCSAgLy8gRGVmZXJzIGEgZnVuY3Rpb24sIHNjaGVkdWxpbmcgaXQgdG8gcnVuIGFmdGVyIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzCgkgIC8vIGNsZWFyZWQuCgkgIF8uZGVmZXIgPSBfLnBhcnRpYWwoXy5kZWxheSwgXywgMSk7CgoJICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIHdoZW4gaW52b2tlZCwgd2lsbCBvbmx5IGJlIHRyaWdnZXJlZCBhdCBtb3N0IG9uY2UKCSAgLy8gZHVyaW5nIGEgZ2l2ZW4gd2luZG93IG9mIHRpbWUuIE5vcm1hbGx5LCB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHdpbGwgcnVuCgkgIC8vIGFzIG11Y2ggYXMgaXQgY2FuLCB3aXRob3V0IGV2ZXIgZ29pbmcgbW9yZSB0aGFuIG9uY2UgcGVyIGB3YWl0YCBkdXJhdGlvbjsKCSAgLy8gYnV0IGlmIHlvdSdkIGxpa2UgdG8gZGlzYWJsZSB0aGUgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2UsIHBhc3MKCSAgLy8gYHtsZWFkaW5nOiBmYWxzZX1gLiBUbyBkaXNhYmxlIGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSwgZGl0dG8uCgkgIF8udGhyb3R0bGUgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBvcHRpb25zKSB7CgkgICAgdmFyIGNvbnRleHQsIGFyZ3MsIHJlc3VsdDsKCSAgICB2YXIgdGltZW91dCA9IG51bGw7CgkgICAgdmFyIHByZXZpb3VzID0gMDsKCSAgICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTsKCSAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHsKCSAgICAgIHByZXZpb3VzID0gb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSA/IDAgOiBfLm5vdygpOwoJICAgICAgdGltZW91dCA9IG51bGw7CgkgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwoJICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7CgkgICAgfTsKCSAgICByZXR1cm4gZnVuY3Rpb24oKSB7CgkgICAgICB2YXIgbm93ID0gXy5ub3coKTsKCSAgICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSkgcHJldmlvdXMgPSBub3c7CgkgICAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7CgkgICAgICBjb250ZXh0ID0gdGhpczsKCSAgICAgIGFyZ3MgPSBhcmd1bWVudHM7CgkgICAgICBpZiAocmVtYWluaW5nIDw9IDAgfHwgcmVtYWluaW5nID4gd2FpdCkgewoJICAgICAgICBpZiAodGltZW91dCkgewoJICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTsKCSAgICAgICAgICB0aW1lb3V0ID0gbnVsbDsKCSAgICAgICAgfQoJICAgICAgICBwcmV2aW91cyA9IG5vdzsKCSAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTsKCSAgICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7CgkgICAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7CgkgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCByZW1haW5pbmcpOwoJICAgICAgfQoJICAgICAgcmV0dXJuIHJlc3VsdDsKCSAgICB9OwoJICB9OwoKCSAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLCB3aWxsIG5vdAoJICAvLyBiZSB0cmlnZ2VyZWQuIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciBpdCBzdG9wcyBiZWluZyBjYWxsZWQgZm9yCgkgIC8vIE4gbWlsbGlzZWNvbmRzLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIHRyaWdnZXIgdGhlIGZ1bmN0aW9uIG9uIHRoZQoJICAvLyBsZWFkaW5nIGVkZ2UsIGluc3RlYWQgb2YgdGhlIHRyYWlsaW5nLgoJICBfLmRlYm91bmNlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7CgkgICAgdmFyIHRpbWVvdXQsIGFyZ3MsIGNvbnRleHQsIHRpbWVzdGFtcCwgcmVzdWx0OwoKCSAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHsKCSAgICAgIHZhciBsYXN0ID0gXy5ub3coKSAtIHRpbWVzdGFtcDsKCgkgICAgICBpZiAobGFzdCA8IHdhaXQgJiYgbGFzdCA+PSAwKSB7CgkgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0IC0gbGFzdCk7CgkgICAgICB9IGVsc2UgewoJICAgICAgICB0aW1lb3V0ID0gbnVsbDsKCSAgICAgICAgaWYgKCFpbW1lZGlhdGUpIHsKCSAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwoJICAgICAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsOwoJICAgICAgICB9CgkgICAgICB9CgkgICAgfTsKCgkgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewoJICAgICAgY29udGV4dCA9IHRoaXM7CgkgICAgICBhcmdzID0gYXJndW1lbnRzOwoJICAgICAgdGltZXN0YW1wID0gXy5ub3coKTsKCSAgICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0OwoJICAgICAgaWYgKCF0aW1lb3V0KSB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7CgkgICAgICBpZiAoY2FsbE5vdykgewoJICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwoJICAgICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7CgkgICAgICB9CgoJICAgICAgcmV0dXJuIHJlc3VsdDsKCSAgICB9OwoJICB9OwoKCSAgLy8gUmV0dXJucyB0aGUgZmlyc3QgZnVuY3Rpb24gcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBzZWNvbmQsCgkgIC8vIGFsbG93aW5nIHlvdSB0byBhZGp1c3QgYXJndW1lbnRzLCBydW4gY29kZSBiZWZvcmUgYW5kIGFmdGVyLCBhbmQKCSAgLy8gY29uZGl0aW9uYWxseSBleGVjdXRlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi4KCSAgXy53cmFwID0gZnVuY3Rpb24oZnVuYywgd3JhcHBlcikgewoJICAgIHJldHVybiBfLnBhcnRpYWwod3JhcHBlciwgZnVuYyk7CgkgIH07CgoJICAvLyBSZXR1cm5zIGEgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBwYXNzZWQtaW4gcHJlZGljYXRlLgoJICBfLm5lZ2F0ZSA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkgewoJICAgIHJldHVybiBmdW5jdGlvbigpIHsKCSAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CgkgICAgfTsKCSAgfTsKCgkgIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBhIGxpc3Qgb2YgZnVuY3Rpb25zLCBlYWNoCgkgIC8vIGNvbnN1bWluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB0aGF0IGZvbGxvd3MuCgkgIF8uY29tcG9zZSA9IGZ1bmN0aW9uKCkgewoJICAgIHZhciBhcmdzID0gYXJndW1lbnRzOwoJICAgIHZhciBzdGFydCA9IGFyZ3MubGVuZ3RoIC0gMTsKCSAgICByZXR1cm4gZnVuY3Rpb24oKSB7CgkgICAgICB2YXIgaSA9IHN0YXJ0OwoJICAgICAgdmFyIHJlc3VsdCA9IGFyZ3Nbc3RhcnRdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CgkgICAgICB3aGlsZSAoaS0tKSByZXN1bHQgPSBhcmdzW2ldLmNhbGwodGhpcywgcmVzdWx0KTsKCSAgICAgIHJldHVybiByZXN1bHQ7CgkgICAgfTsKCSAgfTsKCgkgIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgb25seSBiZSBleGVjdXRlZCBvbiBhbmQgYWZ0ZXIgdGhlIE50aCBjYWxsLgoJICBfLmFmdGVyID0gZnVuY3Rpb24odGltZXMsIGZ1bmMpIHsKCSAgICByZXR1cm4gZnVuY3Rpb24oKSB7CgkgICAgICBpZiAoLS10aW1lcyA8IDEpIHsKCSAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCSAgICAgIH0KCSAgICB9OwoJICB9OwoKCSAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIHVwIHRvIChidXQgbm90IGluY2x1ZGluZykgdGhlIE50aCBjYWxsLgoJICBfLmJlZm9yZSA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7CgkgICAgdmFyIG1lbW87CgkgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewoJICAgICAgaWYgKC0tdGltZXMgPiAwKSB7CgkgICAgICAgIG1lbW8gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CgkgICAgICB9CgkgICAgICBpZiAodGltZXMgPD0gMSkgZnVuYyA9IG51bGw7CgkgICAgICByZXR1cm4gbWVtbzsKCSAgICB9OwoJICB9OwoKCSAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhdCBtb3N0IG9uZSB0aW1lLCBubyBtYXR0ZXIgaG93CgkgIC8vIG9mdGVuIHlvdSBjYWxsIGl0LiBVc2VmdWwgZm9yIGxhenkgaW5pdGlhbGl6YXRpb24uCgkgIF8ub25jZSA9IF8ucGFydGlhbChfLmJlZm9yZSwgMik7CgoJICAvLyBPYmplY3QgRnVuY3Rpb25zCgkgIC8vIC0tLS0tLS0tLS0tLS0tLS0KCgkgIC8vIEtleXMgaW4gSUUgPCA5IHRoYXQgd29uJ3QgYmUgaXRlcmF0ZWQgYnkgYGZvciBrZXkgaW4gLi4uYCBhbmQgdGh1cyBtaXNzZWQuCgkgIHZhciBoYXNFbnVtQnVnID0gIXt0b1N0cmluZzogbnVsbH0ucHJvcGVydHlJc0VudW1lcmFibGUoJ3RvU3RyaW5nJyk7CgkgIHZhciBub25FbnVtZXJhYmxlUHJvcHMgPSBbJ3ZhbHVlT2YnLCAnaXNQcm90b3R5cGVPZicsICd0b1N0cmluZycsCgkgICAgICAgICAgICAgICAgICAgICAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJ2hhc093blByb3BlcnR5JywgJ3RvTG9jYWxlU3RyaW5nJ107CgoJICBmdW5jdGlvbiBjb2xsZWN0Tm9uRW51bVByb3BzKG9iaiwga2V5cykgewoJICAgIHZhciBub25FbnVtSWR4ID0gbm9uRW51bWVyYWJsZVByb3BzLmxlbmd0aDsKCSAgICB2YXIgY29uc3RydWN0b3IgPSBvYmouY29uc3RydWN0b3I7CgkgICAgdmFyIHByb3RvID0gKF8uaXNGdW5jdGlvbihjb25zdHJ1Y3RvcikgJiYgY29uc3RydWN0b3IucHJvdG90eXBlKSB8fCBPYmpQcm90bzsKCgkgICAgLy8gQ29uc3RydWN0b3IgaXMgYSBzcGVjaWFsIGNhc2UuCgkgICAgdmFyIHByb3AgPSAnY29uc3RydWN0b3InOwoJICAgIGlmIChfLmhhcyhvYmosIHByb3ApICYmICFfLmNvbnRhaW5zKGtleXMsIHByb3ApKSBrZXlzLnB1c2gocHJvcCk7CgoJICAgIHdoaWxlIChub25FbnVtSWR4LS0pIHsKCSAgICAgIHByb3AgPSBub25FbnVtZXJhYmxlUHJvcHNbbm9uRW51bUlkeF07CgkgICAgICBpZiAocHJvcCBpbiBvYmogJiYgb2JqW3Byb3BdICE9PSBwcm90b1twcm9wXSAmJiAhXy5jb250YWlucyhrZXlzLCBwcm9wKSkgewoJICAgICAgICBrZXlzLnB1c2gocHJvcCk7CgkgICAgICB9CgkgICAgfQoJICB9CgoJICAvLyBSZXRyaWV2ZSB0aGUgbmFtZXMgb2YgYW4gb2JqZWN0J3Mgb3duIHByb3BlcnRpZXMuCgkgIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBPYmplY3Qua2V5c2AKCSAgXy5rZXlzID0gZnVuY3Rpb24ob2JqKSB7CgkgICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTsKCSAgICBpZiAobmF0aXZlS2V5cykgcmV0dXJuIG5hdGl2ZUtleXMob2JqKTsKCSAgICB2YXIga2V5cyA9IFtdOwoJICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIGtleXMucHVzaChrZXkpOwoJICAgIC8vIEFoZW0sIElFIDwgOS4KCSAgICBpZiAoaGFzRW51bUJ1ZykgY29sbGVjdE5vbkVudW1Qcm9wcyhvYmosIGtleXMpOwoJICAgIHJldHVybiBrZXlzOwoJICB9OwoKCSAgLy8gUmV0cmlldmUgYWxsIHRoZSBwcm9wZXJ0eSBuYW1lcyBvZiBhbiBvYmplY3QuCgkgIF8uYWxsS2V5cyA9IGZ1bmN0aW9uKG9iaikgewoJICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gW107CgkgICAgdmFyIGtleXMgPSBbXTsKCSAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBrZXlzLnB1c2goa2V5KTsKCSAgICAvLyBBaGVtLCBJRSA8IDkuCgkgICAgaWYgKGhhc0VudW1CdWcpIGNvbGxlY3ROb25FbnVtUHJvcHMob2JqLCBrZXlzKTsKCSAgICByZXR1cm4ga2V5czsKCSAgfTsKCgkgIC8vIFJldHJpZXZlIHRoZSB2YWx1ZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy4KCSAgXy52YWx1ZXMgPSBmdW5jdGlvbihvYmopIHsKCSAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopOwoJICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDsKCSAgICB2YXIgdmFsdWVzID0gQXJyYXkobGVuZ3RoKTsKCSAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CgkgICAgICB2YWx1ZXNbaV0gPSBvYmpba2V5c1tpXV07CgkgICAgfQoJICAgIHJldHVybiB2YWx1ZXM7CgkgIH07CgoJICAvLyBSZXR1cm5zIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRlZSB0byBlYWNoIGVsZW1lbnQgb2YgdGhlIG9iamVjdAoJICAvLyBJbiBjb250cmFzdCB0byBfLm1hcCBpdCByZXR1cm5zIGFuIG9iamVjdAoJICBfLm1hcE9iamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHsKCSAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTsKCSAgICB2YXIga2V5cyA9ICBfLmtleXMob2JqKSwKCSAgICAgICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aCwKCSAgICAgICAgICByZXN1bHRzID0ge30sCgkgICAgICAgICAgY3VycmVudEtleTsKCSAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHsKCSAgICAgICAgY3VycmVudEtleSA9IGtleXNbaW5kZXhdOwoJICAgICAgICByZXN1bHRzW2N1cnJlbnRLZXldID0gaXRlcmF0ZWUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopOwoJICAgICAgfQoJICAgICAgcmV0dXJuIHJlc3VsdHM7CgkgIH07CgoJICAvLyBDb252ZXJ0IGFuIG9iamVjdCBpbnRvIGEgbGlzdCBvZiBgW2tleSwgdmFsdWVdYCBwYWlycy4KCSAgXy5wYWlycyA9IGZ1bmN0aW9uKG9iaikgewoJICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7CgkgICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoOwoJICAgIHZhciBwYWlycyA9IEFycmF5KGxlbmd0aCk7CgkgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewoJICAgICAgcGFpcnNbaV0gPSBba2V5c1tpXSwgb2JqW2tleXNbaV1dXTsKCSAgICB9CgkgICAgcmV0dXJuIHBhaXJzOwoJICB9OwoKCSAgLy8gSW52ZXJ0IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgYW4gb2JqZWN0LiBUaGUgdmFsdWVzIG11c3QgYmUgc2VyaWFsaXphYmxlLgoJICBfLmludmVydCA9IGZ1bmN0aW9uKG9iaikgewoJICAgIHZhciByZXN1bHQgPSB7fTsKCSAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopOwoJICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CgkgICAgICByZXN1bHRbb2JqW2tleXNbaV1dXSA9IGtleXNbaV07CgkgICAgfQoJICAgIHJldHVybiByZXN1bHQ7CgkgIH07CgoJICAvLyBSZXR1cm4gYSBzb3J0ZWQgbGlzdCBvZiB0aGUgZnVuY3Rpb24gbmFtZXMgYXZhaWxhYmxlIG9uIHRoZSBvYmplY3QuCgkgIC8vIEFsaWFzZWQgYXMgYG1ldGhvZHNgCgkgIF8uZnVuY3Rpb25zID0gXy5tZXRob2RzID0gZnVuY3Rpb24ob2JqKSB7CgkgICAgdmFyIG5hbWVzID0gW107CgkgICAgZm9yICh2YXIga2V5IGluIG9iaikgewoJICAgICAgaWYgKF8uaXNGdW5jdGlvbihvYmpba2V5XSkpIG5hbWVzLnB1c2goa2V5KTsKCSAgICB9CgkgICAgcmV0dXJuIG5hbWVzLnNvcnQoKTsKCSAgfTsKCgkgIC8vIEV4dGVuZCBhIGdpdmVuIG9iamVjdCB3aXRoIGFsbCB0aGUgcHJvcGVydGllcyBpbiBwYXNzZWQtaW4gb2JqZWN0KHMpLgoJICBfLmV4dGVuZCA9IGNyZWF0ZUFzc2lnbmVyKF8uYWxsS2V5cyk7CgoJICAvLyBBc3NpZ25zIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBvd24gcHJvcGVydGllcyBpbiB0aGUgcGFzc2VkLWluIG9iamVjdChzKQoJICAvLyAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2Fzc2lnbikKCSAgXy5leHRlbmRPd24gPSBfLmFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKF8ua2V5cyk7CgoJICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBrZXkgb24gYW4gb2JqZWN0IHRoYXQgcGFzc2VzIGEgcHJlZGljYXRlIHRlc3QKCSAgXy5maW5kS2V5ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHsKCSAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpOwoJICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaiksIGtleTsKCSAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewoJICAgICAga2V5ID0ga2V5c1tpXTsKCSAgICAgIGlmIChwcmVkaWNhdGUob2JqW2tleV0sIGtleSwgb2JqKSkgcmV0dXJuIGtleTsKCSAgICB9CgkgIH07CgoJICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgb25seSBjb250YWluaW5nIHRoZSB3aGl0ZWxpc3RlZCBwcm9wZXJ0aWVzLgoJICBfLnBpY2sgPSBmdW5jdGlvbihvYmplY3QsIG9pdGVyYXRlZSwgY29udGV4dCkgewoJICAgIHZhciByZXN1bHQgPSB7fSwgb2JqID0gb2JqZWN0LCBpdGVyYXRlZSwga2V5czsKCSAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHQ7CgkgICAgaWYgKF8uaXNGdW5jdGlvbihvaXRlcmF0ZWUpKSB7CgkgICAgICBrZXlzID0gXy5hbGxLZXlzKG9iaik7CgkgICAgICBpdGVyYXRlZSA9IG9wdGltaXplQ2Iob2l0ZXJhdGVlLCBjb250ZXh0KTsKCSAgICB9IGVsc2UgewoJICAgICAga2V5cyA9IGZsYXR0ZW4oYXJndW1lbnRzLCBmYWxzZSwgZmFsc2UsIDEpOwoJICAgICAgaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmopIHsgcmV0dXJuIGtleSBpbiBvYmo7IH07CgkgICAgICBvYmogPSBPYmplY3Qob2JqKTsKCSAgICB9CgkgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKCSAgICAgIHZhciBrZXkgPSBrZXlzW2ldOwoJICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07CgkgICAgICBpZiAoaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqKSkgcmVzdWx0W2tleV0gPSB2YWx1ZTsKCSAgICB9CgkgICAgcmV0dXJuIHJlc3VsdDsKCSAgfTsKCgkgICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgd2l0aG91dCB0aGUgYmxhY2tsaXN0ZWQgcHJvcGVydGllcy4KCSAgXy5vbWl0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkgewoJICAgIGlmIChfLmlzRnVuY3Rpb24oaXRlcmF0ZWUpKSB7CgkgICAgICBpdGVyYXRlZSA9IF8ubmVnYXRlKGl0ZXJhdGVlKTsKCSAgICB9IGVsc2UgewoJICAgICAgdmFyIGtleXMgPSBfLm1hcChmbGF0dGVuKGFyZ3VtZW50cywgZmFsc2UsIGZhbHNlLCAxKSwgU3RyaW5nKTsKCSAgICAgIGl0ZXJhdGVlID0gZnVuY3Rpb24odmFsdWUsIGtleSkgewoJICAgICAgICByZXR1cm4gIV8uY29udGFpbnMoa2V5cywga2V5KTsKCSAgICAgIH07CgkgICAgfQoJICAgIHJldHVybiBfLnBpY2sob2JqLCBpdGVyYXRlZSwgY29udGV4dCk7CgkgIH07CgoJICAvLyBGaWxsIGluIGEgZ2l2ZW4gb2JqZWN0IHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzLgoJICBfLmRlZmF1bHRzID0gY3JlYXRlQXNzaWduZXIoXy5hbGxLZXlzLCB0cnVlKTsKCgkgIC8vIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgZ2l2ZW4gcHJvdG90eXBlIG9iamVjdC4KCSAgLy8gSWYgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIGFyZSBwcm92aWRlZCB0aGVuIHRoZXkgd2lsbCBiZSBhZGRlZCB0byB0aGUKCSAgLy8gY3JlYXRlZCBvYmplY3QuCgkgIF8uY3JlYXRlID0gZnVuY3Rpb24ocHJvdG90eXBlLCBwcm9wcykgewoJICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7CgkgICAgaWYgKHByb3BzKSBfLmV4dGVuZE93bihyZXN1bHQsIHByb3BzKTsKCSAgICByZXR1cm4gcmVzdWx0OwoJICB9OwoKCSAgLy8gQ3JlYXRlIGEgKHNoYWxsb3ctY2xvbmVkKSBkdXBsaWNhdGUgb2YgYW4gb2JqZWN0LgoJICBfLmNsb25lID0gZnVuY3Rpb24ob2JqKSB7CgkgICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBvYmo7CgkgICAgcmV0dXJuIF8uaXNBcnJheShvYmopID8gb2JqLnNsaWNlKCkgOiBfLmV4dGVuZCh7fSwgb2JqKTsKCSAgfTsKCgkgIC8vIEludm9rZXMgaW50ZXJjZXB0b3Igd2l0aCB0aGUgb2JqLCBhbmQgdGhlbiByZXR1cm5zIG9iai4KCSAgLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byAidGFwIGludG8iIGEgbWV0aG9kIGNoYWluLCBpbgoJICAvLyBvcmRlciB0byBwZXJmb3JtIG9wZXJhdGlvbnMgb24gaW50ZXJtZWRpYXRlIHJlc3VsdHMgd2l0aGluIHRoZSBjaGFpbi4KCSAgXy50YXAgPSBmdW5jdGlvbihvYmosIGludGVyY2VwdG9yKSB7CgkgICAgaW50ZXJjZXB0b3Iob2JqKTsKCSAgICByZXR1cm4gb2JqOwoJICB9OwoKCSAgLy8gUmV0dXJucyB3aGV0aGVyIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBzZXQgb2YgYGtleTp2YWx1ZWAgcGFpcnMuCgkgIF8uaXNNYXRjaCA9IGZ1bmN0aW9uKG9iamVjdCwgYXR0cnMpIHsKCSAgICB2YXIga2V5cyA9IF8ua2V5cyhhdHRycyksIGxlbmd0aCA9IGtleXMubGVuZ3RoOwoJICAgIGlmIChvYmplY3QgPT0gbnVsbCkgcmV0dXJuICFsZW5ndGg7CgkgICAgdmFyIG9iaiA9IE9iamVjdChvYmplY3QpOwoJICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKCSAgICAgIHZhciBrZXkgPSBrZXlzW2ldOwoJICAgICAgaWYgKGF0dHJzW2tleV0gIT09IG9ialtrZXldIHx8ICEoa2V5IGluIG9iaikpIHJldHVybiBmYWxzZTsKCSAgICB9CgkgICAgcmV0dXJuIHRydWU7CgkgIH07CgoKCSAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC4KCSAgdmFyIGVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHsKCSAgICAvLyBJZGVudGljYWwgb2JqZWN0cyBhcmUgZXF1YWwuIGAwID09PSAtMGAsIGJ1dCB0aGV5IGFyZW4ndCBpZGVudGljYWwuCgkgICAgLy8gU2VlIHRoZSBbSGFybW9ueSBgZWdhbGAgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6ZWdhbCkuCgkgICAgaWYgKGEgPT09IGIpIHJldHVybiBhICE9PSAwIHx8IDEgLyBhID09PSAxIC8gYjsKCSAgICAvLyBBIHN0cmljdCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIGBudWxsID09IHVuZGVmaW5lZGAuCgkgICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBhID09PSBiOwoJICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLgoJICAgIGlmIChhIGluc3RhbmNlb2YgXykgYSA9IGEuX3dyYXBwZWQ7CgkgICAgaWYgKGIgaW5zdGFuY2VvZiBfKSBiID0gYi5fd3JhcHBlZDsKCSAgICAvLyBDb21wYXJlIGBbW0NsYXNzXV1gIG5hbWVzLgoJICAgIHZhciBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpOwoJICAgIGlmIChjbGFzc05hbWUgIT09IHRvU3RyaW5nLmNhbGwoYikpIHJldHVybiBmYWxzZTsKCSAgICBzd2l0Y2ggKGNsYXNzTmFtZSkgewoJICAgICAgLy8gU3RyaW5ncywgbnVtYmVycywgcmVndWxhciBleHByZXNzaW9ucywgZGF0ZXMsIGFuZCBib29sZWFucyBhcmUgY29tcGFyZWQgYnkgdmFsdWUuCgkgICAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOgoJICAgICAgLy8gUmVnRXhwcyBhcmUgY29lcmNlZCB0byBzdHJpbmdzIGZvciBjb21wYXJpc29uIChOb3RlOiAnJyArIC9hL2kgPT09ICcvYS9pJykKCSAgICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6CgkgICAgICAgIC8vIFByaW1pdGl2ZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgb2JqZWN0IHdyYXBwZXJzIGFyZSBlcXVpdmFsZW50OyB0aHVzLCBgIjUiYCBpcwoJICAgICAgICAvLyBlcXVpdmFsZW50IHRvIGBuZXcgU3RyaW5nKCI1IilgLgoJICAgICAgICByZXR1cm4gJycgKyBhID09PSAnJyArIGI7CgkgICAgICBjYXNlICdbb2JqZWN0IE51bWJlcl0nOgoJICAgICAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLgoJICAgICAgICAvLyBPYmplY3QoTmFOKSBpcyBlcXVpdmFsZW50IHRvIE5hTgoJICAgICAgICBpZiAoK2EgIT09ICthKSByZXR1cm4gK2IgIT09ICtiOwoJICAgICAgICAvLyBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yIG90aGVyIG51bWVyaWMgdmFsdWVzLgoJICAgICAgICByZXR1cm4gK2EgPT09IDAgPyAxIC8gK2EgPT09IDEgLyBiIDogK2EgPT09ICtiOwoJICAgICAgY2FzZSAnW29iamVjdCBEYXRlXSc6CgkgICAgICBjYXNlICdbb2JqZWN0IEJvb2xlYW5dJzoKCSAgICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1lcmljIHByaW1pdGl2ZSB2YWx1ZXMuIERhdGVzIGFyZSBjb21wYXJlZCBieSB0aGVpcgoJICAgICAgICAvLyBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnMuIE5vdGUgdGhhdCBpbnZhbGlkIGRhdGVzIHdpdGggbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zCgkgICAgICAgIC8vIG9mIGBOYU5gIGFyZSBub3QgZXF1aXZhbGVudC4KCSAgICAgICAgcmV0dXJuICthID09PSArYjsKCSAgICB9CgoJICAgIHZhciBhcmVBcnJheXMgPSBjbGFzc05hbWUgPT09ICdbb2JqZWN0IEFycmF5XSc7CgkgICAgaWYgKCFhcmVBcnJheXMpIHsKCSAgICAgIGlmICh0eXBlb2YgYSAhPSAnb2JqZWN0JyB8fCB0eXBlb2YgYiAhPSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlOwoKCSAgICAgIC8vIE9iamVjdHMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1aXZhbGVudCwgYnV0IGBPYmplY3RgcyBvciBgQXJyYXlgcwoJICAgICAgLy8gZnJvbSBkaWZmZXJlbnQgZnJhbWVzIGFyZS4KCSAgICAgIHZhciBhQ3RvciA9IGEuY29uc3RydWN0b3IsIGJDdG9yID0gYi5jb25zdHJ1Y3RvcjsKCSAgICAgIGlmIChhQ3RvciAhPT0gYkN0b3IgJiYgIShfLmlzRnVuY3Rpb24oYUN0b3IpICYmIGFDdG9yIGluc3RhbmNlb2YgYUN0b3IgJiYKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmlzRnVuY3Rpb24oYkN0b3IpICYmIGJDdG9yIGluc3RhbmNlb2YgYkN0b3IpCgkgICAgICAgICAgICAgICAgICAgICAgICAgICYmICgnY29uc3RydWN0b3InIGluIGEgJiYgJ2NvbnN0cnVjdG9yJyBpbiBiKSkgewoJICAgICAgICByZXR1cm4gZmFsc2U7CgkgICAgICB9CgkgICAgfQoJICAgIC8vIEFzc3VtZSBlcXVhbGl0eSBmb3IgY3ljbGljIHN0cnVjdHVyZXMuIFRoZSBhbGdvcml0aG0gZm9yIGRldGVjdGluZyBjeWNsaWMKCSAgICAvLyBzdHJ1Y3R1cmVzIGlzIGFkYXB0ZWQgZnJvbSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLCBhYnN0cmFjdCBvcGVyYXRpb24gYEpPYC4KCgkgICAgLy8gSW5pdGlhbGl6aW5nIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLgoJICAgIC8vIEl0J3MgZG9uZSBoZXJlIHNpbmNlIHdlIG9ubHkgbmVlZCB0aGVtIGZvciBvYmplY3RzIGFuZCBhcnJheXMgY29tcGFyaXNvbi4KCSAgICBhU3RhY2sgPSBhU3RhY2sgfHwgW107CgkgICAgYlN0YWNrID0gYlN0YWNrIHx8IFtdOwoJICAgIHZhciBsZW5ndGggPSBhU3RhY2subGVuZ3RoOwoJICAgIHdoaWxlIChsZW5ndGgtLSkgewoJICAgICAgLy8gTGluZWFyIHNlYXJjaC4gUGVyZm9ybWFuY2UgaXMgaW52ZXJzZWx5IHByb3BvcnRpb25hbCB0byB0aGUgbnVtYmVyIG9mCgkgICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuCgkgICAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT09IGEpIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PT0gYjsKCSAgICB9CgoJICAgIC8vIEFkZCB0aGUgZmlyc3Qgb2JqZWN0IHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy4KCSAgICBhU3RhY2sucHVzaChhKTsKCSAgICBiU3RhY2sucHVzaChiKTsKCgkgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIGFuZCBhcnJheXMuCgkgICAgaWYgKGFyZUFycmF5cykgewoJICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuCgkgICAgICBsZW5ndGggPSBhLmxlbmd0aDsKCSAgICAgIGlmIChsZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7CgkgICAgICAvLyBEZWVwIGNvbXBhcmUgdGhlIGNvbnRlbnRzLCBpZ25vcmluZyBub24tbnVtZXJpYyBwcm9wZXJ0aWVzLgoJICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7CgkgICAgICAgIGlmICghZXEoYVtsZW5ndGhdLCBiW2xlbmd0aF0sIGFTdGFjaywgYlN0YWNrKSkgcmV0dXJuIGZhbHNlOwoJICAgICAgfQoJICAgIH0gZWxzZSB7CgkgICAgICAvLyBEZWVwIGNvbXBhcmUgb2JqZWN0cy4KCSAgICAgIHZhciBrZXlzID0gXy5rZXlzKGEpLCBrZXk7CgkgICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDsKCSAgICAgIC8vIEVuc3VyZSB0aGF0IGJvdGggb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIG51bWJlciBvZiBwcm9wZXJ0aWVzIGJlZm9yZSBjb21wYXJpbmcgZGVlcCBlcXVhbGl0eS4KCSAgICAgIGlmIChfLmtleXMoYikubGVuZ3RoICE9PSBsZW5ndGgpIHJldHVybiBmYWxzZTsKCSAgICAgIHdoaWxlIChsZW5ndGgtLSkgewoJICAgICAgICAvLyBEZWVwIGNvbXBhcmUgZWFjaCBtZW1iZXIKCSAgICAgICAga2V5ID0ga2V5c1tsZW5ndGhdOwoJICAgICAgICBpZiAoIShfLmhhcyhiLCBrZXkpICYmIGVxKGFba2V5XSwgYltrZXldLCBhU3RhY2ssIGJTdGFjaykpKSByZXR1cm4gZmFsc2U7CgkgICAgICB9CgkgICAgfQoJICAgIC8vIFJlbW92ZSB0aGUgZmlyc3Qgb2JqZWN0IGZyb20gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLgoJICAgIGFTdGFjay5wb3AoKTsKCSAgICBiU3RhY2sucG9wKCk7CgkgICAgcmV0dXJuIHRydWU7CgkgIH07CgoJICAvLyBQZXJmb3JtIGEgZGVlcCBjb21wYXJpc29uIHRvIGNoZWNrIGlmIHR3byBvYmplY3RzIGFyZSBlcXVhbC4KCSAgXy5pc0VxdWFsID0gZnVuY3Rpb24oYSwgYikgewoJICAgIHJldHVybiBlcShhLCBiKTsKCSAgfTsKCgkgIC8vIElzIGEgZ2l2ZW4gYXJyYXksIHN0cmluZywgb3Igb2JqZWN0IGVtcHR5PwoJICAvLyBBbiAiZW1wdHkiIG9iamVjdCBoYXMgbm8gZW51bWVyYWJsZSBvd24tcHJvcGVydGllcy4KCSAgXy5pc0VtcHR5ID0gZnVuY3Rpb24ob2JqKSB7CgkgICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTsKCSAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSAmJiAoXy5pc0FycmF5KG9iaikgfHwgXy5pc1N0cmluZyhvYmopIHx8IF8uaXNBcmd1bWVudHMob2JqKSkpIHJldHVybiBvYmoubGVuZ3RoID09PSAwOwoJICAgIHJldHVybiBfLmtleXMob2JqKS5sZW5ndGggPT09IDA7CgkgIH07CgoJICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgRE9NIGVsZW1lbnQ/CgkgIF8uaXNFbGVtZW50ID0gZnVuY3Rpb24ob2JqKSB7CgkgICAgcmV0dXJuICEhKG9iaiAmJiBvYmoubm9kZVR5cGUgPT09IDEpOwoJICB9OwoKCSAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhbiBhcnJheT8KCSAgLy8gRGVsZWdhdGVzIHRvIEVDTUE1J3MgbmF0aXZlIEFycmF5LmlzQXJyYXkKCSAgXy5pc0FycmF5ID0gbmF0aXZlSXNBcnJheSB8fCBmdW5jdGlvbihvYmopIHsKCSAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nOwoJICB9OwoKCSAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSBhbiBvYmplY3Q/CgkgIF8uaXNPYmplY3QgPSBmdW5jdGlvbihvYmopIHsKCSAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmo7CgkgICAgcmV0dXJuIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZSA9PT0gJ29iamVjdCcgJiYgISFvYmo7CgkgIH07CgoJICAvLyBBZGQgc29tZSBpc1R5cGUgbWV0aG9kczogaXNBcmd1bWVudHMsIGlzRnVuY3Rpb24sIGlzU3RyaW5nLCBpc051bWJlciwgaXNEYXRlLCBpc1JlZ0V4cCwgaXNFcnJvci4KCSAgXy5lYWNoKFsnQXJndW1lbnRzJywgJ0Z1bmN0aW9uJywgJ1N0cmluZycsICdOdW1iZXInLCAnRGF0ZScsICdSZWdFeHAnLCAnRXJyb3InXSwgZnVuY3Rpb24obmFtZSkgewoJICAgIF9bJ2lzJyArIG5hbWVdID0gZnVuY3Rpb24ob2JqKSB7CgkgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCAnICsgbmFtZSArICddJzsKCSAgICB9OwoJICB9KTsKCgkgIC8vIERlZmluZSBhIGZhbGxiYWNrIHZlcnNpb24gb2YgdGhlIG1ldGhvZCBpbiBicm93c2VycyAoYWhlbSwgSUUgPCA5KSwgd2hlcmUKCSAgLy8gdGhlcmUgaXNuJ3QgYW55IGluc3BlY3RhYmxlICJBcmd1bWVudHMiIHR5cGUuCgkgIGlmICghXy5pc0FyZ3VtZW50cyhhcmd1bWVudHMpKSB7CgkgICAgXy5pc0FyZ3VtZW50cyA9IGZ1bmN0aW9uKG9iaikgewoJICAgICAgcmV0dXJuIF8uaGFzKG9iaiwgJ2NhbGxlZScpOwoJICAgIH07CgkgIH0KCgkgIC8vIE9wdGltaXplIGBpc0Z1bmN0aW9uYCBpZiBhcHByb3ByaWF0ZS4gV29yayBhcm91bmQgc29tZSB0eXBlb2YgYnVncyBpbiBvbGQgdjgsCgkgIC8vIElFIDExICgjMTYyMSksIGFuZCBpbiBTYWZhcmkgOCAoIzE5MjkpLgoJICBpZiAodHlwZW9mIC8uLyAhPSAnZnVuY3Rpb24nICYmIHR5cGVvZiBJbnQ4QXJyYXkgIT0gJ29iamVjdCcpIHsKCSAgICBfLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHsKCSAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09ICdmdW5jdGlvbicgfHwgZmFsc2U7CgkgICAgfTsKCSAgfQoKCSAgLy8gSXMgYSBnaXZlbiBvYmplY3QgYSBmaW5pdGUgbnVtYmVyPwoJICBfLmlzRmluaXRlID0gZnVuY3Rpb24ob2JqKSB7CgkgICAgcmV0dXJuIGlzRmluaXRlKG9iaikgJiYgIWlzTmFOKHBhcnNlRmxvYXQob2JqKSk7CgkgIH07CgoJICAvLyBJcyB0aGUgZ2l2ZW4gdmFsdWUgYE5hTmA/IChOYU4gaXMgdGhlIG9ubHkgbnVtYmVyIHdoaWNoIGRvZXMgbm90IGVxdWFsIGl0c2VsZikuCgkgIF8uaXNOYU4gPSBmdW5jdGlvbihvYmopIHsKCSAgICByZXR1cm4gXy5pc051bWJlcihvYmopICYmIG9iaiAhPT0gK29iajsKCSAgfTsKCgkgIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBib29sZWFuPwoJICBfLmlzQm9vbGVhbiA9IGZ1bmN0aW9uKG9iaikgewoJICAgIHJldHVybiBvYmogPT09IHRydWUgfHwgb2JqID09PSBmYWxzZSB8fCB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEJvb2xlYW5dJzsKCSAgfTsKCgkgIC8vIElzIGEgZ2l2ZW4gdmFsdWUgZXF1YWwgdG8gbnVsbD8KCSAgXy5pc051bGwgPSBmdW5jdGlvbihvYmopIHsKCSAgICByZXR1cm4gb2JqID09PSBudWxsOwoJICB9OwoKCSAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSB1bmRlZmluZWQ/CgkgIF8uaXNVbmRlZmluZWQgPSBmdW5jdGlvbihvYmopIHsKCSAgICByZXR1cm4gb2JqID09PSB2b2lkIDA7CgkgIH07CgoJICAvLyBTaG9ydGN1dCBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHByb3BlcnR5IGRpcmVjdGx5CgkgIC8vIG9uIGl0c2VsZiAoaW4gb3RoZXIgd29yZHMsIG5vdCBvbiBhIHByb3RvdHlwZSkuCgkgIF8uaGFzID0gZnVuY3Rpb24ob2JqLCBrZXkpIHsKCSAgICByZXR1cm4gb2JqICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7CgkgIH07CgoJICAvLyBVdGlsaXR5IEZ1bmN0aW9ucwoJICAvLyAtLS0tLS0tLS0tLS0tLS0tLQoKCSAgLy8gUnVuIFVuZGVyc2NvcmUuanMgaW4gKm5vQ29uZmxpY3QqIG1vZGUsIHJldHVybmluZyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cwoJICAvLyBwcmV2aW91cyBvd25lci4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuCgkgIF8ubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkgewoJICAgIHJvb3QuXyA9IHByZXZpb3VzVW5kZXJzY29yZTsKCSAgICByZXR1cm4gdGhpczsKCSAgfTsKCgkgIC8vIEtlZXAgdGhlIGlkZW50aXR5IGZ1bmN0aW9uIGFyb3VuZCBmb3IgZGVmYXVsdCBpdGVyYXRlZXMuCgkgIF8uaWRlbnRpdHkgPSBmdW5jdGlvbih2YWx1ZSkgewoJICAgIHJldHVybiB2YWx1ZTsKCSAgfTsKCgkgIC8vIFByZWRpY2F0ZS1nZW5lcmF0aW5nIGZ1bmN0aW9ucy4gT2Z0ZW4gdXNlZnVsIG91dHNpZGUgb2YgVW5kZXJzY29yZS4KCSAgXy5jb25zdGFudCA9IGZ1bmN0aW9uKHZhbHVlKSB7CgkgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewoJICAgICAgcmV0dXJuIHZhbHVlOwoJICAgIH07CgkgIH07CgoJICBfLm5vb3AgPSBmdW5jdGlvbigpe307CgoJICBfLnByb3BlcnR5ID0gcHJvcGVydHk7CgoJICAvLyBHZW5lcmF0ZXMgYSBmdW5jdGlvbiBmb3IgYSBnaXZlbiBvYmplY3QgdGhhdCByZXR1cm5zIGEgZ2l2ZW4gcHJvcGVydHkuCgkgIF8ucHJvcGVydHlPZiA9IGZ1bmN0aW9uKG9iaikgewoJICAgIHJldHVybiBvYmogPT0gbnVsbCA/IGZ1bmN0aW9uKCl7fSA6IGZ1bmN0aW9uKGtleSkgewoJICAgICAgcmV0dXJuIG9ialtrZXldOwoJICAgIH07CgkgIH07CgoJICAvLyBSZXR1cm5zIGEgcHJlZGljYXRlIGZvciBjaGVja2luZyB3aGV0aGVyIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBzZXQgb2YKCSAgLy8gYGtleTp2YWx1ZWAgcGFpcnMuCgkgIF8ubWF0Y2hlciA9IF8ubWF0Y2hlcyA9IGZ1bmN0aW9uKGF0dHJzKSB7CgkgICAgYXR0cnMgPSBfLmV4dGVuZE93bih7fSwgYXR0cnMpOwoJICAgIHJldHVybiBmdW5jdGlvbihvYmopIHsKCSAgICAgIHJldHVybiBfLmlzTWF0Y2gob2JqLCBhdHRycyk7CgkgICAgfTsKCSAgfTsKCgkgIC8vIFJ1biBhIGZ1bmN0aW9uICoqbioqIHRpbWVzLgoJICBfLnRpbWVzID0gZnVuY3Rpb24obiwgaXRlcmF0ZWUsIGNvbnRleHQpIHsKCSAgICB2YXIgYWNjdW0gPSBBcnJheShNYXRoLm1heCgwLCBuKSk7CgkgICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0LCAxKTsKCSAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykgYWNjdW1baV0gPSBpdGVyYXRlZShpKTsKCSAgICByZXR1cm4gYWNjdW07CgkgIH07CgoJICAvLyBSZXR1cm4gYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IChpbmNsdXNpdmUpLgoJICBfLnJhbmRvbSA9IGZ1bmN0aW9uKG1pbiwgbWF4KSB7CgkgICAgaWYgKG1heCA9PSBudWxsKSB7CgkgICAgICBtYXggPSBtaW47CgkgICAgICBtaW4gPSAwOwoJICAgIH0KCSAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTsKCSAgfTsKCgkgIC8vIEEgKHBvc3NpYmx5IGZhc3Rlcikgd2F5IHRvIGdldCB0aGUgY3VycmVudCB0aW1lc3RhbXAgYXMgYW4gaW50ZWdlci4KCSAgXy5ub3cgPSBEYXRlLm5vdyB8fCBmdW5jdGlvbigpIHsKCSAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7CgkgIH07CgoJICAgLy8gTGlzdCBvZiBIVE1MIGVudGl0aWVzIGZvciBlc2NhcGluZy4KCSAgdmFyIGVzY2FwZU1hcCA9IHsKCSAgICAnJic6ICcmYW1wOycsCgkgICAgJzwnOiAnJmx0OycsCgkgICAgJz4nOiAnJmd0OycsCgkgICAgJyInOiAnJnF1b3Q7JywKCSAgICAiJyI6ICcmI3gyNzsnLAoJICAgICdgJzogJyYjeDYwOycKCSAgfTsKCSAgdmFyIHVuZXNjYXBlTWFwID0gXy5pbnZlcnQoZXNjYXBlTWFwKTsKCgkgIC8vIEZ1bmN0aW9ucyBmb3IgZXNjYXBpbmcgYW5kIHVuZXNjYXBpbmcgc3RyaW5ncyB0by9mcm9tIEhUTUwgaW50ZXJwb2xhdGlvbi4KCSAgdmFyIGNyZWF0ZUVzY2FwZXIgPSBmdW5jdGlvbihtYXApIHsKCSAgICB2YXIgZXNjYXBlciA9IGZ1bmN0aW9uKG1hdGNoKSB7CgkgICAgICByZXR1cm4gbWFwW21hdGNoXTsKCSAgICB9OwoJICAgIC8vIFJlZ2V4ZXMgZm9yIGlkZW50aWZ5aW5nIGEga2V5IHRoYXQgbmVlZHMgdG8gYmUgZXNjYXBlZAoJICAgIHZhciBzb3VyY2UgPSAnKD86JyArIF8ua2V5cyhtYXApLmpvaW4oJ3wnKSArICcpJzsKCSAgICB2YXIgdGVzdFJlZ2V4cCA9IFJlZ0V4cChzb3VyY2UpOwoJICAgIHZhciByZXBsYWNlUmVnZXhwID0gUmVnRXhwKHNvdXJjZSwgJ2cnKTsKCSAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7CgkgICAgICBzdHJpbmcgPSBzdHJpbmcgPT0gbnVsbCA/ICcnIDogJycgKyBzdHJpbmc7CgkgICAgICByZXR1cm4gdGVzdFJlZ2V4cC50ZXN0KHN0cmluZykgPyBzdHJpbmcucmVwbGFjZShyZXBsYWNlUmVnZXhwLCBlc2NhcGVyKSA6IHN0cmluZzsKCSAgICB9OwoJICB9OwoJICBfLmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIoZXNjYXBlTWFwKTsKCSAgXy51bmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIodW5lc2NhcGVNYXApOwoKCSAgLy8gSWYgdGhlIHZhbHVlIG9mIHRoZSBuYW1lZCBgcHJvcGVydHlgIGlzIGEgZnVuY3Rpb24gdGhlbiBpbnZva2UgaXQgd2l0aCB0aGUKCSAgLy8gYG9iamVjdGAgYXMgY29udGV4dDsgb3RoZXJ3aXNlLCByZXR1cm4gaXQuCgkgIF8ucmVzdWx0ID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSwgZmFsbGJhY2spIHsKCSAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHZvaWQgMCA6IG9iamVjdFtwcm9wZXJ0eV07CgkgICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHsKCSAgICAgIHZhbHVlID0gZmFsbGJhY2s7CgkgICAgfQoJICAgIHJldHVybiBfLmlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7CgkgIH07CgoJICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBpbnRlZ2VyIGlkICh1bmlxdWUgd2l0aGluIHRoZSBlbnRpcmUgY2xpZW50IHNlc3Npb24pLgoJICAvLyBVc2VmdWwgZm9yIHRlbXBvcmFyeSBET00gaWRzLgoJICB2YXIgaWRDb3VudGVyID0gMDsKCSAgXy51bmlxdWVJZCA9IGZ1bmN0aW9uKHByZWZpeCkgewoJICAgIHZhciBpZCA9ICsraWRDb3VudGVyICsgJyc7CgkgICAgcmV0dXJuIHByZWZpeCA/IHByZWZpeCArIGlkIDogaWQ7CgkgIH07CgoJICAvLyBCeSBkZWZhdWx0LCBVbmRlcnNjb3JlIHVzZXMgRVJCLXN0eWxlIHRlbXBsYXRlIGRlbGltaXRlcnMsIGNoYW5nZSB0aGUKCSAgLy8gZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLgoJICBfLnRlbXBsYXRlU2V0dGluZ3MgPSB7CgkgICAgZXZhbHVhdGUgICAgOiAvPCUoW1xzXFNdKz8pJT4vZywKCSAgICBpbnRlcnBvbGF0ZSA6IC88JT0oW1xzXFNdKz8pJT4vZywKCSAgICBlc2NhcGUgICAgICA6IC88JS0oW1xzXFNdKz8pJT4vZwoJICB9OwoKCSAgLy8gV2hlbiBjdXN0b21pemluZyBgdGVtcGxhdGVTZXR0aW5nc2AsIGlmIHlvdSBkb24ndCB3YW50IHRvIGRlZmluZSBhbgoJICAvLyBpbnRlcnBvbGF0aW9uLCBldmFsdWF0aW9uIG9yIGVzY2FwaW5nIHJlZ2V4LCB3ZSBuZWVkIG9uZSB0aGF0IGlzCgkgIC8vIGd1YXJhbnRlZWQgbm90IHRvIG1hdGNoLgoJICB2YXIgbm9NYXRjaCA9IC8oLileLzsKCgkgIC8vIENlcnRhaW4gY2hhcmFjdGVycyBuZWVkIHRvIGJlIGVzY2FwZWQgc28gdGhhdCB0aGV5IGNhbiBiZSBwdXQgaW50byBhCgkgIC8vIHN0cmluZyBsaXRlcmFsLgoJICB2YXIgZXNjYXBlcyA9IHsKCSAgICAiJyI6ICAgICAgIiciLAoJICAgICdcXCc6ICAgICAnXFwnLAoJICAgICdccic6ICAgICAncicsCgkgICAgJ1xuJzogICAgICduJywKCSAgICAnXHUyMDI4JzogJ3UyMDI4JywKCSAgICAnXHUyMDI5JzogJ3UyMDI5JwoJICB9OwoKCSAgdmFyIGVzY2FwZXIgPSAvXFx8J3xccnxcbnxcdTIwMjh8XHUyMDI5L2c7CgoJICB2YXIgZXNjYXBlQ2hhciA9IGZ1bmN0aW9uKG1hdGNoKSB7CgkgICAgcmV0dXJuICdcXCcgKyBlc2NhcGVzW21hdGNoXTsKCSAgfTsKCgkgIC8vIEphdmFTY3JpcHQgbWljcm8tdGVtcGxhdGluZywgc2ltaWxhciB0byBKb2huIFJlc2lnJ3MgaW1wbGVtZW50YXRpb24uCgkgIC8vIFVuZGVyc2NvcmUgdGVtcGxhdGluZyBoYW5kbGVzIGFyYml0cmFyeSBkZWxpbWl0ZXJzLCBwcmVzZXJ2ZXMgd2hpdGVzcGFjZSwKCSAgLy8gYW5kIGNvcnJlY3RseSBlc2NhcGVzIHF1b3RlcyB3aXRoaW4gaW50ZXJwb2xhdGVkIGNvZGUuCgkgIC8vIE5COiBgb2xkU2V0dGluZ3NgIG9ubHkgZXhpc3RzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4KCSAgXy50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHRleHQsIHNldHRpbmdzLCBvbGRTZXR0aW5ncykgewoJICAgIGlmICghc2V0dGluZ3MgJiYgb2xkU2V0dGluZ3MpIHNldHRpbmdzID0gb2xkU2V0dGluZ3M7CgkgICAgc2V0dGluZ3MgPSBfLmRlZmF1bHRzKHt9LCBzZXR0aW5ncywgXy50ZW1wbGF0ZVNldHRpbmdzKTsKCgkgICAgLy8gQ29tYmluZSBkZWxpbWl0ZXJzIGludG8gb25lIHJlZ3VsYXIgZXhwcmVzc2lvbiB2aWEgYWx0ZXJuYXRpb24uCgkgICAgdmFyIG1hdGNoZXIgPSBSZWdFeHAoWwoJICAgICAgKHNldHRpbmdzLmVzY2FwZSB8fCBub01hdGNoKS5zb3VyY2UsCgkgICAgICAoc2V0dGluZ3MuaW50ZXJwb2xhdGUgfHwgbm9NYXRjaCkuc291cmNlLAoJICAgICAgKHNldHRpbmdzLmV2YWx1YXRlIHx8IG5vTWF0Y2gpLnNvdXJjZQoJICAgIF0uam9pbignfCcpICsgJ3wkJywgJ2cnKTsKCgkgICAgLy8gQ29tcGlsZSB0aGUgdGVtcGxhdGUgc291cmNlLCBlc2NhcGluZyBzdHJpbmcgbGl0ZXJhbHMgYXBwcm9wcmlhdGVseS4KCSAgICB2YXIgaW5kZXggPSAwOwoJICAgIHZhciBzb3VyY2UgPSAiX19wKz0nIjsKCSAgICB0ZXh0LnJlcGxhY2UobWF0Y2hlciwgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZSwgaW50ZXJwb2xhdGUsIGV2YWx1YXRlLCBvZmZzZXQpIHsKCSAgICAgIHNvdXJjZSArPSB0ZXh0LnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UoZXNjYXBlciwgZXNjYXBlQ2hhcik7CgkgICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDsKCgkgICAgICBpZiAoZXNjYXBlKSB7CgkgICAgICAgIHNvdXJjZSArPSAiJytcbigoX190PSgiICsgZXNjYXBlICsgIikpPT1udWxsPycnOl8uZXNjYXBlKF9fdCkpK1xuJyI7CgkgICAgICB9IGVsc2UgaWYgKGludGVycG9sYXRlKSB7CgkgICAgICAgIHNvdXJjZSArPSAiJytcbigoX190PSgiICsgaW50ZXJwb2xhdGUgKyAiKSk9PW51bGw/Jyc6X190KStcbiciOwoJICAgICAgfSBlbHNlIGlmIChldmFsdWF0ZSkgewoJICAgICAgICBzb3VyY2UgKz0gIic7XG4iICsgZXZhbHVhdGUgKyAiXG5fX3ArPSciOwoJICAgICAgfQoKCSAgICAgIC8vIEFkb2JlIFZNcyBuZWVkIHRoZSBtYXRjaCByZXR1cm5lZCB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IG9mZmVzdC4KCSAgICAgIHJldHVybiBtYXRjaDsKCSAgICB9KTsKCSAgICBzb3VyY2UgKz0gIic7XG4iOwoKCSAgICAvLyBJZiBhIHZhcmlhYmxlIGlzIG5vdCBzcGVjaWZpZWQsIHBsYWNlIGRhdGEgdmFsdWVzIGluIGxvY2FsIHNjb3BlLgoJICAgIGlmICghc2V0dGluZ3MudmFyaWFibGUpIHNvdXJjZSA9ICd3aXRoKG9ianx8e30pe1xuJyArIHNvdXJjZSArICd9XG4nOwoKCSAgICBzb3VyY2UgPSAidmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLCIgKwoJICAgICAgInByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307XG4iICsKCSAgICAgIHNvdXJjZSArICdyZXR1cm4gX19wO1xuJzsKCgkgICAgdHJ5IHsKCSAgICAgIHZhciByZW5kZXIgPSBuZXcgRnVuY3Rpb24oc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicsICdfJywgc291cmNlKTsKCSAgICB9IGNhdGNoIChlKSB7CgkgICAgICBlLnNvdXJjZSA9IHNvdXJjZTsKCSAgICAgIHRocm93IGU7CgkgICAgfQoKCSAgICB2YXIgdGVtcGxhdGUgPSBmdW5jdGlvbihkYXRhKSB7CgkgICAgICByZXR1cm4gcmVuZGVyLmNhbGwodGhpcywgZGF0YSwgXyk7CgkgICAgfTsKCgkgICAgLy8gUHJvdmlkZSB0aGUgY29tcGlsZWQgc291cmNlIGFzIGEgY29udmVuaWVuY2UgZm9yIHByZWNvbXBpbGF0aW9uLgoJICAgIHZhciBhcmd1bWVudCA9IHNldHRpbmdzLnZhcmlhYmxlIHx8ICdvYmonOwoJICAgIHRlbXBsYXRlLnNvdXJjZSA9ICdmdW5jdGlvbignICsgYXJndW1lbnQgKyAnKXtcbicgKyBzb3VyY2UgKyAnfSc7CgoJICAgIHJldHVybiB0ZW1wbGF0ZTsKCSAgfTsKCgkgIC8vIEFkZCBhICJjaGFpbiIgZnVuY3Rpb24uIFN0YXJ0IGNoYWluaW5nIGEgd3JhcHBlZCBVbmRlcnNjb3JlIG9iamVjdC4KCSAgXy5jaGFpbiA9IGZ1bmN0aW9uKG9iaikgewoJICAgIHZhciBpbnN0YW5jZSA9IF8ob2JqKTsKCSAgICBpbnN0YW5jZS5fY2hhaW4gPSB0cnVlOwoJICAgIHJldHVybiBpbnN0YW5jZTsKCSAgfTsKCgkgIC8vIE9PUAoJICAvLyAtLS0tLS0tLS0tLS0tLS0KCSAgLy8gSWYgVW5kZXJzY29yZSBpcyBjYWxsZWQgYXMgYSBmdW5jdGlvbiwgaXQgcmV0dXJucyBhIHdyYXBwZWQgb2JqZWN0IHRoYXQKCSAgLy8gY2FuIGJlIHVzZWQgT08tc3R5bGUuIFRoaXMgd3JhcHBlciBob2xkcyBhbHRlcmVkIHZlcnNpb25zIG9mIGFsbCB0aGUKCSAgLy8gdW5kZXJzY29yZSBmdW5jdGlvbnMuIFdyYXBwZWQgb2JqZWN0cyBtYXkgYmUgY2hhaW5lZC4KCgkgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjb250aW51ZSBjaGFpbmluZyBpbnRlcm1lZGlhdGUgcmVzdWx0cy4KCSAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uKGluc3RhbmNlLCBvYmopIHsKCSAgICByZXR1cm4gaW5zdGFuY2UuX2NoYWluID8gXyhvYmopLmNoYWluKCkgOiBvYmo7CgkgIH07CgoJICAvLyBBZGQgeW91ciBvd24gY3VzdG9tIGZ1bmN0aW9ucyB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuCgkgIF8ubWl4aW4gPSBmdW5jdGlvbihvYmopIHsKCSAgICBfLmVhY2goXy5mdW5jdGlvbnMob2JqKSwgZnVuY3Rpb24obmFtZSkgewoJICAgICAgdmFyIGZ1bmMgPSBfW25hbWVdID0gb2JqW25hbWVdOwoJICAgICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHsKCSAgICAgICAgdmFyIGFyZ3MgPSBbdGhpcy5fd3JhcHBlZF07CgkgICAgICAgIHB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTsKCSAgICAgICAgcmV0dXJuIHJlc3VsdCh0aGlzLCBmdW5jLmFwcGx5KF8sIGFyZ3MpKTsKCSAgICAgIH07CgkgICAgfSk7CgkgIH07CgoJICAvLyBBZGQgYWxsIG9mIHRoZSBVbmRlcnNjb3JlIGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlciBvYmplY3QuCgkgIF8ubWl4aW4oXyk7CgoJICAvLyBBZGQgYWxsIG11dGF0b3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLgoJICBfLmVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkgewoJICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdOwoJICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7CgkgICAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDsKCSAgICAgIG1ldGhvZC5hcHBseShvYmosIGFyZ3VtZW50cyk7CgkgICAgICBpZiAoKG5hbWUgPT09ICdzaGlmdCcgfHwgbmFtZSA9PT0gJ3NwbGljZScpICYmIG9iai5sZW5ndGggPT09IDApIGRlbGV0ZSBvYmpbMF07CgkgICAgICByZXR1cm4gcmVzdWx0KHRoaXMsIG9iaik7CgkgICAgfTsKCSAgfSk7CgoJICAvLyBBZGQgYWxsIGFjY2Vzc29yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci4KCSAgXy5lYWNoKFsnY29uY2F0JywgJ2pvaW4nLCAnc2xpY2UnXSwgZnVuY3Rpb24obmFtZSkgewoJICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdOwoJICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7CgkgICAgICByZXR1cm4gcmVzdWx0KHRoaXMsIG1ldGhvZC5hcHBseSh0aGlzLl93cmFwcGVkLCBhcmd1bWVudHMpKTsKCSAgICB9OwoJICB9KTsKCgkgIC8vIEV4dHJhY3RzIHRoZSByZXN1bHQgZnJvbSBhIHdyYXBwZWQgYW5kIGNoYWluZWQgb2JqZWN0LgoJICBfLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uKCkgewoJICAgIHJldHVybiB0aGlzLl93cmFwcGVkOwoJICB9OwoKCSAgLy8gUHJvdmlkZSB1bndyYXBwaW5nIHByb3h5IGZvciBzb21lIG1ldGhvZHMgdXNlZCBpbiBlbmdpbmUgb3BlcmF0aW9ucwoJICAvLyBzdWNoIGFzIGFyaXRobWV0aWMgYW5kIEpTT04gc3RyaW5naWZpY2F0aW9uLgoJICBfLnByb3RvdHlwZS52YWx1ZU9mID0gXy5wcm90b3R5cGUudG9KU09OID0gXy5wcm90b3R5cGUudmFsdWU7CgoJICBfLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewoJICAgIHJldHVybiAnJyArIHRoaXMuX3dyYXBwZWQ7CgkgIH07CgoJICAvLyBBTUQgcmVnaXN0cmF0aW9uIGhhcHBlbnMgYXQgdGhlIGVuZCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIEFNRCBsb2FkZXJzCgkgIC8vIHRoYXQgbWF5IG5vdCBlbmZvcmNlIG5leHQtdHVybiBzZW1hbnRpY3Mgb24gbW9kdWxlcy4gRXZlbiB0aG91Z2ggZ2VuZXJhbAoJICAvLyBwcmFjdGljZSBmb3IgQU1EIHJlZ2lzdHJhdGlvbiBpcyB0byBiZSBhbm9ueW1vdXMsIHVuZGVyc2NvcmUgcmVnaXN0ZXJzCgkgIC8vIGFzIGEgbmFtZWQgbW9kdWxlIGJlY2F1c2UsIGxpa2UgalF1ZXJ5LCBpdCBpcyBhIGJhc2UgbGlicmFyeSB0aGF0IGlzCgkgIC8vIHBvcHVsYXIgZW5vdWdoIHRvIGJlIGJ1bmRsZWQgaW4gYSB0aGlyZCBwYXJ0eSBsaWIsIGJ1dCBub3QgYmUgcGFydCBvZgoJICAvLyBhbiBBTUQgbG9hZCByZXF1ZXN0LiBUaG9zZSBjYXNlcyBjb3VsZCBnZW5lcmF0ZSBhbiBlcnJvciB3aGVuIGFuCgkgIC8vIGFub255bW91cyBkZWZpbmUoKSBpcyBjYWxsZWQgb3V0c2lkZSBvZiBhIGxvYWRlciByZXF1ZXN0LgoJICBpZiAodHJ1ZSkgewoJICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtdLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IGZ1bmN0aW9uKCkgewoJICAgICAgcmV0dXJuIF87CgkgICAgfS5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpOwoJICB9Cgl9LmNhbGwodGhpcykpOwoKCi8qKiovIH0pCgovKioqKioqLyB9KTs=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="2985250" offset="0" length="1400" />
          <PacketInfo time="2985250" offset="1400" length="1400" />
          <PacketInfo time="2985250" offset="2800" length="1400" />
          <PacketInfo time="2985250" offset="4200" length="1400" />
          <PacketInfo time="2985265" offset="5600" length="1400" />
          <PacketInfo time="2985281" offset="7000" length="1400" />
          <PacketInfo time="2985296" offset="8400" length="1400" />
          <PacketInfo time="2985312" offset="9800" length="1400" />
          <PacketInfo time="2985312" offset="11200" length="1400" />
          <PacketInfo time="2985312" offset="12600" length="1400" />
          <PacketInfo time="2985328" offset="14000" length="1400" />
          <PacketInfo time="2985328" offset="15400" length="1400" />
          <PacketInfo time="2985328" offset="16800" length="1400" />
          <PacketInfo time="2985328" offset="18200" length="1400" />
          <PacketInfo time="2985359" offset="19600" length="1400" />
          <PacketInfo time="2985359" offset="21000" length="1400" />
          <PacketInfo time="2985359" offset="22400" length="1400" />
          <PacketInfo time="2985359" offset="23800" length="1400" />
          <PacketInfo time="2985359" offset="25200" length="1400" />
          <PacketInfo time="2985359" offset="26600" length="1400" />
          <PacketInfo time="2985359" offset="28000" length="1400" />
          <PacketInfo time="2985359" offset="29400" length="1400" />
          <PacketInfo time="2985375" offset="30800" length="1400" />
          <PacketInfo time="2985375" offset="32200" length="1400" />
          <PacketInfo time="2985375" offset="33600" length="1400" />
          <PacketInfo time="2985375" offset="35000" length="1400" />
          <PacketInfo time="2985375" offset="36400" length="1400" />
          <PacketInfo time="2985390" offset="37800" length="1400" />
          <PacketInfo time="2985390" offset="39200" length="1400" />
          <PacketInfo time="2985390" offset="40600" length="1400" />
          <PacketInfo time="2985390" offset="42000" length="1400" />
          <PacketInfo time="2985390" offset="43400" length="1400" />
          <PacketInfo time="2985390" offset="44800" length="1400" />
          <PacketInfo time="2985390" offset="46200" length="1400" />
          <PacketInfo time="2985390" offset="47600" length="1400" />
          <PacketInfo time="2985390" offset="49000" length="1400" />
          <PacketInfo time="2985406" offset="50400" length="1400" />
          <PacketInfo time="2985406" offset="51800" length="1400" />
          <PacketInfo time="2985406" offset="53200" length="1400" />
          <PacketInfo time="2985406" offset="54600" length="1400" />
          <PacketInfo time="2985406" offset="56000" length="1400" />
          <PacketInfo time="2985406" offset="57400" length="1400" />
          <PacketInfo time="2985406" offset="58800" length="1400" />
          <PacketInfo time="2985406" offset="60200" length="1400" />
          <PacketInfo time="2985406" offset="61600" length="1400" />
          <PacketInfo time="2985406" offset="63000" length="1400" />
          <PacketInfo time="2985406" offset="64400" length="1400" />
          <PacketInfo time="2985421" offset="65800" length="1400" />
          <PacketInfo time="2985421" offset="67200" length="1400" />
          <PacketInfo time="2985421" offset="68600" length="1400" />
          <PacketInfo time="2985421" offset="70000" length="1400" />
          <PacketInfo time="2985421" offset="71400" length="1400" />
          <PacketInfo time="2985421" offset="72800" length="1400" />
          <PacketInfo time="2985421" offset="74200" length="1400" />
          <PacketInfo time="2985421" offset="75600" length="1400" />
          <PacketInfo time="2985421" offset="77000" length="1400" />
          <PacketInfo time="2985421" offset="78400" length="1400" />
          <PacketInfo time="2985421" offset="79800" length="1400" />
          <PacketInfo time="2985421" offset="81200" length="1400" />
          <PacketInfo time="2985437" offset="82600" length="1400" />
          <PacketInfo time="2985437" offset="84000" length="1400" />
          <PacketInfo time="2985437" offset="85400" length="1400" />
          <PacketInfo time="2985437" offset="86800" length="1400" />
          <PacketInfo time="2985437" offset="88200" length="1400" />
          <PacketInfo time="2985437" offset="89600" length="1400" />
          <PacketInfo time="2985437" offset="91000" length="1400" />
          <PacketInfo time="2985437" offset="92400" length="1400" />
          <PacketInfo time="2985437" offset="93800" length="1400" />
          <PacketInfo time="2985437" offset="95200" length="1400" />
          <PacketInfo time="2985453" offset="96600" length="1400" />
          <PacketInfo time="2985453" offset="98000" length="1400" />
          <PacketInfo time="2985453" offset="99400" length="1400" />
          <PacketInfo time="2985453" offset="100800" length="1400" />
          <PacketInfo time="2985453" offset="102200" length="1400" />
          <PacketInfo time="2985453" offset="103600" length="1400" />
          <PacketInfo time="2985453" offset="105000" length="1400" />
          <PacketInfo time="2985453" offset="106400" length="1400" />
          <PacketInfo time="2985453" offset="107800" length="1400" />
          <PacketInfo time="2985453" offset="109200" length="1400" />
          <PacketInfo time="2985453" offset="110600" length="1400" />
          <PacketInfo time="2985468" offset="112000" length="1400" />
          <PacketInfo time="2985468" offset="113400" length="1400" />
          <PacketInfo time="2985468" offset="114800" length="1400" />
          <PacketInfo time="2985468" offset="116200" length="1400" />
          <PacketInfo time="2985468" offset="117600" length="1400" />
          <PacketInfo time="2985468" offset="119000" length="1400" />
          <PacketInfo time="2985468" offset="120400" length="1400" />
          <PacketInfo time="2985468" offset="121800" length="1400" />
          <PacketInfo time="2985468" offset="123200" length="1400" />
          <PacketInfo time="2985468" offset="124600" length="1400" />
          <PacketInfo time="2985468" offset="126000" length="1400" />
          <PacketInfo time="2985484" offset="127400" length="1400" />
          <PacketInfo time="2985484" offset="128800" length="1400" />
          <PacketInfo time="2985484" offset="130200" length="1400" />
          <PacketInfo time="2985484" offset="131600" length="1400" />
          <PacketInfo time="2985484" offset="133000" length="1400" />
          <PacketInfo time="2985484" offset="134400" length="1400" />
          <PacketInfo time="2985484" offset="135800" length="1400" />
          <PacketInfo time="2985484" offset="137200" length="1400" />
          <PacketInfo time="2985484" offset="138600" length="1400" />
          <PacketInfo time="2985484" offset="140000" length="1400" />
          <PacketInfo time="2985484" offset="141400" length="1400" />
          <PacketInfo time="2985500" offset="142800" length="1400" />
          <PacketInfo time="2985500" offset="144200" length="1400" />
          <PacketInfo time="2985500" offset="145600" length="1400" />
          <PacketInfo time="2985500" offset="147000" length="1400" />
          <PacketInfo time="2985500" offset="148400" length="1400" />
          <PacketInfo time="2985500" offset="149800" length="1400" />
          <PacketInfo time="2985500" offset="151200" length="1400" />
          <PacketInfo time="2985500" offset="152600" length="1400" />
          <PacketInfo time="2985500" offset="154000" length="1400" />
          <PacketInfo time="2985515" offset="155400" length="1400" />
          <PacketInfo time="2985515" offset="156800" length="1400" />
          <PacketInfo time="2985515" offset="158200" length="1400" />
          <PacketInfo time="2985515" offset="159600" length="1400" />
          <PacketInfo time="2985515" offset="161000" length="1400" />
          <PacketInfo time="2985515" offset="162400" length="1400" />
          <PacketInfo time="2985515" offset="163800" length="1400" />
          <PacketInfo time="2985515" offset="165200" length="1400" />
          <PacketInfo time="2985515" offset="166600" length="1400" />
          <PacketInfo time="2985515" offset="168000" length="1400" />
          <PacketInfo time="2985531" offset="169400" length="1400" />
          <PacketInfo time="2985531" offset="170800" length="1400" />
          <PacketInfo time="2985531" offset="172200" length="1400" />
          <PacketInfo time="2985531" offset="173600" length="1400" />
          <PacketInfo time="2985531" offset="175000" length="1400" />
          <PacketInfo time="2985531" offset="176400" length="1400" />
          <PacketInfo time="2985531" offset="177800" length="1400" />
          <PacketInfo time="2985531" offset="179200" length="1400" />
          <PacketInfo time="2985531" offset="180600" length="1400" />
          <PacketInfo time="2985531" offset="182000" length="1400" />
          <PacketInfo time="2985531" offset="183400" length="1400" />
          <PacketInfo time="2985546" offset="184800" length="1400" />
          <PacketInfo time="2985546" offset="186200" length="1400" />
          <PacketInfo time="2985546" offset="187600" length="1400" />
          <PacketInfo time="2985546" offset="189000" length="1400" />
          <PacketInfo time="2985546" offset="190400" length="1400" />
          <PacketInfo time="2985546" offset="191800" length="1400" />
          <PacketInfo time="2985546" offset="193200" length="1400" />
          <PacketInfo time="2985546" offset="194600" length="1400" />
          <PacketInfo time="2985546" offset="196000" length="1400" />
          <PacketInfo time="2985546" offset="197400" length="1400" />
          <PacketInfo time="2985562" offset="198800" length="1400" />
          <PacketInfo time="2985562" offset="200200" length="1400" />
          <PacketInfo time="2985562" offset="201600" length="1400" />
          <PacketInfo time="2985562" offset="203000" length="1400" />
          <PacketInfo time="2985562" offset="204400" length="1400" />
          <PacketInfo time="2985562" offset="205800" length="1400" />
          <PacketInfo time="2985562" offset="207200" length="1400" />
          <PacketInfo time="2985562" offset="208600" length="1400" />
          <PacketInfo time="2985562" offset="210000" length="1400" />
          <PacketInfo time="2985562" offset="211400" length="1400" />
          <PacketInfo time="2985562" offset="212800" length="1400" />
          <PacketInfo time="2985578" offset="214200" length="1400" />
          <PacketInfo time="2985578" offset="215600" length="1400" />
          <PacketInfo time="2985578" offset="217000" length="1400" />
          <PacketInfo time="2985578" offset="218400" length="1400" />
          <PacketInfo time="2985578" offset="219800" length="1400" />
          <PacketInfo time="2985578" offset="221200" length="1400" />
          <PacketInfo time="2985578" offset="222600" length="1400" />
          <PacketInfo time="2985578" offset="224000" length="1400" />
          <PacketInfo time="2985578" offset="225400" length="1400" />
          <PacketInfo time="2985578" offset="226800" length="1400" />
          <PacketInfo time="2985578" offset="228200" length="1400" />
          <PacketInfo time="2985593" offset="229600" length="1400" />
          <PacketInfo time="2985593" offset="231000" length="1400" />
          <PacketInfo time="2985593" offset="232400" length="1400" />
          <PacketInfo time="2985593" offset="233800" length="1400" />
          <PacketInfo time="2985593" offset="235200" length="1400" />
          <PacketInfo time="2985593" offset="236600" length="1400" />
          <PacketInfo time="2985593" offset="238000" length="1400" />
          <PacketInfo time="2985593" offset="239400" length="1400" />
          <PacketInfo time="2985593" offset="240800" length="1400" />
          <PacketInfo time="2985593" offset="242200" length="1400" />
          <PacketInfo time="2985593" offset="243600" length="1400" />
          <PacketInfo time="2985593" offset="245000" length="1400" />
          <PacketInfo time="2985609" offset="246400" length="1400" />
          <PacketInfo time="2985609" offset="247800" length="1400" />
          <PacketInfo time="2985609" offset="249200" length="1400" />
          <PacketInfo time="2985609" offset="250600" length="1400" />
          <PacketInfo time="2985609" offset="252000" length="1400" />
          <PacketInfo time="2985609" offset="253400" length="1400" />
          <PacketInfo time="2985609" offset="254800" length="1400" />
          <PacketInfo time="2985609" offset="256200" length="1400" />
          <PacketInfo time="2985609" offset="257600" length="1400" />
          <PacketInfo time="2985609" offset="259000" length="1400" />
          <PacketInfo time="2985609" offset="260400" length="1400" />
          <PacketInfo time="2985625" offset="261800" length="1400" />
          <PacketInfo time="2985625" offset="263200" length="1400" />
          <PacketInfo time="2985625" offset="264600" length="1400" />
          <PacketInfo time="2985625" offset="266000" length="1400" />
          <PacketInfo time="2985625" offset="267400" length="1400" />
          <PacketInfo time="2985625" offset="268800" length="1400" />
          <PacketInfo time="2985625" offset="270200" length="1400" />
          <PacketInfo time="2985625" offset="271600" length="1400" />
          <PacketInfo time="2985640" offset="273000" length="1400" />
          <PacketInfo time="2985640" offset="274400" length="1400" />
          <PacketInfo time="2985640" offset="275800" length="1400" />
          <PacketInfo time="2985640" offset="277200" length="1400" />
          <PacketInfo time="2985640" offset="278600" length="1400" />
          <PacketInfo time="2985640" offset="280000" length="1400" />
          <PacketInfo time="2985656" offset="281400" length="1400" />
          <PacketInfo time="2985656" offset="282800" length="1400" />
          <PacketInfo time="2985656" offset="284200" length="1400" />
          <PacketInfo time="2985656" offset="285600" length="1400" />
          <PacketInfo time="2985656" offset="287000" length="1400" />
          <PacketInfo time="2985656" offset="288400" length="1400" />
          <PacketInfo time="2985656" offset="289800" length="1400" />
          <PacketInfo time="2985656" offset="291200" length="1400" />
          <PacketInfo time="2985656" offset="292600" length="1400" />
          <PacketInfo time="2985734" offset="294000" length="1400" />
          <PacketInfo time="2985734" offset="295400" length="1400" />
          <PacketInfo time="2985734" offset="296800" length="1400" />
          <PacketInfo time="2985750" offset="298200" length="1400" />
          <PacketInfo time="2985750" offset="299600" length="1400" />
          <PacketInfo time="2985750" offset="301000" length="1400" />
          <PacketInfo time="2985750" offset="302400" length="1400" />
          <PacketInfo time="2985750" offset="303800" length="1400" />
          <PacketInfo time="2985750" offset="305200" length="1400" />
          <PacketInfo time="2985750" offset="306600" length="1400" />
          <PacketInfo time="2985750" offset="308000" length="1400" />
          <PacketInfo time="2985750" offset="309400" length="1400" />
          <PacketInfo time="2985750" offset="310800" length="1400" />
          <PacketInfo time="2985750" offset="312200" length="1400" />
          <PacketInfo time="2985765" offset="313600" length="1400" />
          <PacketInfo time="2985765" offset="315000" length="1400" />
          <PacketInfo time="2985765" offset="316400" length="1400" />
          <PacketInfo time="2985765" offset="317800" length="1400" />
          <PacketInfo time="2985765" offset="319200" length="1400" />
          <PacketInfo time="2985765" offset="320600" length="1400" />
          <PacketInfo time="2985765" offset="322000" length="1400" />
          <PacketInfo time="2985765" offset="323400" length="1400" />
          <PacketInfo time="2985765" offset="324800" length="1400" />
          <PacketInfo time="2985765" offset="326200" length="1400" />
          <PacketInfo time="2985765" offset="327600" length="1400" />
          <PacketInfo time="2985765" offset="329000" length="1400" />
          <PacketInfo time="2985765" offset="330400" length="1400" />
          <PacketInfo time="2985781" offset="331800" length="1400" />
          <PacketInfo time="2985781" offset="333200" length="1400" />
          <PacketInfo time="2985781" offset="334600" length="1400" />
          <PacketInfo time="2985781" offset="336000" length="1400" />
          <PacketInfo time="2985781" offset="337400" length="1400" />
          <PacketInfo time="2985781" offset="338800" length="1400" />
          <PacketInfo time="2985781" offset="340200" length="1400" />
          <PacketInfo time="2985781" offset="341600" length="1400" />
          <PacketInfo time="2985781" offset="343000" length="1400" />
          <PacketInfo time="2985781" offset="344400" length="1400" />
          <PacketInfo time="2985796" offset="345800" length="1400" />
          <PacketInfo time="2985796" offset="347200" length="1400" />
          <PacketInfo time="2985796" offset="348600" length="1400" />
          <PacketInfo time="2985796" offset="350000" length="1400" />
          <PacketInfo time="2985796" offset="351400" length="1400" />
          <PacketInfo time="2985796" offset="352800" length="1400" />
          <PacketInfo time="2985796" offset="354200" length="1400" />
          <PacketInfo time="2985796" offset="355600" length="1400" />
          <PacketInfo time="2985796" offset="357000" length="1400" />
          <PacketInfo time="2985796" offset="358400" length="1400" />
          <PacketInfo time="2985796" offset="359800" length="1400" />
          <PacketInfo time="2985812" offset="361200" length="1400" />
          <PacketInfo time="2985812" offset="362600" length="1400" />
          <PacketInfo time="2985812" offset="364000" length="1400" />
          <PacketInfo time="2985812" offset="365400" length="1400" />
          <PacketInfo time="2985812" offset="366800" length="1400" />
          <PacketInfo time="2985812" offset="368200" length="1400" />
          <PacketInfo time="2985812" offset="369600" length="1400" />
          <PacketInfo time="2985812" offset="371000" length="1400" />
          <PacketInfo time="2985812" offset="372400" length="1400" />
          <PacketInfo time="2985812" offset="373800" length="1400" />
          <PacketInfo time="2985812" offset="375200" length="1400" />
          <PacketInfo time="2985812" offset="376600" length="1400" />
          <PacketInfo time="2985828" offset="378000" length="1400" />
          <PacketInfo time="2985828" offset="379400" length="1400" />
          <PacketInfo time="2985828" offset="380800" length="1400" />
          <PacketInfo time="2985828" offset="382200" length="1400" />
          <PacketInfo time="2985828" offset="383600" length="1400" />
          <PacketInfo time="2985828" offset="385000" length="1400" />
          <PacketInfo time="2985828" offset="386400" length="1400" />
          <PacketInfo time="2985828" offset="387800" length="1400" />
          <PacketInfo time="2985828" offset="389200" length="1400" />
          <PacketInfo time="2985828" offset="390600" length="1400" />
          <PacketInfo time="2985843" offset="392000" length="1400" />
          <PacketInfo time="2985843" offset="393400" length="1400" />
          <PacketInfo time="2985843" offset="394800" length="1400" />
          <PacketInfo time="2985843" offset="396200" length="1400" />
          <PacketInfo time="2985843" offset="397600" length="1400" />
          <PacketInfo time="2985843" offset="399000" length="1400" />
          <PacketInfo time="2985843" offset="400400" length="1400" />
          <PacketInfo time="2985843" offset="401800" length="1400" />
          <PacketInfo time="2985843" offset="403200" length="1400" />
          <PacketInfo time="2985843" offset="404600" length="1400" />
          <PacketInfo time="2985859" offset="406000" length="1400" />
          <PacketInfo time="2985859" offset="407400" length="1400" />
          <PacketInfo time="2985859" offset="408800" length="1400" />
          <PacketInfo time="2985859" offset="410200" length="1400" />
          <PacketInfo time="2985859" offset="411600" length="1400" />
          <PacketInfo time="2985859" offset="413000" length="1400" />
          <PacketInfo time="2985859" offset="414400" length="1400" />
          <PacketInfo time="2985859" offset="415800" length="1400" />
          <PacketInfo time="2985859" offset="417200" length="1400" />
          <PacketInfo time="2985859" offset="418600" length="1400" />
          <PacketInfo time="2985859" offset="420000" length="1400" />
          <PacketInfo time="2985859" offset="421400" length="1400" />
          <PacketInfo time="2985875" offset="422800" length="1400" />
          <PacketInfo time="2985875" offset="424200" length="1400" />
          <PacketInfo time="2985875" offset="425600" length="1400" />
          <PacketInfo time="2985875" offset="427000" length="1400" />
          <PacketInfo time="2985875" offset="428400" length="1400" />
          <PacketInfo time="2985875" offset="429800" length="1400" />
          <PacketInfo time="2985875" offset="431200" length="1400" />
          <PacketInfo time="2985875" offset="432600" length="1400" />
          <PacketInfo time="2985875" offset="434000" length="1400" />
          <PacketInfo time="2985875" offset="435400" length="1400" />
          <PacketInfo time="2985875" offset="436800" length="1400" />
          <PacketInfo time="2985875" offset="438200" length="1400" />
          <PacketInfo time="2985890" offset="439600" length="1400" />
          <PacketInfo time="2985890" offset="441000" length="1400" />
          <PacketInfo time="2985890" offset="442400" length="1400" />
          <PacketInfo time="2985890" offset="443800" length="1400" />
          <PacketInfo time="2985890" offset="445200" length="1400" />
          <PacketInfo time="2985890" offset="446600" length="1400" />
          <PacketInfo time="2985890" offset="448000" length="1400" />
          <PacketInfo time="2985890" offset="449400" length="1400" />
          <PacketInfo time="2985890" offset="450800" length="1400" />
          <PacketInfo time="2985890" offset="452200" length="1400" />
          <PacketInfo time="2985906" offset="453600" length="1400" />
          <PacketInfo time="2985906" offset="455000" length="1400" />
          <PacketInfo time="2985906" offset="456400" length="1400" />
          <PacketInfo time="2985906" offset="457800" length="1400" />
          <PacketInfo time="2985906" offset="459200" length="1400" />
          <PacketInfo time="2985906" offset="460600" length="1400" />
          <PacketInfo time="2985906" offset="462000" length="1400" />
          <PacketInfo time="2985906" offset="463400" length="1400" />
          <PacketInfo time="2985906" offset="464800" length="1400" />
          <PacketInfo time="2985906" offset="466200" length="1400" />
          <PacketInfo time="2985906" offset="467600" length="1400" />
          <PacketInfo time="2985906" offset="469000" length="1400" />
          <PacketInfo time="2985921" offset="470400" length="1400" />
          <PacketInfo time="2985921" offset="471800" length="1400" />
          <PacketInfo time="2985921" offset="473200" length="1400" />
          <PacketInfo time="2985921" offset="474600" length="249" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="856" hostname="cdn.jsdelivr.net" path="/npm/sockjs-client@1.3.0/dist/sockjs.min.js" url="https://cdn.jsdelivr.net/npm/sockjs-client@1.3.0/dist/sockjs.min.js" ip="59.80.38.227" port="443" connectionId="33" origin="HTML" frame="1" startTime="2989750" endTime="2989750">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2RuLmpzZGVsaXZyLm5ldA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24v</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZSwgYnI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9ucG0vc29ja2pzLWNsaWVudEAxLjMuMC9kaXN0L3NvY2tqcy5taW4uanMgSFRUUC8xLjENCkhvc3Q6IGNkbi5qc2RlbGl2ci5uZXQNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNTYuMC4yOTI0LjkwIFNhZmFyaS81MzcuMzYgMjM0NUV4cGxvcmVyLzkuNi4wLjE4NjI3DQpBY2NlcHQ6ICovKg0KUmVmZXJlcjogaHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24vDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQtTGFuZ3VhZ2U6IHpoLUNOLHpoO3E9MC44DQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Date" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAxMCBBcHIgMjAxOSAwOToyMTozMSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDsgY2hhcnNldD11dGYtOA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTg5NDM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Access-Control-Allow-Origin" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Access-Control-Expose-Headers" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Timing-Allow-Origin" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAwLCBzLW1heGFnZT0zMTUzNjAwMCwgaW1tdXRhYmxl</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Content-Type-Options" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bm9zbmlmZg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Strict-Transport-Security" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bWF4LWFnZT0zMTUzNjAwMDsgaW5jbHVkZVN1YkRvbWFpbnM7IHByZWxvYWQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="10">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Vy8iZjU0ZC02QlE0cDU2S2Z6UkNNV2pIQnBiUDhxZ2cyL0Ui</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="11">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="12">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Served-By" index="13">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2FjaGUtYW1zNDE1MC1BTVMsIGNhY2hlLWhrZzE3OTMwLUhLRw==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Age" index="14">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Via" index="15">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MS4xIFZNeGdISzZ0djQ0OjQgKENkbiBDYWNoZSBTZXJ2ZXIgVjIuMCksIDEuMSBQU2hubGh3dDJpbzE1MzozIChDZG4gQ2FjaGUgU2VydmVyIFYyLjApLCAxLjEgUFNnemd5d3Q1ZWwxNTk6NCAoQ2RuIENhY2hlIFNlcnZlciBWMi4wKQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpEYXRlOiBXZWQsIDEwIEFwciAyMDE5IDA5OjIxOjMxIEdNVA0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0OyBjaGFyc2V0PXV0Zi04DQpDb250ZW50LUxlbmd0aDogMTg5NDMNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbjogKg0KQWNjZXNzLUNvbnRyb2wtRXhwb3NlLUhlYWRlcnM6ICoNClRpbWluZy1BbGxvdy1PcmlnaW46ICoNCkNhY2hlLUNvbnRyb2w6IHB1YmxpYywgbWF4LWFnZT0zMTUzNjAwMCwgcy1tYXhhZ2U9MzE1MzYwMDAsIGltbXV0YWJsZQ0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMDsgaW5jbHVkZVN1YkRvbWFpbnM7IHByZWxvYWQNCkVUYWc6IFcvImY1NGQtNkJRNHA1NktmelJDTVdqSEJwYlA4cWdnMi9FIg0KQ29udGVudC1FbmNvZGluZzogZ3ppcA0KQWNjZXB0LVJhbmdlczogYnl0ZXMNClgtU2VydmVkLUJ5OiBjYWNoZS1hbXM0MTUwLUFNUywgY2FjaGUtaGtnMTc5MzAtSEtHDQpBZ2U6IDENClgtVmlhOiAxLjEgVk14Z0hLNnR2NDQ6NCAoQ2RuIENhY2hlIFNlcnZlciBWMi4wKSwgMS4xIFBTaG5saHd0MmlvMTUzOjMgKENkbiBDYWNoZSBTZXJ2ZXIgVjIuMCksIDEuMSBQU2d6Z3l3dDVlbDE1OTo0IChDZG4gQ2FjaGUgU2VydmVyIFYyLjApDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="2989750" offset="0" length="4127" />
          <PacketInfo time="2989750" offset="4127" length="8192" />
          <PacketInfo time="2989765" offset="12319" length="7339" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="860" hostname="www.2345.com" path="/day_data/20190410.js?ver=1.0" url="http://www.2345.com/day_data/20190410.js?ver=1.0" ip="60.222.224.141" port="80" connectionId="35" origin="HTML" frame="1" startTime="2989734" endTime="2989781">
      <QueryString>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>dmVyPTEuMA==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </QueryString>
      <HTTPSplittedQueryStrings>
        <HTTPHeaderEntity name="ver" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MS4w</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
      </HTTPSplittedQueryStrings>
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>d3d3LjIzNDUuY29t</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>c3RzPTE7IGxjMj01NzgxNjsgd2M9NTc4MTY7IHdjX249JTI1dThEMzUlMjV1OTYzMzsgYmRVaWQ9Q0JEREE1Qjg2OTU2OUZEQTZDMjYzNzUwQUJFMDsgSG1fbHZ0XzZhYjdhMzkxYzhkNjliNGY2MmI3YzU0YjJkNzA5MTljPTE1NTQ4ODc2MzksMTU1NDg4Nzg4MjsgbGM9NTc4MTY=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9kYXlfZGF0YS8yMDE5MDQxMC5qcz92ZXI9MS4wIEhUVFAvMS4xDQpIb3N0OiB3d3cuMjM0NS5jb20NCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNTYuMC4yOTI0LjkwIFNhZmFyaS81MzcuMzYgMjM0NUV4cGxvcmVyLzkuNi4wLjE4NjI3DQpBY2NlcHQ6ICovKg0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQtTGFuZ3VhZ2U6IHpoLUNOLHpoO3E9MC44DQpDb29raWU6IHN0cz0xOyBsYzI9NTc4MTY7IHdjPTU3ODE2OyB3Y19uPSUyNXU4RDM1JTI1dTk2MzM7IGJkVWlkPUNCRERBNUI4Njk1NjlGREE2QzI2Mzc1MEFCRTA7IEhtX2x2dF82YWI3YTM5MWM4ZDY5YjRmNjJiN2M1NGIyZDcwOTE5Yz0xNTU0ODg3NjM5LDE1NTQ4ODc4ODI7IGxjPTU3ODE2DQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="sts" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MQ==</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="lc2" index="1">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NTc4MTY=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="wc" index="2">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NTc4MTY=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="wc_n" index="3">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>JTI1dThEMzUlMjV1OTYzMw==</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="bdUid" index="4">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>Q0JEREE1Qjg2OTU2OUZEQTZDMjYzNzUwQUJFMA==</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="Hm_lvt_6ab7a391c8d69b4f62b7c54b2d70919c" index="5">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MTU1NDg4NzYzOSwxNTU0ODg3ODgy</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="lc" index="6">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NTc4MTY=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Last-Modified" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAwNyBOb3YgMjAxNCAxMDoyODo1MCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IjdlMy01MDc0MjQ3NWJmYzgwIg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9odG1sOyBjaGFyc2V0PWdiMjMxMg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTA4OA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAxMCBBcHIgMjAxOSAwOToyMTozMSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Age" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="10">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-hits" index="11">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KTGFzdC1Nb2RpZmllZDogRnJpLCAwNyBOb3YgMjAxNCAxMDoyODo1MCBHTVQNCkVUYWc6ICI3ZTMtNTA3NDI0NzViZmM4MCINCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkNvbnRlbnQtRW5jb2Rpbmc6IGd6aXANCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sOyBjaGFyc2V0PWdiMjMxMg0KQ29udGVudC1MZW5ndGg6IDEwODgNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpEYXRlOiBXZWQsIDEwIEFwciAyMDE5IDA5OjIxOjMxIEdNVA0KQWdlOiAwDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQp4LWhpdHM6IDANCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>PCFET0NUWVBFIEhUTUw+DQo8aHRtbD4NCjxoZWFkPg0KPG1ldGEgY2hhcnNldD0iZ2IyMzEyIj4NCjxtZXRhIGh0dHAtZXF1aXY9InJlZnJlc2giIGNvbnRlbnQ9IjM7VVJMPWh0dHA6Ly93d3cuMjM0NS5jb20iPg0KPHRpdGxlPrjDzfjSs87et6i3w87KPC90aXRsZT4NCjwvaGVhZD4NCg0KPGJvZHk+DQo8c3R5bGU+DQovKiByZXNldCAqLw0KYm9keXsgZm9udDoxNHB4LzEuNSBcU2ltU3VuLFRhaG9tYSxzYW5zLXNlcmlmO2JhY2tncm91bmQ6I2ZmZjt9DQpodG1sLGJvZHkscCxkbCxkdCxkZCx0YWJsZSx0ZCx0aCxpbnB1dCxpbWcsZm9ybSxkaXYsc3Bhbix1bCxvbCxsaSxoMSxoMixoMyxoNCxoNSxoNixzZWxlY3QsZmllbGRzZXQsZmllbGRzZXQsaW5wdXQsYnV0dG9uLHN1YixzdXAsdGV4dGFyZWF7bWFyZ2luOjA7cGFkZGluZzowOyB9DQp0YWJsZSB7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlOyBib3JkZXItc3BhY2luZzowO30NCmgxLGgyLGgzLGg0LGg1LGg2IHtmb250LXNpemU6MTAwJTt9DQppZnJhbWUsaW1neyBib3JkZXI6MCBub25lO30NCmltZ3sgdmVydGljYWwtYWxpZ246bWlkZGxlO30NCmVtLGl7Zm9udC1zdHlsZTogbm9ybWFsO30NCnVsLGxpLG9se2xpc3Qtc3R5bGU6bm9uZSBvdXRzaWRlIG5vbmU7fQ0KLmNsZWFyZml4OmFmdGVye2NvbnRlbnQ6Ii4iO2Rpc3BsYXk6YmxvY2s7aGVpZ2h0OjA7Y2xlYXI6Ym90aDt2aXNpYmlsaXR5OmhpZGRlbjt9DQouY2xlYXJmaXh7Knpvb206MTt9DQpheyB0ZXh0LWRlY29yYXRpb246bm9uZTt9DQphOmhvdmVyeyB0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lO2NvbG9yOiNmNjA7fQ0KOmZvY3VzIHsgb3V0bGluZTowO30NCi5jbGVhcnsgY2xlYXI6Ym90aDsgb3ZlcmZsb3c6aGlkZGVuOyBmb250LXNpemU6MDsgaGVpZ2h0OjA7bGluZS1oZWlnaHQ6MDt9DQovKiBtYWluICovDQoud3JhcHt3aWR0aDo5NDBweDttYXJnaW46MCBhdXRvO30NCi5nLW5vdGZvdW5ke21hcmdpbjoxNTBweCAwIDAgMjAwcHg7fQ0KLmctbm90Zm91bmQgLmctbm90Zm91bmQtY29udHtwYWRkaW5nOjQwcHggMCAzMnB4IDE4MHB4O2JhY2tncm91bmQ6dXJsKGh0dHA6Ly93d3cuMjM0NS5jb20vNDA0L2ltYWdlcy80MDRfMTEwNy5wbmcpIG5vLXJlcGVhdDt9DQouZy1ub3Rmb3VuZCAuZy1ub3Rmb3VuZC1idGl0e21hcmdpbjowIDAgMTVweDtmb250LWZhbWlseTpcNUZBRVw4RjZGXDk2QzVcOUVEMSxcOUVEMVw0RjUzLFw1QjhCXDRGNTM7Y29sb3I6Izc4YWVlMDtmb250LXNpemU6MjZweDt9DQouZy1ub3Rmb3VuZCAuZy1ub3Rmb3VuZC10aXBze2ZvbnQtc2l6ZToxNHB4O2NvbG9yOiNhM2EzYTM7fQ0KLmctbm90Zm91bmQgLmctbm90Zm91bmQtdGlwcyAudHJpZ3ttYXJnaW4tcmlnaHQ6NXB4O2NvbG9yOiMyMzcxYzg7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTtmb250LXdlaWdodDpib2xkO30NCi5nLW5vdGZvdW5kIC5nLW5vdGZvdW5kLXRpcHMgLnRyaWc6aG92ZXJ7Y29sb3I6I2ZmMzMwMDt9DQo8L3N0eWxlPg0KPGRpdiBjbGFzcz0id3JhcCI+DQoJPCEtLTQwNNKzIGJlZ2luLS0+DQoJPGRpdiBjbGFzcz0iZy1ub3Rmb3VuZCI+DQoJCTxkaXYgY2xhc3M9Imctbm90Zm91bmQtY29udCI+DQoJCQk8ZGl2IGNsYXNzPSJnLW5vdGZvdW5kLWJ0aXQiPtXiuPbSs8PmtPKyu7+qwcsuLi48L2Rpdj4NCgkJCTxkaXYgY2xhc3M9Imctbm90Zm91bmQtdGlwcyI+tMvSs7K7tObU2qOsteO0y7Smv8k8YSBjbGFzcz0idHJpZyIgaHJlZj0iaHR0cDovL3d3dy4yMzQ1LmNvbS8/NDA0XzEiPre1u9gyMzQ1ytfSszwvYT48YSBjbGFzcz0idHJpZyIgaHJlZj0iaHR0cDovL3d3dy4yMzQ1LmNvbS8/NDA0XzIiIG9uQ2xpY2s9InRoaXMuc3R5bGUuYmVoYXZpb3I9J3VybCgjZGVmYXVsdCNob21lcGFnZSknO3RoaXMuc2V0SG9tZVBhZ2UodGhpcy5ocmVmKTtyZXR1cm4oZmFsc2UpOyI+sNEyMzQ1yejOqtb30rM8L2E+PC9kaXY+DQoJCTwvZGl2Pg0KCTwvZGl2Pg0KCTwhLS00MDTSsyBlbmQtLT4NCjwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="2989781" offset="0" length="1421" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
  </HTTPTask>
  <HTTPTask id="434" hostname="guess.union2.50bang.org" path="/home.php/AdsApi_BrowserPlan-index?channel=cu1000178,cu1000176&amp;count=4" url="https://guess.union2.50bang.org/home.php/AdsApi_BrowserPlan-index?channel=cu1000178,cu1000176&amp;count=4" ip="101.71.94.249" port="443" connectionId="26" origin="ExtraRes" frame="1" startTime="2969296" endTime="2969375">
    <QueryString>
      <HTTPDataSet>
        <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
          <ActualData>Y2hhbm5lbD1jdTEwMDAxNzgsY3UxMDAwMTc2JmNvdW50PTQ=</ActualData>
        </HTTPData>
      </HTTPDataSet>
      <IsExternalData>false</IsExternalData>
    </QueryString>
    <HTTPSplittedQueryStrings>
      <HTTPHeaderEntity name="channel" index="0">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>Y3UxMDAwMTc4LGN1MTAwMDE3Ng==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
      <HTTPHeaderEntity name="count" index="1">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>NA==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
    </HTTPSplittedQueryStrings>
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Host" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3Vlc3MudW5pb24yLjUwYmFuZy5vcmc=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZSwgYnI=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dVVpZD1DQkREQTVCODY5NTY5RkRBNkMyNjM3NTBBQkUwOyB1aWRGbGFnPTE7IHhIVEw9MTsgeEhUVD0xNTU0ODg3NDY2</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIC9ob21lLnBocC9BZHNBcGlfQnJvd3NlclBsYW4taW5kZXg/Y2hhbm5lbD1jdTEwMDAxNzgsY3UxMDAwMTc2JmNvdW50PTQgSFRUUC8xLjENCkhvc3Q6IGd1ZXNzLnVuaW9uMi41MGJhbmcub3JnDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXT1c2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzU2LjAuMjkyNC45MCBTYWZhcmkvNTM3LjM2IDIzNDVFeHBsb3Jlci85LjYuMC4xODYyNw0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0LUxhbmd1YWdlOiB6aC1DTix6aDtxPTAuOA0KQ29va2llOiB1VWlkPUNCRERBNUI4Njk1NjlGREE2QzI2Mzc1MEFCRTA7IHVpZEZsYWc9MTsgeEhUTD0xOyB4SFRUPTE1NTQ4ODc0NjYNCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="uUid" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Q0JEREE1Qjg2OTU2OUZEQTZDMjYzNzUwQUJFMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="uidFlag" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="xHTL" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="xHTT" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTU1NDg4NzQ2Ng==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Date" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>V2VkLCAxMCBBcHIgMjAxOSAwOToyMToxMSBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDtjaGFyc2V0PXV0Zi04</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Transfer-Encoding" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Y2h1bmtlZA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Vary" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="access-control-allow-origin" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Kg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="P3P" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Q1A9Q1VSYSBBRE1hIERFVmEgUFNBbyBQU0RvIE9VUiBCVVMgVU5JIFBVUiBJTlQgREVNIFNUQSBQUkUgQ09NIE5BViBPVEMgTk9JIERTUCBDT1I=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-control" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bWF4LWFnZT0xMjA=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Encoding" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIE9LDQpEYXRlOiBXZWQsIDEwIEFwciAyMDE5IDA5OjIxOjExIEdNVA0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0O2NoYXJzZXQ9dXRmLTgNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCmFjY2Vzcy1jb250cm9sLWFsbG93LW9yaWdpbjogKg0KUDNQOiBDUD1DVVJhIEFETWEgREVWYSBQU0FvIFBTRG8gT1VSIEJVUyBVTkkgUFVSIElOVCBERU0gU1RBIFBSRSBDT00gTkFWIE9UQyBOT0kgRFNQIENPUg0KQ2FjaGUtY29udHJvbDogbWF4LWFnZT0xMjANCkNvbnRlbnQtRW5jb2Rpbmc6IGd6aXANCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>U2tRVkJGaEhBbGc3QVZRV2FFMVlRZ0lFRlY4NkdSSk5EMFVJVjBjUEVEaEVVZ0JUQ1drVUJWMVhBamhDREFSV0MyaENVMUZTQVdVVEJsMVJWR2xIVWdaV0FrTVZGdzFaQ2dnWFhoVlJRMFpERG10S1BVMUpGd1ZlQUZkTEJBVVFVQWdSQUZjYkFsOEpQeG9NUTFSYlVWeFFVamxPVUFrTFV3QktXaEZZWGtZZFJBRUdVRkZEQ2xkUUFGUUNEaHNRWDExWkRqNFBWQXhFQzBaUlhBY0hYQVFGVkFRT0JsQlVYVkZRVlZGY1VWTlhWZ0FEQjFWVUFRTUlVeEFZR1VsR1JROFNEVndYV3hJNEZnSUNBZ2hyUndkUkJ3UTlGd1VJVVZJNFIxMEZCZ2R0RTFCVVhBQTlSVk1HVVZjVkZSVmVXbHBjUjF0QVdFMFNRVjV1U21rZERrdElEUUJXVEFCZVYxVUFCMXRNVlJ4UVcxcEhUVUJYWGc5VlJnaFdCZ2RWQTFCS1ExVmNEMXM3RGxGUkZRTVZWZ29BQUFGUVcxRUFWMUFIQmxWVVZGVlFBd2NGWFZGVUIxTmJCbEFQV3dVUVRoaE1SeFVMUkZVREUxNFFPVUFHQWdOV09oUU1ERlVIUms4WENGNVhYQkFKRmw4UkZSSUtaVWx0UzB0TFZsMEFWRWhYVmsxVUQwY0ZEUnNIV0ZSckhWdEFXZ2tDRFZSY09oNVFBRlFBQ2twWkVnc05HeGxEVndNS1VVWU5DZ1FIQXdFQ1NVTU9XVmNOYmdsV1VCY0lSbGNGVmdKWUJsTlVWbG9IVmdBSkFGQUFWUUZVVlZaV1hBY0pVZ0lBQlFNQ0V4dEtHaHRCQ0VRSUJoZGVGUXNIQXdwb1FsTldVZ0JsRXdkUlVGVnBSMUVBVVFVOVRBMVJCQWRCR1VaYlVGbFpFUTRWRFJVV1FBTTZIamdkRDA4Y0Jsc1VGUlZTWDA5ZUFSZHBTeFVWRlZWVVhWTkhXMUVEREZjRlZSNUhXVnNLV2prTEJRd1hXeEpVVVF4U0FWMEJDd0ZTVlFNQ0FRSllCVlZTQmdNQ0ExVlVYMThGREFOVEJrWWVhRWdWU2tOVFIwRkVPZ01EUW1ZSFZSY1FYMjVKUmtVUEVnMWNGMXNTT0JZQ1ZGSmRhMGNLQVZKZFBSY0dDZ2NKT0VkZEJnZFViUk1BQndoVVBVVlFCUWRVYTB3Q0N3Y0RheEJVVVZRQk9rUlNBbFVFYmhFR1h3VlFaVUJYQjFRSEYwZ1ZWVjVjV0JZTlJ3a1dSRWxjYlV0dVNrd2NCMTRDQTA4SUFoVlJDaFJVQ2hsYVdGOXZHMThSREE1VFZnSlVPQjFYREFCUkFFZ09GVlJaUXh4R0JGSU5VeHNOQVFBQkIxQldUaEpWRDE4UGJRaFJCMFlMUkFWWUN3QlpCUWRSVUZNRUNGTUxBVkVHQXdRRVVWMEVCZ0pVVWxFS0FRaFJSQndWVGtORURSZFpBUlVERlc1R0F3Y0FCVDVGQUZOVVhHNFFBd0VGQ1RvVFdRb0FVV3dSQlZOVlZtVkNCVlVCQmprVVZsVUpCMjBSQjFRQ1VUaEVYbFpWV21rVUJsRUdBRGhDRGxKV0FCWWJSdzBMWGxKRUMwWmFFVUZDWG0xSk9rNVRUMDliQlF4TUJWa0tBUWRRV0VJSFR3RmZWRVFkUmxVQ1hGWkdDMVZWVkFnSFZ4eEdEMXdLWEdaYVZnWVdEVWNGV3dRT0FnQmRVMXdFVXdjRlZnY0hDRlFFVVFBSFVWRUFEZzhCQnd4VlYwTWZIRUpFUlExR0NWQVFYaE02RTFZSlVBVnNFVm9BQVE5bFFnUUFWUTg1RkZvRERGWnRFVlFEQkZNNFJGSUFVd2xwRkFWZFZ3SkdHeHRiVzExZkZWOURDa1JORmdzNEhUa2FTMHBTQ1FJRUZ3UldSQVVOUWdWWkYxUmRYbWdZRFJVUFhGb0pWUUZ1U2dFQVZRUmVTQWxOV0EwU1NFRlNBMTVkRlFnQUJ3SlZWRmNjR3dwWUNsazZXRlpSRTF4RUIxb0ZBbEZYVVZGV0Rnc0ZCUU1EVlZZQVZBRU5VbGNCVTEwREFnRUJWd0JEUkJrYUVoQUtRUWhTR3cwUWIwRUFWUVFHYkV4ZkJBRUtPVUFFVjFCZU9oUUJCbFFBT0JaVEFnWllCUUlDRFdzUVYxVUFDVHBFVWdjSEJXNFJCRmRSQW1WQVdRQlFBQmRJRlZWZVhGZ1dEVWNKRmtSSlhHMUxia3BmU0VwVERCUVNUVjRMSGdvR1FUZ1lHeHNRVkZOZUFVTllBd3BUQUZBRFNSZGVEVjhOT1F4ZEFFTUtSbE1IWFFFUFV3UUtCbEVIQndGVEN3ZFNBQVJSVXdWVkFBTmZXRjBBVndKU1FVZzVTZyUzRCUzRA==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="2969375" offset="0" length="1656" />
      </TcpPackets>
    </HTTPResponse>
  </HTTPTask>
  <HTTPTask id="461" hostname="union2.50bang.org" path="/web/ajax111?uId2=SPTNPQRLSX&amp;r=&amp;fBL=1920*1080&amp;lO=chrome%3A%2F%2Flocal-website-guide%2F%3F39532%26f%3Df2_B0_nt%26p%3Dx3" url="http://union2.50bang.org/web/ajax111?uId2=SPTNPQRLSX&amp;r=&amp;fBL=1920*1080&amp;lO=chrome%3A%2F%2Flocal-website-guide%2F%3F39532%26f%3Df2_B0_nt%26p%3Dx3" ip="42.62.12.134" port="80" connectionId="32" origin="ExtraRes" frame="1" startTime="2985093" endTime="2985156">
    <QueryString>
      <HTTPDataSet>
        <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
          <ActualData>dUlkMj1TUFROUFFSTFNYJnI9JmZCTD0xOTIwKjEwODAmbE89Y2hyb21lJTNBJTJGJTJGbG9jYWwtd2Vic2l0ZS1ndWlkZSUyRiUzRjM5NTMyJTI2ZiUzRGYyX0IwX250JTI2cCUzRHgz</ActualData>
        </HTTPData>
      </HTTPDataSet>
      <IsExternalData>false</IsExternalData>
    </QueryString>
    <HTTPSplittedQueryStrings>
      <HTTPHeaderEntity name="uId2" index="0">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>U1BUTlBRUkxTWA==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
      <HTTPHeaderEntity name="r" index="1">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData />
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
      <HTTPHeaderEntity name="fBL" index="2">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>MTkyMCoxMDgw</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
      <HTTPHeaderEntity name="lO" index="3">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>Y2hyb21lJTNBJTJGJTJGbG9jYWwtd2Vic2l0ZS1ndWlkZSUyRiUzRjM5NTMyJTI2ZiUzRGYyX0IwX250JTI2cCUzRHgz</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
    </HTTPSplittedQueryStrings>
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Host" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dW5pb24yLjUwYmFuZy5vcmc=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dVVpZD1DQkREQTVCODY5NTY5RkRBNkMyNjM3NTBBQkUwOyB1aWRGbGFnPTE=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIC93ZWIvYWpheDExMT91SWQyPVNQVE5QUVJMU1gmcj0mZkJMPTE5MjAqMTA4MCZsTz1jaHJvbWUlM0ElMkYlMkZsb2NhbC13ZWJzaXRlLWd1aWRlJTJGJTNGMzk1MzIlMjZmJTNEZjJfQjBfbnQlMjZwJTNEeDMgSFRUUC8xLjENCkhvc3Q6IHVuaW9uMi41MGJhbmcub3JnDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXT1c2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzU2LjAuMjkyNC45MCBTYWZhcmkvNTM3LjM2IDIzNDVFeHBsb3Jlci85LjYuMC4xODYyNw0KQWNjZXB0OiAqLyoNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0LUxhbmd1YWdlOiB6aC1DTix6aDtxPTAuOA0KQ29va2llOiB1VWlkPUNCRERBNUI4Njk1NjlGREE2QzI2Mzc1MEFCRTA7IHVpZEZsYWc9MQ0KDQo=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="uUid" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Q0JEREE1Qjg2OTU2OUZEQTZDMjYzNzUwQUJFMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="uidFlag" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Date" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>V2VkLCAxMCBBcHIgMjAxOSAwOToyMToyNiBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9wbGFpbjsgY2hhcnNldD11dGYtOA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-Control" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGUsIG11c3QtcmV2YWxpZGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Expires" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW9uLCAyNiBKdWwgMTk5NyAwNTowMDowMCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="P3p" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Q1A9IklEQyBEU1AgQ09SIEFETSBERVZpIFRBSWkgUFNBIFBTRCBJVkFpIElWRGkgQ09OaSBISVMgT1VSIElORCBDTlQi</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Set-Cookie" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dUhUTD0xOyBwYXRoPS93ZWIvYWpheDExMTsgZXhwaXJlcz1TdW4sMjItRmViLTIwOTkgMDA6MDA6MDAgR01U</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Set-Cookie" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dUhUVD0xNTU0ODg4MDg2OyBwYXRoPS93ZWIvYWpheDExMTsgZXhwaXJlcz1TdW4sMjItRmViLTIwOTkgMDA6MDA6MDAgR01U</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIE9LDQpEYXRlOiBXZWQsIDEwIEFwciAyMDE5IDA5OjIxOjI2IEdNVA0KQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluOyBjaGFyc2V0PXV0Zi04DQpDb250ZW50LUxlbmd0aDogMA0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG11c3QtcmV2YWxpZGF0ZQ0KRXhwaXJlczogTW9uLCAyNiBKdWwgMTk5NyAwNTowMDowMCBHTVQNClAzcDogQ1A9IklEQyBEU1AgQ09SIEFETSBERVZpIFRBSWkgUFNBIFBTRCBJVkFpIElWRGkgQ09OaSBISVMgT1VSIElORCBDTlQiDQpTZXQtQ29va2llOiB1SFRMPTE7IHBhdGg9L3dlYi9hamF4MTExOyBleHBpcmVzPVN1biwyMi1GZWItMjA5OSAwMDowMDowMCBHTVQNClNldC1Db29raWU6IHVIVFQ9MTU1NDg4ODA4NjsgcGF0aD0vd2ViL2FqYXgxMTE7IGV4cGlyZXM9U3VuLDIyLUZlYi0yMDk5IDAwOjAwOjAwIEdNVA0KDQo=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData />
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="2985156" offset="0" length="461" />
      </TcpPackets>
    </HTTPResponse>
  </HTTPTask>
</HTTPSnapshot>