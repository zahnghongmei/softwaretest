<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="47">
  <HTTPTask id="10217" hostname="name.ie.2345.com" path="/query.php" url="http://name.ie.2345.com/query.php" ip="117.121.132.246" port="80" connectionId="77" origin="Primary" frame="1" startTime="3124015" endTime="3124156">
    <HTTPRequest method="POST">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Host" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bmFtZS5pZS4yMzQ1LmNvbQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ODg=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVk</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>c3RzPTE7IGxjMj01NzgxNjsgd2M9NTc4MTY7IHdjX249JTI1dThEMzUlMjV1OTYzMzsgYmRVaWQ9Q0JEREE1Qjg2OTU2OUZEQTZDMjYzNzUwQUJFMDsgSG1fbHZ0XzZhYjdhMzkxYzhkNjliNGY2MmI3YzU0YjJkNzA5MTljPTE1NTQ4ODc2MzksMTU1NDg4Nzg4MjsgbGM9NTc4MTY=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>UE9TVCAvcXVlcnkucGhwIEhUVFAvMS4xDQpIb3N0OiBuYW1lLmllLjIzNDUuY29tDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpDb250ZW50LUxlbmd0aDogODgNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXT1c2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzU2LjAuMjkyNC45MCBTYWZhcmkvNTM3LjM2IDIzNDVFeHBsb3Jlci85LjYuMC4xODYyNw0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQtTGFuZ3VhZ2U6IHpoLUNOLHpoO3E9MC44DQpDb29raWU6IHN0cz0xOyBsYzI9NTc4MTY7IHdjPTU3ODE2OyB3Y19uPSUyNXU4RDM1JTI1dTk2MzM7IGJkVWlkPUNCRERBNUI4Njk1NjlGREE2QzI2Mzc1MEFCRTA7IEhtX2x2dF82YWI3YTM5MWM4ZDY5YjRmNjJiN2M1NGIyZDcwOTE5Yz0xNTU0ODg3NjM5LDE1NTQ4ODc4ODI7IGxjPTU3ODE2DQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="sts" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="lc2" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NTc4MTY=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="wc" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NTc4MTY=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="wc_n" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>JTI1dThEMzUlMjV1OTYzMw==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="bdUid" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Q0JEREE1Qjg2OTU2OUZEQTZDMjYzNzUwQUJFMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Hm_lvt_6ab7a391c8d69b4f62b7c54b2d70919c" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTU1NDg4NzYzOSwxNTU0ODg3ODgy</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="lc" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NTc4MTY=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>dXJsPWh0dHA6Ly9ndHgtYWRtaW4udC5kYWN1YmUuY24vJTIzL2hvbWUlM0Z0b2tlbiUzRGI3MjJmZjJkLWRmZmYtNGFhNS04MzYxLTUxYWY3YzNlZTViYw==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
    </HTTPRequest>
    <HTTPResponse>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Date" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>V2VkLCAxMCBBcHIgMjAxOSAwOToyMzo0NSBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9odG1sOyBjaGFyc2V0PVVURi04</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Transfer-Encoding" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Y2h1bmtlZA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Vary" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Access-Control-Allow-Origin" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Kg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Encoding" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIE9LDQpEYXRlOiBXZWQsIDEwIEFwciAyMDE5IDA5OjIzOjQ1IEdNVA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLTgNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbjogKg0KQ29udGVudC1FbmNvZGluZzogZ3ppcA0KDQo=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>eyJzdGF0dXMiOnRydWUsIm1zZyI6Ilx1NjIxMFx1NTI5ZiIsImluZm8iOnsidXJsIjoiaHR0cDpcL1wvZ3R4LWFkbWluLnQuZGFjdWJlLmNuXC8jXC9ob21lP3Rva2VuPWI3MjJmZjJkLWRmZmYtNGFhNS04MzYxLTUxYWY3YzNlZTViYyIsIndlYnNpdGVfdHlwZSI6Mywid2Vic2l0ZV9leHRlbmRlZF90eXBlIjoxLCJhbGlhc19uYW1lIjoiIiwibmVlZF9jYWNoZSI6dHJ1ZX19</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="3124156" offset="0" length="424" />
      </TcpPackets>
    </HTTPResponse>
    <HTTPTask id="10220" hostname="gtx-admin.t.dacube.cn" path="/static/js/vendor.5b65eff0df70bbb5def3.js" url="http://gtx-admin.t.dacube.cn/static/js/vendor.5b65eff0df70bbb5def3.js" ip="139.9.5.231" port="80" connectionId="80" origin="HTML" frame="1" startTime="3124000" endTime="3124171">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3R4LWFkbWluLnQuZGFjdWJlLmNu</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovL2d0eC1hZG1pbi50LmRhY3ViZS5jbi8=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zdGF0aWMvanMvdmVuZG9yLjViNjVlZmYwZGY3MGJiYjVkZWYzLmpzIEhUVFAvMS4xDQpIb3N0OiBndHgtYWRtaW4udC5kYWN1YmUuY24NCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNTYuMC4yOTI0LjkwIFNhZmFyaS81MzcuMzYgMjM0NUV4cGxvcmVyLzkuNi4wLjE4NjI3DQpBY2NlcHQ6ICovKg0KUmVmZXJlcjogaHR0cDovL2d0eC1hZG1pbi50LmRhY3ViZS5jbi8NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0LUxhbmd1YWdlOiB6aC1DTix6aDtxPTAuOA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Server" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bmdpbngvMS4xMi4y</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAxMCBBcHIgMjAxOSAwOToyMzo1OSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NjgzNjYw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxMSBNYXIgMjAxOSAwMzoyNzoxOSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IjVjODVkNTk3LWE2ZThjIg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IG5naW54LzEuMTIuMg0KRGF0ZTogV2VkLCAxMCBBcHIgMjAxOSAwOToyMzo1OSBHTVQNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KQ29udGVudC1MZW5ndGg6IDY4MzY2MA0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KTGFzdC1Nb2RpZmllZDogTW9uLCAxMSBNYXIgMjAxOSAwMzoyNzoxOSBHTVQNCkVUYWc6ICI1Yzg1ZDU5Ny1hNmU4YyINCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>d2VicGFja0pzb25wKFswXSx7IisrSzMiOmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG8scyxhLGwsdSxjLGQsZixoLHAsbSx2LGc9ITE7ZnVuY3Rpb24geSgpe2lmKCFnKXtnPSEwO3ZhciBlPW5hdmlnYXRvci51c2VyQWdlbnQsdD0vKD86TVNJRS4oXGQrXC5cZCspKXwoPzooPzpGaXJlZm94fEdyYW5QYXJhZGlzb3xJY2V3ZWFzZWwpLihcZCtcLlxkKykpfCg/Ok9wZXJhKD86LitWZXJzaW9uLnwuKShcZCtcLlxkKykpfCg/OkFwcGxlV2ViS2l0LihcZCsoPzpcLlxkKyk/KSl8KD86VHJpZGVudFwvXGQrXC5cZCsuKnJ2OihcZCtcLlxkKykpLy5leGVjKGUpLHk9LyhNYWMgT1MgWCl8KFdpbmRvd3MpfChMaW51eCkvLmV4ZWMoZSk7aWYoaD0vXGIoaVBob25lfGlQW2FvXWQpLy5leGVjKGUpLHA9L1xiKGlQW2FvXWQpLy5leGVjKGUpLGQ9L0FuZHJvaWQvaS5leGVjKGUpLG09L0ZCQU5cL1x3KzsvaS5leGVjKGUpLHY9L01vYmlsZS9pLmV4ZWMoZSksZj0hIS9XaW42NC8uZXhlYyhlKSx0KXsobj10WzFdP3BhcnNlRmxvYXQodFsxXSk6dFs1XT9wYXJzZUZsb2F0KHRbNV0pOk5hTikmJmRvY3VtZW50JiZkb2N1bWVudC5kb2N1bWVudE1vZGUmJihuPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIF89Lyg/OlRyaWRlbnRcLyhcZCsuXGQrKSkvLmV4ZWMoZSk7YT1fP3BhcnNlRmxvYXQoX1sxXSkrNDpuLHI9dFsyXT9wYXJzZUZsb2F0KHRbMl0pOk5hTixpPXRbM10/cGFyc2VGbG9hdCh0WzNdKTpOYU4sKG89dFs0XT9wYXJzZUZsb2F0KHRbNF0pOk5hTik/KHQ9Lyg/OkNocm9tZVwvKFxkK1wuXGQrKSkvLmV4ZWMoZSkscz10JiZ0WzFdP3BhcnNlRmxvYXQodFsxXSk6TmFOKTpzPU5hTn1lbHNlIG49cj1pPXM9bz1OYU47aWYoeSl7aWYoeVsxXSl7dmFyIGI9Lyg/Ok1hYyBPUyBYIChcZCsoPzpbLl9dXGQrKT8pKS8uZXhlYyhlKTtsPSFifHxwYXJzZUZsb2F0KGJbMV0ucmVwbGFjZSgiXyIsIi4iKSl9ZWxzZSBsPSExO3U9ISF5WzJdLGM9ISF5WzNdfWVsc2UgbD11PWM9ITF9fXZhciBfPXtpZTpmdW5jdGlvbigpe3JldHVybiB5KCl8fG59LGllQ29tcGF0aWJpbGl0eU1vZGU6ZnVuY3Rpb24oKXtyZXR1cm4geSgpfHxhPm59LGllNjQ6ZnVuY3Rpb24oKXtyZXR1cm4gXy5pZSgpJiZmfSxmaXJlZm94OmZ1bmN0aW9uKCl7cmV0dXJuIHkoKXx8cn0sb3BlcmE6ZnVuY3Rpb24oKXtyZXR1cm4geSgpfHxpfSx3ZWJraXQ6ZnVuY3Rpb24oKXtyZXR1cm4geSgpfHxvfSxzYWZhcmk6ZnVuY3Rpb24oKXtyZXR1cm4gXy53ZWJraXQoKX0sY2hyb21lOmZ1bmN0aW9uKCl7cmV0dXJuIHkoKXx8c30sd2luZG93czpmdW5jdGlvbigpe3JldHVybiB5KCl8fHV9LG9zeDpmdW5jdGlvbigpe3JldHVybiB5KCl8fGx9LGxpbnV4OmZ1bmN0aW9uKCl7cmV0dXJuIHkoKXx8Y30saXBob25lOmZ1bmN0aW9uKCl7cmV0dXJuIHkoKXx8aH0sbW9iaWxlOmZ1bmN0aW9uKCl7cmV0dXJuIHkoKXx8aHx8cHx8ZHx8dn0sbmF0aXZlQXBwOmZ1bmN0aW9uKCl7cmV0dXJuIHkoKXx8bX0sYW5kcm9pZDpmdW5jdGlvbigpe3JldHVybiB5KCl8fGR9LGlwYWQ6ZnVuY3Rpb24oKXtyZXR1cm4geSgpfHxwfX07ZS5leHBvcnRzPV99LCIrRTM5IjpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPSFuKCJTODJsIikoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCJhIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pfSwiK1REOCI6ZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiBuKHIpe2lmKHRbcl0pcmV0dXJuIHRbcl0uZXhwb3J0czt2YXIgaT10W3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtyXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyxuKSxpLmw9ITAsaS5leHBvcnRzfXJldHVybiBuLm09ZSxuLmM9dCxuLmQ9ZnVuY3Rpb24oZSx0LHIpe24ubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxuLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIG4uZCh0LCJhIix0KSx0fSxuLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LG4ucD0iL2Rpc3QvIixuKG4ucz0yMDkpfSh7MDpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbixyLGksbyl7dmFyIHMsYT1lPWV8fHt9LGw9dHlwZW9mIGUuZGVmYXVsdDsib2JqZWN0IiE9PWwmJiJmdW5jdGlvbiIhPT1sfHwocz1lLGE9ZS5kZWZhdWx0KTt2YXIgdSxjPSJmdW5jdGlvbiI9PXR5cGVvZiBhP2Eub3B0aW9uczphO2lmKHQmJihjLnJlbmRlcj10LnJlbmRlcixjLnN0YXRpY1JlbmRlckZucz10LnN0YXRpY1JlbmRlckZucyxjLl9jb21waWxlZD0hMCksbiYmKGMuZnVuY3Rpb25hbD0hMCksaSYmKGMuX3Njb3BlSWQ9aSksbz8odT1mdW5jdGlvbihlKXsoZT1lfHx0aGlzLiR2bm9kZSYmdGhpcy4kdm5vZGUuc3NyQ29udGV4dHx8dGhpcy5wYXJlbnQmJnRoaXMucGFyZW50LiR2bm9kZSYmdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpfHwidW5kZWZpbmVkIj09dHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX198fChlPV9fVlVFX1NTUl9DT05URVhUX18pLHImJnIuY2FsbCh0aGlzLGUpLGUmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobyl9LGMuX3NzclJlZ2lzdGVyPXUpOnImJih1PXIpLHUpe3ZhciBkPWMuZnVuY3Rpb25hbCxmPWQ/Yy5yZW5kZXI6Yy5iZWZvcmVDcmVhdGU7ZD8oYy5faW5qZWN0U3R5bGVzPXUsYy5yZW5kZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdS5jYWxsKHQpLGYoZSx0KX0pOmMuYmVmb3JlQ3JlYXRlPWY/W10uY29uY2F0KGYsdSk6W3VdfXJldHVybntlc01vZHVsZTpzLGV4cG9ydHM6YSxvcHRpb25zOmN9fX0sMTI6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigidXJXOCIpfSwxMzpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCI3SjlzIil9LDE1OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oIm10ckQiKX0sMjA6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiZlVxVyIpfSwyMDk6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHIsaT1uKDIxMCksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07dC5kZWZhdWx0PW8uZGVmYXVsdH0sMjEwOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwLHQuTWVzc2FnZUJveD12b2lkIDA7dmFyIHI9ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmInN5bWJvbCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIGV9LGk9bChuKDQpKSxvPWwobigyMTEpKSxzPWwobig5KSksYT1uKDIwKTtmdW5jdGlvbiBsKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgdT17dGl0bGU6bnVsbCxtZXNzYWdlOiIiLHR5cGU6IiIsaWNvbkNsYXNzOiIiLHNob3dJbnB1dDohMSxzaG93Q2xvc2U6ITAsbW9kYWxGYWRlOiEwLGxvY2tTY3JvbGw6ITAsY2xvc2VPbkNsaWNrTW9kYWw6ITAsY2xvc2VPblByZXNzRXNjYXBlOiEwLGNsb3NlT25IYXNoQ2hhbmdlOiEwLGlucHV0VmFsdWU6bnVsbCxpbnB1dFBsYWNlaG9sZGVyOiIiLGlucHV0VHlwZToidGV4dCIsaW5wdXRQYXR0ZXJuOm51bGwsaW5wdXRWYWxpZGF0b3I6bnVsbCxpbnB1dEVycm9yTWVzc2FnZToiIixzaG93Q29uZmlybUJ1dHRvbjohMCxzaG93Q2FuY2VsQnV0dG9uOiExLGNvbmZpcm1CdXR0b25Qb3NpdGlvbjoicmlnaHQiLGNvbmZpcm1CdXR0b25IaWdobGlnaHQ6ITEsY2FuY2VsQnV0dG9uSGlnaGxpZ2h0OiExLGNvbmZpcm1CdXR0b25UZXh0OiIiLGNhbmNlbEJ1dHRvblRleHQ6IiIsY29uZmlybUJ1dHRvbkNsYXNzOiIiLGNhbmNlbEJ1dHRvbkNsYXNzOiIiLGN1c3RvbUNsYXNzOiIiLGJlZm9yZUNsb3NlOm51bGwsZGFuZ2Vyb3VzbHlVc2VIVE1MU3RyaW5nOiExLGNlbnRlcjohMSxyb3VuZEJ1dHRvbjohMSxkaXN0aW5ndWlzaENhbmNlbEFuZENsb3NlOiExfSxjPWkuZGVmYXVsdC5leHRlbmQoby5kZWZhdWx0KSxkPXZvaWQgMCxmPXZvaWQgMCxoPVtdLHA9ZnVuY3Rpb24oZSl7aWYoZCl7dmFyIHQ9ZC5jYWxsYmFjazsiZnVuY3Rpb24iPT10eXBlb2YgdCYmKGYuc2hvd0lucHV0P3QoZi5pbnB1dFZhbHVlLGUpOnQoZSkpLGQucmVzb2x2ZSYmKCJjb25maXJtIj09PWU/Zi5zaG93SW5wdXQ/ZC5yZXNvbHZlKHt2YWx1ZTpmLmlucHV0VmFsdWUsYWN0aW9uOmV9KTpkLnJlc29sdmUoZSk6IWQucmVqZWN0fHwiY2FuY2VsIiE9PWUmJiJjbG9zZSIhPT1lfHxkLnJlamVjdChlKSl9fSxtPWZ1bmN0aW9uIGUoKXtmfHwoKGY9bmV3IGMoe2VsOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpfSkpLmNhbGxiYWNrPXApLGYuYWN0aW9uPSIiLGYudmlzaWJsZSYmIWYuY2xvc2VUaW1lcnx8aC5sZW5ndGg+MCYmZnVuY3Rpb24oKXt2YXIgdD0oZD1oLnNoaWZ0KCkpLm9wdGlvbnM7Zm9yKHZhciBuIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShuKSYmKGZbbl09dFtuXSk7dm9pZCAwPT09dC5jYWxsYmFjayYmKGYuY2FsbGJhY2s9cCk7dmFyIHI9Zi5jYWxsYmFjaztmLmNhbGxiYWNrPWZ1bmN0aW9uKHQsbil7cih0LG4pLGUoKX0sKDAsYS5pc1ZOb2RlKShmLm1lc3NhZ2UpPyhmLiRzbG90cy5kZWZhdWx0PVtmLm1lc3NhZ2VdLGYubWVzc2FnZT1udWxsKTpkZWxldGUgZi4kc2xvdHMuZGVmYXVsdCxbIm1vZGFsIiwic2hvd0Nsb3NlIiwiY2xvc2VPbkNsaWNrTW9kYWwiLCJjbG9zZU9uUHJlc3NFc2NhcGUiLCJjbG9zZU9uSGFzaENoYW5nZSJdLmZvckVhY2goZnVuY3Rpb24oZSl7dm9pZCAwPT09ZltlXSYmKGZbZV09ITApfSksZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmLiRlbCksaS5kZWZhdWx0Lm5leHRUaWNrKGZ1bmN0aW9uKCl7Zi52aXNpYmxlPSEwfSl9KCl9LHY9ZnVuY3Rpb24gZSh0LG4pe2lmKCFpLmRlZmF1bHQucHJvdG90eXBlLiRpc1NlcnZlcil7aWYoInN0cmluZyI9PXR5cGVvZiB0fHwoMCxhLmlzVk5vZGUpKHQpPyh0PXttZXNzYWdlOnR9LCJzdHJpbmciPT10eXBlb2YgYXJndW1lbnRzWzFdJiYodC50aXRsZT1hcmd1bWVudHNbMV0pKTp0LmNhbGxiYWNrJiYhbiYmKG49dC5jYWxsYmFjayksInVuZGVmaW5lZCIhPXR5cGVvZiBQcm9taXNlKXJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyLGkpe2gucHVzaCh7b3B0aW9uczooMCxzLmRlZmF1bHQpKHt9LHUsZS5kZWZhdWx0cyx0KSxjYWxsYmFjazpuLHJlc29sdmU6cixyZWplY3Q6aX0pLG0oKX0pO2gucHVzaCh7b3B0aW9uczooMCxzLmRlZmF1bHQpKHt9LHUsZS5kZWZhdWx0cyx0KSxjYWxsYmFjazpufSksbSgpfX07di5zZXREZWZhdWx0cz1mdW5jdGlvbihlKXt2LmRlZmF1bHRzPWV9LHYuYWxlcnQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiJvYmplY3QiPT09KHZvaWQgMD09PXQ/InVuZGVmaW5lZCI6cih0KSk/KG49dCx0PSIiKTp2b2lkIDA9PT10JiYodD0iIiksdigoMCxzLmRlZmF1bHQpKHt0aXRsZTp0LG1lc3NhZ2U6ZSwkdHlwZToiYWxlcnQiLGNsb3NlT25QcmVzc0VzY2FwZTohMSxjbG9zZU9uQ2xpY2tNb2RhbDohMX0sbikpfSx2LmNvbmZpcm09ZnVuY3Rpb24oZSx0LG4pe3JldHVybiJvYmplY3QiPT09KHZvaWQgMD09PXQ/InVuZGVmaW5lZCI6cih0KSk/KG49dCx0PSIiKTp2b2lkIDA9PT10JiYodD0iIiksdigoMCxzLmRlZmF1bHQpKHt0aXRsZTp0LG1lc3NhZ2U6ZSwkdHlwZToiY29uZmlybSIsc2hvd0NhbmNlbEJ1dHRvbjohMH0sbikpfSx2LnByb21wdD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIm9iamVjdCI9PT0odm9pZCAwPT09dD8idW5kZWZpbmVkIjpyKHQpKT8obj10LHQ9IiIpOnZvaWQgMD09PXQmJih0PSIiKSx2KCgwLHMuZGVmYXVsdCkoe3RpdGxlOnQsbWVzc2FnZTplLHNob3dDYW5jZWxCdXR0b246ITAsc2hvd0lucHV0OiEwLCR0eXBlOiJwcm9tcHQifSxuKSl9LHYuY2xvc2U9ZnVuY3Rpb24oKXtmLmRvQ2xvc2UoKSxmLnZpc2libGU9ITEsaD1bXSxkPW51bGx9LHQuZGVmYXVsdD12LHQuTWVzc2FnZUJveD12fSwyMTE6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigyMTIpLGk9bi5uKHIpLG89bigyMTQpLHM9bigwKShpLmEsby5hLCExLG51bGwsbnVsbCxudWxsKTt0LmRlZmF1bHQ9cy5leHBvcnRzfSwyMTI6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9YyhuKDEzKSksaT1jKG4oNSkpLG89YyhuKDYpKSxzPWMobigxNSkpLGE9bigzKSxsPW4oMTIpLHU9YyhuKDIxMykpO2Z1bmN0aW9uIGMoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBkPXZvaWQgMCxmPXtzdWNjZXNzOiJzdWNjZXNzIixpbmZvOiJpbmZvIix3YXJuaW5nOiJ3YXJuaW5nIixlcnJvcjoiZXJyb3IifTt0LmRlZmF1bHQ9e21peGluczpbci5kZWZhdWx0LGkuZGVmYXVsdF0scHJvcHM6e21vZGFsOntkZWZhdWx0OiEwfSxsb2NrU2Nyb2xsOntkZWZhdWx0OiEwfSxzaG93Q2xvc2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjbG9zZU9uQ2xpY2tNb2RhbDp7ZGVmYXVsdDohMH0sY2xvc2VPblByZXNzRXNjYXBlOntkZWZhdWx0OiEwfSxjbG9zZU9uSGFzaENoYW5nZTp7ZGVmYXVsdDohMH0sY2VudGVyOntkZWZhdWx0OiExLHR5cGU6Qm9vbGVhbn0scm91bmRCdXR0b246e2RlZmF1bHQ6ITEsdHlwZTpCb29sZWFufX0sY29tcG9uZW50czp7RWxJbnB1dDpvLmRlZmF1bHQsRWxCdXR0b246cy5kZWZhdWx0fSxjb21wdXRlZDp7aWNvbjpmdW5jdGlvbigpe3ZhciBlPXRoaXMudHlwZTtyZXR1cm4gdGhpcy5pY29uQ2xhc3N8fChlJiZmW2VdPyJlbC1pY29uLSIrZltlXToiIil9LGNvbmZpcm1CdXR0b25DbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJuImVsLWJ1dHRvbi0tcHJpbWFyeSAiK3RoaXMuY29uZmlybUJ1dHRvbkNsYXNzfSxjYW5jZWxCdXR0b25DbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJuIiIrdGhpcy5jYW5jZWxCdXR0b25DbGFzc319LG1ldGhvZHM6e2dldFNhZmVDbG9zZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLnVpZDtyZXR1cm4gZnVuY3Rpb24oKXtlLiRuZXh0VGljayhmdW5jdGlvbigpe3Q9PT1lLnVpZCYmZS5kb0Nsb3NlKCl9KX19LGRvQ2xvc2U6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMudmlzaWJsZSYmKHRoaXMudmlzaWJsZT0hMSx0aGlzLl9jbG9zaW5nPSEwLHRoaXMub25DbG9zZSYmdGhpcy5vbkNsb3NlKCksZC5jbG9zZURpYWxvZygpLHRoaXMubG9ja1Njcm9sbCYmc2V0VGltZW91dCh0aGlzLnJlc3RvcmVCb2R5U3R5bGUsMjAwKSx0aGlzLm9wZW5lZD0hMSx0aGlzLmRvQWZ0ZXJDbG9zZSgpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlLmFjdGlvbiYmZS5jYWxsYmFjayhlLmFjdGlvbixlKX0pKX0saGFuZGxlV3JhcHBlckNsaWNrOmZ1bmN0aW9uKCl7dGhpcy5jbG9zZU9uQ2xpY2tNb2RhbCYmdGhpcy5oYW5kbGVBY3Rpb24odGhpcy5kaXN0aW5ndWlzaENhbmNlbEFuZENsb3NlPyJjbG9zZSI6ImNhbmNlbCIpfSxoYW5kbGVJbnB1dEVudGVyOmZ1bmN0aW9uKCl7aWYoInRleHRhcmVhIiE9PXRoaXMuaW5wdXRUeXBlKXJldHVybiB0aGlzLmhhbmRsZUFjdGlvbigiY29uZmlybSIpfSxoYW5kbGVBY3Rpb246ZnVuY3Rpb24oZSl7KCJwcm9tcHQiIT09dGhpcy4kdHlwZXx8ImNvbmZpcm0iIT09ZXx8dGhpcy52YWxpZGF0ZSgpKSYmKHRoaXMuYWN0aW9uPWUsImZ1bmN0aW9uIj09dHlwZW9mIHRoaXMuYmVmb3JlQ2xvc2U/KHRoaXMuY2xvc2U9dGhpcy5nZXRTYWZlQ2xvc2UoKSx0aGlzLmJlZm9yZUNsb3NlKGUsdGhpcyx0aGlzLmNsb3NlKSk6dGhpcy5kb0Nsb3NlKCkpfSx2YWxpZGF0ZTpmdW5jdGlvbigpe2lmKCJwcm9tcHQiPT09dGhpcy4kdHlwZSl7dmFyIGU9dGhpcy5pbnB1dFBhdHRlcm47aWYoZSYmIWUudGVzdCh0aGlzLmlucHV0VmFsdWV8fCIiKSlyZXR1cm4gdGhpcy5lZGl0b3JFcnJvck1lc3NhZ2U9dGhpcy5pbnB1dEVycm9yTWVzc2FnZXx8KDAsbC50KSgiZWwubWVzc2FnZWJveC5lcnJvciIpLCgwLGEuYWRkQ2xhc3MpKHRoaXMuZ2V0SW5wdXRFbGVtZW50KCksImludmFsaWQiKSwhMTt2YXIgdD10aGlzLmlucHV0VmFsaWRhdG9yO2lmKCJmdW5jdGlvbiI9PXR5cGVvZiB0KXt2YXIgbj10KHRoaXMuaW5wdXRWYWx1ZSk7aWYoITE9PT1uKXJldHVybiB0aGlzLmVkaXRvckVycm9yTWVzc2FnZT10aGlzLmlucHV0RXJyb3JNZXNzYWdlfHwoMCxsLnQpKCJlbC5tZXNzYWdlYm94LmVycm9yIiksKDAsYS5hZGRDbGFzcykodGhpcy5nZXRJbnB1dEVsZW1lbnQoKSwiaW52YWxpZCIpLCExO2lmKCJzdHJpbmciPT10eXBlb2YgbilyZXR1cm4gdGhpcy5lZGl0b3JFcnJvck1lc3NhZ2U9biwoMCxhLmFkZENsYXNzKSh0aGlzLmdldElucHV0RWxlbWVudCgpLCJpbnZhbGlkIiksITF9fXJldHVybiB0aGlzLmVkaXRvckVycm9yTWVzc2FnZT0iIiwoMCxhLnJlbW92ZUNsYXNzKSh0aGlzLmdldElucHV0RWxlbWVudCgpLCJpbnZhbGlkIiksITB9LGdldEZpcnN0Rm9jdXM6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRlbC5xdWVyeVNlbGVjdG9yKCIuZWwtbWVzc2FnZS1ib3hfX2J0bnMgLmVsLWJ1dHRvbiIpLHQ9dGhpcy4kZWwucXVlcnlTZWxlY3RvcigiLmVsLW1lc3NhZ2UtYm94X19idG5zIC5lbC1tZXNzYWdlLWJveF9fdGl0bGUiKTtyZXR1cm4gZXx8dH0sZ2V0SW5wdXRFbGVtZW50OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kcmVmcy5pbnB1dC4kcmVmcztyZXR1cm4gZS5pbnB1dHx8ZS50ZXh0YXJlYX19LHdhdGNoOntpbnB1dFZhbHVlOntpbW1lZGlhdGU6ITAsaGFuZGxlcjpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKG4peyJwcm9tcHQiPT09dC4kdHlwZSYmbnVsbCE9PWUmJnQudmFsaWRhdGUoKX0pfX0sdmlzaWJsZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2UmJih0aGlzLnVpZCsrLCJhbGVydCIhPT10aGlzLiR0eXBlJiYiY29uZmlybSIhPT10aGlzLiR0eXBlfHx0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3QuJHJlZnMuY29uZmlybS4kZWwuZm9jdXMoKX0pLHRoaXMuZm9jdXNBZnRlckNsb3NlZD1kb2N1bWVudC5hY3RpdmVFbGVtZW50LGQ9bmV3IHUuZGVmYXVsdCh0aGlzLiRlbCx0aGlzLmZvY3VzQWZ0ZXJDbG9zZWQsdGhpcy5nZXRGaXJzdEZvY3VzKCkpKSwicHJvbXB0Ij09PXRoaXMuJHR5cGUmJihlP3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0LiRyZWZzLmlucHV0JiZ0LiRyZWZzLmlucHV0LiRlbCYmdC5nZXRJbnB1dEVsZW1lbnQoKS5mb2N1cygpfSw1MDApOih0aGlzLmVkaXRvckVycm9yTWVzc2FnZT0iIiwoMCxhLnJlbW92ZUNsYXNzKSh0aGlzLmdldElucHV0RWxlbWVudCgpLCJpbnZhbGlkIikpKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7ZS5jbG9zZU9uSGFzaENoYW5nZSYmd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoImhhc2hjaGFuZ2UiLGUuY2xvc2UpfSl9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLmNsb3NlT25IYXNoQ2hhbmdlJiZ3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigiaGFzaGNoYW5nZSIsdGhpcy5jbG9zZSksc2V0VGltZW91dChmdW5jdGlvbigpe2QuY2xvc2VEaWFsb2coKX0pfSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3VpZDoxLHRpdGxlOnZvaWQgMCxtZXNzYWdlOiIiLHR5cGU6IiIsaWNvbkNsYXNzOiIiLGN1c3RvbUNsYXNzOiIiLHNob3dJbnB1dDohMSxpbnB1dFZhbHVlOm51bGwsaW5wdXRQbGFjZWhvbGRlcjoiIixpbnB1dFR5cGU6InRleHQiLGlucHV0UGF0dGVybjpudWxsLGlucHV0VmFsaWRhdG9yOm51bGwsaW5wdXRFcnJvck1lc3NhZ2U6IiIsc2hvd0NvbmZpcm1CdXR0b246ITAsc2hvd0NhbmNlbEJ1dHRvbjohMSxhY3Rpb246IiIsY29uZmlybUJ1dHRvblRleHQ6IiIsY2FuY2VsQnV0dG9uVGV4dDoiIixjb25maXJtQnV0dG9uTG9hZGluZzohMSxjYW5jZWxCdXR0b25Mb2FkaW5nOiExLGNvbmZpcm1CdXR0b25DbGFzczoiIixjb25maXJtQnV0dG9uRGlzYWJsZWQ6ITEsY2FuY2VsQnV0dG9uQ2xhc3M6IiIsZWRpdG9yRXJyb3JNZXNzYWdlOm51bGwsY2FsbGJhY2s6bnVsbCxkYW5nZXJvdXNseVVzZUhUTUxTdHJpbmc6ITEsZm9jdXNBZnRlckNsb3NlZDpudWxsLGlzT25Db21wb3NpdGlvbjohMSxkaXN0aW5ndWlzaENhbmNlbEFuZENsb3NlOiExfX19fSwyMTM6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiRFFKWSIpfSwyMTQ6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKCJ0cmFuc2l0aW9uIix7YXR0cnM6e25hbWU6Im1zZ2JveC1mYWRlIn19LFtuKCJkaXYiLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTplLnZpc2libGUsZXhwcmVzc2lvbjoidmlzaWJsZSJ9XSxzdGF0aWNDbGFzczoiZWwtbWVzc2FnZS1ib3hfX3dyYXBwZXIiLGF0dHJzOnt0YWJpbmRleDoiLTEiLHJvbGU6ImRpYWxvZyIsImFyaWEtbW9kYWwiOiJ0cnVlIiwiYXJpYS1sYWJlbCI6ZS50aXRsZXx8ImRpYWxvZyJ9LG9uOntjbGljazpmdW5jdGlvbih0KXtpZih0LnRhcmdldCE9PXQuY3VycmVudFRhcmdldClyZXR1cm4gbnVsbDtlLmhhbmRsZVdyYXBwZXJDbGljayh0KX19fSxbbigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLW1lc3NhZ2UtYm94IixjbGFzczpbZS5jdXN0b21DbGFzcyxlLmNlbnRlciYmImVsLW1lc3NhZ2UtYm94LS1jZW50ZXIiXX0sW251bGwhPT1lLnRpdGxlP24oImRpdiIse3N0YXRpY0NsYXNzOiJlbC1tZXNzYWdlLWJveF9faGVhZGVyIn0sW24oImRpdiIse3N0YXRpY0NsYXNzOiJlbC1tZXNzYWdlLWJveF9fdGl0bGUifSxbZS5pY29uJiZlLmNlbnRlcj9uKCJkaXYiLHtjbGFzczpbImVsLW1lc3NhZ2UtYm94X19zdGF0dXMiLGUuaWNvbl19KTplLl9lKCksbigic3BhbiIsW2UuX3YoZS5fcyhlLnRpdGxlKSldKV0pLGUuc2hvd0Nsb3NlP24oImJ1dHRvbiIse3N0YXRpY0NsYXNzOiJlbC1tZXNzYWdlLWJveF9faGVhZGVyYnRuIixhdHRyczp7dHlwZToiYnV0dG9uIiwiYXJpYS1sYWJlbCI6IkNsb3NlIn0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuaGFuZGxlQWN0aW9uKGUuZGlzdGluZ3Vpc2hDYW5jZWxBbmRDbG9zZT8iY2xvc2UiOiJjYW5jZWwiKX0sa2V5ZG93bjpmdW5jdGlvbih0KXtpZighKCJidXR0b24iaW4gdCkmJmUuX2sodC5rZXlDb2RlLCJlbnRlciIsMTMsdC5rZXkpKXJldHVybiBudWxsO2UuaGFuZGxlQWN0aW9uKGUuZGlzdGluZ3Vpc2hDYW5jZWxBbmRDbG9zZT8iY2xvc2UiOiJjYW5jZWwiKX19fSxbbigiaSIse3N0YXRpY0NsYXNzOiJlbC1tZXNzYWdlLWJveF9fY2xvc2UgZWwtaWNvbi1jbG9zZSJ9KV0pOmUuX2UoKV0pOmUuX2UoKSxuKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtbWVzc2FnZS1ib3hfX2NvbnRlbnQifSxbZS5pY29uJiYhZS5jZW50ZXImJiIiIT09ZS5tZXNzYWdlP24oImRpdiIse2NsYXNzOlsiZWwtbWVzc2FnZS1ib3hfX3N0YXR1cyIsZS5pY29uXX0pOmUuX2UoKSwiIiE9PWUubWVzc2FnZT9uKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtbWVzc2FnZS1ib3hfX21lc3NhZ2UifSxbZS5fdCgiZGVmYXVsdCIsW2UuZGFuZ2Vyb3VzbHlVc2VIVE1MU3RyaW5nP24oInAiLHtkb21Qcm9wczp7aW5uZXJIVE1MOmUuX3MoZS5tZXNzYWdlKX19KTpuKCJwIixbZS5fdihlLl9zKGUubWVzc2FnZSkpXSldKV0sMik6ZS5fZSgpLG4oImRpdiIse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOmUuc2hvd0lucHV0LGV4cHJlc3Npb246InNob3dJbnB1dCJ9XSxzdGF0aWNDbGFzczoiZWwtbWVzc2FnZS1ib3hfX2lucHV0In0sW24oImVsLWlucHV0Iix7cmVmOiJpbnB1dCIsYXR0cnM6e3R5cGU6ZS5pbnB1dFR5cGUscGxhY2Vob2xkZXI6ZS5pbnB1dFBsYWNlaG9sZGVyfSxuYXRpdmVPbjp7a2V5ZG93bjpmdW5jdGlvbih0KXtpZighKCJidXR0b24iaW4gdCkmJmUuX2sodC5rZXlDb2RlLCJlbnRlciIsMTMsdC5rZXkpKXJldHVybiBudWxsO2UuaGFuZGxlSW5wdXRFbnRlcih0KX19LG1vZGVsOnt2YWx1ZTplLmlucHV0VmFsdWUsY2FsbGJhY2s6ZnVuY3Rpb24odCl7ZS5pbnB1dFZhbHVlPXR9LGV4cHJlc3Npb246ImlucHV0VmFsdWUifX0pLG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC1tZXNzYWdlLWJveF9fZXJyb3Jtc2ciLHN0eWxlOnt2aXNpYmlsaXR5OmUuZWRpdG9yRXJyb3JNZXNzYWdlPyJ2aXNpYmxlIjoiaGlkZGVuIn19LFtlLl92KGUuX3MoZS5lZGl0b3JFcnJvck1lc3NhZ2UpKV0pXSwxKV0pLG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC1tZXNzYWdlLWJveF9fYnRucyJ9LFtlLnNob3dDYW5jZWxCdXR0b24/bigiZWwtYnV0dG9uIix7Y2xhc3M6W2UuY2FuY2VsQnV0dG9uQ2xhc3Nlc10sYXR0cnM6e2xvYWRpbmc6ZS5jYW5jZWxCdXR0b25Mb2FkaW5nLHJvdW5kOmUucm91bmRCdXR0b24sc2l6ZToic21hbGwifSxvbjp7a2V5ZG93bjpmdW5jdGlvbih0KXtpZighKCJidXR0b24iaW4gdCkmJmUuX2sodC5rZXlDb2RlLCJlbnRlciIsMTMsdC5rZXkpKXJldHVybiBudWxsO2UuaGFuZGxlQWN0aW9uKCJjYW5jZWwiKX19LG5hdGl2ZU9uOntjbGljazpmdW5jdGlvbih0KXtlLmhhbmRsZUFjdGlvbigiY2FuY2VsIil9fX0sW2UuX3YoIlxuICAgICAgICAgICIrZS5fcyhlLmNhbmNlbEJ1dHRvblRleHR8fGUudCgiZWwubWVzc2FnZWJveC5jYW5jZWwiKSkrIlxuICAgICAgICAiKV0pOmUuX2UoKSxuKCJlbC1idXR0b24iLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTplLnNob3dDb25maXJtQnV0dG9uLGV4cHJlc3Npb246InNob3dDb25maXJtQnV0dG9uIn1dLHJlZjoiY29uZmlybSIsY2xhc3M6W2UuY29uZmlybUJ1dHRvbkNsYXNzZXNdLGF0dHJzOntsb2FkaW5nOmUuY29uZmlybUJ1dHRvbkxvYWRpbmcscm91bmQ6ZS5yb3VuZEJ1dHRvbixzaXplOiJzbWFsbCJ9LG9uOntrZXlkb3duOmZ1bmN0aW9uKHQpe2lmKCEoImJ1dHRvbiJpbiB0KSYmZS5fayh0LmtleUNvZGUsImVudGVyIiwxMyx0LmtleSkpcmV0dXJuIG51bGw7ZS5oYW5kbGVBY3Rpb24oImNvbmZpcm0iKX19LG5hdGl2ZU9uOntjbGljazpmdW5jdGlvbih0KXtlLmhhbmRsZUFjdGlvbigiY29uZmlybSIpfX19LFtlLl92KCJcbiAgICAgICAgICAiK2UuX3MoZS5jb25maXJtQnV0dG9uVGV4dHx8ZS50KCJlbC5tZXNzYWdlYm94LmNvbmZpcm0iKSkrIlxuICAgICAgICAiKV0pXSwxKV0pXSldKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn0sMzpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCIya3ZBIil9LDQ6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiNyt1VyIpfSw1OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oInkrN3giKX0sNjpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJISk14Iil9LDk6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiam1hQyIpfX0pfSwiK1pNSiI6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oImxPbkoiKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4pe2lmKHIoZSksdm9pZCAwPT09dClyZXR1cm4gZTtzd2l0Y2gobil7Y2FzZSAxOnJldHVybiBmdW5jdGlvbihuKXtyZXR1cm4gZS5jYWxsKHQsbil9O2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24obixyKXtyZXR1cm4gZS5jYWxsKHQsbixyKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihuLHIsaSl7cmV0dXJuIGUuY2FsbCh0LG4scixpKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUuYXBwbHkodCxhcmd1bWVudHMpfX19LCIrdFBVIjpmdW5jdGlvbihlLHQsbil7bigieEdrbiIpO2Zvcih2YXIgcj1uKCI3S3ZEIiksaT1uKCJoSng4Iiksbz1uKCIvYlFwIikscz1uKCJkU3pkIikoInRvU3RyaW5nVGFnIiksYT0iQ1NTUnVsZUxpc3QsQ1NTU3R5bGVEZWNsYXJhdGlvbixDU1NWYWx1ZUxpc3QsQ2xpZW50UmVjdExpc3QsRE9NUmVjdExpc3QsRE9NU3RyaW5nTGlzdCxET01Ub2tlbkxpc3QsRGF0YVRyYW5zZmVySXRlbUxpc3QsRmlsZUxpc3QsSFRNTEFsbENvbGxlY3Rpb24sSFRNTENvbGxlY3Rpb24sSFRNTEZvcm1FbGVtZW50LEhUTUxTZWxlY3RFbGVtZW50LE1lZGlhTGlzdCxNaW1lVHlwZUFycmF5LE5hbWVkTm9kZU1hcCxOb2RlTGlzdCxQYWludFJlcXVlc3RMaXN0LFBsdWdpbixQbHVnaW5BcnJheSxTVkdMZW5ndGhMaXN0LFNWR051bWJlckxpc3QsU1ZHUGF0aFNlZ0xpc3QsU1ZHUG9pbnRMaXN0LFNWR1N0cmluZ0xpc3QsU1ZHVHJhbnNmb3JtTGlzdCxTb3VyY2VCdWZmZXJMaXN0LFN0eWxlU2hlZXRMaXN0LFRleHRUcmFja0N1ZUxpc3QsVGV4dFRyYWNrTGlzdCxUb3VjaExpc3QiLnNwbGl0KCIsIiksbD0wO2w8YS5sZW5ndGg7bCsrKXt2YXIgdT1hW2xdLGM9clt1XSxkPWMmJmMucHJvdG90eXBlO2QmJiFkW3NdJiZpKGQscyx1KSxvW3VdPW8uQXJyYXl9fSwiLy9GayI6ZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz17ZGVmYXVsdDpuKCJVNWp1IiksX19lc01vZHVsZTohMH19LCIvYlFwIjpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz17fX0sIi9uNlEiOmZ1bmN0aW9uKGUsdCxuKXtuKCJ6UVI5IiksbigiK3RQVSIpLGUuZXhwb3J0cz1uKCJLaDRXIikuZigiaXRlcmF0b3IiKX0sIi9vY3EiOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7Ci8qIQogICogdnVlLXJvdXRlciB2My4wLjIKICAqIChjKSAyMDE4IEV2YW4gWW91CiAgKiBAbGljZW5zZSBNSVQKICAqL2Z1bmN0aW9uIHIoZSx0KXswfWZ1bmN0aW9uIGkoZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5pbmRleE9mKCJFcnJvciIpPi0xfWZ1bmN0aW9uIG8oZSx0KXtmb3IodmFyIG4gaW4gdCllW25dPXRbbl07cmV0dXJuIGV9dmFyIHM9e25hbWU6IlJvdXRlclZpZXciLGZ1bmN0aW9uYWw6ITAscHJvcHM6e25hbWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6ImRlZmF1bHQifX0scmVuZGVyOmZ1bmN0aW9uKGUsdCl7dmFyIG49dC5wcm9wcyxyPXQuY2hpbGRyZW4saT10LnBhcmVudCxzPXQuZGF0YTtzLnJvdXRlclZpZXc9ITA7Zm9yKHZhciBhPWkuJGNyZWF0ZUVsZW1lbnQsbD1uLm5hbWUsdT1pLiRyb3V0ZSxjPWkuX3JvdXRlclZpZXdDYWNoZXx8KGkuX3JvdXRlclZpZXdDYWNoZT17fSksZD0wLGY9ITE7aSYmaS5fcm91dGVyUm9vdCE9PWk7KWkuJHZub2RlJiZpLiR2bm9kZS5kYXRhLnJvdXRlclZpZXcmJmQrKyxpLl9pbmFjdGl2ZSYmKGY9ITApLGk9aS4kcGFyZW50O2lmKHMucm91dGVyVmlld0RlcHRoPWQsZilyZXR1cm4gYShjW2xdLHMscik7dmFyIGg9dS5tYXRjaGVkW2RdO2lmKCFoKXJldHVybiBjW2xdPW51bGwsYSgpO3ZhciBwPWNbbF09aC5jb21wb25lbnRzW2xdO3MucmVnaXN0ZXJSb3V0ZUluc3RhbmNlPWZ1bmN0aW9uKGUsdCl7dmFyIG49aC5pbnN0YW5jZXNbbF07KHQmJm4hPT1lfHwhdCYmbj09PWUpJiYoaC5pbnN0YW5jZXNbbF09dCl9LChzLmhvb2t8fChzLmhvb2s9e30pKS5wcmVwYXRjaD1mdW5jdGlvbihlLHQpe2guaW5zdGFuY2VzW2xdPXQuY29tcG9uZW50SW5zdGFuY2V9O3ZhciBtPXMucHJvcHM9ZnVuY3Rpb24oZSx0KXtzd2l0Y2godHlwZW9mIHQpe2Nhc2UidW5kZWZpbmVkIjpyZXR1cm47Y2FzZSJvYmplY3QiOnJldHVybiB0O2Nhc2UiZnVuY3Rpb24iOnJldHVybiB0KGUpO2Nhc2UiYm9vbGVhbiI6cmV0dXJuIHQ/ZS5wYXJhbXM6dm9pZCAwO2RlZmF1bHQ6MH19KHUsaC5wcm9wcyYmaC5wcm9wc1tsXSk7aWYobSl7bT1zLnByb3BzPW8oe30sbSk7dmFyIHY9cy5hdHRycz1zLmF0dHJzfHx7fTtmb3IodmFyIGcgaW4gbSlwLnByb3BzJiZnIGluIHAucHJvcHN8fCh2W2ddPW1bZ10sZGVsZXRlIG1bZ10pfXJldHVybiBhKHAscyxyKX19O3ZhciBhPS9bIScoKSpdL2csbD1mdW5jdGlvbihlKXtyZXR1cm4iJSIrZS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KX0sdT0vJTJDL2csYz1mdW5jdGlvbihlKXtyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGUpLnJlcGxhY2UoYSxsKS5yZXBsYWNlKHUsIiwiKX0sZD1kZWNvZGVVUklDb21wb25lbnQ7ZnVuY3Rpb24gZihlKXt2YXIgdD17fTtyZXR1cm4oZT1lLnRyaW0oKS5yZXBsYWNlKC9eKFw/fCN8JikvLCIiKSk/KGUuc3BsaXQoIiYiKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciBuPWUucmVwbGFjZSgvXCsvZywiICIpLnNwbGl0KCI9Iikscj1kKG4uc2hpZnQoKSksaT1uLmxlbmd0aD4wP2Qobi5qb2luKCI9IikpOm51bGw7dm9pZCAwPT09dFtyXT90W3JdPWk6QXJyYXkuaXNBcnJheSh0W3JdKT90W3JdLnB1c2goaSk6dFtyXT1bdFtyXSxpXX0pLHQpOnR9ZnVuY3Rpb24gaChlKXt2YXIgdD1lP09iamVjdC5rZXlzKGUpLm1hcChmdW5jdGlvbih0KXt2YXIgbj1lW3RdO2lmKHZvaWQgMD09PW4pcmV0dXJuIiI7aWYobnVsbD09PW4pcmV0dXJuIGModCk7aWYoQXJyYXkuaXNBcnJheShuKSl7dmFyIHI9W107cmV0dXJuIG4uZm9yRWFjaChmdW5jdGlvbihlKXt2b2lkIDAhPT1lJiYobnVsbD09PWU/ci5wdXNoKGModCkpOnIucHVzaChjKHQpKyI9IitjKGUpKSl9KSxyLmpvaW4oIiYiKX1yZXR1cm4gYyh0KSsiPSIrYyhuKX0pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5sZW5ndGg+MH0pLmpvaW4oIiYiKTpudWxsO3JldHVybiB0PyI/Iit0OiIifXZhciBwPS9cLz8kLztmdW5jdGlvbiBtKGUsdCxuLHIpe3ZhciBpPXImJnIub3B0aW9ucy5zdHJpbmdpZnlRdWVyeSxvPXQucXVlcnl8fHt9O3RyeXtvPXYobyl9Y2F0Y2goZSl7fXZhciBzPXtuYW1lOnQubmFtZXx8ZSYmZS5uYW1lLG1ldGE6ZSYmZS5tZXRhfHx7fSxwYXRoOnQucGF0aHx8Ii8iLGhhc2g6dC5oYXNofHwiIixxdWVyeTpvLHBhcmFtczp0LnBhcmFtc3x8e30sZnVsbFBhdGg6eSh0LGkpLG1hdGNoZWQ6ZT9mdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IoO2U7KXQudW5zaGlmdChlKSxlPWUucGFyZW50O3JldHVybiB0fShlKTpbXX07cmV0dXJuIG4mJihzLnJlZGlyZWN0ZWRGcm9tPXkobixpKSksT2JqZWN0LmZyZWV6ZShzKX1mdW5jdGlvbiB2KGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIGUubWFwKHYpO2lmKGUmJiJvYmplY3QiPT10eXBlb2YgZSl7dmFyIHQ9e307Zm9yKHZhciBuIGluIGUpdFtuXT12KGVbbl0pO3JldHVybiB0fXJldHVybiBlfXZhciBnPW0obnVsbCx7cGF0aDoiLyJ9KTtmdW5jdGlvbiB5KGUsdCl7dmFyIG49ZS5wYXRoLHI9ZS5xdWVyeTt2b2lkIDA9PT1yJiYocj17fSk7dmFyIGk9ZS5oYXNoO3JldHVybiB2b2lkIDA9PT1pJiYoaT0iIiksKG58fCIvIikrKHR8fGgpKHIpK2l9ZnVuY3Rpb24gXyhlLHQpe3JldHVybiB0PT09Zz9lPT09dDohIXQmJihlLnBhdGgmJnQucGF0aD9lLnBhdGgucmVwbGFjZShwLCIiKT09PXQucGF0aC5yZXBsYWNlKHAsIiIpJiZlLmhhc2g9PT10Lmhhc2gmJmIoZS5xdWVyeSx0LnF1ZXJ5KTohKCFlLm5hbWV8fCF0Lm5hbWUpJiYoZS5uYW1lPT09dC5uYW1lJiZlLmhhc2g9PT10Lmhhc2gmJmIoZS5xdWVyeSx0LnF1ZXJ5KSYmYihlLnBhcmFtcyx0LnBhcmFtcykpKX1mdW5jdGlvbiBiKGUsdCl7aWYodm9pZCAwPT09ZSYmKGU9e30pLHZvaWQgMD09PXQmJih0PXt9KSwhZXx8IXQpcmV0dXJuIGU9PT10O3ZhciBuPU9iamVjdC5rZXlzKGUpLHI9T2JqZWN0LmtleXModCk7cmV0dXJuIG4ubGVuZ3RoPT09ci5sZW5ndGgmJm4uZXZlcnkoZnVuY3Rpb24obil7dmFyIHI9ZVtuXSxpPXRbbl07cmV0dXJuIm9iamVjdCI9PXR5cGVvZiByJiYib2JqZWN0Ij09dHlwZW9mIGk/YihyLGkpOlN0cmluZyhyKT09PVN0cmluZyhpKX0pfXZhciB4LEM9W1N0cmluZyxPYmplY3RdLHc9W1N0cmluZyxBcnJheV0saz17bmFtZToiUm91dGVyTGluayIscHJvcHM6e3RvOnt0eXBlOkMscmVxdWlyZWQ6ITB9LHRhZzp7dHlwZTpTdHJpbmcsZGVmYXVsdDoiYSJ9LGV4YWN0OkJvb2xlYW4sYXBwZW5kOkJvb2xlYW4scmVwbGFjZTpCb29sZWFuLGFjdGl2ZUNsYXNzOlN0cmluZyxleGFjdEFjdGl2ZUNsYXNzOlN0cmluZyxldmVudDp7dHlwZTp3LGRlZmF1bHQ6ImNsaWNrIn19LHJlbmRlcjpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49dGhpcy4kcm91dGVyLHI9dGhpcy4kcm91dGUsaT1uLnJlc29sdmUodGhpcy50byxyLHRoaXMuYXBwZW5kKSxzPWkubG9jYXRpb24sYT1pLnJvdXRlLGw9aS5ocmVmLHU9e30sYz1uLm9wdGlvbnMubGlua0FjdGl2ZUNsYXNzLGQ9bi5vcHRpb25zLmxpbmtFeGFjdEFjdGl2ZUNsYXNzLGY9bnVsbD09Yz8icm91dGVyLWxpbmstYWN0aXZlIjpjLGg9bnVsbD09ZD8icm91dGVyLWxpbmstZXhhY3QtYWN0aXZlIjpkLHY9bnVsbD09dGhpcy5hY3RpdmVDbGFzcz9mOnRoaXMuYWN0aXZlQ2xhc3MsZz1udWxsPT10aGlzLmV4YWN0QWN0aXZlQ2xhc3M/aDp0aGlzLmV4YWN0QWN0aXZlQ2xhc3MseT1zLnBhdGg/bShudWxsLHMsbnVsbCxuKTphO3VbZ109XyhyLHkpLHVbdl09dGhpcy5leGFjdD91W2ddOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIDA9PT1lLnBhdGgucmVwbGFjZShwLCIvIikuaW5kZXhPZih0LnBhdGgucmVwbGFjZShwLCIvIikpJiYoIXQuaGFzaHx8ZS5oYXNoPT09dC5oYXNoKSYmZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4gaW4gdClpZighKG4gaW4gZSkpcmV0dXJuITE7cmV0dXJuITB9KGUucXVlcnksdC5xdWVyeSl9KHIseSk7dmFyIGI9ZnVuY3Rpb24oZSl7UyhlKSYmKHQucmVwbGFjZT9uLnJlcGxhY2Uocyk6bi5wdXNoKHMpKX0seD17Y2xpY2s6U307QXJyYXkuaXNBcnJheSh0aGlzLmV2ZW50KT90aGlzLmV2ZW50LmZvckVhY2goZnVuY3Rpb24oZSl7eFtlXT1ifSk6eFt0aGlzLmV2ZW50XT1iO3ZhciBDPXtjbGFzczp1fTtpZigiYSI9PT10aGlzLnRhZylDLm9uPXgsQy5hdHRycz17aHJlZjpsfTtlbHNle3ZhciB3PWZ1bmN0aW9uIGUodCl7aWYodClmb3IodmFyIG4scj0wO3I8dC5sZW5ndGg7cisrKXtpZigiYSI9PT0obj10W3JdKS50YWcpcmV0dXJuIG47aWYobi5jaGlsZHJlbiYmKG49ZShuLmNoaWxkcmVuKSkpcmV0dXJuIG59fSh0aGlzLiRzbG90cy5kZWZhdWx0KTtpZih3KXcuaXNTdGF0aWM9ITEsKHcuZGF0YT1vKHt9LHcuZGF0YSkpLm9uPXgsKHcuZGF0YS5hdHRycz1vKHt9LHcuZGF0YS5hdHRycykpLmhyZWY9bDtlbHNlIEMub249eH1yZXR1cm4gZSh0aGlzLnRhZyxDLHRoaXMuJHNsb3RzLmRlZmF1bHQpfX07ZnVuY3Rpb24gUyhlKXtpZighKGUubWV0YUtleXx8ZS5hbHRLZXl8fGUuY3RybEtleXx8ZS5zaGlmdEtleXx8ZS5kZWZhdWx0UHJldmVudGVkfHx2b2lkIDAhPT1lLmJ1dHRvbiYmMCE9PWUuYnV0dG9uKSl7aWYoZS5jdXJyZW50VGFyZ2V0JiZlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKXt2YXIgdD1lLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCJ0YXJnZXQiKTtpZigvXGJfYmxhbmtcYi9pLnRlc3QodCkpcmV0dXJufXJldHVybiBlLnByZXZlbnREZWZhdWx0JiZlLnByZXZlbnREZWZhdWx0KCksITB9fWZ1bmN0aW9uIEEoZSl7aWYoIUEuaW5zdGFsbGVkfHx4IT09ZSl7QS5pbnN0YWxsZWQ9ITAseD1lO3ZhciB0PWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDAhPT1lfSxuPWZ1bmN0aW9uKGUsbil7dmFyIHI9ZS4kb3B0aW9ucy5fcGFyZW50Vm5vZGU7dChyKSYmdChyPXIuZGF0YSkmJnQocj1yLnJlZ2lzdGVyUm91dGVJbnN0YW5jZSkmJnIoZSxuKX07ZS5taXhpbih7YmVmb3JlQ3JlYXRlOmZ1bmN0aW9uKCl7dCh0aGlzLiRvcHRpb25zLnJvdXRlcik/KHRoaXMuX3JvdXRlclJvb3Q9dGhpcyx0aGlzLl9yb3V0ZXI9dGhpcy4kb3B0aW9ucy5yb3V0ZXIsdGhpcy5fcm91dGVyLmluaXQodGhpcyksZS51dGlsLmRlZmluZVJlYWN0aXZlKHRoaXMsIl9yb3V0ZSIsdGhpcy5fcm91dGVyLmhpc3RvcnkuY3VycmVudCkpOnRoaXMuX3JvdXRlclJvb3Q9dGhpcy4kcGFyZW50JiZ0aGlzLiRwYXJlbnQuX3JvdXRlclJvb3R8fHRoaXMsbih0aGlzLHRoaXMpfSxkZXN0cm95ZWQ6ZnVuY3Rpb24oKXtuKHRoaXMpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSwiJHJvdXRlciIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yb3V0ZXJSb290Ll9yb3V0ZXJ9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLCIkcm91dGUiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcm91dGVyUm9vdC5fcm91dGV9fSksZS5jb21wb25lbnQoIlJvdXRlclZpZXciLHMpLGUuY29tcG9uZW50KCJSb3V0ZXJMaW5rIixrKTt2YXIgcj1lLmNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7ci5iZWZvcmVSb3V0ZUVudGVyPXIuYmVmb3JlUm91dGVMZWF2ZT1yLmJlZm9yZVJvdXRlVXBkYXRlPXIuY3JlYXRlZH19dmFyIEU9InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3c7ZnVuY3Rpb24gTShlLHQsbil7dmFyIHI9ZS5jaGFyQXQoMCk7aWYoIi8iPT09cilyZXR1cm4gZTtpZigiPyI9PT1yfHwiIyI9PT1yKXJldHVybiB0K2U7dmFyIGk9dC5zcGxpdCgiLyIpO24mJmlbaS5sZW5ndGgtMV18fGkucG9wKCk7Zm9yKHZhciBvPWUucmVwbGFjZSgvXlwvLywiIikuc3BsaXQoIi8iKSxzPTA7czxvLmxlbmd0aDtzKyspe3ZhciBhPW9bc107Ii4uIj09PWE/aS5wb3AoKToiLiIhPT1hJiZpLnB1c2goYSl9cmV0dXJuIiIhPT1pWzBdJiZpLnVuc2hpZnQoIiIpLGkuam9pbigiLyIpfWZ1bmN0aW9uIE8oZSl7cmV0dXJuIGUucmVwbGFjZSgvXC9cLy9nLCIvIil9dmFyIEQ9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuIltvYmplY3QgQXJyYXldIj09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSwkPXEsVD1SLFA9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gQihSKGUsdCkpfSxOPUIsRj1XLEk9bmV3IFJlZ0V4cChbIihcXFxcLikiLCIoW1xcLy5dKT8oPzooPzpcXDooXFx3KykoPzpcXCgoKD86XFxcXC58W15cXFxcKCldKSspXFwpKT98XFwoKCg/OlxcXFwufFteXFxcXCgpXSkrKVxcKSkoWysqP10pP3woXFwqKSkiXS5qb2luKCJ8IiksImciKTtmdW5jdGlvbiBSKGUsdCl7Zm9yKHZhciBuLHI9W10saT0wLG89MCxzPSIiLGE9dCYmdC5kZWxpbWl0ZXJ8fCIvIjtudWxsIT0obj1JLmV4ZWMoZSkpOyl7dmFyIGw9blswXSx1PW5bMV0sYz1uLmluZGV4O2lmKHMrPWUuc2xpY2UobyxjKSxvPWMrbC5sZW5ndGgsdSlzKz11WzFdO2Vsc2V7dmFyIGQ9ZVtvXSxmPW5bMl0saD1uWzNdLHA9bls0XSxtPW5bNV0sdj1uWzZdLGc9bls3XTtzJiYoci5wdXNoKHMpLHM9IiIpO3ZhciB5PW51bGwhPWYmJm51bGwhPWQmJmQhPT1mLF89IisiPT09dnx8IioiPT09dixiPSI/Ij09PXZ8fCIqIj09PXYseD1uWzJdfHxhLEM9cHx8bTtyLnB1c2goe25hbWU6aHx8aSsrLHByZWZpeDpmfHwiIixkZWxpbWl0ZXI6eCxvcHRpb25hbDpiLHJlcGVhdDpfLHBhcnRpYWw6eSxhc3RlcmlzazohIWcscGF0dGVybjpDP1YoQyk6Zz8iLioiOiJbXiIrTCh4KSsiXSs/In0pfX1yZXR1cm4gbzxlLmxlbmd0aCYmKHMrPWUuc3Vic3RyKG8pKSxzJiZyLnB1c2gocykscn1mdW5jdGlvbiBqKGUpe3JldHVybiBlbmNvZGVVUkkoZSkucmVwbGFjZSgvW1wvPyNdL2csZnVuY3Rpb24oZSl7cmV0dXJuIiUiK2UuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX0pfWZ1bmN0aW9uIEIoZSl7Zm9yKHZhciB0PW5ldyBBcnJheShlLmxlbmd0aCksbj0wO248ZS5sZW5ndGg7bisrKSJvYmplY3QiPT10eXBlb2YgZVtuXSYmKHRbbl09bmV3IFJlZ0V4cCgiXig/OiIrZVtuXS5wYXR0ZXJuKyIpJCIpKTtyZXR1cm4gZnVuY3Rpb24obixyKXtmb3IodmFyIGk9IiIsbz1ufHx7fSxzPShyfHx7fSkucHJldHR5P2o6ZW5jb2RlVVJJQ29tcG9uZW50LGE9MDthPGUubGVuZ3RoO2ErKyl7dmFyIGw9ZVthXTtpZigic3RyaW5nIiE9dHlwZW9mIGwpe3ZhciB1LGM9b1tsLm5hbWVdO2lmKG51bGw9PWMpe2lmKGwub3B0aW9uYWwpe2wucGFydGlhbCYmKGkrPWwucHJlZml4KTtjb250aW51ZX10aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCAiJytsLm5hbWUrJyIgdG8gYmUgZGVmaW5lZCcpfWlmKEQoYykpe2lmKCFsLnJlcGVhdCl0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCAiJytsLm5hbWUrJyIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnK0pTT04uc3RyaW5naWZ5KGMpKyJgIik7aWYoMD09PWMubGVuZ3RoKXtpZihsLm9wdGlvbmFsKWNvbnRpbnVlO3Rocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkICInK2wubmFtZSsnIiB0byBub3QgYmUgZW1wdHknKX1mb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7aWYodT1zKGNbZF0pLCF0W2FdLnRlc3QodSkpdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsICInK2wubmFtZSsnIiB0byBtYXRjaCAiJytsLnBhdHRlcm4rJyIsIGJ1dCByZWNlaXZlZCBgJytKU09OLnN0cmluZ2lmeSh1KSsiYCIpO2krPSgwPT09ZD9sLnByZWZpeDpsLmRlbGltaXRlcikrdX19ZWxzZXtpZih1PWwuYXN0ZXJpc2s/ZW5jb2RlVVJJKGMpLnJlcGxhY2UoL1s/I10vZyxmdW5jdGlvbihlKXtyZXR1cm4iJSIrZS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfSk6cyhjKSwhdFthXS50ZXN0KHUpKXRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkICInK2wubmFtZSsnIiB0byBtYXRjaCAiJytsLnBhdHRlcm4rJyIsIGJ1dCByZWNlaXZlZCAiJyt1KyciJyk7aSs9bC5wcmVmaXgrdX19ZWxzZSBpKz1sfXJldHVybiBpfX1mdW5jdGlvbiBMKGUpe3JldHVybiBlLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXXxcL1xcXSkvZywiXFwkMSIpfWZ1bmN0aW9uIFYoZSl7cmV0dXJuIGUucmVwbGFjZSgvKFs9ITokXC8oKV0pL2csIlxcJDEiKX1mdW5jdGlvbiBIKGUsdCl7cmV0dXJuIGUua2V5cz10LGV9ZnVuY3Rpb24geihlKXtyZXR1cm4gZS5zZW5zaXRpdmU/IiI6ImkifWZ1bmN0aW9uIFcoZSx0LG4pe0QodCl8fChuPXR8fG4sdD1bXSk7Zm9yKHZhciByPShuPW58fHt9KS5zdHJpY3QsaT0hMSE9PW4uZW5kLG89IiIscz0wO3M8ZS5sZW5ndGg7cysrKXt2YXIgYT1lW3NdO2lmKCJzdHJpbmciPT10eXBlb2YgYSlvKz1MKGEpO2Vsc2V7dmFyIGw9TChhLnByZWZpeCksdT0iKD86IithLnBhdHRlcm4rIikiO3QucHVzaChhKSxhLnJlcGVhdCYmKHUrPSIoPzoiK2wrdSsiKSoiKSxvKz11PWEub3B0aW9uYWw/YS5wYXJ0aWFsP2wrIigiK3UrIik/IjoiKD86IitsKyIoIit1KyIpKT8iOmwrIigiK3UrIikifX12YXIgYz1MKG4uZGVsaW1pdGVyfHwiLyIpLGQ9by5zbGljZSgtYy5sZW5ndGgpPT09YztyZXR1cm4gcnx8KG89KGQ/by5zbGljZSgwLC1jLmxlbmd0aCk6bykrIig/OiIrYysiKD89JCkpPyIpLG8rPWk/IiQiOnImJmQ/IiI6Iig/PSIrYysifCQpIixIKG5ldyBSZWdFeHAoIl4iK28seihuKSksdCl9ZnVuY3Rpb24gcShlLHQsbil7cmV0dXJuIEQodCl8fChuPXR8fG4sdD1bXSksbj1ufHx7fSxlIGluc3RhbmNlb2YgUmVnRXhwP2Z1bmN0aW9uKGUsdCl7dmFyIG49ZS5zb3VyY2UubWF0Y2goL1woKD8hXD8pL2cpO2lmKG4pZm9yKHZhciByPTA7cjxuLmxlbmd0aDtyKyspdC5wdXNoKHtuYW1lOnIscHJlZml4Om51bGwsZGVsaW1pdGVyOm51bGwsb3B0aW9uYWw6ITEscmVwZWF0OiExLHBhcnRpYWw6ITEsYXN0ZXJpc2s6ITEscGF0dGVybjpudWxsfSk7cmV0dXJuIEgoZSx0KX0oZSx0KTpEKGUpP2Z1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9W10saT0wO2k8ZS5sZW5ndGg7aSsrKXIucHVzaChxKGVbaV0sdCxuKS5zb3VyY2UpO3JldHVybiBIKG5ldyBSZWdFeHAoIig/OiIrci5qb2luKCJ8IikrIikiLHoobikpLHQpfShlLHQsbik6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBXKFIoZSxuKSx0LG4pfShlLHQsbil9JC5wYXJzZT1ULCQuY29tcGlsZT1QLCQudG9rZW5zVG9GdW5jdGlvbj1OLCQudG9rZW5zVG9SZWdFeHA9Rjt2YXIgVT1PYmplY3QuY3JlYXRlKG51bGwpO2Z1bmN0aW9uIEsoZSx0LG4pe3RyeXtyZXR1cm4oVVtlXXx8KFVbZV09JC5jb21waWxlKGUpKSkodHx8e30se3ByZXR0eTohMH0pfWNhdGNoKGUpe3JldHVybiIifX1mdW5jdGlvbiBZKGUsdCxuLHIpe3ZhciBpPXR8fFtdLG89bnx8T2JqZWN0LmNyZWF0ZShudWxsKSxzPXJ8fE9iamVjdC5jcmVhdGUobnVsbCk7ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpeyFmdW5jdGlvbiBlKHQsbixyLGksbyxzKXt2YXIgYT1pLnBhdGg7dmFyIGw9aS5uYW1lOzA7dmFyIHU9aS5wYXRoVG9SZWdleHBPcHRpb25zfHx7fTt2YXIgYz1mdW5jdGlvbihlLHQsbil7bnx8KGU9ZS5yZXBsYWNlKC9cLyQvLCIiKSk7aWYoIi8iPT09ZVswXSlyZXR1cm4gZTtpZihudWxsPT10KXJldHVybiBlO3JldHVybiBPKHQucGF0aCsiLyIrZSl9KGEsbyx1LnN0cmljdCk7ImJvb2xlYW4iPT10eXBlb2YgaS5jYXNlU2Vuc2l0aXZlJiYodS5zZW5zaXRpdmU9aS5jYXNlU2Vuc2l0aXZlKTt2YXIgZD17cGF0aDpjLHJlZ2V4OmZ1bmN0aW9uKGUsdCl7dmFyIG49JChlLFtdLHQpO3JldHVybiBufShjLHUpLGNvbXBvbmVudHM6aS5jb21wb25lbnRzfHx7ZGVmYXVsdDppLmNvbXBvbmVudH0saW5zdGFuY2VzOnt9LG5hbWU6bCxwYXJlbnQ6byxtYXRjaEFzOnMscmVkaXJlY3Q6aS5yZWRpcmVjdCxiZWZvcmVFbnRlcjppLmJlZm9yZUVudGVyLG1ldGE6aS5tZXRhfHx7fSxwcm9wczpudWxsPT1pLnByb3BzP3t9OmkuY29tcG9uZW50cz9pLnByb3BzOntkZWZhdWx0OmkucHJvcHN9fTtpLmNoaWxkcmVuJiZpLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oaSl7dmFyIG89cz9PKHMrIi8iK2kucGF0aCk6dm9pZCAwO2UodCxuLHIsaSxkLG8pfSk7aWYodm9pZCAwIT09aS5hbGlhcyl7dmFyIGY9QXJyYXkuaXNBcnJheShpLmFsaWFzKT9pLmFsaWFzOltpLmFsaWFzXTtmLmZvckVhY2goZnVuY3Rpb24ocyl7dmFyIGE9e3BhdGg6cyxjaGlsZHJlbjppLmNoaWxkcmVufTtlKHQsbixyLGEsbyxkLnBhdGh8fCIvIil9KX1uW2QucGF0aF18fCh0LnB1c2goZC5wYXRoKSxuW2QucGF0aF09ZCk7bCYmKHJbbF18fChyW2xdPWQpKX0oaSxvLHMsZSl9KTtmb3IodmFyIGE9MCxsPWkubGVuZ3RoO2E8bDthKyspIioiPT09aVthXSYmKGkucHVzaChpLnNwbGljZShhLDEpWzBdKSxsLS0sYS0tKTtyZXR1cm57cGF0aExpc3Q6aSxwYXRoTWFwOm8sbmFtZU1hcDpzfX1mdW5jdGlvbiBHKGUsdCxuLHIpe3ZhciBpPSJzdHJpbmciPT10eXBlb2YgZT97cGF0aDplfTplO2lmKGkubmFtZXx8aS5fbm9ybWFsaXplZClyZXR1cm4gaTtpZighaS5wYXRoJiZpLnBhcmFtcyYmdCl7KGk9byh7fSxpKSkuX25vcm1hbGl6ZWQ9ITA7dmFyIHM9byhvKHt9LHQucGFyYW1zKSxpLnBhcmFtcyk7aWYodC5uYW1lKWkubmFtZT10Lm5hbWUsaS5wYXJhbXM9cztlbHNlIGlmKHQubWF0Y2hlZC5sZW5ndGgpe3ZhciBhPXQubWF0Y2hlZFt0Lm1hdGNoZWQubGVuZ3RoLTFdLnBhdGg7aS5wYXRoPUsoYSxzLHQucGF0aCl9ZWxzZSAwO3JldHVybiBpfXZhciBsPWZ1bmN0aW9uKGUpe3ZhciB0PSIiLG49IiIscj1lLmluZGV4T2YoIiMiKTtyPj0wJiYodD1lLnNsaWNlKHIpLGU9ZS5zbGljZSgwLHIpKTt2YXIgaT1lLmluZGV4T2YoIj8iKTtyZXR1cm4gaT49MCYmKG49ZS5zbGljZShpKzEpLGU9ZS5zbGljZSgwLGkpKSx7cGF0aDplLHF1ZXJ5Om4saGFzaDp0fX0oaS5wYXRofHwiIiksdT10JiZ0LnBhdGh8fCIvIixjPWwucGF0aD9NKGwucGF0aCx1LG58fGkuYXBwZW5kKTp1LGQ9ZnVuY3Rpb24oZSx0LG4pe3ZvaWQgMD09PXQmJih0PXt9KTt2YXIgcixpPW58fGY7dHJ5e3I9aShlfHwiIil9Y2F0Y2goZSl7cj17fX1mb3IodmFyIG8gaW4gdClyW29dPXRbb107cmV0dXJuIHJ9KGwucXVlcnksaS5xdWVyeSxyJiZyLm9wdGlvbnMucGFyc2VRdWVyeSksaD1pLmhhc2h8fGwuaGFzaDtyZXR1cm4gaCYmIiMiIT09aC5jaGFyQXQoMCkmJihoPSIjIitoKSx7X25vcm1hbGl6ZWQ6ITAscGF0aDpjLHF1ZXJ5OmQsaGFzaDpofX1mdW5jdGlvbiBKKGUsdCl7dmFyIG49WShlKSxyPW4ucGF0aExpc3QsaT1uLnBhdGhNYXAsbz1uLm5hbWVNYXA7ZnVuY3Rpb24gcyhlLG4scyl7dmFyIGE9RyhlLG4sITEsdCksdT1hLm5hbWU7aWYodSl7dmFyIGM9b1t1XTtpZighYylyZXR1cm4gbChudWxsLGEpO3ZhciBkPWMucmVnZXgua2V5cy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIWUub3B0aW9uYWx9KS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUubmFtZX0pO2lmKCJvYmplY3QiIT10eXBlb2YgYS5wYXJhbXMmJihhLnBhcmFtcz17fSksbiYmIm9iamVjdCI9PXR5cGVvZiBuLnBhcmFtcylmb3IodmFyIGYgaW4gbi5wYXJhbXMpIShmIGluIGEucGFyYW1zKSYmZC5pbmRleE9mKGYpPi0xJiYoYS5wYXJhbXNbZl09bi5wYXJhbXNbZl0pO2lmKGMpcmV0dXJuIGEucGF0aD1LKGMucGF0aCxhLnBhcmFtcyksbChjLGEscyl9ZWxzZSBpZihhLnBhdGgpe2EucGFyYW1zPXt9O2Zvcih2YXIgaD0wO2g8ci5sZW5ndGg7aCsrKXt2YXIgcD1yW2hdLG09aVtwXTtpZihYKG0ucmVnZXgsYS5wYXRoLGEucGFyYW1zKSlyZXR1cm4gbChtLGEscyl9fXJldHVybiBsKG51bGwsYSl9ZnVuY3Rpb24gYShlLG4pe3ZhciByPWUucmVkaXJlY3QsaT0iZnVuY3Rpb24iPT10eXBlb2Ygcj9yKG0oZSxuLG51bGwsdCkpOnI7aWYoInN0cmluZyI9PXR5cGVvZiBpJiYoaT17cGF0aDppfSksIWl8fCJvYmplY3QiIT10eXBlb2YgaSlyZXR1cm4gbChudWxsLG4pO3ZhciBhPWksdT1hLm5hbWUsYz1hLnBhdGgsZD1uLnF1ZXJ5LGY9bi5oYXNoLGg9bi5wYXJhbXM7aWYoZD1hLmhhc093blByb3BlcnR5KCJxdWVyeSIpP2EucXVlcnk6ZCxmPWEuaGFzT3duUHJvcGVydHkoImhhc2giKT9hLmhhc2g6ZixoPWEuaGFzT3duUHJvcGVydHkoInBhcmFtcyIpP2EucGFyYW1zOmgsdSl7b1t1XTtyZXR1cm4gcyh7X25vcm1hbGl6ZWQ6ITAsbmFtZTp1LHF1ZXJ5OmQsaGFzaDpmLHBhcmFtczpofSx2b2lkIDAsbil9aWYoYyl7dmFyIHA9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gTShlLHQucGFyZW50P3QucGFyZW50LnBhdGg6Ii8iLCEwKX0oYyxlKTtyZXR1cm4gcyh7X25vcm1hbGl6ZWQ6ITAscGF0aDpLKHAsaCkscXVlcnk6ZCxoYXNoOmZ9LHZvaWQgMCxuKX1yZXR1cm4gbChudWxsLG4pfWZ1bmN0aW9uIGwoZSxuLHIpe3JldHVybiBlJiZlLnJlZGlyZWN0P2EoZSxyfHxuKTplJiZlLm1hdGNoQXM/ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXMoe19ub3JtYWxpemVkOiEwLHBhdGg6SyhuLHQucGFyYW1zKX0pO2lmKHIpe3ZhciBpPXIubWF0Y2hlZCxvPWlbaS5sZW5ndGgtMV07cmV0dXJuIHQucGFyYW1zPXIucGFyYW1zLGwobyx0KX1yZXR1cm4gbChudWxsLHQpfSgwLG4sZS5tYXRjaEFzKTptKGUsbixyLHQpfXJldHVybnttYXRjaDpzLGFkZFJvdXRlczpmdW5jdGlvbihlKXtZKGUscixpLG8pfX19ZnVuY3Rpb24gWChlLHQsbil7dmFyIHI9dC5tYXRjaChlKTtpZighcilyZXR1cm4hMTtpZighbilyZXR1cm4hMDtmb3IodmFyIGk9MSxvPXIubGVuZ3RoO2k8bzsrK2kpe3ZhciBzPWUua2V5c1tpLTFdLGE9InN0cmluZyI9PXR5cGVvZiByW2ldP2RlY29kZVVSSUNvbXBvbmVudChyW2ldKTpyW2ldO3MmJihuW3MubmFtZXx8InBhdGhNYXRjaCJdPWEpfXJldHVybiEwfXZhciBRPU9iamVjdC5jcmVhdGUobnVsbCk7ZnVuY3Rpb24gWigpe3dpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7a2V5OmRlKCl9LCIiLHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLm9yaWdpbiwiIikpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJwb3BzdGF0ZSIsZnVuY3Rpb24oZSl7dmFyIHQ7dGUoKSxlLnN0YXRlJiZlLnN0YXRlLmtleSYmKHQ9ZS5zdGF0ZS5rZXksdWU9dCl9KX1mdW5jdGlvbiBlZShlLHQsbixyKXtpZihlLmFwcCl7dmFyIGk9ZS5vcHRpb25zLnNjcm9sbEJlaGF2aW9yO2kmJmUuYXBwLiRuZXh0VGljayhmdW5jdGlvbigpe3ZhciBvPWZ1bmN0aW9uKCl7dmFyIGU9ZGUoKTtpZihlKXJldHVybiBRW2VdfSgpLHM9aS5jYWxsKGUsdCxuLHI/bzpudWxsKTtzJiYoImZ1bmN0aW9uIj09dHlwZW9mIHMudGhlbj9zLnRoZW4oZnVuY3Rpb24oZSl7b2UoZSxvKX0pLmNhdGNoKGZ1bmN0aW9uKGUpezB9KTpvZShzLG8pKX0pfX1mdW5jdGlvbiB0ZSgpe3ZhciBlPWRlKCk7ZSYmKFFbZV09e3g6d2luZG93LnBhZ2VYT2Zmc2V0LHk6d2luZG93LnBhZ2VZT2Zmc2V0fSl9ZnVuY3Rpb24gbmUoZSl7cmV0dXJuIGllKGUueCl8fGllKGUueSl9ZnVuY3Rpb24gcmUoZSl7cmV0dXJue3g6aWUoZS54KT9lLng6d2luZG93LnBhZ2VYT2Zmc2V0LHk6aWUoZS55KT9lLnk6d2luZG93LnBhZ2VZT2Zmc2V0fX1mdW5jdGlvbiBpZShlKXtyZXR1cm4ibnVtYmVyIj09dHlwZW9mIGV9ZnVuY3Rpb24gb2UoZSx0KXt2YXIgbixyPSJvYmplY3QiPT10eXBlb2YgZTtpZihyJiYic3RyaW5nIj09dHlwZW9mIGUuc2VsZWN0b3Ipe3ZhciBpPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZS5zZWxlY3Rvcik7aWYoaSl7dmFyIG89ZS5vZmZzZXQmJiJvYmplY3QiPT10eXBlb2YgZS5vZmZzZXQ/ZS5vZmZzZXQ6e307dD1mdW5jdGlvbihlLHQpe3ZhciBuPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxyPWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7cmV0dXJue3g6ci5sZWZ0LW4ubGVmdC10LngseTpyLnRvcC1uLnRvcC10Lnl9fShpLG89e3g6aWUoKG49bykueCk/bi54OjAseTppZShuLnkpP24ueTowfSl9ZWxzZSBuZShlKSYmKHQ9cmUoZSkpfWVsc2UgciYmbmUoZSkmJih0PXJlKGUpKTt0JiZ3aW5kb3cuc2Nyb2xsVG8odC54LHQueSl9dmFyIHNlLGFlPUUmJigoLTE9PT0oc2U9d2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpLmluZGV4T2YoIkFuZHJvaWQgMi4iKSYmLTE9PT1zZS5pbmRleE9mKCJBbmRyb2lkIDQuMCIpfHwtMT09PXNlLmluZGV4T2YoIk1vYmlsZSBTYWZhcmkiKXx8LTEhPT1zZS5pbmRleE9mKCJDaHJvbWUiKXx8LTEhPT1zZS5pbmRleE9mKCJXaW5kb3dzIFBob25lIikpJiZ3aW5kb3cuaGlzdG9yeSYmInB1c2hTdGF0ZSJpbiB3aW5kb3cuaGlzdG9yeSksbGU9RSYmd2luZG93LnBlcmZvcm1hbmNlJiZ3aW5kb3cucGVyZm9ybWFuY2Uubm93P3dpbmRvdy5wZXJmb3JtYW5jZTpEYXRlLHVlPWNlKCk7ZnVuY3Rpb24gY2UoKXtyZXR1cm4gbGUubm93KCkudG9GaXhlZCgzKX1mdW5jdGlvbiBkZSgpe3JldHVybiB1ZX1mdW5jdGlvbiBmZShlLHQpe3RlKCk7dmFyIG49d2luZG93Lmhpc3Rvcnk7dHJ5e3Q/bi5yZXBsYWNlU3RhdGUoe2tleTp1ZX0sIiIsZSk6KHVlPWNlKCksbi5wdXNoU3RhdGUoe2tleTp1ZX0sIiIsZSkpfWNhdGNoKG4pe3dpbmRvdy5sb2NhdGlvblt0PyJyZXBsYWNlIjoiYXNzaWduIl0oZSl9fWZ1bmN0aW9uIGhlKGUpe2ZlKGUsITApfWZ1bmN0aW9uIHBlKGUsdCxuKXt2YXIgcj1mdW5jdGlvbihpKXtpPj1lLmxlbmd0aD9uKCk6ZVtpXT90KGVbaV0sZnVuY3Rpb24oKXtyKGkrMSl9KTpyKGkrMSl9O3IoMCl9ZnVuY3Rpb24gbWUoZSl7cmV0dXJuIGZ1bmN0aW9uKHQsbixyKXt2YXIgbz0hMSxzPTAsYT1udWxsO3ZlKGUsZnVuY3Rpb24oZSx0LG4sbCl7aWYoImZ1bmN0aW9uIj09dHlwZW9mIGUmJnZvaWQgMD09PWUuY2lkKXtvPSEwLHMrKzt2YXIgdSxjPV9lKGZ1bmN0aW9uKHQpe3ZhciBpOygoaT10KS5fX2VzTW9kdWxlfHx5ZSYmIk1vZHVsZSI9PT1pW1N5bWJvbC50b1N0cmluZ1RhZ10pJiYodD10LmRlZmF1bHQpLGUucmVzb2x2ZWQ9ImZ1bmN0aW9uIj09dHlwZW9mIHQ/dDp4LmV4dGVuZCh0KSxuLmNvbXBvbmVudHNbbF09dCwtLXM8PTAmJnIoKX0pLGQ9X2UoZnVuY3Rpb24oZSl7dmFyIHQ9IkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudCAiK2wrIjogIitlO2F8fChhPWkoZSk/ZTpuZXcgRXJyb3IodCkscihhKSl9KTt0cnl7dT1lKGMsZCl9Y2F0Y2goZSl7ZChlKX1pZih1KWlmKCJmdW5jdGlvbiI9PXR5cGVvZiB1LnRoZW4pdS50aGVuKGMsZCk7ZWxzZXt2YXIgZj11LmNvbXBvbmVudDtmJiYiZnVuY3Rpb24iPT10eXBlb2YgZi50aGVuJiZmLnRoZW4oYyxkKX19fSksb3x8cigpfX1mdW5jdGlvbiB2ZShlLHQpe3JldHVybiBnZShlLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LmtleXMoZS5jb21wb25lbnRzKS5tYXAoZnVuY3Rpb24obil7cmV0dXJuIHQoZS5jb21wb25lbnRzW25dLGUuaW5zdGFuY2VzW25dLGUsbil9KX0pKX1mdW5jdGlvbiBnZShlKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSxlKX12YXIgeWU9ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmInN5bWJvbCI9PXR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWc7ZnVuY3Rpb24gX2UoZSl7dmFyIHQ9ITE7cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKHZhciBuPVtdLHI9YXJndW1lbnRzLmxlbmd0aDtyLS07KW5bcl09YXJndW1lbnRzW3JdO2lmKCF0KXJldHVybiB0PSEwLGUuYXBwbHkodGhpcyxuKX19dmFyIGJlPWZ1bmN0aW9uKGUsdCl7dGhpcy5yb3V0ZXI9ZSx0aGlzLmJhc2U9ZnVuY3Rpb24oZSl7aWYoIWUpaWYoRSl7dmFyIHQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiYmFzZSIpO2U9KGU9dCYmdC5nZXRBdHRyaWJ1dGUoImhyZWYiKXx8Ii8iKS5yZXBsYWNlKC9eaHR0cHM/OlwvXC9bXlwvXSsvLCIiKX1lbHNlIGU9Ii8iOyIvIiE9PWUuY2hhckF0KDApJiYoZT0iLyIrZSk7cmV0dXJuIGUucmVwbGFjZSgvXC8kLywiIil9KHQpLHRoaXMuY3VycmVudD1nLHRoaXMucGVuZGluZz1udWxsLHRoaXMucmVhZHk9ITEsdGhpcy5yZWFkeUNicz1bXSx0aGlzLnJlYWR5RXJyb3JDYnM9W10sdGhpcy5lcnJvckNicz1bXX07ZnVuY3Rpb24geGUoZSx0LG4scil7dmFyIGk9dmUoZSxmdW5jdGlvbihlLHIsaSxvKXt2YXIgcz1mdW5jdGlvbihlLHQpeyJmdW5jdGlvbiIhPXR5cGVvZiBlJiYoZT14LmV4dGVuZChlKSk7cmV0dXJuIGUub3B0aW9uc1t0XX0oZSx0KTtpZihzKXJldHVybiBBcnJheS5pc0FycmF5KHMpP3MubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBuKGUscixpLG8pfSk6bihzLHIsaSxvKX0pO3JldHVybiBnZShyP2kucmV2ZXJzZSgpOmkpfWZ1bmN0aW9uIENlKGUsdCl7aWYodClyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh0LGFyZ3VtZW50cyl9fWJlLnByb3RvdHlwZS5saXN0ZW49ZnVuY3Rpb24oZSl7dGhpcy5jYj1lfSxiZS5wcm90b3R5cGUub25SZWFkeT1mdW5jdGlvbihlLHQpe3RoaXMucmVhZHk/ZSgpOih0aGlzLnJlYWR5Q2JzLnB1c2goZSksdCYmdGhpcy5yZWFkeUVycm9yQ2JzLnB1c2godCkpfSxiZS5wcm90b3R5cGUub25FcnJvcj1mdW5jdGlvbihlKXt0aGlzLmVycm9yQ2JzLnB1c2goZSl9LGJlLnByb3RvdHlwZS50cmFuc2l0aW9uVG89ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXMsaT10aGlzLnJvdXRlci5tYXRjaChlLHRoaXMuY3VycmVudCk7dGhpcy5jb25maXJtVHJhbnNpdGlvbihpLGZ1bmN0aW9uKCl7ci51cGRhdGVSb3V0ZShpKSx0JiZ0KGkpLHIuZW5zdXJlVVJMKCksci5yZWFkeXx8KHIucmVhZHk9ITAsci5yZWFkeUNicy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UoaSl9KSl9LGZ1bmN0aW9uKGUpe24mJm4oZSksZSYmIXIucmVhZHkmJihyLnJlYWR5PSEwLHIucmVhZHlFcnJvckNicy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QoZSl9KSl9KX0sYmUucHJvdG90eXBlLmNvbmZpcm1UcmFuc2l0aW9uPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbz10aGlzLHM9dGhpcy5jdXJyZW50LGE9ZnVuY3Rpb24oZSl7aShlKSYmKG8uZXJyb3JDYnMubGVuZ3RoP28uZXJyb3JDYnMuZm9yRWFjaChmdW5jdGlvbih0KXt0KGUpfSk6KHIoKSxjb25zb2xlLmVycm9yKGUpKSksbiYmbihlKX07aWYoXyhlLHMpJiZlLm1hdGNoZWQubGVuZ3RoPT09cy5tYXRjaGVkLmxlbmd0aClyZXR1cm4gdGhpcy5lbnN1cmVVUkwoKSxhKCk7dmFyIGw9ZnVuY3Rpb24oZSx0KXt2YXIgbixyPU1hdGgubWF4KGUubGVuZ3RoLHQubGVuZ3RoKTtmb3Iobj0wO248ciYmZVtuXT09PXRbbl07bisrKTtyZXR1cm57dXBkYXRlZDp0LnNsaWNlKDAsbiksYWN0aXZhdGVkOnQuc2xpY2UobiksZGVhY3RpdmF0ZWQ6ZS5zbGljZShuKX19KHRoaXMuY3VycmVudC5tYXRjaGVkLGUubWF0Y2hlZCksdT1sLnVwZGF0ZWQsYz1sLmRlYWN0aXZhdGVkLGQ9bC5hY3RpdmF0ZWQsZj1bXS5jb25jYXQoZnVuY3Rpb24oZSl7cmV0dXJuIHhlKGUsImJlZm9yZVJvdXRlTGVhdmUiLENlLCEwKX0oYyksdGhpcy5yb3V0ZXIuYmVmb3JlSG9va3MsZnVuY3Rpb24oZSl7cmV0dXJuIHhlKGUsImJlZm9yZVJvdXRlVXBkYXRlIixDZSl9KHUpLGQubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLmJlZm9yZUVudGVyfSksbWUoZCkpO3RoaXMucGVuZGluZz1lO3ZhciBoPWZ1bmN0aW9uKHQsbil7aWYoby5wZW5kaW5nIT09ZSlyZXR1cm4gYSgpO3RyeXt0KGUscyxmdW5jdGlvbihlKXshMT09PWV8fGkoZSk/KG8uZW5zdXJlVVJMKCEwKSxhKGUpKToic3RyaW5nIj09dHlwZW9mIGV8fCJvYmplY3QiPT10eXBlb2YgZSYmKCJzdHJpbmciPT10eXBlb2YgZS5wYXRofHwic3RyaW5nIj09dHlwZW9mIGUubmFtZSk/KGEoKSwib2JqZWN0Ij09dHlwZW9mIGUmJmUucmVwbGFjZT9vLnJlcGxhY2UoZSk6by5wdXNoKGUpKTpuKGUpfSl9Y2F0Y2goZSl7YShlKX19O3BlKGYsaCxmdW5jdGlvbigpe3ZhciBuPVtdO3BlKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4geGUoZSwiYmVmb3JlUm91dGVFbnRlciIsZnVuY3Rpb24oZSxyLGksbyl7cmV0dXJuIGZ1bmN0aW9uKGUsdCxuLHIsaSl7cmV0dXJuIGZ1bmN0aW9uKG8scyxhKXtyZXR1cm4gZShvLHMsZnVuY3Rpb24oZSl7YShlKSwiZnVuY3Rpb24iPT10eXBlb2YgZSYmci5wdXNoKGZ1bmN0aW9uKCl7IWZ1bmN0aW9uIGUodCxuLHIsaSl7bltyXSYmIW5bcl0uX2lzQmVpbmdEZXN0cm95ZWQ/dChuW3JdKTppKCkmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKHQsbixyLGkpfSwxNil9KGUsdC5pbnN0YW5jZXMsbixpKX0pfSl9fShlLGksbyx0LG4pfSl9KGQsbixmdW5jdGlvbigpe3JldHVybiBvLmN1cnJlbnQ9PT1lfSkuY29uY2F0KG8ucm91dGVyLnJlc29sdmVIb29rcyksaCxmdW5jdGlvbigpe2lmKG8ucGVuZGluZyE9PWUpcmV0dXJuIGEoKTtvLnBlbmRpbmc9bnVsbCx0KGUpLG8ucm91dGVyLmFwcCYmby5yb3V0ZXIuYXBwLiRuZXh0VGljayhmdW5jdGlvbigpe24uZm9yRWFjaChmdW5jdGlvbihlKXtlKCl9KX0pfSl9KX0sYmUucHJvdG90eXBlLnVwZGF0ZVJvdXRlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuY3VycmVudDt0aGlzLmN1cnJlbnQ9ZSx0aGlzLmNiJiZ0aGlzLmNiKGUpLHRoaXMucm91dGVyLmFmdGVySG9va3MuZm9yRWFjaChmdW5jdGlvbihuKXtuJiZuKGUsdCl9KX07dmFyIHdlPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxuKXt2YXIgcj10aGlzO2UuY2FsbCh0aGlzLHQsbik7dmFyIGk9dC5vcHRpb25zLnNjcm9sbEJlaGF2aW9yLG89YWUmJmk7byYmWigpO3ZhciBzPWtlKHRoaXMuYmFzZSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoInBvcHN0YXRlIixmdW5jdGlvbihlKXt2YXIgbj1yLmN1cnJlbnQsaT1rZShyLmJhc2UpO3IuY3VycmVudD09PWcmJmk9PT1zfHxyLnRyYW5zaXRpb25UbyhpLGZ1bmN0aW9uKGUpe28mJmVlKHQsZSxuLCEwKX0pfSl9cmV0dXJuIGUmJih0Ll9fcHJvdG9fXz1lKSx0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlKSx0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj10LHQucHJvdG90eXBlLmdvPWZ1bmN0aW9uKGUpe3dpbmRvdy5oaXN0b3J5LmdvKGUpfSx0LnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLGk9dGhpcy5jdXJyZW50O3RoaXMudHJhbnNpdGlvblRvKGUsZnVuY3Rpb24oZSl7ZmUoTyhyLmJhc2UrZS5mdWxsUGF0aCkpLGVlKHIucm91dGVyLGUsaSwhMSksdCYmdChlKX0sbil9LHQucHJvdG90eXBlLnJlcGxhY2U9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXMsaT10aGlzLmN1cnJlbnQ7dGhpcy50cmFuc2l0aW9uVG8oZSxmdW5jdGlvbihlKXtoZShPKHIuYmFzZStlLmZ1bGxQYXRoKSksZWUoci5yb3V0ZXIsZSxpLCExKSx0JiZ0KGUpfSxuKX0sdC5wcm90b3R5cGUuZW5zdXJlVVJMPWZ1bmN0aW9uKGUpe2lmKGtlKHRoaXMuYmFzZSkhPT10aGlzLmN1cnJlbnQuZnVsbFBhdGgpe3ZhciB0PU8odGhpcy5iYXNlK3RoaXMuY3VycmVudC5mdWxsUGF0aCk7ZT9mZSh0KTpoZSh0KX19LHQucHJvdG90eXBlLmdldEN1cnJlbnRMb2NhdGlvbj1mdW5jdGlvbigpe3JldHVybiBrZSh0aGlzLmJhc2UpfSx0fShiZSk7ZnVuY3Rpb24ga2UoZSl7dmFyIHQ9ZGVjb2RlVVJJKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSk7cmV0dXJuIGUmJjA9PT10LmluZGV4T2YoZSkmJih0PXQuc2xpY2UoZS5sZW5ndGgpKSwodHx8Ii8iKSt3aW5kb3cubG9jYXRpb24uc2VhcmNoK3dpbmRvdy5sb2NhdGlvbi5oYXNofXZhciBTZT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQsbixyKXtlLmNhbGwodGhpcyx0LG4pLHImJmZ1bmN0aW9uKGUpe3ZhciB0PWtlKGUpO2lmKCEvXlwvIy8udGVzdCh0KSlyZXR1cm4gd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoTyhlKyIvIyIrdCkpLCEwfSh0aGlzLmJhc2UpfHxBZSgpfXJldHVybiBlJiYodC5fX3Byb3RvX189ZSksdC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSksdC5wcm90b3R5cGUuY29uc3RydWN0b3I9dCx0LnByb3RvdHlwZS5zZXR1cExpc3RlbmVycz1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLnJvdXRlci5vcHRpb25zLnNjcm9sbEJlaGF2aW9yLG49YWUmJnQ7biYmWigpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGFlPyJwb3BzdGF0ZSI6Imhhc2hjaGFuZ2UiLGZ1bmN0aW9uKCl7dmFyIHQ9ZS5jdXJyZW50O0FlKCkmJmUudHJhbnNpdGlvblRvKEVlKCksZnVuY3Rpb24ocil7biYmZWUoZS5yb3V0ZXIscix0LCEwKSxhZXx8RGUoci5mdWxsUGF0aCl9KX0pfSx0LnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLGk9dGhpcy5jdXJyZW50O3RoaXMudHJhbnNpdGlvblRvKGUsZnVuY3Rpb24oZSl7T2UoZS5mdWxsUGF0aCksZWUoci5yb3V0ZXIsZSxpLCExKSx0JiZ0KGUpfSxuKX0sdC5wcm90b3R5cGUucmVwbGFjZT1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcyxpPXRoaXMuY3VycmVudDt0aGlzLnRyYW5zaXRpb25UbyhlLGZ1bmN0aW9uKGUpe0RlKGUuZnVsbFBhdGgpLGVlKHIucm91dGVyLGUsaSwhMSksdCYmdChlKX0sbil9LHQucHJvdG90eXBlLmdvPWZ1bmN0aW9uKGUpe3dpbmRvdy5oaXN0b3J5LmdvKGUpfSx0LnByb3RvdHlwZS5lbnN1cmVVUkw9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5jdXJyZW50LmZ1bGxQYXRoO0VlKCkhPT10JiYoZT9PZSh0KTpEZSh0KSl9LHQucHJvdG90eXBlLmdldEN1cnJlbnRMb2NhdGlvbj1mdW5jdGlvbigpe3JldHVybiBFZSgpfSx0fShiZSk7ZnVuY3Rpb24gQWUoKXt2YXIgZT1FZSgpO3JldHVybiIvIj09PWUuY2hhckF0KDApfHwoRGUoIi8iK2UpLCExKX1mdW5jdGlvbiBFZSgpe3ZhciBlPXdpbmRvdy5sb2NhdGlvbi5ocmVmLHQ9ZS5pbmRleE9mKCIjIik7cmV0dXJuLTE9PT10PyIiOmRlY29kZVVSSShlLnNsaWNlKHQrMSkpfWZ1bmN0aW9uIE1lKGUpe3ZhciB0PXdpbmRvdy5sb2NhdGlvbi5ocmVmLG49dC5pbmRleE9mKCIjIik7cmV0dXJuKG4+PTA/dC5zbGljZSgwLG4pOnQpKyIjIitlfWZ1bmN0aW9uIE9lKGUpe2FlP2ZlKE1lKGUpKTp3aW5kb3cubG9jYXRpb24uaGFzaD1lfWZ1bmN0aW9uIERlKGUpe2FlP2hlKE1lKGUpKTp3aW5kb3cubG9jYXRpb24ucmVwbGFjZShNZShlKSl9dmFyICRlPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxuKXtlLmNhbGwodGhpcyx0LG4pLHRoaXMuc3RhY2s9W10sdGhpcy5pbmRleD0tMX1yZXR1cm4gZSYmKHQuX19wcm90b19fPWUpLHQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUpLHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPXQsdC5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpczt0aGlzLnRyYW5zaXRpb25UbyhlLGZ1bmN0aW9uKGUpe3Iuc3RhY2s9ci5zdGFjay5zbGljZSgwLHIuaW5kZXgrMSkuY29uY2F0KGUpLHIuaW5kZXgrKyx0JiZ0KGUpfSxuKX0sdC5wcm90b3R5cGUucmVwbGFjZT1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpczt0aGlzLnRyYW5zaXRpb25UbyhlLGZ1bmN0aW9uKGUpe3Iuc3RhY2s9ci5zdGFjay5zbGljZSgwLHIuaW5kZXgpLmNvbmNhdChlKSx0JiZ0KGUpfSxuKX0sdC5wcm90b3R5cGUuZ289ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPXRoaXMuaW5kZXgrZTtpZighKG48MHx8bj49dGhpcy5zdGFjay5sZW5ndGgpKXt2YXIgcj10aGlzLnN0YWNrW25dO3RoaXMuY29uZmlybVRyYW5zaXRpb24ocixmdW5jdGlvbigpe3QuaW5kZXg9bix0LnVwZGF0ZVJvdXRlKHIpfSl9fSx0LnByb3RvdHlwZS5nZXRDdXJyZW50TG9jYXRpb249ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoLTFdO3JldHVybiBlP2UuZnVsbFBhdGg6Ii8ifSx0LnByb3RvdHlwZS5lbnN1cmVVUkw9ZnVuY3Rpb24oKXt9LHR9KGJlKSxUZT1mdW5jdGlvbihlKXt2b2lkIDA9PT1lJiYoZT17fSksdGhpcy5hcHA9bnVsbCx0aGlzLmFwcHM9W10sdGhpcy5vcHRpb25zPWUsdGhpcy5iZWZvcmVIb29rcz1bXSx0aGlzLnJlc29sdmVIb29rcz1bXSx0aGlzLmFmdGVySG9va3M9W10sdGhpcy5tYXRjaGVyPUooZS5yb3V0ZXN8fFtdLHRoaXMpO3ZhciB0PWUubW9kZXx8Imhhc2giO3N3aXRjaCh0aGlzLmZhbGxiYWNrPSJoaXN0b3J5Ij09PXQmJiFhZSYmITEhPT1lLmZhbGxiYWNrLHRoaXMuZmFsbGJhY2smJih0PSJoYXNoIiksRXx8KHQ9ImFic3RyYWN0IiksdGhpcy5tb2RlPXQsdCl7Y2FzZSJoaXN0b3J5Ijp0aGlzLmhpc3Rvcnk9bmV3IHdlKHRoaXMsZS5iYXNlKTticmVhaztjYXNlImhhc2giOnRoaXMuaGlzdG9yeT1uZXcgU2UodGhpcyxlLmJhc2UsdGhpcy5mYWxsYmFjayk7YnJlYWs7Y2FzZSJhYnN0cmFjdCI6dGhpcy5oaXN0b3J5PW5ldyAkZSh0aGlzLGUuYmFzZSk7YnJlYWs7ZGVmYXVsdDowfX0sUGU9e2N1cnJlbnRSb3V0ZTp7Y29uZmlndXJhYmxlOiEwfX07ZnVuY3Rpb24gTmUoZSx0KXtyZXR1cm4gZS5wdXNoKHQpLGZ1bmN0aW9uKCl7dmFyIG49ZS5pbmRleE9mKHQpO24+LTEmJmUuc3BsaWNlKG4sMSl9fVRlLnByb3RvdHlwZS5tYXRjaD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHRoaXMubWF0Y2hlci5tYXRjaChlLHQsbil9LFBlLmN1cnJlbnRSb3V0ZS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oaXN0b3J5JiZ0aGlzLmhpc3RvcnkuY3VycmVudH0sVGUucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZih0aGlzLmFwcHMucHVzaChlKSwhdGhpcy5hcHApe3RoaXMuYXBwPWU7dmFyIG49dGhpcy5oaXN0b3J5O2lmKG4gaW5zdGFuY2VvZiB3ZSluLnRyYW5zaXRpb25UbyhuLmdldEN1cnJlbnRMb2NhdGlvbigpKTtlbHNlIGlmKG4gaW5zdGFuY2VvZiBTZSl7dmFyIHI9ZnVuY3Rpb24oKXtuLnNldHVwTGlzdGVuZXJzKCl9O24udHJhbnNpdGlvblRvKG4uZ2V0Q3VycmVudExvY2F0aW9uKCkscixyKX1uLmxpc3RlbihmdW5jdGlvbihlKXt0LmFwcHMuZm9yRWFjaChmdW5jdGlvbih0KXt0Ll9yb3V0ZT1lfSl9KX19LFRlLnByb3RvdHlwZS5iZWZvcmVFYWNoPWZ1bmN0aW9uKGUpe3JldHVybiBOZSh0aGlzLmJlZm9yZUhvb2tzLGUpfSxUZS5wcm90b3R5cGUuYmVmb3JlUmVzb2x2ZT1mdW5jdGlvbihlKXtyZXR1cm4gTmUodGhpcy5yZXNvbHZlSG9va3MsZSl9LFRlLnByb3RvdHlwZS5hZnRlckVhY2g9ZnVuY3Rpb24oZSl7cmV0dXJuIE5lKHRoaXMuYWZ0ZXJIb29rcyxlKX0sVGUucHJvdG90eXBlLm9uUmVhZHk9ZnVuY3Rpb24oZSx0KXt0aGlzLmhpc3Rvcnkub25SZWFkeShlLHQpfSxUZS5wcm90b3R5cGUub25FcnJvcj1mdW5jdGlvbihlKXt0aGlzLmhpc3Rvcnkub25FcnJvcihlKX0sVGUucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24oZSx0LG4pe3RoaXMuaGlzdG9yeS5wdXNoKGUsdCxuKX0sVGUucHJvdG90eXBlLnJlcGxhY2U9ZnVuY3Rpb24oZSx0LG4pe3RoaXMuaGlzdG9yeS5yZXBsYWNlKGUsdCxuKX0sVGUucHJvdG90eXBlLmdvPWZ1bmN0aW9uKGUpe3RoaXMuaGlzdG9yeS5nbyhlKX0sVGUucHJvdG90eXBlLmJhY2s9ZnVuY3Rpb24oKXt0aGlzLmdvKC0xKX0sVGUucHJvdG90eXBlLmZvcndhcmQ9ZnVuY3Rpb24oKXt0aGlzLmdvKDEpfSxUZS5wcm90b3R5cGUuZ2V0TWF0Y2hlZENvbXBvbmVudHM9ZnVuY3Rpb24oZSl7dmFyIHQ9ZT9lLm1hdGNoZWQ/ZTp0aGlzLnJlc29sdmUoZSkucm91dGU6dGhpcy5jdXJyZW50Um91dGU7cmV0dXJuIHQ/W10uY29uY2F0LmFwcGx5KFtdLHQubWF0Y2hlZC5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5rZXlzKGUuY29tcG9uZW50cykubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBlLmNvbXBvbmVudHNbdF19KX0pKTpbXX0sVGUucHJvdG90eXBlLnJlc29sdmU9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPUcoZSx0fHx0aGlzLmhpc3RvcnkuY3VycmVudCxuLHRoaXMpLGk9dGhpcy5tYXRjaChyLHQpLG89aS5yZWRpcmVjdGVkRnJvbXx8aS5mdWxsUGF0aDtyZXR1cm57bG9jYXRpb246cixyb3V0ZTppLGhyZWY6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPSJoYXNoIj09PW4/IiMiK3Q6dDtyZXR1cm4gZT9PKGUrIi8iK3IpOnJ9KHRoaXMuaGlzdG9yeS5iYXNlLG8sdGhpcy5tb2RlKSxub3JtYWxpemVkVG86cixyZXNvbHZlZDppfX0sVGUucHJvdG90eXBlLmFkZFJvdXRlcz1mdW5jdGlvbihlKXt0aGlzLm1hdGNoZXIuYWRkUm91dGVzKGUpLHRoaXMuaGlzdG9yeS5jdXJyZW50IT09ZyYmdGhpcy5oaXN0b3J5LnRyYW5zaXRpb25Ubyh0aGlzLmhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCkpfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhUZS5wcm90b3R5cGUsUGUpLFRlLmluc3RhbGw9QSxUZS52ZXJzaW9uPSIzLjAuMiIsRSYmd2luZG93LlZ1ZSYmd2luZG93LlZ1ZS51c2UoVGUpLHQuYT1UZX0sIjAydzEiOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwLHQucmVtb3ZlUmVzaXplTGlzdGVuZXI9dC5hZGRSZXNpemVMaXN0ZW5lcj12b2lkIDA7dmFyIHIsaT1uKCJ6K2dkIiksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07dmFyIHM9InVuZGVmaW5lZCI9PXR5cGVvZiB3aW5kb3csYT1mdW5jdGlvbihlKXt2YXIgdD1lLG49QXJyYXkuaXNBcnJheSh0KSxyPTA7Zm9yKHQ9bj90OnRbU3ltYm9sLml0ZXJhdG9yXSgpOzspe3ZhciBpO2lmKG4pe2lmKHI+PXQubGVuZ3RoKWJyZWFrO2k9dFtyKytdfWVsc2V7aWYoKHI9dC5uZXh0KCkpLmRvbmUpYnJlYWs7aT1yLnZhbHVlfXZhciBvPWkudGFyZ2V0Ll9fcmVzaXplTGlzdGVuZXJzX198fFtdO28ubGVuZ3RoJiZvLmZvckVhY2goZnVuY3Rpb24oZSl7ZSgpfSl9fTt0LmFkZFJlc2l6ZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7c3x8KGUuX19yZXNpemVMaXN0ZW5lcnNfX3x8KGUuX19yZXNpemVMaXN0ZW5lcnNfXz1bXSxlLl9fcm9fXz1uZXcgby5kZWZhdWx0KGEpLGUuX19yb19fLm9ic2VydmUoZSkpLGUuX19yZXNpemVMaXN0ZW5lcnNfXy5wdXNoKHQpKX0sdC5yZW1vdmVSZXNpemVMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe2UmJmUuX19yZXNpemVMaXN0ZW5lcnNfXyYmKGUuX19yZXNpemVMaXN0ZW5lcnNfXy5zcGxpY2UoZS5fX3Jlc2l6ZUxpc3RlbmVyc19fLmluZGV4T2YodCksMSksZS5fX3Jlc2l6ZUxpc3RlbmVyc19fLmxlbmd0aHx8ZS5fX3JvX18uZGlzY29ubmVjdCgpKX19LCIwNk9ZIjpmdW5jdGlvbihlLHQsbil7dmFyIHI9bigiM0VvKyIpKCJtZXRhIiksaT1uKCJFcWpJIiksbz1uKCJEMkwyIikscz1uKCJldkQ1IikuZixhPTAsbD1PYmplY3QuaXNFeHRlbnNpYmxlfHxmdW5jdGlvbigpe3JldHVybiEwfSx1PSFuKCJTODJsIikoZnVuY3Rpb24oKXtyZXR1cm4gbChPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKX0pLGM9ZnVuY3Rpb24oZSl7cyhlLHIse3ZhbHVlOntpOiJPIisgKythLHc6e319fSl9LGQ9ZS5leHBvcnRzPXtLRVk6cixORUVEOiExLGZhc3RLZXk6ZnVuY3Rpb24oZSx0KXtpZighaShlKSlyZXR1cm4ic3ltYm9sIj09dHlwZW9mIGU/ZTooInN0cmluZyI9PXR5cGVvZiBlPyJTIjoiUCIpK2U7aWYoIW8oZSxyKSl7aWYoIWwoZSkpcmV0dXJuIkYiO2lmKCF0KXJldHVybiJFIjtjKGUpfXJldHVybiBlW3JdLml9LGdldFdlYWs6ZnVuY3Rpb24oZSx0KXtpZighbyhlLHIpKXtpZighbChlKSlyZXR1cm4hMDtpZighdClyZXR1cm4hMTtjKGUpfXJldHVybiBlW3JdLnd9LG9uRnJlZXplOmZ1bmN0aW9uKGUpe3JldHVybiB1JiZkLk5FRUQmJmwoZSkmJiFvKGUscikmJmMoZSksZX19fSwiMVpJRiI6ZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiBuKHIpe2lmKHRbcl0pcmV0dXJuIHRbcl0uZXhwb3J0czt2YXIgaT10W3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtyXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyxuKSxpLmw9ITAsaS5leHBvcnRzfXJldHVybiBuLm09ZSxuLmM9dCxuLmQ9ZnVuY3Rpb24oZSx0LHIpe24ubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxuLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIG4uZCh0LCJhIix0KSx0fSxuLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LG4ucD0iL2Rpc3QvIixuKG4ucz0zNTgpfSh7MDpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbixyLGksbyl7dmFyIHMsYT1lPWV8fHt9LGw9dHlwZW9mIGUuZGVmYXVsdDsib2JqZWN0IiE9PWwmJiJmdW5jdGlvbiIhPT1sfHwocz1lLGE9ZS5kZWZhdWx0KTt2YXIgdSxjPSJmdW5jdGlvbiI9PXR5cGVvZiBhP2Eub3B0aW9uczphO2lmKHQmJihjLnJlbmRlcj10LnJlbmRlcixjLnN0YXRpY1JlbmRlckZucz10LnN0YXRpY1JlbmRlckZucyxjLl9jb21waWxlZD0hMCksbiYmKGMuZnVuY3Rpb25hbD0hMCksaSYmKGMuX3Njb3BlSWQ9aSksbz8odT1mdW5jdGlvbihlKXsoZT1lfHx0aGlzLiR2bm9kZSYmdGhpcy4kdm5vZGUuc3NyQ29udGV4dHx8dGhpcy5wYXJlbnQmJnRoaXMucGFyZW50LiR2bm9kZSYmdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpfHwidW5kZWZpbmVkIj09dHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX198fChlPV9fVlVFX1NTUl9DT05URVhUX18pLHImJnIuY2FsbCh0aGlzLGUpLGUmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobyl9LGMuX3NzclJlZ2lzdGVyPXUpOnImJih1PXIpLHUpe3ZhciBkPWMuZnVuY3Rpb25hbCxmPWQ/Yy5yZW5kZXI6Yy5iZWZvcmVDcmVhdGU7ZD8oYy5faW5qZWN0U3R5bGVzPXUsYy5yZW5kZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdS5jYWxsKHQpLGYoZSx0KX0pOmMuYmVmb3JlQ3JlYXRlPWY/W10uY29uY2F0KGYsdSk6W3VdfXJldHVybntlc01vZHVsZTpzLGV4cG9ydHM6YSxvcHRpb25zOmN9fX0sMTpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJmUGxsIil9LDEwOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oIklTWVciKX0sMTU6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigibXRyRCIpfSwzNTg6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHIsaT1uKDM1OSksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07by5kZWZhdWx0Lmluc3RhbGw9ZnVuY3Rpb24oZSl7ZS5jb21wb25lbnQoby5kZWZhdWx0Lm5hbWUsby5kZWZhdWx0KX0sdC5kZWZhdWx0PW8uZGVmYXVsdH0sMzU5OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oMzYwKSxpPW4ubihyKSxvPW4oMzc2KSxzPW4oMCkoaS5hLG8uYSwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PXMuZXhwb3J0c30sMzYwOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByPWEobig1MykpLGk9YShuKDM2MSkpLG89YShuKDEwKSkscz1hKG4oMSkpO2Z1bmN0aW9uIGEoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXQuZGVmYXVsdD17bmFtZToiRWxDb2xvclBpY2tlciIsbWl4aW5zOltzLmRlZmF1bHRdLHByb3BzOnt2YWx1ZTpTdHJpbmcsc2hvd0FscGhhOkJvb2xlYW4sY29sb3JGb3JtYXQ6U3RyaW5nLGRpc2FibGVkOkJvb2xlYW4sc2l6ZTpTdHJpbmcscG9wcGVyQ2xhc3M6U3RyaW5nLHByZWRlZmluZTpBcnJheX0saW5qZWN0OntlbEZvcm06e2RlZmF1bHQ6IiJ9LGVsRm9ybUl0ZW06e2RlZmF1bHQ6IiJ9fSxkaXJlY3RpdmVzOntDbGlja291dHNpZGU6by5kZWZhdWx0fSxjb21wdXRlZDp7ZGlzcGxheWVkQ29sb3I6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZXx8dGhpcy5zaG93UGFuZWxDb2xvcj90aGlzLmRpc3BsYXllZFJnYih0aGlzLmNvbG9yLHRoaXMuc2hvd0FscGhhKToidHJhbnNwYXJlbnQifSxfZWxGb3JtSXRlbVNpemU6ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5lbEZvcm1JdGVtfHx7fSkuZWxGb3JtSXRlbVNpemV9LGNvbG9yU2l6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNpemV8fHRoaXMuX2VsRm9ybUl0ZW1TaXplfHwodGhpcy4kRUxFTUVOVHx8e30pLnNpemV9LGNvbG9yRGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kaXNhYmxlZHx8KHRoaXMuZWxGb3JtfHx7fSkuZGlzYWJsZWR9fSx3YXRjaDp7dmFsdWU6ZnVuY3Rpb24oZSl7ZT9lJiZlIT09dGhpcy5jb2xvci52YWx1ZSYmdGhpcy5jb2xvci5mcm9tU3RyaW5nKGUpOnRoaXMuc2hvd1BhbmVsQ29sb3I9ITF9LGNvbG9yOntkZWVwOiEwLGhhbmRsZXI6ZnVuY3Rpb24oKXt0aGlzLnNob3dQYW5lbENvbG9yPSEwfX0sZGlzcGxheWVkQ29sb3I6ZnVuY3Rpb24oZSl7aWYodGhpcy5zaG93UGlja2VyKXt2YXIgdD1uZXcgci5kZWZhdWx0KHtlbmFibGVBbHBoYTp0aGlzLnNob3dBbHBoYSxmb3JtYXQ6dGhpcy5jb2xvckZvcm1hdH0pO3QuZnJvbVN0cmluZyh0aGlzLnZhbHVlKSxlIT09dGhpcy5kaXNwbGF5ZWRSZ2IodCx0aGlzLnNob3dBbHBoYSkmJnRoaXMuJGVtaXQoImFjdGl2ZS1jaGFuZ2UiLGUpfX19LG1ldGhvZHM6e2hhbmRsZVRyaWdnZXI6ZnVuY3Rpb24oKXt0aGlzLmNvbG9yRGlzYWJsZWR8fCh0aGlzLnNob3dQaWNrZXI9IXRoaXMuc2hvd1BpY2tlcil9LGNvbmZpcm1WYWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuY29sb3IudmFsdWU7dGhpcy4kZW1pdCgiaW5wdXQiLGUpLHRoaXMuJGVtaXQoImNoYW5nZSIsZSksdGhpcy5kaXNwYXRjaCgiRWxGb3JtSXRlbSIsImVsLmZvcm0uY2hhbmdlIixlKSx0aGlzLnNob3dQaWNrZXI9ITF9LGNsZWFyVmFsdWU6ZnVuY3Rpb24oKXt0aGlzLiRlbWl0KCJpbnB1dCIsbnVsbCksdGhpcy4kZW1pdCgiY2hhbmdlIixudWxsKSxudWxsIT09dGhpcy52YWx1ZSYmdGhpcy5kaXNwYXRjaCgiRWxGb3JtSXRlbSIsImVsLmZvcm0uY2hhbmdlIixudWxsKSx0aGlzLnNob3dQYW5lbENvbG9yPSExLHRoaXMuc2hvd1BpY2tlcj0hMSx0aGlzLnJlc2V0Q29sb3IoKX0saGlkZTpmdW5jdGlvbigpe3RoaXMuc2hvd1BpY2tlcj0hMSx0aGlzLnJlc2V0Q29sb3IoKX0scmVzZXRDb2xvcjpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy4kbmV4dFRpY2soZnVuY3Rpb24odCl7ZS52YWx1ZT9lLmNvbG9yLmZyb21TdHJpbmcoZS52YWx1ZSk6ZS5zaG93UGFuZWxDb2xvcj0hMX0pfSxkaXNwbGF5ZWRSZ2I6ZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiByLmRlZmF1bHQpKXRocm93IEVycm9yKCJjb2xvciBzaG91bGQgYmUgaW5zdGFuY2Ugb2YgQ29sb3IgQ2xhc3MiKTt2YXIgbj1lLnRvUmdiKCksaT1uLnIsbz1uLmcscz1uLmI7cmV0dXJuIHQ/InJnYmEoIitpKyIsICIrbysiLCAiK3MrIiwgIitlLmdldCgiYWxwaGEiKS8xMDArIikiOiJyZ2IoIitpKyIsICIrbysiLCAiK3MrIikifX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXMudmFsdWU7ZSYmdGhpcy5jb2xvci5mcm9tU3RyaW5nKGUpLHRoaXMucG9wcGVyRWxtPXRoaXMuJHJlZnMuZHJvcGRvd24uJGVsfSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2NvbG9yOm5ldyByLmRlZmF1bHQoe2VuYWJsZUFscGhhOnRoaXMuc2hvd0FscGhhLGZvcm1hdDp0aGlzLmNvbG9yRm9ybWF0fSksc2hvd1BpY2tlcjohMSxzaG93UGFuZWxDb2xvcjohMX19LGNvbXBvbmVudHM6e1BpY2tlckRyb3Bkb3duOmkuZGVmYXVsdH19fSwzNjE6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigzNjIpLGk9bi5uKHIpLG89bigzNzUpLHM9bigwKShpLmEsby5hLCExLG51bGwsbnVsbCxudWxsKTt0LmRlZmF1bHQ9cy5leHBvcnRzfSwzNjI6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9ZChuKDM2MykpLGk9ZChuKDM2NikpLG89ZChuKDM2OSkpLHM9ZChuKDM3MikpLGE9ZChuKDcpKSxsPWQobig1KSksdT1kKG4oNikpLGM9ZChuKDE1KSk7ZnVuY3Rpb24gZChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dC5kZWZhdWx0PXtuYW1lOiJlbC1jb2xvci1waWNrZXItZHJvcGRvd24iLG1peGluczpbYS5kZWZhdWx0LGwuZGVmYXVsdF0sY29tcG9uZW50czp7U3ZQYW5lbDpyLmRlZmF1bHQsSHVlU2xpZGVyOmkuZGVmYXVsdCxBbHBoYVNsaWRlcjpvLmRlZmF1bHQsRWxJbnB1dDp1LmRlZmF1bHQsRWxCdXR0b246Yy5kZWZhdWx0LFByZWRlZmluZTpzLmRlZmF1bHR9LHByb3BzOntjb2xvcjp7cmVxdWlyZWQ6ITB9LHNob3dBbHBoYTpCb29sZWFuLHByZWRlZmluZTpBcnJheX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntjdXN0b21JbnB1dDoiIn19LGNvbXB1dGVkOntjdXJyZW50Q29sb3I6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRwYXJlbnQ7cmV0dXJuIGUudmFsdWV8fGUuc2hvd1BhbmVsQ29sb3I/ZS5jb2xvci52YWx1ZToiIn19LG1ldGhvZHM6e2NvbmZpcm1WYWx1ZTpmdW5jdGlvbigpe3RoaXMuJGVtaXQoInBpY2siKX0saGFuZGxlQ29uZmlybTpmdW5jdGlvbigpe3RoaXMuY29sb3IuZnJvbVN0cmluZyh0aGlzLmN1c3RvbUlucHV0KX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLiRwYXJlbnQucG9wcGVyRWxtPXRoaXMucG9wcGVyRWxtPXRoaXMuJGVsLHRoaXMucmVmZXJlbmNlRWxtPXRoaXMuJHBhcmVudC4kZWx9LHdhdGNoOntzaG93UG9wcGVyOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7ITA9PT1lJiZ0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3ZhciBlPXQuJHJlZnMsbj1lLnNsLHI9ZS5odWUsaT1lLmFscGhhO24mJm4udXBkYXRlKCksciYmci51cGRhdGUoKSxpJiZpLnVwZGF0ZSgpfSl9LGN1cnJlbnRDb2xvcjp7aW1tZWRpYXRlOiEwLGhhbmRsZXI6ZnVuY3Rpb24oZSl7dGhpcy5jdXN0b21JbnB1dD1lfX19fX0sMzYzOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oMzY0KSxpPW4ubihyKSxvPW4oMzY1KSxzPW4oMCkoaS5hLG8uYSwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PXMuZXhwb3J0c30sMzY0OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9big0Niksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07dC5kZWZhdWx0PXtuYW1lOiJlbC1zbC1wYW5lbCIscHJvcHM6e2NvbG9yOntyZXF1aXJlZDohMH19LGNvbXB1dGVkOntjb2xvclZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJue2h1ZTp0aGlzLmNvbG9yLmdldCgiaHVlIiksdmFsdWU6dGhpcy5jb2xvci5nZXQoInZhbHVlIil9fX0sd2F0Y2g6e2NvbG9yVmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnVwZGF0ZSgpfX0sbWV0aG9kczp7dXBkYXRlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jb2xvci5nZXQoInNhdHVyYXRpb24iKSx0PXRoaXMuY29sb3IuZ2V0KCJ2YWx1ZSIpLG49dGhpcy4kZWwscj1uLmNsaWVudFdpZHRoLGk9bi5jbGllbnRIZWlnaHQ7dGhpcy5jdXJzb3JMZWZ0PWUqci8xMDAsdGhpcy5jdXJzb3JUb3A9KDEwMC10KSppLzEwMCx0aGlzLmJhY2tncm91bmQ9ImhzbCgiK3RoaXMuY29sb3IuZ2V0KCJodWUiKSsiLCAxMDAlLCA1MCUpIn0saGFuZGxlRHJhZzpmdW5jdGlvbihlKXt2YXIgdD10aGlzLiRlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuPWUuY2xpZW50WC10LmxlZnQscj1lLmNsaWVudFktdC50b3A7bj1NYXRoLm1heCgwLG4pLG49TWF0aC5taW4obix0LndpZHRoKSxyPU1hdGgubWF4KDAscikscj1NYXRoLm1pbihyLHQuaGVpZ2h0KSx0aGlzLmN1cnNvckxlZnQ9bix0aGlzLmN1cnNvclRvcD1yLHRoaXMuY29sb3Iuc2V0KHtzYXR1cmF0aW9uOm4vdC53aWR0aCoxMDAsdmFsdWU6MTAwLXIvdC5oZWlnaHQqMTAwfSl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczsoMCxvLmRlZmF1bHQpKHRoaXMuJGVsLHtkcmFnOmZ1bmN0aW9uKHQpe2UuaGFuZGxlRHJhZyh0KX0sZW5kOmZ1bmN0aW9uKHQpe2UuaGFuZGxlRHJhZyh0KX19KSx0aGlzLnVwZGF0ZSgpfSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnNvclRvcDowLGN1cnNvckxlZnQ6MCxiYWNrZ3JvdW5kOiJoc2woMCwgMTAwJSwgNTAlKSJ9fX19LDM2NTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRjcmVhdGVFbGVtZW50LHQ9dGhpcy5fc2VsZi5fY3x8ZTtyZXR1cm4gdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLWNvbG9yLXN2cGFuZWwiLHN0eWxlOntiYWNrZ3JvdW5kQ29sb3I6dGhpcy5iYWNrZ3JvdW5kfX0sW3QoImRpdiIse3N0YXRpY0NsYXNzOiJlbC1jb2xvci1zdnBhbmVsX193aGl0ZSJ9KSx0KCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtY29sb3Itc3ZwYW5lbF9fYmxhY2sifSksdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLWNvbG9yLXN2cGFuZWxfX2N1cnNvciIsc3R5bGU6e3RvcDp0aGlzLmN1cnNvclRvcCsicHgiLGxlZnQ6dGhpcy5jdXJzb3JMZWZ0KyJweCJ9fSxbdCgiZGl2IildKV0pfSxzdGF0aWNSZW5kZXJGbnM6W119O3QuYT1yfSwzNjY6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigzNjcpLGk9bi5uKHIpLG89bigzNjgpLHM9bigwKShpLmEsby5hLCExLG51bGwsbnVsbCxudWxsKTt0LmRlZmF1bHQ9cy5leHBvcnRzfSwzNjc6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHIsaT1uKDQ2KSxvPShyPWkpJiZyLl9fZXNNb2R1bGU/cjp7ZGVmYXVsdDpyfTt0LmRlZmF1bHQ9e25hbWU6ImVsLWNvbG9yLWh1ZS1zbGlkZXIiLHByb3BzOntjb2xvcjp7cmVxdWlyZWQ6ITB9LHZlcnRpY2FsOkJvb2xlYW59LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57dGh1bWJMZWZ0OjAsdGh1bWJUb3A6MH19LGNvbXB1dGVkOntodWVWYWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbG9yLmdldCgiaHVlIil9fSx3YXRjaDp7aHVlVmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnVwZGF0ZSgpfX0sbWV0aG9kczp7aGFuZGxlQ2xpY2s6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy4kcmVmcy50aHVtYjtlLnRhcmdldCE9PXQmJnRoaXMuaGFuZGxlRHJhZyhlKX0saGFuZGxlRHJhZzpmdW5jdGlvbihlKXt2YXIgdD10aGlzLiRlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuPXRoaXMuJHJlZnMudGh1bWIscj12b2lkIDA7aWYodGhpcy52ZXJ0aWNhbCl7dmFyIGk9ZS5jbGllbnRZLXQudG9wO2k9TWF0aC5taW4oaSx0LmhlaWdodC1uLm9mZnNldEhlaWdodC8yKSxpPU1hdGgubWF4KG4ub2Zmc2V0SGVpZ2h0LzIsaSkscj1NYXRoLnJvdW5kKChpLW4ub2Zmc2V0SGVpZ2h0LzIpLyh0LmhlaWdodC1uLm9mZnNldEhlaWdodCkqMzYwKX1lbHNle3ZhciBvPWUuY2xpZW50WC10LmxlZnQ7bz1NYXRoLm1pbihvLHQud2lkdGgtbi5vZmZzZXRXaWR0aC8yKSxvPU1hdGgubWF4KG4ub2Zmc2V0V2lkdGgvMixvKSxyPU1hdGgucm91bmQoKG8tbi5vZmZzZXRXaWR0aC8yKS8odC53aWR0aC1uLm9mZnNldFdpZHRoKSozNjApfXRoaXMuY29sb3Iuc2V0KCJodWUiLHIpfSxnZXRUaHVtYkxlZnQ6ZnVuY3Rpb24oKXtpZih0aGlzLnZlcnRpY2FsKXJldHVybiAwO3ZhciBlPXRoaXMuJGVsLHQ9dGhpcy5jb2xvci5nZXQoImh1ZSIpO2lmKCFlKXJldHVybiAwO3ZhciBuPXRoaXMuJHJlZnMudGh1bWI7cmV0dXJuIE1hdGgucm91bmQodCooZS5vZmZzZXRXaWR0aC1uLm9mZnNldFdpZHRoLzIpLzM2MCl9LGdldFRodW1iVG9wOmZ1bmN0aW9uKCl7aWYoIXRoaXMudmVydGljYWwpcmV0dXJuIDA7dmFyIGU9dGhpcy4kZWwsdD10aGlzLmNvbG9yLmdldCgiaHVlIik7aWYoIWUpcmV0dXJuIDA7dmFyIG49dGhpcy4kcmVmcy50aHVtYjtyZXR1cm4gTWF0aC5yb3VuZCh0KihlLm9mZnNldEhlaWdodC1uLm9mZnNldEhlaWdodC8yKS8zNjApfSx1cGRhdGU6ZnVuY3Rpb24oKXt0aGlzLnRodW1iTGVmdD10aGlzLmdldFRodW1iTGVmdCgpLHRoaXMudGh1bWJUb3A9dGhpcy5nZXRUaHVtYlRvcCgpfX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLiRyZWZzLG49dC5iYXIscj10LnRodW1iLGk9e2RyYWc6ZnVuY3Rpb24odCl7ZS5oYW5kbGVEcmFnKHQpfSxlbmQ6ZnVuY3Rpb24odCl7ZS5oYW5kbGVEcmFnKHQpfX07KDAsby5kZWZhdWx0KShuLGkpLCgwLG8uZGVmYXVsdCkocixpKSx0aGlzLnVwZGF0ZSgpfX19LDM2ODpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRjcmVhdGVFbGVtZW50LHQ9dGhpcy5fc2VsZi5fY3x8ZTtyZXR1cm4gdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLWNvbG9yLWh1ZS1zbGlkZXIiLGNsYXNzOnsiaXMtdmVydGljYWwiOnRoaXMudmVydGljYWx9fSxbdCgiZGl2Iix7cmVmOiJiYXIiLHN0YXRpY0NsYXNzOiJlbC1jb2xvci1odWUtc2xpZGVyX19iYXIiLG9uOntjbGljazp0aGlzLmhhbmRsZUNsaWNrfX0pLHQoImRpdiIse3JlZjoidGh1bWIiLHN0YXRpY0NsYXNzOiJlbC1jb2xvci1odWUtc2xpZGVyX190aHVtYiIsc3R5bGU6e2xlZnQ6dGhpcy50aHVtYkxlZnQrInB4Iix0b3A6dGhpcy50aHVtYlRvcCsicHgifX0pXSl9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9LDM2OTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKDM3MCksaT1uLm4ociksbz1uKDM3MSkscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDM3MDpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcixpPW4oNDYpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O3QuZGVmYXVsdD17bmFtZToiZWwtY29sb3ItYWxwaGEtc2xpZGVyIixwcm9wczp7Y29sb3I6e3JlcXVpcmVkOiEwfSx2ZXJ0aWNhbDpCb29sZWFufSx3YXRjaDp7ImNvbG9yLl9hbHBoYSI6ZnVuY3Rpb24oKXt0aGlzLnVwZGF0ZSgpfSwiY29sb3IudmFsdWUiOmZ1bmN0aW9uKCl7dGhpcy51cGRhdGUoKX19LG1ldGhvZHM6e2hhbmRsZUNsaWNrOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuJHJlZnMudGh1bWI7ZS50YXJnZXQhPT10JiZ0aGlzLmhhbmRsZURyYWcoZSl9LGhhbmRsZURyYWc6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy4kZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbj10aGlzLiRyZWZzLnRodW1iO2lmKHRoaXMudmVydGljYWwpe3ZhciByPWUuY2xpZW50WS10LnRvcDtyPU1hdGgubWF4KG4ub2Zmc2V0SGVpZ2h0LzIscikscj1NYXRoLm1pbihyLHQuaGVpZ2h0LW4ub2Zmc2V0SGVpZ2h0LzIpLHRoaXMuY29sb3Iuc2V0KCJhbHBoYSIsTWF0aC5yb3VuZCgoci1uLm9mZnNldEhlaWdodC8yKS8odC5oZWlnaHQtbi5vZmZzZXRIZWlnaHQpKjEwMCkpfWVsc2V7dmFyIGk9ZS5jbGllbnRYLXQubGVmdDtpPU1hdGgubWF4KG4ub2Zmc2V0V2lkdGgvMixpKSxpPU1hdGgubWluKGksdC53aWR0aC1uLm9mZnNldFdpZHRoLzIpLHRoaXMuY29sb3Iuc2V0KCJhbHBoYSIsTWF0aC5yb3VuZCgoaS1uLm9mZnNldFdpZHRoLzIpLyh0LndpZHRoLW4ub2Zmc2V0V2lkdGgpKjEwMCkpfX0sZ2V0VGh1bWJMZWZ0OmZ1bmN0aW9uKCl7aWYodGhpcy52ZXJ0aWNhbClyZXR1cm4gMDt2YXIgZT10aGlzLiRlbCx0PXRoaXMuY29sb3IuX2FscGhhO2lmKCFlKXJldHVybiAwO3ZhciBuPXRoaXMuJHJlZnMudGh1bWI7cmV0dXJuIE1hdGgucm91bmQodCooZS5vZmZzZXRXaWR0aC1uLm9mZnNldFdpZHRoLzIpLzEwMCl9LGdldFRodW1iVG9wOmZ1bmN0aW9uKCl7aWYoIXRoaXMudmVydGljYWwpcmV0dXJuIDA7dmFyIGU9dGhpcy4kZWwsdD10aGlzLmNvbG9yLl9hbHBoYTtpZighZSlyZXR1cm4gMDt2YXIgbj10aGlzLiRyZWZzLnRodW1iO3JldHVybiBNYXRoLnJvdW5kKHQqKGUub2Zmc2V0SGVpZ2h0LW4ub2Zmc2V0SGVpZ2h0LzIpLzEwMCl9LGdldEJhY2tncm91bmQ6ZnVuY3Rpb24oKXtpZih0aGlzLmNvbG9yJiZ0aGlzLmNvbG9yLnZhbHVlKXt2YXIgZT10aGlzLmNvbG9yLnRvUmdiKCksdD1lLnIsbj1lLmcscj1lLmI7cmV0dXJuImxpbmVhci1ncmFkaWVudCh0byByaWdodCwgcmdiYSgiK3QrIiwgIituKyIsICIrcisiLCAwKSAwJSwgcmdiYSgiK3QrIiwgIituKyIsICIrcisiLCAxKSAxMDAlKSJ9cmV0dXJuIG51bGx9LHVwZGF0ZTpmdW5jdGlvbigpe3RoaXMudGh1bWJMZWZ0PXRoaXMuZ2V0VGh1bWJMZWZ0KCksdGhpcy50aHVtYlRvcD10aGlzLmdldFRodW1iVG9wKCksdGhpcy5iYWNrZ3JvdW5kPXRoaXMuZ2V0QmFja2dyb3VuZCgpfX0sZGF0YTpmdW5jdGlvbigpe3JldHVybnt0aHVtYkxlZnQ6MCx0aHVtYlRvcDowLGJhY2tncm91bmQ6bnVsbH19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy4kcmVmcyxuPXQuYmFyLHI9dC50aHVtYixpPXtkcmFnOmZ1bmN0aW9uKHQpe2UuaGFuZGxlRHJhZyh0KX0sZW5kOmZ1bmN0aW9uKHQpe2UuaGFuZGxlRHJhZyh0KX19OygwLG8uZGVmYXVsdCkobixpKSwoMCxvLmRlZmF1bHQpKHIsaSksdGhpcy51cGRhdGUoKX19fSwzNzE6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kY3JlYXRlRWxlbWVudCx0PXRoaXMuX3NlbGYuX2N8fGU7cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJlbC1jb2xvci1hbHBoYS1zbGlkZXIiLGNsYXNzOnsiaXMtdmVydGljYWwiOnRoaXMudmVydGljYWx9fSxbdCgiZGl2Iix7cmVmOiJiYXIiLHN0YXRpY0NsYXNzOiJlbC1jb2xvci1hbHBoYS1zbGlkZXJfX2JhciIsc3R5bGU6e2JhY2tncm91bmQ6dGhpcy5iYWNrZ3JvdW5kfSxvbjp7Y2xpY2s6dGhpcy5oYW5kbGVDbGlja319KSx0KCJkaXYiLHtyZWY6InRodW1iIixzdGF0aWNDbGFzczoiZWwtY29sb3ItYWxwaGEtc2xpZGVyX190aHVtYiIsc3R5bGU6e2xlZnQ6dGhpcy50aHVtYkxlZnQrInB4Iix0b3A6dGhpcy50aHVtYlRvcCsicHgifX0pXSl9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9LDM3MjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKDM3MyksaT1uLm4ociksbz1uKDM3NCkscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDM3MzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcixpPW4oNTMpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O3QuZGVmYXVsdD17cHJvcHM6e2NvbG9yczp7dHlwZTpBcnJheSxyZXF1aXJlZDohMH0sY29sb3I6e3JlcXVpcmVkOiEwfX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntyZ2JhQ29sb3JzOnRoaXMucGFyc2VDb2xvcnModGhpcy5jb2xvcnMsdGhpcy5jb2xvcil9fSxtZXRob2RzOntoYW5kbGVTZWxlY3Q6ZnVuY3Rpb24oZSl7dGhpcy5jb2xvci5mcm9tU3RyaW5nKHRoaXMuY29sb3JzW2VdKX0scGFyc2VDb2xvcnM6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5tYXAoZnVuY3Rpb24oZSl7dmFyIG49bmV3IG8uZGVmYXVsdDtyZXR1cm4gbi5lbmFibGVBbHBoYT0hMCxuLmZvcm1hdD0icmdiYSIsbi5mcm9tU3RyaW5nKGUpLG4uc2VsZWN0ZWQ9bi52YWx1ZT09PXQudmFsdWUsbn0pfX0sd2F0Y2g6eyIkcGFyZW50LmN1cnJlbnRDb2xvciI6ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG8uZGVmYXVsdDt0LmZyb21TdHJpbmcoZSksdGhpcy5yZ2JhQ29sb3JzLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5zZWxlY3RlZD10LmNvbXBhcmUoZSl9KX0sY29sb3JzOmZ1bmN0aW9uKGUpe3RoaXMucmdiYUNvbG9ycz10aGlzLnBhcnNlQ29sb3JzKGUsdGhpcy5jb2xvcil9LGNvbG9yOmZ1bmN0aW9uKGUpe3RoaXMucmdiYUNvbG9ycz10aGlzLnBhcnNlQ29sb3JzKHRoaXMuY29sb3JzLGUpfX19fSwzNzQ6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtY29sb3ItcHJlZGVmaW5lIn0sW24oImRpdiIse3N0YXRpY0NsYXNzOiJlbC1jb2xvci1wcmVkZWZpbmVfX2NvbG9ycyJ9LGUuX2woZS5yZ2JhQ29sb3JzLGZ1bmN0aW9uKHQscil7cmV0dXJuIG4oImRpdiIse2tleTplLmNvbG9yc1tyXSxzdGF0aWNDbGFzczoiZWwtY29sb3ItcHJlZGVmaW5lX19jb2xvci1zZWxlY3RvciIsY2xhc3M6e3NlbGVjdGVkOnQuc2VsZWN0ZWQsImlzLWFscGhhIjp0Ll9hbHBoYTwxMDB9LG9uOntjbGljazpmdW5jdGlvbih0KXtlLmhhbmRsZVNlbGVjdChyKX19fSxbbigiZGl2Iix7c3R5bGU6eyJiYWNrZ3JvdW5kLWNvbG9yIjp0LnZhbHVlfX0pXSl9KSldKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn0sMzc1OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbigidHJhbnNpdGlvbiIse2F0dHJzOntuYW1lOiJlbC16b29tLWluLXRvcCJ9LG9uOnsiYWZ0ZXItbGVhdmUiOmUuZG9EZXN0cm95fX0sW24oImRpdiIse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOmUuc2hvd1BvcHBlcixleHByZXNzaW9uOiJzaG93UG9wcGVyIn1dLHN0YXRpY0NsYXNzOiJlbC1jb2xvci1kcm9wZG93biJ9LFtuKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtY29sb3ItZHJvcGRvd25fX21haW4td3JhcHBlciJ9LFtuKCJodWUtc2xpZGVyIix7cmVmOiJodWUiLHN0YXRpY1N0eWxlOntmbG9hdDoicmlnaHQifSxhdHRyczp7Y29sb3I6ZS5jb2xvcix2ZXJ0aWNhbDoiIn19KSxuKCJzdi1wYW5lbCIse3JlZjoic2wiLGF0dHJzOntjb2xvcjplLmNvbG9yfX0pXSwxKSxlLnNob3dBbHBoYT9uKCJhbHBoYS1zbGlkZXIiLHtyZWY6ImFscGhhIixhdHRyczp7Y29sb3I6ZS5jb2xvcn19KTplLl9lKCksZS5wcmVkZWZpbmU/bigicHJlZGVmaW5lIix7YXR0cnM6e2NvbG9yOmUuY29sb3IsY29sb3JzOmUucHJlZGVmaW5lfX0pOmUuX2UoKSxuKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtY29sb3ItZHJvcGRvd25fX2J0bnMifSxbbigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC1jb2xvci1kcm9wZG93bl9fdmFsdWUifSxbbigiZWwtaW5wdXQiLHthdHRyczp7InZhbGlkYXRlLWV2ZW50IjohMSxzaXplOiJtaW5pIn0sb246e2JsdXI6ZS5oYW5kbGVDb25maXJtfSxuYXRpdmVPbjp7a2V5dXA6ZnVuY3Rpb24odCl7aWYoISgiYnV0dG9uImluIHQpJiZlLl9rKHQua2V5Q29kZSwiZW50ZXIiLDEzLHQua2V5KSlyZXR1cm4gbnVsbDtlLmhhbmRsZUNvbmZpcm0odCl9fSxtb2RlbDp7dmFsdWU6ZS5jdXN0b21JbnB1dCxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmN1c3RvbUlucHV0PXR9LGV4cHJlc3Npb246ImN1c3RvbUlucHV0In19KV0sMSksbigiZWwtYnV0dG9uIix7c3RhdGljQ2xhc3M6ImVsLWNvbG9yLWRyb3Bkb3duX19saW5rLWJ0biIsYXR0cnM6e3NpemU6Im1pbmkiLHR5cGU6InRleHQifSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS4kZW1pdCgiY2xlYXIiKX19fSxbZS5fdigiXG4gICAgICAgICIrZS5fcyhlLnQoImVsLmNvbG9ycGlja2VyLmNsZWFyIikpKyJcbiAgICAgICIpXSksbigiZWwtYnV0dG9uIix7c3RhdGljQ2xhc3M6ImVsLWNvbG9yLWRyb3Bkb3duX19idG4iLGF0dHJzOntwbGFpbjoiIixzaXplOiJtaW5pIn0sb246e2NsaWNrOmUuY29uZmlybVZhbHVlfX0sW2UuX3YoIlxuICAgICAgICAiK2UuX3MoZS50KCJlbC5jb2xvcnBpY2tlci5jb25maXJtIikpKyJcbiAgICAgICIpXSldLDEpXSwxKV0pfSxzdGF0aWNSZW5kZXJGbnM6W119O3QuYT1yfSwzNzY6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKCJkaXYiLHtkaXJlY3RpdmVzOlt7bmFtZToiY2xpY2tvdXRzaWRlIixyYXdOYW1lOiJ2LWNsaWNrb3V0c2lkZSIsdmFsdWU6ZS5oaWRlLGV4cHJlc3Npb246ImhpZGUifV0sY2xhc3M6WyJlbC1jb2xvci1waWNrZXIiLGUuY29sb3JEaXNhYmxlZD8iaXMtZGlzYWJsZWQiOiIiLGUuY29sb3JTaXplPyJlbC1jb2xvci1waWNrZXItLSIrZS5jb2xvclNpemU6IiJdfSxbZS5jb2xvckRpc2FibGVkP24oImRpdiIse3N0YXRpY0NsYXNzOiJlbC1jb2xvci1waWNrZXJfX21hc2sifSk6ZS5fZSgpLG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC1jb2xvci1waWNrZXJfX3RyaWdnZXIiLG9uOntjbGljazplLmhhbmRsZVRyaWdnZXJ9fSxbbigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC1jb2xvci1waWNrZXJfX2NvbG9yIixjbGFzczp7ImlzLWFscGhhIjplLnNob3dBbHBoYX19LFtuKCJzcGFuIix7c3RhdGljQ2xhc3M6ImVsLWNvbG9yLXBpY2tlcl9fY29sb3ItaW5uZXIiLHN0eWxlOntiYWNrZ3JvdW5kQ29sb3I6ZS5kaXNwbGF5ZWRDb2xvcn19KSxlLnZhbHVlfHxlLnNob3dQYW5lbENvbG9yP2UuX2UoKTpuKCJzcGFuIix7c3RhdGljQ2xhc3M6ImVsLWNvbG9yLXBpY2tlcl9fZW1wdHkgZWwtaWNvbi1jbG9zZSJ9KV0pLG4oInNwYW4iLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTplLnZhbHVlfHxlLnNob3dQYW5lbENvbG9yLGV4cHJlc3Npb246InZhbHVlIHx8IHNob3dQYW5lbENvbG9yIn1dLHN0YXRpY0NsYXNzOiJlbC1jb2xvci1waWNrZXJfX2ljb24gZWwtaWNvbi1hcnJvdy1kb3duIn0pXSksbigicGlja2VyLWRyb3Bkb3duIix7cmVmOiJkcm9wZG93biIsY2xhc3M6WyJlbC1jb2xvci1waWNrZXJfX3BhbmVsIixlLnBvcHBlckNsYXNzfHwiIl0sYXR0cnM6e2NvbG9yOmUuY29sb3IsInNob3ctYWxwaGEiOmUuc2hvd0FscGhhLHByZWRlZmluZTplLnByZWRlZmluZX0sb246e3BpY2s6ZS5jb25maXJtVmFsdWUsY2xlYXI6ZS5jbGVhclZhbHVlfSxtb2RlbDp7dmFsdWU6ZS5zaG93UGlja2VyLGNhbGxiYWNrOmZ1bmN0aW9uKHQpe2Uuc2hvd1BpY2tlcj10fSxleHByZXNzaW9uOiJzaG93UGlja2VyIn19KV0sMSl9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9LDQ6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiNyt1VyIpfSw0NjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMCx0LmRlZmF1bHQ9ZnVuY3Rpb24oZSx0KXtpZighby5kZWZhdWx0LnByb3RvdHlwZS4kaXNTZXJ2ZXIpe3ZhciBuPWZ1bmN0aW9uKGUpe3QuZHJhZyYmdC5kcmFnKGUpfSxyPWZ1bmN0aW9uIGUocil7ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigibW91c2Vtb3ZlIixuKSxkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCJtb3VzZXVwIixlKSxkb2N1bWVudC5vbnNlbGVjdHN0YXJ0PW51bGwsZG9jdW1lbnQub25kcmFnc3RhcnQ9bnVsbCxzPSExLHQuZW5kJiZ0LmVuZChyKX07ZS5hZGRFdmVudExpc3RlbmVyKCJtb3VzZWRvd24iLGZ1bmN0aW9uKGUpe3N8fChkb2N1bWVudC5vbnNlbGVjdHN0YXJ0PWZ1bmN0aW9uKCl7cmV0dXJuITF9LGRvY3VtZW50Lm9uZHJhZ3N0YXJ0PWZ1bmN0aW9uKCl7cmV0dXJuITF9LGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlbW92ZSIsbiksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigibW91c2V1cCIscikscz0hMCx0LnN0YXJ0JiZ0LnN0YXJ0KGUpKX0pfX07dmFyIHIsaT1uKDQpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O3ZhciBzPSExfSw1OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oInkrN3giKX0sNTM6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmInN5bWJvbCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIGV9O3ZhciBpPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm5bZSx0Km4vKChlPSgyLXQpKm4pPDE/ZToyLWUpfHwwLGUvMl19LG89ZnVuY3Rpb24oZSx0KXt2YXIgbjsic3RyaW5nIj09dHlwZW9mKG49ZSkmJi0xIT09bi5pbmRleE9mKCIuIikmJjE9PT1wYXJzZUZsb2F0KG4pJiYoZT0iMTAwJSIpO3ZhciByPWZ1bmN0aW9uKGUpe3JldHVybiJzdHJpbmciPT10eXBlb2YgZSYmLTEhPT1lLmluZGV4T2YoIiUiKX0oZSk7cmV0dXJuIGU9TWF0aC5taW4odCxNYXRoLm1heCgwLHBhcnNlRmxvYXQoZSkpKSxyJiYoZT1wYXJzZUludChlKnQsMTApLzEwMCksTWF0aC5hYnMoZS10KTwxZS02PzE6ZSV0L3BhcnNlRmxvYXQodCl9LHM9ezEwOiJBIiwxMToiQiIsMTI6IkMiLDEzOiJEIiwxNDoiRSIsMTU6IkYifSxhPXtBOjEwLEI6MTEsQzoxMixEOjEzLEU6MTQsRjoxNX0sbD1mdW5jdGlvbihlKXtyZXR1cm4gMj09PWUubGVuZ3RoPzE2KihhW2VbMF0udG9VcHBlckNhc2UoKV18fCtlWzBdKSsoYVtlWzFdLnRvVXBwZXJDYXNlKCldfHwrZVsxXSk6YVtlWzFdLnRvVXBwZXJDYXNlKCldfHwrZVsxXX0sdT1mdW5jdGlvbihlLHQsbil7ZT1vKGUsMjU1KSx0PW8odCwyNTUpLG49byhuLDI1NSk7dmFyIHIsaT1NYXRoLm1heChlLHQsbikscz1NYXRoLm1pbihlLHQsbiksYT12b2lkIDAsbD1pLHU9aS1zO2lmKHI9MD09PWk/MDp1L2ksaT09PXMpYT0wO2Vsc2V7c3dpdGNoKGkpe2Nhc2UgZTphPSh0LW4pL3UrKHQ8bj82OjApO2JyZWFrO2Nhc2UgdDphPShuLWUpL3UrMjticmVhaztjYXNlIG46YT0oZS10KS91KzR9YS89Nn1yZXR1cm57aDozNjAqYSxzOjEwMCpyLHY6MTAwKmx9fSxjPWZ1bmN0aW9uKGUsdCxuKXtlPTYqbyhlLDM2MCksdD1vKHQsMTAwKSxuPW8obiwxMDApO3ZhciByPU1hdGguZmxvb3IoZSksaT1lLXIscz1uKigxLXQpLGE9biooMS1pKnQpLGw9biooMS0oMS1pKSp0KSx1PXIlNixjPVtuLGEscyxzLGwsbl1bdV0sZD1bbCxuLG4sYSxzLHNdW3VdLGY9W3MscyxsLG4sbixhXVt1XTtyZXR1cm57cjpNYXRoLnJvdW5kKDI1NSpjKSxnOk1hdGgucm91bmQoMjU1KmQpLGI6TWF0aC5yb3VuZCgyNTUqZil9fSxkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXtmb3IodmFyIG4gaW4gZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX0odGhpcyxlKSx0aGlzLl9odWU9MCx0aGlzLl9zYXR1cmF0aW9uPTEwMCx0aGlzLl92YWx1ZT0xMDAsdGhpcy5fYWxwaGE9MTAwLHRoaXMuZW5hYmxlQWxwaGE9ITEsdGhpcy5mb3JtYXQ9ImhleCIsdGhpcy52YWx1ZT0iIix0PXR8fHt9KXQuaGFzT3duUHJvcGVydHkobikmJih0aGlzW25dPXRbbl0pO3RoaXMuZG9PbkNoYW5nZSgpfXJldHVybiBlLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oZSx0KXtpZigxIT09YXJndW1lbnRzLmxlbmd0aHx8Im9iamVjdCIhPT0odm9pZCAwPT09ZT8idW5kZWZpbmVkIjpyKGUpKSl0aGlzWyJfIitlXT10LHRoaXMuZG9PbkNoYW5nZSgpO2Vsc2UgZm9yKHZhciBuIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShuKSYmdGhpcy5zZXQobixlW25dKX0sZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzWyJfIitlXX0sZS5wcm90b3R5cGUudG9SZ2I9ZnVuY3Rpb24oKXtyZXR1cm4gYyh0aGlzLl9odWUsdGhpcy5fc2F0dXJhdGlvbix0aGlzLl92YWx1ZSl9LGUucHJvdG90eXBlLmZyb21TdHJpbmc9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZighZSlyZXR1cm4gdGhpcy5faHVlPTAsdGhpcy5fc2F0dXJhdGlvbj0xMDAsdGhpcy5fdmFsdWU9MTAwLHZvaWQgdGhpcy5kb09uQ2hhbmdlKCk7dmFyIG49ZnVuY3Rpb24oZSxuLHIpe3QuX2h1ZT1NYXRoLm1heCgwLE1hdGgubWluKDM2MCxlKSksdC5fc2F0dXJhdGlvbj1NYXRoLm1heCgwLE1hdGgubWluKDEwMCxuKSksdC5fdmFsdWU9TWF0aC5tYXgoMCxNYXRoLm1pbigxMDAscikpLHQuZG9PbkNoYW5nZSgpfTtpZigtMSE9PWUuaW5kZXhPZigiaHNsIikpe3ZhciByPWUucmVwbGFjZSgvaHNsYXxoc2x8XCh8XCkvZ20sIiIpLnNwbGl0KC9cc3wsL2cpLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4iIiE9PWV9KS5tYXAoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD4yP3BhcnNlRmxvYXQoZSk6cGFyc2VJbnQoZSwxMCl9KTtpZig0PT09ci5sZW5ndGg/dGhpcy5fYWxwaGE9TWF0aC5mbG9vcigxMDAqcGFyc2VGbG9hdChyWzNdKSk6Mz09PXIubGVuZ3RoJiYodGhpcy5fYWxwaGE9MTAwKSxyLmxlbmd0aD49Myl7dmFyIGk9ZnVuY3Rpb24oZSx0LG4pe24vPTEwMDt2YXIgcj10Lz0xMDAsaT1NYXRoLm1heChuLC4wMSk7cmV0dXJuIHQqPShuKj0yKTw9MT9uOjItbixyKj1pPD0xP2k6Mi1pLHtoOmUsczoxMDAqKDA9PT1uPzIqci8oaStyKToyKnQvKG4rdCkpLHY6KG4rdCkvMioxMDB9fShyWzBdLHJbMV0sclsyXSk7bihpLmgsaS5zLGkudil9fWVsc2UgaWYoLTEhPT1lLmluZGV4T2YoImhzdiIpKXt2YXIgbz1lLnJlcGxhY2UoL2hzdmF8aHN2fFwofFwpL2dtLCIiKS5zcGxpdCgvXHN8LC9nKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIiIhPT1lfSkubWFwKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ+Mj9wYXJzZUZsb2F0KGUpOnBhcnNlSW50KGUsMTApfSk7ND09PW8ubGVuZ3RoP3RoaXMuX2FscGhhPU1hdGguZmxvb3IoMTAwKnBhcnNlRmxvYXQob1szXSkpOjM9PT1vLmxlbmd0aCYmKHRoaXMuX2FscGhhPTEwMCksby5sZW5ndGg+PTMmJm4ob1swXSxvWzFdLG9bMl0pfWVsc2UgaWYoLTEhPT1lLmluZGV4T2YoInJnYiIpKXt2YXIgcz1lLnJlcGxhY2UoL3JnYmF8cmdifFwofFwpL2dtLCIiKS5zcGxpdCgvXHN8LC9nKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIiIhPT1lfSkubWFwKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ+Mj9wYXJzZUZsb2F0KGUpOnBhcnNlSW50KGUsMTApfSk7aWYoND09PXMubGVuZ3RoP3RoaXMuX2FscGhhPU1hdGguZmxvb3IoMTAwKnBhcnNlRmxvYXQoc1szXSkpOjM9PT1zLmxlbmd0aCYmKHRoaXMuX2FscGhhPTEwMCkscy5sZW5ndGg+PTMpe3ZhciBhPXUoc1swXSxzWzFdLHNbMl0pO24oYS5oLGEucyxhLnYpfX1lbHNlIGlmKC0xIT09ZS5pbmRleE9mKCIjIikpe3ZhciBjPWUucmVwbGFjZSgiIyIsIiIpLnRyaW0oKSxkPXZvaWQgMCxmPXZvaWQgMCxoPXZvaWQgMDszPT09Yy5sZW5ndGg/KGQ9bChjWzBdK2NbMF0pLGY9bChjWzFdK2NbMV0pLGg9bChjWzJdK2NbMl0pKTo2IT09Yy5sZW5ndGgmJjghPT1jLmxlbmd0aHx8KGQ9bChjLnN1YnN0cmluZygwLDIpKSxmPWwoYy5zdWJzdHJpbmcoMiw0KSksaD1sKGMuc3Vic3RyaW5nKDQsNikpKSw4PT09Yy5sZW5ndGg/dGhpcy5fYWxwaGE9TWF0aC5mbG9vcihsKGMuc3Vic3RyaW5nKDYpKS8yNTUqMTAwKTozIT09Yy5sZW5ndGgmJjYhPT1jLmxlbmd0aHx8KHRoaXMuX2FscGhhPTEwMCk7dmFyIHA9dShkLGYsaCk7bihwLmgscC5zLHAudil9fSxlLnByb3RvdHlwZS5jb21wYXJlPWZ1bmN0aW9uKGUpe3JldHVybiBNYXRoLmFicyhlLl9odWUtdGhpcy5faHVlKTwyJiZNYXRoLmFicyhlLl9zYXR1cmF0aW9uLXRoaXMuX3NhdHVyYXRpb24pPDEmJk1hdGguYWJzKGUuX3ZhbHVlLXRoaXMuX3ZhbHVlKTwxJiZNYXRoLmFicyhlLl9hbHBoYS10aGlzLl9hbHBoYSk8MX0sZS5wcm90b3R5cGUuZG9PbkNoYW5nZT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuX2h1ZSx0PXRoaXMuX3NhdHVyYXRpb24sbj10aGlzLl92YWx1ZSxyPXRoaXMuX2FscGhhLG89dGhpcy5mb3JtYXQ7aWYodGhpcy5lbmFibGVBbHBoYSlzd2l0Y2gobyl7Y2FzZSJoc2wiOnZhciBhPWkoZSx0LzEwMCxuLzEwMCk7dGhpcy52YWx1ZT0iaHNsYSgiK2UrIiwgIitNYXRoLnJvdW5kKDEwMCphWzFdKSsiJSwgIitNYXRoLnJvdW5kKDEwMCphWzJdKSsiJSwgIityLzEwMCsiKSI7YnJlYWs7Y2FzZSJoc3YiOnRoaXMudmFsdWU9ImhzdmEoIitlKyIsICIrTWF0aC5yb3VuZCh0KSsiJSwgIitNYXRoLnJvdW5kKG4pKyIlLCAiK3IvMTAwKyIpIjticmVhaztkZWZhdWx0OnZhciBsPWMoZSx0LG4pLHU9bC5yLGQ9bC5nLGY9bC5iO3RoaXMudmFsdWU9InJnYmEoIit1KyIsICIrZCsiLCAiK2YrIiwgIityLzEwMCsiKSJ9ZWxzZSBzd2l0Y2gobyl7Y2FzZSJoc2wiOnZhciBoPWkoZSx0LzEwMCxuLzEwMCk7dGhpcy52YWx1ZT0iaHNsKCIrZSsiLCAiK01hdGgucm91bmQoMTAwKmhbMV0pKyIlLCAiK01hdGgucm91bmQoMTAwKmhbMl0pKyIlKSI7YnJlYWs7Y2FzZSJoc3YiOnRoaXMudmFsdWU9ImhzdigiK2UrIiwgIitNYXRoLnJvdW5kKHQpKyIlLCAiK01hdGgucm91bmQobikrIiUpIjticmVhaztjYXNlInJnYiI6dmFyIHA9YyhlLHQsbiksbT1wLnIsdj1wLmcsZz1wLmI7dGhpcy52YWx1ZT0icmdiKCIrbSsiLCAiK3YrIiwgIitnKyIpIjticmVhaztkZWZhdWx0OnRoaXMudmFsdWU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yLG49ZS5nLHI9ZS5iLGk9ZnVuY3Rpb24oZSl7ZT1NYXRoLm1pbihNYXRoLnJvdW5kKGUpLDI1NSk7dmFyIHQ9TWF0aC5mbG9vcihlLzE2KSxuPWUlMTY7cmV0dXJuIiIrKHNbdF18fHQpKyhzW25dfHxuKX07cmV0dXJuIGlzTmFOKHQpfHxpc05hTihuKXx8aXNOYU4ocik/IiI6IiMiK2kodCkraShuKStpKHIpfShjKGUsdCxuKSl9fSxlfSgpO3QuZGVmYXVsdD1kfSw2OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oIkhKTXgiKX0sNzpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJmS3gzIil9fSl9LCIxa1M3IjpmdW5jdGlvbihlLHQpe3QuZj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzfSwiMW9aZSI6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITAsdC5kZWZhdWx0PWZ1bmN0aW9uKGUpe3JldHVybnttZXRob2RzOntmb2N1czpmdW5jdGlvbigpe3RoaXMuJHJlZnNbZV0uZm9jdXMoKX19fX19LCIyMUl0IjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oIkZ0RDMiKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPW4uY29uZmlnLnZhbGlkYXRlU3RhdHVzO24uc3RhdHVzJiZpJiYhaShuLnN0YXR1cyk/dChyKCJSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICIrbi5zdGF0dXMsbi5jb25maWcsbnVsbCxuLnJlcXVlc3QsbikpOmUobil9fSwiMkt4UiI6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4scil7aWYoIShlIGluc3RhbmNlb2YgdCl8fHZvaWQgMCE9PXImJnIgaW4gZSl0aHJvdyBUeXBlRXJyb3IobisiOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEiKTtyZXR1cm4gZX19LCIyWDl6IjpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBpPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLG4pLGkubD0hMCxpLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsImEiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPSIvZGlzdC8iLG4obi5zPTMwNil9KHswOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt2YXIgcyxhPWU9ZXx8e30sbD10eXBlb2YgZS5kZWZhdWx0OyJvYmplY3QiIT09bCYmImZ1bmN0aW9uIiE9PWx8fChzPWUsYT1lLmRlZmF1bHQpO3ZhciB1LGM9ImZ1bmN0aW9uIj09dHlwZW9mIGE/YS5vcHRpb25zOmE7aWYodCYmKGMucmVuZGVyPXQucmVuZGVyLGMuc3RhdGljUmVuZGVyRm5zPXQuc3RhdGljUmVuZGVyRm5zLGMuX2NvbXBpbGVkPSEwKSxuJiYoYy5mdW5jdGlvbmFsPSEwKSxpJiYoYy5fc2NvcGVJZD1pKSxvPyh1PWZ1bmN0aW9uKGUpeyhlPWV8fHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fHx0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCl8fCJ1bmRlZmluZWQiPT10eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfX3x8KGU9X19WVUVfU1NSX0NPTlRFWFRfXyksciYmci5jYWxsKHRoaXMsZSksZSYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChvKX0sYy5fc3NyUmVnaXN0ZXI9dSk6ciYmKHU9ciksdSl7dmFyIGQ9Yy5mdW5jdGlvbmFsLGY9ZD9jLnJlbmRlcjpjLmJlZm9yZUNyZWF0ZTtkPyhjLl9pbmplY3RTdHlsZXM9dSxjLnJlbmRlcj1mdW5jdGlvbihlLHQpe3JldHVybiB1LmNhbGwodCksZihlLHQpfSk6Yy5iZWZvcmVDcmVhdGU9Zj9bXS5jb25jYXQoZix1KTpbdV19cmV0dXJue2VzTW9kdWxlOnMsZXhwb3J0czphLG9wdGlvbnM6Y319fSwxMzpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCI3SjlzIil9LDIwOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImZVcVciKX0sMzA2OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigzMDcpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O3QuZGVmYXVsdD1vLmRlZmF1bHR9LDMwNzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj1hKG4oNCkpLGk9YShuKDMwOCkpLG89bigxMykscz1uKDIwKTtmdW5jdGlvbiBhKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgbD1yLmRlZmF1bHQuZXh0ZW5kKGkuZGVmYXVsdCksdT12b2lkIDAsYz1bXSxkPTEsZj1mdW5jdGlvbiBlKHQpe2lmKCFyLmRlZmF1bHQucHJvdG90eXBlLiRpc1NlcnZlcil7InN0cmluZyI9PXR5cGVvZih0PXR8fHt9KSYmKHQ9e21lc3NhZ2U6dH0pO3ZhciBuPXQub25DbG9zZSxpPSJtZXNzYWdlXyIrZCsrO3JldHVybiB0Lm9uQ2xvc2U9ZnVuY3Rpb24oKXtlLmNsb3NlKGksbil9LCh1PW5ldyBsKHtkYXRhOnR9KSkuaWQ9aSwoMCxzLmlzVk5vZGUpKHUubWVzc2FnZSkmJih1LiRzbG90cy5kZWZhdWx0PVt1Lm1lc3NhZ2VdLHUubWVzc2FnZT1udWxsKSx1LnZtPXUuJG1vdW50KCksZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh1LnZtLiRlbCksdS52bS52aXNpYmxlPSEwLHUuZG9tPXUudm0uJGVsLHUuZG9tLnN0eWxlLnpJbmRleD1vLlBvcHVwTWFuYWdlci5uZXh0WkluZGV4KCksYy5wdXNoKHUpLHUudm19fTtbInN1Y2Nlc3MiLCJ3YXJuaW5nIiwiaW5mbyIsImVycm9yIl0uZm9yRWFjaChmdW5jdGlvbihlKXtmW2VdPWZ1bmN0aW9uKHQpe3JldHVybiJzdHJpbmciPT10eXBlb2YgdCYmKHQ9e21lc3NhZ2U6dH0pLHQudHlwZT1lLGYodCl9fSksZi5jbG9zZT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wLHI9Yy5sZW5ndGg7bjxyO24rKylpZihlPT09Y1tuXS5pZCl7ImZ1bmN0aW9uIj09dHlwZW9mIHQmJnQoY1tuXSksYy5zcGxpY2UobiwxKTticmVha319LGYuY2xvc2VBbGw9ZnVuY3Rpb24oKXtmb3IodmFyIGU9Yy5sZW5ndGgtMTtlPj0wO2UtLSljW2VdLmNsb3NlKCl9LHQuZGVmYXVsdD1mfSwzMDg6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigzMDkpLGk9bi5uKHIpLG89bigzMTApLHM9bigwKShpLmEsby5hLCExLG51bGwsbnVsbCxudWxsKTt0LmRlZmF1bHQ9cy5leHBvcnRzfSwzMDk6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9e3N1Y2Nlc3M6InN1Y2Nlc3MiLGluZm86ImluZm8iLHdhcm5pbmc6Indhcm5pbmciLGVycm9yOiJlcnJvciJ9O3QuZGVmYXVsdD17ZGF0YTpmdW5jdGlvbigpe3JldHVybnt2aXNpYmxlOiExLG1lc3NhZ2U6IiIsZHVyYXRpb246M2UzLHR5cGU6ImluZm8iLGljb25DbGFzczoiIixjdXN0b21DbGFzczoiIixvbkNsb3NlOm51bGwsc2hvd0Nsb3NlOiExLGNsb3NlZDohMSx0aW1lcjpudWxsLGRhbmdlcm91c2x5VXNlSFRNTFN0cmluZzohMSxjZW50ZXI6ITF9fSxjb21wdXRlZDp7dHlwZUNsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudHlwZSYmIXRoaXMuaWNvbkNsYXNzPyJlbC1tZXNzYWdlX19pY29uIGVsLWljb24tIityW3RoaXMudHlwZV06IiJ9fSx3YXRjaDp7Y2xvc2VkOmZ1bmN0aW9uKGUpe2UmJih0aGlzLnZpc2libGU9ITEsdGhpcy4kZWwuYWRkRXZlbnRMaXN0ZW5lcigidHJhbnNpdGlvbmVuZCIsdGhpcy5kZXN0cm95RWxlbWVudCkpfX0sbWV0aG9kczp7ZGVzdHJveUVsZW1lbnQ6ZnVuY3Rpb24oKXt0aGlzLiRlbC5yZW1vdmVFdmVudExpc3RlbmVyKCJ0cmFuc2l0aW9uZW5kIix0aGlzLmRlc3Ryb3lFbGVtZW50KSx0aGlzLiRkZXN0cm95KCEwKSx0aGlzLiRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuJGVsKX0sY2xvc2U6ZnVuY3Rpb24oKXt0aGlzLmNsb3NlZD0hMCwiZnVuY3Rpb24iPT10eXBlb2YgdGhpcy5vbkNsb3NlJiZ0aGlzLm9uQ2xvc2UodGhpcyl9LGNsZWFyVGltZXI6ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodGhpcy50aW1lcil9LHN0YXJ0VGltZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuZHVyYXRpb24+MCYmKHRoaXMudGltZXI9c2V0VGltZW91dChmdW5jdGlvbigpe2UuY2xvc2VkfHxlLmNsb3NlKCl9LHRoaXMuZHVyYXRpb24pKX0sa2V5ZG93bjpmdW5jdGlvbihlKXsyNz09PWUua2V5Q29kZSYmKHRoaXMuY2xvc2VkfHx0aGlzLmNsb3NlKCkpfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuc3RhcnRUaW1lcigpLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLHRoaXMua2V5ZG93bil9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXtkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCJrZXlkb3duIix0aGlzLmtleWRvd24pfX19LDMxMDpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oInRyYW5zaXRpb24iLHthdHRyczp7bmFtZToiZWwtbWVzc2FnZS1mYWRlIn19LFtuKCJkaXYiLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTplLnZpc2libGUsZXhwcmVzc2lvbjoidmlzaWJsZSJ9XSxjbGFzczpbImVsLW1lc3NhZ2UiLGUudHlwZSYmIWUuaWNvbkNsYXNzPyJlbC1tZXNzYWdlLS0iK2UudHlwZToiIixlLmNlbnRlcj8iaXMtY2VudGVyIjoiIixlLnNob3dDbG9zZT8iaXMtY2xvc2FibGUiOiIiLGUuY3VzdG9tQ2xhc3NdLGF0dHJzOntyb2xlOiJhbGVydCJ9LG9uOnttb3VzZWVudGVyOmUuY2xlYXJUaW1lcixtb3VzZWxlYXZlOmUuc3RhcnRUaW1lcn19LFtlLmljb25DbGFzcz9uKCJpIix7Y2xhc3M6ZS5pY29uQ2xhc3N9KTpuKCJpIix7Y2xhc3M6ZS50eXBlQ2xhc3N9KSxlLl90KCJkZWZhdWx0IixbZS5kYW5nZXJvdXNseVVzZUhUTUxTdHJpbmc/bigicCIse3N0YXRpY0NsYXNzOiJlbC1tZXNzYWdlX19jb250ZW50Iixkb21Qcm9wczp7aW5uZXJIVE1MOmUuX3MoZS5tZXNzYWdlKX19KTpuKCJwIix7c3RhdGljQ2xhc3M6ImVsLW1lc3NhZ2VfX2NvbnRlbnQifSxbZS5fdihlLl9zKGUubWVzc2FnZSkpXSldKSxlLnNob3dDbG9zZT9uKCJpIix7c3RhdGljQ2xhc3M6ImVsLW1lc3NhZ2VfX2Nsb3NlQnRuIGVsLWljb24tY2xvc2UiLG9uOntjbGljazplLmNsb3NlfX0pOmUuX2UoKV0sMildKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn0sNDpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCI3K3VXIil9fSl9LCIya3ZBIjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMCx0LmdldFN0eWxlPXQub25jZT10Lm9mZj10Lm9uPXZvaWQgMDt2YXIgcj0iZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiYic3ltYm9sIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiYiZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT8ic3ltYm9sIjp0eXBlb2YgZX07dC5oYXNDbGFzcz1wLHQuYWRkQ2xhc3M9ZnVuY3Rpb24oZSx0KXtpZighZSlyZXR1cm47Zm9yKHZhciBuPWUuY2xhc3NOYW1lLHI9KHR8fCIiKS5zcGxpdCgiICIpLGk9MCxvPXIubGVuZ3RoO2k8bztpKyspe3ZhciBzPXJbaV07cyYmKGUuY2xhc3NMaXN0P2UuY2xhc3NMaXN0LmFkZChzKTpwKGUscyl8fChuKz0iICIrcykpfWUuY2xhc3NMaXN0fHwoZS5jbGFzc05hbWU9bil9LHQucmVtb3ZlQ2xhc3M9ZnVuY3Rpb24oZSx0KXtpZighZXx8IXQpcmV0dXJuO2Zvcih2YXIgbj10LnNwbGl0KCIgIikscj0iICIrZS5jbGFzc05hbWUrIiAiLGk9MCxvPW4ubGVuZ3RoO2k8bztpKyspe3ZhciBzPW5baV07cyYmKGUuY2xhc3NMaXN0P2UuY2xhc3NMaXN0LnJlbW92ZShzKTpwKGUscykmJihyPXIucmVwbGFjZSgiICIrcysiICIsIiAiKSkpfWUuY2xhc3NMaXN0fHwoZS5jbGFzc05hbWU9YyhyKSl9LHQuc2V0U3R5bGU9ZnVuY3Rpb24gZSh0LG4saSl7aWYoIXR8fCFuKXJldHVybjtpZigib2JqZWN0Ij09PSh2b2lkIDA9PT1uPyJ1bmRlZmluZWQiOnIobikpKWZvcih2YXIgbyBpbiBuKW4uaGFzT3duUHJvcGVydHkobykmJmUodCxvLG5bb10pO2Vsc2Uib3BhY2l0eSI9PT0obj1kKG4pKSYmdTw5P3Quc3R5bGUuZmlsdGVyPWlzTmFOKGkpPyIiOiJhbHBoYShvcGFjaXR5PSIrMTAwKmkrIikiOnQuc3R5bGVbbl09aX07dmFyIGksbz1uKCI3K3VXIik7dmFyIHM9KChpPW8pJiZpLl9fZXNNb2R1bGU/aTp7ZGVmYXVsdDppfSkuZGVmYXVsdC5wcm90b3R5cGUuJGlzU2VydmVyLGE9LyhbXDpcLVxfXSsoLikpL2csbD0vXm1veihbQS1aXSkvLHU9cz8wOk51bWJlcihkb2N1bWVudC5kb2N1bWVudE1vZGUpLGM9ZnVuY3Rpb24oZSl7cmV0dXJuKGV8fCIiKS5yZXBsYWNlKC9eW1xzXHVGRUZGXSt8W1xzXHVGRUZGXSskL2csIiIpfSxkPWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoYSxmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gcj9uLnRvVXBwZXJDYXNlKCk6bn0pLnJlcGxhY2UobCwiTW96JDEiKX0sZj10Lm9uPSFzJiZkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyP2Z1bmN0aW9uKGUsdCxuKXtlJiZ0JiZuJiZlLmFkZEV2ZW50TGlzdGVuZXIodCxuLCExKX06ZnVuY3Rpb24oZSx0LG4pe2UmJnQmJm4mJmUuYXR0YWNoRXZlbnQoIm9uIit0LG4pfSxoPXQub2ZmPSFzJiZkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyP2Z1bmN0aW9uKGUsdCxuKXtlJiZ0JiZlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxuLCExKX06ZnVuY3Rpb24oZSx0LG4pe2UmJnQmJmUuZGV0YWNoRXZlbnQoIm9uIit0LG4pfTt0Lm9uY2U9ZnVuY3Rpb24oZSx0LG4pe2YoZSx0LGZ1bmN0aW9uIHIoKXtuJiZuLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxoKGUsdCxyKX0pfTtmdW5jdGlvbiBwKGUsdCl7aWYoIWV8fCF0KXJldHVybiExO2lmKC0xIT09dC5pbmRleE9mKCIgIikpdGhyb3cgbmV3IEVycm9yKCJjbGFzc05hbWUgc2hvdWxkIG5vdCBjb250YWluIHNwYWNlLiIpO3JldHVybiBlLmNsYXNzTGlzdD9lLmNsYXNzTGlzdC5jb250YWlucyh0KTooIiAiK2UuY2xhc3NOYW1lKyIgIikuaW5kZXhPZigiICIrdCsiICIpPi0xfXQuZ2V0U3R5bGU9dTw5P2Z1bmN0aW9uKGUsdCl7aWYoIXMpe2lmKCFlfHwhdClyZXR1cm4gbnVsbDsiZmxvYXQiPT09KHQ9ZCh0KSkmJih0PSJzdHlsZUZsb2F0Iik7dHJ5e3N3aXRjaCh0KXtjYXNlIm9wYWNpdHkiOnRyeXtyZXR1cm4gZS5maWx0ZXJzLml0ZW0oImFscGhhIikub3BhY2l0eS8xMDB9Y2F0Y2goZSl7cmV0dXJuIDF9ZGVmYXVsdDpyZXR1cm4gZS5zdHlsZVt0XXx8ZS5jdXJyZW50U3R5bGU/ZS5jdXJyZW50U3R5bGVbdF06bnVsbH19Y2F0Y2gobil7cmV0dXJuIGUuc3R5bGVbdF19fX06ZnVuY3Rpb24oZSx0KXtpZighcyl7aWYoIWV8fCF0KXJldHVybiBudWxsOyJmbG9hdCI9PT0odD1kKHQpKSYmKHQ9ImNzc0Zsb2F0Iik7dHJ5e3ZhciBuPWRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZSwiIik7cmV0dXJuIGUuc3R5bGVbdF18fG4/blt0XTpudWxsfWNhdGNoKG4pe3JldHVybiBlLnN0eWxlW3RdfX19fSwiM0VvKyI6ZnVuY3Rpb24oZSx0KXt2YXIgbj0wLHI9TWF0aC5yYW5kb20oKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIlN5bWJvbCgiLmNvbmNhdCh2b2lkIDA9PT1lPyIiOmUsIilfIiwoKytuK3IpLnRvU3RyaW5nKDM2KSl9fSwiM2ZvKyI6ZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz1uKCJZQWhCIil9LCIzZnMyIjpmdW5jdGlvbihlLHQsbil7dmFyIHI9bigiUlkvNCIpLGk9bigiZFN6ZCIpKCJpdGVyYXRvciIpLG89bigiL2JRcCIpO2UuZXhwb3J0cz1uKCJGZUJsIikuZ2V0SXRlcmF0b3JNZXRob2Q9ZnVuY3Rpb24oZSl7aWYodm9pZCAwIT1lKXJldHVybiBlW2ldfHxlWyJAQGl0ZXJhdG9yIl18fG9bcihlKV19fSwiNFpESiI6ZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiBuKHIpe2lmKHRbcl0pcmV0dXJuIHRbcl0uZXhwb3J0czt2YXIgaT10W3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtyXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyxuKSxpLmw9ITAsaS5leHBvcnRzfXJldHVybiBuLm09ZSxuLmM9dCxuLmQ9ZnVuY3Rpb24oZSx0LHIpe24ubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxuLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIG4uZCh0LCJhIix0KSx0fSxuLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LG4ucD0iL2Rpc3QvIixuKG4ucz0xOTcpfSh7MDpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbixyLGksbyl7dmFyIHMsYT1lPWV8fHt9LGw9dHlwZW9mIGUuZGVmYXVsdDsib2JqZWN0IiE9PWwmJiJmdW5jdGlvbiIhPT1sfHwocz1lLGE9ZS5kZWZhdWx0KTt2YXIgdSxjPSJmdW5jdGlvbiI9PXR5cGVvZiBhP2Eub3B0aW9uczphO2lmKHQmJihjLnJlbmRlcj10LnJlbmRlcixjLnN0YXRpY1JlbmRlckZucz10LnN0YXRpY1JlbmRlckZucyxjLl9jb21waWxlZD0hMCksbiYmKGMuZnVuY3Rpb25hbD0hMCksaSYmKGMuX3Njb3BlSWQ9aSksbz8odT1mdW5jdGlvbihlKXsoZT1lfHx0aGlzLiR2bm9kZSYmdGhpcy4kdm5vZGUuc3NyQ29udGV4dHx8dGhpcy5wYXJlbnQmJnRoaXMucGFyZW50LiR2bm9kZSYmdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpfHwidW5kZWZpbmVkIj09dHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX198fChlPV9fVlVFX1NTUl9DT05URVhUX18pLHImJnIuY2FsbCh0aGlzLGUpLGUmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobyl9LGMuX3NzclJlZ2lzdGVyPXUpOnImJih1PXIpLHUpe3ZhciBkPWMuZnVuY3Rpb25hbCxmPWQ/Yy5yZW5kZXI6Yy5iZWZvcmVDcmVhdGU7ZD8oYy5faW5qZWN0U3R5bGVzPXUsYy5yZW5kZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdS5jYWxsKHQpLGYoZSx0KX0pOmMuYmVmb3JlQ3JlYXRlPWY/W10uY29uY2F0KGYsdSk6W3VdfXJldHVybntlc01vZHVsZTpzLGV4cG9ydHM6YSxvcHRpb25zOmN9fX0sMTpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJmUGxsIil9LDEwOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oIklTWVciKX0sMTE6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITAsdC5leHRyYWN0VGltZUZvcm1hdD10LmV4dHJhY3REYXRlRm9ybWF0PXQubmV4dFllYXI9dC5wcmV2WWVhcj10Lm5leHRNb250aD10LnByZXZNb250aD10LmNoYW5nZVllYXJNb250aEFuZENsYW1wRGF0ZT10LnRpbWVXaXRoaW5SYW5nZT10LmxpbWl0VGltZVJhbmdlPXQuY2xlYXJNaWxsaXNlY29uZHM9dC5jbGVhclRpbWU9dC5tb2RpZnlXaXRoVGltZVN0cmluZz10Lm1vZGlmeVRpbWU9dC5tb2RpZnlEYXRlPXQucmFuZ2U9dC5nZXRSYW5nZU1pbnV0ZXM9dC5nZXRSYW5nZUhvdXJzPXQuZ2V0V2Vla051bWJlcj10LmdldFN0YXJ0RGF0ZU9mTW9udGg9dC5uZXh0RGF0ZT10LnByZXZEYXRlPXQuZ2V0Rmlyc3REYXlPZk1vbnRoPXQuZ2V0RGF5Q291bnRPZlllYXI9dC5nZXREYXlDb3VudE9mTW9udGg9dC5wYXJzZURhdGU9dC5mb3JtYXREYXRlPXQuaXNEYXRlT2JqZWN0PXQuaXNEYXRlPXQudG9EYXRlPXZvaWQgMDt2YXIgcixpPW4oMjkpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9LHM9bigxMik7dmFyIGE9WyJzdW4iLCJtb24iLCJ0dWUiLCJ3ZWQiLCJ0aHUiLCJmcmkiLCJzYXQiXSxsPVsiamFuIiwiZmViIiwibWFyIiwiYXByIiwibWF5IiwianVuIiwianVsIiwiYXVnIiwic2VwIiwib2N0Iiwibm92IiwiZGVjIl0sdT1mdW5jdGlvbigpe3JldHVybntkYXlOYW1lc1Nob3J0OmEubWFwKGZ1bmN0aW9uKGUpe3JldHVybigwLHMudCkoImVsLmRhdGVwaWNrZXIud2Vla3MuIitlKX0pLGRheU5hbWVzOmEubWFwKGZ1bmN0aW9uKGUpe3JldHVybigwLHMudCkoImVsLmRhdGVwaWNrZXIud2Vla3MuIitlKX0pLG1vbnRoTmFtZXNTaG9ydDpsLm1hcChmdW5jdGlvbihlKXtyZXR1cm4oMCxzLnQpKCJlbC5kYXRlcGlja2VyLm1vbnRocy4iK2UpfSksbW9udGhOYW1lczpsLm1hcChmdW5jdGlvbihlLHQpe3JldHVybigwLHMudCkoImVsLmRhdGVwaWNrZXIubW9udGgiKyh0KzEpKX0pLGFtUG06WyJhbSIsInBtIl19fSxjPXQudG9EYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBkKGUpP25ldyBEYXRlKGUpOm51bGx9LGQ9dC5pc0RhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPT1lJiZ2b2lkIDAhPT1lJiYoIWlzTmFOKG5ldyBEYXRlKGUpLmdldFRpbWUoKSkmJiFBcnJheS5pc0FycmF5KGUpKX0sZj0odC5pc0RhdGVPYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBEYXRlfSx0LmZvcm1hdERhdGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4oZT1jKGUpKT9vLmRlZmF1bHQuZm9ybWF0KGUsdHx8Inl5eXktTU0tZGQiLHUoKSk6IiJ9LHQucGFyc2VEYXRlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG8uZGVmYXVsdC5wYXJzZShlLHR8fCJ5eXl5LU1NLWRkIix1KCkpfSksaD10LmdldERheUNvdW50T2ZNb250aD1mdW5jdGlvbihlLHQpe3JldHVybiAzPT09dHx8NT09PXR8fDg9PT10fHwxMD09PXQ/MzA6MT09PXQ/ZSU0PT0wJiZlJTEwMCE9MHx8ZSU0MDA9PTA/Mjk6Mjg6MzF9LHA9KHQuZ2V0RGF5Q291bnRPZlllYXI9ZnVuY3Rpb24oZSl7cmV0dXJuIGUlNDAwPT0wfHxlJTEwMCE9MCYmZSU0PT0wPzM2NjozNjV9LHQuZ2V0Rmlyc3REYXlPZk1vbnRoPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBEYXRlKGUuZ2V0VGltZSgpKTtyZXR1cm4gdC5zZXREYXRlKDEpLHQuZ2V0RGF5KCl9LHQucHJldkRhdGU9ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjE7cmV0dXJuIG5ldyBEYXRlKGUuZ2V0RnVsbFllYXIoKSxlLmdldE1vbnRoKCksZS5nZXREYXRlKCktdCl9KTt0Lm5leHREYXRlPWZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXToxO3JldHVybiBuZXcgRGF0ZShlLmdldEZ1bGxZZWFyKCksZS5nZXRNb250aCgpLGUuZ2V0RGF0ZSgpK3QpfSx0LmdldFN0YXJ0RGF0ZU9mTW9udGg9ZnVuY3Rpb24oZSx0KXt2YXIgbj1uZXcgRGF0ZShlLHQsMSkscj1uLmdldERheSgpO3JldHVybiBwKG4sMD09PXI/NzpyKX0sdC5nZXRXZWVrTnVtYmVyPWZ1bmN0aW9uKGUpe2lmKCFkKGUpKXJldHVybiBudWxsO3ZhciB0PW5ldyBEYXRlKGUuZ2V0VGltZSgpKTt0LnNldEhvdXJzKDAsMCwwLDApLHQuc2V0RGF0ZSh0LmdldERhdGUoKSszLSh0LmdldERheSgpKzYpJTcpO3ZhciBuPW5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSwwLDQpO3JldHVybiAxK01hdGgucm91bmQoKCh0LmdldFRpbWUoKS1uLmdldFRpbWUoKSkvODY0ZTUtMysobi5nZXREYXkoKSs2KSU3KS83KX0sdC5nZXRSYW5nZUhvdXJzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdLG49W107aWYoKGV8fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PWUubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLmdldEhvdXJzKCl9KTtuPW4uY29uY2F0KGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVtdLHI9ZTtyPD10O3IrKyluLnB1c2gocik7cmV0dXJuIG59KHRbMF0sdFsxXSkpfSksbi5sZW5ndGgpZm9yKHZhciByPTA7cjwyNDtyKyspdFtyXT0tMT09PW4uaW5kZXhPZihyKTtlbHNlIGZvcih2YXIgaT0wO2k8MjQ7aSsrKXRbaV09ITE7cmV0dXJuIHR9O2Z1bmN0aW9uIG0oZSx0LG4scil7Zm9yKHZhciBpPXQ7aTxuO2krKyllW2ldPXJ9dC5nZXRSYW5nZU1pbnV0ZXM9ZnVuY3Rpb24oZSx0KXt2YXIgbj1uZXcgQXJyYXkoNjApO3JldHVybiBlLmxlbmd0aD4wP2UuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgcj1lWzBdLGk9ZVsxXSxvPXIuZ2V0SG91cnMoKSxzPXIuZ2V0TWludXRlcygpLGE9aS5nZXRIb3VycygpLGw9aS5nZXRNaW51dGVzKCk7bz09PXQmJmEhPT10P20obixzLDYwLCEwKTpvPT09dCYmYT09PXQ/bShuLHMsbCsxLCEwKTpvIT09dCYmYT09PXQ/bShuLDAsbCsxLCEwKTpvPHQmJmE+dCYmbShuLDAsNjAsITApfSk6bShuLDAsNjAsITApLG59LHQucmFuZ2U9ZnVuY3Rpb24oZSl7cmV0dXJuIEFycmF5LmFwcGx5KG51bGwse2xlbmd0aDplfSkubWFwKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR9KX07dmFyIHY9dC5tb2RpZnlEYXRlPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBuZXcgRGF0ZSh0LG4scixlLmdldEhvdXJzKCksZS5nZXRNaW51dGVzKCksZS5nZXRTZWNvbmRzKCksZS5nZXRNaWxsaXNlY29uZHMoKSl9LGc9dC5tb2RpZnlUaW1lPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBuZXcgRGF0ZShlLmdldEZ1bGxZZWFyKCksZS5nZXRNb250aCgpLGUuZ2V0RGF0ZSgpLHQsbixyLGUuZ2V0TWlsbGlzZWNvbmRzKCkpfSx5PSh0Lm1vZGlmeVdpdGhUaW1lU3RyaW5nPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG51bGwhPWUmJnQ/KHQ9Zih0LCJISDptbTpzcyIpLGcoZSx0LmdldEhvdXJzKCksdC5nZXRNaW51dGVzKCksdC5nZXRTZWNvbmRzKCkpKTplfSx0LmNsZWFyVGltZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IERhdGUoZS5nZXRGdWxsWWVhcigpLGUuZ2V0TW9udGgoKSxlLmdldERhdGUoKSl9LHQuY2xlYXJNaWxsaXNlY29uZHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBEYXRlKGUuZ2V0RnVsbFllYXIoKSxlLmdldE1vbnRoKCksZS5nZXREYXRlKCksZS5nZXRIb3VycygpLGUuZ2V0TWludXRlcygpLGUuZ2V0U2Vjb25kcygpLDApfSx0LmxpbWl0VGltZVJhbmdlPWZ1bmN0aW9uKGUsdCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOiJISDptbTpzcyI7aWYoMD09PXQubGVuZ3RoKXJldHVybiBlO3ZhciByPWZ1bmN0aW9uKGUpe3JldHVybiBvLmRlZmF1bHQucGFyc2Uoby5kZWZhdWx0LmZvcm1hdChlLG4pLG4pfSxpPXIoZSkscz10Lm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5tYXAocil9KTtpZihzLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuIGk+PWVbMF0mJmk8PWVbMV19KSlyZXR1cm4gZTt2YXIgYT1zWzBdWzBdLGw9c1swXVswXTtyZXR1cm4gcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2E9bmV3IERhdGUoTWF0aC5taW4oZVswXSxhKSksbD1uZXcgRGF0ZShNYXRoLm1heChlWzFdLGEpKX0pLHYoaTxhP2E6bCxlLmdldEZ1bGxZZWFyKCksZS5nZXRNb250aCgpLGUuZ2V0RGF0ZSgpKX0pLF89KHQudGltZVdpdGhpblJhbmdlPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4geShlLHQsbikuZ2V0VGltZSgpPT09ZS5nZXRUaW1lKCl9LHQuY2hhbmdlWWVhck1vbnRoQW5kQ2xhbXBEYXRlPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1NYXRoLm1pbihlLmdldERhdGUoKSxoKHQsbikpO3JldHVybiB2KGUsdCxuLHIpfSk7dC5wcmV2TW9udGg9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5nZXRGdWxsWWVhcigpLG49ZS5nZXRNb250aCgpO3JldHVybiAwPT09bj9fKGUsdC0xLDExKTpfKGUsdCxuLTEpfSx0Lm5leHRNb250aD1mdW5jdGlvbihlKXt2YXIgdD1lLmdldEZ1bGxZZWFyKCksbj1lLmdldE1vbnRoKCk7cmV0dXJuIDExPT09bj9fKGUsdCsxLDApOl8oZSx0LG4rMSl9LHQucHJldlllYXI9ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjEsbj1lLmdldEZ1bGxZZWFyKCkscj1lLmdldE1vbnRoKCk7cmV0dXJuIF8oZSxuLXQscil9LHQubmV4dFllYXI9ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjEsbj1lLmdldEZ1bGxZZWFyKCkscj1lLmdldE1vbnRoKCk7cmV0dXJuIF8oZSxuK3Qscil9LHQuZXh0cmFjdERhdGVGb3JtYXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvXFc/bXsxLDJ9fFxXP1paL2csIiIpLnJlcGxhY2UoL1xXP2h7MSwyfXxcVz9zezEsM318XFc/YS9naSwiIikudHJpbSgpfSx0LmV4dHJhY3RUaW1lRm9ybWF0PWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1xXP0R7MSwyfXxcVz9Eb3xcVz9kezEsNH18XFc/TXsxLDR9fFxXP3l7Miw0fS9nLCIiKS50cmltKCl9fSwxMjpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJ1clc4Iil9LDE3OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImZFQisiKX0sMTk3OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigxOTgpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O28uZGVmYXVsdC5pbnN0YWxsPWZ1bmN0aW9uKGUpe2UuY29tcG9uZW50KG8uZGVmYXVsdC5uYW1lLG8uZGVmYXVsdCl9LHQuZGVmYXVsdD1vLmRlZmF1bHR9LDE5ODpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj1zKG4oMjcpKSxpPXMobigzMSkpLG89cyhuKDE5OSkpO2Z1bmN0aW9uIHMoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXQuZGVmYXVsdD17bWl4aW5zOltyLmRlZmF1bHRdLG5hbWU6IkVsVGltZVBpY2tlciIscHJvcHM6e2lzUmFuZ2U6Qm9vbGVhbixhcnJvd0NvbnRyb2w6Qm9vbGVhbn0sZGF0YTpmdW5jdGlvbigpe3JldHVybnt0eXBlOiIifX0sd2F0Y2g6e2lzUmFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5waWNrZXI/KHRoaXMudW5tb3VudFBpY2tlcigpLHRoaXMudHlwZT1lPyJ0aW1lcmFuZ2UiOiJ0aW1lIix0aGlzLnBhbmVsPWU/by5kZWZhdWx0OmkuZGVmYXVsdCx0aGlzLm1vdW50UGlja2VyKCkpOih0aGlzLnR5cGU9ZT8idGltZXJhbmdlIjoidGltZSIsdGhpcy5wYW5lbD1lP28uZGVmYXVsdDppLmRlZmF1bHQpfX0sY3JlYXRlZDpmdW5jdGlvbigpe3RoaXMudHlwZT10aGlzLmlzUmFuZ2U/InRpbWVyYW5nZSI6InRpbWUiLHRoaXMucGFuZWw9dGhpcy5pc1JhbmdlP28uZGVmYXVsdDppLmRlZmF1bHR9fX0sMTk5OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oMjAwKSxpPW4ubihyKSxvPW4oMjAxKSxzPW4oMCkoaS5hLG8uYSwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PXMuZXhwb3J0c30sMjAwOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByPW4oMTEpLGk9cyhuKDUpKSxvPXMobigzMikpO2Z1bmN0aW9uIHMoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBhPSgwLHIucGFyc2VEYXRlKSgiMDA6MDA6MDAiLCJISDptbTpzcyIpLGw9KDAsci5wYXJzZURhdGUpKCIyMzo1OTo1OSIsIkhIOm1tOnNzIiksdT1mdW5jdGlvbihlKXtyZXR1cm4oMCxyLm1vZGlmeURhdGUpKGwsZS5nZXRGdWxsWWVhcigpLGUuZ2V0TW9udGgoKSxlLmdldERhdGUoKSl9LGM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IERhdGUoTWF0aC5taW4oZS5nZXRUaW1lKCkrdCx1KGUpLmdldFRpbWUoKSkpfTt0LmRlZmF1bHQ9e21peGluczpbaS5kZWZhdWx0XSxjb21wb25lbnRzOntUaW1lU3Bpbm5lcjpvLmRlZmF1bHR9LGNvbXB1dGVkOntzaG93U2Vjb25kczpmdW5jdGlvbigpe3JldHVybi0xIT09KHRoaXMuZm9ybWF0fHwiIikuaW5kZXhPZigic3MiKX0sb2Zmc2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2hvd1NlY29uZHM/MTE6OH0sc3Bpbm5lcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNlbGVjdGlvblJhbmdlWzBdPHRoaXMub2Zmc2V0P3RoaXMuJHJlZnMubWluU3Bpbm5lcjp0aGlzLiRyZWZzLm1heFNwaW5uZXJ9LGJ0bkRpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWluRGF0ZS5nZXRUaW1lKCk+dGhpcy5tYXhEYXRlLmdldFRpbWUoKX0sYW1QbU1vZGU6ZnVuY3Rpb24oKXtyZXR1cm4tMSE9PSh0aGlzLmZvcm1hdHx8IiIpLmluZGV4T2YoIkEiKT8iQSI6LTEhPT0odGhpcy5mb3JtYXR8fCIiKS5pbmRleE9mKCJhIik/ImEiOiIifX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntwb3BwZXJDbGFzczoiIixtaW5EYXRlOm5ldyBEYXRlLG1heERhdGU6bmV3IERhdGUsdmFsdWU6W10sb2xkVmFsdWU6W25ldyBEYXRlLG5ldyBEYXRlXSxkZWZhdWx0VmFsdWU6bnVsbCxmb3JtYXQ6IkhIOm1tOnNzIix2aXNpYmxlOiExLHNlbGVjdGlvblJhbmdlOlswLDJdLGFycm93Q29udHJvbDohMX19LHdhdGNoOnt2YWx1ZTpmdW5jdGlvbihlKXtBcnJheS5pc0FycmF5KGUpPyh0aGlzLm1pbkRhdGU9bmV3IERhdGUoZVswXSksdGhpcy5tYXhEYXRlPW5ldyBEYXRlKGVbMV0pKTpBcnJheS5pc0FycmF5KHRoaXMuZGVmYXVsdFZhbHVlKT8odGhpcy5taW5EYXRlPW5ldyBEYXRlKHRoaXMuZGVmYXVsdFZhbHVlWzBdKSx0aGlzLm1heERhdGU9bmV3IERhdGUodGhpcy5kZWZhdWx0VmFsdWVbMV0pKTp0aGlzLmRlZmF1bHRWYWx1ZT8odGhpcy5taW5EYXRlPW5ldyBEYXRlKHRoaXMuZGVmYXVsdFZhbHVlKSx0aGlzLm1heERhdGU9YyhuZXcgRGF0ZSh0aGlzLmRlZmF1bHRWYWx1ZSksMzZlNSkpOih0aGlzLm1pbkRhdGU9bmV3IERhdGUsdGhpcy5tYXhEYXRlPWMobmV3IERhdGUsMzZlNSkpfSx2aXNpYmxlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7ZSYmKHRoaXMub2xkVmFsdWU9dGhpcy52YWx1ZSx0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3JldHVybiB0LiRyZWZzLm1pblNwaW5uZXIuZW1pdFNlbGVjdFJhbmdlKCJob3VycyIpfSkpfX0sbWV0aG9kczp7aGFuZGxlQ2xlYXI6ZnVuY3Rpb24oKXt0aGlzLiRlbWl0KCJwaWNrIixudWxsKX0saGFuZGxlQ2FuY2VsOmZ1bmN0aW9uKCl7dGhpcy4kZW1pdCgicGljayIsdGhpcy5vbGRWYWx1ZSl9LGhhbmRsZU1pbkNoYW5nZTpmdW5jdGlvbihlKXt0aGlzLm1pbkRhdGU9KDAsci5jbGVhck1pbGxpc2Vjb25kcykoZSksdGhpcy5oYW5kbGVDaGFuZ2UoKX0saGFuZGxlTWF4Q2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMubWF4RGF0ZT0oMCxyLmNsZWFyTWlsbGlzZWNvbmRzKShlKSx0aGlzLmhhbmRsZUNoYW5nZSgpfSxoYW5kbGVDaGFuZ2U6ZnVuY3Rpb24oKXt2YXIgZTt0aGlzLmlzVmFsaWRWYWx1ZShbdGhpcy5taW5EYXRlLHRoaXMubWF4RGF0ZV0pJiYodGhpcy4kcmVmcy5taW5TcGlubmVyLnNlbGVjdGFibGVSYW5nZT1bWyhlPXRoaXMubWluRGF0ZSwoMCxyLm1vZGlmeURhdGUpKGEsZS5nZXRGdWxsWWVhcigpLGUuZ2V0TW9udGgoKSxlLmdldERhdGUoKSkpLHRoaXMubWF4RGF0ZV1dLHRoaXMuJHJlZnMubWF4U3Bpbm5lci5zZWxlY3RhYmxlUmFuZ2U9W1t0aGlzLm1pbkRhdGUsdSh0aGlzLm1heERhdGUpXV0sdGhpcy4kZW1pdCgicGljayIsW3RoaXMubWluRGF0ZSx0aGlzLm1heERhdGVdLCEwKSl9LHNldE1pblNlbGVjdGlvblJhbmdlOmZ1bmN0aW9uKGUsdCl7dGhpcy4kZW1pdCgic2VsZWN0LXJhbmdlIixlLHQsIm1pbiIpLHRoaXMuc2VsZWN0aW9uUmFuZ2U9W2UsdF19LHNldE1heFNlbGVjdGlvblJhbmdlOmZ1bmN0aW9uKGUsdCl7dGhpcy4kZW1pdCgic2VsZWN0LXJhbmdlIixlLHQsIm1heCIpLHRoaXMuc2VsZWN0aW9uUmFuZ2U9W2UrdGhpcy5vZmZzZXQsdCt0aGlzLm9mZnNldF19LGhhbmRsZUNvbmZpcm06ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSYmYXJndW1lbnRzWzBdLHQ9dGhpcy4kcmVmcy5taW5TcGlubmVyLnNlbGVjdGFibGVSYW5nZSxuPXRoaXMuJHJlZnMubWF4U3Bpbm5lci5zZWxlY3RhYmxlUmFuZ2U7dGhpcy5taW5EYXRlPSgwLHIubGltaXRUaW1lUmFuZ2UpKHRoaXMubWluRGF0ZSx0LHRoaXMuZm9ybWF0KSx0aGlzLm1heERhdGU9KDAsci5saW1pdFRpbWVSYW5nZSkodGhpcy5tYXhEYXRlLG4sdGhpcy5mb3JtYXQpLHRoaXMuJGVtaXQoInBpY2siLFt0aGlzLm1pbkRhdGUsdGhpcy5tYXhEYXRlXSxlKX0sYWRqdXN0U3Bpbm5lcnM6ZnVuY3Rpb24oKXt0aGlzLiRyZWZzLm1pblNwaW5uZXIuYWRqdXN0U3Bpbm5lcnMoKSx0aGlzLiRyZWZzLm1heFNwaW5uZXIuYWRqdXN0U3Bpbm5lcnMoKX0sY2hhbmdlU2VsZWN0aW9uUmFuZ2U6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5zaG93U2Vjb25kcz9bMCwzLDYsMTEsMTQsMTddOlswLDMsOCwxMV0sbj1bImhvdXJzIiwibWludXRlcyJdLmNvbmNhdCh0aGlzLnNob3dTZWNvbmRzP1sic2Vjb25kcyJdOltdKSxyPSh0LmluZGV4T2YodGhpcy5zZWxlY3Rpb25SYW5nZVswXSkrZSt0Lmxlbmd0aCkldC5sZW5ndGgsaT10Lmxlbmd0aC8yO3I8aT90aGlzLiRyZWZzLm1pblNwaW5uZXIuZW1pdFNlbGVjdFJhbmdlKG5bcl0pOnRoaXMuJHJlZnMubWF4U3Bpbm5lci5lbWl0U2VsZWN0UmFuZ2UobltyLWldKX0saXNWYWxpZFZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpJiYoMCxyLnRpbWVXaXRoaW5SYW5nZSkodGhpcy5taW5EYXRlLHRoaXMuJHJlZnMubWluU3Bpbm5lci5zZWxlY3RhYmxlUmFuZ2UpJiYoMCxyLnRpbWVXaXRoaW5SYW5nZSkodGhpcy5tYXhEYXRlLHRoaXMuJHJlZnMubWF4U3Bpbm5lci5zZWxlY3RhYmxlUmFuZ2UpfSxoYW5kbGVLZXlkb3duOmZ1bmN0aW9uKGUpe3ZhciB0PWUua2V5Q29kZSxuPXszODotMSw0MDoxLDM3Oi0xLDM5OjF9O2lmKDM3PT09dHx8Mzk9PT10KXt2YXIgcj1uW3RdO3JldHVybiB0aGlzLmNoYW5nZVNlbGVjdGlvblJhbmdlKHIpLHZvaWQgZS5wcmV2ZW50RGVmYXVsdCgpfWlmKDM4PT09dHx8NDA9PT10KXt2YXIgaT1uW3RdO3JldHVybiB0aGlzLnNwaW5uZXIuc2Nyb2xsRG93bihpKSx2b2lkIGUucHJldmVudERlZmF1bHQoKX19fX19LDIwMTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oInRyYW5zaXRpb24iLHthdHRyczp7bmFtZToiZWwtem9vbS1pbi10b3AifSxvbjp7ImFmdGVyLWxlYXZlIjpmdW5jdGlvbih0KXtlLiRlbWl0KCJkb2Rlc3Ryb3kiKX19fSxbbigiZGl2Iix7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6ZS52aXNpYmxlLGV4cHJlc3Npb246InZpc2libGUifV0sc3RhdGljQ2xhc3M6ImVsLXRpbWUtcmFuZ2UtcGlja2VyIGVsLXBpY2tlci1wYW5lbCBlbC1wb3BwZXIiLGNsYXNzOmUucG9wcGVyQ2xhc3N9LFtuKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtdGltZS1yYW5nZS1waWNrZXJfX2NvbnRlbnQifSxbbigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLXRpbWUtcmFuZ2UtcGlja2VyX19jZWxsIn0sW24oImRpdiIse3N0YXRpY0NsYXNzOiJlbC10aW1lLXJhbmdlLXBpY2tlcl9faGVhZGVyIn0sW2UuX3YoZS5fcyhlLnQoImVsLmRhdGVwaWNrZXIuc3RhcnRUaW1lIikpKV0pLG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC10aW1lLXJhbmdlLXBpY2tlcl9fYm9keSBlbC10aW1lLXBhbmVsX19jb250ZW50IixjbGFzczp7Imhhcy1zZWNvbmRzIjplLnNob3dTZWNvbmRzLCJpcy1hcnJvdyI6ZS5hcnJvd0NvbnRyb2x9fSxbbigidGltZS1zcGlubmVyIix7cmVmOiJtaW5TcGlubmVyIixhdHRyczp7InNob3ctc2Vjb25kcyI6ZS5zaG93U2Vjb25kcywiYW0tcG0tbW9kZSI6ZS5hbVBtTW9kZSwiYXJyb3ctY29udHJvbCI6ZS5hcnJvd0NvbnRyb2wsZGF0ZTplLm1pbkRhdGV9LG9uOntjaGFuZ2U6ZS5oYW5kbGVNaW5DaGFuZ2UsInNlbGVjdC1yYW5nZSI6ZS5zZXRNaW5TZWxlY3Rpb25SYW5nZX19KV0sMSldKSxuKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtdGltZS1yYW5nZS1waWNrZXJfX2NlbGwifSxbbigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLXRpbWUtcmFuZ2UtcGlja2VyX19oZWFkZXIifSxbZS5fdihlLl9zKGUudCgiZWwuZGF0ZXBpY2tlci5lbmRUaW1lIikpKV0pLG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC10aW1lLXJhbmdlLXBpY2tlcl9fYm9keSBlbC10aW1lLXBhbmVsX19jb250ZW50IixjbGFzczp7Imhhcy1zZWNvbmRzIjplLnNob3dTZWNvbmRzLCJpcy1hcnJvdyI6ZS5hcnJvd0NvbnRyb2x9fSxbbigidGltZS1zcGlubmVyIix7cmVmOiJtYXhTcGlubmVyIixhdHRyczp7InNob3ctc2Vjb25kcyI6ZS5zaG93U2Vjb25kcywiYW0tcG0tbW9kZSI6ZS5hbVBtTW9kZSwiYXJyb3ctY29udHJvbCI6ZS5hcnJvd0NvbnRyb2wsZGF0ZTplLm1heERhdGV9LG9uOntjaGFuZ2U6ZS5oYW5kbGVNYXhDaGFuZ2UsInNlbGVjdC1yYW5nZSI6ZS5zZXRNYXhTZWxlY3Rpb25SYW5nZX19KV0sMSldKV0pLG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC10aW1lLXBhbmVsX19mb290ZXIifSxbbigiYnV0dG9uIix7c3RhdGljQ2xhc3M6ImVsLXRpbWUtcGFuZWxfX2J0biBjYW5jZWwiLGF0dHJzOnt0eXBlOiJidXR0b24ifSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVDYW5jZWwoKX19fSxbZS5fdihlLl9zKGUudCgiZWwuZGF0ZXBpY2tlci5jYW5jZWwiKSkpXSksbigiYnV0dG9uIix7c3RhdGljQ2xhc3M6ImVsLXRpbWUtcGFuZWxfX2J0biBjb25maXJtIixhdHRyczp7dHlwZToiYnV0dG9uIixkaXNhYmxlZDplLmJ0bkRpc2FibGVkfSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVDb25maXJtKCl9fX0sW2UuX3YoZS5fcyhlLnQoImVsLmRhdGVwaWNrZXIuY29uZmlybSIpKSldKV0pXSldKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn0sMjQ6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9bigzKTt0LmRlZmF1bHQ9e2JpbmQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPW51bGwsbz12b2lkIDAscz1mdW5jdGlvbigpe3JldHVybiBuLmNvbnRleHRbdC5leHByZXNzaW9uXS5hcHBseSgpfSxhPWZ1bmN0aW9uKCl7bmV3IERhdGUtbzwxMDAmJnMoKSxjbGVhckludGVydmFsKGkpLGk9bnVsbH07KDAsci5vbikoZSwibW91c2Vkb3duIixmdW5jdGlvbihlKXswPT09ZS5idXR0b24mJihvPW5ldyBEYXRlLCgwLHIub25jZSkoZG9jdW1lbnQsIm1vdXNldXAiLGEpLGNsZWFySW50ZXJ2YWwoaSksaT1zZXRJbnRlcnZhbChzLDEwMCkpfSl9fX0sMjc6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigyOCksaT1uLm4ociksbz1uKDMwKSxzPW4oMCkoaS5hLG8uYSwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PXMuZXhwb3J0c30sMjg6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9YyhuKDQpKSxpPWMobigxMCkpLG89bigxMSkscz1jKG4oNykpLGE9YyhuKDEpKSxsPWMobig2KSksdT1jKG4oOSkpO2Z1bmN0aW9uIGMoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBkPXtwcm9wczp7YXBwZW5kVG9Cb2R5OnMuZGVmYXVsdC5wcm9wcy5hcHBlbmRUb0JvZHksb2Zmc2V0OnMuZGVmYXVsdC5wcm9wcy5vZmZzZXQsYm91bmRhcmllc1BhZGRpbmc6cy5kZWZhdWx0LnByb3BzLmJvdW5kYXJpZXNQYWRkaW5nLGFycm93T2Zmc2V0OnMuZGVmYXVsdC5wcm9wcy5hcnJvd09mZnNldH0sbWV0aG9kczpzLmRlZmF1bHQubWV0aG9kcyxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJuKDAsdS5kZWZhdWx0KSh7dmlzaWJsZUFycm93OiEwfSxzLmRlZmF1bHQuZGF0YSl9LGJlZm9yZURlc3Ryb3k6cy5kZWZhdWx0LmJlZm9yZURlc3Ryb3l9LGY9e2RhdGU6Inl5eXktTU0tZGQiLG1vbnRoOiJ5eXl5LU1NIixkYXRldGltZToieXl5eS1NTS1kZCBISDptbTpzcyIsdGltZToiSEg6bW06c3MiLHdlZWs6Inl5eXl3V1ciLHRpbWVyYW5nZToiSEg6bW06c3MiLGRhdGVyYW5nZToieXl5eS1NTS1kZCIsZGF0ZXRpbWVyYW5nZToieXl5eS1NTS1kZCBISDptbTpzcyIseWVhcjoieXl5eSJ9LGg9WyJkYXRlIiwiZGF0ZXRpbWUiLCJ0aW1lIiwidGltZS1zZWxlY3QiLCJ3ZWVrIiwibW9udGgiLCJ5ZWFyIiwiZGF0ZXJhbmdlIiwidGltZXJhbmdlIiwiZGF0ZXRpbWVyYW5nZSIsImRhdGVzIl0scD1mdW5jdGlvbihlLHQpe3JldHVybiJ0aW1lc3RhbXAiPT09dD9lLmdldFRpbWUoKTooMCxvLmZvcm1hdERhdGUpKGUsdCl9LG09ZnVuY3Rpb24oZSx0KXtyZXR1cm4idGltZXN0YW1wIj09PXQ/bmV3IERhdGUoTnVtYmVyKGUpKTooMCxvLnBhcnNlRGF0ZSkoZSx0KX0sdj1mdW5jdGlvbihlLHQpe2lmKEFycmF5LmlzQXJyYXkoZSkmJjI9PT1lLmxlbmd0aCl7dmFyIG49ZVswXSxyPWVbMV07aWYobiYmcilyZXR1cm5bcChuLHQpLHAocix0KV19cmV0dXJuIiJ9LGc9ZnVuY3Rpb24oZSx0LG4pe2lmKEFycmF5LmlzQXJyYXkoZSl8fChlPWUuc3BsaXQobikpLDI9PT1lLmxlbmd0aCl7dmFyIHI9ZVswXSxpPWVbMV07cmV0dXJuW20ocix0KSxtKGksdCldfXJldHVybltdfSx5PXtkZWZhdWx0Ontmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/IiIrZToiIn0scGFyc2VyOmZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lfHwiIj09PWU/bnVsbDplfX0sd2Vlazp7Zm9ybWF0dGVyOmZ1bmN0aW9uKGUsdCl7dmFyIG49KDAsby5nZXRXZWVrTnVtYmVyKShlKSxyPWUuZ2V0TW9udGgoKSxpPW5ldyBEYXRlKGUpOzE9PT1uJiYxMT09PXImJihpLnNldEhvdXJzKDAsMCwwLDApLGkuc2V0RGF0ZShpLmdldERhdGUoKSszLShpLmdldERheSgpKzYpJTcpKTt2YXIgcz0oMCxvLmZvcm1hdERhdGUpKGksdCk7cmV0dXJuIHM9L1dXLy50ZXN0KHMpP3MucmVwbGFjZSgvV1cvLG48MTA/IjAiK246bik6cy5yZXBsYWNlKC9XLyxuKX0scGFyc2VyOmZ1bmN0aW9uKGUpe3ZhciB0PShlfHwiIikuc3BsaXQoInciKTtpZigyPT09dC5sZW5ndGgpe3ZhciBuPU51bWJlcih0WzBdKSxyPU51bWJlcih0WzFdKTtpZighaXNOYU4obikmJiFpc05hTihyKSYmcjw1NClyZXR1cm4gZX1yZXR1cm4gbnVsbH19LGRhdGU6e2Zvcm1hdHRlcjpwLHBhcnNlcjptfSxkYXRldGltZTp7Zm9ybWF0dGVyOnAscGFyc2VyOm19LGRhdGVyYW5nZTp7Zm9ybWF0dGVyOnYscGFyc2VyOmd9LGRhdGV0aW1lcmFuZ2U6e2Zvcm1hdHRlcjp2LHBhcnNlcjpnfSx0aW1lcmFuZ2U6e2Zvcm1hdHRlcjp2LHBhcnNlcjpnfSx0aW1lOntmb3JtYXR0ZXI6cCxwYXJzZXI6bX0sbW9udGg6e2Zvcm1hdHRlcjpwLHBhcnNlcjptfSx5ZWFyOntmb3JtYXR0ZXI6cCxwYXJzZXI6bX0sbnVtYmVyOntmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/IiIrZToiIn0scGFyc2VyOmZ1bmN0aW9uKGUpe3ZhciB0PU51bWJlcihlKTtyZXR1cm4gaXNOYU4oZSk/bnVsbDp0fX0sZGF0ZXM6e2Zvcm1hdHRlcjpmdW5jdGlvbihlLHQpe3JldHVybiBlLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gcChlLHQpfSl9LHBhcnNlcjpmdW5jdGlvbihlLHQpe3JldHVybigic3RyaW5nIj09dHlwZW9mIGU/ZS5zcGxpdCgiLCAiKTplKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBEYXRlP2U6bShlLHQpfSl9fX0sXz17bGVmdDoiYm90dG9tLXN0YXJ0IixjZW50ZXI6ImJvdHRvbSIscmlnaHQ6ImJvdHRvbS1lbmQifSxiPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106Ii0iO3JldHVybiBlPygwLCh5W25dfHx5LmRlZmF1bHQpLnBhcnNlcikoZSx0fHxmW25dLHIpOm51bGx9LHg9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBlPygwLCh5W25dfHx5LmRlZmF1bHQpLmZvcm1hdHRlcikoZSx0fHxmW25dKTpudWxsfSxDPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZnVuY3Rpb24oZSx0KXt2YXIgbj1lIGluc3RhbmNlb2YgRGF0ZSxyPXQgaW5zdGFuY2VvZiBEYXRlO3JldHVybiBuJiZyP2UuZ2V0VGltZSgpPT09dC5nZXRUaW1lKCk6IW4mJiFyJiZlPT09dH0scj1lIGluc3RhbmNlb2YgQXJyYXksaT10IGluc3RhbmNlb2YgQXJyYXk7cmV0dXJuIHImJmk/ZS5sZW5ndGg9PT10Lmxlbmd0aCYmZS5ldmVyeShmdW5jdGlvbihlLHIpe3JldHVybiBuKGUsdFtyXSl9KTohciYmIWkmJm4oZSx0KX0sdz1mdW5jdGlvbihlKXtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIGV8fGUgaW5zdGFuY2VvZiBTdHJpbmd9LGs9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PT1lfHx2b2lkIDA9PT1lfHx3KGUpfHxBcnJheS5pc0FycmF5KGUpJiYyPT09ZS5sZW5ndGgmJmUuZXZlcnkodyl9O3QuZGVmYXVsdD17bWl4aW5zOlthLmRlZmF1bHQsZF0saW5qZWN0OntlbEZvcm06e2RlZmF1bHQ6IiJ9LGVsRm9ybUl0ZW06e2RlZmF1bHQ6IiJ9fSxwcm9wczp7c2l6ZTpTdHJpbmcsZm9ybWF0OlN0cmluZyx2YWx1ZUZvcm1hdDpTdHJpbmcscmVhZG9ubHk6Qm9vbGVhbixwbGFjZWhvbGRlcjpTdHJpbmcsc3RhcnRQbGFjZWhvbGRlcjpTdHJpbmcsZW5kUGxhY2Vob2xkZXI6U3RyaW5nLHByZWZpeEljb246U3RyaW5nLGNsZWFySWNvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDoiZWwtaWNvbi1jaXJjbGUtY2xvc2UifSxuYW1lOntkZWZhdWx0OiIiLHZhbGlkYXRvcjprfSxkaXNhYmxlZDpCb29sZWFuLGNsZWFyYWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGlkOntkZWZhdWx0OiIiLHZhbGlkYXRvcjprfSxwb3BwZXJDbGFzczpTdHJpbmcsZWRpdGFibGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxhbGlnbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDoibGVmdCJ9LHZhbHVlOnt9LGRlZmF1bHRWYWx1ZTp7fSxkZWZhdWx0VGltZTp7fSxyYW5nZVNlcGFyYXRvcjp7ZGVmYXVsdDoiLSJ9LHBpY2tlck9wdGlvbnM6e30sdW5saW5rUGFuZWxzOkJvb2xlYW59LGNvbXBvbmVudHM6e0VsSW5wdXQ6bC5kZWZhdWx0fSxkaXJlY3RpdmVzOntDbGlja291dHNpZGU6aS5kZWZhdWx0fSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3BpY2tlclZpc2libGU6ITEsc2hvd0Nsb3NlOiExLHVzZXJJbnB1dDpudWxsLHZhbHVlT25PcGVuOm51bGwsdW53YXRjaFBpY2tlck9wdGlvbnM6bnVsbH19LHdhdGNoOntwaWNrZXJWaXNpYmxlOmZ1bmN0aW9uKGUpe3RoaXMucmVhZG9ubHl8fHRoaXMucGlja2VyRGlzYWJsZWR8fChlPyh0aGlzLnNob3dQaWNrZXIoKSx0aGlzLnZhbHVlT25PcGVuPUFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSk/W10uY29uY2F0KHRoaXMudmFsdWUpOnRoaXMudmFsdWUpOih0aGlzLmhpZGVQaWNrZXIoKSx0aGlzLmVtaXRDaGFuZ2UodGhpcy52YWx1ZSksdGhpcy51c2VySW5wdXQ9bnVsbCx0aGlzLmRpc3BhdGNoKCJFbEZvcm1JdGVtIiwiZWwuZm9ybS5ibHVyIiksdGhpcy4kZW1pdCgiYmx1ciIsdGhpcyksdGhpcy5ibHVyKCkpKX0scGFyc2VkVmFsdWU6e2ltbWVkaWF0ZTohMCxoYW5kbGVyOmZ1bmN0aW9uKGUpe3RoaXMucGlja2VyJiYodGhpcy5waWNrZXIudmFsdWU9ZSl9fSxkZWZhdWx0VmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5waWNrZXImJih0aGlzLnBpY2tlci5kZWZhdWx0VmFsdWU9ZSl9LHZhbHVlOmZ1bmN0aW9uKGUsdCl7QyhlLHQpfHx0aGlzLnBpY2tlclZpc2libGV8fHRoaXMuZGlzcGF0Y2goIkVsRm9ybUl0ZW0iLCJlbC5mb3JtLmNoYW5nZSIsZSl9fSxjb21wdXRlZDp7cmFuZ2VkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudHlwZS5pbmRleE9mKCJyYW5nZSIpPi0xfSxyZWZlcmVuY2U6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRyZWZzLnJlZmVyZW5jZTtyZXR1cm4gZS4kZWx8fGV9LHJlZklucHV0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVmZXJlbmNlP1tdLnNsaWNlLmNhbGwodGhpcy5yZWZlcmVuY2UucXVlcnlTZWxlY3RvckFsbCgiaW5wdXQiKSk6W119LHZhbHVlSXNFbXB0eTpmdW5jdGlvbigpe3ZhciBlPXRoaXMudmFsdWU7aWYoQXJyYXkuaXNBcnJheShlKSl7Zm9yKHZhciB0PTAsbj1lLmxlbmd0aDt0PG47dCsrKWlmKGVbdF0pcmV0dXJuITF9ZWxzZSBpZihlKXJldHVybiExO3JldHVybiEwfSx0cmlnZ2VyQ2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcmVmaXhJY29ufHwoLTEhPT10aGlzLnR5cGUuaW5kZXhPZigidGltZSIpPyJlbC1pY29uLXRpbWUiOiJlbC1pY29uLWRhdGUiKX0sc2VsZWN0aW9uTW9kZTpmdW5jdGlvbigpe3JldHVybiJ3ZWVrIj09PXRoaXMudHlwZT8id2VlayI6Im1vbnRoIj09PXRoaXMudHlwZT8ibW9udGgiOiJ5ZWFyIj09PXRoaXMudHlwZT8ieWVhciI6ImRhdGVzIj09PXRoaXMudHlwZT8iZGF0ZXMiOiJkYXkifSxoYXZlVHJpZ2dlcjpmdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT10aGlzLnNob3dUcmlnZ2VyP3RoaXMuc2hvd1RyaWdnZXI6LTEhPT1oLmluZGV4T2YodGhpcy50eXBlKX0sZGlzcGxheVZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9eCh0aGlzLnBhcnNlZFZhbHVlLHRoaXMuZm9ybWF0LHRoaXMudHlwZSx0aGlzLnJhbmdlU2VwYXJhdG9yKTtyZXR1cm4gQXJyYXkuaXNBcnJheSh0aGlzLnVzZXJJbnB1dCk/W3RoaXMudXNlcklucHV0WzBdfHxlJiZlWzBdfHwiIix0aGlzLnVzZXJJbnB1dFsxXXx8ZSYmZVsxXXx8IiJdOm51bGwhPT10aGlzLnVzZXJJbnB1dD90aGlzLnVzZXJJbnB1dDplPyJkYXRlcyI9PT10aGlzLnR5cGU/ZS5qb2luKCIsICIpOmU6IiJ9LHBhcnNlZFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWU/InRpbWUtc2VsZWN0Ij09PXRoaXMudHlwZT90aGlzLnZhbHVlOigwLG8uaXNEYXRlT2JqZWN0KSh0aGlzLnZhbHVlKXx8QXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSYmdGhpcy52YWx1ZS5ldmVyeShvLmlzRGF0ZU9iamVjdCk/dGhpcy52YWx1ZTp0aGlzLnZhbHVlRm9ybWF0P2IodGhpcy52YWx1ZSx0aGlzLnZhbHVlRm9ybWF0LHRoaXMudHlwZSx0aGlzLnJhbmdlU2VwYXJhdG9yKXx8dGhpcy52YWx1ZTpBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpP3RoaXMudmFsdWUubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBuZXcgRGF0ZShlKX0pOm5ldyBEYXRlKHRoaXMudmFsdWUpOnRoaXMudmFsdWV9LF9lbEZvcm1JdGVtU2l6ZTpmdW5jdGlvbigpe3JldHVybih0aGlzLmVsRm9ybUl0ZW18fHt9KS5lbEZvcm1JdGVtU2l6ZX0scGlja2VyU2l6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNpemV8fHRoaXMuX2VsRm9ybUl0ZW1TaXplfHwodGhpcy4kRUxFTUVOVHx8e30pLnNpemV9LHBpY2tlckRpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGlzYWJsZWR8fCh0aGlzLmVsRm9ybXx8e30pLmRpc2FibGVkfSxmaXJzdElucHV0SWQ6ZnVuY3Rpb24oKXt2YXIgZT17fSx0PXZvaWQgMDtyZXR1cm4odD10aGlzLnJhbmdlZD90aGlzLmlkJiZ0aGlzLmlkWzBdOnRoaXMuaWQpJiYoZS5pZD10KSxlfSxzZWNvbmRJbnB1dElkOmZ1bmN0aW9uKCl7dmFyIGU9e30sdD12b2lkIDA7cmV0dXJuIHRoaXMucmFuZ2VkJiYodD10aGlzLmlkJiZ0aGlzLmlkWzFdKSx0JiYoZS5pZD10KSxlfX0sY3JlYXRlZDpmdW5jdGlvbigpe3RoaXMucG9wcGVyT3B0aW9ucz17Ym91bmRhcmllc1BhZGRpbmc6MCxncHVBY2NlbGVyYXRpb246ITF9LHRoaXMucGxhY2VtZW50PV9bdGhpcy5hbGlnbl18fF8ubGVmdCx0aGlzLiRvbigiZmllbGRSZXNldCIsdGhpcy5oYW5kbGVGaWVsZFJlc2V0KX0sbWV0aG9kczp7Zm9jdXM6ZnVuY3Rpb24oKXt0aGlzLnJhbmdlZD90aGlzLmhhbmRsZUZvY3VzKCk6dGhpcy4kcmVmcy5yZWZlcmVuY2UuZm9jdXMoKX0sYmx1cjpmdW5jdGlvbigpe3RoaXMucmVmSW5wdXQuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5ibHVyKCl9KX0scGFyc2VWYWx1ZTpmdW5jdGlvbihlKXt2YXIgdD0oMCxvLmlzRGF0ZU9iamVjdCkoZSl8fEFycmF5LmlzQXJyYXkoZSkmJmUuZXZlcnkoby5pc0RhdGVPYmplY3QpO3JldHVybiB0aGlzLnZhbHVlRm9ybWF0JiYhdCYmYihlLHRoaXMudmFsdWVGb3JtYXQsdGhpcy50eXBlLHRoaXMucmFuZ2VTZXBhcmF0b3IpfHxlfSxmb3JtYXRUb1ZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PSgwLG8uaXNEYXRlT2JqZWN0KShlKXx8QXJyYXkuaXNBcnJheShlKSYmZS5ldmVyeShvLmlzRGF0ZU9iamVjdCk7cmV0dXJuIHRoaXMudmFsdWVGb3JtYXQmJnQ/eChlLHRoaXMudmFsdWVGb3JtYXQsdGhpcy50eXBlLHRoaXMucmFuZ2VTZXBhcmF0b3IpOmV9LHBhcnNlU3RyaW5nOmZ1bmN0aW9uKGUpe3ZhciB0PUFycmF5LmlzQXJyYXkoZSk/dGhpcy50eXBlOnRoaXMudHlwZS5yZXBsYWNlKCJyYW5nZSIsIiIpO3JldHVybiBiKGUsdGhpcy5mb3JtYXQsdCl9LGZvcm1hdFRvU3RyaW5nOmZ1bmN0aW9uKGUpe3ZhciB0PUFycmF5LmlzQXJyYXkoZSk/dGhpcy50eXBlOnRoaXMudHlwZS5yZXBsYWNlKCJyYW5nZSIsIiIpO3JldHVybiB4KGUsdGhpcy5mb3JtYXQsdCl9LGhhbmRsZU1vdXNlRW50ZXI6ZnVuY3Rpb24oKXt0aGlzLnJlYWRvbmx5fHx0aGlzLnBpY2tlckRpc2FibGVkfHwhdGhpcy52YWx1ZUlzRW1wdHkmJnRoaXMuY2xlYXJhYmxlJiYodGhpcy5zaG93Q2xvc2U9ITApfSxoYW5kbGVDaGFuZ2U6ZnVuY3Rpb24oKXtpZih0aGlzLnVzZXJJbnB1dCl7dmFyIGU9dGhpcy5wYXJzZVN0cmluZyh0aGlzLmRpc3BsYXlWYWx1ZSk7ZSYmKHRoaXMucGlja2VyLnZhbHVlPWUsdGhpcy5pc1ZhbGlkVmFsdWUoZSkmJih0aGlzLmVtaXRJbnB1dChlKSx0aGlzLnVzZXJJbnB1dD1udWxsKSl9IiI9PT10aGlzLnVzZXJJbnB1dCYmKHRoaXMuZW1pdElucHV0KG51bGwpLHRoaXMuZW1pdENoYW5nZShudWxsKSx0aGlzLnVzZXJJbnB1dD1udWxsKX0saGFuZGxlU3RhcnRJbnB1dDpmdW5jdGlvbihlKXt0aGlzLnVzZXJJbnB1dD90aGlzLnVzZXJJbnB1dD1bZS50YXJnZXQudmFsdWUsdGhpcy51c2VySW5wdXRbMV1dOnRoaXMudXNlcklucHV0PVtlLnRhcmdldC52YWx1ZSxudWxsXX0saGFuZGxlRW5kSW5wdXQ6ZnVuY3Rpb24oZSl7dGhpcy51c2VySW5wdXQ/dGhpcy51c2VySW5wdXQ9W3RoaXMudXNlcklucHV0WzBdLGUudGFyZ2V0LnZhbHVlXTp0aGlzLnVzZXJJbnB1dD1bbnVsbCxlLnRhcmdldC52YWx1ZV19LGhhbmRsZVN0YXJ0Q2hhbmdlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMucGFyc2VTdHJpbmcodGhpcy51c2VySW5wdXQmJnRoaXMudXNlcklucHV0WzBdKTtpZih0KXt0aGlzLnVzZXJJbnB1dD1bdGhpcy5mb3JtYXRUb1N0cmluZyh0KSx0aGlzLmRpc3BsYXlWYWx1ZVsxXV07dmFyIG49W3QsdGhpcy5waWNrZXIudmFsdWUmJnRoaXMucGlja2VyLnZhbHVlWzFdXTt0aGlzLnBpY2tlci52YWx1ZT1uLHRoaXMuaXNWYWxpZFZhbHVlKG4pJiYodGhpcy5lbWl0SW5wdXQobiksdGhpcy51c2VySW5wdXQ9bnVsbCl9fSxoYW5kbGVFbmRDaGFuZ2U6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5wYXJzZVN0cmluZyh0aGlzLnVzZXJJbnB1dCYmdGhpcy51c2VySW5wdXRbMV0pO2lmKHQpe3RoaXMudXNlcklucHV0PVt0aGlzLmRpc3BsYXlWYWx1ZVswXSx0aGlzLmZvcm1hdFRvU3RyaW5nKHQpXTt2YXIgbj1bdGhpcy5waWNrZXIudmFsdWUmJnRoaXMucGlja2VyLnZhbHVlWzBdLHRdO3RoaXMucGlja2VyLnZhbHVlPW4sdGhpcy5pc1ZhbGlkVmFsdWUobikmJih0aGlzLmVtaXRJbnB1dChuKSx0aGlzLnVzZXJJbnB1dD1udWxsKX19LGhhbmRsZUNsaWNrSWNvbjpmdW5jdGlvbihlKXt0aGlzLnJlYWRvbmx5fHx0aGlzLnBpY2tlckRpc2FibGVkfHwodGhpcy5zaG93Q2xvc2U/KHRoaXMudmFsdWVPbk9wZW49dGhpcy52YWx1ZSxlLnN0b3BQcm9wYWdhdGlvbigpLHRoaXMuZW1pdElucHV0KG51bGwpLHRoaXMuZW1pdENoYW5nZShudWxsKSx0aGlzLnNob3dDbG9zZT0hMSx0aGlzLnBpY2tlciYmImZ1bmN0aW9uIj09dHlwZW9mIHRoaXMucGlja2VyLmhhbmRsZUNsZWFyJiZ0aGlzLnBpY2tlci5oYW5kbGVDbGVhcigpKTp0aGlzLnBpY2tlclZpc2libGU9IXRoaXMucGlja2VyVmlzaWJsZSl9LGhhbmRsZUNsb3NlOmZ1bmN0aW9uKCl7aWYodGhpcy5waWNrZXJWaXNpYmxlJiYodGhpcy5waWNrZXJWaXNpYmxlPSExLCJkYXRlcyI9PT10aGlzLnR5cGUpKXt2YXIgZT1iKHRoaXMudmFsdWVPbk9wZW4sdGhpcy52YWx1ZUZvcm1hdCx0aGlzLnR5cGUsdGhpcy5yYW5nZVNlcGFyYXRvcil8fHRoaXMudmFsdWVPbk9wZW47dGhpcy5lbWl0SW5wdXQoZSl9fSxoYW5kbGVGaWVsZFJlc2V0OmZ1bmN0aW9uKGUpe3RoaXMudXNlcklucHV0PSIiPT09ZT9udWxsOmV9LGhhbmRsZUZvY3VzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy50eXBlOy0xPT09aC5pbmRleE9mKGUpfHx0aGlzLnBpY2tlclZpc2libGV8fCh0aGlzLnBpY2tlclZpc2libGU9ITApLHRoaXMuJGVtaXQoImZvY3VzIix0aGlzKX0saGFuZGxlS2V5ZG93bjpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49ZS5rZXlDb2RlO3JldHVybiAyNz09PW4/KHRoaXMucGlja2VyVmlzaWJsZT0hMSx2b2lkIGUuc3RvcFByb3BhZ2F0aW9uKCkpOjkhPT1uPzEzPT09bj8oKCIiPT09dGhpcy51c2VySW5wdXR8fHRoaXMuaXNWYWxpZFZhbHVlKHRoaXMucGFyc2VTdHJpbmcodGhpcy5kaXNwbGF5VmFsdWUpKSkmJih0aGlzLmhhbmRsZUNoYW5nZSgpLHRoaXMucGlja2VyVmlzaWJsZT10aGlzLnBpY2tlci52aXNpYmxlPSExLHRoaXMuYmx1cigpKSx2b2lkIGUuc3RvcFByb3BhZ2F0aW9uKCkpOnZvaWQodGhpcy51c2VySW5wdXQ/ZS5zdG9wUHJvcGFnYXRpb24oKTp0aGlzLnBpY2tlciYmdGhpcy5waWNrZXIuaGFuZGxlS2V5ZG93biYmdGhpcy5waWNrZXIuaGFuZGxlS2V5ZG93bihlKSk6dm9pZCh0aGlzLnJhbmdlZD9zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7LTE9PT10LnJlZklucHV0LmluZGV4T2YoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkmJih0LnBpY2tlclZpc2libGU9ITEsdC5ibHVyKCksZS5zdG9wUHJvcGFnYXRpb24oKSl9LDApOih0aGlzLmhhbmRsZUNoYW5nZSgpLHRoaXMucGlja2VyVmlzaWJsZT10aGlzLnBpY2tlci52aXNpYmxlPSExLHRoaXMuYmx1cigpLGUuc3RvcFByb3BhZ2F0aW9uKCkpKX0saGFuZGxlUmFuZ2VDbGljazpmdW5jdGlvbigpe3ZhciBlPXRoaXMudHlwZTstMT09PWguaW5kZXhPZihlKXx8dGhpcy5waWNrZXJWaXNpYmxlfHwodGhpcy5waWNrZXJWaXNpYmxlPSEwKSx0aGlzLiRlbWl0KCJmb2N1cyIsdGhpcyl9LGhpZGVQaWNrZXI6ZnVuY3Rpb24oKXt0aGlzLnBpY2tlciYmKHRoaXMucGlja2VyLnJlc2V0VmlldyYmdGhpcy5waWNrZXIucmVzZXRWaWV3KCksdGhpcy5waWNrZXJWaXNpYmxlPXRoaXMucGlja2VyLnZpc2libGU9ITEsdGhpcy5kZXN0cm95UG9wcGVyKCkpfSxzaG93UGlja2VyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiRpc1NlcnZlcnx8KHRoaXMucGlja2VyfHx0aGlzLm1vdW50UGlja2VyKCksdGhpcy5waWNrZXJWaXNpYmxlPXRoaXMucGlja2VyLnZpc2libGU9ITAsdGhpcy51cGRhdGVQb3BwZXIoKSx0aGlzLnBpY2tlci52YWx1ZT10aGlzLnBhcnNlZFZhbHVlLHRoaXMucGlja2VyLnJlc2V0VmlldyYmdGhpcy5waWNrZXIucmVzZXRWaWV3KCksdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXtlLnBpY2tlci5hZGp1c3RTcGlubmVycyYmZS5waWNrZXIuYWRqdXN0U3Bpbm5lcnMoKX0pKX0sbW91bnRQaWNrZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMucGlja2VyPW5ldyByLmRlZmF1bHQodGhpcy5wYW5lbCkuJG1vdW50KCksdGhpcy5waWNrZXIuZGVmYXVsdFZhbHVlPXRoaXMuZGVmYXVsdFZhbHVlLHRoaXMucGlja2VyLmRlZmF1bHRUaW1lPXRoaXMuZGVmYXVsdFRpbWUsdGhpcy5waWNrZXIucG9wcGVyQ2xhc3M9dGhpcy5wb3BwZXJDbGFzcyx0aGlzLnBvcHBlckVsbT10aGlzLnBpY2tlci4kZWwsdGhpcy5waWNrZXIud2lkdGg9dGhpcy5yZWZlcmVuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgsdGhpcy5waWNrZXIuc2hvd1RpbWU9ImRhdGV0aW1lIj09PXRoaXMudHlwZXx8ImRhdGV0aW1lcmFuZ2UiPT09dGhpcy50eXBlLHRoaXMucGlja2VyLnNlbGVjdGlvbk1vZGU9dGhpcy5zZWxlY3Rpb25Nb2RlLHRoaXMucGlja2VyLnVubGlua1BhbmVscz10aGlzLnVubGlua1BhbmVscyx0aGlzLnBpY2tlci5hcnJvd0NvbnRyb2w9dGhpcy5hcnJvd0NvbnRyb2x8fHRoaXMudGltZUFycm93Q29udHJvbHx8ITEsdGhpcy4kd2F0Y2goImZvcm1hdCIsZnVuY3Rpb24odCl7ZS5waWNrZXIuZm9ybWF0PXR9KTt2YXIgdD1mdW5jdGlvbigpe3ZhciB0LG4scixpPWUucGlja2VyT3B0aW9ucztmb3IodmFyIG8gaW4gaSYmaS5zZWxlY3RhYmxlUmFuZ2UmJih0PWkuc2VsZWN0YWJsZVJhbmdlLG49eS5kYXRldGltZXJhbmdlLnBhcnNlcixyPWYudGltZXJhbmdlLHQ9QXJyYXkuaXNBcnJheSh0KT90Olt0XSxlLnBpY2tlci5zZWxlY3RhYmxlUmFuZ2U9dC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIG4odCxyLGUucmFuZ2VTZXBhcmF0b3IpfSkpLGkpaS5oYXNPd25Qcm9wZXJ0eShvKSYmInNlbGVjdGFibGVSYW5nZSIhPT1vJiYoZS5waWNrZXJbb109aVtvXSk7ZS5mb3JtYXQmJihlLnBpY2tlci5mb3JtYXQ9ZS5mb3JtYXQpfTt0KCksdGhpcy51bndhdGNoUGlja2VyT3B0aW9ucz10aGlzLiR3YXRjaCgicGlja2VyT3B0aW9ucyIsZnVuY3Rpb24oKXtyZXR1cm4gdCgpfSx7ZGVlcDohMH0pLHRoaXMuJGVsLmFwcGVuZENoaWxkKHRoaXMucGlja2VyLiRlbCksdGhpcy5waWNrZXIucmVzZXRWaWV3JiZ0aGlzLnBpY2tlci5yZXNldFZpZXcoKSx0aGlzLnBpY2tlci4kb24oImRvZGVzdHJveSIsdGhpcy5kb0Rlc3Ryb3kpLHRoaXMucGlja2VyLiRvbigicGljayIsZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06IiIsbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdO2UudXNlcklucHV0PW51bGwsZS5waWNrZXJWaXNpYmxlPWUucGlja2VyLnZpc2libGU9bixlLmVtaXRJbnB1dCh0KSxlLnBpY2tlci5yZXNldFZpZXcmJmUucGlja2VyLnJlc2V0VmlldygpfSksdGhpcy5waWNrZXIuJG9uKCJzZWxlY3QtcmFuZ2UiLGZ1bmN0aW9uKHQsbixyKXswIT09ZS5yZWZJbnB1dC5sZW5ndGgmJihyJiYibWluIiE9PXI/Im1heCI9PT1yJiYoZS5yZWZJbnB1dFsxXS5zZXRTZWxlY3Rpb25SYW5nZSh0LG4pLGUucmVmSW5wdXRbMV0uZm9jdXMoKSk6KGUucmVmSW5wdXRbMF0uc2V0U2VsZWN0aW9uUmFuZ2UodCxuKSxlLnJlZklucHV0WzBdLmZvY3VzKCkpKX0pfSx1bm1vdW50UGlja2VyOmZ1bmN0aW9uKCl7dGhpcy5waWNrZXImJih0aGlzLnBpY2tlci4kZGVzdHJveSgpLHRoaXMucGlja2VyLiRvZmYoKSwiZnVuY3Rpb24iPT10eXBlb2YgdGhpcy51bndhdGNoUGlja2VyT3B0aW9ucyYmdGhpcy51bndhdGNoUGlja2VyT3B0aW9ucygpLHRoaXMucGlja2VyLiRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGlja2VyLiRlbCkpfSxlbWl0Q2hhbmdlOmZ1bmN0aW9uKGUpe0MoZSx0aGlzLnZhbHVlT25PcGVuKXx8KHRoaXMuJGVtaXQoImNoYW5nZSIsZSksdGhpcy5kaXNwYXRjaCgiRWxGb3JtSXRlbSIsImVsLmZvcm0uY2hhbmdlIixlKSx0aGlzLnZhbHVlT25PcGVuPWUpfSxlbWl0SW5wdXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5mb3JtYXRUb1ZhbHVlKGUpO0ModGhpcy52YWx1ZSx0KXx8dGhpcy4kZW1pdCgiaW5wdXQiLHQpfSxpc1ZhbGlkVmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucGlja2VyfHx0aGlzLm1vdW50UGlja2VyKCksIXRoaXMucGlja2VyLmlzVmFsaWRWYWx1ZXx8ZSYmdGhpcy5waWNrZXIuaXNWYWxpZFZhbHVlKGUpfX19fSwyOTpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJlTmZhIil9LDM6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiMmt2QSIpfSwzMDpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIGUucmFuZ2VkP24oImRpdiIse2RpcmVjdGl2ZXM6W3tuYW1lOiJjbGlja291dHNpZGUiLHJhd05hbWU6InYtY2xpY2tvdXRzaWRlIix2YWx1ZTplLmhhbmRsZUNsb3NlLGV4cHJlc3Npb246ImhhbmRsZUNsb3NlIn1dLHJlZjoicmVmZXJlbmNlIixzdGF0aWNDbGFzczoiZWwtZGF0ZS1lZGl0b3IgZWwtcmFuZ2UtZWRpdG9yIGVsLWlucHV0X19pbm5lciIsY2xhc3M6WyJlbC1kYXRlLWVkaXRvci0tIitlLnR5cGUsZS5waWNrZXJTaXplPyJlbC1yYW5nZS1lZGl0b3ItLSIrZS5waWNrZXJTaXplOiIiLGUucGlja2VyRGlzYWJsZWQ/ImlzLWRpc2FibGVkIjoiIixlLnBpY2tlclZpc2libGU/ImlzLWFjdGl2ZSI6IiJdLG9uOntjbGljazplLmhhbmRsZVJhbmdlQ2xpY2ssbW91c2VlbnRlcjplLmhhbmRsZU1vdXNlRW50ZXIsbW91c2VsZWF2ZTpmdW5jdGlvbih0KXtlLnNob3dDbG9zZT0hMX0sa2V5ZG93bjplLmhhbmRsZUtleWRvd259fSxbbigiaSIse2NsYXNzOlsiZWwtaW5wdXRfX2ljb24iLCJlbC1yYW5nZV9faWNvbiIsZS50cmlnZ2VyQ2xhc3NdfSksbigiaW5wdXQiLGUuX2Ioe3N0YXRpY0NsYXNzOiJlbC1yYW5nZS1pbnB1dCIsYXR0cnM6e2F1dG9jb21wbGV0ZToib2ZmIixwbGFjZWhvbGRlcjplLnN0YXJ0UGxhY2Vob2xkZXIsZGlzYWJsZWQ6ZS5waWNrZXJEaXNhYmxlZCxyZWFkb25seTohZS5lZGl0YWJsZXx8ZS5yZWFkb25seSxuYW1lOmUubmFtZSYmZS5uYW1lWzBdfSxkb21Qcm9wczp7dmFsdWU6ZS5kaXNwbGF5VmFsdWUmJmUuZGlzcGxheVZhbHVlWzBdfSxvbjp7aW5wdXQ6ZS5oYW5kbGVTdGFydElucHV0LGNoYW5nZTplLmhhbmRsZVN0YXJ0Q2hhbmdlLGZvY3VzOmUuaGFuZGxlRm9jdXN9fSwiaW5wdXQiLGUuZmlyc3RJbnB1dElkLCExKSksZS5fdCgicmFuZ2Utc2VwYXJhdG9yIixbbigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC1yYW5nZS1zZXBhcmF0b3IifSxbZS5fdihlLl9zKGUucmFuZ2VTZXBhcmF0b3IpKV0pXSksbigiaW5wdXQiLGUuX2Ioe3N0YXRpY0NsYXNzOiJlbC1yYW5nZS1pbnB1dCIsYXR0cnM6e2F1dG9jb21wbGV0ZToib2ZmIixwbGFjZWhvbGRlcjplLmVuZFBsYWNlaG9sZGVyLGRpc2FibGVkOmUucGlja2VyRGlzYWJsZWQscmVhZG9ubHk6IWUuZWRpdGFibGV8fGUucmVhZG9ubHksbmFtZTplLm5hbWUmJmUubmFtZVsxXX0sZG9tUHJvcHM6e3ZhbHVlOmUuZGlzcGxheVZhbHVlJiZlLmRpc3BsYXlWYWx1ZVsxXX0sb246e2lucHV0OmUuaGFuZGxlRW5kSW5wdXQsY2hhbmdlOmUuaGFuZGxlRW5kQ2hhbmdlLGZvY3VzOmUuaGFuZGxlRm9jdXN9fSwiaW5wdXQiLGUuc2Vjb25kSW5wdXRJZCwhMSkpLGUuaGF2ZVRyaWdnZXI/bigiaSIse3N0YXRpY0NsYXNzOiJlbC1pbnB1dF9faWNvbiBlbC1yYW5nZV9fY2xvc2UtaWNvbiIsY2xhc3M6W2Uuc2hvd0Nsb3NlPyIiK2UuY2xlYXJJY29uOiIiXSxvbjp7Y2xpY2s6ZS5oYW5kbGVDbGlja0ljb259fSk6ZS5fZSgpXSwyKTpuKCJlbC1pbnB1dCIsZS5fYih7ZGlyZWN0aXZlczpbe25hbWU6ImNsaWNrb3V0c2lkZSIscmF3TmFtZToidi1jbGlja291dHNpZGUiLHZhbHVlOmUuaGFuZGxlQ2xvc2UsZXhwcmVzc2lvbjoiaGFuZGxlQ2xvc2UifV0scmVmOiJyZWZlcmVuY2UiLHN0YXRpY0NsYXNzOiJlbC1kYXRlLWVkaXRvciIsY2xhc3M6ImVsLWRhdGUtZWRpdG9yLS0iK2UudHlwZSxhdHRyczp7cmVhZG9ubHk6IWUuZWRpdGFibGV8fGUucmVhZG9ubHl8fCJkYXRlcyI9PT1lLnR5cGUsZGlzYWJsZWQ6ZS5waWNrZXJEaXNhYmxlZCxzaXplOmUucGlja2VyU2l6ZSxuYW1lOmUubmFtZSxwbGFjZWhvbGRlcjplLnBsYWNlaG9sZGVyLHZhbHVlOmUuZGlzcGxheVZhbHVlLHZhbGlkYXRlRXZlbnQ6ITF9LG9uOntmb2N1czplLmhhbmRsZUZvY3VzLGlucHV0OmZ1bmN0aW9uKHQpe3JldHVybiBlLnVzZXJJbnB1dD10fSxjaGFuZ2U6ZS5oYW5kbGVDaGFuZ2V9LG5hdGl2ZU9uOntrZXlkb3duOmZ1bmN0aW9uKHQpe2UuaGFuZGxlS2V5ZG93bih0KX0sbW91c2VlbnRlcjpmdW5jdGlvbih0KXtlLmhhbmRsZU1vdXNlRW50ZXIodCl9LG1vdXNlbGVhdmU6ZnVuY3Rpb24odCl7ZS5zaG93Q2xvc2U9ITF9fX0sImVsLWlucHV0IixlLmZpcnN0SW5wdXRJZCwhMSksW24oImkiLHtzdGF0aWNDbGFzczoiZWwtaW5wdXRfX2ljb24iLGNsYXNzOmUudHJpZ2dlckNsYXNzLGF0dHJzOntzbG90OiJwcmVmaXgifSxvbjp7Y2xpY2s6ZS5oYW5kbGVGb2N1c30sc2xvdDoicHJlZml4In0pLGUuaGF2ZVRyaWdnZXI/bigiaSIse3N0YXRpY0NsYXNzOiJlbC1pbnB1dF9faWNvbiIsY2xhc3M6W2Uuc2hvd0Nsb3NlPyIiK2UuY2xlYXJJY29uOiIiXSxhdHRyczp7c2xvdDoic3VmZml4In0sb246e2NsaWNrOmUuaGFuZGxlQ2xpY2tJY29ufSxzbG90OiJzdWZmaXgifSk6ZS5fZSgpXSl9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9LDMxOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oNDEpLGk9bi5uKHIpLG89big0NCkscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDMyOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oNDIpLGk9bi5uKHIpLG89big0Mykscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDQ6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiNyt1VyIpfSw0MTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj1uKDExKSxpPXMobig1KSksbz1zKG4oMzIpKTtmdW5jdGlvbiBzKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX10LmRlZmF1bHQ9e21peGluczpbaS5kZWZhdWx0XSxjb21wb25lbnRzOntUaW1lU3Bpbm5lcjpvLmRlZmF1bHR9LHByb3BzOnt2aXNpYmxlOkJvb2xlYW4sdGltZUFycm93Q29udHJvbDpCb29sZWFufSx3YXRjaDp7dmlzaWJsZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2U/KHRoaXMub2xkVmFsdWU9dGhpcy52YWx1ZSx0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3JldHVybiB0LiRyZWZzLnNwaW5uZXIuZW1pdFNlbGVjdFJhbmdlKCJob3VycyIpfSkpOnRoaXMubmVlZEluaXRBZGp1c3Q9ITB9LHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj12b2lkIDA7ZSBpbnN0YW5jZW9mIERhdGU/bj0oMCxyLmxpbWl0VGltZVJhbmdlKShlLHRoaXMuc2VsZWN0YWJsZVJhbmdlLHRoaXMuZm9ybWF0KTplfHwobj10aGlzLmRlZmF1bHRWYWx1ZT9uZXcgRGF0ZSh0aGlzLmRlZmF1bHRWYWx1ZSk6bmV3IERhdGUpLHRoaXMuZGF0ZT1uLHRoaXMudmlzaWJsZSYmdGhpcy5uZWVkSW5pdEFkanVzdCYmKHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKGUpe3JldHVybiB0LmFkanVzdFNwaW5uZXJzKCl9KSx0aGlzLm5lZWRJbml0QWRqdXN0PSExKX0sc2VsZWN0YWJsZVJhbmdlOmZ1bmN0aW9uKGUpe3RoaXMuJHJlZnMuc3Bpbm5lci5zZWxlY3RhYmxlUmFuZ2U9ZX0sZGVmYXVsdFZhbHVlOmZ1bmN0aW9uKGUpeygwLHIuaXNEYXRlKSh0aGlzLnZhbHVlKXx8KHRoaXMuZGF0ZT1lP25ldyBEYXRlKGUpOm5ldyBEYXRlKX19LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57cG9wcGVyQ2xhc3M6IiIsZm9ybWF0OiJISDptbTpzcyIsdmFsdWU6IiIsZGVmYXVsdFZhbHVlOm51bGwsZGF0ZTpuZXcgRGF0ZSxvbGRWYWx1ZTpuZXcgRGF0ZSxzZWxlY3RhYmxlUmFuZ2U6W10sc2VsZWN0aW9uUmFuZ2U6WzAsMl0sZGlzYWJsZWQ6ITEsYXJyb3dDb250cm9sOiExLG5lZWRJbml0QWRqdXN0OiEwfX0sY29tcHV0ZWQ6e3Nob3dTZWNvbmRzOmZ1bmN0aW9uKCl7cmV0dXJuLTEhPT0odGhpcy5mb3JtYXR8fCIiKS5pbmRleE9mKCJzcyIpfSx1c2VBcnJvdzpmdW5jdGlvbigpe3JldHVybiB0aGlzLmFycm93Q29udHJvbHx8dGhpcy50aW1lQXJyb3dDb250cm9sfHwhMX0sYW1QbU1vZGU6ZnVuY3Rpb24oKXtyZXR1cm4tMSE9PSh0aGlzLmZvcm1hdHx8IiIpLmluZGV4T2YoIkEiKT8iQSI6LTEhPT0odGhpcy5mb3JtYXR8fCIiKS5pbmRleE9mKCJhIik/ImEiOiIifX0sbWV0aG9kczp7aGFuZGxlQ2FuY2VsOmZ1bmN0aW9uKCl7dGhpcy4kZW1pdCgicGljayIsdGhpcy5vbGRWYWx1ZSwhMSl9LGhhbmRsZUNoYW5nZTpmdW5jdGlvbihlKXt0aGlzLnZpc2libGUmJih0aGlzLmRhdGU9KDAsci5jbGVhck1pbGxpc2Vjb25kcykoZSksdGhpcy5pc1ZhbGlkVmFsdWUodGhpcy5kYXRlKSYmdGhpcy4kZW1pdCgicGljayIsdGhpcy5kYXRlLCEwKSl9LHNldFNlbGVjdGlvblJhbmdlOmZ1bmN0aW9uKGUsdCl7dGhpcy4kZW1pdCgic2VsZWN0LXJhbmdlIixlLHQpLHRoaXMuc2VsZWN0aW9uUmFuZ2U9W2UsdF19LGhhbmRsZUNvbmZpcm06ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSYmYXJndW1lbnRzWzBdLHQ9YXJndW1lbnRzWzFdO2lmKCF0KXt2YXIgbj0oMCxyLmNsZWFyTWlsbGlzZWNvbmRzKSgoMCxyLmxpbWl0VGltZVJhbmdlKSh0aGlzLmRhdGUsdGhpcy5zZWxlY3RhYmxlUmFuZ2UsdGhpcy5mb3JtYXQpKTt0aGlzLiRlbWl0KCJwaWNrIixuLGUsdCl9fSxoYW5kbGVLZXlkb3duOmZ1bmN0aW9uKGUpe3ZhciB0PWUua2V5Q29kZSxuPXszODotMSw0MDoxLDM3Oi0xLDM5OjF9O2lmKDM3PT09dHx8Mzk9PT10KXt2YXIgcj1uW3RdO3JldHVybiB0aGlzLmNoYW5nZVNlbGVjdGlvblJhbmdlKHIpLHZvaWQgZS5wcmV2ZW50RGVmYXVsdCgpfWlmKDM4PT09dHx8NDA9PT10KXt2YXIgaT1uW3RdO3JldHVybiB0aGlzLiRyZWZzLnNwaW5uZXIuc2Nyb2xsRG93bihpKSx2b2lkIGUucHJldmVudERlZmF1bHQoKX19LGlzVmFsaWRWYWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4oMCxyLnRpbWVXaXRoaW5SYW5nZSkoZSx0aGlzLnNlbGVjdGFibGVSYW5nZSx0aGlzLmZvcm1hdCl9LGFkanVzdFNwaW5uZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJHJlZnMuc3Bpbm5lci5hZGp1c3RTcGlubmVycygpfSxjaGFuZ2VTZWxlY3Rpb25SYW5nZTpmdW5jdGlvbihlKXt2YXIgdD1bMCwzXS5jb25jYXQodGhpcy5zaG93U2Vjb25kcz9bNl06W10pLG49WyJob3VycyIsIm1pbnV0ZXMiXS5jb25jYXQodGhpcy5zaG93U2Vjb25kcz9bInNlY29uZHMiXTpbXSkscj0odC5pbmRleE9mKHRoaXMuc2VsZWN0aW9uUmFuZ2VbMF0pK2UrdC5sZW5ndGgpJXQubGVuZ3RoO3RoaXMuJHJlZnMuc3Bpbm5lci5lbWl0U2VsZWN0UmFuZ2UobltyXSl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3JldHVybiBlLmhhbmRsZUNvbmZpcm0oITAsITApfSksdGhpcy4kZW1pdCgibW91bnRlZCIpfX19LDQyOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByPW4oMTEpLGk9cyhuKDE3KSksbz1zKG4oMjQpKTtmdW5jdGlvbiBzKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX10LmRlZmF1bHQ9e2NvbXBvbmVudHM6e0VsU2Nyb2xsYmFyOmkuZGVmYXVsdH0sZGlyZWN0aXZlczp7cmVwZWF0Q2xpY2s6by5kZWZhdWx0fSxwcm9wczp7ZGF0ZTp7fSxkZWZhdWx0VmFsdWU6e30sc2hvd1NlY29uZHM6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxhcnJvd0NvbnRyb2w6Qm9vbGVhbixhbVBtTW9kZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDoiIn19LGNvbXB1dGVkOntob3VyczpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGUuZ2V0SG91cnMoKX0sbWludXRlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGUuZ2V0TWludXRlcygpfSxzZWNvbmRzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGF0ZS5nZXRTZWNvbmRzKCl9LGhvdXJzTGlzdDpmdW5jdGlvbigpe3JldHVybigwLHIuZ2V0UmFuZ2VIb3VycykodGhpcy5zZWxlY3RhYmxlUmFuZ2UpfSxtaW51dGVzTGlzdDpmdW5jdGlvbigpe3JldHVybigwLHIuZ2V0UmFuZ2VNaW51dGVzKSh0aGlzLnNlbGVjdGFibGVSYW5nZSx0aGlzLmhvdXJzKX0sYXJyb3dIb3VyTGlzdDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuaG91cnM7cmV0dXJuW2U+MD9lLTE6dm9pZCAwLGUsZTwyMz9lKzE6dm9pZCAwXX0sYXJyb3dNaW51dGVMaXN0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5taW51dGVzO3JldHVybltlPjA/ZS0xOnZvaWQgMCxlLGU8NTk/ZSsxOnZvaWQgMF19LGFycm93U2Vjb25kTGlzdDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuc2Vjb25kcztyZXR1cm5bZT4wP2UtMTp2b2lkIDAsZSxlPDU5P2UrMTp2b2lkIDBdfX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntzZWxlY3RhYmxlUmFuZ2U6W10sY3VycmVudFNjcm9sbGJhcjpudWxsfX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXshZS5hcnJvd0NvbnRyb2wmJmUuYmluZFNjcm9sbEV2ZW50KCl9KX0sbWV0aG9kczp7aW5jcmVhc2U6ZnVuY3Rpb24oKXt0aGlzLnNjcm9sbERvd24oMSl9LGRlY3JlYXNlOmZ1bmN0aW9uKCl7dGhpcy5zY3JvbGxEb3duKC0xKX0sbW9kaWZ5RGF0ZUZpZWxkOmZ1bmN0aW9uKGUsdCl7c3dpdGNoKGUpe2Nhc2UiaG91cnMiOnRoaXMuJGVtaXQoImNoYW5nZSIsKDAsci5tb2RpZnlUaW1lKSh0aGlzLmRhdGUsdCx0aGlzLm1pbnV0ZXMsdGhpcy5zZWNvbmRzKSk7YnJlYWs7Y2FzZSJtaW51dGVzIjp0aGlzLiRlbWl0KCJjaGFuZ2UiLCgwLHIubW9kaWZ5VGltZSkodGhpcy5kYXRlLHRoaXMuaG91cnMsdCx0aGlzLnNlY29uZHMpKTticmVhaztjYXNlInNlY29uZHMiOnRoaXMuJGVtaXQoImNoYW5nZSIsKDAsci5tb2RpZnlUaW1lKSh0aGlzLmRhdGUsdGhpcy5ob3Vycyx0aGlzLm1pbnV0ZXMsdCkpfX0saGFuZGxlQ2xpY2s6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LnZhbHVlO3QuZGlzYWJsZWR8fCh0aGlzLm1vZGlmeURhdGVGaWVsZChlLG4pLHRoaXMuZW1pdFNlbGVjdFJhbmdlKGUpLHRoaXMuYWRqdXN0U3Bpbm5lcihlLG4pKX0sZW1pdFNlbGVjdFJhbmdlOmZ1bmN0aW9uKGUpeyJob3VycyI9PT1lP3RoaXMuJGVtaXQoInNlbGVjdC1yYW5nZSIsMCwyKToibWludXRlcyI9PT1lP3RoaXMuJGVtaXQoInNlbGVjdC1yYW5nZSIsMyw1KToic2Vjb25kcyI9PT1lJiZ0aGlzLiRlbWl0KCJzZWxlY3QtcmFuZ2UiLDYsOCksdGhpcy5jdXJyZW50U2Nyb2xsYmFyPWV9LGJpbmRTY3JvbGxFdmVudDpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1mdW5jdGlvbih0KXtlLiRyZWZzW3RdLndyYXAub25zY3JvbGw9ZnVuY3Rpb24obil7ZS5oYW5kbGVTY3JvbGwodCxuKX19O3QoImhvdXJzIiksdCgibWludXRlcyIpLHQoInNlY29uZHMiKX0saGFuZGxlU2Nyb2xsOmZ1bmN0aW9uKGUpe3ZhciB0PU1hdGgubWluKE1hdGguZmxvb3IoKHRoaXMuJHJlZnNbZV0ud3JhcC5zY3JvbGxUb3AtKC41KnRoaXMuc2Nyb2xsQmFySGVpZ2h0KGUpLTEwKS90aGlzLnR5cGVJdGVtSGVpZ2h0KGUpKzMpL3RoaXMudHlwZUl0ZW1IZWlnaHQoZSkpLCJob3VycyI9PT1lPzIzOjU5KTt0aGlzLm1vZGlmeURhdGVGaWVsZChlLHQpfSxhZGp1c3RTcGlubmVyczpmdW5jdGlvbigpe3RoaXMuYWRqdXN0U3Bpbm5lcigiaG91cnMiLHRoaXMuaG91cnMpLHRoaXMuYWRqdXN0U3Bpbm5lcigibWludXRlcyIsdGhpcy5taW51dGVzKSx0aGlzLmFkanVzdFNwaW5uZXIoInNlY29uZHMiLHRoaXMuc2Vjb25kcyl9LGFkanVzdEN1cnJlbnRTcGlubmVyOmZ1bmN0aW9uKGUpe3RoaXMuYWRqdXN0U3Bpbm5lcihlLHRoaXNbZV0pfSxhZGp1c3RTcGlubmVyOmZ1bmN0aW9uKGUsdCl7aWYoIXRoaXMuYXJyb3dDb250cm9sKXt2YXIgbj10aGlzLiRyZWZzW2VdLndyYXA7biYmKG4uc2Nyb2xsVG9wPU1hdGgubWF4KDAsdCp0aGlzLnR5cGVJdGVtSGVpZ2h0KGUpKSl9fSxzY3JvbGxEb3duOmZ1bmN0aW9uKGUpe3RoaXMuY3VycmVudFNjcm9sbGJhcnx8dGhpcy5lbWl0U2VsZWN0UmFuZ2UoImhvdXJzIik7dmFyIHQ9dGhpcy5jdXJyZW50U2Nyb2xsYmFyLG49dGhpcy5ob3Vyc0xpc3Qscj10aGlzW3RdO2lmKCJob3VycyI9PT10aGlzLmN1cnJlbnRTY3JvbGxiYXIpe3ZhciBpPU1hdGguYWJzKGUpO2U9ZT4wPzE6LTE7Zm9yKHZhciBvPW4ubGVuZ3RoO28tLSYmaTspbltyPShyK2Urbi5sZW5ndGgpJW4ubGVuZ3RoXXx8aS0tO2lmKG5bcl0pcmV0dXJufWVsc2Ugcj0ocitlKzYwKSU2MDt0aGlzLm1vZGlmeURhdGVGaWVsZCh0LHIpLHRoaXMuYWRqdXN0U3Bpbm5lcih0LHIpfSxhbVBtOmZ1bmN0aW9uKGUpe2lmKCEoImEiPT09dGhpcy5hbVBtTW9kZS50b0xvd2VyQ2FzZSgpKSlyZXR1cm4iIjt2YXIgdD0iQSI9PT10aGlzLmFtUG1Nb2RlLG49ZTwxMj8iIGFtIjoiIHBtIjtyZXR1cm4gdCYmKG49bi50b1VwcGVyQ2FzZSgpKSxufSx0eXBlSXRlbUhlaWdodDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy4kcmVmc1tlXS4kZWwucXVlcnlTZWxlY3RvcigibGkiKS5vZmZzZXRIZWlnaHR9LHNjcm9sbEJhckhlaWdodDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy4kcmVmc1tlXS4kZWwub2Zmc2V0SGVpZ2h0fX19fSw0MzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC10aW1lLXNwaW5uZXIiLGNsYXNzOnsiaGFzLXNlY29uZHMiOmUuc2hvd1NlY29uZHN9fSxbZS5hcnJvd0NvbnRyb2w/ZS5fZSgpOltuKCJlbC1zY3JvbGxiYXIiLHtyZWY6ImhvdXJzIixzdGF0aWNDbGFzczoiZWwtdGltZS1zcGlubmVyX193cmFwcGVyIixhdHRyczp7IndyYXAtc3R5bGUiOiJtYXgtaGVpZ2h0OiBpbmhlcml0OyIsInZpZXctY2xhc3MiOiJlbC10aW1lLXNwaW5uZXJfX2xpc3QiLG5vcmVzaXplOiIiLHRhZzoidWwifSxuYXRpdmVPbjp7bW91c2VlbnRlcjpmdW5jdGlvbih0KXtlLmVtaXRTZWxlY3RSYW5nZSgiaG91cnMiKX0sbW91c2Vtb3ZlOmZ1bmN0aW9uKHQpe2UuYWRqdXN0Q3VycmVudFNwaW5uZXIoImhvdXJzIil9fX0sZS5fbChlLmhvdXJzTGlzdCxmdW5jdGlvbih0LHIpe3JldHVybiBuKCJsaSIse3N0YXRpY0NsYXNzOiJlbC10aW1lLXNwaW5uZXJfX2l0ZW0iLGNsYXNzOnthY3RpdmU6cj09PWUuaG91cnMsZGlzYWJsZWQ6dH0sb246e2NsaWNrOmZ1bmN0aW9uKG4pe2UuaGFuZGxlQ2xpY2soImhvdXJzIix7dmFsdWU6cixkaXNhYmxlZDp0fSl9fX0sW2UuX3YoZS5fcygoIjAiKyhlLmFtUG1Nb2RlP3IlMTJ8fDEyOnIpKS5zbGljZSgtMikpK2UuX3MoZS5hbVBtKHIpKSldKX0pKSxuKCJlbC1zY3JvbGxiYXIiLHtyZWY6Im1pbnV0ZXMiLHN0YXRpY0NsYXNzOiJlbC10aW1lLXNwaW5uZXJfX3dyYXBwZXIiLGF0dHJzOnsid3JhcC1zdHlsZSI6Im1heC1oZWlnaHQ6IGluaGVyaXQ7Iiwidmlldy1jbGFzcyI6ImVsLXRpbWUtc3Bpbm5lcl9fbGlzdCIsbm9yZXNpemU6IiIsdGFnOiJ1bCJ9LG5hdGl2ZU9uOnttb3VzZWVudGVyOmZ1bmN0aW9uKHQpe2UuZW1pdFNlbGVjdFJhbmdlKCJtaW51dGVzIil9LG1vdXNlbW92ZTpmdW5jdGlvbih0KXtlLmFkanVzdEN1cnJlbnRTcGlubmVyKCJtaW51dGVzIil9fX0sZS5fbChlLm1pbnV0ZXNMaXN0LGZ1bmN0aW9uKHQscil7cmV0dXJuIG4oImxpIix7c3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9faXRlbSIsY2xhc3M6e2FjdGl2ZTpyPT09ZS5taW51dGVzLGRpc2FibGVkOiF0fSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVDbGljaygibWludXRlcyIse3ZhbHVlOnIsZGlzYWJsZWQ6ITF9KX19fSxbZS5fdihlLl9zKCgiMCIrcikuc2xpY2UoLTIpKSldKX0pKSxuKCJlbC1zY3JvbGxiYXIiLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTplLnNob3dTZWNvbmRzLGV4cHJlc3Npb246InNob3dTZWNvbmRzIn1dLHJlZjoic2Vjb25kcyIsc3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9fd3JhcHBlciIsYXR0cnM6eyJ3cmFwLXN0eWxlIjoibWF4LWhlaWdodDogaW5oZXJpdDsiLCJ2aWV3LWNsYXNzIjoiZWwtdGltZS1zcGlubmVyX19saXN0Iixub3Jlc2l6ZToiIix0YWc6InVsIn0sbmF0aXZlT246e21vdXNlZW50ZXI6ZnVuY3Rpb24odCl7ZS5lbWl0U2VsZWN0UmFuZ2UoInNlY29uZHMiKX0sbW91c2Vtb3ZlOmZ1bmN0aW9uKHQpe2UuYWRqdXN0Q3VycmVudFNwaW5uZXIoInNlY29uZHMiKX19fSxlLl9sKDYwLGZ1bmN0aW9uKHQscil7cmV0dXJuIG4oImxpIix7a2V5OnIsc3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9faXRlbSIsY2xhc3M6e2FjdGl2ZTpyPT09ZS5zZWNvbmRzfSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVDbGljaygic2Vjb25kcyIse3ZhbHVlOnIsZGlzYWJsZWQ6ITF9KX19fSxbZS5fdihlLl9zKCgiMCIrcikuc2xpY2UoLTIpKSldKX0pKV0sZS5hcnJvd0NvbnRyb2w/W24oImRpdiIse3N0YXRpY0NsYXNzOiJlbC10aW1lLXNwaW5uZXJfX3dyYXBwZXIgaXMtYXJyb3ciLG9uOnttb3VzZWVudGVyOmZ1bmN0aW9uKHQpe2UuZW1pdFNlbGVjdFJhbmdlKCJob3VycyIpfX19LFtuKCJpIix7ZGlyZWN0aXZlczpbe25hbWU6InJlcGVhdC1jbGljayIscmF3TmFtZToidi1yZXBlYXQtY2xpY2siLHZhbHVlOmUuZGVjcmVhc2UsZXhwcmVzc2lvbjoiZGVjcmVhc2UifV0sc3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9fYXJyb3cgZWwtaWNvbi1hcnJvdy11cCJ9KSxuKCJpIix7ZGlyZWN0aXZlczpbe25hbWU6InJlcGVhdC1jbGljayIscmF3TmFtZToidi1yZXBlYXQtY2xpY2siLHZhbHVlOmUuaW5jcmVhc2UsZXhwcmVzc2lvbjoiaW5jcmVhc2UifV0sc3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9fYXJyb3cgZWwtaWNvbi1hcnJvdy1kb3duIn0pLG4oInVsIix7cmVmOiJob3VycyIsc3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9fbGlzdCJ9LGUuX2woZS5hcnJvd0hvdXJMaXN0LGZ1bmN0aW9uKHQscil7cmV0dXJuIG4oImxpIix7a2V5OnIsc3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9faXRlbSIsY2xhc3M6e2FjdGl2ZTp0PT09ZS5ob3VycyxkaXNhYmxlZDplLmhvdXJzTGlzdFt0XX19LFtlLl92KGUuX3Modm9pZCAwPT09dD8iIjooIjAiKyhlLmFtUG1Nb2RlP3QlMTJ8fDEyOnQpKS5zbGljZSgtMikrZS5hbVBtKHQpKSldKX0pKV0pLG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC10aW1lLXNwaW5uZXJfX3dyYXBwZXIgaXMtYXJyb3ciLG9uOnttb3VzZWVudGVyOmZ1bmN0aW9uKHQpe2UuZW1pdFNlbGVjdFJhbmdlKCJtaW51dGVzIil9fX0sW24oImkiLHtkaXJlY3RpdmVzOlt7bmFtZToicmVwZWF0LWNsaWNrIixyYXdOYW1lOiJ2LXJlcGVhdC1jbGljayIsdmFsdWU6ZS5kZWNyZWFzZSxleHByZXNzaW9uOiJkZWNyZWFzZSJ9XSxzdGF0aWNDbGFzczoiZWwtdGltZS1zcGlubmVyX19hcnJvdyBlbC1pY29uLWFycm93LXVwIn0pLG4oImkiLHtkaXJlY3RpdmVzOlt7bmFtZToicmVwZWF0LWNsaWNrIixyYXdOYW1lOiJ2LXJlcGVhdC1jbGljayIsdmFsdWU6ZS5pbmNyZWFzZSxleHByZXNzaW9uOiJpbmNyZWFzZSJ9XSxzdGF0aWNDbGFzczoiZWwtdGltZS1zcGlubmVyX19hcnJvdyBlbC1pY29uLWFycm93LWRvd24ifSksbigidWwiLHtyZWY6Im1pbnV0ZXMiLHN0YXRpY0NsYXNzOiJlbC10aW1lLXNwaW5uZXJfX2xpc3QifSxlLl9sKGUuYXJyb3dNaW51dGVMaXN0LGZ1bmN0aW9uKHQscil7cmV0dXJuIG4oImxpIix7a2V5OnIsc3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9faXRlbSIsY2xhc3M6e2FjdGl2ZTp0PT09ZS5taW51dGVzfX0sW2UuX3YoIlxuICAgICAgICAgICIrZS5fcyh2b2lkIDA9PT10PyIiOigiMCIrdCkuc2xpY2UoLTIpKSsiXG4gICAgICAgICIpXSl9KSldKSxlLnNob3dTZWNvbmRzP24oImRpdiIse3N0YXRpY0NsYXNzOiJlbC10aW1lLXNwaW5uZXJfX3dyYXBwZXIgaXMtYXJyb3ciLG9uOnttb3VzZWVudGVyOmZ1bmN0aW9uKHQpe2UuZW1pdFNlbGVjdFJhbmdlKCJzZWNvbmRzIil9fX0sW24oImkiLHtkaXJlY3RpdmVzOlt7bmFtZToicmVwZWF0LWNsaWNrIixyYXdOYW1lOiJ2LXJlcGVhdC1jbGljayIsdmFsdWU6ZS5kZWNyZWFzZSxleHByZXNzaW9uOiJkZWNyZWFzZSJ9XSxzdGF0aWNDbGFzczoiZWwtdGltZS1zcGlubmVyX19hcnJvdyBlbC1pY29uLWFycm93LXVwIn0pLG4oImkiLHtkaXJlY3RpdmVzOlt7bmFtZToicmVwZWF0LWNsaWNrIixyYXdOYW1lOiJ2LXJlcGVhdC1jbGljayIsdmFsdWU6ZS5pbmNyZWFzZSxleHByZXNzaW9uOiJpbmNyZWFzZSJ9XSxzdGF0aWNDbGFzczoiZWwtdGltZS1zcGlubmVyX19hcnJvdyBlbC1pY29uLWFycm93LWRvd24ifSksbigidWwiLHtyZWY6InNlY29uZHMiLHN0YXRpY0NsYXNzOiJlbC10aW1lLXNwaW5uZXJfX2xpc3QifSxlLl9sKGUuYXJyb3dTZWNvbmRMaXN0LGZ1bmN0aW9uKHQscil7cmV0dXJuIG4oImxpIix7a2V5OnIsc3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9faXRlbSIsY2xhc3M6e2FjdGl2ZTp0PT09ZS5zZWNvbmRzfX0sW2UuX3YoIlxuICAgICAgICAgICIrZS5fcyh2b2lkIDA9PT10PyIiOigiMCIrdCkuc2xpY2UoLTIpKSsiXG4gICAgICAgICIpXSl9KSldKTplLl9lKCldOmUuX2UoKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9LDQ0OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbigidHJhbnNpdGlvbiIse2F0dHJzOntuYW1lOiJlbC16b29tLWluLXRvcCJ9LG9uOnsiYWZ0ZXItbGVhdmUiOmZ1bmN0aW9uKHQpe2UuJGVtaXQoImRvZGVzdHJveSIpfX19LFtuKCJkaXYiLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTplLnZpc2libGUsZXhwcmVzc2lvbjoidmlzaWJsZSJ9XSxzdGF0aWNDbGFzczoiZWwtdGltZS1wYW5lbCBlbC1wb3BwZXIiLGNsYXNzOmUucG9wcGVyQ2xhc3N9LFtuKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtdGltZS1wYW5lbF9fY29udGVudCIsY2xhc3M6eyJoYXMtc2Vjb25kcyI6ZS5zaG93U2Vjb25kc319LFtuKCJ0aW1lLXNwaW5uZXIiLHtyZWY6InNwaW5uZXIiLGF0dHJzOnsiYXJyb3ctY29udHJvbCI6ZS51c2VBcnJvdywic2hvdy1zZWNvbmRzIjplLnNob3dTZWNvbmRzLCJhbS1wbS1tb2RlIjplLmFtUG1Nb2RlLGRhdGU6ZS5kYXRlfSxvbjp7Y2hhbmdlOmUuaGFuZGxlQ2hhbmdlLCJzZWxlY3QtcmFuZ2UiOmUuc2V0U2VsZWN0aW9uUmFuZ2V9fSldLDEpLG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC10aW1lLXBhbmVsX19mb290ZXIifSxbbigiYnV0dG9uIix7c3RhdGljQ2xhc3M6ImVsLXRpbWUtcGFuZWxfX2J0biBjYW5jZWwiLGF0dHJzOnt0eXBlOiJidXR0b24ifSxvbjp7Y2xpY2s6ZS5oYW5kbGVDYW5jZWx9fSxbZS5fdihlLl9zKGUudCgiZWwuZGF0ZXBpY2tlci5jYW5jZWwiKSkpXSksbigiYnV0dG9uIix7c3RhdGljQ2xhc3M6ImVsLXRpbWUtcGFuZWxfX2J0biIsY2xhc3M6e2NvbmZpcm06IWUuZGlzYWJsZWR9LGF0dHJzOnt0eXBlOiJidXR0b24ifSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVDb25maXJtKCl9fX0sW2UuX3YoZS5fcyhlLnQoImVsLmRhdGVwaWNrZXIuY29uZmlybSIpKSldKV0pXSldKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn0sNTpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJ5Kzd4Iil9LDY6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiSEpNeCIpfSw3OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImZLeDMiKX0sOTpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJqbWFDIil9fSl9LCI0bWN1IjpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbigpe319LCI1MmdDIjpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtpZih2b2lkIDA9PWUpdGhyb3cgVHlwZUVycm9yKCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgIitlKTtyZXR1cm4gZX19LCI1UVZ3IjpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPXtkZWZhdWx0Om4oIkJ3ZlkiKSxfX2VzTW9kdWxlOiEwfX0sIjVWUSsiOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiY0dHMiIpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3IuZm9yRWFjaChlLGZ1bmN0aW9uKG4scil7ciE9PXQmJnIudG9VcHBlckNhc2UoKT09PXQudG9VcHBlckNhc2UoKSYmKGVbdF09bixkZWxldGUgZVtyXSl9KX19LCI1emRlIjpmdW5jdGlvbihlLHQsbil7bigielFSOSIpLG4oInF5SnoiKSxlLmV4cG9ydHM9bigiRmVCbCIpLkFycmF5LmZyb219LCI2VHdoIjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMCx0LmRlZmF1bHQ9ZnVuY3Rpb24oKXtpZihvLmRlZmF1bHQucHJvdG90eXBlLiRpc1NlcnZlcilyZXR1cm4gMDtpZih2b2lkIDAhPT1zKXJldHVybiBzO3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpO2UuY2xhc3NOYW1lPSJlbC1zY3JvbGxiYXJfX3dyYXAiLGUuc3R5bGUudmlzaWJpbGl0eT0iaGlkZGVuIixlLnN0eWxlLndpZHRoPSIxMDBweCIsZS5zdHlsZS5wb3NpdGlvbj0iYWJzb2x1dGUiLGUuc3R5bGUudG9wPSItOTk5OXB4Iixkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGUpO3ZhciB0PWUub2Zmc2V0V2lkdGg7ZS5zdHlsZS5vdmVyZmxvdz0ic2Nyb2xsIjt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTtuLnN0eWxlLndpZHRoPSIxMDAlIixlLmFwcGVuZENoaWxkKG4pO3ZhciByPW4ub2Zmc2V0V2lkdGg7cmV0dXJuIGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKSxzPXQtcn07dmFyIHIsaT1uKCI3K3VXIiksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07dmFyIHM9dm9pZCAwfSwiNm9pVyI6ZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiBuKHIpe2lmKHRbcl0pcmV0dXJuIHRbcl0uZXhwb3J0czt2YXIgaT10W3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtyXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyxuKSxpLmw9ITAsaS5leHBvcnRzfXJldHVybiBuLm09ZSxuLmM9dCxuLmQ9ZnVuY3Rpb24oZSx0LHIpe24ubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxuLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIG4uZCh0LCJhIix0KSx0fSxuLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LG4ucD0iL2Rpc3QvIixuKG4ucz01NCl9KHswOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt2YXIgcyxhPWU9ZXx8e30sbD10eXBlb2YgZS5kZWZhdWx0OyJvYmplY3QiIT09bCYmImZ1bmN0aW9uIiE9PWx8fChzPWUsYT1lLmRlZmF1bHQpO3ZhciB1LGM9ImZ1bmN0aW9uIj09dHlwZW9mIGE/YS5vcHRpb25zOmE7aWYodCYmKGMucmVuZGVyPXQucmVuZGVyLGMuc3RhdGljUmVuZGVyRm5zPXQuc3RhdGljUmVuZGVyRm5zLGMuX2NvbXBpbGVkPSEwKSxuJiYoYy5mdW5jdGlvbmFsPSEwKSxpJiYoYy5fc2NvcGVJZD1pKSxvPyh1PWZ1bmN0aW9uKGUpeyhlPWV8fHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fHx0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCl8fCJ1bmRlZmluZWQiPT10eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfX3x8KGU9X19WVUVfU1NSX0NPTlRFWFRfXyksciYmci5jYWxsKHRoaXMsZSksZSYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChvKX0sYy5fc3NyUmVnaXN0ZXI9dSk6ciYmKHU9ciksdSl7dmFyIGQ9Yy5mdW5jdGlvbmFsLGY9ZD9jLnJlbmRlcjpjLmJlZm9yZUNyZWF0ZTtkPyhjLl9pbmplY3RTdHlsZXM9dSxjLnJlbmRlcj1mdW5jdGlvbihlLHQpe3JldHVybiB1LmNhbGwodCksZihlLHQpfSk6Yy5iZWZvcmVDcmVhdGU9Zj9bXS5jb25jYXQoZix1KTpbdV19cmV0dXJue2VzTW9kdWxlOnMsZXhwb3J0czphLG9wdGlvbnM6Y319fSwyOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oInlsREoiKX0sNTpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJ5Kzd4Iil9LDU0OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9big1NSksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07by5kZWZhdWx0Lmluc3RhbGw9ZnVuY3Rpb24oZSl7ZS5jb21wb25lbnQoby5kZWZhdWx0Lm5hbWUsby5kZWZhdWx0KX0sdC5kZWZhdWx0PW8uZGVmYXVsdH0sNTU6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9dShuKDU2KSksaT11KG4oNTkpKSxvPXUobig2MCkpLHM9dShuKDYpKSxhPXUobig1KSksbD1uKDIpO2Z1bmN0aW9uIHUoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXQuZGVmYXVsdD17bmFtZToiRWxQYWdpbmF0aW9uIixwcm9wczp7cGFnZVNpemU6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MTB9LHNtYWxsOkJvb2xlYW4sdG90YWw6TnVtYmVyLHBhZ2VDb3VudDpOdW1iZXIscGFnZXJDb3VudDp7dHlwZTpOdW1iZXIsdmFsaWRhdG9yOmZ1bmN0aW9uKGUpe3JldHVybigwfGUpPT09ZSYmZT40JiZlPDIyJiZlJTI9PTF9LGRlZmF1bHQ6N30sY3VycmVudFBhZ2U6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MX0sbGF5b3V0OntkZWZhdWx0OiJwcmV2LCBwYWdlciwgbmV4dCwganVtcGVyLCAtPiwgdG90YWwifSxwYWdlU2l6ZXM6e3R5cGU6QXJyYXksZGVmYXVsdDpmdW5jdGlvbigpe3JldHVyblsxMCwyMCwzMCw0MCw1MCwxMDBdfX0scG9wcGVyQ2xhc3M6U3RyaW5nLHByZXZUZXh0OlN0cmluZyxuZXh0VGV4dDpTdHJpbmcsYmFja2dyb3VuZDpCb29sZWFuLGRpc2FibGVkOkJvb2xlYW59LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57aW50ZXJuYWxDdXJyZW50UGFnZToxLGludGVybmFsUGFnZVNpemU6MCxsYXN0RW1pdHRlZFBhZ2U6LTEsdXNlckNoYW5nZVBhZ2VTaXplOiExfX0scmVuZGVyOmZ1bmN0aW9uKGUpe3ZhciB0PWUoImRpdiIse2NsYXNzOlsiZWwtcGFnaW5hdGlvbiIseyJpcy1iYWNrZ3JvdW5kIjp0aGlzLmJhY2tncm91bmQsImVsLXBhZ2luYXRpb24tLXNtYWxsIjp0aGlzLnNtYWxsfV19LFtdKSxuPXRoaXMubGF5b3V0fHwiIjtpZihuKXt2YXIgcj17cHJldjplKCJwcmV2IixudWxsLFtdKSxqdW1wZXI6ZSgianVtcGVyIixudWxsLFtdKSxwYWdlcjplKCJwYWdlciIse2F0dHJzOntjdXJyZW50UGFnZTp0aGlzLmludGVybmFsQ3VycmVudFBhZ2UscGFnZUNvdW50OnRoaXMuaW50ZXJuYWxQYWdlQ291bnQscGFnZXJDb3VudDp0aGlzLnBhZ2VyQ291bnQsZGlzYWJsZWQ6dGhpcy5kaXNhYmxlZH0sb246e2NoYW5nZTp0aGlzLmhhbmRsZUN1cnJlbnRDaGFuZ2V9fSxbXSksbmV4dDplKCJuZXh0IixudWxsLFtdKSxzaXplczplKCJzaXplcyIse2F0dHJzOntwYWdlU2l6ZXM6dGhpcy5wYWdlU2l6ZXN9fSxbXSksc2xvdDplKCJteS1zbG90IixudWxsLFtdKSx0b3RhbDplKCJ0b3RhbCIsbnVsbCxbXSl9LGk9bi5zcGxpdCgiLCIpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS50cmltKCl9KSxvPWUoImRpdiIse2NsYXNzOiJlbC1wYWdpbmF0aW9uX19yaWdodHdyYXBwZXIifSxbXSkscz0hMTtyZXR1cm4gdC5jaGlsZHJlbj10LmNoaWxkcmVufHxbXSxvLmNoaWxkcmVuPW8uY2hpbGRyZW58fFtdLGkuZm9yRWFjaChmdW5jdGlvbihlKXsiLT4iIT09ZT9zP28uY2hpbGRyZW4ucHVzaChyW2VdKTp0LmNoaWxkcmVuLnB1c2gocltlXSk6cz0hMH0pLHMmJnQuY2hpbGRyZW4udW5zaGlmdChvKSx0fX0sY29tcG9uZW50czp7TXlTbG90OntyZW5kZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuJHBhcmVudC4kc2xvdHMuZGVmYXVsdD90aGlzLiRwYXJlbnQuJHNsb3RzLmRlZmF1bHRbMF06IiJ9fSxQcmV2OntyZW5kZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGUoImJ1dHRvbiIse2F0dHJzOnt0eXBlOiJidXR0b24iLGRpc2FibGVkOnRoaXMuJHBhcmVudC5kaXNhYmxlZHx8dGhpcy4kcGFyZW50LmludGVybmFsQ3VycmVudFBhZ2U8PTF9LGNsYXNzOiJidG4tcHJldiIsb246e2NsaWNrOnRoaXMuJHBhcmVudC5wcmV2fX0sW3RoaXMuJHBhcmVudC5wcmV2VGV4dD9lKCJzcGFuIixudWxsLFt0aGlzLiRwYXJlbnQucHJldlRleHRdKTplKCJpIix7Y2xhc3M6ImVsLWljb24gZWwtaWNvbi1hcnJvdy1sZWZ0In0sW10pXSl9fSxOZXh0OntyZW5kZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGUoImJ1dHRvbiIse2F0dHJzOnt0eXBlOiJidXR0b24iLGRpc2FibGVkOnRoaXMuJHBhcmVudC5kaXNhYmxlZHx8dGhpcy4kcGFyZW50LmludGVybmFsQ3VycmVudFBhZ2U9PT10aGlzLiRwYXJlbnQuaW50ZXJuYWxQYWdlQ291bnR8fDA9PT10aGlzLiRwYXJlbnQuaW50ZXJuYWxQYWdlQ291bnR9LGNsYXNzOiJidG4tbmV4dCIsb246e2NsaWNrOnRoaXMuJHBhcmVudC5uZXh0fX0sW3RoaXMuJHBhcmVudC5uZXh0VGV4dD9lKCJzcGFuIixudWxsLFt0aGlzLiRwYXJlbnQubmV4dFRleHRdKTplKCJpIix7Y2xhc3M6ImVsLWljb24gZWwtaWNvbi1hcnJvdy1yaWdodCJ9LFtdKV0pfX0sU2l6ZXM6e21peGluczpbYS5kZWZhdWx0XSxwcm9wczp7cGFnZVNpemVzOkFycmF5fSx3YXRjaDp7cGFnZVNpemVzOntpbW1lZGlhdGU6ITAsaGFuZGxlcjpmdW5jdGlvbihlLHQpeygwLGwudmFsdWVFcXVhbHMpKGUsdCl8fEFycmF5LmlzQXJyYXkoZSkmJih0aGlzLiRwYXJlbnQuaW50ZXJuYWxQYWdlU2l6ZT1lLmluZGV4T2YodGhpcy4kcGFyZW50LnBhZ2VTaXplKT4tMT90aGlzLiRwYXJlbnQucGFnZVNpemU6dGhpcy5wYWdlU2l6ZXNbMF0pfX19LHJlbmRlcjpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBlKCJzcGFuIix7Y2xhc3M6ImVsLXBhZ2luYXRpb25fX3NpemVzIn0sW2UoImVsLXNlbGVjdCIse2F0dHJzOnt2YWx1ZTp0aGlzLiRwYXJlbnQuaW50ZXJuYWxQYWdlU2l6ZSxwb3BwZXJDbGFzczp0aGlzLiRwYXJlbnQucG9wcGVyQ2xhc3N8fCIiLHNpemU6Im1pbmkiLGRpc2FibGVkOnRoaXMuJHBhcmVudC5kaXNhYmxlZH0sb246e2lucHV0OnRoaXMuaGFuZGxlQ2hhbmdlfX0sW3RoaXMucGFnZVNpemVzLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gZSgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOm4sbGFiZWw6bit0LnQoImVsLnBhZ2luYXRpb24ucGFnZXNpemUiKX19LFtdKX0pXSldKX0sY29tcG9uZW50czp7RWxTZWxlY3Q6aS5kZWZhdWx0LEVsT3B0aW9uOm8uZGVmYXVsdH0sbWV0aG9kczp7aGFuZGxlQ2hhbmdlOmZ1bmN0aW9uKGUpe2UhPT10aGlzLiRwYXJlbnQuaW50ZXJuYWxQYWdlU2l6ZSYmKHRoaXMuJHBhcmVudC5pbnRlcm5hbFBhZ2VTaXplPWU9cGFyc2VJbnQoZSwxMCksdGhpcy4kcGFyZW50LnVzZXJDaGFuZ2VQYWdlU2l6ZT0hMCx0aGlzLiRwYXJlbnQuJGVtaXQoInVwZGF0ZTpwYWdlU2l6ZSIsZSksdGhpcy4kcGFyZW50LiRlbWl0KCJzaXplLWNoYW5nZSIsZSkpfX19LEp1bXBlcjp7bWl4aW5zOlthLmRlZmF1bHRdLGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57b2xkVmFsdWU6bnVsbH19LGNvbXBvbmVudHM6e0VsSW5wdXQ6cy5kZWZhdWx0fSx3YXRjaDp7IiRwYXJlbnQuaW50ZXJuYWxQYWdlU2l6ZSI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7ZS4kcmVmcy5pbnB1dC4kZWwucXVlcnlTZWxlY3RvcigiaW5wdXQiKS52YWx1ZT1lLiRwYXJlbnQuaW50ZXJuYWxDdXJyZW50UGFnZX0pfX0sbWV0aG9kczp7aGFuZGxlRm9jdXM6ZnVuY3Rpb24oZSl7dGhpcy5vbGRWYWx1ZT1lLnRhcmdldC52YWx1ZX0saGFuZGxlQmx1cjpmdW5jdGlvbihlKXt2YXIgdD1lLnRhcmdldDt0aGlzLnJlc2V0VmFsdWVJZk5lZWQodC52YWx1ZSksdGhpcy5yZWFzc2lnbk1heFZhbHVlKHQudmFsdWUpfSxoYW5kbGVLZXl1cDpmdW5jdGlvbihlKXt2YXIgdD1lLmtleUNvZGUsbj1lLnRhcmdldDsxMz09PXQmJnRoaXMub2xkVmFsdWUmJm4udmFsdWUhPT10aGlzLm9sZFZhbHVlJiZ0aGlzLmhhbmRsZUNoYW5nZShuLnZhbHVlKX0saGFuZGxlQ2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMuJHBhcmVudC5pbnRlcm5hbEN1cnJlbnRQYWdlPXRoaXMuJHBhcmVudC5nZXRWYWxpZEN1cnJlbnRQYWdlKGUpLHRoaXMuJHBhcmVudC5lbWl0Q2hhbmdlKCksdGhpcy5vbGRWYWx1ZT1udWxsLHRoaXMucmVzZXRWYWx1ZUlmTmVlZChlKX0scmVzZXRWYWx1ZUlmTmVlZDpmdW5jdGlvbihlKXt2YXIgdD1wYXJzZUludChlLDEwKTtpc05hTih0KXx8KHQ8MT90aGlzLiRyZWZzLmlucHV0LnNldEN1cnJlbnRWYWx1ZSgxKTp0aGlzLnJlYXNzaWduTWF4VmFsdWUoZSkpfSxyZWFzc2lnbk1heFZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuJHBhcmVudC5pbnRlcm5hbFBhZ2VDb3VudDsrZT50JiZ0aGlzLiRyZWZzLmlucHV0LnNldEN1cnJlbnRWYWx1ZSh0fHwxKX19LHJlbmRlcjpmdW5jdGlvbihlKXtyZXR1cm4gZSgic3BhbiIse2NsYXNzOiJlbC1wYWdpbmF0aW9uX19qdW1wIn0sW3RoaXMudCgiZWwucGFnaW5hdGlvbi5nb3RvIiksZSgiZWwtaW5wdXQiLHtjbGFzczoiZWwtcGFnaW5hdGlvbl9fZWRpdG9yIGlzLWluLXBhZ2luYXRpb24iLGF0dHJzOnttaW46MSxtYXg6dGhpcy4kcGFyZW50LmludGVybmFsUGFnZUNvdW50LHZhbHVlOnRoaXMuJHBhcmVudC5pbnRlcm5hbEN1cnJlbnRQYWdlLHR5cGU6Im51bWJlciIsZGlzYWJsZWQ6dGhpcy4kcGFyZW50LmRpc2FibGVkfSxkb21Qcm9wczp7dmFsdWU6dGhpcy4kcGFyZW50LmludGVybmFsQ3VycmVudFBhZ2V9LHJlZjoiaW5wdXQiLG5hdGl2ZU9uOntrZXl1cDp0aGlzLmhhbmRsZUtleXVwfSxvbjp7Y2hhbmdlOnRoaXMuaGFuZGxlQ2hhbmdlLGZvY3VzOnRoaXMuaGFuZGxlRm9jdXMsYmx1cjp0aGlzLmhhbmRsZUJsdXJ9fSxbXSksdGhpcy50KCJlbC5wYWdpbmF0aW9uLnBhZ2VDbGFzc2lmaWVyIildKX19LFRvdGFsOnttaXhpbnM6W2EuZGVmYXVsdF0scmVuZGVyOmZ1bmN0aW9uKGUpe3JldHVybiJudW1iZXIiPT10eXBlb2YgdGhpcy4kcGFyZW50LnRvdGFsP2UoInNwYW4iLHtjbGFzczoiZWwtcGFnaW5hdGlvbl9fdG90YWwifSxbdGhpcy50KCJlbC5wYWdpbmF0aW9uLnRvdGFsIix7dG90YWw6dGhpcy4kcGFyZW50LnRvdGFsfSldKToiIn19LFBhZ2VyOnIuZGVmYXVsdH0sbWV0aG9kczp7aGFuZGxlQ3VycmVudENoYW5nZTpmdW5jdGlvbihlKXt0aGlzLmludGVybmFsQ3VycmVudFBhZ2U9dGhpcy5nZXRWYWxpZEN1cnJlbnRQYWdlKGUpLHRoaXMudXNlckNoYW5nZVBhZ2VTaXplPSEwLHRoaXMuZW1pdENoYW5nZSgpfSxwcmV2OmZ1bmN0aW9uKCl7aWYoIXRoaXMuZGlzYWJsZWQpe3ZhciBlPXRoaXMuaW50ZXJuYWxDdXJyZW50UGFnZS0xO3RoaXMuaW50ZXJuYWxDdXJyZW50UGFnZT10aGlzLmdldFZhbGlkQ3VycmVudFBhZ2UoZSksdGhpcy4kZW1pdCgicHJldi1jbGljayIsdGhpcy5pbnRlcm5hbEN1cnJlbnRQYWdlKSx0aGlzLmVtaXRDaGFuZ2UoKX19LG5leHQ6ZnVuY3Rpb24oKXtpZighdGhpcy5kaXNhYmxlZCl7dmFyIGU9dGhpcy5pbnRlcm5hbEN1cnJlbnRQYWdlKzE7dGhpcy5pbnRlcm5hbEN1cnJlbnRQYWdlPXRoaXMuZ2V0VmFsaWRDdXJyZW50UGFnZShlKSx0aGlzLiRlbWl0KCJuZXh0LWNsaWNrIix0aGlzLmludGVybmFsQ3VycmVudFBhZ2UpLHRoaXMuZW1pdENoYW5nZSgpfX0sZ2V0VmFsaWRDdXJyZW50UGFnZTpmdW5jdGlvbihlKXtlPXBhcnNlSW50KGUsMTApO3ZhciB0PXZvaWQgMDtyZXR1cm4ibnVtYmVyIj09dHlwZW9mIHRoaXMuaW50ZXJuYWxQYWdlQ291bnQ/ZTwxP3Q9MTplPnRoaXMuaW50ZXJuYWxQYWdlQ291bnQmJih0PXRoaXMuaW50ZXJuYWxQYWdlQ291bnQpOihpc05hTihlKXx8ZTwxKSYmKHQ9MSksdm9pZCAwPT09dCYmaXNOYU4oZSk/dD0xOjA9PT10JiYodD0xKSx2b2lkIDA9PT10P2U6dH0sZW1pdENoYW5nZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXsoZS5pbnRlcm5hbEN1cnJlbnRQYWdlIT09ZS5sYXN0RW1pdHRlZFBhZ2V8fGUudXNlckNoYW5nZVBhZ2VTaXplKSYmKGUuJGVtaXQoImN1cnJlbnQtY2hhbmdlIixlLmludGVybmFsQ3VycmVudFBhZ2UpLGUubGFzdEVtaXR0ZWRQYWdlPWUuaW50ZXJuYWxDdXJyZW50UGFnZSxlLnVzZXJDaGFuZ2VQYWdlU2l6ZT0hMSl9KX19LGNvbXB1dGVkOntpbnRlcm5hbFBhZ2VDb3VudDpmdW5jdGlvbigpe3JldHVybiJudW1iZXIiPT10eXBlb2YgdGhpcy50b3RhbD9NYXRoLmNlaWwodGhpcy50b3RhbC90aGlzLmludGVybmFsUGFnZVNpemUpOiJudW1iZXIiPT10eXBlb2YgdGhpcy5wYWdlQ291bnQ/dGhpcy5wYWdlQ291bnQ6bnVsbH19LHdhdGNoOntjdXJyZW50UGFnZTp7aW1tZWRpYXRlOiEwLGhhbmRsZXI6ZnVuY3Rpb24oZSl7dGhpcy5pbnRlcm5hbEN1cnJlbnRQYWdlPWV9fSxwYWdlU2l6ZTp7aW1tZWRpYXRlOiEwLGhhbmRsZXI6ZnVuY3Rpb24oZSl7dGhpcy5pbnRlcm5hbFBhZ2VTaXplPWlzTmFOKGUpPzEwOmV9fSxpbnRlcm5hbEN1cnJlbnRQYWdlOntpbW1lZGlhdGU6ITAsaGFuZGxlcjpmdW5jdGlvbihlLHQpe2U9cGFyc2VJbnQoZSwxMCksdm9pZCAwIT09KGU9aXNOYU4oZSk/dHx8MTp0aGlzLmdldFZhbGlkQ3VycmVudFBhZ2UoZSkpPyh0aGlzLmludGVybmFsQ3VycmVudFBhZ2U9ZSx0IT09ZSYmdGhpcy4kZW1pdCgidXBkYXRlOmN1cnJlbnRQYWdlIixlKSk6dGhpcy4kZW1pdCgidXBkYXRlOmN1cnJlbnRQYWdlIixlKSx0aGlzLmxhc3RFbWl0dGVkUGFnZT0tMX19LGludGVybmFsUGFnZUNvdW50OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuaW50ZXJuYWxDdXJyZW50UGFnZTtlPjAmJjA9PT10P3RoaXMuaW50ZXJuYWxDdXJyZW50UGFnZT0xOnQ+ZSYmKHRoaXMuaW50ZXJuYWxDdXJyZW50UGFnZT0wPT09ZT8xOmUsdGhpcy51c2VyQ2hhbmdlUGFnZVNpemUmJnRoaXMuZW1pdENoYW5nZSgpKSx0aGlzLnVzZXJDaGFuZ2VQYWdlU2l6ZT0hMX19fX0sNTY6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9big1NyksaT1uLm4ociksbz1uKDU4KSxzPW4oMCkoaS5hLG8uYSwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PXMuZXhwb3J0c30sNTc6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITAsdC5kZWZhdWx0PXtuYW1lOiJFbFBhZ2VyIixwcm9wczp7Y3VycmVudFBhZ2U6TnVtYmVyLHBhZ2VDb3VudDpOdW1iZXIscGFnZXJDb3VudDpOdW1iZXIsZGlzYWJsZWQ6Qm9vbGVhbn0sd2F0Y2g6e3Nob3dQcmV2TW9yZTpmdW5jdGlvbihlKXtlfHwodGhpcy5xdWlja3ByZXZJY29uQ2xhc3M9ImVsLWljb24tbW9yZSIpfSxzaG93TmV4dE1vcmU6ZnVuY3Rpb24oZSl7ZXx8KHRoaXMucXVpY2tuZXh0SWNvbkNsYXNzPSJlbC1pY29uLW1vcmUiKX19LG1ldGhvZHM6e29uUGFnZXJDbGljazpmdW5jdGlvbihlKXt2YXIgdD1lLnRhcmdldDtpZigiVUwiIT09dC50YWdOYW1lJiYhdGhpcy5kaXNhYmxlZCl7dmFyIG49TnVtYmVyKGUudGFyZ2V0LnRleHRDb250ZW50KSxyPXRoaXMucGFnZUNvdW50LGk9dGhpcy5jdXJyZW50UGFnZSxvPXRoaXMucGFnZXJDb3VudC0yOy0xIT09dC5jbGFzc05hbWUuaW5kZXhPZigibW9yZSIpJiYoLTEhPT10LmNsYXNzTmFtZS5pbmRleE9mKCJxdWlja3ByZXYiKT9uPWktbzotMSE9PXQuY2xhc3NOYW1lLmluZGV4T2YoInF1aWNrbmV4dCIpJiYobj1pK28pKSxpc05hTihuKXx8KG48MSYmKG49MSksbj5yJiYobj1yKSksbiE9PWkmJnRoaXMuJGVtaXQoImNoYW5nZSIsbil9fSxvbk1vdXNlZW50ZXI6ZnVuY3Rpb24oZSl7dGhpcy5kaXNhYmxlZHx8KCJsZWZ0Ij09PWU/dGhpcy5xdWlja3ByZXZJY29uQ2xhc3M9ImVsLWljb24tZC1hcnJvdy1sZWZ0Ijp0aGlzLnF1aWNrbmV4dEljb25DbGFzcz0iZWwtaWNvbi1kLWFycm93LXJpZ2h0Iil9fSxjb21wdXRlZDp7cGFnZXJzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wYWdlckNvdW50LHQ9KGUtMSkvMixuPU51bWJlcih0aGlzLmN1cnJlbnRQYWdlKSxyPU51bWJlcih0aGlzLnBhZ2VDb3VudCksaT0hMSxvPSExO3I+ZSYmKG4+ZS10JiYoaT0hMCksbjxyLXQmJihvPSEwKSk7dmFyIHM9W107aWYoaSYmIW8pZm9yKHZhciBhPXItKGUtMik7YTxyO2ErKylzLnB1c2goYSk7ZWxzZSBpZighaSYmbylmb3IodmFyIGw9MjtsPGU7bCsrKXMucHVzaChsKTtlbHNlIGlmKGkmJm8pZm9yKHZhciB1PU1hdGguZmxvb3IoZS8yKS0xLGM9bi11O2M8PW4rdTtjKyspcy5wdXNoKGMpO2Vsc2UgZm9yKHZhciBkPTI7ZDxyO2QrKylzLnB1c2goZCk7cmV0dXJuIHRoaXMuc2hvd1ByZXZNb3JlPWksdGhpcy5zaG93TmV4dE1vcmU9byxzfX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGwsc2hvd1ByZXZNb3JlOiExLHNob3dOZXh0TW9yZTohMSxxdWlja25leHRJY29uQ2xhc3M6ImVsLWljb24tbW9yZSIscXVpY2twcmV2SWNvbkNsYXNzOiJlbC1pY29uLW1vcmUifX19fSw1ODpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oInVsIix7c3RhdGljQ2xhc3M6ImVsLXBhZ2VyIixvbjp7Y2xpY2s6ZS5vblBhZ2VyQ2xpY2t9fSxbZS5wYWdlQ291bnQ+MD9uKCJsaSIse3N0YXRpY0NsYXNzOiJudW1iZXIiLGNsYXNzOnthY3RpdmU6MT09PWUuY3VycmVudFBhZ2UsZGlzYWJsZWQ6ZS5kaXNhYmxlZH19LFtlLl92KCIxIildKTplLl9lKCksZS5zaG93UHJldk1vcmU/bigibGkiLHtzdGF0aWNDbGFzczoiZWwtaWNvbiBtb3JlIGJ0bi1xdWlja3ByZXYiLGNsYXNzOltlLnF1aWNrcHJldkljb25DbGFzcyx7ZGlzYWJsZWQ6ZS5kaXNhYmxlZH1dLG9uOnttb3VzZWVudGVyOmZ1bmN0aW9uKHQpe2Uub25Nb3VzZWVudGVyKCJsZWZ0Iil9LG1vdXNlbGVhdmU6ZnVuY3Rpb24odCl7ZS5xdWlja3ByZXZJY29uQ2xhc3M9ImVsLWljb24tbW9yZSJ9fX0pOmUuX2UoKSxlLl9sKGUucGFnZXJzLGZ1bmN0aW9uKHQpe3JldHVybiBuKCJsaSIse2tleTp0LHN0YXRpY0NsYXNzOiJudW1iZXIiLGNsYXNzOnthY3RpdmU6ZS5jdXJyZW50UGFnZT09PXQsZGlzYWJsZWQ6ZS5kaXNhYmxlZH19LFtlLl92KGUuX3ModCkpXSl9KSxlLnNob3dOZXh0TW9yZT9uKCJsaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uIG1vcmUgYnRuLXF1aWNrbmV4dCIsY2xhc3M6W2UucXVpY2tuZXh0SWNvbkNsYXNzLHtkaXNhYmxlZDplLmRpc2FibGVkfV0sb246e21vdXNlZW50ZXI6ZnVuY3Rpb24odCl7ZS5vbk1vdXNlZW50ZXIoInJpZ2h0Iil9LG1vdXNlbGVhdmU6ZnVuY3Rpb24odCl7ZS5xdWlja25leHRJY29uQ2xhc3M9ImVsLWljb24tbW9yZSJ9fX0pOmUuX2UoKSxlLnBhZ2VDb3VudD4xP24oImxpIix7c3RhdGljQ2xhc3M6Im51bWJlciIsY2xhc3M6e2FjdGl2ZTplLmN1cnJlbnRQYWdlPT09ZS5wYWdlQ291bnQsZGlzYWJsZWQ6ZS5kaXNhYmxlZH19LFtlLl92KGUuX3MoZS5wYWdlQ291bnQpKV0pOmUuX2UoKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9LDU5OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImUwQm0iKX0sNjpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJISk14Iil9LDYwOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oIlNUTGoiKX19KX0sIjcrdVciOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGZ1bmN0aW9uKGUpewovKiEKICogVnVlLmpzIHYyLjUuMjEKICogKGMpIDIwMTQtMjAxOCBFdmFuIFlvdQogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuCiAqLwp2YXIgbj1PYmplY3QuZnJlZXplKHt9KTtmdW5jdGlvbiByKGUpe3JldHVybiB2b2lkIDA9PT1lfHxudWxsPT09ZX1mdW5jdGlvbiBpKGUpe3JldHVybiB2b2lkIDAhPT1lJiZudWxsIT09ZX1mdW5jdGlvbiBvKGUpe3JldHVybiEwPT09ZX1mdW5jdGlvbiBzKGUpe3JldHVybiJzdHJpbmciPT10eXBlb2YgZXx8Im51bWJlciI9PXR5cGVvZiBlfHwic3ltYm9sIj09dHlwZW9mIGV8fCJib29sZWFuIj09dHlwZW9mIGV9ZnVuY3Rpb24gYShlKXtyZXR1cm4gbnVsbCE9PWUmJiJvYmplY3QiPT10eXBlb2YgZX12YXIgbD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO2Z1bmN0aW9uIHUoZSl7cmV0dXJuIltvYmplY3QgT2JqZWN0XSI9PT1sLmNhbGwoZSl9ZnVuY3Rpb24gYyhlKXtyZXR1cm4iW29iamVjdCBSZWdFeHBdIj09PWwuY2FsbChlKX1mdW5jdGlvbiBkKGUpe3ZhciB0PXBhcnNlRmxvYXQoU3RyaW5nKGUpKTtyZXR1cm4gdD49MCYmTWF0aC5mbG9vcih0KT09PXQmJmlzRmluaXRlKGUpfWZ1bmN0aW9uIGYoZSl7cmV0dXJuIG51bGw9PWU/IiI6Im9iamVjdCI9PXR5cGVvZiBlP0pTT04uc3RyaW5naWZ5KGUsbnVsbCwyKTpTdHJpbmcoZSl9ZnVuY3Rpb24gaChlKXt2YXIgdD1wYXJzZUZsb2F0KGUpO3JldHVybiBpc05hTih0KT9lOnR9ZnVuY3Rpb24gcChlLHQpe2Zvcih2YXIgbj1PYmplY3QuY3JlYXRlKG51bGwpLHI9ZS5zcGxpdCgiLCIpLGk9MDtpPHIubGVuZ3RoO2krKyluW3JbaV1dPSEwO3JldHVybiB0P2Z1bmN0aW9uKGUpe3JldHVybiBuW2UudG9Mb3dlckNhc2UoKV19OmZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfX12YXIgbT1wKCJzbG90LGNvbXBvbmVudCIsITApLHY9cCgia2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMiKTtmdW5jdGlvbiBnKGUsdCl7aWYoZS5sZW5ndGgpe3ZhciBuPWUuaW5kZXhPZih0KTtpZihuPi0xKXJldHVybiBlLnNwbGljZShuLDEpfX12YXIgeT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2Z1bmN0aW9uIF8oZSx0KXtyZXR1cm4geS5jYWxsKGUsdCl9ZnVuY3Rpb24gYihlKXt2YXIgdD1PYmplY3QuY3JlYXRlKG51bGwpO3JldHVybiBmdW5jdGlvbihuKXtyZXR1cm4gdFtuXXx8KHRbbl09ZShuKSl9fXZhciB4PS8tKFx3KS9nLEM9YihmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKHgsZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD90LnRvVXBwZXJDYXNlKCk6IiJ9KX0pLHc9YihmdW5jdGlvbihlKXtyZXR1cm4gZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStlLnNsaWNlKDEpfSksaz0vXEIoW0EtWl0pL2csUz1iKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoaywiLSQxIikudG9Mb3dlckNhc2UoKX0pO3ZhciBBPUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kP2Z1bmN0aW9uKGUsdCl7cmV0dXJuIGUuYmluZCh0KX06ZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKG4pe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg7cmV0dXJuIHI/cj4xP2UuYXBwbHkodCxhcmd1bWVudHMpOmUuY2FsbCh0LG4pOmUuY2FsbCh0KX1yZXR1cm4gbi5fbGVuZ3RoPWUubGVuZ3RoLG59O2Z1bmN0aW9uIEUoZSx0KXt0PXR8fDA7Zm9yKHZhciBuPWUubGVuZ3RoLXQscj1uZXcgQXJyYXkobik7bi0tOylyW25dPWVbbit0XTtyZXR1cm4gcn1mdW5jdGlvbiBNKGUsdCl7Zm9yKHZhciBuIGluIHQpZVtuXT10W25dO3JldHVybiBlfWZ1bmN0aW9uIE8oZSl7Zm9yKHZhciB0PXt9LG49MDtuPGUubGVuZ3RoO24rKyllW25dJiZNKHQsZVtuXSk7cmV0dXJuIHR9ZnVuY3Rpb24gRChlLHQsbil7fXZhciAkPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4hMX0sVD1mdW5jdGlvbihlKXtyZXR1cm4gZX07ZnVuY3Rpb24gUChlLHQpe2lmKGU9PT10KXJldHVybiEwO3ZhciBuPWEoZSkscj1hKHQpO2lmKCFufHwhcilyZXR1cm4hbiYmIXImJlN0cmluZyhlKT09PVN0cmluZyh0KTt0cnl7dmFyIGk9QXJyYXkuaXNBcnJheShlKSxvPUFycmF5LmlzQXJyYXkodCk7aWYoaSYmbylyZXR1cm4gZS5sZW5ndGg9PT10Lmxlbmd0aCYmZS5ldmVyeShmdW5jdGlvbihlLG4pe3JldHVybiBQKGUsdFtuXSl9KTtpZihlIGluc3RhbmNlb2YgRGF0ZSYmdCBpbnN0YW5jZW9mIERhdGUpcmV0dXJuIGUuZ2V0VGltZSgpPT09dC5nZXRUaW1lKCk7aWYoaXx8bylyZXR1cm4hMTt2YXIgcz1PYmplY3Qua2V5cyhlKSxsPU9iamVjdC5rZXlzKHQpO3JldHVybiBzLmxlbmd0aD09PWwubGVuZ3RoJiZzLmV2ZXJ5KGZ1bmN0aW9uKG4pe3JldHVybiBQKGVbbl0sdFtuXSl9KX1jYXRjaChlKXtyZXR1cm4hMX19ZnVuY3Rpb24gTihlLHQpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKWlmKFAoZVtuXSx0KSlyZXR1cm4gbjtyZXR1cm4tMX1mdW5jdGlvbiBGKGUpe3ZhciB0PSExO3JldHVybiBmdW5jdGlvbigpe3R8fCh0PSEwLGUuYXBwbHkodGhpcyxhcmd1bWVudHMpKX19dmFyIEk9ImRhdGEtc2VydmVyLXJlbmRlcmVkIixSPVsiY29tcG9uZW50IiwiZGlyZWN0aXZlIiwiZmlsdGVyIl0saj1bImJlZm9yZUNyZWF0ZSIsImNyZWF0ZWQiLCJiZWZvcmVNb3VudCIsIm1vdW50ZWQiLCJiZWZvcmVVcGRhdGUiLCJ1cGRhdGVkIiwiYmVmb3JlRGVzdHJveSIsImRlc3Ryb3llZCIsImFjdGl2YXRlZCIsImRlYWN0aXZhdGVkIiwiZXJyb3JDYXB0dXJlZCJdLEI9e29wdGlvbk1lcmdlU3RyYXRlZ2llczpPYmplY3QuY3JlYXRlKG51bGwpLHNpbGVudDohMSxwcm9kdWN0aW9uVGlwOiExLGRldnRvb2xzOiExLHBlcmZvcm1hbmNlOiExLGVycm9ySGFuZGxlcjpudWxsLHdhcm5IYW5kbGVyOm51bGwsaWdub3JlZEVsZW1lbnRzOltdLGtleUNvZGVzOk9iamVjdC5jcmVhdGUobnVsbCksaXNSZXNlcnZlZFRhZzokLGlzUmVzZXJ2ZWRBdHRyOiQsaXNVbmtub3duRWxlbWVudDokLGdldFRhZ05hbWVzcGFjZTpELHBhcnNlUGxhdGZvcm1UYWdOYW1lOlQsbXVzdFVzZVByb3A6JCxhc3luYzohMCxfbGlmZWN5Y2xlSG9va3M6an07ZnVuY3Rpb24gTChlKXt2YXIgdD0oZSsiIikuY2hhckNvZGVBdCgwKTtyZXR1cm4gMzY9PT10fHw5NT09PXR9ZnVuY3Rpb24gVihlLHQsbixyKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTpuLGVudW1lcmFibGU6ISFyLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pfXZhciBIPS9bXlx3LiRdLzt2YXIgeixXPSJfX3Byb3RvX18iaW57fSxxPSJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93LFU9InVuZGVmaW5lZCIhPXR5cGVvZiBXWEVudmlyb25tZW50JiYhIVdYRW52aXJvbm1lbnQucGxhdGZvcm0sSz1VJiZXWEVudmlyb25tZW50LnBsYXRmb3JtLnRvTG93ZXJDYXNlKCksWT1xJiZ3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLEc9WSYmL21zaWV8dHJpZGVudC8udGVzdChZKSxKPVkmJlkuaW5kZXhPZigibXNpZSA5LjAiKT4wLFg9WSYmWS5pbmRleE9mKCJlZGdlLyIpPjAsUT0oWSYmWS5pbmRleE9mKCJhbmRyb2lkIiksWSYmL2lwaG9uZXxpcGFkfGlwb2R8aW9zLy50ZXN0KFkpfHwiaW9zIj09PUspLFo9KFkmJi9jaHJvbWVcL1xkKy8udGVzdChZKSx7fS53YXRjaCksZWU9ITE7aWYocSl0cnl7dmFyIHRlPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0ZSwicGFzc2l2ZSIse2dldDpmdW5jdGlvbigpe2VlPSEwfX0pLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJ0ZXN0LXBhc3NpdmUiLG51bGwsdGUpfWNhdGNoKGUpe312YXIgbmU9ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09eiYmKHo9IXEmJiFVJiZ2b2lkIDAhPT1lJiYoZS5wcm9jZXNzJiYic2VydmVyIj09PWUucHJvY2Vzcy5lbnYuVlVFX0VOVikpLHp9LHJlPXEmJndpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO2Z1bmN0aW9uIGllKGUpe3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBlJiYvbmF0aXZlIGNvZGUvLnRlc3QoZS50b1N0cmluZygpKX12YXIgb2Usc2U9InVuZGVmaW5lZCIhPXR5cGVvZiBTeW1ib2wmJmllKFN5bWJvbCkmJiJ1bmRlZmluZWQiIT10eXBlb2YgUmVmbGVjdCYmaWUoUmVmbGVjdC5vd25LZXlzKTtvZT0idW5kZWZpbmVkIiE9dHlwZW9mIFNldCYmaWUoU2V0KT9TZXQ6ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dGhpcy5zZXQ9T2JqZWN0LmNyZWF0ZShudWxsKX1yZXR1cm4gZS5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKGUpe3JldHVybiEwPT09dGhpcy5zZXRbZV19LGUucHJvdG90eXBlLmFkZD1mdW5jdGlvbihlKXt0aGlzLnNldFtlXT0hMH0sZS5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLnNldD1PYmplY3QuY3JlYXRlKG51bGwpfSxlfSgpO3ZhciBhZT1ELGxlPTAsdWU9ZnVuY3Rpb24oKXt0aGlzLmlkPWxlKyssdGhpcy5zdWJzPVtdfTt1ZS5wcm90b3R5cGUuYWRkU3ViPWZ1bmN0aW9uKGUpe3RoaXMuc3Vicy5wdXNoKGUpfSx1ZS5wcm90b3R5cGUucmVtb3ZlU3ViPWZ1bmN0aW9uKGUpe2codGhpcy5zdWJzLGUpfSx1ZS5wcm90b3R5cGUuZGVwZW5kPWZ1bmN0aW9uKCl7dWUudGFyZ2V0JiZ1ZS50YXJnZXQuYWRkRGVwKHRoaXMpfSx1ZS5wcm90b3R5cGUubm90aWZ5PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5zdWJzLnNsaWNlKCk7Zm9yKHZhciB0PTAsbj1lLmxlbmd0aDt0PG47dCsrKWVbdF0udXBkYXRlKCl9LHVlLnRhcmdldD1udWxsO3ZhciBjZT1bXTtmdW5jdGlvbiBkZShlKXtjZS5wdXNoKGUpLHVlLnRhcmdldD1lfWZ1bmN0aW9uIGZlKCl7Y2UucG9wKCksdWUudGFyZ2V0PWNlW2NlLmxlbmd0aC0xXX12YXIgaGU9ZnVuY3Rpb24oZSx0LG4scixpLG8scyxhKXt0aGlzLnRhZz1lLHRoaXMuZGF0YT10LHRoaXMuY2hpbGRyZW49bix0aGlzLnRleHQ9cix0aGlzLmVsbT1pLHRoaXMubnM9dm9pZCAwLHRoaXMuY29udGV4dD1vLHRoaXMuZm5Db250ZXh0PXZvaWQgMCx0aGlzLmZuT3B0aW9ucz12b2lkIDAsdGhpcy5mblNjb3BlSWQ9dm9pZCAwLHRoaXMua2V5PXQmJnQua2V5LHRoaXMuY29tcG9uZW50T3B0aW9ucz1zLHRoaXMuY29tcG9uZW50SW5zdGFuY2U9dm9pZCAwLHRoaXMucGFyZW50PXZvaWQgMCx0aGlzLnJhdz0hMSx0aGlzLmlzU3RhdGljPSExLHRoaXMuaXNSb290SW5zZXJ0PSEwLHRoaXMuaXNDb21tZW50PSExLHRoaXMuaXNDbG9uZWQ9ITEsdGhpcy5pc09uY2U9ITEsdGhpcy5hc3luY0ZhY3Rvcnk9YSx0aGlzLmFzeW5jTWV0YT12b2lkIDAsdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXI9ITF9LHBlPXtjaGlsZDp7Y29uZmlndXJhYmxlOiEwfX07cGUuY2hpbGQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2V9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGhlLnByb3RvdHlwZSxwZSk7dmFyIG1lPWZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUmJihlPSIiKTt2YXIgdD1uZXcgaGU7cmV0dXJuIHQudGV4dD1lLHQuaXNDb21tZW50PSEwLHR9O2Z1bmN0aW9uIHZlKGUpe3JldHVybiBuZXcgaGUodm9pZCAwLHZvaWQgMCx2b2lkIDAsU3RyaW5nKGUpKX1mdW5jdGlvbiBnZShlKXt2YXIgdD1uZXcgaGUoZS50YWcsZS5kYXRhLGUuY2hpbGRyZW4mJmUuY2hpbGRyZW4uc2xpY2UoKSxlLnRleHQsZS5lbG0sZS5jb250ZXh0LGUuY29tcG9uZW50T3B0aW9ucyxlLmFzeW5jRmFjdG9yeSk7cmV0dXJuIHQubnM9ZS5ucyx0LmlzU3RhdGljPWUuaXNTdGF0aWMsdC5rZXk9ZS5rZXksdC5pc0NvbW1lbnQ9ZS5pc0NvbW1lbnQsdC5mbkNvbnRleHQ9ZS5mbkNvbnRleHQsdC5mbk9wdGlvbnM9ZS5mbk9wdGlvbnMsdC5mblNjb3BlSWQ9ZS5mblNjb3BlSWQsdC5hc3luY01ldGE9ZS5hc3luY01ldGEsdC5pc0Nsb25lZD0hMCx0fXZhciB5ZT1BcnJheS5wcm90b3R5cGUsX2U9T2JqZWN0LmNyZWF0ZSh5ZSk7WyJwdXNoIiwicG9wIiwic2hpZnQiLCJ1bnNoaWZ0Iiwic3BsaWNlIiwic29ydCIsInJldmVyc2UiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PXllW2VdO1YoX2UsZSxmdW5jdGlvbigpe2Zvcih2YXIgbj1bXSxyPWFyZ3VtZW50cy5sZW5ndGg7ci0tOyluW3JdPWFyZ3VtZW50c1tyXTt2YXIgaSxvPXQuYXBwbHkodGhpcyxuKSxzPXRoaXMuX19vYl9fO3N3aXRjaChlKXtjYXNlInB1c2giOmNhc2UidW5zaGlmdCI6aT1uO2JyZWFrO2Nhc2Uic3BsaWNlIjppPW4uc2xpY2UoMil9cmV0dXJuIGkmJnMub2JzZXJ2ZUFycmF5KGkpLHMuZGVwLm5vdGlmeSgpLG99KX0pO3ZhciBiZT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhfZSkseGU9ITA7ZnVuY3Rpb24gQ2UoZSl7eGU9ZX12YXIgd2U9ZnVuY3Rpb24oZSl7dmFyIHQ7dGhpcy52YWx1ZT1lLHRoaXMuZGVwPW5ldyB1ZSx0aGlzLnZtQ291bnQ9MCxWKGUsIl9fb2JfXyIsdGhpcyksQXJyYXkuaXNBcnJheShlKT8oVz8odD1fZSxlLl9fcHJvdG9fXz10KTpmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPTAsaT1uLmxlbmd0aDtyPGk7cisrKXt2YXIgbz1uW3JdO1YoZSxvLHRbb10pfX0oZSxfZSxiZSksdGhpcy5vYnNlcnZlQXJyYXkoZSkpOnRoaXMud2FsayhlKX07ZnVuY3Rpb24ga2UoZSx0KXt2YXIgbjtpZihhKGUpJiYhKGUgaW5zdGFuY2VvZiBoZSkpcmV0dXJuIF8oZSwiX19vYl9fIikmJmUuX19vYl9fIGluc3RhbmNlb2Ygd2U/bj1lLl9fb2JfXzp4ZSYmIW5lKCkmJihBcnJheS5pc0FycmF5KGUpfHx1KGUpKSYmT2JqZWN0LmlzRXh0ZW5zaWJsZShlKSYmIWUuX2lzVnVlJiYobj1uZXcgd2UoZSkpLHQmJm4mJm4udm1Db3VudCsrLG59ZnVuY3Rpb24gU2UoZSx0LG4scixpKXt2YXIgbz1uZXcgdWUscz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCk7aWYoIXN8fCExIT09cy5jb25maWd1cmFibGUpe3ZhciBhPXMmJnMuZ2V0LGw9cyYmcy5zZXQ7YSYmIWx8fDIhPT1hcmd1bWVudHMubGVuZ3RofHwobj1lW3RdKTt2YXIgdT0haSYma2Uobik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQ9YT9hLmNhbGwoZSk6bjtyZXR1cm4gdWUudGFyZ2V0JiYoby5kZXBlbmQoKSx1JiYodS5kZXAuZGVwZW5kKCksQXJyYXkuaXNBcnJheSh0KSYmZnVuY3Rpb24gZSh0KXtmb3IodmFyIG49dm9pZCAwLHI9MCxpPXQubGVuZ3RoO3I8aTtyKyspKG49dFtyXSkmJm4uX19vYl9fJiZuLl9fb2JfXy5kZXAuZGVwZW5kKCksQXJyYXkuaXNBcnJheShuKSYmZShuKX0odCkpKSx0fSxzZXQ6ZnVuY3Rpb24odCl7dmFyIHI9YT9hLmNhbGwoZSk6bjt0PT09cnx8dCE9dCYmciE9cnx8YSYmIWx8fChsP2wuY2FsbChlLHQpOm49dCx1PSFpJiZrZSh0KSxvLm5vdGlmeSgpKX19KX19ZnVuY3Rpb24gQWUoZSx0LG4pe2lmKEFycmF5LmlzQXJyYXkoZSkmJmQodCkpcmV0dXJuIGUubGVuZ3RoPU1hdGgubWF4KGUubGVuZ3RoLHQpLGUuc3BsaWNlKHQsMSxuKSxuO2lmKHQgaW4gZSYmISh0IGluIE9iamVjdC5wcm90b3R5cGUpKXJldHVybiBlW3RdPW4sbjt2YXIgcj1lLl9fb2JfXztyZXR1cm4gZS5faXNWdWV8fHImJnIudm1Db3VudD9uOnI/KFNlKHIudmFsdWUsdCxuKSxyLmRlcC5ub3RpZnkoKSxuKTooZVt0XT1uLG4pfWZ1bmN0aW9uIEVlKGUsdCl7aWYoQXJyYXkuaXNBcnJheShlKSYmZCh0KSllLnNwbGljZSh0LDEpO2Vsc2V7dmFyIG49ZS5fX29iX187ZS5faXNWdWV8fG4mJm4udm1Db3VudHx8XyhlLHQpJiYoZGVsZXRlIGVbdF0sbiYmbi5kZXAubm90aWZ5KCkpfX13ZS5wcm90b3R5cGUud2Fsaz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7bisrKVNlKGUsdFtuXSl9LHdlLnByb3RvdHlwZS5vYnNlcnZlQXJyYXk9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAsbj1lLmxlbmd0aDt0PG47dCsrKWtlKGVbdF0pfTt2YXIgTWU9Qi5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7ZnVuY3Rpb24gT2UoZSx0KXtpZighdClyZXR1cm4gZTtmb3IodmFyIG4scixpLG89T2JqZWN0LmtleXModCkscz0wO3M8by5sZW5ndGg7cysrKXI9ZVtuPW9bc11dLGk9dFtuXSxfKGUsbik/ciE9PWkmJnUocikmJnUoaSkmJk9lKHIsaSk6QWUoZSxuLGkpO3JldHVybiBlfWZ1bmN0aW9uIERlKGUsdCxuKXtyZXR1cm4gbj9mdW5jdGlvbigpe3ZhciByPSJmdW5jdGlvbiI9PXR5cGVvZiB0P3QuY2FsbChuLG4pOnQsaT0iZnVuY3Rpb24iPT10eXBlb2YgZT9lLmNhbGwobixuKTplO3JldHVybiByP09lKHIsaSk6aX06dD9lP2Z1bmN0aW9uKCl7cmV0dXJuIE9lKCJmdW5jdGlvbiI9PXR5cGVvZiB0P3QuY2FsbCh0aGlzLHRoaXMpOnQsImZ1bmN0aW9uIj09dHlwZW9mIGU/ZS5jYWxsKHRoaXMsdGhpcyk6ZSl9OnQ6ZX1mdW5jdGlvbiAkZShlLHQpe3JldHVybiB0P2U/ZS5jb25jYXQodCk6QXJyYXkuaXNBcnJheSh0KT90Olt0XTplfWZ1bmN0aW9uIFRlKGUsdCxuLHIpe3ZhciBpPU9iamVjdC5jcmVhdGUoZXx8bnVsbCk7cmV0dXJuIHQ/TShpLHQpOml9TWUuZGF0YT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIG4/RGUoZSx0LG4pOnQmJiJmdW5jdGlvbiIhPXR5cGVvZiB0P2U6RGUoZSx0KX0sai5mb3JFYWNoKGZ1bmN0aW9uKGUpe01lW2VdPSRlfSksUi5mb3JFYWNoKGZ1bmN0aW9uKGUpe01lW2UrInMiXT1UZX0pLE1lLndhdGNoPWZ1bmN0aW9uKGUsdCxuLHIpe2lmKGU9PT1aJiYoZT12b2lkIDApLHQ9PT1aJiYodD12b2lkIDApLCF0KXJldHVybiBPYmplY3QuY3JlYXRlKGV8fG51bGwpO2lmKCFlKXJldHVybiB0O3ZhciBpPXt9O2Zvcih2YXIgbyBpbiBNKGksZSksdCl7dmFyIHM9aVtvXSxhPXRbb107cyYmIUFycmF5LmlzQXJyYXkocykmJihzPVtzXSksaVtvXT1zP3MuY29uY2F0KGEpOkFycmF5LmlzQXJyYXkoYSk/YTpbYV19cmV0dXJuIGl9LE1lLnByb3BzPU1lLm1ldGhvZHM9TWUuaW5qZWN0PU1lLmNvbXB1dGVkPWZ1bmN0aW9uKGUsdCxuLHIpe2lmKCFlKXJldHVybiB0O3ZhciBpPU9iamVjdC5jcmVhdGUobnVsbCk7cmV0dXJuIE0oaSxlKSx0JiZNKGksdCksaX0sTWUucHJvdmlkZT1EZTt2YXIgUGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dD9lOnR9O2Z1bmN0aW9uIE5lKGUsdCxuKXtpZigiZnVuY3Rpb24iPT10eXBlb2YgdCYmKHQ9dC5vcHRpb25zKSxmdW5jdGlvbihlLHQpe3ZhciBuPWUucHJvcHM7aWYobil7dmFyIHIsaSxvPXt9O2lmKEFycmF5LmlzQXJyYXkobikpZm9yKHI9bi5sZW5ndGg7ci0tOykic3RyaW5nIj09dHlwZW9mKGk9bltyXSkmJihvW0MoaSldPXt0eXBlOm51bGx9KTtlbHNlIGlmKHUobikpZm9yKHZhciBzIGluIG4paT1uW3NdLG9bQyhzKV09dShpKT9pOnt0eXBlOml9O2UucHJvcHM9b319KHQpLGZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5pbmplY3Q7aWYobil7dmFyIHI9ZS5pbmplY3Q9e307aWYoQXJyYXkuaXNBcnJheShuKSlmb3IodmFyIGk9MDtpPG4ubGVuZ3RoO2krKylyW25baV1dPXtmcm9tOm5baV19O2Vsc2UgaWYodShuKSlmb3IodmFyIG8gaW4gbil7dmFyIHM9bltvXTtyW29dPXUocyk/TSh7ZnJvbTpvfSxzKTp7ZnJvbTpzfX19fSh0KSxmdW5jdGlvbihlKXt2YXIgdD1lLmRpcmVjdGl2ZXM7aWYodClmb3IodmFyIG4gaW4gdCl7dmFyIHI9dFtuXTsiZnVuY3Rpb24iPT10eXBlb2YgciYmKHRbbl09e2JpbmQ6cix1cGRhdGU6cn0pfX0odCksIXQuX2Jhc2UmJih0LmV4dGVuZHMmJihlPU5lKGUsdC5leHRlbmRzLG4pKSx0Lm1peGlucykpZm9yKHZhciByPTAsaT10Lm1peGlucy5sZW5ndGg7cjxpO3IrKyllPU5lKGUsdC5taXhpbnNbcl0sbik7dmFyIG8scz17fTtmb3IobyBpbiBlKWEobyk7Zm9yKG8gaW4gdClfKGUsbyl8fGEobyk7ZnVuY3Rpb24gYShyKXt2YXIgaT1NZVtyXXx8UGU7c1tyXT1pKGVbcl0sdFtyXSxuLHIpfXJldHVybiBzfWZ1bmN0aW9uIEZlKGUsdCxuLHIpe2lmKCJzdHJpbmciPT10eXBlb2Ygbil7dmFyIGk9ZVt0XTtpZihfKGksbikpcmV0dXJuIGlbbl07dmFyIG89QyhuKTtpZihfKGksbykpcmV0dXJuIGlbb107dmFyIHM9dyhvKTtyZXR1cm4gXyhpLHMpP2lbc106aVtuXXx8aVtvXXx8aVtzXX19ZnVuY3Rpb24gSWUoZSx0LG4scil7dmFyIGk9dFtlXSxvPSFfKG4sZSkscz1uW2VdLGE9QmUoQm9vbGVhbixpLnR5cGUpO2lmKGE+LTEpaWYobyYmIV8oaSwiZGVmYXVsdCIpKXM9ITE7ZWxzZSBpZigiIj09PXN8fHM9PT1TKGUpKXt2YXIgbD1CZShTdHJpbmcsaS50eXBlKTsobDwwfHxhPGwpJiYocz0hMCl9aWYodm9pZCAwPT09cyl7cz1mdW5jdGlvbihlLHQsbil7aWYoIV8odCwiZGVmYXVsdCIpKXJldHVybjt2YXIgcj10LmRlZmF1bHQ7MDtpZihlJiZlLiRvcHRpb25zLnByb3BzRGF0YSYmdm9pZCAwPT09ZS4kb3B0aW9ucy5wcm9wc0RhdGFbbl0mJnZvaWQgMCE9PWUuX3Byb3BzW25dKXJldHVybiBlLl9wcm9wc1tuXTtyZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgciYmIkZ1bmN0aW9uIiE9PVJlKHQudHlwZSk/ci5jYWxsKGUpOnJ9KHIsaSxlKTt2YXIgdT14ZTtDZSghMCksa2UocyksQ2UodSl9cmV0dXJuIHN9ZnVuY3Rpb24gUmUoZSl7dmFyIHQ9ZSYmZS50b1N0cmluZygpLm1hdGNoKC9eXHMqZnVuY3Rpb24gKFx3KykvKTtyZXR1cm4gdD90WzFdOiIifWZ1bmN0aW9uIGplKGUsdCl7cmV0dXJuIFJlKGUpPT09UmUodCl9ZnVuY3Rpb24gQmUoZSx0KXtpZighQXJyYXkuaXNBcnJheSh0KSlyZXR1cm4gamUodCxlKT8wOi0xO2Zvcih2YXIgbj0wLHI9dC5sZW5ndGg7bjxyO24rKylpZihqZSh0W25dLGUpKXJldHVybiBuO3JldHVybi0xfWZ1bmN0aW9uIExlKGUsdCxuKXtpZih0KWZvcih2YXIgcj10O3I9ci4kcGFyZW50Oyl7dmFyIGk9ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO2lmKGkpZm9yKHZhciBvPTA7bzxpLmxlbmd0aDtvKyspdHJ5e2lmKCExPT09aVtvXS5jYWxsKHIsZSx0LG4pKXJldHVybn1jYXRjaChlKXtWZShlLHIsImVycm9yQ2FwdHVyZWQgaG9vayIpfX1WZShlLHQsbil9ZnVuY3Rpb24gVmUoZSx0LG4pe2lmKEIuZXJyb3JIYW5kbGVyKXRyeXtyZXR1cm4gQi5lcnJvckhhbmRsZXIuY2FsbChudWxsLGUsdCxuKX1jYXRjaChlKXtIZShlLG51bGwsImNvbmZpZy5lcnJvckhhbmRsZXIiKX1IZShlLHQsbil9ZnVuY3Rpb24gSGUoZSx0LG4pe2lmKCFxJiYhVXx8InVuZGVmaW5lZCI9PXR5cGVvZiBjb25zb2xlKXRocm93IGU7Y29uc29sZS5lcnJvcihlKX12YXIgemUsV2UscWU9W10sVWU9ITE7ZnVuY3Rpb24gS2UoKXtVZT0hMTt2YXIgZT1xZS5zbGljZSgwKTtxZS5sZW5ndGg9MDtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyllW3RdKCl9dmFyIFllPSExO2lmKCJ1bmRlZmluZWQiIT10eXBlb2Ygc2V0SW1tZWRpYXRlJiZpZShzZXRJbW1lZGlhdGUpKVdlPWZ1bmN0aW9uKCl7c2V0SW1tZWRpYXRlKEtlKX07ZWxzZSBpZigidW5kZWZpbmVkIj09dHlwZW9mIE1lc3NhZ2VDaGFubmVsfHwhaWUoTWVzc2FnZUNoYW5uZWwpJiYiW29iamVjdCBNZXNzYWdlQ2hhbm5lbENvbnN0cnVjdG9yXSIhPT1NZXNzYWdlQ2hhbm5lbC50b1N0cmluZygpKVdlPWZ1bmN0aW9uKCl7c2V0VGltZW91dChLZSwwKX07ZWxzZXt2YXIgR2U9bmV3IE1lc3NhZ2VDaGFubmVsLEplPUdlLnBvcnQyO0dlLnBvcnQxLm9ubWVzc2FnZT1LZSxXZT1mdW5jdGlvbigpe0plLnBvc3RNZXNzYWdlKDEpfX1pZigidW5kZWZpbmVkIiE9dHlwZW9mIFByb21pc2UmJmllKFByb21pc2UpKXt2YXIgWGU9UHJvbWlzZS5yZXNvbHZlKCk7emU9ZnVuY3Rpb24oKXtYZS50aGVuKEtlKSxRJiZzZXRUaW1lb3V0KEQpfX1lbHNlIHplPVdlO2Z1bmN0aW9uIFFlKGUsdCl7dmFyIG47aWYocWUucHVzaChmdW5jdGlvbigpe2lmKGUpdHJ5e2UuY2FsbCh0KX1jYXRjaChlKXtMZShlLHQsIm5leHRUaWNrIil9ZWxzZSBuJiZuKHQpfSksVWV8fChVZT0hMCxZZT9XZSgpOnplKCkpLCFlJiYidW5kZWZpbmVkIiE9dHlwZW9mIFByb21pc2UpcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGUpe249ZX0pfXZhciBaZT1uZXcgb2U7ZnVuY3Rpb24gZXQoZSl7IWZ1bmN0aW9uIGUodCxuKXt2YXIgcixpO3ZhciBvPUFycmF5LmlzQXJyYXkodCk7aWYoIW8mJiFhKHQpfHxPYmplY3QuaXNGcm96ZW4odCl8fHQgaW5zdGFuY2VvZiBoZSlyZXR1cm47aWYodC5fX29iX18pe3ZhciBzPXQuX19vYl9fLmRlcC5pZDtpZihuLmhhcyhzKSlyZXR1cm47bi5hZGQocyl9aWYobylmb3Iocj10Lmxlbmd0aDtyLS07KWUodFtyXSxuKTtlbHNlIGZvcihpPU9iamVjdC5rZXlzKHQpLHI9aS5sZW5ndGg7ci0tOyllKHRbaVtyXV0sbil9KGUsWmUpLFplLmNsZWFyKCl9dmFyIHR0LG50PWIoZnVuY3Rpb24oZSl7dmFyIHQ9IiYiPT09ZS5jaGFyQXQoMCksbj0ifiI9PT0oZT10P2Uuc2xpY2UoMSk6ZSkuY2hhckF0KDApLHI9IiEiPT09KGU9bj9lLnNsaWNlKDEpOmUpLmNoYXJBdCgwKTtyZXR1cm57bmFtZTplPXI/ZS5zbGljZSgxKTplLG9uY2U6bixjYXB0dXJlOnIscGFzc2l2ZTp0fX0pO2Z1bmN0aW9uIHJ0KGUpe2Z1bmN0aW9uIHQoKXt2YXIgZT1hcmd1bWVudHMsbj10LmZucztpZighQXJyYXkuaXNBcnJheShuKSlyZXR1cm4gbi5hcHBseShudWxsLGFyZ3VtZW50cyk7Zm9yKHZhciByPW4uc2xpY2UoKSxpPTA7aTxyLmxlbmd0aDtpKyspcltpXS5hcHBseShudWxsLGUpfXJldHVybiB0LmZucz1lLHR9ZnVuY3Rpb24gaXQoZSx0LG4saSxzLGEpe3ZhciBsLHUsYyxkO2ZvcihsIGluIGUpdT1lW2xdLGM9dFtsXSxkPW50KGwpLHIodSl8fChyKGMpPyhyKHUuZm5zKSYmKHU9ZVtsXT1ydCh1KSksbyhkLm9uY2UpJiYodT1lW2xdPXMoZC5uYW1lLHUsZC5jYXB0dXJlKSksbihkLm5hbWUsdSxkLmNhcHR1cmUsZC5wYXNzaXZlLGQucGFyYW1zKSk6dSE9PWMmJihjLmZucz11LGVbbF09YykpO2ZvcihsIGluIHQpcihlW2xdKSYmaSgoZD1udChsKSkubmFtZSx0W2xdLGQuY2FwdHVyZSl9ZnVuY3Rpb24gb3QoZSx0LG4pe3ZhciBzO2UgaW5zdGFuY2VvZiBoZSYmKGU9ZS5kYXRhLmhvb2t8fChlLmRhdGEuaG9vaz17fSkpO3ZhciBhPWVbdF07ZnVuY3Rpb24gbCgpe24uYXBwbHkodGhpcyxhcmd1bWVudHMpLGcocy5mbnMsbCl9cihhKT9zPXJ0KFtsXSk6aShhLmZucykmJm8oYS5tZXJnZWQpPyhzPWEpLmZucy5wdXNoKGwpOnM9cnQoW2EsbF0pLHMubWVyZ2VkPSEwLGVbdF09c31mdW5jdGlvbiBzdChlLHQsbixyLG8pe2lmKGkodCkpe2lmKF8odCxuKSlyZXR1cm4gZVtuXT10W25dLG98fGRlbGV0ZSB0W25dLCEwO2lmKF8odCxyKSlyZXR1cm4gZVtuXT10W3JdLG98fGRlbGV0ZSB0W3JdLCEwfXJldHVybiExfWZ1bmN0aW9uIGF0KGUpe3JldHVybiBzKGUpP1t2ZShlKV06QXJyYXkuaXNBcnJheShlKT9mdW5jdGlvbiBlKHQsbil7dmFyIGE9W107dmFyIGwsdSxjLGQ7Zm9yKGw9MDtsPHQubGVuZ3RoO2wrKylyKHU9dFtsXSl8fCJib29sZWFuIj09dHlwZW9mIHV8fChjPWEubGVuZ3RoLTEsZD1hW2NdLEFycmF5LmlzQXJyYXkodSk/dS5sZW5ndGg+MCYmKGx0KCh1PWUodSwobnx8IiIpKyJfIitsKSlbMF0pJiZsdChkKSYmKGFbY109dmUoZC50ZXh0K3VbMF0udGV4dCksdS5zaGlmdCgpKSxhLnB1c2guYXBwbHkoYSx1KSk6cyh1KT9sdChkKT9hW2NdPXZlKGQudGV4dCt1KToiIiE9PXUmJmEucHVzaCh2ZSh1KSk6bHQodSkmJmx0KGQpP2FbY109dmUoZC50ZXh0K3UudGV4dCk6KG8odC5faXNWTGlzdCkmJmkodS50YWcpJiZyKHUua2V5KSYmaShuKSYmKHUua2V5PSJfX3ZsaXN0IituKyJfIitsKyJfXyIpLGEucHVzaCh1KSkpO3JldHVybiBhfShlKTp2b2lkIDB9ZnVuY3Rpb24gbHQoZSl7cmV0dXJuIGkoZSkmJmkoZS50ZXh0KSYmITE9PT1lLmlzQ29tbWVudH1mdW5jdGlvbiB1dChlLHQpe3JldHVybihlLl9fZXNNb2R1bGV8fHNlJiYiTW9kdWxlIj09PWVbU3ltYm9sLnRvU3RyaW5nVGFnXSkmJihlPWUuZGVmYXVsdCksYShlKT90LmV4dGVuZChlKTplfWZ1bmN0aW9uIGN0KGUpe3JldHVybiBlLmlzQ29tbWVudCYmZS5hc3luY0ZhY3Rvcnl9ZnVuY3Rpb24gZHQoZSl7aWYoQXJyYXkuaXNBcnJheShlKSlmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIG49ZVt0XTtpZihpKG4pJiYoaShuLmNvbXBvbmVudE9wdGlvbnMpfHxjdChuKSkpcmV0dXJuIG59fWZ1bmN0aW9uIGZ0KGUsdCl7dHQuJG9uKGUsdCl9ZnVuY3Rpb24gaHQoZSx0KXt0dC4kb2ZmKGUsdCl9ZnVuY3Rpb24gcHQoZSx0KXt2YXIgbj10dDtyZXR1cm4gZnVuY3Rpb24gcigpe251bGwhPT10LmFwcGx5KG51bGwsYXJndW1lbnRzKSYmbi4kb2ZmKGUscil9fWZ1bmN0aW9uIG10KGUsdCxuKXt0dD1lLGl0KHQsbnx8e30sZnQsaHQscHQpLHR0PXZvaWQgMH1mdW5jdGlvbiB2dChlLHQpe3ZhciBuPXt9O2lmKCFlKXJldHVybiBuO2Zvcih2YXIgcj0wLGk9ZS5sZW5ndGg7cjxpO3IrKyl7dmFyIG89ZVtyXSxzPW8uZGF0YTtpZihzJiZzLmF0dHJzJiZzLmF0dHJzLnNsb3QmJmRlbGV0ZSBzLmF0dHJzLnNsb3Qsby5jb250ZXh0IT09dCYmby5mbkNvbnRleHQhPT10fHwhc3x8bnVsbD09cy5zbG90KShuLmRlZmF1bHR8fChuLmRlZmF1bHQ9W10pKS5wdXNoKG8pO2Vsc2V7dmFyIGE9cy5zbG90LGw9blthXXx8KG5bYV09W10pOyJ0ZW1wbGF0ZSI9PT1vLnRhZz9sLnB1c2guYXBwbHkobCxvLmNoaWxkcmVufHxbXSk6bC5wdXNoKG8pfX1mb3IodmFyIHUgaW4gbiluW3VdLmV2ZXJ5KGd0KSYmZGVsZXRlIG5bdV07cmV0dXJuIG59ZnVuY3Rpb24gZ3QoZSl7cmV0dXJuIGUuaXNDb21tZW50JiYhZS5hc3luY0ZhY3Rvcnl8fCIgIj09PWUudGV4dH1mdW5jdGlvbiB5dChlLHQpe3Q9dHx8e307Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspQXJyYXkuaXNBcnJheShlW25dKT95dChlW25dLHQpOnRbZVtuXS5rZXldPWVbbl0uZm47cmV0dXJuIHR9dmFyIF90PW51bGw7ZnVuY3Rpb24gYnQoZSl7dmFyIHQ9X3Q7cmV0dXJuIF90PWUsZnVuY3Rpb24oKXtfdD10fX1mdW5jdGlvbiB4dChlKXtmb3IoO2UmJihlPWUuJHBhcmVudCk7KWlmKGUuX2luYWN0aXZlKXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uIEN0KGUsdCl7aWYodCl7aWYoZS5fZGlyZWN0SW5hY3RpdmU9ITEseHQoZSkpcmV0dXJufWVsc2UgaWYoZS5fZGlyZWN0SW5hY3RpdmUpcmV0dXJuO2lmKGUuX2luYWN0aXZlfHxudWxsPT09ZS5faW5hY3RpdmUpe2UuX2luYWN0aXZlPSExO2Zvcih2YXIgbj0wO248ZS4kY2hpbGRyZW4ubGVuZ3RoO24rKylDdChlLiRjaGlsZHJlbltuXSk7d3QoZSwiYWN0aXZhdGVkIil9fWZ1bmN0aW9uIHd0KGUsdCl7ZGUoKTt2YXIgbj1lLiRvcHRpb25zW3RdO2lmKG4pZm9yKHZhciByPTAsaT1uLmxlbmd0aDtyPGk7cisrKXRyeXtuW3JdLmNhbGwoZSl9Y2F0Y2gobil7TGUobixlLHQrIiBob29rIil9ZS5faGFzSG9va0V2ZW50JiZlLiRlbWl0KCJob29rOiIrdCksZmUoKX12YXIga3Q9W10sU3Q9W10sQXQ9e30sRXQ9ITEsTXQ9ITEsT3Q9MDtmdW5jdGlvbiBEdCgpe3ZhciBlLHQ7Zm9yKE10PSEwLGt0LnNvcnQoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5pZC10LmlkfSksT3Q9MDtPdDxrdC5sZW5ndGg7T3QrKykoZT1rdFtPdF0pLmJlZm9yZSYmZS5iZWZvcmUoKSx0PWUuaWQsQXRbdF09bnVsbCxlLnJ1bigpO3ZhciBuPVN0LnNsaWNlKCkscj1rdC5zbGljZSgpO090PWt0Lmxlbmd0aD1TdC5sZW5ndGg9MCxBdD17fSxFdD1NdD0hMSxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyllW3RdLl9pbmFjdGl2ZT0hMCxDdChlW3RdLCEwKX0obiksZnVuY3Rpb24oZSl7dmFyIHQ9ZS5sZW5ndGg7Zm9yKDt0LS07KXt2YXIgbj1lW3RdLHI9bi52bTtyLl93YXRjaGVyPT09biYmci5faXNNb3VudGVkJiYhci5faXNEZXN0cm95ZWQmJnd0KHIsInVwZGF0ZWQiKX19KHIpLHJlJiZCLmRldnRvb2xzJiZyZS5lbWl0KCJmbHVzaCIpfXZhciAkdD0wLFR0PWZ1bmN0aW9uKGUsdCxuLHIsaSl7dGhpcy52bT1lLGkmJihlLl93YXRjaGVyPXRoaXMpLGUuX3dhdGNoZXJzLnB1c2godGhpcykscj8odGhpcy5kZWVwPSEhci5kZWVwLHRoaXMudXNlcj0hIXIudXNlcix0aGlzLmxhenk9ISFyLmxhenksdGhpcy5zeW5jPSEhci5zeW5jLHRoaXMuYmVmb3JlPXIuYmVmb3JlKTp0aGlzLmRlZXA9dGhpcy51c2VyPXRoaXMubGF6eT10aGlzLnN5bmM9ITEsdGhpcy5jYj1uLHRoaXMuaWQ9KyskdCx0aGlzLmFjdGl2ZT0hMCx0aGlzLmRpcnR5PXRoaXMubGF6eSx0aGlzLmRlcHM9W10sdGhpcy5uZXdEZXBzPVtdLHRoaXMuZGVwSWRzPW5ldyBvZSx0aGlzLm5ld0RlcElkcz1uZXcgb2UsdGhpcy5leHByZXNzaW9uPSIiLCJmdW5jdGlvbiI9PXR5cGVvZiB0P3RoaXMuZ2V0dGVyPXQ6KHRoaXMuZ2V0dGVyPWZ1bmN0aW9uKGUpe2lmKCFILnRlc3QoZSkpe3ZhciB0PWUuc3BsaXQoIi4iKTtyZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe2lmKCFlKXJldHVybjtlPWVbdFtuXV19cmV0dXJuIGV9fX0odCksdGhpcy5nZXR0ZXJ8fCh0aGlzLmdldHRlcj1EKSksdGhpcy52YWx1ZT10aGlzLmxhenk/dm9pZCAwOnRoaXMuZ2V0KCl9O1R0LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXt2YXIgZTtkZSh0aGlzKTt2YXIgdD10aGlzLnZtO3RyeXtlPXRoaXMuZ2V0dGVyLmNhbGwodCx0KX1jYXRjaChlKXtpZighdGhpcy51c2VyKXRocm93IGU7TGUoZSx0LCdnZXR0ZXIgZm9yIHdhdGNoZXIgIicrdGhpcy5leHByZXNzaW9uKyciJyl9ZmluYWxseXt0aGlzLmRlZXAmJmV0KGUpLGZlKCksdGhpcy5jbGVhbnVwRGVwcygpfXJldHVybiBlfSxUdC5wcm90b3R5cGUuYWRkRGVwPWZ1bmN0aW9uKGUpe3ZhciB0PWUuaWQ7dGhpcy5uZXdEZXBJZHMuaGFzKHQpfHwodGhpcy5uZXdEZXBJZHMuYWRkKHQpLHRoaXMubmV3RGVwcy5wdXNoKGUpLHRoaXMuZGVwSWRzLmhhcyh0KXx8ZS5hZGRTdWIodGhpcykpfSxUdC5wcm90b3R5cGUuY2xlYW51cERlcHM9ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy5kZXBzLmxlbmd0aDtlLS07KXt2YXIgdD10aGlzLmRlcHNbZV07dGhpcy5uZXdEZXBJZHMuaGFzKHQuaWQpfHx0LnJlbW92ZVN1Yih0aGlzKX12YXIgbj10aGlzLmRlcElkczt0aGlzLmRlcElkcz10aGlzLm5ld0RlcElkcyx0aGlzLm5ld0RlcElkcz1uLHRoaXMubmV3RGVwSWRzLmNsZWFyKCksbj10aGlzLmRlcHMsdGhpcy5kZXBzPXRoaXMubmV3RGVwcyx0aGlzLm5ld0RlcHM9bix0aGlzLm5ld0RlcHMubGVuZ3RoPTB9LFR0LnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt0aGlzLmxhenk/dGhpcy5kaXJ0eT0hMDp0aGlzLnN5bmM/dGhpcy5ydW4oKTpmdW5jdGlvbihlKXt2YXIgdD1lLmlkO2lmKG51bGw9PUF0W3RdKXtpZihBdFt0XT0hMCxNdCl7Zm9yKHZhciBuPWt0Lmxlbmd0aC0xO24+T3QmJmt0W25dLmlkPmUuaWQ7KW4tLTtrdC5zcGxpY2UobisxLDAsZSl9ZWxzZSBrdC5wdXNoKGUpO0V0fHwoRXQ9ITAsUWUoRHQpKX19KHRoaXMpfSxUdC5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7aWYodGhpcy5hY3RpdmUpe3ZhciBlPXRoaXMuZ2V0KCk7aWYoZSE9PXRoaXMudmFsdWV8fGEoZSl8fHRoaXMuZGVlcCl7dmFyIHQ9dGhpcy52YWx1ZTtpZih0aGlzLnZhbHVlPWUsdGhpcy51c2VyKXRyeXt0aGlzLmNiLmNhbGwodGhpcy52bSxlLHQpfWNhdGNoKGUpe0xlKGUsdGhpcy52bSwnY2FsbGJhY2sgZm9yIHdhdGNoZXIgIicrdGhpcy5leHByZXNzaW9uKyciJyl9ZWxzZSB0aGlzLmNiLmNhbGwodGhpcy52bSxlLHQpfX19LFR0LnByb3RvdHlwZS5ldmFsdWF0ZT1mdW5jdGlvbigpe3RoaXMudmFsdWU9dGhpcy5nZXQoKSx0aGlzLmRpcnR5PSExfSxUdC5wcm90b3R5cGUuZGVwZW5kPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuZGVwcy5sZW5ndGg7ZS0tOyl0aGlzLmRlcHNbZV0uZGVwZW5kKCl9LFR0LnByb3RvdHlwZS50ZWFyZG93bj1mdW5jdGlvbigpe2lmKHRoaXMuYWN0aXZlKXt0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkfHxnKHRoaXMudm0uX3dhdGNoZXJzLHRoaXMpO2Zvcih2YXIgZT10aGlzLmRlcHMubGVuZ3RoO2UtLTspdGhpcy5kZXBzW2VdLnJlbW92ZVN1Yih0aGlzKTt0aGlzLmFjdGl2ZT0hMX19O3ZhciBQdD17ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OkQsc2V0OkR9O2Z1bmN0aW9uIE50KGUsdCxuKXtQdC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1t0XVtuXX0sUHQuc2V0PWZ1bmN0aW9uKGUpe3RoaXNbdF1bbl09ZX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbixQdCl9ZnVuY3Rpb24gRnQoZSl7ZS5fd2F0Y2hlcnM9W107dmFyIHQ9ZS4kb3B0aW9uczt0LnByb3BzJiZmdW5jdGlvbihlLHQpe3ZhciBuPWUuJG9wdGlvbnMucHJvcHNEYXRhfHx7fSxyPWUuX3Byb3BzPXt9LGk9ZS4kb3B0aW9ucy5fcHJvcEtleXM9W10sbz0hZS4kcGFyZW50O298fENlKCExKTt2YXIgcz1mdW5jdGlvbihvKXtpLnB1c2gobyk7dmFyIHM9SWUobyx0LG4sZSk7U2UocixvLHMpLG8gaW4gZXx8TnQoZSwiX3Byb3BzIixvKX07Zm9yKHZhciBhIGluIHQpcyhhKTtDZSghMCl9KGUsdC5wcm9wcyksdC5tZXRob2RzJiZmdW5jdGlvbihlLHQpe2UuJG9wdGlvbnMucHJvcHM7Zm9yKHZhciBuIGluIHQpZVtuXT0iZnVuY3Rpb24iIT10eXBlb2YgdFtuXT9EOkEodFtuXSxlKX0oZSx0Lm1ldGhvZHMpLHQuZGF0YT9mdW5jdGlvbihlKXt2YXIgdD1lLiRvcHRpb25zLmRhdGE7dSh0PWUuX2RhdGE9ImZ1bmN0aW9uIj09dHlwZW9mIHQ/ZnVuY3Rpb24oZSx0KXtkZSgpO3RyeXtyZXR1cm4gZS5jYWxsKHQsdCl9Y2F0Y2goZSl7cmV0dXJuIExlKGUsdCwiZGF0YSgpIikse319ZmluYWxseXtmZSgpfX0odCxlKTp0fHx7fSl8fCh0PXt9KTt2YXIgbj1PYmplY3Qua2V5cyh0KSxyPWUuJG9wdGlvbnMucHJvcHMsaT0oZS4kb3B0aW9ucy5tZXRob2RzLG4ubGVuZ3RoKTtmb3IoO2ktLTspe3ZhciBvPW5baV07MCxyJiZfKHIsbyl8fEwobyl8fE50KGUsIl9kYXRhIixvKX1rZSh0LCEwKX0oZSk6a2UoZS5fZGF0YT17fSwhMCksdC5jb21wdXRlZCYmZnVuY3Rpb24oZSx0KXt2YXIgbj1lLl9jb21wdXRlZFdhdGNoZXJzPU9iamVjdC5jcmVhdGUobnVsbCkscj1uZSgpO2Zvcih2YXIgaSBpbiB0KXt2YXIgbz10W2ldLHM9ImZ1bmN0aW9uIj09dHlwZW9mIG8/bzpvLmdldDswLHJ8fChuW2ldPW5ldyBUdChlLHN8fEQsRCxJdCkpLGkgaW4gZXx8UnQoZSxpLG8pfX0oZSx0LmNvbXB1dGVkKSx0LndhdGNoJiZ0LndhdGNoIT09WiYmZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4gaW4gdCl7dmFyIHI9dFtuXTtpZihBcnJheS5pc0FycmF5KHIpKWZvcih2YXIgaT0wO2k8ci5sZW5ndGg7aSsrKUx0KGUsbixyW2ldKTtlbHNlIEx0KGUsbixyKX19KGUsdC53YXRjaCl9dmFyIEl0PXtsYXp5OiEwfTtmdW5jdGlvbiBSdChlLHQsbil7dmFyIHI9IW5lKCk7ImZ1bmN0aW9uIj09dHlwZW9mIG4/KFB0LmdldD1yP2p0KHQpOkJ0KG4pLFB0LnNldD1EKTooUHQuZ2V0PW4uZ2V0P3ImJiExIT09bi5jYWNoZT9qdCh0KTpCdChuLmdldCk6RCxQdC5zZXQ9bi5zZXR8fEQpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQsUHQpfWZ1bmN0aW9uIGp0KGUpe3JldHVybiBmdW5jdGlvbigpe3ZhciB0PXRoaXMuX2NvbXB1dGVkV2F0Y2hlcnMmJnRoaXMuX2NvbXB1dGVkV2F0Y2hlcnNbZV07aWYodClyZXR1cm4gdC5kaXJ0eSYmdC5ldmFsdWF0ZSgpLHVlLnRhcmdldCYmdC5kZXBlbmQoKSx0LnZhbHVlfX1mdW5jdGlvbiBCdChlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMsdGhpcyl9fWZ1bmN0aW9uIEx0KGUsdCxuLHIpe3JldHVybiB1KG4pJiYocj1uLG49bi5oYW5kbGVyKSwic3RyaW5nIj09dHlwZW9mIG4mJihuPWVbbl0pLGUuJHdhdGNoKHQsbixyKX1mdW5jdGlvbiBWdChlLHQpe2lmKGUpe2Zvcih2YXIgbj1PYmplY3QuY3JlYXRlKG51bGwpLHI9c2U/UmVmbGVjdC5vd25LZXlzKGUpLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHQpLmVudW1lcmFibGV9KTpPYmplY3Qua2V5cyhlKSxpPTA7aTxyLmxlbmd0aDtpKyspe2Zvcih2YXIgbz1yW2ldLHM9ZVtvXS5mcm9tLGE9dDthOyl7aWYoYS5fcHJvdmlkZWQmJl8oYS5fcHJvdmlkZWQscykpe25bb109YS5fcHJvdmlkZWRbc107YnJlYWt9YT1hLiRwYXJlbnR9aWYoIWEpaWYoImRlZmF1bHQiaW4gZVtvXSl7dmFyIGw9ZVtvXS5kZWZhdWx0O25bb109ImZ1bmN0aW9uIj09dHlwZW9mIGw/bC5jYWxsKHQpOmx9ZWxzZSAwfXJldHVybiBufX1mdW5jdGlvbiBIdChlLHQpe3ZhciBuLHIsbyxzLGw7aWYoQXJyYXkuaXNBcnJheShlKXx8InN0cmluZyI9PXR5cGVvZiBlKWZvcihuPW5ldyBBcnJheShlLmxlbmd0aCkscj0wLG89ZS5sZW5ndGg7cjxvO3IrKyluW3JdPXQoZVtyXSxyKTtlbHNlIGlmKCJudW1iZXIiPT10eXBlb2YgZSlmb3Iobj1uZXcgQXJyYXkoZSkscj0wO3I8ZTtyKyspbltyXT10KHIrMSxyKTtlbHNlIGlmKGEoZSkpZm9yKHM9T2JqZWN0LmtleXMoZSksbj1uZXcgQXJyYXkocy5sZW5ndGgpLHI9MCxvPXMubGVuZ3RoO3I8bztyKyspbD1zW3JdLG5bcl09dChlW2xdLGwscik7cmV0dXJuIGkobil8fChuPVtdKSxuLl9pc1ZMaXN0PSEwLG59ZnVuY3Rpb24genQoZSx0LG4scil7dmFyIGksbz10aGlzLiRzY29wZWRTbG90c1tlXTtvPyhuPW58fHt9LHImJihuPU0oTSh7fSxyKSxuKSksaT1vKG4pfHx0KTppPXRoaXMuJHNsb3RzW2VdfHx0O3ZhciBzPW4mJm4uc2xvdDtyZXR1cm4gcz90aGlzLiRjcmVhdGVFbGVtZW50KCJ0ZW1wbGF0ZSIse3Nsb3Q6c30saSk6aX1mdW5jdGlvbiBXdChlKXtyZXR1cm4gRmUodGhpcy4kb3B0aW9ucywiZmlsdGVycyIsZSl8fFR9ZnVuY3Rpb24gcXQoZSx0KXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT8tMT09PWUuaW5kZXhPZih0KTplIT09dH1mdW5jdGlvbiBVdChlLHQsbixyLGkpe3ZhciBvPUIua2V5Q29kZXNbdF18fG47cmV0dXJuIGkmJnImJiFCLmtleUNvZGVzW3RdP3F0KGkscik6bz9xdChvLGUpOnI/UyhyKSE9PXQ6dm9pZCAwfWZ1bmN0aW9uIEt0KGUsdCxuLHIsaSl7aWYobilpZihhKG4pKXt2YXIgbztBcnJheS5pc0FycmF5KG4pJiYobj1PKG4pKTt2YXIgcz1mdW5jdGlvbihzKXtpZigiY2xhc3MiPT09c3x8InN0eWxlIj09PXN8fHYocykpbz1lO2Vsc2V7dmFyIGE9ZS5hdHRycyYmZS5hdHRycy50eXBlO289cnx8Qi5tdXN0VXNlUHJvcCh0LGEscyk/ZS5kb21Qcm9wc3x8KGUuZG9tUHJvcHM9e30pOmUuYXR0cnN8fChlLmF0dHJzPXt9KX12YXIgbD1DKHMpO3MgaW4gb3x8bCBpbiBvfHwob1tzXT1uW3NdLGkmJigoZS5vbnx8KGUub249e30pKVsidXBkYXRlOiIrbF09ZnVuY3Rpb24oZSl7bltzXT1lfSkpfTtmb3IodmFyIGwgaW4gbilzKGwpfWVsc2U7cmV0dXJuIGV9ZnVuY3Rpb24gWXQoZSx0KXt2YXIgbj10aGlzLl9zdGF0aWNUcmVlc3x8KHRoaXMuX3N0YXRpY1RyZWVzPVtdKSxyPW5bZV07cmV0dXJuIHImJiF0P3I6KEp0KHI9bltlXT10aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1tlXS5jYWxsKHRoaXMuX3JlbmRlclByb3h5LG51bGwsdGhpcyksIl9fc3RhdGljX18iK2UsITEpLHIpfWZ1bmN0aW9uIEd0KGUsdCxuKXtyZXR1cm4gSnQoZSwiX19vbmNlX18iK3QrKG4/Il8iK246IiIpLCEwKSxlfWZ1bmN0aW9uIEp0KGUsdCxuKXtpZihBcnJheS5pc0FycmF5KGUpKWZvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKWVbcl0mJiJzdHJpbmciIT10eXBlb2YgZVtyXSYmWHQoZVtyXSx0KyJfIityLG4pO2Vsc2UgWHQoZSx0LG4pfWZ1bmN0aW9uIFh0KGUsdCxuKXtlLmlzU3RhdGljPSEwLGUua2V5PXQsZS5pc09uY2U9bn1mdW5jdGlvbiBRdChlLHQpe2lmKHQpaWYodSh0KSl7dmFyIG49ZS5vbj1lLm9uP00oe30sZS5vbik6e307Zm9yKHZhciByIGluIHQpe3ZhciBpPW5bcl0sbz10W3JdO25bcl09aT9bXS5jb25jYXQoaSxvKTpvfX1lbHNlO3JldHVybiBlfWZ1bmN0aW9uIFp0KGUpe2UuX289R3QsZS5fbj1oLGUuX3M9ZixlLl9sPUh0LGUuX3Q9enQsZS5fcT1QLGUuX2k9TixlLl9tPVl0LGUuX2Y9V3QsZS5faz1VdCxlLl9iPUt0LGUuX3Y9dmUsZS5fZT1tZSxlLl91PXl0LGUuX2c9UXR9ZnVuY3Rpb24gZW4oZSx0LHIsaSxzKXt2YXIgYSxsPXMub3B0aW9ucztfKGksIl91aWQiKT8oYT1PYmplY3QuY3JlYXRlKGkpKS5fb3JpZ2luYWw9aTooYT1pLGk9aS5fb3JpZ2luYWwpO3ZhciB1PW8obC5fY29tcGlsZWQpLGM9IXU7dGhpcy5kYXRhPWUsdGhpcy5wcm9wcz10LHRoaXMuY2hpbGRyZW49cix0aGlzLnBhcmVudD1pLHRoaXMubGlzdGVuZXJzPWUub258fG4sdGhpcy5pbmplY3Rpb25zPVZ0KGwuaW5qZWN0LGkpLHRoaXMuc2xvdHM9ZnVuY3Rpb24oKXtyZXR1cm4gdnQocixpKX0sdSYmKHRoaXMuJG9wdGlvbnM9bCx0aGlzLiRzbG90cz10aGlzLnNsb3RzKCksdGhpcy4kc2NvcGVkU2xvdHM9ZS5zY29wZWRTbG90c3x8biksbC5fc2NvcGVJZD90aGlzLl9jPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPWNuKGEsZSx0LG4scixjKTtyZXR1cm4gbyYmIUFycmF5LmlzQXJyYXkobykmJihvLmZuU2NvcGVJZD1sLl9zY29wZUlkLG8uZm5Db250ZXh0PWkpLG99OnRoaXMuX2M9ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIGNuKGEsZSx0LG4scixjKX19ZnVuY3Rpb24gdG4oZSx0LG4scixpKXt2YXIgbz1nZShlKTtyZXR1cm4gby5mbkNvbnRleHQ9bixvLmZuT3B0aW9ucz1yLHQuc2xvdCYmKChvLmRhdGF8fChvLmRhdGE9e30pKS5zbG90PXQuc2xvdCksb31mdW5jdGlvbiBubihlLHQpe2Zvcih2YXIgbiBpbiB0KWVbQyhuKV09dFtuXX1adChlbi5wcm90b3R5cGUpO3ZhciBybj17aW5pdDpmdW5jdGlvbihlLHQpe2lmKGUuY29tcG9uZW50SW5zdGFuY2UmJiFlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCYmZS5kYXRhLmtlZXBBbGl2ZSl7dmFyIG49ZTtybi5wcmVwYXRjaChuLG4pfWVsc2V7KGUuY29tcG9uZW50SW5zdGFuY2U9ZnVuY3Rpb24oZSx0KXt2YXIgbj17X2lzQ29tcG9uZW50OiEwLF9wYXJlbnRWbm9kZTplLHBhcmVudDp0fSxyPWUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtpKHIpJiYobi5yZW5kZXI9ci5yZW5kZXIsbi5zdGF0aWNSZW5kZXJGbnM9ci5zdGF0aWNSZW5kZXJGbnMpO3JldHVybiBuZXcgZS5jb21wb25lbnRPcHRpb25zLkN0b3Iobil9KGUsX3QpKS4kbW91bnQodD9lLmVsbTp2b2lkIDAsdCl9fSxwcmVwYXRjaDpmdW5jdGlvbihlLHQpe3ZhciByPXQuY29tcG9uZW50T3B0aW9uczshZnVuY3Rpb24oZSx0LHIsaSxvKXt2YXIgcz0hIShvfHxlLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbnx8aS5kYXRhLnNjb3BlZFNsb3RzfHxlLiRzY29wZWRTbG90cyE9PW4pO2lmKGUuJG9wdGlvbnMuX3BhcmVudFZub2RlPWksZS4kdm5vZGU9aSxlLl92bm9kZSYmKGUuX3Zub2RlLnBhcmVudD1pKSxlLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbj1vLGUuJGF0dHJzPWkuZGF0YS5hdHRyc3x8bixlLiRsaXN0ZW5lcnM9cnx8bix0JiZlLiRvcHRpb25zLnByb3BzKXtDZSghMSk7Zm9yKHZhciBhPWUuX3Byb3BzLGw9ZS4kb3B0aW9ucy5fcHJvcEtleXN8fFtdLHU9MDt1PGwubGVuZ3RoO3UrKyl7dmFyIGM9bFt1XSxkPWUuJG9wdGlvbnMucHJvcHM7YVtjXT1JZShjLGQsdCxlKX1DZSghMCksZS4kb3B0aW9ucy5wcm9wc0RhdGE9dH1yPXJ8fG47dmFyIGY9ZS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO2UuJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycz1yLG10KGUscixmKSxzJiYoZS4kc2xvdHM9dnQobyxpLmNvbnRleHQpLGUuJGZvcmNlVXBkYXRlKCkpfSh0LmNvbXBvbmVudEluc3RhbmNlPWUuY29tcG9uZW50SW5zdGFuY2Usci5wcm9wc0RhdGEsci5saXN0ZW5lcnMsdCxyLmNoaWxkcmVuKX0saW5zZXJ0OmZ1bmN0aW9uKGUpe3ZhciB0LG49ZS5jb250ZXh0LHI9ZS5jb21wb25lbnRJbnN0YW5jZTtyLl9pc01vdW50ZWR8fChyLl9pc01vdW50ZWQ9ITAsd3QociwibW91bnRlZCIpKSxlLmRhdGEua2VlcEFsaXZlJiYobi5faXNNb3VudGVkPygodD1yKS5faW5hY3RpdmU9ITEsU3QucHVzaCh0KSk6Q3QociwhMCkpfSxkZXN0cm95OmZ1bmN0aW9uKGUpe3ZhciB0PWUuY29tcG9uZW50SW5zdGFuY2U7dC5faXNEZXN0cm95ZWR8fChlLmRhdGEua2VlcEFsaXZlP2Z1bmN0aW9uIGUodCxuKXtpZighKG4mJih0Ll9kaXJlY3RJbmFjdGl2ZT0hMCx4dCh0KSl8fHQuX2luYWN0aXZlKSl7dC5faW5hY3RpdmU9ITA7Zm9yKHZhciByPTA7cjx0LiRjaGlsZHJlbi5sZW5ndGg7cisrKWUodC4kY2hpbGRyZW5bcl0pO3d0KHQsImRlYWN0aXZhdGVkIil9fSh0LCEwKTp0LiRkZXN0cm95KCkpfX0sb249T2JqZWN0LmtleXMocm4pO2Z1bmN0aW9uIHNuKGUsdCxzLGwsdSl7aWYoIXIoZSkpe3ZhciBjPXMuJG9wdGlvbnMuX2Jhc2U7aWYoYShlKSYmKGU9Yy5leHRlbmQoZSkpLCJmdW5jdGlvbiI9PXR5cGVvZiBlKXt2YXIgZDtpZihyKGUuY2lkKSYmdm9pZCAwPT09KGU9ZnVuY3Rpb24oZSx0LG4pe2lmKG8oZS5lcnJvcikmJmkoZS5lcnJvckNvbXApKXJldHVybiBlLmVycm9yQ29tcDtpZihpKGUucmVzb2x2ZWQpKXJldHVybiBlLnJlc29sdmVkO2lmKG8oZS5sb2FkaW5nKSYmaShlLmxvYWRpbmdDb21wKSlyZXR1cm4gZS5sb2FkaW5nQ29tcDtpZighaShlLmNvbnRleHRzKSl7dmFyIHM9ZS5jb250ZXh0cz1bbl0sbD0hMCx1PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLG49cy5sZW5ndGg7dDxuO3QrKylzW3RdLiRmb3JjZVVwZGF0ZSgpO2UmJihzLmxlbmd0aD0wKX0sYz1GKGZ1bmN0aW9uKG4pe2UucmVzb2x2ZWQ9dXQobix0KSxsfHx1KCEwKX0pLGQ9RihmdW5jdGlvbih0KXtpKGUuZXJyb3JDb21wKSYmKGUuZXJyb3I9ITAsdSghMCkpfSksZj1lKGMsZCk7cmV0dXJuIGEoZikmJigiZnVuY3Rpb24iPT10eXBlb2YgZi50aGVuP3IoZS5yZXNvbHZlZCkmJmYudGhlbihjLGQpOmkoZi5jb21wb25lbnQpJiYiZnVuY3Rpb24iPT10eXBlb2YgZi5jb21wb25lbnQudGhlbiYmKGYuY29tcG9uZW50LnRoZW4oYyxkKSxpKGYuZXJyb3IpJiYoZS5lcnJvckNvbXA9dXQoZi5lcnJvcix0KSksaShmLmxvYWRpbmcpJiYoZS5sb2FkaW5nQ29tcD11dChmLmxvYWRpbmcsdCksMD09PWYuZGVsYXk/ZS5sb2FkaW5nPSEwOnNldFRpbWVvdXQoZnVuY3Rpb24oKXtyKGUucmVzb2x2ZWQpJiZyKGUuZXJyb3IpJiYoZS5sb2FkaW5nPSEwLHUoITEpKX0sZi5kZWxheXx8MjAwKSksaShmLnRpbWVvdXQpJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cihlLnJlc29sdmVkKSYmZChudWxsKX0sZi50aW1lb3V0KSkpLGw9ITEsZS5sb2FkaW5nP2UubG9hZGluZ0NvbXA6ZS5yZXNvbHZlZH1lLmNvbnRleHRzLnB1c2gobil9KGQ9ZSxjLHMpKSlyZXR1cm4gZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbz1tZSgpO3JldHVybiBvLmFzeW5jRmFjdG9yeT1lLG8uYXN5bmNNZXRhPXtkYXRhOnQsY29udGV4dDpuLGNoaWxkcmVuOnIsdGFnOml9LG99KGQsdCxzLGwsdSk7dD10fHx7fSxmbihlKSxpKHQubW9kZWwpJiZmdW5jdGlvbihlLHQpe3ZhciBuPWUubW9kZWwmJmUubW9kZWwucHJvcHx8InZhbHVlIixyPWUubW9kZWwmJmUubW9kZWwuZXZlbnR8fCJpbnB1dCI7KHQucHJvcHN8fCh0LnByb3BzPXt9KSlbbl09dC5tb2RlbC52YWx1ZTt2YXIgbz10Lm9ufHwodC5vbj17fSkscz1vW3JdLGE9dC5tb2RlbC5jYWxsYmFjaztpKHMpPyhBcnJheS5pc0FycmF5KHMpPy0xPT09cy5pbmRleE9mKGEpOnMhPT1hKSYmKG9bcl09W2FdLmNvbmNhdChzKSk6b1tyXT1hfShlLm9wdGlvbnMsdCk7dmFyIGY9ZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXQub3B0aW9ucy5wcm9wcztpZighcihvKSl7dmFyIHM9e30sYT1lLmF0dHJzLGw9ZS5wcm9wcztpZihpKGEpfHxpKGwpKWZvcih2YXIgdSBpbiBvKXt2YXIgYz1TKHUpO3N0KHMsbCx1LGMsITApfHxzdChzLGEsdSxjLCExKX1yZXR1cm4gc319KHQsZSk7aWYobyhlLm9wdGlvbnMuZnVuY3Rpb25hbCkpcmV0dXJuIGZ1bmN0aW9uKGUsdCxyLG8scyl7dmFyIGE9ZS5vcHRpb25zLGw9e30sdT1hLnByb3BzO2lmKGkodSkpZm9yKHZhciBjIGluIHUpbFtjXT1JZShjLHUsdHx8bik7ZWxzZSBpKHIuYXR0cnMpJiZubihsLHIuYXR0cnMpLGkoci5wcm9wcykmJm5uKGwsci5wcm9wcyk7dmFyIGQ9bmV3IGVuKHIsbCxzLG8sZSksZj1hLnJlbmRlci5jYWxsKG51bGwsZC5fYyxkKTtpZihmIGluc3RhbmNlb2YgaGUpcmV0dXJuIHRuKGYscixkLnBhcmVudCxhKTtpZihBcnJheS5pc0FycmF5KGYpKXtmb3IodmFyIGg9YXQoZil8fFtdLHA9bmV3IEFycmF5KGgubGVuZ3RoKSxtPTA7bTxoLmxlbmd0aDttKyspcFttXT10bihoW21dLHIsZC5wYXJlbnQsYSk7cmV0dXJuIHB9fShlLGYsdCxzLGwpO3ZhciBoPXQub247aWYodC5vbj10Lm5hdGl2ZU9uLG8oZS5vcHRpb25zLmFic3RyYWN0KSl7dmFyIHA9dC5zbG90O3Q9e30scCYmKHQuc2xvdD1wKX0hZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuaG9va3x8KGUuaG9vaz17fSksbj0wO248b24ubGVuZ3RoO24rKyl7dmFyIHI9b25bbl0saT10W3JdLG89cm5bcl07aT09PW98fGkmJmkuX21lcmdlZHx8KHRbcl09aT9hbihvLGkpOm8pfX0odCk7dmFyIG09ZS5vcHRpb25zLm5hbWV8fHU7cmV0dXJuIG5ldyBoZSgidnVlLWNvbXBvbmVudC0iK2UuY2lkKyhtPyItIittOiIiKSx0LHZvaWQgMCx2b2lkIDAsdm9pZCAwLHMse0N0b3I6ZSxwcm9wc0RhdGE6ZixsaXN0ZW5lcnM6aCx0YWc6dSxjaGlsZHJlbjpsfSxkKX19fWZ1bmN0aW9uIGFuKGUsdCl7dmFyIG49ZnVuY3Rpb24obixyKXtlKG4sciksdChuLHIpfTtyZXR1cm4gbi5fbWVyZ2VkPSEwLG59dmFyIGxuPTEsdW49MjtmdW5jdGlvbiBjbihlLHQsbixsLHUsYyl7cmV0dXJuKEFycmF5LmlzQXJyYXkobil8fHMobikpJiYodT1sLGw9bixuPXZvaWQgMCksbyhjKSYmKHU9dW4pLGZ1bmN0aW9uKGUsdCxuLHMsbCl7aWYoaShuKSYmaShuLl9fb2JfXykpcmV0dXJuIG1lKCk7aShuKSYmaShuLmlzKSYmKHQ9bi5pcyk7aWYoIXQpcmV0dXJuIG1lKCk7MDtBcnJheS5pc0FycmF5KHMpJiYiZnVuY3Rpb24iPT10eXBlb2Ygc1swXSYmKChuPW58fHt9KS5zY29wZWRTbG90cz17ZGVmYXVsdDpzWzBdfSxzLmxlbmd0aD0wKTtsPT09dW4/cz1hdChzKTpsPT09bG4mJihzPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKWlmKEFycmF5LmlzQXJyYXkoZVt0XSkpcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sZSk7cmV0dXJuIGV9KHMpKTt2YXIgdSxjO2lmKCJzdHJpbmciPT10eXBlb2YgdCl7dmFyIGQ7Yz1lLiR2bm9kZSYmZS4kdm5vZGUubnN8fEIuZ2V0VGFnTmFtZXNwYWNlKHQpLHU9Qi5pc1Jlc2VydmVkVGFnKHQpP25ldyBoZShCLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHQpLG4scyx2b2lkIDAsdm9pZCAwLGUpOm4mJm4ucHJlfHwhaShkPUZlKGUuJG9wdGlvbnMsImNvbXBvbmVudHMiLHQpKT9uZXcgaGUodCxuLHMsdm9pZCAwLHZvaWQgMCxlKTpzbihkLG4sZSxzLHQpfWVsc2UgdT1zbih0LG4sZSxzKTtyZXR1cm4gQXJyYXkuaXNBcnJheSh1KT91OmkodSk/KGkoYykmJmZ1bmN0aW9uIGUodCxuLHMpe3QubnM9bjsiZm9yZWlnbk9iamVjdCI9PT10LnRhZyYmKG49dm9pZCAwLHM9ITApO2lmKGkodC5jaGlsZHJlbikpZm9yKHZhciBhPTAsbD10LmNoaWxkcmVuLmxlbmd0aDthPGw7YSsrKXt2YXIgdT10LmNoaWxkcmVuW2FdO2kodS50YWcpJiYocih1Lm5zKXx8byhzKSYmInN2ZyIhPT11LnRhZykmJmUodSxuLHMpfX0odSxjKSxpKG4pJiZmdW5jdGlvbihlKXthKGUuc3R5bGUpJiZldChlLnN0eWxlKTthKGUuY2xhc3MpJiZldChlLmNsYXNzKX0obiksdSk6bWUoKX0oZSx0LG4sbCx1KX12YXIgZG49MDtmdW5jdGlvbiBmbihlKXt2YXIgdD1lLm9wdGlvbnM7aWYoZS5zdXBlcil7dmFyIG49Zm4oZS5zdXBlcik7aWYobiE9PWUuc3VwZXJPcHRpb25zKXtlLnN1cGVyT3B0aW9ucz1uO3ZhciByPWZ1bmN0aW9uKGUpe3ZhciB0LG49ZS5vcHRpb25zLHI9ZS5leHRlbmRPcHRpb25zLGk9ZS5zZWFsZWRPcHRpb25zO2Zvcih2YXIgbyBpbiBuKW5bb10hPT1pW29dJiYodHx8KHQ9e30pLHRbb109aG4obltvXSxyW29dLGlbb10pKTtyZXR1cm4gdH0oZSk7ciYmTShlLmV4dGVuZE9wdGlvbnMsciksKHQ9ZS5vcHRpb25zPU5lKG4sZS5leHRlbmRPcHRpb25zKSkubmFtZSYmKHQuY29tcG9uZW50c1t0Lm5hbWVdPWUpfX1yZXR1cm4gdH1mdW5jdGlvbiBobihlLHQsbil7aWYoQXJyYXkuaXNBcnJheShlKSl7dmFyIHI9W107bj1BcnJheS5pc0FycmF5KG4pP246W25dLHQ9QXJyYXkuaXNBcnJheSh0KT90Olt0XTtmb3IodmFyIGk9MDtpPGUubGVuZ3RoO2krKykodC5pbmRleE9mKGVbaV0pPj0wfHxuLmluZGV4T2YoZVtpXSk8MCkmJnIucHVzaChlW2ldKTtyZXR1cm4gcn1yZXR1cm4gZX1mdW5jdGlvbiBwbihlKXt0aGlzLl9pbml0KGUpfWZ1bmN0aW9uIG1uKGUpe2UuY2lkPTA7dmFyIHQ9MTtlLmV4dGVuZD1mdW5jdGlvbihlKXtlPWV8fHt9O3ZhciBuPXRoaXMscj1uLmNpZCxpPWUuX0N0b3J8fChlLl9DdG9yPXt9KTtpZihpW3JdKXJldHVybiBpW3JdO3ZhciBvPWUubmFtZXx8bi5vcHRpb25zLm5hbWU7dmFyIHM9ZnVuY3Rpb24oZSl7dGhpcy5faW5pdChlKX07cmV0dXJuKHMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobi5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1zLHMuY2lkPXQrKyxzLm9wdGlvbnM9TmUobi5vcHRpb25zLGUpLHMuc3VwZXI9bixzLm9wdGlvbnMucHJvcHMmJmZ1bmN0aW9uKGUpe3ZhciB0PWUub3B0aW9ucy5wcm9wcztmb3IodmFyIG4gaW4gdClOdChlLnByb3RvdHlwZSwiX3Byb3BzIixuKX0ocykscy5vcHRpb25zLmNvbXB1dGVkJiZmdW5jdGlvbihlKXt2YXIgdD1lLm9wdGlvbnMuY29tcHV0ZWQ7Zm9yKHZhciBuIGluIHQpUnQoZS5wcm90b3R5cGUsbix0W25dKX0ocykscy5leHRlbmQ9bi5leHRlbmQscy5taXhpbj1uLm1peGluLHMudXNlPW4udXNlLFIuZm9yRWFjaChmdW5jdGlvbihlKXtzW2VdPW5bZV19KSxvJiYocy5vcHRpb25zLmNvbXBvbmVudHNbb109cykscy5zdXBlck9wdGlvbnM9bi5vcHRpb25zLHMuZXh0ZW5kT3B0aW9ucz1lLHMuc2VhbGVkT3B0aW9ucz1NKHt9LHMub3B0aW9ucyksaVtyXT1zLHN9fWZ1bmN0aW9uIHZuKGUpe3JldHVybiBlJiYoZS5DdG9yLm9wdGlvbnMubmFtZXx8ZS50YWcpfWZ1bmN0aW9uIGduKGUsdCl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/ZS5pbmRleE9mKHQpPi0xOiJzdHJpbmciPT10eXBlb2YgZT9lLnNwbGl0KCIsIikuaW5kZXhPZih0KT4tMTohIWMoZSkmJmUudGVzdCh0KX1mdW5jdGlvbiB5bihlLHQpe3ZhciBuPWUuY2FjaGUscj1lLmtleXMsaT1lLl92bm9kZTtmb3IodmFyIG8gaW4gbil7dmFyIHM9bltvXTtpZihzKXt2YXIgYT12bihzLmNvbXBvbmVudE9wdGlvbnMpO2EmJiF0KGEpJiZfbihuLG8scixpKX19fWZ1bmN0aW9uIF9uKGUsdCxuLHIpe3ZhciBpPWVbdF07IWl8fHImJmkudGFnPT09ci50YWd8fGkuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKSxlW3RdPW51bGwsZyhuLHQpfSFmdW5jdGlvbihlKXtlLnByb3RvdHlwZS5faW5pdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3QuX3VpZD1kbisrLHQuX2lzVnVlPSEwLGUmJmUuX2lzQ29tcG9uZW50P2Z1bmN0aW9uKGUsdCl7dmFyIG49ZS4kb3B0aW9ucz1PYmplY3QuY3JlYXRlKGUuY29uc3RydWN0b3Iub3B0aW9ucykscj10Ll9wYXJlbnRWbm9kZTtuLnBhcmVudD10LnBhcmVudCxuLl9wYXJlbnRWbm9kZT1yO3ZhciBpPXIuY29tcG9uZW50T3B0aW9ucztuLnByb3BzRGF0YT1pLnByb3BzRGF0YSxuLl9wYXJlbnRMaXN0ZW5lcnM9aS5saXN0ZW5lcnMsbi5fcmVuZGVyQ2hpbGRyZW49aS5jaGlsZHJlbixuLl9jb21wb25lbnRUYWc9aS50YWcsdC5yZW5kZXImJihuLnJlbmRlcj10LnJlbmRlcixuLnN0YXRpY1JlbmRlckZucz10LnN0YXRpY1JlbmRlckZucyl9KHQsZSk6dC4kb3B0aW9ucz1OZShmbih0LmNvbnN0cnVjdG9yKSxlfHx7fSx0KSx0Ll9yZW5kZXJQcm94eT10LHQuX3NlbGY9dCxmdW5jdGlvbihlKXt2YXIgdD1lLiRvcHRpb25zLG49dC5wYXJlbnQ7aWYobiYmIXQuYWJzdHJhY3Qpe2Zvcig7bi4kb3B0aW9ucy5hYnN0cmFjdCYmbi4kcGFyZW50OyluPW4uJHBhcmVudDtuLiRjaGlsZHJlbi5wdXNoKGUpfWUuJHBhcmVudD1uLGUuJHJvb3Q9bj9uLiRyb290OmUsZS4kY2hpbGRyZW49W10sZS4kcmVmcz17fSxlLl93YXRjaGVyPW51bGwsZS5faW5hY3RpdmU9bnVsbCxlLl9kaXJlY3RJbmFjdGl2ZT0hMSxlLl9pc01vdW50ZWQ9ITEsZS5faXNEZXN0cm95ZWQ9ITEsZS5faXNCZWluZ0Rlc3Ryb3llZD0hMX0odCksZnVuY3Rpb24oZSl7ZS5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksZS5faGFzSG9va0V2ZW50PSExO3ZhciB0PWUuJG9wdGlvbnMuX3BhcmVudExpc3RlbmVyczt0JiZtdChlLHQpfSh0KSxmdW5jdGlvbihlKXtlLl92bm9kZT1udWxsLGUuX3N0YXRpY1RyZWVzPW51bGw7dmFyIHQ9ZS4kb3B0aW9ucyxyPWUuJHZub2RlPXQuX3BhcmVudFZub2RlLGk9ciYmci5jb250ZXh0O2UuJHNsb3RzPXZ0KHQuX3JlbmRlckNoaWxkcmVuLGkpLGUuJHNjb3BlZFNsb3RzPW4sZS5fYz1mdW5jdGlvbih0LG4scixpKXtyZXR1cm4gY24oZSx0LG4scixpLCExKX0sZS4kY3JlYXRlRWxlbWVudD1mdW5jdGlvbih0LG4scixpKXtyZXR1cm4gY24oZSx0LG4scixpLCEwKX07dmFyIG89ciYmci5kYXRhO1NlKGUsIiRhdHRycyIsbyYmby5hdHRyc3x8bixudWxsLCEwKSxTZShlLCIkbGlzdGVuZXJzIix0Ll9wYXJlbnRMaXN0ZW5lcnN8fG4sbnVsbCwhMCl9KHQpLHd0KHQsImJlZm9yZUNyZWF0ZSIpLGZ1bmN0aW9uKGUpe3ZhciB0PVZ0KGUuJG9wdGlvbnMuaW5qZWN0LGUpO3QmJihDZSghMSksT2JqZWN0LmtleXModCkuZm9yRWFjaChmdW5jdGlvbihuKXtTZShlLG4sdFtuXSl9KSxDZSghMCkpfSh0KSxGdCh0KSxmdW5jdGlvbihlKXt2YXIgdD1lLiRvcHRpb25zLnByb3ZpZGU7dCYmKGUuX3Byb3ZpZGVkPSJmdW5jdGlvbiI9PXR5cGVvZiB0P3QuY2FsbChlKTp0KX0odCksd3QodCwiY3JlYXRlZCIpLHQuJG9wdGlvbnMuZWwmJnQuJG1vdW50KHQuJG9wdGlvbnMuZWwpfX0ocG4pLGZ1bmN0aW9uKGUpe3ZhciB0PXtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YX19LG49e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9wcm9wc319O09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSwiJGRhdGEiLHQpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSwiJHByb3BzIixuKSxlLnByb3RvdHlwZS4kc2V0PUFlLGUucHJvdG90eXBlLiRkZWxldGU9RWUsZS5wcm90b3R5cGUuJHdhdGNoPWZ1bmN0aW9uKGUsdCxuKXtpZih1KHQpKXJldHVybiBMdCh0aGlzLGUsdCxuKTsobj1ufHx7fSkudXNlcj0hMDt2YXIgcj1uZXcgVHQodGhpcyxlLHQsbik7aWYobi5pbW1lZGlhdGUpdHJ5e3QuY2FsbCh0aGlzLHIudmFsdWUpfWNhdGNoKGUpe0xlKGUsdGhpcywnY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSB3YXRjaGVyICInK3IuZXhwcmVzc2lvbisnIicpfXJldHVybiBmdW5jdGlvbigpe3IudGVhcmRvd24oKX19fShwbiksZnVuY3Rpb24oZSl7dmFyIHQ9L15ob29rOi87ZS5wcm90b3R5cGUuJG9uPWZ1bmN0aW9uKGUsbil7dmFyIHI9dGhpcztpZihBcnJheS5pc0FycmF5KGUpKWZvcih2YXIgaT0wLG89ZS5sZW5ndGg7aTxvO2krKylyLiRvbihlW2ldLG4pO2Vsc2Uoci5fZXZlbnRzW2VdfHwoci5fZXZlbnRzW2VdPVtdKSkucHVzaChuKSx0LnRlc3QoZSkmJihyLl9oYXNIb29rRXZlbnQ9ITApO3JldHVybiByfSxlLnByb3RvdHlwZS4kb25jZT1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7ZnVuY3Rpb24gcigpe24uJG9mZihlLHIpLHQuYXBwbHkobixhcmd1bWVudHMpfXJldHVybiByLmZuPXQsbi4kb24oZSxyKSxufSxlLnByb3RvdHlwZS4kb2ZmPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztpZighYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gbi5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksbjtpZihBcnJheS5pc0FycmF5KGUpKXtmb3IodmFyIHI9MCxpPWUubGVuZ3RoO3I8aTtyKyspbi4kb2ZmKGVbcl0sdCk7cmV0dXJuIG59dmFyIG89bi5fZXZlbnRzW2VdO2lmKCFvKXJldHVybiBuO2lmKCF0KXJldHVybiBuLl9ldmVudHNbZV09bnVsbCxuO2lmKHQpZm9yKHZhciBzLGE9by5sZW5ndGg7YS0tOylpZigocz1vW2FdKT09PXR8fHMuZm49PT10KXtvLnNwbGljZShhLDEpO2JyZWFrfXJldHVybiBufSxlLnByb3RvdHlwZS4kZW1pdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG49dC5fZXZlbnRzW2VdO2lmKG4pe249bi5sZW5ndGg+MT9FKG4pOm47Zm9yKHZhciByPUUoYXJndW1lbnRzLDEpLGk9MCxvPW4ubGVuZ3RoO2k8bztpKyspdHJ5e25baV0uYXBwbHkodCxyKX1jYXRjaChuKXtMZShuLHQsJ2V2ZW50IGhhbmRsZXIgZm9yICInK2UrJyInKX19cmV0dXJuIHR9fShwbiksZnVuY3Rpb24oZSl7ZS5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMscj1uLiRlbCxpPW4uX3Zub2RlLG89YnQobik7bi5fdm5vZGU9ZSxuLiRlbD1pP24uX19wYXRjaF9fKGksZSk6bi5fX3BhdGNoX18obi4kZWwsZSx0LCExKSxvKCksciYmKHIuX192dWVfXz1udWxsKSxuLiRlbCYmKG4uJGVsLl9fdnVlX189biksbi4kdm5vZGUmJm4uJHBhcmVudCYmbi4kdm5vZGU9PT1uLiRwYXJlbnQuX3Zub2RlJiYobi4kcGFyZW50LiRlbD1uLiRlbCl9LGUucHJvdG90eXBlLiRmb3JjZVVwZGF0ZT1mdW5jdGlvbigpe3RoaXMuX3dhdGNoZXImJnRoaXMuX3dhdGNoZXIudXBkYXRlKCl9LGUucHJvdG90eXBlLiRkZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZighZS5faXNCZWluZ0Rlc3Ryb3llZCl7d3QoZSwiYmVmb3JlRGVzdHJveSIpLGUuX2lzQmVpbmdEZXN0cm95ZWQ9ITA7dmFyIHQ9ZS4kcGFyZW50OyF0fHx0Ll9pc0JlaW5nRGVzdHJveWVkfHxlLiRvcHRpb25zLmFic3RyYWN0fHxnKHQuJGNoaWxkcmVuLGUpLGUuX3dhdGNoZXImJmUuX3dhdGNoZXIudGVhcmRvd24oKTtmb3IodmFyIG49ZS5fd2F0Y2hlcnMubGVuZ3RoO24tLTspZS5fd2F0Y2hlcnNbbl0udGVhcmRvd24oKTtlLl9kYXRhLl9fb2JfXyYmZS5fZGF0YS5fX29iX18udm1Db3VudC0tLGUuX2lzRGVzdHJveWVkPSEwLGUuX19wYXRjaF9fKGUuX3Zub2RlLG51bGwpLHd0KGUsImRlc3Ryb3llZCIpLGUuJG9mZigpLGUuJGVsJiYoZS4kZWwuX192dWVfXz1udWxsKSxlLiR2bm9kZSYmKGUuJHZub2RlLnBhcmVudD1udWxsKX19fShwbiksZnVuY3Rpb24oZSl7WnQoZS5wcm90b3R5cGUpLGUucHJvdG90eXBlLiRuZXh0VGljaz1mdW5jdGlvbihlKXtyZXR1cm4gUWUoZSx0aGlzKX0sZS5wcm90b3R5cGUuX3JlbmRlcj1mdW5jdGlvbigpe3ZhciBlLHQ9dGhpcyxyPXQuJG9wdGlvbnMsaT1yLnJlbmRlcixvPXIuX3BhcmVudFZub2RlO28mJih0LiRzY29wZWRTbG90cz1vLmRhdGEuc2NvcGVkU2xvdHN8fG4pLHQuJHZub2RlPW87dHJ5e2U9aS5jYWxsKHQuX3JlbmRlclByb3h5LHQuJGNyZWF0ZUVsZW1lbnQpfWNhdGNoKG4pe0xlKG4sdCwicmVuZGVyIiksZT10Ll92bm9kZX1yZXR1cm4gZSBpbnN0YW5jZW9mIGhlfHwoZT1tZSgpKSxlLnBhcmVudD1vLGV9fShwbik7dmFyIGJuPVtTdHJpbmcsUmVnRXhwLEFycmF5XSx4bj17S2VlcEFsaXZlOntuYW1lOiJrZWVwLWFsaXZlIixhYnN0cmFjdDohMCxwcm9wczp7aW5jbHVkZTpibixleGNsdWRlOmJuLG1heDpbU3RyaW5nLE51bWJlcl19LGNyZWF0ZWQ6ZnVuY3Rpb24oKXt0aGlzLmNhY2hlPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5rZXlzPVtdfSxkZXN0cm95ZWQ6ZnVuY3Rpb24oKXtmb3IodmFyIGUgaW4gdGhpcy5jYWNoZSlfbih0aGlzLmNhY2hlLGUsdGhpcy5rZXlzKX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy4kd2F0Y2goImluY2x1ZGUiLGZ1bmN0aW9uKHQpe3luKGUsZnVuY3Rpb24oZSl7cmV0dXJuIGduKHQsZSl9KX0pLHRoaXMuJHdhdGNoKCJleGNsdWRlIixmdW5jdGlvbih0KXt5bihlLGZ1bmN0aW9uKGUpe3JldHVybiFnbih0LGUpfSl9KX0scmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kc2xvdHMuZGVmYXVsdCx0PWR0KGUpLG49dCYmdC5jb21wb25lbnRPcHRpb25zO2lmKG4pe3ZhciByPXZuKG4pLGk9dGhpcy5pbmNsdWRlLG89dGhpcy5leGNsdWRlO2lmKGkmJighcnx8IWduKGkscikpfHxvJiZyJiZnbihvLHIpKXJldHVybiB0O3ZhciBzPXRoaXMuY2FjaGUsYT10aGlzLmtleXMsbD1udWxsPT10LmtleT9uLkN0b3IuY2lkKyhuLnRhZz8iOjoiK24udGFnOiIiKTp0LmtleTtzW2xdPyh0LmNvbXBvbmVudEluc3RhbmNlPXNbbF0uY29tcG9uZW50SW5zdGFuY2UsZyhhLGwpLGEucHVzaChsKSk6KHNbbF09dCxhLnB1c2gobCksdGhpcy5tYXgmJmEubGVuZ3RoPnBhcnNlSW50KHRoaXMubWF4KSYmX24ocyxhWzBdLGEsdGhpcy5fdm5vZGUpKSx0LmRhdGEua2VlcEFsaXZlPSEwfXJldHVybiB0fHxlJiZlWzBdfX19OyFmdW5jdGlvbihlKXt2YXIgdD17Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJ9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiY29uZmlnIix0KSxlLnV0aWw9e3dhcm46YWUsZXh0ZW5kOk0sbWVyZ2VPcHRpb25zOk5lLGRlZmluZVJlYWN0aXZlOlNlfSxlLnNldD1BZSxlLmRlbGV0ZT1FZSxlLm5leHRUaWNrPVFlLGUub3B0aW9ucz1PYmplY3QuY3JlYXRlKG51bGwpLFIuZm9yRWFjaChmdW5jdGlvbih0KXtlLm9wdGlvbnNbdCsicyJdPU9iamVjdC5jcmVhdGUobnVsbCl9KSxlLm9wdGlvbnMuX2Jhc2U9ZSxNKGUub3B0aW9ucy5jb21wb25lbnRzLHhuKSxmdW5jdGlvbihlKXtlLnVzZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9pbnN0YWxsZWRQbHVnaW5zfHwodGhpcy5faW5zdGFsbGVkUGx1Z2lucz1bXSk7aWYodC5pbmRleE9mKGUpPi0xKXJldHVybiB0aGlzO3ZhciBuPUUoYXJndW1lbnRzLDEpO3JldHVybiBuLnVuc2hpZnQodGhpcyksImZ1bmN0aW9uIj09dHlwZW9mIGUuaW5zdGFsbD9lLmluc3RhbGwuYXBwbHkoZSxuKToiZnVuY3Rpb24iPT10eXBlb2YgZSYmZS5hcHBseShudWxsLG4pLHQucHVzaChlKSx0aGlzfX0oZSksZnVuY3Rpb24oZSl7ZS5taXhpbj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5vcHRpb25zPU5lKHRoaXMub3B0aW9ucyxlKSx0aGlzfX0oZSksbW4oZSksZnVuY3Rpb24oZSl7Ui5mb3JFYWNoKGZ1bmN0aW9uKHQpe2VbdF09ZnVuY3Rpb24oZSxuKXtyZXR1cm4gbj8oImNvbXBvbmVudCI9PT10JiZ1KG4pJiYobi5uYW1lPW4ubmFtZXx8ZSxuPXRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQobikpLCJkaXJlY3RpdmUiPT09dCYmImZ1bmN0aW9uIj09dHlwZW9mIG4mJihuPXtiaW5kOm4sdXBkYXRlOm59KSx0aGlzLm9wdGlvbnNbdCsicyJdW2VdPW4sbik6dGhpcy5vcHRpb25zW3QrInMiXVtlXX19KX0oZSl9KHBuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkocG4ucHJvdG90eXBlLCIkaXNTZXJ2ZXIiLHtnZXQ6bmV9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkocG4ucHJvdG90eXBlLCIkc3NyQ29udGV4dCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLiR2bm9kZSYmdGhpcy4kdm5vZGUuc3NyQ29udGV4dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkocG4sIkZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0Iix7dmFsdWU6ZW59KSxwbi52ZXJzaW9uPSIyLjUuMjEiO3ZhciBDbj1wKCJzdHlsZSxjbGFzcyIpLHduPXAoImlucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QscHJvZ3Jlc3MiKSxrbj1mdW5jdGlvbihlLHQsbil7cmV0dXJuInZhbHVlIj09PW4mJnduKGUpJiYiYnV0dG9uIiE9PXR8fCJzZWxlY3RlZCI9PT1uJiYib3B0aW9uIj09PWV8fCJjaGVja2VkIj09PW4mJiJpbnB1dCI9PT1lfHwibXV0ZWQiPT09biYmInZpZGVvIj09PWV9LFNuPXAoImNvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjayIpLEFuPXAoImFsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLGVuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSxyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLHRydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUiKSxFbj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIsTW49ZnVuY3Rpb24oZSl7cmV0dXJuIjoiPT09ZS5jaGFyQXQoNSkmJiJ4bGluayI9PT1lLnNsaWNlKDAsNSl9LE9uPWZ1bmN0aW9uKGUpe3JldHVybiBNbihlKT9lLnNsaWNlKDYsZS5sZW5ndGgpOiIifSxEbj1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZXx8ITE9PT1lfTtmdW5jdGlvbiAkbihlKXtmb3IodmFyIHQ9ZS5kYXRhLG49ZSxyPWU7aShyLmNvbXBvbmVudEluc3RhbmNlKTspKHI9ci5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpJiZyLmRhdGEmJih0PVRuKHIuZGF0YSx0KSk7Zm9yKDtpKG49bi5wYXJlbnQpOyluJiZuLmRhdGEmJih0PVRuKHQsbi5kYXRhKSk7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoaShlKXx8aSh0KSlyZXR1cm4gUG4oZSxObih0KSk7cmV0dXJuIiJ9KHQuc3RhdGljQ2xhc3MsdC5jbGFzcyl9ZnVuY3Rpb24gVG4oZSx0KXtyZXR1cm57c3RhdGljQ2xhc3M6UG4oZS5zdGF0aWNDbGFzcyx0LnN0YXRpY0NsYXNzKSxjbGFzczppKGUuY2xhc3MpP1tlLmNsYXNzLHQuY2xhc3NdOnQuY2xhc3N9fWZ1bmN0aW9uIFBuKGUsdCl7cmV0dXJuIGU/dD9lKyIgIit0OmU6dHx8IiJ9ZnVuY3Rpb24gTm4oZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49IiIscj0wLG89ZS5sZW5ndGg7cjxvO3IrKylpKHQ9Tm4oZVtyXSkpJiYiIiE9PXQmJihuJiYobis9IiAiKSxuKz10KTtyZXR1cm4gbn0oZSk6YShlKT9mdW5jdGlvbihlKXt2YXIgdD0iIjtmb3IodmFyIG4gaW4gZSllW25dJiYodCYmKHQrPSIgIiksdCs9bik7cmV0dXJuIHR9KGUpOiJzdHJpbmciPT10eXBlb2YgZT9lOiIifXZhciBGbj17c3ZnOiJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsbWF0aDoiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCJ9LEluPXAoImh0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLGFkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbixkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCxhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnkscyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbixvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLGRldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSxjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290IiksUm49cCgic3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLGZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLHBvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXciLCEwKSxqbj1mdW5jdGlvbihlKXtyZXR1cm4gSW4oZSl8fFJuKGUpfTtmdW5jdGlvbiBCbihlKXtyZXR1cm4gUm4oZSk/InN2ZyI6Im1hdGgiPT09ZT8ibWF0aCI6dm9pZCAwfXZhciBMbj1PYmplY3QuY3JlYXRlKG51bGwpO3ZhciBWbj1wKCJ0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCIpO2Z1bmN0aW9uIEhuKGUpe2lmKCJzdHJpbmciPT10eXBlb2YgZSl7dmFyIHQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKTtyZXR1cm4gdHx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iil9cmV0dXJuIGV9dmFyIHpuPU9iamVjdC5mcmVlemUoe2NyZWF0ZUVsZW1lbnQ6ZnVuY3Rpb24oZSx0KXt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KGUpO3JldHVybiJzZWxlY3QiIT09ZT9uOih0LmRhdGEmJnQuZGF0YS5hdHRycyYmdm9pZCAwIT09dC5kYXRhLmF0dHJzLm11bHRpcGxlJiZuLnNldEF0dHJpYnV0ZSgibXVsdGlwbGUiLCJtdWx0aXBsZSIpLG4pfSxjcmVhdGVFbGVtZW50TlM6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKEZuW2VdLHQpfSxjcmVhdGVUZXh0Tm9kZTpmdW5jdGlvbihlKXtyZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZSl9LGNyZWF0ZUNvbW1lbnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoZSl9LGluc2VydEJlZm9yZTpmdW5jdGlvbihlLHQsbil7ZS5pbnNlcnRCZWZvcmUodCxuKX0scmVtb3ZlQ2hpbGQ6ZnVuY3Rpb24oZSx0KXtlLnJlbW92ZUNoaWxkKHQpfSxhcHBlbmRDaGlsZDpmdW5jdGlvbihlLHQpe2UuYXBwZW5kQ2hpbGQodCl9LHBhcmVudE5vZGU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFyZW50Tm9kZX0sbmV4dFNpYmxpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuIGUubmV4dFNpYmxpbmd9LHRhZ05hbWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUudGFnTmFtZX0sc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oZSx0KXtlLnRleHRDb250ZW50PXR9LHNldFN0eWxlU2NvcGU6ZnVuY3Rpb24oZSx0KXtlLnNldEF0dHJpYnV0ZSh0LCIiKX19KSxXbj17Y3JlYXRlOmZ1bmN0aW9uKGUsdCl7cW4odCl9LHVwZGF0ZTpmdW5jdGlvbihlLHQpe2UuZGF0YS5yZWYhPT10LmRhdGEucmVmJiYocW4oZSwhMCkscW4odCkpfSxkZXN0cm95OmZ1bmN0aW9uKGUpe3FuKGUsITApfX07ZnVuY3Rpb24gcW4oZSx0KXt2YXIgbj1lLmRhdGEucmVmO2lmKGkobikpe3ZhciByPWUuY29udGV4dCxvPWUuY29tcG9uZW50SW5zdGFuY2V8fGUuZWxtLHM9ci4kcmVmczt0P0FycmF5LmlzQXJyYXkoc1tuXSk/ZyhzW25dLG8pOnNbbl09PT1vJiYoc1tuXT12b2lkIDApOmUuZGF0YS5yZWZJbkZvcj9BcnJheS5pc0FycmF5KHNbbl0pP3Nbbl0uaW5kZXhPZihvKTwwJiZzW25dLnB1c2gobyk6c1tuXT1bb106c1tuXT1vfX12YXIgVW49bmV3IGhlKCIiLHt9LFtdKSxLbj1bImNyZWF0ZSIsImFjdGl2YXRlIiwidXBkYXRlIiwicmVtb3ZlIiwiZGVzdHJveSJdO2Z1bmN0aW9uIFluKGUsdCl7cmV0dXJuIGUua2V5PT09dC5rZXkmJihlLnRhZz09PXQudGFnJiZlLmlzQ29tbWVudD09PXQuaXNDb21tZW50JiZpKGUuZGF0YSk9PT1pKHQuZGF0YSkmJmZ1bmN0aW9uKGUsdCl7aWYoImlucHV0IiE9PWUudGFnKXJldHVybiEwO3ZhciBuLHI9aShuPWUuZGF0YSkmJmkobj1uLmF0dHJzKSYmbi50eXBlLG89aShuPXQuZGF0YSkmJmkobj1uLmF0dHJzKSYmbi50eXBlO3JldHVybiByPT09b3x8Vm4ocikmJlZuKG8pfShlLHQpfHxvKGUuaXNBc3luY1BsYWNlaG9sZGVyKSYmZS5hc3luY0ZhY3Rvcnk9PT10LmFzeW5jRmFjdG9yeSYmcih0LmFzeW5jRmFjdG9yeS5lcnJvcikpfWZ1bmN0aW9uIEduKGUsdCxuKXt2YXIgcixvLHM9e307Zm9yKHI9dDtyPD1uOysrcilpKG89ZVtyXS5rZXkpJiYoc1tvXT1yKTtyZXR1cm4gc312YXIgSm49e2NyZWF0ZTpYbix1cGRhdGU6WG4sZGVzdHJveTpmdW5jdGlvbihlKXtYbihlLFVuKX19O2Z1bmN0aW9uIFhuKGUsdCl7KGUuZGF0YS5kaXJlY3RpdmVzfHx0LmRhdGEuZGlyZWN0aXZlcykmJmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG89ZT09PVVuLHM9dD09PVVuLGE9Wm4oZS5kYXRhLmRpcmVjdGl2ZXMsZS5jb250ZXh0KSxsPVpuKHQuZGF0YS5kaXJlY3RpdmVzLHQuY29udGV4dCksdT1bXSxjPVtdO2ZvcihuIGluIGwpcj1hW25dLGk9bFtuXSxyPyhpLm9sZFZhbHVlPXIudmFsdWUsdHIoaSwidXBkYXRlIix0LGUpLGkuZGVmJiZpLmRlZi5jb21wb25lbnRVcGRhdGVkJiZjLnB1c2goaSkpOih0cihpLCJiaW5kIix0LGUpLGkuZGVmJiZpLmRlZi5pbnNlcnRlZCYmdS5wdXNoKGkpKTtpZih1Lmxlbmd0aCl7dmFyIGQ9ZnVuY3Rpb24oKXtmb3IodmFyIG49MDtuPHUubGVuZ3RoO24rKyl0cih1W25dLCJpbnNlcnRlZCIsdCxlKX07bz9vdCh0LCJpbnNlcnQiLGQpOmQoKX1jLmxlbmd0aCYmb3QodCwicG9zdHBhdGNoIixmdW5jdGlvbigpe2Zvcih2YXIgbj0wO248Yy5sZW5ndGg7bisrKXRyKGNbbl0sImNvbXBvbmVudFVwZGF0ZWQiLHQsZSl9KTtpZighbylmb3IobiBpbiBhKWxbbl18fHRyKGFbbl0sInVuYmluZCIsZSxlLHMpfShlLHQpfXZhciBRbj1PYmplY3QuY3JlYXRlKG51bGwpO2Z1bmN0aW9uIFpuKGUsdCl7dmFyIG4scixpPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoIWUpcmV0dXJuIGk7Zm9yKG49MDtuPGUubGVuZ3RoO24rKykocj1lW25dKS5tb2RpZmllcnN8fChyLm1vZGlmaWVycz1RbiksaVtlcihyKV09cixyLmRlZj1GZSh0LiRvcHRpb25zLCJkaXJlY3RpdmVzIixyLm5hbWUpO3JldHVybiBpfWZ1bmN0aW9uIGVyKGUpe3JldHVybiBlLnJhd05hbWV8fGUubmFtZSsiLiIrT2JqZWN0LmtleXMoZS5tb2RpZmllcnN8fHt9KS5qb2luKCIuIil9ZnVuY3Rpb24gdHIoZSx0LG4scixpKXt2YXIgbz1lLmRlZiYmZS5kZWZbdF07aWYobyl0cnl7byhuLmVsbSxlLG4scixpKX1jYXRjaChyKXtMZShyLG4uY29udGV4dCwiZGlyZWN0aXZlICIrZS5uYW1lKyIgIit0KyIgaG9vayIpfX12YXIgbnI9W1duLEpuXTtmdW5jdGlvbiBycihlLHQpe3ZhciBuPXQuY29tcG9uZW50T3B0aW9ucztpZighKGkobikmJiExPT09bi5DdG9yLm9wdGlvbnMuaW5oZXJpdEF0dHJzfHxyKGUuZGF0YS5hdHRycykmJnIodC5kYXRhLmF0dHJzKSkpe3ZhciBvLHMsYT10LmVsbSxsPWUuZGF0YS5hdHRyc3x8e30sdT10LmRhdGEuYXR0cnN8fHt9O2ZvcihvIGluIGkodS5fX29iX18pJiYodT10LmRhdGEuYXR0cnM9TSh7fSx1KSksdSlzPXVbb10sbFtvXSE9PXMmJmlyKGEsbyxzKTtmb3IobyBpbihHfHxYKSYmdS52YWx1ZSE9PWwudmFsdWUmJmlyKGEsInZhbHVlIix1LnZhbHVlKSxsKXIodVtvXSkmJihNbihvKT9hLnJlbW92ZUF0dHJpYnV0ZU5TKEVuLE9uKG8pKTpTbihvKXx8YS5yZW1vdmVBdHRyaWJ1dGUobykpfX1mdW5jdGlvbiBpcihlLHQsbil7ZS50YWdOYW1lLmluZGV4T2YoIi0iKT4tMT9vcihlLHQsbik6QW4odCk/RG4obik/ZS5yZW1vdmVBdHRyaWJ1dGUodCk6KG49ImFsbG93ZnVsbHNjcmVlbiI9PT10JiYiRU1CRUQiPT09ZS50YWdOYW1lPyJ0cnVlIjp0LGUuc2V0QXR0cmlidXRlKHQsbikpOlNuKHQpP2Uuc2V0QXR0cmlidXRlKHQsRG4obil8fCJmYWxzZSI9PT1uPyJmYWxzZSI6InRydWUiKTpNbih0KT9EbihuKT9lLnJlbW92ZUF0dHJpYnV0ZU5TKEVuLE9uKHQpKTplLnNldEF0dHJpYnV0ZU5TKEVuLHQsbik6b3IoZSx0LG4pfWZ1bmN0aW9uIG9yKGUsdCxuKXtpZihEbihuKSllLnJlbW92ZUF0dHJpYnV0ZSh0KTtlbHNle2lmKEcmJiFKJiYoIlRFWFRBUkVBIj09PWUudGFnTmFtZXx8IklOUFVUIj09PWUudGFnTmFtZSkmJiJwbGFjZWhvbGRlciI9PT10JiYhZS5fX2llcGgpe3ZhciByPWZ1bmN0aW9uKHQpe3Quc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksZS5yZW1vdmVFdmVudExpc3RlbmVyKCJpbnB1dCIscil9O2UuYWRkRXZlbnRMaXN0ZW5lcigiaW5wdXQiLHIpLGUuX19pZXBoPSEwfWUuc2V0QXR0cmlidXRlKHQsbil9fXZhciBzcj17Y3JlYXRlOnJyLHVwZGF0ZTpycn07ZnVuY3Rpb24gYXIoZSx0KXt2YXIgbj10LmVsbSxvPXQuZGF0YSxzPWUuZGF0YTtpZighKHIoby5zdGF0aWNDbGFzcykmJnIoby5jbGFzcykmJihyKHMpfHxyKHMuc3RhdGljQ2xhc3MpJiZyKHMuY2xhc3MpKSkpe3ZhciBhPSRuKHQpLGw9bi5fdHJhbnNpdGlvbkNsYXNzZXM7aShsKSYmKGE9UG4oYSxObihsKSkpLGEhPT1uLl9wcmV2Q2xhc3MmJihuLnNldEF0dHJpYnV0ZSgiY2xhc3MiLGEpLG4uX3ByZXZDbGFzcz1hKX19dmFyIGxyLHVyLGNyLGRyLGZyLGhyLHByPXtjcmVhdGU6YXIsdXBkYXRlOmFyfSxtcj0vW1x3KS4rXC1fJFxdXS87ZnVuY3Rpb24gdnIoZSl7dmFyIHQsbixyLGksbyxzPSExLGE9ITEsbD0hMSx1PSExLGM9MCxkPTAsZj0wLGg9MDtmb3Iocj0wO3I8ZS5sZW5ndGg7cisrKWlmKG49dCx0PWUuY2hhckNvZGVBdChyKSxzKTM5PT09dCYmOTIhPT1uJiYocz0hMSk7ZWxzZSBpZihhKTM0PT09dCYmOTIhPT1uJiYoYT0hMSk7ZWxzZSBpZihsKTk2PT09dCYmOTIhPT1uJiYobD0hMSk7ZWxzZSBpZih1KTQ3PT09dCYmOTIhPT1uJiYodT0hMSk7ZWxzZSBpZigxMjQhPT10fHwxMjQ9PT1lLmNoYXJDb2RlQXQocisxKXx8MTI0PT09ZS5jaGFyQ29kZUF0KHItMSl8fGN8fGR8fGYpe3N3aXRjaCh0KXtjYXNlIDM0OmE9ITA7YnJlYWs7Y2FzZSAzOTpzPSEwO2JyZWFrO2Nhc2UgOTY6bD0hMDticmVhaztjYXNlIDQwOmYrKzticmVhaztjYXNlIDQxOmYtLTticmVhaztjYXNlIDkxOmQrKzticmVhaztjYXNlIDkzOmQtLTticmVhaztjYXNlIDEyMzpjKys7YnJlYWs7Y2FzZSAxMjU6Yy0tfWlmKDQ3PT09dCl7Zm9yKHZhciBwPXItMSxtPXZvaWQgMDtwPj0wJiYiICI9PT0obT1lLmNoYXJBdChwKSk7cC0tKTttJiZtci50ZXN0KG0pfHwodT0hMCl9fWVsc2Ugdm9pZCAwPT09aT8oaD1yKzEsaT1lLnNsaWNlKDAscikudHJpbSgpKTp2KCk7ZnVuY3Rpb24gdigpeyhvfHwobz1bXSkpLnB1c2goZS5zbGljZShoLHIpLnRyaW0oKSksaD1yKzF9aWYodm9pZCAwPT09aT9pPWUuc2xpY2UoMCxyKS50cmltKCk6MCE9PWgmJnYoKSxvKWZvcihyPTA7cjxvLmxlbmd0aDtyKyspaT1ncihpLG9bcl0pO3JldHVybiBpfWZ1bmN0aW9uIGdyKGUsdCl7dmFyIG49dC5pbmRleE9mKCIoIik7aWYobjwwKXJldHVybidfZigiJyt0KyciKSgnK2UrIikiO3ZhciByPXQuc2xpY2UoMCxuKSxpPXQuc2xpY2UobisxKTtyZXR1cm4nX2YoIicrcisnIikoJytlKygiKSIhPT1pPyIsIitpOmkpfWZ1bmN0aW9uIHlyKGUpe2NvbnNvbGUuZXJyb3IoIltWdWUgY29tcGlsZXJdOiAiK2UpfWZ1bmN0aW9uIF9yKGUsdCl7cmV0dXJuIGU/ZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGVbdF19KS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGV9KTpbXX1mdW5jdGlvbiBicihlLHQsbil7KGUucHJvcHN8fChlLnByb3BzPVtdKSkucHVzaCh7bmFtZTp0LHZhbHVlOm59KSxlLnBsYWluPSExfWZ1bmN0aW9uIHhyKGUsdCxuKXsoZS5hdHRyc3x8KGUuYXR0cnM9W10pKS5wdXNoKHtuYW1lOnQsdmFsdWU6bn0pLGUucGxhaW49ITF9ZnVuY3Rpb24gQ3IoZSx0LG4pe2UuYXR0cnNNYXBbdF09bixlLmF0dHJzTGlzdC5wdXNoKHtuYW1lOnQsdmFsdWU6bn0pfWZ1bmN0aW9uIHdyKGUsdCxuLHIsaSxvKXsoZS5kaXJlY3RpdmVzfHwoZS5kaXJlY3RpdmVzPVtdKSkucHVzaCh7bmFtZTp0LHJhd05hbWU6bix2YWx1ZTpyLGFyZzppLG1vZGlmaWVyczpvfSksZS5wbGFpbj0hMX1mdW5jdGlvbiBrcihlLHQscixpLG8scyl7dmFyIGE7aT1pfHxuLCJjbGljayI9PT10JiYoaS5yaWdodD8odD0iY29udGV4dG1lbnUiLGRlbGV0ZSBpLnJpZ2h0KTppLm1pZGRsZSYmKHQ9Im1vdXNldXAiKSksaS5jYXB0dXJlJiYoZGVsZXRlIGkuY2FwdHVyZSx0PSIhIit0KSxpLm9uY2UmJihkZWxldGUgaS5vbmNlLHQ9In4iK3QpLGkucGFzc2l2ZSYmKGRlbGV0ZSBpLnBhc3NpdmUsdD0iJiIrdCksaS5uYXRpdmU/KGRlbGV0ZSBpLm5hdGl2ZSxhPWUubmF0aXZlRXZlbnRzfHwoZS5uYXRpdmVFdmVudHM9e30pKTphPWUuZXZlbnRzfHwoZS5ldmVudHM9e30pO3ZhciBsPXt2YWx1ZTpyLnRyaW0oKX07aSE9PW4mJihsLm1vZGlmaWVycz1pKTt2YXIgdT1hW3RdO0FycmF5LmlzQXJyYXkodSk/bz91LnVuc2hpZnQobCk6dS5wdXNoKGwpOmFbdF09dT9vP1tsLHVdOlt1LGxdOmwsZS5wbGFpbj0hMX1mdW5jdGlvbiBTcihlLHQsbil7dmFyIHI9QXIoZSwiOiIrdCl8fEFyKGUsInYtYmluZDoiK3QpO2lmKG51bGwhPXIpcmV0dXJuIHZyKHIpO2lmKCExIT09bil7dmFyIGk9QXIoZSx0KTtpZihudWxsIT1pKXJldHVybiBKU09OLnN0cmluZ2lmeShpKX19ZnVuY3Rpb24gQXIoZSx0LG4pe3ZhciByO2lmKG51bGwhPShyPWUuYXR0cnNNYXBbdF0pKWZvcih2YXIgaT1lLmF0dHJzTGlzdCxvPTAscz1pLmxlbmd0aDtvPHM7bysrKWlmKGlbb10ubmFtZT09PXQpe2kuc3BsaWNlKG8sMSk7YnJlYWt9cmV0dXJuIG4mJmRlbGV0ZSBlLmF0dHJzTWFwW3RdLHJ9ZnVuY3Rpb24gRXIoZSx0LG4pe3ZhciByPW58fHt9LGk9ci5udW1iZXIsbz0iJCR2IjtyLnRyaW0mJihvPSIodHlwZW9mICQkdiA9PT0gJ3N0cmluZyc/ICQkdi50cmltKCk6ICQkdikiKSxpJiYobz0iX24oIitvKyIpIik7dmFyIHM9TXIodCxvKTtlLm1vZGVsPXt2YWx1ZToiKCIrdCsiKSIsZXhwcmVzc2lvbjpKU09OLnN0cmluZ2lmeSh0KSxjYWxsYmFjazoiZnVuY3Rpb24gKCQkdikgeyIrcysifSJ9fWZ1bmN0aW9uIE1yKGUsdCl7dmFyIG49ZnVuY3Rpb24oZSl7aWYoZT1lLnRyaW0oKSxscj1lLmxlbmd0aCxlLmluZGV4T2YoIlsiKTwwfHxlLmxhc3RJbmRleE9mKCJdIik8bHItMSlyZXR1cm4oZHI9ZS5sYXN0SW5kZXhPZigiLiIpKT4tMT97ZXhwOmUuc2xpY2UoMCxkciksa2V5OiciJytlLnNsaWNlKGRyKzEpKyciJ306e2V4cDplLGtleTpudWxsfTt1cj1lLGRyPWZyPWhyPTA7Zm9yKDshRHIoKTspJHIoY3I9T3IoKSk/UHIoY3IpOjkxPT09Y3ImJlRyKGNyKTtyZXR1cm57ZXhwOmUuc2xpY2UoMCxmciksa2V5OmUuc2xpY2UoZnIrMSxocil9fShlKTtyZXR1cm4gbnVsbD09PW4ua2V5P2UrIj0iK3Q6IiRzZXQoIituLmV4cCsiLCAiK24ua2V5KyIsICIrdCsiKSJ9ZnVuY3Rpb24gT3IoKXtyZXR1cm4gdXIuY2hhckNvZGVBdCgrK2RyKX1mdW5jdGlvbiBEcigpe3JldHVybiBkcj49bHJ9ZnVuY3Rpb24gJHIoZSl7cmV0dXJuIDM0PT09ZXx8Mzk9PT1lfWZ1bmN0aW9uIFRyKGUpe3ZhciB0PTE7Zm9yKGZyPWRyOyFEcigpOylpZigkcihlPU9yKCkpKVByKGUpO2Vsc2UgaWYoOTE9PT1lJiZ0KyssOTM9PT1lJiZ0LS0sMD09PXQpe2hyPWRyO2JyZWFrfX1mdW5jdGlvbiBQcihlKXtmb3IodmFyIHQ9ZTshRHIoKSYmKGU9T3IoKSkhPT10Oyk7fXZhciBOcixGcj0iX19yIixJcj0iX19jIjtmdW5jdGlvbiBScihlLHQsbil7dmFyIHI9TnI7cmV0dXJuIGZ1bmN0aW9uIGkoKXtudWxsIT09dC5hcHBseShudWxsLGFyZ3VtZW50cykmJkJyKGUsaSxuLHIpfX1mdW5jdGlvbiBqcihlLHQsbixyKXt2YXIgaTt0PShpPXQpLl93aXRoVGFza3x8KGkuX3dpdGhUYXNrPWZ1bmN0aW9uKCl7WWU9ITA7dHJ5e3JldHVybiBpLmFwcGx5KG51bGwsYXJndW1lbnRzKX1maW5hbGx5e1llPSExfX0pLE5yLmFkZEV2ZW50TGlzdGVuZXIoZSx0LGVlP3tjYXB0dXJlOm4scGFzc2l2ZTpyfTpuKX1mdW5jdGlvbiBCcihlLHQsbixyKXsocnx8TnIpLnJlbW92ZUV2ZW50TGlzdGVuZXIoZSx0Ll93aXRoVGFza3x8dCxuKX1mdW5jdGlvbiBMcihlLHQpe2lmKCFyKGUuZGF0YS5vbil8fCFyKHQuZGF0YS5vbikpe3ZhciBuPXQuZGF0YS5vbnx8e30sbz1lLmRhdGEub258fHt9O05yPXQuZWxtLGZ1bmN0aW9uKGUpe2lmKGkoZVtGcl0pKXt2YXIgdD1HPyJjaGFuZ2UiOiJpbnB1dCI7ZVt0XT1bXS5jb25jYXQoZVtGcl0sZVt0XXx8W10pLGRlbGV0ZSBlW0ZyXX1pKGVbSXJdKSYmKGUuY2hhbmdlPVtdLmNvbmNhdChlW0lyXSxlLmNoYW5nZXx8W10pLGRlbGV0ZSBlW0lyXSl9KG4pLGl0KG4sbyxqcixCcixScix0LmNvbnRleHQpLE5yPXZvaWQgMH19dmFyIFZyPXtjcmVhdGU6THIsdXBkYXRlOkxyfTtmdW5jdGlvbiBIcihlLHQpe2lmKCFyKGUuZGF0YS5kb21Qcm9wcyl8fCFyKHQuZGF0YS5kb21Qcm9wcykpe3ZhciBuLG8scz10LmVsbSxhPWUuZGF0YS5kb21Qcm9wc3x8e30sbD10LmRhdGEuZG9tUHJvcHN8fHt9O2ZvcihuIGluIGkobC5fX29iX18pJiYobD10LmRhdGEuZG9tUHJvcHM9TSh7fSxsKSksYSlyKGxbbl0pJiYoc1tuXT0iIik7Zm9yKG4gaW4gbCl7aWYobz1sW25dLCJ0ZXh0Q29udGVudCI9PT1ufHwiaW5uZXJIVE1MIj09PW4pe2lmKHQuY2hpbGRyZW4mJih0LmNoaWxkcmVuLmxlbmd0aD0wKSxvPT09YVtuXSljb250aW51ZTsxPT09cy5jaGlsZE5vZGVzLmxlbmd0aCYmcy5yZW1vdmVDaGlsZChzLmNoaWxkTm9kZXNbMF0pfWlmKCJ2YWx1ZSI9PT1uKXtzLl92YWx1ZT1vO3ZhciB1PXIobyk/IiI6U3RyaW5nKG8pO3pyKHMsdSkmJihzLnZhbHVlPXUpfWVsc2Ugc1tuXT1vfX19ZnVuY3Rpb24genIoZSx0KXtyZXR1cm4hZS5jb21wb3NpbmcmJigiT1BUSU9OIj09PWUudGFnTmFtZXx8ZnVuY3Rpb24oZSx0KXt2YXIgbj0hMDt0cnl7bj1kb2N1bWVudC5hY3RpdmVFbGVtZW50IT09ZX1jYXRjaChlKXt9cmV0dXJuIG4mJmUudmFsdWUhPT10fShlLHQpfHxmdW5jdGlvbihlLHQpe3ZhciBuPWUudmFsdWUscj1lLl92TW9kaWZpZXJzO2lmKGkocikpe2lmKHIubGF6eSlyZXR1cm4hMTtpZihyLm51bWJlcilyZXR1cm4gaChuKSE9PWgodCk7aWYoci50cmltKXJldHVybiBuLnRyaW0oKSE9PXQudHJpbSgpfXJldHVybiBuIT09dH0oZSx0KSl9dmFyIFdyPXtjcmVhdGU6SHIsdXBkYXRlOkhyfSxxcj1iKGZ1bmN0aW9uKGUpe3ZhciB0PXt9LG49LzooLispLztyZXR1cm4gZS5zcGxpdCgvOyg/IVteKF0qXCkpL2cpLmZvckVhY2goZnVuY3Rpb24oZSl7aWYoZSl7dmFyIHI9ZS5zcGxpdChuKTtyLmxlbmd0aD4xJiYodFtyWzBdLnRyaW0oKV09clsxXS50cmltKCkpfX0pLHR9KTtmdW5jdGlvbiBVcihlKXt2YXIgdD1LcihlLnN0eWxlKTtyZXR1cm4gZS5zdGF0aWNTdHlsZT9NKGUuc3RhdGljU3R5bGUsdCk6dH1mdW5jdGlvbiBLcihlKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT9PKGUpOiJzdHJpbmciPT10eXBlb2YgZT9xcihlKTplfXZhciBZcixHcj0vXi0tLyxKcj0vXHMqIWltcG9ydGFudCQvLFhyPWZ1bmN0aW9uKGUsdCxuKXtpZihHci50ZXN0KHQpKWUuc3R5bGUuc2V0UHJvcGVydHkodCxuKTtlbHNlIGlmKEpyLnRlc3QobikpZS5zdHlsZS5zZXRQcm9wZXJ0eSh0LG4ucmVwbGFjZShKciwiIiksImltcG9ydGFudCIpO2Vsc2V7dmFyIHI9WnIodCk7aWYoQXJyYXkuaXNBcnJheShuKSlmb3IodmFyIGk9MCxvPW4ubGVuZ3RoO2k8bztpKyspZS5zdHlsZVtyXT1uW2ldO2Vsc2UgZS5zdHlsZVtyXT1ufX0sUXI9WyJXZWJraXQiLCJNb3oiLCJtcyJdLFpyPWIoZnVuY3Rpb24oZSl7aWYoWXI9WXJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpLnN0eWxlLCJmaWx0ZXIiIT09KGU9QyhlKSkmJmUgaW4gWXIpcmV0dXJuIGU7Zm9yKHZhciB0PWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSxuPTA7bjxRci5sZW5ndGg7bisrKXt2YXIgcj1RcltuXSt0O2lmKHIgaW4gWXIpcmV0dXJuIHJ9fSk7ZnVuY3Rpb24gZWkoZSx0KXt2YXIgbj10LmRhdGEsbz1lLmRhdGE7aWYoIShyKG4uc3RhdGljU3R5bGUpJiZyKG4uc3R5bGUpJiZyKG8uc3RhdGljU3R5bGUpJiZyKG8uc3R5bGUpKSl7dmFyIHMsYSxsPXQuZWxtLHU9by5zdGF0aWNTdHlsZSxjPW8ubm9ybWFsaXplZFN0eWxlfHxvLnN0eWxlfHx7fSxkPXV8fGMsZj1Lcih0LmRhdGEuc3R5bGUpfHx7fTt0LmRhdGEubm9ybWFsaXplZFN0eWxlPWkoZi5fX29iX18pP00oe30sZik6Zjt2YXIgaD1mdW5jdGlvbihlLHQpe3ZhciBuLHI9e307aWYodClmb3IodmFyIGk9ZTtpLmNvbXBvbmVudEluc3RhbmNlOykoaT1pLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSkmJmkuZGF0YSYmKG49VXIoaS5kYXRhKSkmJk0ocixuKTsobj1VcihlLmRhdGEpKSYmTShyLG4pO2Zvcih2YXIgbz1lO289by5wYXJlbnQ7KW8uZGF0YSYmKG49VXIoby5kYXRhKSkmJk0ocixuKTtyZXR1cm4gcn0odCwhMCk7Zm9yKGEgaW4gZClyKGhbYV0pJiZYcihsLGEsIiIpO2ZvcihhIGluIGgpKHM9aFthXSkhPT1kW2FdJiZYcihsLGEsbnVsbD09cz8iIjpzKX19dmFyIHRpPXtjcmVhdGU6ZWksdXBkYXRlOmVpfSxuaT0vXHMrLztmdW5jdGlvbiByaShlLHQpe2lmKHQmJih0PXQudHJpbSgpKSlpZihlLmNsYXNzTGlzdCl0LmluZGV4T2YoIiAiKT4tMT90LnNwbGl0KG5pKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiBlLmNsYXNzTGlzdC5hZGQodCl9KTplLmNsYXNzTGlzdC5hZGQodCk7ZWxzZXt2YXIgbj0iICIrKGUuZ2V0QXR0cmlidXRlKCJjbGFzcyIpfHwiIikrIiAiO24uaW5kZXhPZigiICIrdCsiICIpPDAmJmUuc2V0QXR0cmlidXRlKCJjbGFzcyIsKG4rdCkudHJpbSgpKX19ZnVuY3Rpb24gaWkoZSx0KXtpZih0JiYodD10LnRyaW0oKSkpaWYoZS5jbGFzc0xpc3QpdC5pbmRleE9mKCIgIik+LTE/dC5zcGxpdChuaSkuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gZS5jbGFzc0xpc3QucmVtb3ZlKHQpfSk6ZS5jbGFzc0xpc3QucmVtb3ZlKHQpLGUuY2xhc3NMaXN0Lmxlbmd0aHx8ZS5yZW1vdmVBdHRyaWJ1dGUoImNsYXNzIik7ZWxzZXtmb3IodmFyIG49IiAiKyhlLmdldEF0dHJpYnV0ZSgiY2xhc3MiKXx8IiIpKyIgIixyPSIgIit0KyIgIjtuLmluZGV4T2Yocik+PTA7KW49bi5yZXBsYWNlKHIsIiAiKTsobj1uLnRyaW0oKSk/ZS5zZXRBdHRyaWJ1dGUoImNsYXNzIixuKTplLnJlbW92ZUF0dHJpYnV0ZSgiY2xhc3MiKX19ZnVuY3Rpb24gb2koZSl7aWYoZSl7aWYoIm9iamVjdCI9PXR5cGVvZiBlKXt2YXIgdD17fTtyZXR1cm4hMSE9PWUuY3NzJiZNKHQsc2koZS5uYW1lfHwidiIpKSxNKHQsZSksdH1yZXR1cm4ic3RyaW5nIj09dHlwZW9mIGU/c2koZSk6dm9pZCAwfX12YXIgc2k9YihmdW5jdGlvbihlKXtyZXR1cm57ZW50ZXJDbGFzczplKyItZW50ZXIiLGVudGVyVG9DbGFzczplKyItZW50ZXItdG8iLGVudGVyQWN0aXZlQ2xhc3M6ZSsiLWVudGVyLWFjdGl2ZSIsbGVhdmVDbGFzczplKyItbGVhdmUiLGxlYXZlVG9DbGFzczplKyItbGVhdmUtdG8iLGxlYXZlQWN0aXZlQ2xhc3M6ZSsiLWxlYXZlLWFjdGl2ZSJ9fSksYWk9cSYmIUosbGk9InRyYW5zaXRpb24iLHVpPSJhbmltYXRpb24iLGNpPSJ0cmFuc2l0aW9uIixkaT0idHJhbnNpdGlvbmVuZCIsZmk9ImFuaW1hdGlvbiIsaGk9ImFuaW1hdGlvbmVuZCI7YWkmJih2b2lkIDA9PT13aW5kb3cub250cmFuc2l0aW9uZW5kJiZ2b2lkIDAhPT13aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kJiYoY2k9IldlYmtpdFRyYW5zaXRpb24iLGRpPSJ3ZWJraXRUcmFuc2l0aW9uRW5kIiksdm9pZCAwPT09d2luZG93Lm9uYW5pbWF0aW9uZW5kJiZ2b2lkIDAhPT13aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQmJihmaT0iV2Via2l0QW5pbWF0aW9uIixoaT0id2Via2l0QW5pbWF0aW9uRW5kIikpO3ZhciBwaT1xP3dpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU/d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdyk6c2V0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZSgpfTtmdW5jdGlvbiBtaShlKXtwaShmdW5jdGlvbigpe3BpKGUpfSl9ZnVuY3Rpb24gdmkoZSx0KXt2YXIgbj1lLl90cmFuc2l0aW9uQ2xhc3Nlc3x8KGUuX3RyYW5zaXRpb25DbGFzc2VzPVtdKTtuLmluZGV4T2YodCk8MCYmKG4ucHVzaCh0KSxyaShlLHQpKX1mdW5jdGlvbiBnaShlLHQpe2UuX3RyYW5zaXRpb25DbGFzc2VzJiZnKGUuX3RyYW5zaXRpb25DbGFzc2VzLHQpLGlpKGUsdCl9ZnVuY3Rpb24geWkoZSx0LG4pe3ZhciByPWJpKGUsdCksaT1yLnR5cGUsbz1yLnRpbWVvdXQscz1yLnByb3BDb3VudDtpZighaSlyZXR1cm4gbigpO3ZhciBhPWk9PT1saT9kaTpoaSxsPTAsdT1mdW5jdGlvbigpe2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihhLGMpLG4oKX0sYz1mdW5jdGlvbih0KXt0LnRhcmdldD09PWUmJisrbD49cyYmdSgpfTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bDxzJiZ1KCl9LG8rMSksZS5hZGRFdmVudExpc3RlbmVyKGEsYyl9dmFyIF9pPS9cYih0cmFuc2Zvcm18YWxsKSgsfCQpLztmdW5jdGlvbiBiaShlLHQpe3ZhciBuLHI9d2luZG93LmdldENvbXB1dGVkU3R5bGUoZSksaT0ocltjaSsiRGVsYXkiXXx8IiIpLnNwbGl0KCIsICIpLG89KHJbY2krIkR1cmF0aW9uIl18fCIiKS5zcGxpdCgiLCAiKSxzPXhpKGksbyksYT0ocltmaSsiRGVsYXkiXXx8IiIpLnNwbGl0KCIsICIpLGw9KHJbZmkrIkR1cmF0aW9uIl18fCIiKS5zcGxpdCgiLCAiKSx1PXhpKGEsbCksYz0wLGQ9MDtyZXR1cm4gdD09PWxpP3M+MCYmKG49bGksYz1zLGQ9by5sZW5ndGgpOnQ9PT11aT91PjAmJihuPXVpLGM9dSxkPWwubGVuZ3RoKTpkPShuPShjPU1hdGgubWF4KHMsdSkpPjA/cz51P2xpOnVpOm51bGwpP249PT1saT9vLmxlbmd0aDpsLmxlbmd0aDowLHt0eXBlOm4sdGltZW91dDpjLHByb3BDb3VudDpkLGhhc1RyYW5zZm9ybTpuPT09bGkmJl9pLnRlc3QocltjaSsiUHJvcGVydHkiXSl9fWZ1bmN0aW9uIHhpKGUsdCl7Zm9yKDtlLmxlbmd0aDx0Lmxlbmd0aDspZT1lLmNvbmNhdChlKTtyZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCx0Lm1hcChmdW5jdGlvbih0LG4pe3JldHVybiBDaSh0KStDaShlW25dKX0pKX1mdW5jdGlvbiBDaShlKXtyZXR1cm4gMWUzKk51bWJlcihlLnNsaWNlKDAsLTEpLnJlcGxhY2UoIiwiLCIuIikpfWZ1bmN0aW9uIHdpKGUsdCl7dmFyIG49ZS5lbG07aShuLl9sZWF2ZUNiKSYmKG4uX2xlYXZlQ2IuY2FuY2VsbGVkPSEwLG4uX2xlYXZlQ2IoKSk7dmFyIG89b2koZS5kYXRhLnRyYW5zaXRpb24pO2lmKCFyKG8pJiYhaShuLl9lbnRlckNiKSYmMT09PW4ubm9kZVR5cGUpe2Zvcih2YXIgcz1vLmNzcyxsPW8udHlwZSx1PW8uZW50ZXJDbGFzcyxjPW8uZW50ZXJUb0NsYXNzLGQ9by5lbnRlckFjdGl2ZUNsYXNzLGY9by5hcHBlYXJDbGFzcyxwPW8uYXBwZWFyVG9DbGFzcyxtPW8uYXBwZWFyQWN0aXZlQ2xhc3Msdj1vLmJlZm9yZUVudGVyLGc9by5lbnRlcix5PW8uYWZ0ZXJFbnRlcixfPW8uZW50ZXJDYW5jZWxsZWQsYj1vLmJlZm9yZUFwcGVhcix4PW8uYXBwZWFyLEM9by5hZnRlckFwcGVhcix3PW8uYXBwZWFyQ2FuY2VsbGVkLGs9by5kdXJhdGlvbixTPV90LEE9X3QuJHZub2RlO0EmJkEucGFyZW50OylTPShBPUEucGFyZW50KS5jb250ZXh0O3ZhciBFPSFTLl9pc01vdW50ZWR8fCFlLmlzUm9vdEluc2VydDtpZighRXx8eHx8IiI9PT14KXt2YXIgTT1FJiZmP2Y6dSxPPUUmJm0/bTpkLEQ9RSYmcD9wOmMsJD1FJiZifHx2LFQ9RSYmImZ1bmN0aW9uIj09dHlwZW9mIHg/eDpnLFA9RSYmQ3x8eSxOPUUmJnd8fF8sST1oKGEoayk/ay5lbnRlcjprKTswO3ZhciBSPSExIT09cyYmIUosaj1BaShUKSxCPW4uX2VudGVyQ2I9RihmdW5jdGlvbigpe1ImJihnaShuLEQpLGdpKG4sTykpLEIuY2FuY2VsbGVkPyhSJiZnaShuLE0pLE4mJk4obikpOlAmJlAobiksbi5fZW50ZXJDYj1udWxsfSk7ZS5kYXRhLnNob3d8fG90KGUsImluc2VydCIsZnVuY3Rpb24oKXt2YXIgdD1uLnBhcmVudE5vZGUscj10JiZ0Ll9wZW5kaW5nJiZ0Ll9wZW5kaW5nW2Uua2V5XTtyJiZyLnRhZz09PWUudGFnJiZyLmVsbS5fbGVhdmVDYiYmci5lbG0uX2xlYXZlQ2IoKSxUJiZUKG4sQil9KSwkJiYkKG4pLFImJih2aShuLE0pLHZpKG4sTyksbWkoZnVuY3Rpb24oKXtnaShuLE0pLEIuY2FuY2VsbGVkfHwodmkobixEKSxqfHwoU2koSSk/c2V0VGltZW91dChCLEkpOnlpKG4sbCxCKSkpfSkpLGUuZGF0YS5zaG93JiYodCYmdCgpLFQmJlQobixCKSksUnx8anx8QigpfX19ZnVuY3Rpb24ga2koZSx0KXt2YXIgbj1lLmVsbTtpKG4uX2VudGVyQ2IpJiYobi5fZW50ZXJDYi5jYW5jZWxsZWQ9ITAsbi5fZW50ZXJDYigpKTt2YXIgbz1vaShlLmRhdGEudHJhbnNpdGlvbik7aWYocihvKXx8MSE9PW4ubm9kZVR5cGUpcmV0dXJuIHQoKTtpZighaShuLl9sZWF2ZUNiKSl7dmFyIHM9by5jc3MsbD1vLnR5cGUsdT1vLmxlYXZlQ2xhc3MsYz1vLmxlYXZlVG9DbGFzcyxkPW8ubGVhdmVBY3RpdmVDbGFzcyxmPW8uYmVmb3JlTGVhdmUscD1vLmxlYXZlLG09by5hZnRlckxlYXZlLHY9by5sZWF2ZUNhbmNlbGxlZCxnPW8uZGVsYXlMZWF2ZSx5PW8uZHVyYXRpb24sXz0hMSE9PXMmJiFKLGI9QWkocCkseD1oKGEoeSk/eS5sZWF2ZTp5KTswO3ZhciBDPW4uX2xlYXZlQ2I9RihmdW5jdGlvbigpe24ucGFyZW50Tm9kZSYmbi5wYXJlbnROb2RlLl9wZW5kaW5nJiYobi5wYXJlbnROb2RlLl9wZW5kaW5nW2Uua2V5XT1udWxsKSxfJiYoZ2kobixjKSxnaShuLGQpKSxDLmNhbmNlbGxlZD8oXyYmZ2kobix1KSx2JiZ2KG4pKToodCgpLG0mJm0obikpLG4uX2xlYXZlQ2I9bnVsbH0pO2c/Zyh3KTp3KCl9ZnVuY3Rpb24gdygpe0MuY2FuY2VsbGVkfHwoIWUuZGF0YS5zaG93JiZuLnBhcmVudE5vZGUmJigobi5wYXJlbnROb2RlLl9wZW5kaW5nfHwobi5wYXJlbnROb2RlLl9wZW5kaW5nPXt9KSlbZS5rZXldPWUpLGYmJmYobiksXyYmKHZpKG4sdSksdmkobixkKSxtaShmdW5jdGlvbigpe2dpKG4sdSksQy5jYW5jZWxsZWR8fCh2aShuLGMpLGJ8fChTaSh4KT9zZXRUaW1lb3V0KEMseCk6eWkobixsLEMpKSl9KSkscCYmcChuLEMpLF98fGJ8fEMoKSl9fWZ1bmN0aW9uIFNpKGUpe3JldHVybiJudW1iZXIiPT10eXBlb2YgZSYmIWlzTmFOKGUpfWZ1bmN0aW9uIEFpKGUpe2lmKHIoZSkpcmV0dXJuITE7dmFyIHQ9ZS5mbnM7cmV0dXJuIGkodCk/QWkoQXJyYXkuaXNBcnJheSh0KT90WzBdOnQpOihlLl9sZW5ndGh8fGUubGVuZ3RoKT4xfWZ1bmN0aW9uIEVpKGUsdCl7ITAhPT10LmRhdGEuc2hvdyYmd2kodCl9dmFyIE1pPWZ1bmN0aW9uKGUpe3ZhciB0LG4sYT17fSxsPWUubW9kdWxlcyx1PWUubm9kZU9wcztmb3IodD0wO3Q8S24ubGVuZ3RoOysrdClmb3IoYVtLblt0XV09W10sbj0wO248bC5sZW5ndGg7KytuKWkobFtuXVtLblt0XV0pJiZhW0tuW3RdXS5wdXNoKGxbbl1bS25bdF1dKTtmdW5jdGlvbiBjKGUpe3ZhciB0PXUucGFyZW50Tm9kZShlKTtpKHQpJiZ1LnJlbW92ZUNoaWxkKHQsZSl9ZnVuY3Rpb24gZChlLHQsbixyLHMsbCxjKXtpZihpKGUuZWxtKSYmaShsKSYmKGU9bFtjXT1nZShlKSksZS5pc1Jvb3RJbnNlcnQ9IXMsIWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBzPWUuZGF0YTtpZihpKHMpKXt2YXIgbD1pKGUuY29tcG9uZW50SW5zdGFuY2UpJiZzLmtlZXBBbGl2ZTtpZihpKHM9cy5ob29rKSYmaShzPXMuaW5pdCkmJnMoZSwhMSksaShlLmNvbXBvbmVudEluc3RhbmNlKSlyZXR1cm4gZihlLHQpLGgobixlLmVsbSxyKSxvKGwpJiZmdW5jdGlvbihlLHQsbixyKXtmb3IodmFyIG8scz1lO3MuY29tcG9uZW50SW5zdGFuY2U7KWlmKHM9cy5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUsaShvPXMuZGF0YSkmJmkobz1vLnRyYW5zaXRpb24pKXtmb3Iobz0wO288YS5hY3RpdmF0ZS5sZW5ndGg7KytvKWEuYWN0aXZhdGVbb10oVW4scyk7dC5wdXNoKHMpO2JyZWFrfWgobixlLmVsbSxyKX0oZSx0LG4sciksITB9fShlLHQsbixyKSl7dmFyIGQ9ZS5kYXRhLHA9ZS5jaGlsZHJlbix2PWUudGFnO2kodik/KGUuZWxtPWUubnM/dS5jcmVhdGVFbGVtZW50TlMoZS5ucyx2KTp1LmNyZWF0ZUVsZW1lbnQodixlKSx5KGUpLG0oZSxwLHQpLGkoZCkmJmcoZSx0KSxoKG4sZS5lbG0scikpOm8oZS5pc0NvbW1lbnQpPyhlLmVsbT11LmNyZWF0ZUNvbW1lbnQoZS50ZXh0KSxoKG4sZS5lbG0scikpOihlLmVsbT11LmNyZWF0ZVRleHROb2RlKGUudGV4dCksaChuLGUuZWxtLHIpKX19ZnVuY3Rpb24gZihlLHQpe2koZS5kYXRhLnBlbmRpbmdJbnNlcnQpJiYodC5wdXNoLmFwcGx5KHQsZS5kYXRhLnBlbmRpbmdJbnNlcnQpLGUuZGF0YS5wZW5kaW5nSW5zZXJ0PW51bGwpLGUuZWxtPWUuY29tcG9uZW50SW5zdGFuY2UuJGVsLHYoZSk/KGcoZSx0KSx5KGUpKToocW4oZSksdC5wdXNoKGUpKX1mdW5jdGlvbiBoKGUsdCxuKXtpKGUpJiYoaShuKT91LnBhcmVudE5vZGUobik9PT1lJiZ1Lmluc2VydEJlZm9yZShlLHQsbik6dS5hcHBlbmRDaGlsZChlLHQpKX1mdW5jdGlvbiBtKGUsdCxuKXtpZihBcnJheS5pc0FycmF5KHQpKWZvcih2YXIgcj0wO3I8dC5sZW5ndGg7KytyKWQodFtyXSxuLGUuZWxtLG51bGwsITAsdCxyKTtlbHNlIHMoZS50ZXh0KSYmdS5hcHBlbmRDaGlsZChlLmVsbSx1LmNyZWF0ZVRleHROb2RlKFN0cmluZyhlLnRleHQpKSl9ZnVuY3Rpb24gdihlKXtmb3IoO2UuY29tcG9uZW50SW5zdGFuY2U7KWU9ZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7cmV0dXJuIGkoZS50YWcpfWZ1bmN0aW9uIGcoZSxuKXtmb3IodmFyIHI9MDtyPGEuY3JlYXRlLmxlbmd0aDsrK3IpYS5jcmVhdGVbcl0oVW4sZSk7aSh0PWUuZGF0YS5ob29rKSYmKGkodC5jcmVhdGUpJiZ0LmNyZWF0ZShVbixlKSxpKHQuaW5zZXJ0KSYmbi5wdXNoKGUpKX1mdW5jdGlvbiB5KGUpe3ZhciB0O2lmKGkodD1lLmZuU2NvcGVJZCkpdS5zZXRTdHlsZVNjb3BlKGUuZWxtLHQpO2Vsc2UgZm9yKHZhciBuPWU7bjspaSh0PW4uY29udGV4dCkmJmkodD10LiRvcHRpb25zLl9zY29wZUlkKSYmdS5zZXRTdHlsZVNjb3BlKGUuZWxtLHQpLG49bi5wYXJlbnQ7aSh0PV90KSYmdCE9PWUuY29udGV4dCYmdCE9PWUuZm5Db250ZXh0JiZpKHQ9dC4kb3B0aW9ucy5fc2NvcGVJZCkmJnUuc2V0U3R5bGVTY29wZShlLmVsbSx0KX1mdW5jdGlvbiBfKGUsdCxuLHIsaSxvKXtmb3IoO3I8PWk7KytyKWQobltyXSxvLGUsdCwhMSxuLHIpfWZ1bmN0aW9uIGIoZSl7dmFyIHQsbixyPWUuZGF0YTtpZihpKHIpKWZvcihpKHQ9ci5ob29rKSYmaSh0PXQuZGVzdHJveSkmJnQoZSksdD0wO3Q8YS5kZXN0cm95Lmxlbmd0aDsrK3QpYS5kZXN0cm95W3RdKGUpO2lmKGkodD1lLmNoaWxkcmVuKSlmb3Iobj0wO248ZS5jaGlsZHJlbi5sZW5ndGg7KytuKWIoZS5jaGlsZHJlbltuXSl9ZnVuY3Rpb24geChlLHQsbixyKXtmb3IoO248PXI7KytuKXt2YXIgbz10W25dO2kobykmJihpKG8udGFnKT8oQyhvKSxiKG8pKTpjKG8uZWxtKSl9fWZ1bmN0aW9uIEMoZSx0KXtpZihpKHQpfHxpKGUuZGF0YSkpe3ZhciBuLHI9YS5yZW1vdmUubGVuZ3RoKzE7Zm9yKGkodCk/dC5saXN0ZW5lcnMrPXI6dD1mdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4oKXswPT0tLW4ubGlzdGVuZXJzJiZjKGUpfXJldHVybiBuLmxpc3RlbmVycz10LG59KGUuZWxtLHIpLGkobj1lLmNvbXBvbmVudEluc3RhbmNlKSYmaShuPW4uX3Zub2RlKSYmaShuLmRhdGEpJiZDKG4sdCksbj0wO248YS5yZW1vdmUubGVuZ3RoOysrbilhLnJlbW92ZVtuXShlLHQpO2kobj1lLmRhdGEuaG9vaykmJmkobj1uLnJlbW92ZSk/bihlLHQpOnQoKX1lbHNlIGMoZS5lbG0pfWZ1bmN0aW9uIHcoZSx0LG4scil7Zm9yKHZhciBvPW47bzxyO28rKyl7dmFyIHM9dFtvXTtpZihpKHMpJiZZbihlLHMpKXJldHVybiBvfX1mdW5jdGlvbiBrKGUsdCxuLHMsbCxjKXtpZihlIT09dCl7aSh0LmVsbSkmJmkocykmJih0PXNbbF09Z2UodCkpO3ZhciBmPXQuZWxtPWUuZWxtO2lmKG8oZS5pc0FzeW5jUGxhY2Vob2xkZXIpKWkodC5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpP0UoZS5lbG0sdCxuKTp0LmlzQXN5bmNQbGFjZWhvbGRlcj0hMDtlbHNlIGlmKG8odC5pc1N0YXRpYykmJm8oZS5pc1N0YXRpYykmJnQua2V5PT09ZS5rZXkmJihvKHQuaXNDbG9uZWQpfHxvKHQuaXNPbmNlKSkpdC5jb21wb25lbnRJbnN0YW5jZT1lLmNvbXBvbmVudEluc3RhbmNlO2Vsc2V7dmFyIGgscD10LmRhdGE7aShwKSYmaShoPXAuaG9vaykmJmkoaD1oLnByZXBhdGNoKSYmaChlLHQpO3ZhciBtPWUuY2hpbGRyZW4sZz10LmNoaWxkcmVuO2lmKGkocCkmJnYodCkpe2ZvcihoPTA7aDxhLnVwZGF0ZS5sZW5ndGg7KytoKWEudXBkYXRlW2hdKGUsdCk7aShoPXAuaG9vaykmJmkoaD1oLnVwZGF0ZSkmJmgoZSx0KX1yKHQudGV4dCk/aShtKSYmaShnKT9tIT09ZyYmZnVuY3Rpb24oZSx0LG4sbyxzKXtmb3IodmFyIGEsbCxjLGY9MCxoPTAscD10Lmxlbmd0aC0xLG09dFswXSx2PXRbcF0sZz1uLmxlbmd0aC0xLHk9blswXSxiPW5bZ10sQz0hcztmPD1wJiZoPD1nOylyKG0pP209dFsrK2ZdOnIodik/dj10Wy0tcF06WW4obSx5KT8oayhtLHksbyxuLGgpLG09dFsrK2ZdLHk9blsrK2hdKTpZbih2LGIpPyhrKHYsYixvLG4sZyksdj10Wy0tcF0sYj1uWy0tZ10pOlluKG0sYik/KGsobSxiLG8sbixnKSxDJiZ1Lmluc2VydEJlZm9yZShlLG0uZWxtLHUubmV4dFNpYmxpbmcodi5lbG0pKSxtPXRbKytmXSxiPW5bLS1nXSk6WW4odix5KT8oayh2LHksbyxuLGgpLEMmJnUuaW5zZXJ0QmVmb3JlKGUsdi5lbG0sbS5lbG0pLHY9dFstLXBdLHk9blsrK2hdKToocihhKSYmKGE9R24odCxmLHApKSxyKGw9aSh5LmtleSk/YVt5LmtleV06dyh5LHQsZixwKSk/ZCh5LG8sZSxtLmVsbSwhMSxuLGgpOlluKGM9dFtsXSx5KT8oayhjLHksbyxuLGgpLHRbbF09dm9pZCAwLEMmJnUuaW5zZXJ0QmVmb3JlKGUsYy5lbG0sbS5lbG0pKTpkKHksbyxlLG0uZWxtLCExLG4saCkseT1uWysraF0pO2Y+cD9fKGUscihuW2crMV0pP251bGw6bltnKzFdLmVsbSxuLGgsZyxvKTpoPmcmJngoMCx0LGYscCl9KGYsbSxnLG4sYyk6aShnKT8oaShlLnRleHQpJiZ1LnNldFRleHRDb250ZW50KGYsIiIpLF8oZixudWxsLGcsMCxnLmxlbmd0aC0xLG4pKTppKG0pP3goMCxtLDAsbS5sZW5ndGgtMSk6aShlLnRleHQpJiZ1LnNldFRleHRDb250ZW50KGYsIiIpOmUudGV4dCE9PXQudGV4dCYmdS5zZXRUZXh0Q29udGVudChmLHQudGV4dCksaShwKSYmaShoPXAuaG9vaykmJmkoaD1oLnBvc3RwYXRjaCkmJmgoZSx0KX19fWZ1bmN0aW9uIFMoZSx0LG4pe2lmKG8obikmJmkoZS5wYXJlbnQpKWUucGFyZW50LmRhdGEucGVuZGluZ0luc2VydD10O2Vsc2UgZm9yKHZhciByPTA7cjx0Lmxlbmd0aDsrK3IpdFtyXS5kYXRhLmhvb2suaW5zZXJ0KHRbcl0pfXZhciBBPXAoImF0dHJzLGNsYXNzLHN0YXRpY0NsYXNzLHN0YXRpY1N0eWxlLGtleSIpO2Z1bmN0aW9uIEUoZSx0LG4scil7dmFyIHMsYT10LnRhZyxsPXQuZGF0YSx1PXQuY2hpbGRyZW47aWYocj1yfHxsJiZsLnByZSx0LmVsbT1lLG8odC5pc0NvbW1lbnQpJiZpKHQuYXN5bmNGYWN0b3J5KSlyZXR1cm4gdC5pc0FzeW5jUGxhY2Vob2xkZXI9ITAsITA7aWYoaShsKSYmKGkocz1sLmhvb2spJiZpKHM9cy5pbml0KSYmcyh0LCEwKSxpKHM9dC5jb21wb25lbnRJbnN0YW5jZSkpKXJldHVybiBmKHQsbiksITA7aWYoaShhKSl7aWYoaSh1KSlpZihlLmhhc0NoaWxkTm9kZXMoKSlpZihpKHM9bCkmJmkocz1zLmRvbVByb3BzKSYmaShzPXMuaW5uZXJIVE1MKSl7aWYocyE9PWUuaW5uZXJIVE1MKXJldHVybiExfWVsc2V7Zm9yKHZhciBjPSEwLGQ9ZS5maXJzdENoaWxkLGg9MDtoPHUubGVuZ3RoO2grKyl7aWYoIWR8fCFFKGQsdVtoXSxuLHIpKXtjPSExO2JyZWFrfWQ9ZC5uZXh0U2libGluZ31pZighY3x8ZClyZXR1cm4hMX1lbHNlIG0odCx1LG4pO2lmKGkobCkpe3ZhciBwPSExO2Zvcih2YXIgdiBpbiBsKWlmKCFBKHYpKXtwPSEwLGcodCxuKTticmVha30hcCYmbC5jbGFzcyYmZXQobC5jbGFzcyl9fWVsc2UgZS5kYXRhIT09dC50ZXh0JiYoZS5kYXRhPXQudGV4dCk7cmV0dXJuITB9cmV0dXJuIGZ1bmN0aW9uKGUsdCxuLHMpe2lmKCFyKHQpKXt2YXIgbCxjPSExLGY9W107aWYocihlKSljPSEwLGQodCxmKTtlbHNle3ZhciBoPWkoZS5ub2RlVHlwZSk7aWYoIWgmJlluKGUsdCkpayhlLHQsZixudWxsLG51bGwscyk7ZWxzZXtpZihoKXtpZigxPT09ZS5ub2RlVHlwZSYmZS5oYXNBdHRyaWJ1dGUoSSkmJihlLnJlbW92ZUF0dHJpYnV0ZShJKSxuPSEwKSxvKG4pJiZFKGUsdCxmKSlyZXR1cm4gUyh0LGYsITApLGU7bD1lLGU9bmV3IGhlKHUudGFnTmFtZShsKS50b0xvd2VyQ2FzZSgpLHt9LFtdLHZvaWQgMCxsKX12YXIgcD1lLmVsbSxtPXUucGFyZW50Tm9kZShwKTtpZihkKHQsZixwLl9sZWF2ZUNiP251bGw6bSx1Lm5leHRTaWJsaW5nKHApKSxpKHQucGFyZW50KSlmb3IodmFyIGc9dC5wYXJlbnQseT12KHQpO2c7KXtmb3IodmFyIF89MDtfPGEuZGVzdHJveS5sZW5ndGg7KytfKWEuZGVzdHJveVtfXShnKTtpZihnLmVsbT10LmVsbSx5KXtmb3IodmFyIEM9MDtDPGEuY3JlYXRlLmxlbmd0aDsrK0MpYS5jcmVhdGVbQ10oVW4sZyk7dmFyIHc9Zy5kYXRhLmhvb2suaW5zZXJ0O2lmKHcubWVyZ2VkKWZvcih2YXIgQT0xO0E8dy5mbnMubGVuZ3RoO0ErKyl3LmZuc1tBXSgpfWVsc2UgcW4oZyk7Zz1nLnBhcmVudH1pKG0pP3goMCxbZV0sMCwwKTppKGUudGFnKSYmYihlKX19cmV0dXJuIFModCxmLGMpLHQuZWxtfWkoZSkmJmIoZSl9fSh7bm9kZU9wczp6bixtb2R1bGVzOltzcixwcixWcixXcix0aSxxP3tjcmVhdGU6RWksYWN0aXZhdGU6RWkscmVtb3ZlOmZ1bmN0aW9uKGUsdCl7ITAhPT1lLmRhdGEuc2hvdz9raShlLHQpOnQoKX19Ont9XS5jb25jYXQobnIpfSk7SiYmZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigic2VsZWN0aW9uY2hhbmdlIixmdW5jdGlvbigpe3ZhciBlPWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7ZSYmZS52bW9kZWwmJklpKGUsImlucHV0Iil9KTt2YXIgT2k9e2luc2VydGVkOmZ1bmN0aW9uKGUsdCxuLHIpeyJzZWxlY3QiPT09bi50YWc/KHIuZWxtJiYhci5lbG0uX3ZPcHRpb25zP290KG4sInBvc3RwYXRjaCIsZnVuY3Rpb24oKXtPaS5jb21wb25lbnRVcGRhdGVkKGUsdCxuKX0pOkRpKGUsdCxuLmNvbnRleHQpLGUuX3ZPcHRpb25zPVtdLm1hcC5jYWxsKGUub3B0aW9ucyxQaSkpOigidGV4dGFyZWEiPT09bi50YWd8fFZuKGUudHlwZSkpJiYoZS5fdk1vZGlmaWVycz10Lm1vZGlmaWVycyx0Lm1vZGlmaWVycy5sYXp5fHwoZS5hZGRFdmVudExpc3RlbmVyKCJjb21wb3NpdGlvbnN0YXJ0IixOaSksZS5hZGRFdmVudExpc3RlbmVyKCJjb21wb3NpdGlvbmVuZCIsRmkpLGUuYWRkRXZlbnRMaXN0ZW5lcigiY2hhbmdlIixGaSksSiYmKGUudm1vZGVsPSEwKSkpfSxjb21wb25lbnRVcGRhdGVkOmZ1bmN0aW9uKGUsdCxuKXtpZigic2VsZWN0Ij09PW4udGFnKXtEaShlLHQsbi5jb250ZXh0KTt2YXIgcj1lLl92T3B0aW9ucyxpPWUuX3ZPcHRpb25zPVtdLm1hcC5jYWxsKGUub3B0aW9ucyxQaSk7aWYoaS5zb21lKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIVAoZSxyW3RdKX0pKShlLm11bHRpcGxlP3QudmFsdWUuc29tZShmdW5jdGlvbihlKXtyZXR1cm4gVGkoZSxpKX0pOnQudmFsdWUhPT10Lm9sZFZhbHVlJiZUaSh0LnZhbHVlLGkpKSYmSWkoZSwiY2hhbmdlIil9fX07ZnVuY3Rpb24gRGkoZSx0LG4peyRpKGUsdCxuKSwoR3x8WCkmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXskaShlLHQsbil9LDApfWZ1bmN0aW9uICRpKGUsdCxuKXt2YXIgcj10LnZhbHVlLGk9ZS5tdWx0aXBsZTtpZighaXx8QXJyYXkuaXNBcnJheShyKSl7Zm9yKHZhciBvLHMsYT0wLGw9ZS5vcHRpb25zLmxlbmd0aDthPGw7YSsrKWlmKHM9ZS5vcHRpb25zW2FdLGkpbz1OKHIsUGkocykpPi0xLHMuc2VsZWN0ZWQhPT1vJiYocy5zZWxlY3RlZD1vKTtlbHNlIGlmKFAoUGkocykscikpcmV0dXJuIHZvaWQoZS5zZWxlY3RlZEluZGV4IT09YSYmKGUuc2VsZWN0ZWRJbmRleD1hKSk7aXx8KGUuc2VsZWN0ZWRJbmRleD0tMSl9fWZ1bmN0aW9uIFRpKGUsdCl7cmV0dXJuIHQuZXZlcnkoZnVuY3Rpb24odCl7cmV0dXJuIVAodCxlKX0pfWZ1bmN0aW9uIFBpKGUpe3JldHVybiJfdmFsdWUiaW4gZT9lLl92YWx1ZTplLnZhbHVlfWZ1bmN0aW9uIE5pKGUpe2UudGFyZ2V0LmNvbXBvc2luZz0hMH1mdW5jdGlvbiBGaShlKXtlLnRhcmdldC5jb21wb3NpbmcmJihlLnRhcmdldC5jb21wb3Npbmc9ITEsSWkoZS50YXJnZXQsImlucHV0IikpfWZ1bmN0aW9uIElpKGUsdCl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRXZlbnQoIkhUTUxFdmVudHMiKTtuLmluaXRFdmVudCh0LCEwLCEwKSxlLmRpc3BhdGNoRXZlbnQobil9ZnVuY3Rpb24gUmkoZSl7cmV0dXJuIWUuY29tcG9uZW50SW5zdGFuY2V8fGUuZGF0YSYmZS5kYXRhLnRyYW5zaXRpb24/ZTpSaShlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSl9dmFyIGppPXttb2RlbDpPaSxzaG93OntiaW5kOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10LnZhbHVlLGk9KG49UmkobikpLmRhdGEmJm4uZGF0YS50cmFuc2l0aW9uLG89ZS5fX3ZPcmlnaW5hbERpc3BsYXk9Im5vbmUiPT09ZS5zdHlsZS5kaXNwbGF5PyIiOmUuc3R5bGUuZGlzcGxheTtyJiZpPyhuLmRhdGEuc2hvdz0hMCx3aShuLGZ1bmN0aW9uKCl7ZS5zdHlsZS5kaXNwbGF5PW99KSk6ZS5zdHlsZS5kaXNwbGF5PXI/bzoibm9uZSJ9LHVwZGF0ZTpmdW5jdGlvbihlLHQsbil7dmFyIHI9dC52YWx1ZTshciE9IXQub2xkVmFsdWUmJigobj1SaShuKSkuZGF0YSYmbi5kYXRhLnRyYW5zaXRpb24/KG4uZGF0YS5zaG93PSEwLHI/d2kobixmdW5jdGlvbigpe2Uuc3R5bGUuZGlzcGxheT1lLl9fdk9yaWdpbmFsRGlzcGxheX0pOmtpKG4sZnVuY3Rpb24oKXtlLnN0eWxlLmRpc3BsYXk9Im5vbmUifSkpOmUuc3R5bGUuZGlzcGxheT1yP2UuX192T3JpZ2luYWxEaXNwbGF5OiJub25lIil9LHVuYmluZDpmdW5jdGlvbihlLHQsbixyLGkpe2l8fChlLnN0eWxlLmRpc3BsYXk9ZS5fX3ZPcmlnaW5hbERpc3BsYXkpfX19LEJpPXtuYW1lOlN0cmluZyxhcHBlYXI6Qm9vbGVhbixjc3M6Qm9vbGVhbixtb2RlOlN0cmluZyx0eXBlOlN0cmluZyxlbnRlckNsYXNzOlN0cmluZyxsZWF2ZUNsYXNzOlN0cmluZyxlbnRlclRvQ2xhc3M6U3RyaW5nLGxlYXZlVG9DbGFzczpTdHJpbmcsZW50ZXJBY3RpdmVDbGFzczpTdHJpbmcsbGVhdmVBY3RpdmVDbGFzczpTdHJpbmcsYXBwZWFyQ2xhc3M6U3RyaW5nLGFwcGVhckFjdGl2ZUNsYXNzOlN0cmluZyxhcHBlYXJUb0NsYXNzOlN0cmluZyxkdXJhdGlvbjpbTnVtYmVyLFN0cmluZyxPYmplY3RdfTtmdW5jdGlvbiBMaShlKXt2YXIgdD1lJiZlLmNvbXBvbmVudE9wdGlvbnM7cmV0dXJuIHQmJnQuQ3Rvci5vcHRpb25zLmFic3RyYWN0P0xpKGR0KHQuY2hpbGRyZW4pKTplfWZ1bmN0aW9uIFZpKGUpe3ZhciB0PXt9LG49ZS4kb3B0aW9ucztmb3IodmFyIHIgaW4gbi5wcm9wc0RhdGEpdFtyXT1lW3JdO3ZhciBpPW4uX3BhcmVudExpc3RlbmVycztmb3IodmFyIG8gaW4gaSl0W0MobyldPWlbb107cmV0dXJuIHR9ZnVuY3Rpb24gSGkoZSx0KXtpZigvXGQta2VlcC1hbGl2ZSQvLnRlc3QodC50YWcpKXJldHVybiBlKCJrZWVwLWFsaXZlIix7cHJvcHM6dC5jb21wb25lbnRPcHRpb25zLnByb3BzRGF0YX0pfXZhciB6aT1mdW5jdGlvbihlKXtyZXR1cm4gZS50YWd8fGN0KGUpfSxXaT1mdW5jdGlvbihlKXtyZXR1cm4ic2hvdyI9PT1lLm5hbWV9LHFpPXtuYW1lOiJ0cmFuc2l0aW9uIixwcm9wczpCaSxhYnN0cmFjdDohMCxyZW5kZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPXRoaXMuJHNsb3RzLmRlZmF1bHQ7aWYobiYmKG49bi5maWx0ZXIoemkpKS5sZW5ndGgpezA7dmFyIHI9dGhpcy5tb2RlOzA7dmFyIGk9blswXTtpZihmdW5jdGlvbihlKXtmb3IoO2U9ZS5wYXJlbnQ7KWlmKGUuZGF0YS50cmFuc2l0aW9uKXJldHVybiEwfSh0aGlzLiR2bm9kZSkpcmV0dXJuIGk7dmFyIG89TGkoaSk7aWYoIW8pcmV0dXJuIGk7aWYodGhpcy5fbGVhdmluZylyZXR1cm4gSGkoZSxpKTt2YXIgYT0iX190cmFuc2l0aW9uLSIrdGhpcy5fdWlkKyItIjtvLmtleT1udWxsPT1vLmtleT9vLmlzQ29tbWVudD9hKyJjb21tZW50IjphK28udGFnOnMoby5rZXkpPzA9PT1TdHJpbmcoby5rZXkpLmluZGV4T2YoYSk/by5rZXk6YStvLmtleTpvLmtleTt2YXIgbD0oby5kYXRhfHwoby5kYXRhPXt9KSkudHJhbnNpdGlvbj1WaSh0aGlzKSx1PXRoaXMuX3Zub2RlLGM9TGkodSk7aWYoby5kYXRhLmRpcmVjdGl2ZXMmJm8uZGF0YS5kaXJlY3RpdmVzLnNvbWUoV2kpJiYoby5kYXRhLnNob3c9ITApLGMmJmMuZGF0YSYmIWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQua2V5PT09ZS5rZXkmJnQudGFnPT09ZS50YWd9KG8sYykmJiFjdChjKSYmKCFjLmNvbXBvbmVudEluc3RhbmNlfHwhYy5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUuaXNDb21tZW50KSl7dmFyIGQ9Yy5kYXRhLnRyYW5zaXRpb249TSh7fSxsKTtpZigib3V0LWluIj09PXIpcmV0dXJuIHRoaXMuX2xlYXZpbmc9ITAsb3QoZCwiYWZ0ZXJMZWF2ZSIsZnVuY3Rpb24oKXt0Ll9sZWF2aW5nPSExLHQuJGZvcmNlVXBkYXRlKCl9KSxIaShlLGkpO2lmKCJpbi1vdXQiPT09cil7aWYoY3QobykpcmV0dXJuIHU7dmFyIGYsaD1mdW5jdGlvbigpe2YoKX07b3QobCwiYWZ0ZXJFbnRlciIsaCksb3QobCwiZW50ZXJDYW5jZWxsZWQiLGgpLG90KGQsImRlbGF5TGVhdmUiLGZ1bmN0aW9uKGUpe2Y9ZX0pfX1yZXR1cm4gaX19fSxVaT1NKHt0YWc6U3RyaW5nLG1vdmVDbGFzczpTdHJpbmd9LEJpKTtmdW5jdGlvbiBLaShlKXtlLmVsbS5fbW92ZUNiJiZlLmVsbS5fbW92ZUNiKCksZS5lbG0uX2VudGVyQ2ImJmUuZWxtLl9lbnRlckNiKCl9ZnVuY3Rpb24gWWkoZSl7ZS5kYXRhLm5ld1Bvcz1lLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKX1mdW5jdGlvbiBHaShlKXt2YXIgdD1lLmRhdGEucG9zLG49ZS5kYXRhLm5ld1BvcyxyPXQubGVmdC1uLmxlZnQsaT10LnRvcC1uLnRvcDtpZihyfHxpKXtlLmRhdGEubW92ZWQ9ITA7dmFyIG89ZS5lbG0uc3R5bGU7by50cmFuc2Zvcm09by5XZWJraXRUcmFuc2Zvcm09InRyYW5zbGF0ZSgiK3IrInB4LCIraSsicHgpIixvLnRyYW5zaXRpb25EdXJhdGlvbj0iMHMifX1kZWxldGUgVWkubW9kZTt2YXIgSmk9e1RyYW5zaXRpb246cWksVHJhbnNpdGlvbkdyb3VwOntwcm9wczpVaSxiZWZvcmVNb3VudDpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLl91cGRhdGU7dGhpcy5fdXBkYXRlPWZ1bmN0aW9uKG4scil7dmFyIGk9YnQoZSk7ZS5fX3BhdGNoX18oZS5fdm5vZGUsZS5rZXB0LCExLCEwKSxlLl92bm9kZT1lLmtlcHQsaSgpLHQuY2FsbChlLG4scil9fSxyZW5kZXI6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMudGFnfHx0aGlzLiR2bm9kZS5kYXRhLnRhZ3x8InNwYW4iLG49T2JqZWN0LmNyZWF0ZShudWxsKSxyPXRoaXMucHJldkNoaWxkcmVuPXRoaXMuY2hpbGRyZW4saT10aGlzLiRzbG90cy5kZWZhdWx0fHxbXSxvPXRoaXMuY2hpbGRyZW49W10scz1WaSh0aGlzKSxhPTA7YTxpLmxlbmd0aDthKyspe3ZhciBsPWlbYV07aWYobC50YWcpaWYobnVsbCE9bC5rZXkmJjAhPT1TdHJpbmcobC5rZXkpLmluZGV4T2YoIl9fdmxpc3QiKSlvLnB1c2gobCksbltsLmtleV09bCwobC5kYXRhfHwobC5kYXRhPXt9KSkudHJhbnNpdGlvbj1zO2Vsc2U7fWlmKHIpe2Zvcih2YXIgdT1bXSxjPVtdLGQ9MDtkPHIubGVuZ3RoO2QrKyl7dmFyIGY9cltkXTtmLmRhdGEudHJhbnNpdGlvbj1zLGYuZGF0YS5wb3M9Zi5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbltmLmtleV0/dS5wdXNoKGYpOmMucHVzaChmKX10aGlzLmtlcHQ9ZSh0LG51bGwsdSksdGhpcy5yZW1vdmVkPWN9cmV0dXJuIGUodCxudWxsLG8pfSx1cGRhdGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wcmV2Q2hpbGRyZW4sdD10aGlzLm1vdmVDbGFzc3x8KHRoaXMubmFtZXx8InYiKSsiLW1vdmUiO2UubGVuZ3RoJiZ0aGlzLmhhc01vdmUoZVswXS5lbG0sdCkmJihlLmZvckVhY2goS2kpLGUuZm9yRWFjaChZaSksZS5mb3JFYWNoKEdpKSx0aGlzLl9yZWZsb3c9ZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQsZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2lmKGUuZGF0YS5tb3ZlZCl7dmFyIG49ZS5lbG0scj1uLnN0eWxlO3ZpKG4sdCksci50cmFuc2Zvcm09ci5XZWJraXRUcmFuc2Zvcm09ci50cmFuc2l0aW9uRHVyYXRpb249IiIsbi5hZGRFdmVudExpc3RlbmVyKGRpLG4uX21vdmVDYj1mdW5jdGlvbiBlKHIpe3ImJnIudGFyZ2V0IT09bnx8ciYmIS90cmFuc2Zvcm0kLy50ZXN0KHIucHJvcGVydHlOYW1lKXx8KG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihkaSxlKSxuLl9tb3ZlQ2I9bnVsbCxnaShuLHQpKX0pfX0pKX0sbWV0aG9kczp7aGFzTW92ZTpmdW5jdGlvbihlLHQpe2lmKCFhaSlyZXR1cm4hMTtpZih0aGlzLl9oYXNNb3ZlKXJldHVybiB0aGlzLl9oYXNNb3ZlO3ZhciBuPWUuY2xvbmVOb2RlKCk7ZS5fdHJhbnNpdGlvbkNsYXNzZXMmJmUuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24oZSl7aWkobixlKX0pLHJpKG4sdCksbi5zdHlsZS5kaXNwbGF5PSJub25lIix0aGlzLiRlbC5hcHBlbmRDaGlsZChuKTt2YXIgcj1iaShuKTtyZXR1cm4gdGhpcy4kZWwucmVtb3ZlQ2hpbGQobiksdGhpcy5faGFzTW92ZT1yLmhhc1RyYW5zZm9ybX19fX07cG4uY29uZmlnLm11c3RVc2VQcm9wPWtuLHBuLmNvbmZpZy5pc1Jlc2VydmVkVGFnPWpuLHBuLmNvbmZpZy5pc1Jlc2VydmVkQXR0cj1Dbixwbi5jb25maWcuZ2V0VGFnTmFtZXNwYWNlPUJuLHBuLmNvbmZpZy5pc1Vua25vd25FbGVtZW50PWZ1bmN0aW9uKGUpe2lmKCFxKXJldHVybiEwO2lmKGpuKGUpKXJldHVybiExO2lmKGU9ZS50b0xvd2VyQ2FzZSgpLG51bGwhPUxuW2VdKXJldHVybiBMbltlXTt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KGUpO3JldHVybiBlLmluZGV4T2YoIi0iKT4tMT9MbltlXT10LmNvbnN0cnVjdG9yPT09d2luZG93LkhUTUxVbmtub3duRWxlbWVudHx8dC5jb25zdHJ1Y3Rvcj09PXdpbmRvdy5IVE1MRWxlbWVudDpMbltlXT0vSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KHQudG9TdHJpbmcoKSl9LE0ocG4ub3B0aW9ucy5kaXJlY3RpdmVzLGppKSxNKHBuLm9wdGlvbnMuY29tcG9uZW50cyxKaSkscG4ucHJvdG90eXBlLl9fcGF0Y2hfXz1xP01pOkQscG4ucHJvdG90eXBlLiRtb3VudD1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihlLHQsbil7cmV0dXJuIGUuJGVsPXQsZS4kb3B0aW9ucy5yZW5kZXJ8fChlLiRvcHRpb25zLnJlbmRlcj1tZSksd3QoZSwiYmVmb3JlTW91bnQiKSxuZXcgVHQoZSxmdW5jdGlvbigpe2UuX3VwZGF0ZShlLl9yZW5kZXIoKSxuKX0sRCx7YmVmb3JlOmZ1bmN0aW9uKCl7ZS5faXNNb3VudGVkJiYhZS5faXNEZXN0cm95ZWQmJnd0KGUsImJlZm9yZVVwZGF0ZSIpfX0sITApLG49ITEsbnVsbD09ZS4kdm5vZGUmJihlLl9pc01vdW50ZWQ9ITAsd3QoZSwibW91bnRlZCIpKSxlfSh0aGlzLGU9ZSYmcT9IbihlKTp2b2lkIDAsdCl9LHEmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXtCLmRldnRvb2xzJiZyZSYmcmUuZW1pdCgiaW5pdCIscG4pfSwwKTt2YXIgWGk9L1x7XHsoKD86Lnxccj9cbikrPylcfVx9L2csUWk9L1stLiorP14ke30oKXxbXF1cL1xcXS9nLFppPWIoZnVuY3Rpb24oZSl7dmFyIHQ9ZVswXS5yZXBsYWNlKFFpLCJcXCQmIiksbj1lWzFdLnJlcGxhY2UoUWksIlxcJCYiKTtyZXR1cm4gbmV3IFJlZ0V4cCh0KyIoKD86LnxcXG4pKz8pIituLCJnIil9KTtmdW5jdGlvbiBlbyhlLHQpe3ZhciBuPXQ/WmkodCk6WGk7aWYobi50ZXN0KGUpKXtmb3IodmFyIHIsaSxvLHM9W10sYT1bXSxsPW4ubGFzdEluZGV4PTA7cj1uLmV4ZWMoZSk7KXsoaT1yLmluZGV4KT5sJiYoYS5wdXNoKG89ZS5zbGljZShsLGkpKSxzLnB1c2goSlNPTi5zdHJpbmdpZnkobykpKTt2YXIgdT12cihyWzFdLnRyaW0oKSk7cy5wdXNoKCJfcygiK3UrIikiKSxhLnB1c2goeyJAYmluZGluZyI6dX0pLGw9aStyWzBdLmxlbmd0aH1yZXR1cm4gbDxlLmxlbmd0aCYmKGEucHVzaChvPWUuc2xpY2UobCkpLHMucHVzaChKU09OLnN0cmluZ2lmeShvKSkpLHtleHByZXNzaW9uOnMuam9pbigiKyIpLHRva2VuczphfX19dmFyIHRvPXtzdGF0aWNLZXlzOlsic3RhdGljQ2xhc3MiXSx0cmFuc2Zvcm1Ob2RlOmZ1bmN0aW9uKGUsdCl7dC53YXJuO3ZhciBuPUFyKGUsImNsYXNzIik7biYmKGUuc3RhdGljQ2xhc3M9SlNPTi5zdHJpbmdpZnkobikpO3ZhciByPVNyKGUsImNsYXNzIiwhMSk7ciYmKGUuY2xhc3NCaW5kaW5nPXIpfSxnZW5EYXRhOmZ1bmN0aW9uKGUpe3ZhciB0PSIiO3JldHVybiBlLnN0YXRpY0NsYXNzJiYodCs9InN0YXRpY0NsYXNzOiIrZS5zdGF0aWNDbGFzcysiLCIpLGUuY2xhc3NCaW5kaW5nJiYodCs9ImNsYXNzOiIrZS5jbGFzc0JpbmRpbmcrIiwiKSx0fX07dmFyIG5vLHJvPXtzdGF0aWNLZXlzOlsic3RhdGljU3R5bGUiXSx0cmFuc2Zvcm1Ob2RlOmZ1bmN0aW9uKGUsdCl7dC53YXJuO3ZhciBuPUFyKGUsInN0eWxlIik7biYmKGUuc3RhdGljU3R5bGU9SlNPTi5zdHJpbmdpZnkocXIobikpKTt2YXIgcj1TcihlLCJzdHlsZSIsITEpO3ImJihlLnN0eWxlQmluZGluZz1yKX0sZ2VuRGF0YTpmdW5jdGlvbihlKXt2YXIgdD0iIjtyZXR1cm4gZS5zdGF0aWNTdHlsZSYmKHQrPSJzdGF0aWNTdHlsZToiK2Uuc3RhdGljU3R5bGUrIiwiKSxlLnN0eWxlQmluZGluZyYmKHQrPSJzdHlsZTooIitlLnN0eWxlQmluZGluZysiKSwiKSx0fX0saW89ZnVuY3Rpb24oZSl7cmV0dXJuKG5vPW5vfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSkuaW5uZXJIVE1MPWUsbm8udGV4dENvbnRlbnR9LG9vPXAoImFyZWEsYmFzZSxicixjb2wsZW1iZWQsZnJhbWUsaHIsaW1nLGlucHV0LGlzaW5kZXgsa2V5Z2VuLGxpbmssbWV0YSxwYXJhbSxzb3VyY2UsdHJhY2ssd2JyIiksc289cCgiY29sZ3JvdXAsZGQsZHQsbGksb3B0aW9ucyxwLHRkLHRmb290LHRoLHRoZWFkLHRyLHNvdXJjZSIpLGFvPXAoImFkZHJlc3MsYXJ0aWNsZSxhc2lkZSxiYXNlLGJsb2NrcXVvdGUsYm9keSxjYXB0aW9uLGNvbCxjb2xncm91cCxkZCxkZXRhaWxzLGRpYWxvZyxkaXYsZGwsZHQsZmllbGRzZXQsZmlnY2FwdGlvbixmaWd1cmUsZm9vdGVyLGZvcm0saDEsaDIsaDMsaDQsaDUsaDYsaGVhZCxoZWFkZXIsaGdyb3VwLGhyLGh0bWwsbGVnZW5kLGxpLG1lbnVpdGVtLG1ldGEsb3B0Z3JvdXAsb3B0aW9uLHBhcmFtLHJwLHJ0LHNvdXJjZSxzdHlsZSxzdW1tYXJ5LHRib2R5LHRkLHRmb290LHRoLHRoZWFkLHRpdGxlLHRyLHRyYWNrIiksbG89L15ccyooW15ccyInPD5cLz1dKykoPzpccyooPSlccyooPzoiKFteIl0qKSIrfCcoW14nXSopJyt8KFteXHMiJz08PmBdKykpKT8vLHVvPSJbYS16QS1aX11bXFx3XFwtXFwuXSoiLGNvPSIoKD86Iit1bysiXFw6KT8iK3VvKyIpIixmbz1uZXcgUmVnRXhwKCJePCIrY28pLGhvPS9eXHMqKFwvPyk+Lyxwbz1uZXcgUmVnRXhwKCJePFxcLyIrY28rIltePl0qPiIpLG1vPS9ePCFET0NUWVBFIFtePl0rPi9pLHZvPS9ePCFcLS0vLGdvPS9ePCFcWy8seW89cCgic2NyaXB0LHN0eWxlLHRleHRhcmVhIiwhMCksX289e30sYm89eyImbHQ7IjoiPCIsIiZndDsiOiI+IiwiJnF1b3Q7IjonIicsIiZhbXA7IjoiJiIsIiYjMTA7IjoiXG4iLCImIzk7IjoiXHQifSx4bz0vJig/Omx0fGd0fHF1b3R8YW1wKTsvZyxDbz0vJig/Omx0fGd0fHF1b3R8YW1wfCMxMHwjOSk7L2csd289cCgicHJlLHRleHRhcmVhIiwhMCksa289ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZSYmd28oZSkmJiJcbiI9PT10WzBdfTtmdW5jdGlvbiBTbyhlLHQpe3ZhciBuPXQ/Q286eG87cmV0dXJuIGUucmVwbGFjZShuLGZ1bmN0aW9uKGUpe3JldHVybiBib1tlXX0pfXZhciBBbyxFbyxNbyxPbyxEbywkbyxUbyxQbyxObz0vXkB8XnYtb246LyxGbz0vXnYtfF5AfF46LyxJbz0vKFtcc1xTXSo/KVxzKyg/OmlufG9mKVxzKyhbXHNcU10qKS8sUm89LywoW14sXH1cXV0qKSg/OiwoW14sXH1cXV0qKSk/JC8sam89L15cKHxcKSQvZyxCbz0vOiguKikkLyxMbz0vXjp8XnYtYmluZDovLFZvPS9cLlteLl0rL2csSG89Yihpbyk7ZnVuY3Rpb24gem8oZSx0LG4pe3JldHVybnt0eXBlOjEsdGFnOmUsYXR0cnNMaXN0OnQsYXR0cnNNYXA6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXt9LG49MCxyPWUubGVuZ3RoO248cjtuKyspdFtlW25dLm5hbWVdPWVbbl0udmFsdWU7cmV0dXJuIHR9KHQpLHBhcmVudDpuLGNoaWxkcmVuOltdfX1mdW5jdGlvbiBXbyhlLHQpe0FvPXQud2Fybnx8eXIsJG89dC5pc1ByZVRhZ3x8JCxUbz10Lm11c3RVc2VQcm9wfHwkLFBvPXQuZ2V0VGFnTmFtZXNwYWNlfHwkLE1vPV9yKHQubW9kdWxlcywidHJhbnNmb3JtTm9kZSIpLE9vPV9yKHQubW9kdWxlcywicHJlVHJhbnNmb3JtTm9kZSIpLERvPV9yKHQubW9kdWxlcywicG9zdFRyYW5zZm9ybU5vZGUiKSxFbz10LmRlbGltaXRlcnM7dmFyIG4scixpPVtdLG89ITEhPT10LnByZXNlcnZlV2hpdGVzcGFjZSxzPSExLGE9ITE7ZnVuY3Rpb24gbChlKXtlLnByZSYmKHM9ITEpLCRvKGUudGFnKSYmKGE9ITEpO2Zvcih2YXIgbj0wO248RG8ubGVuZ3RoO24rKylEb1tuXShlLHQpfXJldHVybiBmdW5jdGlvbihlLHQpe2Zvcih2YXIgbixyLGk9W10sbz10LmV4cGVjdEhUTUwscz10LmlzVW5hcnlUYWd8fCQsYT10LmNhbkJlTGVmdE9wZW5UYWd8fCQsbD0wO2U7KXtpZihuPWUsciYmeW8ocikpe3ZhciB1PTAsYz1yLnRvTG93ZXJDYXNlKCksZD1fb1tjXXx8KF9vW2NdPW5ldyBSZWdFeHAoIihbXFxzXFxTXSo/KSg8LyIrYysiW14+XSo+KSIsImkiKSksZj1lLnJlcGxhY2UoZCxmdW5jdGlvbihlLG4scil7cmV0dXJuIHU9ci5sZW5ndGgseW8oYyl8fCJub3NjcmlwdCI9PT1jfHwobj1uLnJlcGxhY2UoLzwhXC0tKFtcc1xTXSo/KS0tPi9nLCIkMSIpLnJlcGxhY2UoLzwhXFtDREFUQVxbKFtcc1xTXSo/KV1dPi9nLCIkMSIpKSxrbyhjLG4pJiYobj1uLnNsaWNlKDEpKSx0LmNoYXJzJiZ0LmNoYXJzKG4pLCIifSk7bCs9ZS5sZW5ndGgtZi5sZW5ndGgsZT1mLEEoYyxsLXUsbCl9ZWxzZXt2YXIgaD1lLmluZGV4T2YoIjwiKTtpZigwPT09aCl7aWYodm8udGVzdChlKSl7dmFyIHA9ZS5pbmRleE9mKCItLVx4M2UiKTtpZihwPj0wKXt0LnNob3VsZEtlZXBDb21tZW50JiZ0LmNvbW1lbnQoZS5zdWJzdHJpbmcoNCxwKSksdyhwKzMpO2NvbnRpbnVlfX1pZihnby50ZXN0KGUpKXt2YXIgbT1lLmluZGV4T2YoIl0+Iik7aWYobT49MCl7dyhtKzIpO2NvbnRpbnVlfX12YXIgdj1lLm1hdGNoKG1vKTtpZih2KXt3KHZbMF0ubGVuZ3RoKTtjb250aW51ZX12YXIgZz1lLm1hdGNoKHBvKTtpZihnKXt2YXIgeT1sO3coZ1swXS5sZW5ndGgpLEEoZ1sxXSx5LGwpO2NvbnRpbnVlfXZhciBfPWsoKTtpZihfKXtTKF8pLGtvKF8udGFnTmFtZSxlKSYmdygxKTtjb250aW51ZX19dmFyIGI9dm9pZCAwLHg9dm9pZCAwLEM9dm9pZCAwO2lmKGg+PTApe2Zvcih4PWUuc2xpY2UoaCk7IShwby50ZXN0KHgpfHxmby50ZXN0KHgpfHx2by50ZXN0KHgpfHxnby50ZXN0KHgpfHwoQz14LmluZGV4T2YoIjwiLDEpKTwwKTspaCs9Qyx4PWUuc2xpY2UoaCk7Yj1lLnN1YnN0cmluZygwLGgpLHcoaCl9aDwwJiYoYj1lLGU9IiIpLHQuY2hhcnMmJmImJnQuY2hhcnMoYil9aWYoZT09PW4pe3QuY2hhcnMmJnQuY2hhcnMoZSk7YnJlYWt9fWZ1bmN0aW9uIHcodCl7bCs9dCxlPWUuc3Vic3RyaW5nKHQpfWZ1bmN0aW9uIGsoKXt2YXIgdD1lLm1hdGNoKGZvKTtpZih0KXt2YXIgbixyLGk9e3RhZ05hbWU6dFsxXSxhdHRyczpbXSxzdGFydDpsfTtmb3Iodyh0WzBdLmxlbmd0aCk7IShuPWUubWF0Y2goaG8pKSYmKHI9ZS5tYXRjaChsbykpOyl3KHJbMF0ubGVuZ3RoKSxpLmF0dHJzLnB1c2gocik7aWYobilyZXR1cm4gaS51bmFyeVNsYXNoPW5bMV0sdyhuWzBdLmxlbmd0aCksaS5lbmQ9bCxpfX1mdW5jdGlvbiBTKGUpe3ZhciBuPWUudGFnTmFtZSxsPWUudW5hcnlTbGFzaDtvJiYoInAiPT09ciYmYW8obikmJkEociksYShuKSYmcj09PW4mJkEobikpO2Zvcih2YXIgdT1zKG4pfHwhIWwsYz1lLmF0dHJzLmxlbmd0aCxkPW5ldyBBcnJheShjKSxmPTA7ZjxjO2YrKyl7dmFyIGg9ZS5hdHRyc1tmXSxwPWhbM118fGhbNF18fGhbNV18fCIiLG09ImEiPT09biYmImhyZWYiPT09aFsxXT90LnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZjp0LnNob3VsZERlY29kZU5ld2xpbmVzO2RbZl09e25hbWU6aFsxXSx2YWx1ZTpTbyhwLG0pfX11fHwoaS5wdXNoKHt0YWc6bixsb3dlckNhc2VkVGFnOm4udG9Mb3dlckNhc2UoKSxhdHRyczpkfSkscj1uKSx0LnN0YXJ0JiZ0LnN0YXJ0KG4sZCx1LGUuc3RhcnQsZS5lbmQpfWZ1bmN0aW9uIEEoZSxuLG8pe3ZhciBzLGE7aWYobnVsbD09biYmKG49bCksbnVsbD09byYmKG89bCksZSlmb3IoYT1lLnRvTG93ZXJDYXNlKCkscz1pLmxlbmd0aC0xO3M+PTAmJmlbc10ubG93ZXJDYXNlZFRhZyE9PWE7cy0tKTtlbHNlIHM9MDtpZihzPj0wKXtmb3IodmFyIHU9aS5sZW5ndGgtMTt1Pj1zO3UtLSl0LmVuZCYmdC5lbmQoaVt1XS50YWcsbixvKTtpLmxlbmd0aD1zLHI9cyYmaVtzLTFdLnRhZ31lbHNlImJyIj09PWE/dC5zdGFydCYmdC5zdGFydChlLFtdLCEwLG4sbyk6InAiPT09YSYmKHQuc3RhcnQmJnQuc3RhcnQoZSxbXSwhMSxuLG8pLHQuZW5kJiZ0LmVuZChlLG4sbykpfUEoKX0oZSx7d2FybjpBbyxleHBlY3RIVE1MOnQuZXhwZWN0SFRNTCxpc1VuYXJ5VGFnOnQuaXNVbmFyeVRhZyxjYW5CZUxlZnRPcGVuVGFnOnQuY2FuQmVMZWZ0T3BlblRhZyxzaG91bGREZWNvZGVOZXdsaW5lczp0LnNob3VsZERlY29kZU5ld2xpbmVzLHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZjp0LnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZixzaG91bGRLZWVwQ29tbWVudDp0LmNvbW1lbnRzLHN0YXJ0OmZ1bmN0aW9uKGUsbyx1KXt2YXIgYz1yJiZyLm5zfHxQbyhlKTtHJiYic3ZnIj09PWMmJihvPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07R28udGVzdChyLm5hbWUpfHwoci5uYW1lPXIubmFtZS5yZXBsYWNlKEpvLCIiKSx0LnB1c2gocikpfXJldHVybiB0fShvKSk7dmFyIGQsZj16byhlLG8scik7YyYmKGYubnM9YyksInN0eWxlIiE9PShkPWYpLnRhZyYmKCJzY3JpcHQiIT09ZC50YWd8fGQuYXR0cnNNYXAudHlwZSYmInRleHQvamF2YXNjcmlwdCIhPT1kLmF0dHJzTWFwLnR5cGUpfHxuZSgpfHwoZi5mb3JiaWRkZW49ITApO2Zvcih2YXIgaD0wO2g8T28ubGVuZ3RoO2grKylmPU9vW2hdKGYsdCl8fGY7ZnVuY3Rpb24gcChlKXswfWlmKHN8fCghZnVuY3Rpb24oZSl7bnVsbCE9QXIoZSwidi1wcmUiKSYmKGUucHJlPSEwKX0oZiksZi5wcmUmJihzPSEwKSksJG8oZi50YWcpJiYoYT0hMCkscz9mdW5jdGlvbihlKXt2YXIgdD1lLmF0dHJzTGlzdC5sZW5ndGg7aWYodClmb3IodmFyIG49ZS5hdHRycz1uZXcgQXJyYXkodCkscj0wO3I8dDtyKyspbltyXT17bmFtZTplLmF0dHJzTGlzdFtyXS5uYW1lLHZhbHVlOkpTT04uc3RyaW5naWZ5KGUuYXR0cnNMaXN0W3JdLnZhbHVlKX07ZWxzZSBlLnByZXx8KGUucGxhaW49ITApfShmKTpmLnByb2Nlc3NlZHx8KFVvKGYpLGZ1bmN0aW9uKGUpe3ZhciB0PUFyKGUsInYtaWYiKTtpZih0KWUuaWY9dCxLbyhlLHtleHA6dCxibG9jazplfSk7ZWxzZXtudWxsIT1BcihlLCJ2LWVsc2UiKSYmKGUuZWxzZT0hMCk7dmFyIG49QXIoZSwidi1lbHNlLWlmIik7biYmKGUuZWxzZWlmPW4pfX0oZiksZnVuY3Rpb24oZSl7bnVsbCE9QXIoZSwidi1vbmNlIikmJihlLm9uY2U9ITApfShmKSxxbyhmLHQpKSxuP2kubGVuZ3RofHxuLmlmJiYoZi5lbHNlaWZ8fGYuZWxzZSkmJihwKCksS28obix7ZXhwOmYuZWxzZWlmLGJsb2NrOmZ9KSk6KG49ZixwKCkpLHImJiFmLmZvcmJpZGRlbilpZihmLmVsc2VpZnx8Zi5lbHNlKSFmdW5jdGlvbihlLHQpe3ZhciBuPWZ1bmN0aW9uKGUpe3ZhciB0PWUubGVuZ3RoO2Zvcig7dC0tOyl7aWYoMT09PWVbdF0udHlwZSlyZXR1cm4gZVt0XTtlLnBvcCgpfX0odC5jaGlsZHJlbik7biYmbi5pZiYmS28obix7ZXhwOmUuZWxzZWlmLGJsb2NrOmV9KX0oZixyKTtlbHNlIGlmKGYuc2xvdFNjb3BlKXtyLnBsYWluPSExO3ZhciBtPWYuc2xvdFRhcmdldHx8JyJkZWZhdWx0Iic7KHIuc2NvcGVkU2xvdHN8fChyLnNjb3BlZFNsb3RzPXt9KSlbbV09Zn1lbHNlIHIuY2hpbGRyZW4ucHVzaChmKSxmLnBhcmVudD1yO3U/bChmKToocj1mLGkucHVzaChmKSl9LGVuZDpmdW5jdGlvbigpe3ZhciBlPWlbaS5sZW5ndGgtMV0sdD1lLmNoaWxkcmVuW2UuY2hpbGRyZW4ubGVuZ3RoLTFdO3QmJjM9PT10LnR5cGUmJiIgIj09PXQudGV4dCYmIWEmJmUuY2hpbGRyZW4ucG9wKCksaS5sZW5ndGgtPTEscj1pW2kubGVuZ3RoLTFdLGwoZSl9LGNoYXJzOmZ1bmN0aW9uKGUpe2lmKHImJighR3x8InRleHRhcmVhIiE9PXIudGFnfHxyLmF0dHJzTWFwLnBsYWNlaG9sZGVyIT09ZSkpe3ZhciB0LG4saT1yLmNoaWxkcmVuO2lmKGU9YXx8ZS50cmltKCk/InNjcmlwdCI9PT0odD1yKS50YWd8fCJzdHlsZSI9PT10LnRhZz9lOkhvKGUpOm8mJmkubGVuZ3RoPyIgIjoiIikhcyYmIiAiIT09ZSYmKG49ZW8oZSxFbykpP2kucHVzaCh7dHlwZToyLGV4cHJlc3Npb246bi5leHByZXNzaW9uLHRva2VuczpuLnRva2Vucyx0ZXh0OmV9KToiICI9PT1lJiZpLmxlbmd0aCYmIiAiPT09aVtpLmxlbmd0aC0xXS50ZXh0fHxpLnB1c2goe3R5cGU6Myx0ZXh0OmV9KX19LGNvbW1lbnQ6ZnVuY3Rpb24oZSl7ci5jaGlsZHJlbi5wdXNoKHt0eXBlOjMsdGV4dDplLGlzQ29tbWVudDohMH0pfX0pLG59ZnVuY3Rpb24gcW8oZSx0KXt2YXIgbixyOyFmdW5jdGlvbihlKXt2YXIgdD1TcihlLCJrZXkiKTtpZih0KXtlLmtleT10fX0oZSksZS5wbGFpbj0hZS5rZXkmJiFlLmF0dHJzTGlzdC5sZW5ndGgsKHI9U3Iobj1lLCJyZWYiKSkmJihuLnJlZj1yLG4ucmVmSW5Gb3I9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWU7dDspe2lmKHZvaWQgMCE9PXQuZm9yKXJldHVybiEwO3Q9dC5wYXJlbnR9cmV0dXJuITF9KG4pKSxmdW5jdGlvbihlKXtpZigic2xvdCI9PT1lLnRhZyllLnNsb3ROYW1lPVNyKGUsIm5hbWUiKTtlbHNle3ZhciB0OyJ0ZW1wbGF0ZSI9PT1lLnRhZz8odD1BcihlLCJzY29wZSIpLGUuc2xvdFNjb3BlPXR8fEFyKGUsInNsb3Qtc2NvcGUiKSk6KHQ9QXIoZSwic2xvdC1zY29wZSIpKSYmKGUuc2xvdFNjb3BlPXQpO3ZhciBuPVNyKGUsInNsb3QiKTtuJiYoZS5zbG90VGFyZ2V0PSciIic9PT1uPyciZGVmYXVsdCInOm4sInRlbXBsYXRlIj09PWUudGFnfHxlLnNsb3RTY29wZXx8eHIoZSwic2xvdCIsbikpfX0oZSksZnVuY3Rpb24oZSl7dmFyIHQ7KHQ9U3IoZSwiaXMiKSkmJihlLmNvbXBvbmVudD10KTtudWxsIT1BcihlLCJpbmxpbmUtdGVtcGxhdGUiKSYmKGUuaW5saW5lVGVtcGxhdGU9ITApfShlKTtmb3IodmFyIGk9MDtpPE1vLmxlbmd0aDtpKyspZT1Nb1tpXShlLHQpfHxlOyFmdW5jdGlvbihlKXt2YXIgdCxuLHIsaSxvLHMsYSxsPWUuYXR0cnNMaXN0O2Zvcih0PTAsbj1sLmxlbmd0aDt0PG47dCsrKXtpZihyPWk9bFt0XS5uYW1lLG89bFt0XS52YWx1ZSxGby50ZXN0KHIpKWlmKGUuaGFzQmluZGluZ3M9ITAsKHM9WW8ocikpJiYocj1yLnJlcGxhY2UoVm8sIiIpKSxMby50ZXN0KHIpKXI9ci5yZXBsYWNlKExvLCIiKSxvPXZyKG8pLGE9ITEscyYmKHMucHJvcCYmKGE9ITAsImlubmVySHRtbCI9PT0ocj1DKHIpKSYmKHI9ImlubmVySFRNTCIpKSxzLmNhbWVsJiYocj1DKHIpKSxzLnN5bmMmJmtyKGUsInVwZGF0ZToiK0MociksTXIobywiJGV2ZW50IikpKSxhfHwhZS5jb21wb25lbnQmJlRvKGUudGFnLGUuYXR0cnNNYXAudHlwZSxyKT9icihlLHIsbyk6eHIoZSxyLG8pO2Vsc2UgaWYoTm8udGVzdChyKSlyPXIucmVwbGFjZShObywiIiksa3IoZSxyLG8scywhMSk7ZWxzZXt2YXIgdT0ocj1yLnJlcGxhY2UoRm8sIiIpKS5tYXRjaChCbyksYz11JiZ1WzFdO2MmJihyPXIuc2xpY2UoMCwtKGMubGVuZ3RoKzEpKSksd3IoZSxyLGksbyxjLHMpfWVsc2UgeHIoZSxyLEpTT04uc3RyaW5naWZ5KG8pKSwhZS5jb21wb25lbnQmJiJtdXRlZCI9PT1yJiZUbyhlLnRhZyxlLmF0dHJzTWFwLnR5cGUscikmJmJyKGUsciwidHJ1ZSIpfX0oZSl9ZnVuY3Rpb24gVW8oZSl7dmFyIHQ7aWYodD1BcihlLCJ2LWZvciIpKXt2YXIgbj1mdW5jdGlvbihlKXt2YXIgdD1lLm1hdGNoKElvKTtpZighdClyZXR1cm47dmFyIG49e307bi5mb3I9dFsyXS50cmltKCk7dmFyIHI9dFsxXS50cmltKCkucmVwbGFjZShqbywiIiksaT1yLm1hdGNoKFJvKTtpPyhuLmFsaWFzPXIucmVwbGFjZShSbywiIikudHJpbSgpLG4uaXRlcmF0b3IxPWlbMV0udHJpbSgpLGlbMl0mJihuLml0ZXJhdG9yMj1pWzJdLnRyaW0oKSkpOm4uYWxpYXM9cjtyZXR1cm4gbn0odCk7biYmTShlLG4pfX1mdW5jdGlvbiBLbyhlLHQpe2UuaWZDb25kaXRpb25zfHwoZS5pZkNvbmRpdGlvbnM9W10pLGUuaWZDb25kaXRpb25zLnB1c2godCl9ZnVuY3Rpb24gWW8oZSl7dmFyIHQ9ZS5tYXRjaChWbyk7aWYodCl7dmFyIG49e307cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbihlKXtuW2Uuc2xpY2UoMSldPSEwfSksbn19dmFyIEdvPS9eeG1sbnM6TlNcZCsvLEpvPS9eTlNcZCs6LztmdW5jdGlvbiBYbyhlKXtyZXR1cm4gem8oZS50YWcsZS5hdHRyc0xpc3Quc2xpY2UoKSxlLnBhcmVudCl9dmFyIFFvPVt0byxybyx7cHJlVHJhbnNmb3JtTm9kZTpmdW5jdGlvbihlLHQpe2lmKCJpbnB1dCI9PT1lLnRhZyl7dmFyIG4scj1lLmF0dHJzTWFwO2lmKCFyWyJ2LW1vZGVsIl0pcmV0dXJuO2lmKChyWyI6dHlwZSJdfHxyWyJ2LWJpbmQ6dHlwZSJdKSYmKG49U3IoZSwidHlwZSIpKSxyLnR5cGV8fG58fCFyWyJ2LWJpbmQiXXx8KG49IigiK3JbInYtYmluZCJdKyIpLnR5cGUiKSxuKXt2YXIgaT1BcihlLCJ2LWlmIiwhMCksbz1pPyImJigiK2krIikiOiIiLHM9bnVsbCE9QXIoZSwidi1lbHNlIiwhMCksYT1BcihlLCJ2LWVsc2UtaWYiLCEwKSxsPVhvKGUpO1VvKGwpLENyKGwsInR5cGUiLCJjaGVja2JveCIpLHFvKGwsdCksbC5wcm9jZXNzZWQ9ITAsbC5pZj0iKCIrbisiKT09PSdjaGVja2JveCciK28sS28obCx7ZXhwOmwuaWYsYmxvY2s6bH0pO3ZhciB1PVhvKGUpO0FyKHUsInYtZm9yIiwhMCksQ3IodSwidHlwZSIsInJhZGlvIikscW8odSx0KSxLbyhsLHtleHA6IigiK24rIik9PT0ncmFkaW8nIitvLGJsb2NrOnV9KTt2YXIgYz1YbyhlKTtyZXR1cm4gQXIoYywidi1mb3IiLCEwKSxDcihjLCI6dHlwZSIsbikscW8oYyx0KSxLbyhsLHtleHA6aSxibG9jazpjfSkscz9sLmVsc2U9ITA6YSYmKGwuZWxzZWlmPWEpLGx9fX19XTt2YXIgWm8sZXMsdHM9e2V4cGVjdEhUTUw6ITAsbW9kdWxlczpRbyxkaXJlY3RpdmVzOnttb2RlbDpmdW5jdGlvbihlLHQsbil7bjt2YXIgcj10LnZhbHVlLGk9dC5tb2RpZmllcnMsbz1lLnRhZyxzPWUuYXR0cnNNYXAudHlwZTtpZihlLmNvbXBvbmVudClyZXR1cm4gRXIoZSxyLGkpLCExO2lmKCJzZWxlY3QiPT09bykhZnVuY3Rpb24oZSx0LG4pe3ZhciByPSd2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsZnVuY3Rpb24obyl7cmV0dXJuIG8uc2VsZWN0ZWR9KS5tYXAoZnVuY3Rpb24obyl7dmFyIHZhbCA9ICJfdmFsdWUiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWU7cmV0dXJuICcrKG4mJm4ubnVtYmVyPyJfbih2YWwpIjoidmFsIikrIn0pOyI7cj1yKyIgIitNcih0LCIkZXZlbnQudGFyZ2V0Lm11bHRpcGxlID8gJCRzZWxlY3RlZFZhbCA6ICQkc2VsZWN0ZWRWYWxbMF0iKSxrcihlLCJjaGFuZ2UiLHIsbnVsbCwhMCl9KGUscixpKTtlbHNlIGlmKCJpbnB1dCI9PT1vJiYiY2hlY2tib3giPT09cykhZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4mJm4ubnVtYmVyLGk9U3IoZSwidmFsdWUiKXx8Im51bGwiLG89U3IoZSwidHJ1ZS12YWx1ZSIpfHwidHJ1ZSIscz1TcihlLCJmYWxzZS12YWx1ZSIpfHwiZmFsc2UiO2JyKGUsImNoZWNrZWQiLCJBcnJheS5pc0FycmF5KCIrdCsiKT9faSgiK3QrIiwiK2krIik+LTEiKygidHJ1ZSI9PT1vPyI6KCIrdCsiKSI6IjpfcSgiK3QrIiwiK28rIikiKSksa3IoZSwiY2hhbmdlIiwidmFyICQkYT0iK3QrIiwkJGVsPSRldmVudC50YXJnZXQsJCRjPSQkZWwuY2hlY2tlZD8oIitvKyIpOigiK3MrIik7aWYoQXJyYXkuaXNBcnJheSgkJGEpKXt2YXIgJCR2PSIrKHI/Il9uKCIraSsiKSI6aSkrIiwkJGk9X2koJCRhLCQkdik7aWYoJCRlbC5jaGVja2VkKXskJGk8MCYmKCIrTXIodCwiJCRhLmNvbmNhdChbJCR2XSkiKSsiKX1lbHNleyQkaT4tMSYmKCIrTXIodCwiJCRhLnNsaWNlKDAsJCRpKS5jb25jYXQoJCRhLnNsaWNlKCQkaSsxKSkiKSsiKX19ZWxzZXsiK01yKHQsIiQkYyIpKyJ9IixudWxsLCEwKX0oZSxyLGkpO2Vsc2UgaWYoImlucHV0Ij09PW8mJiJyYWRpbyI9PT1zKSFmdW5jdGlvbihlLHQsbil7dmFyIHI9biYmbi5udW1iZXIsaT1TcihlLCJ2YWx1ZSIpfHwibnVsbCI7YnIoZSwiY2hlY2tlZCIsIl9xKCIrdCsiLCIrKGk9cj8iX24oIitpKyIpIjppKSsiKSIpLGtyKGUsImNoYW5nZSIsTXIodCxpKSxudWxsLCEwKX0oZSxyLGkpO2Vsc2UgaWYoImlucHV0Ij09PW98fCJ0ZXh0YXJlYSI9PT1vKSFmdW5jdGlvbihlLHQsbil7dmFyIHI9ZS5hdHRyc01hcC50eXBlLGk9bnx8e30sbz1pLmxhenkscz1pLm51bWJlcixhPWkudHJpbSxsPSFvJiYicmFuZ2UiIT09cix1PW8/ImNoYW5nZSI6InJhbmdlIj09PXI/RnI6ImlucHV0IixjPSIkZXZlbnQudGFyZ2V0LnZhbHVlIjthJiYoYz0iJGV2ZW50LnRhcmdldC52YWx1ZS50cmltKCkiKSxzJiYoYz0iX24oIitjKyIpIik7dmFyIGQ9TXIodCxjKTtsJiYoZD0iaWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpcmV0dXJuOyIrZCksYnIoZSwidmFsdWUiLCIoIit0KyIpIiksa3IoZSx1LGQsbnVsbCwhMCksKGF8fHMpJiZrcihlLCJibHVyIiwiJGZvcmNlVXBkYXRlKCkiKX0oZSxyLGkpO2Vsc2UgaWYoIUIuaXNSZXNlcnZlZFRhZyhvKSlyZXR1cm4gRXIoZSxyLGkpLCExO3JldHVybiEwfSx0ZXh0OmZ1bmN0aW9uKGUsdCl7dC52YWx1ZSYmYnIoZSwidGV4dENvbnRlbnQiLCJfcygiK3QudmFsdWUrIikiKX0saHRtbDpmdW5jdGlvbihlLHQpe3QudmFsdWUmJmJyKGUsImlubmVySFRNTCIsIl9zKCIrdC52YWx1ZSsiKSIpfX0saXNQcmVUYWc6ZnVuY3Rpb24oZSl7cmV0dXJuInByZSI9PT1lfSxpc1VuYXJ5VGFnOm9vLG11c3RVc2VQcm9wOmtuLGNhbkJlTGVmdE9wZW5UYWc6c28saXNSZXNlcnZlZFRhZzpqbixnZXRUYWdOYW1lc3BhY2U6Qm4sc3RhdGljS2V5czpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZWR1Y2UoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5jb25jYXQodC5zdGF0aWNLZXlzfHxbXSl9LFtdKS5qb2luKCIsIil9KFFvKX0sbnM9YihmdW5jdGlvbihlKXtyZXR1cm4gcCgidHlwZSx0YWcsYXR0cnNMaXN0LGF0dHJzTWFwLHBsYWluLHBhcmVudCxjaGlsZHJlbixhdHRycyIrKGU/IiwiK2U6IiIpKX0pO2Z1bmN0aW9uIHJzKGUsdCl7ZSYmKFpvPW5zKHQuc3RhdGljS2V5c3x8IiIpLGVzPXQuaXNSZXNlcnZlZFRhZ3x8JCxmdW5jdGlvbiBlKHQpe3Quc3RhdGljPWZ1bmN0aW9uKGUpe2lmKDI9PT1lLnR5cGUpcmV0dXJuITE7aWYoMz09PWUudHlwZSlyZXR1cm4hMDtyZXR1cm4hKCFlLnByZSYmKGUuaGFzQmluZGluZ3N8fGUuaWZ8fGUuZm9yfHxtKGUudGFnKXx8IWVzKGUudGFnKXx8ZnVuY3Rpb24oZSl7Zm9yKDtlLnBhcmVudDspe2lmKCJ0ZW1wbGF0ZSIhPT0oZT1lLnBhcmVudCkudGFnKXJldHVybiExO2lmKGUuZm9yKXJldHVybiEwfXJldHVybiExfShlKXx8IU9iamVjdC5rZXlzKGUpLmV2ZXJ5KFpvKSkpfSh0KTtpZigxPT09dC50eXBlKXtpZighZXModC50YWcpJiYic2xvdCIhPT10LnRhZyYmbnVsbD09dC5hdHRyc01hcFsiaW5saW5lLXRlbXBsYXRlIl0pcmV0dXJuO2Zvcih2YXIgbj0wLHI9dC5jaGlsZHJlbi5sZW5ndGg7bjxyO24rKyl7dmFyIGk9dC5jaGlsZHJlbltuXTtlKGkpLGkuc3RhdGljfHwodC5zdGF0aWM9ITEpfWlmKHQuaWZDb25kaXRpb25zKWZvcih2YXIgbz0xLHM9dC5pZkNvbmRpdGlvbnMubGVuZ3RoO288cztvKyspe3ZhciBhPXQuaWZDb25kaXRpb25zW29dLmJsb2NrO2UoYSksYS5zdGF0aWN8fCh0LnN0YXRpYz0hMSl9fX0oZSksZnVuY3Rpb24gZSh0LG4pe2lmKDE9PT10LnR5cGUpe2lmKCh0LnN0YXRpY3x8dC5vbmNlKSYmKHQuc3RhdGljSW5Gb3I9biksdC5zdGF0aWMmJnQuY2hpbGRyZW4ubGVuZ3RoJiYoMSE9PXQuY2hpbGRyZW4ubGVuZ3RofHwzIT09dC5jaGlsZHJlblswXS50eXBlKSlyZXR1cm4gdm9pZCh0LnN0YXRpY1Jvb3Q9ITApO2lmKHQuc3RhdGljUm9vdD0hMSx0LmNoaWxkcmVuKWZvcih2YXIgcj0wLGk9dC5jaGlsZHJlbi5sZW5ndGg7cjxpO3IrKyllKHQuY2hpbGRyZW5bcl0sbnx8ISF0LmZvcik7aWYodC5pZkNvbmRpdGlvbnMpZm9yKHZhciBvPTEscz10LmlmQ29uZGl0aW9ucy5sZW5ndGg7bzxzO28rKyllKHQuaWZDb25kaXRpb25zW29dLmJsb2NrLG4pfX0oZSwhMSkpfXZhciBpcz0vXihbXHckX10rfFwoW14pXSo/XCkpXHMqPT58XmZ1bmN0aW9uXHMqXCgvLG9zPS9eW0EtWmEtel8kXVtcdyRdKig/OlwuW0EtWmEtel8kXVtcdyRdKnxcWydbXiddKj8nXXxcWyJbXiJdKj8iXXxcW1xkK118XFtbQS1aYS16XyRdW1x3JF0qXSkqJC8sc3M9e2VzYzoyNyx0YWI6OSxlbnRlcjoxMyxzcGFjZTozMix1cDozOCxsZWZ0OjM3LHJpZ2h0OjM5LGRvd246NDAsZGVsZXRlOls4LDQ2XX0sYXM9e2VzYzpbIkVzYyIsIkVzY2FwZSJdLHRhYjoiVGFiIixlbnRlcjoiRW50ZXIiLHNwYWNlOlsiICIsIlNwYWNlYmFyIl0sdXA6WyJVcCIsIkFycm93VXAiXSxsZWZ0OlsiTGVmdCIsIkFycm93TGVmdCJdLHJpZ2h0OlsiUmlnaHQiLCJBcnJvd1JpZ2h0Il0sZG93bjpbIkRvd24iLCJBcnJvd0Rvd24iXSxkZWxldGU6WyJCYWNrc3BhY2UiLCJEZWxldGUiLCJEZWwiXX0sbHM9ZnVuY3Rpb24oZSl7cmV0dXJuImlmKCIrZSsiKXJldHVybiBudWxsOyJ9LHVzPXtzdG9wOiIkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7IixwcmV2ZW50OiIkZXZlbnQucHJldmVudERlZmF1bHQoKTsiLHNlbGY6bHMoIiRldmVudC50YXJnZXQgIT09ICRldmVudC5jdXJyZW50VGFyZ2V0IiksY3RybDpscygiISRldmVudC5jdHJsS2V5Iiksc2hpZnQ6bHMoIiEkZXZlbnQuc2hpZnRLZXkiKSxhbHQ6bHMoIiEkZXZlbnQuYWx0S2V5IiksbWV0YTpscygiISRldmVudC5tZXRhS2V5IiksbGVmdDpscygiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDAiKSxtaWRkbGU6bHMoIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAxIikscmlnaHQ6bHMoIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAyIil9O2Z1bmN0aW9uIGNzKGUsdCl7dmFyIG49dD8ibmF0aXZlT246eyI6Im9uOnsiO2Zvcih2YXIgciBpbiBlKW4rPSciJytyKyciOicrZHMocixlW3JdKSsiLCI7cmV0dXJuIG4uc2xpY2UoMCwtMSkrIn0ifWZ1bmN0aW9uIGRzKGUsdCl7aWYoIXQpcmV0dXJuImZ1bmN0aW9uKCl7fSI7aWYoQXJyYXkuaXNBcnJheSh0KSlyZXR1cm4iWyIrdC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIGRzKGUsdCl9KS5qb2luKCIsIikrIl0iO3ZhciBuPW9zLnRlc3QodC52YWx1ZSkscj1pcy50ZXN0KHQudmFsdWUpO2lmKHQubW9kaWZpZXJzKXt2YXIgaT0iIixvPSIiLHM9W107Zm9yKHZhciBhIGluIHQubW9kaWZpZXJzKWlmKHVzW2FdKW8rPXVzW2FdLHNzW2FdJiZzLnB1c2goYSk7ZWxzZSBpZigiZXhhY3QiPT09YSl7dmFyIGw9dC5tb2RpZmllcnM7bys9bHMoWyJjdHJsIiwic2hpZnQiLCJhbHQiLCJtZXRhIl0uZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiFsW2VdfSkubWFwKGZ1bmN0aW9uKGUpe3JldHVybiIkZXZlbnQuIitlKyJLZXkifSkuam9pbigifHwiKSl9ZWxzZSBzLnB1c2goYSk7cmV0dXJuIHMubGVuZ3RoJiYoaSs9ZnVuY3Rpb24oZSl7cmV0dXJuImlmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmIitlLm1hcChmcykuam9pbigiJiYiKSsiKXJldHVybiBudWxsOyJ9KHMpKSxvJiYoaSs9byksImZ1bmN0aW9uKCRldmVudCl7IitpKyhuPyJyZXR1cm4gIit0LnZhbHVlKyIoJGV2ZW50KSI6cj8icmV0dXJuICgiK3QudmFsdWUrIikoJGV2ZW50KSI6dC52YWx1ZSkrIn0ifXJldHVybiBufHxyP3QudmFsdWU6ImZ1bmN0aW9uKCRldmVudCl7Iit0LnZhbHVlKyJ9In1mdW5jdGlvbiBmcyhlKXt2YXIgdD1wYXJzZUludChlLDEwKTtpZih0KXJldHVybiIkZXZlbnQua2V5Q29kZSE9PSIrdDt2YXIgbj1zc1tlXSxyPWFzW2VdO3JldHVybiJfaygkZXZlbnQua2V5Q29kZSwiK0pTT04uc3RyaW5naWZ5KGUpKyIsIitKU09OLnN0cmluZ2lmeShuKSsiLCRldmVudC5rZXksIitKU09OLnN0cmluZ2lmeShyKSsiKSJ9dmFyIGhzPXtvbjpmdW5jdGlvbihlLHQpe2Uud3JhcExpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm4iX2coIitlKyIsIit0LnZhbHVlKyIpIn19LGJpbmQ6ZnVuY3Rpb24oZSx0KXtlLndyYXBEYXRhPWZ1bmN0aW9uKG4pe3JldHVybiJfYigiK24rIiwnIitlLnRhZysiJywiK3QudmFsdWUrIiwiKyh0Lm1vZGlmaWVycyYmdC5tb2RpZmllcnMucHJvcD8idHJ1ZSI6ImZhbHNlIikrKHQubW9kaWZpZXJzJiZ0Lm1vZGlmaWVycy5zeW5jPyIsdHJ1ZSI6IiIpKyIpIn19LGNsb2FrOkR9LHBzPWZ1bmN0aW9uKGUpe3RoaXMub3B0aW9ucz1lLHRoaXMud2Fybj1lLndhcm58fHlyLHRoaXMudHJhbnNmb3Jtcz1fcihlLm1vZHVsZXMsInRyYW5zZm9ybUNvZGUiKSx0aGlzLmRhdGFHZW5GbnM9X3IoZS5tb2R1bGVzLCJnZW5EYXRhIiksdGhpcy5kaXJlY3RpdmVzPU0oTSh7fSxocyksZS5kaXJlY3RpdmVzKTt2YXIgdD1lLmlzUmVzZXJ2ZWRUYWd8fCQ7dGhpcy5tYXliZUNvbXBvbmVudD1mdW5jdGlvbihlKXtyZXR1cm4hKHQoZS50YWcpJiYhZS5jb21wb25lbnQpfSx0aGlzLm9uY2VJZD0wLHRoaXMuc3RhdGljUmVuZGVyRm5zPVtdLHRoaXMucHJlPSExfTtmdW5jdGlvbiBtcyhlLHQpe3ZhciBuPW5ldyBwcyh0KTtyZXR1cm57cmVuZGVyOiJ3aXRoKHRoaXMpe3JldHVybiAiKyhlP3ZzKGUsbik6J19jKCJkaXYiKScpKyJ9IixzdGF0aWNSZW5kZXJGbnM6bi5zdGF0aWNSZW5kZXJGbnN9fWZ1bmN0aW9uIHZzKGUsdCl7aWYoZS5wYXJlbnQmJihlLnByZT1lLnByZXx8ZS5wYXJlbnQucHJlKSxlLnN0YXRpY1Jvb3QmJiFlLnN0YXRpY1Byb2Nlc3NlZClyZXR1cm4gZ3MoZSx0KTtpZihlLm9uY2UmJiFlLm9uY2VQcm9jZXNzZWQpcmV0dXJuIHlzKGUsdCk7aWYoZS5mb3ImJiFlLmZvclByb2Nlc3NlZClyZXR1cm4gZnVuY3Rpb24oZSx0LG4scil7dmFyIGk9ZS5mb3Isbz1lLmFsaWFzLHM9ZS5pdGVyYXRvcjE/IiwiK2UuaXRlcmF0b3IxOiIiLGE9ZS5pdGVyYXRvcjI/IiwiK2UuaXRlcmF0b3IyOiIiOzA7cmV0dXJuIGUuZm9yUHJvY2Vzc2VkPSEwLChyfHwiX2wiKSsiKCgiK2krIiksZnVuY3Rpb24oIitvK3MrYSsiKXtyZXR1cm4gIisobnx8dnMpKGUsdCkrIn0pIn0oZSx0KTtpZihlLmlmJiYhZS5pZlByb2Nlc3NlZClyZXR1cm4gX3MoZSx0KTtpZigidGVtcGxhdGUiIT09ZS50YWd8fGUuc2xvdFRhcmdldHx8dC5wcmUpe2lmKCJzbG90Ij09PWUudGFnKXJldHVybiBmdW5jdGlvbihlLHQpe3ZhciBuPWUuc2xvdE5hbWV8fCciZGVmYXVsdCInLHI9Q3MoZSx0KSxpPSJfdCgiK24rKHI/IiwiK3I6IiIpLG89ZS5hdHRycyYmInsiK2UuYXR0cnMubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBDKGUubmFtZSkrIjoiK2UudmFsdWV9KS5qb2luKCIsIikrIn0iLHM9ZS5hdHRyc01hcFsidi1iaW5kIl07IW8mJiFzfHxyfHwoaSs9IixudWxsIik7byYmKGkrPSIsIitvKTtzJiYoaSs9KG8/IiI6IixudWxsIikrIiwiK3MpO3JldHVybiBpKyIpIn0oZSx0KTt2YXIgbjtpZihlLmNvbXBvbmVudCluPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10LmlubGluZVRlbXBsYXRlP251bGw6Q3ModCxuLCEwKTtyZXR1cm4iX2MoIitlKyIsIiticyh0LG4pKyhyPyIsIityOiIiKSsiKSJ9KGUuY29tcG9uZW50LGUsdCk7ZWxzZXt2YXIgcjsoIWUucGxhaW58fGUucHJlJiZ0Lm1heWJlQ29tcG9uZW50KGUpKSYmKHI9YnMoZSx0KSk7dmFyIGk9ZS5pbmxpbmVUZW1wbGF0ZT9udWxsOkNzKGUsdCwhMCk7bj0iX2MoJyIrZS50YWcrIiciKyhyPyIsIityOiIiKSsoaT8iLCIraToiIikrIikifWZvcih2YXIgbz0wO288dC50cmFuc2Zvcm1zLmxlbmd0aDtvKyspbj10LnRyYW5zZm9ybXNbb10oZSxuKTtyZXR1cm4gbn1yZXR1cm4gQ3MoZSx0KXx8InZvaWQgMCJ9ZnVuY3Rpb24gZ3MoZSx0KXtlLnN0YXRpY1Byb2Nlc3NlZD0hMDt2YXIgbj10LnByZTtyZXR1cm4gZS5wcmUmJih0LnByZT1lLnByZSksdC5zdGF0aWNSZW5kZXJGbnMucHVzaCgid2l0aCh0aGlzKXtyZXR1cm4gIit2cyhlLHQpKyJ9IiksdC5wcmU9biwiX20oIisodC5zdGF0aWNSZW5kZXJGbnMubGVuZ3RoLTEpKyhlLnN0YXRpY0luRm9yPyIsdHJ1ZSI6IiIpKyIpIn1mdW5jdGlvbiB5cyhlLHQpe2lmKGUub25jZVByb2Nlc3NlZD0hMCxlLmlmJiYhZS5pZlByb2Nlc3NlZClyZXR1cm4gX3MoZSx0KTtpZihlLnN0YXRpY0luRm9yKXtmb3IodmFyIG49IiIscj1lLnBhcmVudDtyOyl7aWYoci5mb3Ipe249ci5rZXk7YnJlYWt9cj1yLnBhcmVudH1yZXR1cm4gbj8iX28oIit2cyhlLHQpKyIsIit0Lm9uY2VJZCsrKyIsIituKyIpIjp2cyhlLHQpfXJldHVybiBncyhlLHQpfWZ1bmN0aW9uIF9zKGUsdCxuLHIpe3JldHVybiBlLmlmUHJvY2Vzc2VkPSEwLGZ1bmN0aW9uIGUodCxuLHIsaSl7aWYoIXQubGVuZ3RoKXJldHVybiBpfHwiX2UoKSI7dmFyIG89dC5zaGlmdCgpO3JldHVybiBvLmV4cD8iKCIrby5leHArIik/IitzKG8uYmxvY2spKyI6IitlKHQsbixyLGkpOiIiK3Moby5ibG9jayk7ZnVuY3Rpb24gcyhlKXtyZXR1cm4gcj9yKGUsbik6ZS5vbmNlP3lzKGUsbik6dnMoZSxuKX19KGUuaWZDb25kaXRpb25zLnNsaWNlKCksdCxuLHIpfWZ1bmN0aW9uIGJzKGUsdCl7dmFyIG49InsiLHI9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmRpcmVjdGl2ZXM7aWYoIW4pcmV0dXJuO3ZhciByLGksbyxzLGE9ImRpcmVjdGl2ZXM6WyIsbD0hMTtmb3Iocj0wLGk9bi5sZW5ndGg7cjxpO3IrKyl7bz1uW3JdLHM9ITA7dmFyIHU9dC5kaXJlY3RpdmVzW28ubmFtZV07dSYmKHM9ISF1KGUsbyx0Lndhcm4pKSxzJiYobD0hMCxhKz0ne25hbWU6Iicrby5uYW1lKyciLHJhd05hbWU6Iicrby5yYXdOYW1lKyciJysoby52YWx1ZT8iLHZhbHVlOigiK28udmFsdWUrIiksZXhwcmVzc2lvbjoiK0pTT04uc3RyaW5naWZ5KG8udmFsdWUpOiIiKSsoby5hcmc/Jyxhcmc6Iicrby5hcmcrJyInOiIiKSsoby5tb2RpZmllcnM/Iixtb2RpZmllcnM6IitKU09OLnN0cmluZ2lmeShvLm1vZGlmaWVycyk6IiIpKyJ9LCIpfWlmKGwpcmV0dXJuIGEuc2xpY2UoMCwtMSkrIl0ifShlLHQpO3ImJihuKz1yKyIsIiksZS5rZXkmJihuKz0ia2V5OiIrZS5rZXkrIiwiKSxlLnJlZiYmKG4rPSJyZWY6IitlLnJlZisiLCIpLGUucmVmSW5Gb3ImJihuKz0icmVmSW5Gb3I6dHJ1ZSwiKSxlLnByZSYmKG4rPSJwcmU6dHJ1ZSwiKSxlLmNvbXBvbmVudCYmKG4rPSd0YWc6IicrZS50YWcrJyIsJyk7Zm9yKHZhciBpPTA7aTx0LmRhdGFHZW5GbnMubGVuZ3RoO2krKyluKz10LmRhdGFHZW5GbnNbaV0oZSk7aWYoZS5hdHRycyYmKG4rPSJhdHRyczp7IitTcyhlLmF0dHJzKSsifSwiKSxlLnByb3BzJiYobis9ImRvbVByb3BzOnsiK1NzKGUucHJvcHMpKyJ9LCIpLGUuZXZlbnRzJiYobis9Y3MoZS5ldmVudHMsITEpKyIsIiksZS5uYXRpdmVFdmVudHMmJihuKz1jcyhlLm5hdGl2ZUV2ZW50cywhMCkrIiwiKSxlLnNsb3RUYXJnZXQmJiFlLnNsb3RTY29wZSYmKG4rPSJzbG90OiIrZS5zbG90VGFyZ2V0KyIsIiksZS5zY29wZWRTbG90cyYmKG4rPWZ1bmN0aW9uKGUsdCl7cmV0dXJuInNjb3BlZFNsb3RzOl91KFsiK09iamVjdC5rZXlzKGUpLm1hcChmdW5jdGlvbihuKXtyZXR1cm4geHMobixlW25dLHQpfSkuam9pbigiLCIpKyJdKSJ9KGUuc2NvcGVkU2xvdHMsdCkrIiwiKSxlLm1vZGVsJiYobis9Im1vZGVsOnt2YWx1ZToiK2UubW9kZWwudmFsdWUrIixjYWxsYmFjazoiK2UubW9kZWwuY2FsbGJhY2srIixleHByZXNzaW9uOiIrZS5tb2RlbC5leHByZXNzaW9uKyJ9LCIpLGUuaW5saW5lVGVtcGxhdGUpe3ZhciBvPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jaGlsZHJlblswXTswO2lmKDE9PT1uLnR5cGUpe3ZhciByPW1zKG4sdC5vcHRpb25zKTtyZXR1cm4iaW5saW5lVGVtcGxhdGU6e3JlbmRlcjpmdW5jdGlvbigpeyIrci5yZW5kZXIrIn0sc3RhdGljUmVuZGVyRm5zOlsiK3Iuc3RhdGljUmVuZGVyRm5zLm1hcChmdW5jdGlvbihlKXtyZXR1cm4iZnVuY3Rpb24oKXsiK2UrIn0ifSkuam9pbigiLCIpKyJdfSJ9fShlLHQpO28mJihuKz1vKyIsIil9cmV0dXJuIG49bi5yZXBsYWNlKC8sJC8sIiIpKyJ9IixlLndyYXBEYXRhJiYobj1lLndyYXBEYXRhKG4pKSxlLndyYXBMaXN0ZW5lcnMmJihuPWUud3JhcExpc3RlbmVycyhuKSksbn1mdW5jdGlvbiB4cyhlLHQsbil7cmV0dXJuIHQuZm9yJiYhdC5mb3JQcm9jZXNzZWQ/ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXQuZm9yLGk9dC5hbGlhcyxvPXQuaXRlcmF0b3IxPyIsIit0Lml0ZXJhdG9yMToiIixzPXQuaXRlcmF0b3IyPyIsIit0Lml0ZXJhdG9yMjoiIjtyZXR1cm4gdC5mb3JQcm9jZXNzZWQ9ITAsIl9sKCgiK3IrIiksZnVuY3Rpb24oIitpK28rcysiKXtyZXR1cm4gIit4cyhlLHQsbikrIn0pIn0oZSx0LG4pOiJ7a2V5OiIrZSsiLGZuOiIrKCJmdW5jdGlvbigiK1N0cmluZyh0LnNsb3RTY29wZSkrIil7cmV0dXJuICIrKCJ0ZW1wbGF0ZSI9PT10LnRhZz90LmlmPyIoIit0LmlmKyIpPyIrKENzKHQsbil8fCJ1bmRlZmluZWQiKSsiOnVuZGVmaW5lZCI6Q3ModCxuKXx8InVuZGVmaW5lZCI6dnModCxuKSkrIn0iKSsifSJ9ZnVuY3Rpb24gQ3MoZSx0LG4scixpKXt2YXIgbz1lLmNoaWxkcmVuO2lmKG8ubGVuZ3RoKXt2YXIgcz1vWzBdO2lmKDE9PT1vLmxlbmd0aCYmcy5mb3ImJiJ0ZW1wbGF0ZSIhPT1zLnRhZyYmInNsb3QiIT09cy50YWcpe3ZhciBhPW4/dC5tYXliZUNvbXBvbmVudChzKT8iLDEiOiIsMCI6IiI7cmV0dXJuIiIrKHJ8fHZzKShzLHQpK2F9dmFyIGw9bj9mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wLHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIGk9ZVtyXTtpZigxPT09aS50eXBlKXtpZih3cyhpKXx8aS5pZkNvbmRpdGlvbnMmJmkuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuIHdzKGUuYmxvY2spfSkpe249MjticmVha30odChpKXx8aS5pZkNvbmRpdGlvbnMmJmkuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuIHQoZS5ibG9jayl9KSkmJihuPTEpfX1yZXR1cm4gbn0obyx0Lm1heWJlQ29tcG9uZW50KTowLHU9aXx8a3M7cmV0dXJuIlsiK28ubWFwKGZ1bmN0aW9uKGUpe3JldHVybiB1KGUsdCl9KS5qb2luKCIsIikrIl0iKyhsPyIsIitsOiIiKX19ZnVuY3Rpb24gd3MoZSl7cmV0dXJuIHZvaWQgMCE9PWUuZm9yfHwidGVtcGxhdGUiPT09ZS50YWd8fCJzbG90Ij09PWUudGFnfWZ1bmN0aW9uIGtzKGUsdCl7cmV0dXJuIDE9PT1lLnR5cGU/dnMoZSx0KTozPT09ZS50eXBlJiZlLmlzQ29tbWVudD8ocj1lLCJfZSgiK0pTT04uc3RyaW5naWZ5KHIudGV4dCkrIikiKToiX3YoIisoMj09PShuPWUpLnR5cGU/bi5leHByZXNzaW9uOkFzKEpTT04uc3RyaW5naWZ5KG4udGV4dCkpKSsiKSI7dmFyIG4scn1mdW5jdGlvbiBTcyhlKXtmb3IodmFyIHQ9IiIsbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3QrPSciJytyLm5hbWUrJyI6JytBcyhyLnZhbHVlKSsiLCJ9cmV0dXJuIHQuc2xpY2UoMCwtMSl9ZnVuY3Rpb24gQXMoZSl7cmV0dXJuIGUucmVwbGFjZSgvXHUyMDI4L2csIlxcdTIwMjgiKS5yZXBsYWNlKC9cdTIwMjkvZywiXFx1MjAyOSIpfW5ldyBSZWdFeHAoIlxcYiIrImRvLGlmLGZvcixsZXQsbmV3LHRyeSx2YXIsY2FzZSxlbHNlLHdpdGgsYXdhaXQsYnJlYWssY2F0Y2gsY2xhc3MsY29uc3Qsc3VwZXIsdGhyb3csd2hpbGUseWllbGQsZGVsZXRlLGV4cG9ydCxpbXBvcnQscmV0dXJuLHN3aXRjaCxkZWZhdWx0LGV4dGVuZHMsZmluYWxseSxjb250aW51ZSxkZWJ1Z2dlcixmdW5jdGlvbixhcmd1bWVudHMiLnNwbGl0KCIsIikuam9pbigiXFxifFxcYiIpKyJcXGIiKSxuZXcgUmVnRXhwKCJcXGIiKyJkZWxldGUsdHlwZW9mLHZvaWQiLnNwbGl0KCIsIikuam9pbigiXFxzKlxcKFteXFwpXSpcXCl8XFxiIikrIlxccypcXChbXlxcKV0qXFwpIik7ZnVuY3Rpb24gRXMoZSx0KXt0cnl7cmV0dXJuIG5ldyBGdW5jdGlvbihlKX1jYXRjaChuKXtyZXR1cm4gdC5wdXNoKHtlcnI6bixjb2RlOmV9KSxEfX12YXIgTXMsT3MsRHM9KE1zPWZ1bmN0aW9uKGUsdCl7dmFyIG49V28oZS50cmltKCksdCk7ITEhPT10Lm9wdGltaXplJiZycyhuLHQpO3ZhciByPW1zKG4sdCk7cmV0dXJue2FzdDpuLHJlbmRlcjpyLnJlbmRlcixzdGF0aWNSZW5kZXJGbnM6ci5zdGF0aWNSZW5kZXJGbnN9fSxmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQsbil7dmFyIHI9T2JqZWN0LmNyZWF0ZShlKSxpPVtdLG89W107aWYoci53YXJuPWZ1bmN0aW9uKGUsdCl7KHQ/bzppKS5wdXNoKGUpfSxuKWZvcih2YXIgcyBpbiBuLm1vZHVsZXMmJihyLm1vZHVsZXM9KGUubW9kdWxlc3x8W10pLmNvbmNhdChuLm1vZHVsZXMpKSxuLmRpcmVjdGl2ZXMmJihyLmRpcmVjdGl2ZXM9TShPYmplY3QuY3JlYXRlKGUuZGlyZWN0aXZlc3x8bnVsbCksbi5kaXJlY3RpdmVzKSksbikibW9kdWxlcyIhPT1zJiYiZGlyZWN0aXZlcyIhPT1zJiYocltzXT1uW3NdKTt2YXIgYT1Ncyh0LHIpO3JldHVybiBhLmVycm9ycz1pLGEudGlwcz1vLGF9cmV0dXJue2NvbXBpbGU6dCxjb21waWxlVG9GdW5jdGlvbnM6ZnVuY3Rpb24oZSl7dmFyIHQ9T2JqZWN0LmNyZWF0ZShudWxsKTtyZXR1cm4gZnVuY3Rpb24obixyLGkpeyhyPU0oe30scikpLndhcm4sZGVsZXRlIHIud2Fybjt2YXIgbz1yLmRlbGltaXRlcnM/U3RyaW5nKHIuZGVsaW1pdGVycykrbjpuO2lmKHRbb10pcmV0dXJuIHRbb107dmFyIHM9ZShuLHIpLGE9e30sbD1bXTtyZXR1cm4gYS5yZW5kZXI9RXMocy5yZW5kZXIsbCksYS5zdGF0aWNSZW5kZXJGbnM9cy5zdGF0aWNSZW5kZXJGbnMubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBFcyhlLGwpfSksdFtvXT1hfX0odCl9fSkodHMpLCRzPShEcy5jb21waWxlLERzLmNvbXBpbGVUb0Z1bmN0aW9ucyk7ZnVuY3Rpb24gVHMoZSl7cmV0dXJuKE9zPU9zfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSkuaW5uZXJIVE1MPWU/JzxhIGhyZWY9IlxuIi8+JzonPGRpdiBhPSJcbiIvPicsT3MuaW5uZXJIVE1MLmluZGV4T2YoIiYjMTA7Iik+MH12YXIgUHM9ISFxJiZUcyghMSksTnM9ISFxJiZUcyghMCksRnM9YihmdW5jdGlvbihlKXt2YXIgdD1IbihlKTtyZXR1cm4gdCYmdC5pbm5lckhUTUx9KSxJcz1wbi5wcm90b3R5cGUuJG1vdW50O3BuLnByb3RvdHlwZS4kbW91bnQ9ZnVuY3Rpb24oZSx0KXtpZigoZT1lJiZIbihlKSk9PT1kb2N1bWVudC5ib2R5fHxlPT09ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KXJldHVybiB0aGlzO3ZhciBuPXRoaXMuJG9wdGlvbnM7aWYoIW4ucmVuZGVyKXt2YXIgcj1uLnRlbXBsYXRlO2lmKHIpaWYoInN0cmluZyI9PXR5cGVvZiByKSIjIj09PXIuY2hhckF0KDApJiYocj1GcyhyKSk7ZWxzZXtpZighci5ub2RlVHlwZSlyZXR1cm4gdGhpcztyPXIuaW5uZXJIVE1MfWVsc2UgZSYmKHI9ZnVuY3Rpb24oZSl7aWYoZS5vdXRlckhUTUwpcmV0dXJuIGUub3V0ZXJIVE1MO3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpO3JldHVybiB0LmFwcGVuZENoaWxkKGUuY2xvbmVOb2RlKCEwKSksdC5pbm5lckhUTUx9KGUpKTtpZihyKXswO3ZhciBpPSRzKHIse3Nob3VsZERlY29kZU5ld2xpbmVzOlBzLHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZjpOcyxkZWxpbWl0ZXJzOm4uZGVsaW1pdGVycyxjb21tZW50czpuLmNvbW1lbnRzfSx0aGlzKSxvPWkucmVuZGVyLHM9aS5zdGF0aWNSZW5kZXJGbnM7bi5yZW5kZXI9byxuLnN0YXRpY1JlbmRlckZucz1zfX1yZXR1cm4gSXMuY2FsbCh0aGlzLGUsdCl9LHBuLmNvbXBpbGU9JHMsdC5kZWZhdWx0PXBufS5jYWxsKHQsbigiRHVSMiIpKX0sIjc3UGwiOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCJFcWpJIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCFyKGUpKXRocm93IFR5cGVFcnJvcihlKyIgaXMgbm90IGFuIG9iamVjdCEiKTtyZXR1cm4gZX19LCI3R3dXIjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oImNHRzIiKSxpPW4oIjIxSXQiKSxvPW4oIkRRQ3IiKSxzPW4oIm9KbHQiKSxhPW4oIkdIQmMiKSxsPW4oIkZ0RDMiKSx1PSJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuYnRvYSYmd2luZG93LmJ0b2EuYmluZCh3aW5kb3cpfHxuKCJ0aEp1Iik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbih0LGMpe3ZhciBkPWUuZGF0YSxmPWUuaGVhZGVycztyLmlzRm9ybURhdGEoZCkmJmRlbGV0ZSBmWyJDb250ZW50LVR5cGUiXTt2YXIgaD1uZXcgWE1MSHR0cFJlcXVlc3QscD0ib25yZWFkeXN0YXRlY2hhbmdlIixtPSExO2lmKCJ1bmRlZmluZWQiPT10eXBlb2Ygd2luZG93fHwhd2luZG93LlhEb21haW5SZXF1ZXN0fHwid2l0aENyZWRlbnRpYWxzImluIGh8fGEoZS51cmwpfHwoaD1uZXcgd2luZG93LlhEb21haW5SZXF1ZXN0LHA9Im9ubG9hZCIsbT0hMCxoLm9ucHJvZ3Jlc3M9ZnVuY3Rpb24oKXt9LGgub250aW1lb3V0PWZ1bmN0aW9uKCl7fSksZS5hdXRoKXt2YXIgdj1lLmF1dGgudXNlcm5hbWV8fCIiLGc9ZS5hdXRoLnBhc3N3b3JkfHwiIjtmLkF1dGhvcml6YXRpb249IkJhc2ljICIrdSh2KyI6IitnKX1pZihoLm9wZW4oZS5tZXRob2QudG9VcHBlckNhc2UoKSxvKGUudXJsLGUucGFyYW1zLGUucGFyYW1zU2VyaWFsaXplciksITApLGgudGltZW91dD1lLnRpbWVvdXQsaFtwXT1mdW5jdGlvbigpe2lmKGgmJig0PT09aC5yZWFkeVN0YXRlfHxtKSYmKDAhPT1oLnN0YXR1c3x8aC5yZXNwb25zZVVSTCYmMD09PWgucmVzcG9uc2VVUkwuaW5kZXhPZigiZmlsZToiKSkpe3ZhciBuPSJnZXRBbGxSZXNwb25zZUhlYWRlcnMiaW4gaD9zKGguZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpOm51bGwscj17ZGF0YTplLnJlc3BvbnNlVHlwZSYmInRleHQiIT09ZS5yZXNwb25zZVR5cGU/aC5yZXNwb25zZTpoLnJlc3BvbnNlVGV4dCxzdGF0dXM6MTIyMz09PWguc3RhdHVzPzIwNDpoLnN0YXR1cyxzdGF0dXNUZXh0OjEyMjM9PT1oLnN0YXR1cz8iTm8gQ29udGVudCI6aC5zdGF0dXNUZXh0LGhlYWRlcnM6bixjb25maWc6ZSxyZXF1ZXN0Omh9O2kodCxjLHIpLGg9bnVsbH19LGgub25lcnJvcj1mdW5jdGlvbigpe2MobCgiTmV0d29yayBFcnJvciIsZSxudWxsLGgpKSxoPW51bGx9LGgub250aW1lb3V0PWZ1bmN0aW9uKCl7YyhsKCJ0aW1lb3V0IG9mICIrZS50aW1lb3V0KyJtcyBleGNlZWRlZCIsZSwiRUNPTk5BQk9SVEVEIixoKSksaD1udWxsfSxyLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpe3ZhciB5PW4oInAxYjYiKSxfPShlLndpdGhDcmVkZW50aWFsc3x8YShlLnVybCkpJiZlLnhzcmZDb29raWVOYW1lP3kucmVhZChlLnhzcmZDb29raWVOYW1lKTp2b2lkIDA7XyYmKGZbZS54c3JmSGVhZGVyTmFtZV09Xyl9aWYoInNldFJlcXVlc3RIZWFkZXIiaW4gaCYmci5mb3JFYWNoKGYsZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT1kJiYiY29udGVudC10eXBlIj09PXQudG9Mb3dlckNhc2UoKT9kZWxldGUgZlt0XTpoLnNldFJlcXVlc3RIZWFkZXIodCxlKX0pLGUud2l0aENyZWRlbnRpYWxzJiYoaC53aXRoQ3JlZGVudGlhbHM9ITApLGUucmVzcG9uc2VUeXBlKXRyeXtoLnJlc3BvbnNlVHlwZT1lLnJlc3BvbnNlVHlwZX1jYXRjaCh0KXtpZigianNvbiIhPT1lLnJlc3BvbnNlVHlwZSl0aHJvdyB0fSJmdW5jdGlvbiI9PXR5cGVvZiBlLm9uRG93bmxvYWRQcm9ncmVzcyYmaC5hZGRFdmVudExpc3RlbmVyKCJwcm9ncmVzcyIsZS5vbkRvd25sb2FkUHJvZ3Jlc3MpLCJmdW5jdGlvbiI9PXR5cGVvZiBlLm9uVXBsb2FkUHJvZ3Jlc3MmJmgudXBsb2FkJiZoLnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCJwcm9ncmVzcyIsZS5vblVwbG9hZFByb2dyZXNzKSxlLmNhbmNlbFRva2VuJiZlLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbihlKXtoJiYoaC5hYm9ydCgpLGMoZSksaD1udWxsKX0pLHZvaWQgMD09PWQmJihkPW51bGwpLGguc2VuZChkKX0pfX0sIjdKOXMiOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwLHQuUG9wdXBNYW5hZ2VyPXZvaWQgMDt2YXIgcj1sKG4oIjcrdVciKSksaT1sKG4oImptYUMiKSksbz1sKG4oIk9BelkiKSkscz1sKG4oIjZUd2giKSksYT1uKCIya3ZBIik7ZnVuY3Rpb24gbChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIHU9MSxjPXZvaWQgMDt0LmRlZmF1bHQ9e3Byb3BzOnt2aXNpYmxlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sb3BlbkRlbGF5Ont9LGNsb3NlRGVsYXk6e30sekluZGV4Ont9LG1vZGFsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sbW9kYWxGYWRlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sbW9kYWxDbGFzczp7fSxtb2RhbEFwcGVuZFRvQm9keTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGxvY2tTY3JvbGw6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjbG9zZU9uUHJlc3NFc2NhcGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxjbG9zZU9uQ2xpY2tNb2RhbDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9fSxiZWZvcmVNb3VudDpmdW5jdGlvbigpe3RoaXMuX3BvcHVwSWQ9InBvcHVwLSIrdSsrLG8uZGVmYXVsdC5yZWdpc3Rlcih0aGlzLl9wb3B1cElkLHRoaXMpfSxiZWZvcmVEZXN0cm95OmZ1bmN0aW9uKCl7by5kZWZhdWx0LmRlcmVnaXN0ZXIodGhpcy5fcG9wdXBJZCksby5kZWZhdWx0LmNsb3NlTW9kYWwodGhpcy5fcG9wdXBJZCksdGhpcy5yZXN0b3JlQm9keVN0eWxlKCl9LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57b3BlbmVkOiExLGJvZHlQYWRkaW5nUmlnaHQ6bnVsbCxjb21wdXRlZEJvZHlQYWRkaW5nUmlnaHQ6MCx3aXRob3V0SGlkZGVuQ2xhc3M6ITAscmVuZGVyZWQ6ITF9fSx3YXRjaDp7dmlzaWJsZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKGUpe2lmKHRoaXMuX29wZW5pbmcpcmV0dXJuO3RoaXMucmVuZGVyZWQ/dGhpcy5vcGVuKCk6KHRoaXMucmVuZGVyZWQ9ITAsci5kZWZhdWx0Lm5leHRUaWNrKGZ1bmN0aW9uKCl7dC5vcGVuKCl9KSl9ZWxzZSB0aGlzLmNsb3NlKCl9fSxtZXRob2RzOntvcGVuOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy5yZW5kZXJlZHx8KHRoaXMucmVuZGVyZWQ9ITApO3ZhciBuPSgwLGkuZGVmYXVsdCkoe30sdGhpcy4kcHJvcHN8fHRoaXMsZSk7dGhpcy5fY2xvc2VUaW1lciYmKGNsZWFyVGltZW91dCh0aGlzLl9jbG9zZVRpbWVyKSx0aGlzLl9jbG9zZVRpbWVyPW51bGwpLGNsZWFyVGltZW91dCh0aGlzLl9vcGVuVGltZXIpO3ZhciByPU51bWJlcihuLm9wZW5EZWxheSk7cj4wP3RoaXMuX29wZW5UaW1lcj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5fb3BlblRpbWVyPW51bGwsdC5kb09wZW4obil9LHIpOnRoaXMuZG9PcGVuKG4pfSxkb09wZW46ZnVuY3Rpb24oZSl7aWYoIXRoaXMuJGlzU2VydmVyJiYoIXRoaXMud2lsbE9wZW58fHRoaXMud2lsbE9wZW4oKSkmJiF0aGlzLm9wZW5lZCl7dGhpcy5fb3BlbmluZz0hMDt2YXIgdD1mdW5jdGlvbiBlKHQpe3JldHVybiAzPT09dC5ub2RlVHlwZSYmZSh0PXQubmV4dEVsZW1lbnRTaWJsaW5nfHx0Lm5leHRTaWJsaW5nKSx0fSh0aGlzLiRlbCksbj1lLm1vZGFsLHI9ZS56SW5kZXg7aWYociYmKG8uZGVmYXVsdC56SW5kZXg9ciksbiYmKHRoaXMuX2Nsb3NpbmcmJihvLmRlZmF1bHQuY2xvc2VNb2RhbCh0aGlzLl9wb3B1cElkKSx0aGlzLl9jbG9zaW5nPSExKSxvLmRlZmF1bHQub3Blbk1vZGFsKHRoaXMuX3BvcHVwSWQsby5kZWZhdWx0Lm5leHRaSW5kZXgoKSx0aGlzLm1vZGFsQXBwZW5kVG9Cb2R5P3ZvaWQgMDp0LGUubW9kYWxDbGFzcyxlLm1vZGFsRmFkZSksZS5sb2NrU2Nyb2xsKSl7dGhpcy53aXRob3V0SGlkZGVuQ2xhc3M9ISgwLGEuaGFzQ2xhc3MpKGRvY3VtZW50LmJvZHksImVsLXBvcHVwLXBhcmVudC0taGlkZGVuIiksdGhpcy53aXRob3V0SGlkZGVuQ2xhc3MmJih0aGlzLmJvZHlQYWRkaW5nUmlnaHQ9ZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQsdGhpcy5jb21wdXRlZEJvZHlQYWRkaW5nUmlnaHQ9cGFyc2VJbnQoKDAsYS5nZXRTdHlsZSkoZG9jdW1lbnQuYm9keSwicGFkZGluZ1JpZ2h0IiksMTApKSxjPSgwLHMuZGVmYXVsdCkoKTt2YXIgaT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0PGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0LGw9KDAsYS5nZXRTdHlsZSkoZG9jdW1lbnQuYm9keSwib3ZlcmZsb3dZIik7Yz4wJiYoaXx8InNjcm9sbCI9PT1sKSYmdGhpcy53aXRob3V0SGlkZGVuQ2xhc3MmJihkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodD10aGlzLmNvbXB1dGVkQm9keVBhZGRpbmdSaWdodCtjKyJweCIpLCgwLGEuYWRkQ2xhc3MpKGRvY3VtZW50LmJvZHksImVsLXBvcHVwLXBhcmVudC0taGlkZGVuIil9InN0YXRpYyI9PT1nZXRDb21wdXRlZFN0eWxlKHQpLnBvc2l0aW9uJiYodC5zdHlsZS5wb3NpdGlvbj0iYWJzb2x1dGUiKSx0LnN0eWxlLnpJbmRleD1vLmRlZmF1bHQubmV4dFpJbmRleCgpLHRoaXMub3BlbmVkPSEwLHRoaXMub25PcGVuJiZ0aGlzLm9uT3BlbigpLHRoaXMuZG9BZnRlck9wZW4oKX19LGRvQWZ0ZXJPcGVuOmZ1bmN0aW9uKCl7dGhpcy5fb3BlbmluZz0hMX0sY2xvc2U6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKCF0aGlzLndpbGxDbG9zZXx8dGhpcy53aWxsQ2xvc2UoKSl7bnVsbCE9PXRoaXMuX29wZW5UaW1lciYmKGNsZWFyVGltZW91dCh0aGlzLl9vcGVuVGltZXIpLHRoaXMuX29wZW5UaW1lcj1udWxsKSxjbGVhclRpbWVvdXQodGhpcy5fY2xvc2VUaW1lcik7dmFyIHQ9TnVtYmVyKHRoaXMuY2xvc2VEZWxheSk7dD4wP3RoaXMuX2Nsb3NlVGltZXI9c2V0VGltZW91dChmdW5jdGlvbigpe2UuX2Nsb3NlVGltZXI9bnVsbCxlLmRvQ2xvc2UoKX0sdCk6dGhpcy5kb0Nsb3NlKCl9fSxkb0Nsb3NlOmZ1bmN0aW9uKCl7dGhpcy5fY2xvc2luZz0hMCx0aGlzLm9uQ2xvc2UmJnRoaXMub25DbG9zZSgpLHRoaXMubG9ja1Njcm9sbCYmc2V0VGltZW91dCh0aGlzLnJlc3RvcmVCb2R5U3R5bGUsMjAwKSx0aGlzLm9wZW5lZD0hMSx0aGlzLmRvQWZ0ZXJDbG9zZSgpfSxkb0FmdGVyQ2xvc2U6ZnVuY3Rpb24oKXtvLmRlZmF1bHQuY2xvc2VNb2RhbCh0aGlzLl9wb3B1cElkKSx0aGlzLl9jbG9zaW5nPSExfSxyZXN0b3JlQm9keVN0eWxlOmZ1bmN0aW9uKCl7dGhpcy5tb2RhbCYmdGhpcy53aXRob3V0SGlkZGVuQ2xhc3MmJihkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodD10aGlzLmJvZHlQYWRkaW5nUmlnaHQsKDAsYS5yZW1vdmVDbGFzcykoZG9jdW1lbnQuYm9keSwiZWwtcG9wdXAtcGFyZW50LS1oaWRkZW4iKSksdGhpcy53aXRob3V0SGlkZGVuQ2xhc3M9ITB9fX0sdC5Qb3B1cE1hbmFnZXI9by5kZWZhdWx0fSwiN0t2RCI6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmV4cG9ydHM9InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5NYXRoPT1NYXRoP3dpbmRvdzoidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGYmJnNlbGYuTWF0aD09TWF0aD9zZWxmOkZ1bmN0aW9uKCJyZXR1cm4gdGhpcyIpKCk7Im51bWJlciI9PXR5cGVvZiBfX2cmJihfX2c9bil9LCI3VU11IjpmdW5jdGlvbihlLHQsbil7dmFyIHI9bigiUjlNMiIpO2UuZXhwb3J0cz1BcnJheS5pc0FycmF5fHxmdW5jdGlvbihlKXtyZXR1cm4iQXJyYXkiPT1yKGUpfX0sIjgyTXUiOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCI3S3ZEIiksaT1uKCJMNDJ1Iikuc2V0LG89ci5NdXRhdGlvbk9ic2VydmVyfHxyLldlYktpdE11dGF0aW9uT2JzZXJ2ZXIscz1yLnByb2Nlc3MsYT1yLlByb21pc2UsbD0icHJvY2VzcyI9PW4oIlI5TTIiKShzKTtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt2YXIgZSx0LG4sdT1mdW5jdGlvbigpe3ZhciByLGk7Zm9yKGwmJihyPXMuZG9tYWluKSYmci5leGl0KCk7ZTspe2k9ZS5mbixlPWUubmV4dDt0cnl7aSgpfWNhdGNoKHIpe3Rocm93IGU/bigpOnQ9dm9pZCAwLHJ9fXQ9dm9pZCAwLHImJnIuZW50ZXIoKX07aWYobCluPWZ1bmN0aW9uKCl7cy5uZXh0VGljayh1KX07ZWxzZSBpZighb3x8ci5uYXZpZ2F0b3ImJnIubmF2aWdhdG9yLnN0YW5kYWxvbmUpaWYoYSYmYS5yZXNvbHZlKXt2YXIgYz1hLnJlc29sdmUodm9pZCAwKTtuPWZ1bmN0aW9uKCl7Yy50aGVuKHUpfX1lbHNlIG49ZnVuY3Rpb24oKXtpLmNhbGwocix1KX07ZWxzZXt2YXIgZD0hMCxmPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCIiKTtuZXcgbyh1KS5vYnNlcnZlKGYse2NoYXJhY3RlckRhdGE6ITB9KSxuPWZ1bmN0aW9uKCl7Zi5kYXRhPWQ9IWR9fXJldHVybiBmdW5jdGlvbihyKXt2YXIgaT17Zm46cixuZXh0OnZvaWQgMH07dCYmKHQubmV4dD1pKSxlfHwoZT1pLG4oKSksdD1pfX19LCI4NTUvIjpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBpPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLG4pLGkubD0hMCxpLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsImEiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPSIvZGlzdC8iLG4obi5zPTI0Nyl9KHswOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt2YXIgcyxhPWU9ZXx8e30sbD10eXBlb2YgZS5kZWZhdWx0OyJvYmplY3QiIT09bCYmImZ1bmN0aW9uIiE9PWx8fChzPWUsYT1lLmRlZmF1bHQpO3ZhciB1LGM9ImZ1bmN0aW9uIj09dHlwZW9mIGE/YS5vcHRpb25zOmE7aWYodCYmKGMucmVuZGVyPXQucmVuZGVyLGMuc3RhdGljUmVuZGVyRm5zPXQuc3RhdGljUmVuZGVyRm5zLGMuX2NvbXBpbGVkPSEwKSxuJiYoYy5mdW5jdGlvbmFsPSEwKSxpJiYoYy5fc2NvcGVJZD1pKSxvPyh1PWZ1bmN0aW9uKGUpeyhlPWV8fHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fHx0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCl8fCJ1bmRlZmluZWQiPT10eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfX3x8KGU9X19WVUVfU1NSX0NPTlRFWFRfXyksciYmci5jYWxsKHRoaXMsZSksZSYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChvKX0sYy5fc3NyUmVnaXN0ZXI9dSk6ciYmKHU9ciksdSl7dmFyIGQ9Yy5mdW5jdGlvbmFsLGY9ZD9jLnJlbmRlcjpjLmJlZm9yZUNyZWF0ZTtkPyhjLl9pbmplY3RTdHlsZXM9dSxjLnJlbmRlcj1mdW5jdGlvbihlLHQpe3JldHVybiB1LmNhbGwodCksZihlLHQpfSk6Yy5iZWZvcmVDcmVhdGU9Zj9bXS5jb25jYXQoZix1KTpbdV19cmV0dXJue2VzTW9kdWxlOnMsZXhwb3J0czphLG9wdGlvbnM6Y319fSwxOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImZQbGwiKX0sMTI6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigidXJXOCIpfSwxNjpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJFS1RWIil9LDIxOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oIlpjd2ciKX0sMjQ3OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigyNDgpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O28uZGVmYXVsdC5pbnN0YWxsPWZ1bmN0aW9uKGUpe2UuY29tcG9uZW50KG8uZGVmYXVsdC5uYW1lLG8uZGVmYXVsdCl9LHQuZGVmYXVsdD1vLmRlZmF1bHR9LDI0ODpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKDI0OSksaT1uLm4ociksbz1uKDI1NSkscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDI0OTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj11KG4oMjUwKSksaT1uKDMzKSxvPXUobigyNTIpKSxzPW4oMTIpLGE9dShuKDEpKSxsPW4oMyk7ZnVuY3Rpb24gdShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dC5kZWZhdWx0PXtuYW1lOiJFbFRyZWUiLG1peGluczpbYS5kZWZhdWx0XSxjb21wb25lbnRzOntFbFRyZWVOb2RlOm8uZGVmYXVsdH0sZGF0YTpmdW5jdGlvbigpe3JldHVybntzdG9yZTpudWxsLHJvb3Q6bnVsbCxjdXJyZW50Tm9kZTpudWxsLHRyZWVJdGVtczpudWxsLGNoZWNrYm94SXRlbXM6W10sZHJhZ1N0YXRlOntzaG93RHJvcEluZGljYXRvcjohMSxkcmFnZ2luZ05vZGU6bnVsbCxkcm9wTm9kZTpudWxsLGFsbG93RHJvcDohMH19fSxwcm9wczp7ZGF0YTp7dHlwZTpBcnJheX0sZW1wdHlUZXh0Ont0eXBlOlN0cmluZyxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuKDAscy50KSgiZWwudHJlZS5lbXB0eVRleHQiKX19LHJlbmRlckFmdGVyRXhwYW5kOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sbm9kZUtleTpTdHJpbmcsY2hlY2tTdHJpY3RseTpCb29sZWFuLGRlZmF1bHRFeHBhbmRBbGw6Qm9vbGVhbixleHBhbmRPbkNsaWNrTm9kZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGNoZWNrT25DbGlja05vZGU6Qm9vbGVhbixjaGVja0Rlc2NlbmRhbnRzOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sYXV0b0V4cGFuZFBhcmVudDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGRlZmF1bHRDaGVja2VkS2V5czpBcnJheSxkZWZhdWx0RXhwYW5kZWRLZXlzOkFycmF5LGN1cnJlbnROb2RlS2V5OltTdHJpbmcsTnVtYmVyXSxyZW5kZXJDb250ZW50OkZ1bmN0aW9uLHNob3dDaGVja2JveDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGRyYWdnYWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGFsbG93RHJhZzpGdW5jdGlvbixhbGxvd0Ryb3A6RnVuY3Rpb24scHJvcHM6e2RlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm57Y2hpbGRyZW46ImNoaWxkcmVuIixsYWJlbDoibGFiZWwiLGRpc2FibGVkOiJkaXNhYmxlZCJ9fX0sbGF6eTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGhpZ2hsaWdodEN1cnJlbnQ6Qm9vbGVhbixsb2FkOkZ1bmN0aW9uLGZpbHRlck5vZGVNZXRob2Q6RnVuY3Rpb24sYWNjb3JkaW9uOkJvb2xlYW4saW5kZW50Ont0eXBlOk51bWJlcixkZWZhdWx0OjE4fSxpY29uQ2xhc3M6U3RyaW5nfSxjb21wdXRlZDp7Y2hpbGRyZW46e3NldDpmdW5jdGlvbihlKXt0aGlzLmRhdGE9ZX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGF0YX19LHRyZWVJdGVtQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy50cmVlSXRlbXMpfSxpc0VtcHR5OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5yb290LmNoaWxkTm9kZXM7cmV0dXJuIWV8fDA9PT1lLmxlbmd0aHx8ZS5ldmVyeShmdW5jdGlvbihlKXtyZXR1cm4hZS52aXNpYmxlfSl9fSx3YXRjaDp7ZGVmYXVsdENoZWNrZWRLZXlzOmZ1bmN0aW9uKGUpe3RoaXMuc3RvcmUuc2V0RGVmYXVsdENoZWNrZWRLZXkoZSl9LGRlZmF1bHRFeHBhbmRlZEtleXM6ZnVuY3Rpb24oZSl7dGhpcy5zdG9yZS5kZWZhdWx0RXhwYW5kZWRLZXlzPWUsdGhpcy5zdG9yZS5zZXREZWZhdWx0RXhwYW5kZWRLZXlzKGUpfSxkYXRhOmZ1bmN0aW9uKGUpe3RoaXMuc3RvcmUuc2V0RGF0YShlKX0sY2hlY2tib3hJdGVtczpmdW5jdGlvbihlKXtBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGUsZnVuY3Rpb24oZSl7ZS5zZXRBdHRyaWJ1dGUoInRhYmluZGV4IiwtMSl9KX0sY2hlY2tTdHJpY3RseTpmdW5jdGlvbihlKXt0aGlzLnN0b3JlLmNoZWNrU3RyaWN0bHk9ZX19LG1ldGhvZHM6e2ZpbHRlcjpmdW5jdGlvbihlKXtpZighdGhpcy5maWx0ZXJOb2RlTWV0aG9kKXRocm93IG5ldyBFcnJvcigiW1RyZWVdIGZpbHRlck5vZGVNZXRob2QgaXMgcmVxdWlyZWQgd2hlbiBmaWx0ZXIiKTt0aGlzLnN0b3JlLmZpbHRlcihlKX0sZ2V0Tm9kZUtleTpmdW5jdGlvbihlKXtyZXR1cm4oMCxpLmdldE5vZGVLZXkpKHRoaXMubm9kZUtleSxlLmRhdGEpfSxnZXROb2RlUGF0aDpmdW5jdGlvbihlKXtpZighdGhpcy5ub2RlS2V5KXRocm93IG5ldyBFcnJvcigiW1RyZWVdIG5vZGVLZXkgaXMgcmVxdWlyZWQgaW4gZ2V0Tm9kZVBhdGgiKTt2YXIgdD10aGlzLnN0b3JlLmdldE5vZGUoZSk7aWYoIXQpcmV0dXJuW107Zm9yKHZhciBuPVt0LmRhdGFdLHI9dC5wYXJlbnQ7ciYmciE9PXRoaXMucm9vdDspbi5wdXNoKHIuZGF0YSkscj1yLnBhcmVudDtyZXR1cm4gbi5yZXZlcnNlKCl9LGdldENoZWNrZWROb2RlczpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLnN0b3JlLmdldENoZWNrZWROb2RlcyhlLHQpfSxnZXRDaGVja2VkS2V5czpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5zdG9yZS5nZXRDaGVja2VkS2V5cyhlKX0sZ2V0Q3VycmVudE5vZGU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnN0b3JlLmdldEN1cnJlbnROb2RlKCk7cmV0dXJuIGU/ZS5kYXRhOm51bGx9LGdldEN1cnJlbnRLZXk6ZnVuY3Rpb24oKXtpZighdGhpcy5ub2RlS2V5KXRocm93IG5ldyBFcnJvcigiW1RyZWVdIG5vZGVLZXkgaXMgcmVxdWlyZWQgaW4gZ2V0Q3VycmVudEtleSIpO3ZhciBlPXRoaXMuZ2V0Q3VycmVudE5vZGUoKTtyZXR1cm4gZT9lW3RoaXMubm9kZUtleV06bnVsbH0sc2V0Q2hlY2tlZE5vZGVzOmZ1bmN0aW9uKGUsdCl7aWYoIXRoaXMubm9kZUtleSl0aHJvdyBuZXcgRXJyb3IoIltUcmVlXSBub2RlS2V5IGlzIHJlcXVpcmVkIGluIHNldENoZWNrZWROb2RlcyIpO3RoaXMuc3RvcmUuc2V0Q2hlY2tlZE5vZGVzKGUsdCl9LHNldENoZWNrZWRLZXlzOmZ1bmN0aW9uKGUsdCl7aWYoIXRoaXMubm9kZUtleSl0aHJvdyBuZXcgRXJyb3IoIltUcmVlXSBub2RlS2V5IGlzIHJlcXVpcmVkIGluIHNldENoZWNrZWRLZXlzIik7dGhpcy5zdG9yZS5zZXRDaGVja2VkS2V5cyhlLHQpfSxzZXRDaGVja2VkOmZ1bmN0aW9uKGUsdCxuKXt0aGlzLnN0b3JlLnNldENoZWNrZWQoZSx0LG4pfSxnZXRIYWxmQ2hlY2tlZE5vZGVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RvcmUuZ2V0SGFsZkNoZWNrZWROb2RlcygpfSxnZXRIYWxmQ2hlY2tlZEtleXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdG9yZS5nZXRIYWxmQ2hlY2tlZEtleXMoKX0sc2V0Q3VycmVudE5vZGU6ZnVuY3Rpb24oZSl7aWYoIXRoaXMubm9kZUtleSl0aHJvdyBuZXcgRXJyb3IoIltUcmVlXSBub2RlS2V5IGlzIHJlcXVpcmVkIGluIHNldEN1cnJlbnROb2RlIik7dGhpcy5zdG9yZS5zZXRVc2VyQ3VycmVudE5vZGUoZSl9LHNldEN1cnJlbnRLZXk6ZnVuY3Rpb24oZSl7aWYoIXRoaXMubm9kZUtleSl0aHJvdyBuZXcgRXJyb3IoIltUcmVlXSBub2RlS2V5IGlzIHJlcXVpcmVkIGluIHNldEN1cnJlbnRLZXkiKTt0aGlzLnN0b3JlLnNldEN1cnJlbnROb2RlS2V5KGUpfSxnZXROb2RlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnN0b3JlLmdldE5vZGUoZSl9LHJlbW92ZTpmdW5jdGlvbihlKXt0aGlzLnN0b3JlLnJlbW92ZShlKX0sYXBwZW5kOmZ1bmN0aW9uKGUsdCl7dGhpcy5zdG9yZS5hcHBlbmQoZSx0KX0saW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKGUsdCl7dGhpcy5zdG9yZS5pbnNlcnRCZWZvcmUoZSx0KX0saW5zZXJ0QWZ0ZXI6ZnVuY3Rpb24oZSx0KXt0aGlzLnN0b3JlLmluc2VydEFmdGVyKGUsdCl9LGhhbmRsZU5vZGVFeHBhbmQ6ZnVuY3Rpb24oZSx0LG4pe3RoaXMuYnJvYWRjYXN0KCJFbFRyZWVOb2RlIiwidHJlZS1ub2RlLWV4cGFuZCIsdCksdGhpcy4kZW1pdCgibm9kZS1leHBhbmQiLGUsdCxuKX0sdXBkYXRlS2V5Q2hpbGRyZW46ZnVuY3Rpb24oZSx0KXtpZighdGhpcy5ub2RlS2V5KXRocm93IG5ldyBFcnJvcigiW1RyZWVdIG5vZGVLZXkgaXMgcmVxdWlyZWQgaW4gdXBkYXRlS2V5Q2hpbGQiKTt0aGlzLnN0b3JlLnVwZGF0ZUNoaWxkcmVuKGUsdCl9LGluaXRUYWJJbmRleDpmdW5jdGlvbigpe3RoaXMudHJlZUl0ZW1zPXRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIi5pcy1mb2N1c2FibGVbcm9sZT10cmVlaXRlbV0iKSx0aGlzLmNoZWNrYm94SXRlbXM9dGhpcy4kZWwucXVlcnlTZWxlY3RvckFsbCgiaW5wdXRbdHlwZT1jaGVja2JveF0iKTt2YXIgZT10aGlzLiRlbC5xdWVyeVNlbGVjdG9yQWxsKCIuaXMtY2hlY2tlZFtyb2xlPXRyZWVpdGVtXSIpO2UubGVuZ3RoP2VbMF0uc2V0QXR0cmlidXRlKCJ0YWJpbmRleCIsMCk6dGhpcy50cmVlSXRlbXNbMF0mJnRoaXMudHJlZUl0ZW1zWzBdLnNldEF0dHJpYnV0ZSgidGFiaW5kZXgiLDApfSxoYW5kbGVLZXlkb3duOmZ1bmN0aW9uKGUpe3ZhciB0PWUudGFyZ2V0O2lmKC0xIT09dC5jbGFzc05hbWUuaW5kZXhPZigiZWwtdHJlZS1ub2RlIikpe3ZhciBuPWUua2V5Q29kZTt0aGlzLnRyZWVJdGVtcz10aGlzLiRlbC5xdWVyeVNlbGVjdG9yQWxsKCIuaXMtZm9jdXNhYmxlW3JvbGU9dHJlZWl0ZW1dIik7dmFyIHI9dGhpcy50cmVlSXRlbUFycmF5LmluZGV4T2YodCksaT12b2lkIDA7WzM4LDQwXS5pbmRleE9mKG4pPi0xJiYoZS5wcmV2ZW50RGVmYXVsdCgpLGk9Mzg9PT1uPzAhPT1yP3ItMTowOnI8dGhpcy50cmVlSXRlbUFycmF5Lmxlbmd0aC0xP3IrMTowLHRoaXMudHJlZUl0ZW1BcnJheVtpXS5mb2N1cygpKSxbMzcsMzldLmluZGV4T2Yobik+LTEmJihlLnByZXZlbnREZWZhdWx0KCksdC5jbGljaygpKTt2YXIgbz10LnF1ZXJ5U2VsZWN0b3IoJ1t0eXBlPSJjaGVja2JveCJdJyk7WzEzLDMyXS5pbmRleE9mKG4pPi0xJiZvJiYoZS5wcmV2ZW50RGVmYXVsdCgpLG8uY2xpY2soKSl9fX0sY3JlYXRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5pc1RyZWU9ITAsdGhpcy5zdG9yZT1uZXcgci5kZWZhdWx0KHtrZXk6dGhpcy5ub2RlS2V5LGRhdGE6dGhpcy5kYXRhLGxhenk6dGhpcy5sYXp5LHByb3BzOnRoaXMucHJvcHMsbG9hZDp0aGlzLmxvYWQsY3VycmVudE5vZGVLZXk6dGhpcy5jdXJyZW50Tm9kZUtleSxjaGVja1N0cmljdGx5OnRoaXMuY2hlY2tTdHJpY3RseSxjaGVja0Rlc2NlbmRhbnRzOnRoaXMuY2hlY2tEZXNjZW5kYW50cyxkZWZhdWx0Q2hlY2tlZEtleXM6dGhpcy5kZWZhdWx0Q2hlY2tlZEtleXMsZGVmYXVsdEV4cGFuZGVkS2V5czp0aGlzLmRlZmF1bHRFeHBhbmRlZEtleXMsYXV0b0V4cGFuZFBhcmVudDp0aGlzLmF1dG9FeHBhbmRQYXJlbnQsZGVmYXVsdEV4cGFuZEFsbDp0aGlzLmRlZmF1bHRFeHBhbmRBbGwsZmlsdGVyTm9kZU1ldGhvZDp0aGlzLmZpbHRlck5vZGVNZXRob2R9KSx0aGlzLnJvb3Q9dGhpcy5zdG9yZS5yb290O3ZhciB0PXRoaXMuZHJhZ1N0YXRlO3RoaXMuJG9uKCJ0cmVlLW5vZGUtZHJhZy1zdGFydCIsZnVuY3Rpb24obixyKXtpZigiZnVuY3Rpb24iPT10eXBlb2YgZS5hbGxvd0RyYWcmJiFlLmFsbG93RHJhZyhyLm5vZGUpKXJldHVybiBuLnByZXZlbnREZWZhdWx0KCksITE7bi5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZD0ibW92ZSI7dHJ5e24uZGF0YVRyYW5zZmVyLnNldERhdGEoInRleHQvcGxhaW4iLCIiKX1jYXRjaChlKXt9dC5kcmFnZ2luZ05vZGU9cixlLiRlbWl0KCJub2RlLWRyYWctc3RhcnQiLHIubm9kZSxuKX0pLHRoaXMuJG9uKCJ0cmVlLW5vZGUtZHJhZy1vdmVyIixmdW5jdGlvbihuLHIpe3ZhciBvPSgwLGkuZmluZE5lYXJlc3RDb21wb25lbnQpKG4udGFyZ2V0LCJFbFRyZWVOb2RlIikscz10LmRyb3BOb2RlO3MmJnMhPT1vJiYoMCxsLnJlbW92ZUNsYXNzKShzLiRlbCwiaXMtZHJvcC1pbm5lciIpO3ZhciBhPXQuZHJhZ2dpbmdOb2RlO2lmKGEmJm8pe3ZhciB1PSEwLGM9ITAsZD0hMCxmPSEwOyJmdW5jdGlvbiI9PXR5cGVvZiBlLmFsbG93RHJvcCYmKHU9ZS5hbGxvd0Ryb3AoYS5ub2RlLG8ubm9kZSwicHJldiIpLGY9Yz1lLmFsbG93RHJvcChhLm5vZGUsby5ub2RlLCJpbm5lciIpLGQ9ZS5hbGxvd0Ryb3AoYS5ub2RlLG8ubm9kZSwibmV4dCIpKSxuLmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0PWM/Im1vdmUiOiJub25lIiwodXx8Y3x8ZCkmJnMhPT1vJiYocyYmZS4kZW1pdCgibm9kZS1kcmFnLWxlYXZlIixhLm5vZGUscy5ub2RlLG4pLGUuJGVtaXQoIm5vZGUtZHJhZy1lbnRlciIsYS5ub2RlLG8ubm9kZSxuKSksKHV8fGN8fGQpJiYodC5kcm9wTm9kZT1vKSxvLm5vZGUubmV4dFNpYmxpbmc9PT1hLm5vZGUmJihkPSExKSxvLm5vZGUucHJldmlvdXNTaWJsaW5nPT09YS5ub2RlJiYodT0hMSksby5ub2RlLmNvbnRhaW5zKGEubm9kZSwhMSkmJihjPSExKSwoYS5ub2RlPT09by5ub2RlfHxhLm5vZGUuY29udGFpbnMoby5ub2RlKSkmJih1PSExLGM9ITEsZD0hMSk7dmFyIGg9by4kZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkscD1lLiRlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxtPXZvaWQgMCx2PXU/Yz8uMjU6ZD8uNDU6MTotMSxnPWQ/Yz8uNzU6dT8uNTU6MDoxLHk9LTk5OTksXz1uLmNsaWVudFktaC50b3A7bT1fPGguaGVpZ2h0KnY/ImJlZm9yZSI6Xz5oLmhlaWdodCpnPyJhZnRlciI6Yz8iaW5uZXIiOiJub25lIjt2YXIgYj1vLiRlbC5xdWVyeVNlbGVjdG9yKCIuZWwtdHJlZS1ub2RlX19leHBhbmQtaWNvbiIpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLHg9ZS4kcmVmcy5kcm9wSW5kaWNhdG9yOyJiZWZvcmUiPT09bT95PWIudG9wLXAudG9wOiJhZnRlciI9PT1tJiYoeT1iLmJvdHRvbS1wLnRvcCkseC5zdHlsZS50b3A9eSsicHgiLHguc3R5bGUubGVmdD1iLnJpZ2h0LXAubGVmdCsicHgiLCJpbm5lciI9PT1tPygwLGwuYWRkQ2xhc3MpKG8uJGVsLCJpcy1kcm9wLWlubmVyIik6KDAsbC5yZW1vdmVDbGFzcykoby4kZWwsImlzLWRyb3AtaW5uZXIiKSx0LnNob3dEcm9wSW5kaWNhdG9yPSJiZWZvcmUiPT09bXx8ImFmdGVyIj09PW0sdC5hbGxvd0Ryb3A9dC5zaG93RHJvcEluZGljYXRvcnx8Zix0LmRyb3BUeXBlPW0sZS4kZW1pdCgibm9kZS1kcmFnLW92ZXIiLGEubm9kZSxvLm5vZGUsbil9fSksdGhpcy4kb24oInRyZWUtbm9kZS1kcmFnLWVuZCIsZnVuY3Rpb24obil7dmFyIHI9dC5kcmFnZ2luZ05vZGUsaT10LmRyb3BUeXBlLG89dC5kcm9wTm9kZTtpZihuLnByZXZlbnREZWZhdWx0KCksbi5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdD0ibW92ZSIsciYmbyl7dmFyIHM9e2RhdGE6ci5ub2RlLmRhdGF9OyJub25lIiE9PWkmJnIubm9kZS5yZW1vdmUoKSwiYmVmb3JlIj09PWk/by5ub2RlLnBhcmVudC5pbnNlcnRCZWZvcmUocyxvLm5vZGUpOiJhZnRlciI9PT1pP28ubm9kZS5wYXJlbnQuaW5zZXJ0QWZ0ZXIocyxvLm5vZGUpOiJpbm5lciI9PT1pJiZvLm5vZGUuaW5zZXJ0Q2hpbGQocyksIm5vbmUiIT09aSYmZS5zdG9yZS5yZWdpc3Rlck5vZGUocyksKDAsbC5yZW1vdmVDbGFzcykoby4kZWwsImlzLWRyb3AtaW5uZXIiKSxlLiRlbWl0KCJub2RlLWRyYWctZW5kIixyLm5vZGUsby5ub2RlLGksbiksIm5vbmUiIT09aSYmZS4kZW1pdCgibm9kZS1kcm9wIixyLm5vZGUsby5ub2RlLGksbil9ciYmIW8mJmUuJGVtaXQoIm5vZGUtZHJhZy1lbmQiLHIubm9kZSxudWxsLGksbiksdC5zaG93RHJvcEluZGljYXRvcj0hMSx0LmRyYWdnaW5nTm9kZT1udWxsLHQuZHJvcE5vZGU9bnVsbCx0LmFsbG93RHJvcD0hMH0pfSxtb3VudGVkOmZ1bmN0aW9uKCl7dGhpcy5pbml0VGFiSW5kZXgoKSx0aGlzLiRlbC5hZGRFdmVudExpc3RlbmVyKCJrZXlkb3duIix0aGlzLmhhbmRsZUtleWRvd24pfSx1cGRhdGVkOmZ1bmN0aW9uKCl7dGhpcy50cmVlSXRlbXM9dGhpcy4kZWwucXVlcnlTZWxlY3RvckFsbCgiW3JvbGU9dHJlZWl0ZW1dIiksdGhpcy5jaGVja2JveEl0ZW1zPXRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3JBbGwoImlucHV0W3R5cGU9Y2hlY2tib3hdIil9fX0sMjUwOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmInN5bWJvbCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIGV9LG89bigyNTEpLHM9KHI9bykmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9LGE9bigzMyk7dmFyIGw9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3ZhciBuPXRoaXM7Zm9yKHZhciByIGluIGZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9KHRoaXMsZSksdGhpcy5jdXJyZW50Tm9kZT1udWxsLHRoaXMuY3VycmVudE5vZGVLZXk9bnVsbCx0KXQuaGFzT3duUHJvcGVydHkocikmJih0aGlzW3JdPXRbcl0pOyh0aGlzLm5vZGVzTWFwPXt9LHRoaXMucm9vdD1uZXcgcy5kZWZhdWx0KHtkYXRhOnRoaXMuZGF0YSxzdG9yZTp0aGlzfSksdGhpcy5sYXp5JiZ0aGlzLmxvYWQpPygwLHRoaXMubG9hZCkodGhpcy5yb290LGZ1bmN0aW9uKGUpe24ucm9vdC5kb0NyZWF0ZUNoaWxkcmVuKGUpLG4uX2luaXREZWZhdWx0Q2hlY2tlZE5vZGVzKCl9KTp0aGlzLl9pbml0RGVmYXVsdENoZWNrZWROb2RlcygpfXJldHVybiBlLnByb3RvdHlwZS5maWx0ZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5maWx0ZXJOb2RlTWV0aG9kLG49dGhpcy5sYXp5OyFmdW5jdGlvbiByKGkpe3ZhciBvPWkucm9vdD9pLnJvb3QuY2hpbGROb2RlczppLmNoaWxkTm9kZXM7aWYoby5mb3JFYWNoKGZ1bmN0aW9uKG4pe24udmlzaWJsZT10LmNhbGwobixlLG4uZGF0YSxuKSxyKG4pfSksIWkudmlzaWJsZSYmby5sZW5ndGgpe3ZhciBzPSEwO28uZm9yRWFjaChmdW5jdGlvbihlKXtlLnZpc2libGUmJihzPSExKX0pLGkucm9vdD9pLnJvb3QudmlzaWJsZT0hMT09PXM6aS52aXNpYmxlPSExPT09c31lJiYoIWkudmlzaWJsZXx8aS5pc0xlYWZ8fG58fGkuZXhwYW5kKCkpfSh0aGlzKX0sZS5wcm90b3R5cGUuc2V0RGF0YT1mdW5jdGlvbihlKXtlIT09dGhpcy5yb290LmRhdGE/KHRoaXMucm9vdC5zZXREYXRhKGUpLHRoaXMuX2luaXREZWZhdWx0Q2hlY2tlZE5vZGVzKCkpOnRoaXMucm9vdC51cGRhdGVDaGlsZHJlbigpfSxlLnByb3RvdHlwZS5nZXROb2RlPWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBzLmRlZmF1bHQpcmV0dXJuIGU7dmFyIHQ9Im9iamVjdCIhPT0odm9pZCAwPT09ZT8idW5kZWZpbmVkIjppKGUpKT9lOigwLGEuZ2V0Tm9kZUtleSkodGhpcy5rZXksZSk7cmV0dXJuIHRoaXMubm9kZXNNYXBbdF18fG51bGx9LGUucHJvdG90eXBlLmluc2VydEJlZm9yZT1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuZ2V0Tm9kZSh0KTtuLnBhcmVudC5pbnNlcnRCZWZvcmUoe2RhdGE6ZX0sbil9LGUucHJvdG90eXBlLmluc2VydEFmdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5nZXROb2RlKHQpO24ucGFyZW50Lmluc2VydEFmdGVyKHtkYXRhOmV9LG4pfSxlLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5nZXROb2RlKGUpO3QmJnQucGFyZW50JiZ0LnBhcmVudC5yZW1vdmVDaGlsZCh0KX0sZS5wcm90b3R5cGUuYXBwZW5kPWZ1bmN0aW9uKGUsdCl7dmFyIG49dD90aGlzLmdldE5vZGUodCk6dGhpcy5yb290O24mJm4uaW5zZXJ0Q2hpbGQoe2RhdGE6ZX0pfSxlLnByb3RvdHlwZS5faW5pdERlZmF1bHRDaGVja2VkTm9kZXM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy5kZWZhdWx0Q2hlY2tlZEtleXN8fFtdLG49dGhpcy5ub2Rlc01hcDt0LmZvckVhY2goZnVuY3Rpb24odCl7dmFyIHI9blt0XTtyJiZyLnNldENoZWNrZWQoITAsIWUuY2hlY2tTdHJpY3RseSl9KX0sZS5wcm90b3R5cGUuX2luaXREZWZhdWx0Q2hlY2tlZE5vZGU9ZnVuY3Rpb24oZSl7LTEhPT0odGhpcy5kZWZhdWx0Q2hlY2tlZEtleXN8fFtdKS5pbmRleE9mKGUua2V5KSYmZS5zZXRDaGVja2VkKCEwLCF0aGlzLmNoZWNrU3RyaWN0bHkpfSxlLnByb3RvdHlwZS5zZXREZWZhdWx0Q2hlY2tlZEtleT1mdW5jdGlvbihlKXtlIT09dGhpcy5kZWZhdWx0Q2hlY2tlZEtleXMmJih0aGlzLmRlZmF1bHRDaGVja2VkS2V5cz1lLHRoaXMuX2luaXREZWZhdWx0Q2hlY2tlZE5vZGVzKCkpfSxlLnByb3RvdHlwZS5yZWdpc3Rlck5vZGU9ZnVuY3Rpb24oZSl7dGhpcy5rZXkmJmUmJmUuZGF0YSYmKHZvaWQgMCE9PWUua2V5JiYodGhpcy5ub2Rlc01hcFtlLmtleV09ZSkpfSxlLnByb3RvdHlwZS5kZXJlZ2lzdGVyTm9kZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMua2V5JiZlJiZlLmRhdGEmJihlLmNoaWxkTm9kZXMuZm9yRWFjaChmdW5jdGlvbihlKXt0LmRlcmVnaXN0ZXJOb2RlKGUpfSksZGVsZXRlIHRoaXMubm9kZXNNYXBbZS5rZXldKX0sZS5wcm90b3R5cGUuZ2V0Q2hlY2tlZE5vZGVzPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0mJmFyZ3VtZW50c1swXSx0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbj1bXTtyZXR1cm4gZnVuY3Rpb24gcihpKXsoaS5yb290P2kucm9vdC5jaGlsZE5vZGVzOmkuY2hpbGROb2RlcykuZm9yRWFjaChmdW5jdGlvbihpKXsoaS5jaGVja2VkfHx0JiZpLmluZGV0ZXJtaW5hdGUpJiYoIWV8fGUmJmkuaXNMZWFmKSYmbi5wdXNoKGkuZGF0YSkscihpKX0pfSh0aGlzKSxufSxlLnByb3RvdHlwZS5nZXRDaGVja2VkS2V5cz1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSYmYXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmdldENoZWNrZWROb2Rlcyh0KS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuKHR8fHt9KVtlLmtleV19KX0sZS5wcm90b3R5cGUuZ2V0SGFsZkNoZWNrZWROb2Rlcz1mdW5jdGlvbigpe3ZhciBlPVtdO3JldHVybiBmdW5jdGlvbiB0KG4peyhuLnJvb3Q/bi5yb290LmNoaWxkTm9kZXM6bi5jaGlsZE5vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe24uaW5kZXRlcm1pbmF0ZSYmZS5wdXNoKG4uZGF0YSksdChuKX0pfSh0aGlzKSxlfSxlLnByb3RvdHlwZS5nZXRIYWxmQ2hlY2tlZEtleXM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybiB0aGlzLmdldEhhbGZDaGVja2VkTm9kZXMoKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuKHR8fHt9KVtlLmtleV19KX0sZS5wcm90b3R5cGUuX2dldEFsbE5vZGVzPWZ1bmN0aW9uKCl7dmFyIGU9W10sdD10aGlzLm5vZGVzTWFwO2Zvcih2YXIgbiBpbiB0KXQuaGFzT3duUHJvcGVydHkobikmJmUucHVzaCh0W25dKTtyZXR1cm4gZX0sZS5wcm90b3R5cGUudXBkYXRlQ2hpbGRyZW49ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLm5vZGVzTWFwW2VdO2lmKG4pe2Zvcih2YXIgcj1uLmNoaWxkTm9kZXMsaT1yLmxlbmd0aC0xO2k+PTA7aS0tKXt2YXIgbz1yW2ldO3RoaXMucmVtb3ZlKG8uZGF0YSl9Zm9yKHZhciBzPTAsYT10Lmxlbmd0aDtzPGE7cysrKXt2YXIgbD10W3NdO3RoaXMuYXBwZW5kKGwsbi5kYXRhKX19fSxlLnByb3RvdHlwZS5fc2V0Q2hlY2tlZEtleXM9ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0mJmFyZ3VtZW50c1sxXSxuPWFyZ3VtZW50c1syXSxyPXRoaXMuX2dldEFsbE5vZGVzKCkuc29ydChmdW5jdGlvbihlLHQpe3JldHVybiB0LmxldmVsLWUubGV2ZWx9KSxpPU9iamVjdC5jcmVhdGUobnVsbCksbz1PYmplY3Qua2V5cyhuKTtyLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGUuc2V0Q2hlY2tlZCghMSwhMSl9KTtmb3IodmFyIHM9MCxhPXIubGVuZ3RoO3M8YTtzKyspe3ZhciBsPXJbc10sdT1sLmRhdGFbZV0udG9TdHJpbmcoKTtpZihvLmluZGV4T2YodSk+LTEpe2Zvcih2YXIgYz1sLnBhcmVudDtjJiZjLmxldmVsPjA7KWlbYy5kYXRhW2VdXT0hMCxjPWMucGFyZW50O2wuaXNMZWFmfHx0aGlzLmNoZWNrU3RyaWN0bHk/bC5zZXRDaGVja2VkKCEwLCExKToobC5zZXRDaGVja2VkKCEwLCEwKSx0JiZmdW5jdGlvbigpe2wuc2V0Q2hlY2tlZCghMSwhMSk7IWZ1bmN0aW9uIGUodCl7dC5jaGlsZE5vZGVzLmZvckVhY2goZnVuY3Rpb24odCl7dC5pc0xlYWZ8fHQuc2V0Q2hlY2tlZCghMSwhMSksZSh0KX0pfShsKX0oKSl9ZWxzZSBsLmNoZWNrZWQmJiFpW3VdJiZsLnNldENoZWNrZWQoITEsITEpfX0sZS5wcm90b3R5cGUuc2V0Q2hlY2tlZE5vZGVzPWZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbj10aGlzLmtleSxyPXt9O2UuZm9yRWFjaChmdW5jdGlvbihlKXtyWyhlfHx7fSlbbl1dPSEwfSksdGhpcy5fc2V0Q2hlY2tlZEtleXMobix0LHIpfSxlLnByb3RvdHlwZS5zZXRDaGVja2VkS2V5cz1mdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdO3RoaXMuZGVmYXVsdENoZWNrZWRLZXlzPWU7dmFyIG49dGhpcy5rZXkscj17fTtlLmZvckVhY2goZnVuY3Rpb24oZSl7cltlXT0hMH0pLHRoaXMuX3NldENoZWNrZWRLZXlzKG4sdCxyKX0sZS5wcm90b3R5cGUuc2V0RGVmYXVsdEV4cGFuZGVkS2V5cz1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2U9ZXx8W10sdGhpcy5kZWZhdWx0RXhwYW5kZWRLZXlzPWUsZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciBuPXQuZ2V0Tm9kZShlKTtuJiZuLmV4cGFuZChudWxsLHQuYXV0b0V4cGFuZFBhcmVudCl9KX0sZS5wcm90b3R5cGUuc2V0Q2hlY2tlZD1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcy5nZXROb2RlKGUpO3ImJnIuc2V0Q2hlY2tlZCghIXQsbil9LGUucHJvdG90eXBlLmdldEN1cnJlbnROb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3VycmVudE5vZGV9LGUucHJvdG90eXBlLnNldEN1cnJlbnROb2RlPWZ1bmN0aW9uKGUpe3RoaXMuY3VycmVudE5vZGU9ZX0sZS5wcm90b3R5cGUuc2V0VXNlckN1cnJlbnROb2RlPWZ1bmN0aW9uKGUpe3ZhciB0PWVbdGhpcy5rZXldLG49dGhpcy5ub2Rlc01hcFt0XTt0aGlzLnNldEN1cnJlbnROb2RlKG4pfSxlLnByb3RvdHlwZS5zZXRDdXJyZW50Tm9kZUtleT1mdW5jdGlvbihlKXtpZihudWxsIT09ZSl7dmFyIHQ9dGhpcy5nZXROb2RlKGUpO3QmJih0aGlzLmN1cnJlbnROb2RlPXQpfWVsc2UgdGhpcy5jdXJyZW50Tm9kZT1udWxsfSxlfSgpO3QuZGVmYXVsdD1sfSwyNTE6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITAsdC5nZXRDaGlsZFN0YXRlPXZvaWQgMDt2YXIgcixpPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiBlfSxvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fXJldHVybiBmdW5jdGlvbih0LG4scil7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksciYmZSh0LHIpLHR9fSgpLHM9big5KSxhPShyPXMpJiZyLl9fZXNNb2R1bGU/cjp7ZGVmYXVsdDpyfSxsPW4oMzMpO3ZhciB1PXQuZ2V0Q2hpbGRTdGF0ZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ITAsbj0hMCxyPSEwLGk9MCxvPWUubGVuZ3RoO2k8bztpKyspe3ZhciBzPWVbaV07KCEwIT09cy5jaGVja2VkfHxzLmluZGV0ZXJtaW5hdGUpJiYodD0hMSxzLmRpc2FibGVkfHwocj0hMSkpLCghMSE9PXMuY2hlY2tlZHx8cy5pbmRldGVybWluYXRlKSYmKG49ITEpfXJldHVybnthbGw6dCxub25lOm4sYWxsV2l0aG91dERpc2FibGU6cixoYWxmOiF0JiYhbn19LGM9ZnVuY3Rpb24gZSh0KXtpZigwIT09dC5jaGlsZE5vZGVzLmxlbmd0aCl7dmFyIG49dSh0LmNoaWxkTm9kZXMpLHI9bi5hbGwsaT1uLm5vbmUsbz1uLmhhbGY7cj8odC5jaGVja2VkPSEwLHQuaW5kZXRlcm1pbmF0ZT0hMSk6bz8odC5jaGVja2VkPSExLHQuaW5kZXRlcm1pbmF0ZT0hMCk6aSYmKHQuY2hlY2tlZD0hMSx0LmluZGV0ZXJtaW5hdGU9ITEpO3ZhciBzPXQucGFyZW50O3MmJjAhPT1zLmxldmVsJiYodC5zdG9yZS5jaGVja1N0cmljdGx5fHxlKHMpKX19LGQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLnN0b3JlLnByb3BzLHI9ZS5kYXRhfHx7fSxpPW5bdF07aWYoImZ1bmN0aW9uIj09dHlwZW9mIGkpcmV0dXJuIGkocixlKTtpZigic3RyaW5nIj09dHlwZW9mIGkpcmV0dXJuIHJbaV07aWYodm9pZCAwPT09aSl7dmFyIG89clt0XTtyZXR1cm4gdm9pZCAwPT09bz8iIjpvfX0sZj0wLGg9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe2Zvcih2YXIgbiBpbiBmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfSh0aGlzLGUpLHRoaXMuaWQ9ZisrLHRoaXMudGV4dD1udWxsLHRoaXMuY2hlY2tlZD0hMSx0aGlzLmluZGV0ZXJtaW5hdGU9ITEsdGhpcy5kYXRhPW51bGwsdGhpcy5leHBhbmRlZD0hMSx0aGlzLnBhcmVudD1udWxsLHRoaXMudmlzaWJsZT0hMCx0KXQuaGFzT3duUHJvcGVydHkobikmJih0aGlzW25dPXRbbl0pO3RoaXMubGV2ZWw9MCx0aGlzLmxvYWRlZD0hMSx0aGlzLmNoaWxkTm9kZXM9W10sdGhpcy5sb2FkaW5nPSExLHRoaXMucGFyZW50JiYodGhpcy5sZXZlbD10aGlzLnBhcmVudC5sZXZlbCsxKTt2YXIgcj10aGlzLnN0b3JlO2lmKCFyKXRocm93IG5ldyBFcnJvcigiW05vZGVdc3RvcmUgaXMgcmVxdWlyZWQhIik7ci5yZWdpc3Rlck5vZGUodGhpcyk7dmFyIGk9ci5wcm9wcztpZihpJiZ2b2lkIDAhPT1pLmlzTGVhZil7dmFyIG89ZCh0aGlzLCJpc0xlYWYiKTsiYm9vbGVhbiI9PXR5cGVvZiBvJiYodGhpcy5pc0xlYWZCeVVzZXI9byl9aWYoITAhPT1yLmxhenkmJnRoaXMuZGF0YT8odGhpcy5zZXREYXRhKHRoaXMuZGF0YSksci5kZWZhdWx0RXhwYW5kQWxsJiYodGhpcy5leHBhbmRlZD0hMCkpOnRoaXMubGV2ZWw+MCYmci5sYXp5JiZyLmRlZmF1bHRFeHBhbmRBbGwmJnRoaXMuZXhwYW5kKCksQXJyYXkuaXNBcnJheSh0aGlzLmRhdGEpfHwoMCxsLm1hcmtOb2RlRGF0YSkodGhpcyx0aGlzLmRhdGEpLHRoaXMuZGF0YSl7dmFyIHM9ci5kZWZhdWx0RXhwYW5kZWRLZXlzLGE9ci5rZXk7YSYmcyYmLTEhPT1zLmluZGV4T2YodGhpcy5rZXkpJiZ0aGlzLmV4cGFuZChudWxsLHIuYXV0b0V4cGFuZFBhcmVudCksYSYmdm9pZCAwIT09ci5jdXJyZW50Tm9kZUtleSYmdGhpcy5rZXk9PT1yLmN1cnJlbnROb2RlS2V5JiYoci5jdXJyZW50Tm9kZT10aGlzKSxyLmxhenkmJnIuX2luaXREZWZhdWx0Q2hlY2tlZE5vZGUodGhpcyksdGhpcy51cGRhdGVMZWFmU3RhdGUoKX19cmV0dXJuIGUucHJvdG90eXBlLnNldERhdGE9ZnVuY3Rpb24oZSl7QXJyYXkuaXNBcnJheShlKXx8KDAsbC5tYXJrTm9kZURhdGEpKHRoaXMsZSksdGhpcy5kYXRhPWUsdGhpcy5jaGlsZE5vZGVzPVtdO2Zvcih2YXIgdD12b2lkIDAsbj0wLHI9KHQ9MD09PXRoaXMubGV2ZWwmJnRoaXMuZGF0YSBpbnN0YW5jZW9mIEFycmF5P3RoaXMuZGF0YTpkKHRoaXMsImNoaWxkcmVuIil8fFtdKS5sZW5ndGg7bjxyO24rKyl0aGlzLmluc2VydENoaWxkKHtkYXRhOnRbbl19KX0sZS5wcm90b3R5cGUuY29udGFpbnM9ZnVuY3Rpb24oZSl7dmFyIHQ9IShhcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSl8fGFyZ3VtZW50c1sxXTtyZXR1cm4gZnVuY3Rpb24gbihyKXtmb3IodmFyIGk9ci5jaGlsZE5vZGVzfHxbXSxvPSExLHM9MCxhPWkubGVuZ3RoO3M8YTtzKyspe3ZhciBsPWlbc107aWYobD09PWV8fHQmJm4obCkpe289ITA7YnJlYWt9fXJldHVybiBvfSh0aGlzKX0sZS5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wYXJlbnQ7ZSYmZS5yZW1vdmVDaGlsZCh0aGlzKX0sZS5wcm90b3R5cGUuaW5zZXJ0Q2hpbGQ9ZnVuY3Rpb24odCxuLHIpe2lmKCF0KXRocm93IG5ldyBFcnJvcigiaW5zZXJ0Q2hpbGQgZXJyb3I6IGNoaWxkIGlzIHJlcXVpcmVkLiIpO2lmKCEodCBpbnN0YW5jZW9mIGUpKXtpZighcil7dmFyIGk9dGhpcy5nZXRDaGlsZHJlbighMCk7LTE9PT1pLmluZGV4T2YodC5kYXRhKSYmKHZvaWQgMD09PW58fG48MD9pLnB1c2godC5kYXRhKTppLnNwbGljZShuLDAsdC5kYXRhKSl9KDAsYS5kZWZhdWx0KSh0LHtwYXJlbnQ6dGhpcyxzdG9yZTp0aGlzLnN0b3JlfSksdD1uZXcgZSh0KX10LmxldmVsPXRoaXMubGV2ZWwrMSx2b2lkIDA9PT1ufHxuPDA/dGhpcy5jaGlsZE5vZGVzLnB1c2godCk6dGhpcy5jaGlsZE5vZGVzLnNwbGljZShuLDAsdCksdGhpcy51cGRhdGVMZWFmU3RhdGUoKX0sZS5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlPWZ1bmN0aW9uKGUsdCl7dmFyIG49dm9pZCAwO3QmJihuPXRoaXMuY2hpbGROb2Rlcy5pbmRleE9mKHQpKSx0aGlzLmluc2VydENoaWxkKGUsbil9LGUucHJvdG90eXBlLmluc2VydEFmdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIG49dm9pZCAwO3QmJi0xIT09KG49dGhpcy5jaGlsZE5vZGVzLmluZGV4T2YodCkpJiYobis9MSksdGhpcy5pbnNlcnRDaGlsZChlLG4pfSxlLnByb3RvdHlwZS5yZW1vdmVDaGlsZD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmdldENoaWxkcmVuKCl8fFtdLG49dC5pbmRleE9mKGUuZGF0YSk7bj4tMSYmdC5zcGxpY2UobiwxKTt2YXIgcj10aGlzLmNoaWxkTm9kZXMuaW5kZXhPZihlKTtyPi0xJiYodGhpcy5zdG9yZSYmdGhpcy5zdG9yZS5kZXJlZ2lzdGVyTm9kZShlKSxlLnBhcmVudD1udWxsLHRoaXMuY2hpbGROb2Rlcy5zcGxpY2UociwxKSksdGhpcy51cGRhdGVMZWFmU3RhdGUoKX0sZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGRCeURhdGE9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PW51bGwsbj0wO248dGhpcy5jaGlsZE5vZGVzLmxlbmd0aDtuKyspaWYodGhpcy5jaGlsZE5vZGVzW25dLmRhdGE9PT1lKXt0PXRoaXMuY2hpbGROb2Rlc1tuXTticmVha310JiZ0aGlzLnJlbW92ZUNoaWxkKHQpfSxlLnByb3RvdHlwZS5leHBhbmQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLHI9ZnVuY3Rpb24oKXtpZih0KWZvcih2YXIgcj1uLnBhcmVudDtyLmxldmVsPjA7KXIuZXhwYW5kZWQ9ITAscj1yLnBhcmVudDtuLmV4cGFuZGVkPSEwLGUmJmUoKX07dGhpcy5zaG91bGRMb2FkRGF0YSgpP3RoaXMubG9hZERhdGEoZnVuY3Rpb24oZSl7ZSBpbnN0YW5jZW9mIEFycmF5JiYobi5jaGVja2VkP24uc2V0Q2hlY2tlZCghMCwhMCk6bi5zdG9yZS5jaGVja1N0cmljdGx5fHxjKG4pLHIoKSl9KTpyKCl9LGUucHJvdG90eXBlLmRvQ3JlYXRlQ2hpbGRyZW49ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fTtlLmZvckVhY2goZnVuY3Rpb24oZSl7dC5pbnNlcnRDaGlsZCgoMCxhLmRlZmF1bHQpKHtkYXRhOmV9LG4pLHZvaWQgMCwhMCl9KX0sZS5wcm90b3R5cGUuY29sbGFwc2U9ZnVuY3Rpb24oKXt0aGlzLmV4cGFuZGVkPSExfSxlLnByb3RvdHlwZS5zaG91bGRMb2FkRGF0YT1mdW5jdGlvbigpe3JldHVybiEwPT09dGhpcy5zdG9yZS5sYXp5JiZ0aGlzLnN0b3JlLmxvYWQmJiF0aGlzLmxvYWRlZH0sZS5wcm90b3R5cGUudXBkYXRlTGVhZlN0YXRlPWZ1bmN0aW9uKCl7aWYoITAhPT10aGlzLnN0b3JlLmxhenl8fCEwPT09dGhpcy5sb2FkZWR8fHZvaWQgMD09PXRoaXMuaXNMZWFmQnlVc2VyKXt2YXIgZT10aGlzLmNoaWxkTm9kZXM7IXRoaXMuc3RvcmUubGF6eXx8ITA9PT10aGlzLnN0b3JlLmxhenkmJiEwPT09dGhpcy5sb2FkZWQ/dGhpcy5pc0xlYWY9IWV8fDA9PT1lLmxlbmd0aDp0aGlzLmlzTGVhZj0hMX1lbHNlIHRoaXMuaXNMZWFmPXRoaXMuaXNMZWFmQnlVc2VyfSxlLnByb3RvdHlwZS5zZXRDaGVja2VkPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPXRoaXM7aWYodGhpcy5pbmRldGVybWluYXRlPSJoYWxmIj09PWUsdGhpcy5jaGVja2VkPSEwPT09ZSwhdGhpcy5zdG9yZS5jaGVja1N0cmljdGx5KXtpZighdGhpcy5zaG91bGRMb2FkRGF0YSgpfHx0aGlzLnN0b3JlLmNoZWNrRGVzY2VuZGFudHMpe3ZhciBzPWZ1bmN0aW9uKCl7dmFyIG49dShvLmNoaWxkTm9kZXMpLGk9bi5hbGwscz1uLmFsbFdpdGhvdXREaXNhYmxlO28uaXNMZWFmfHxpfHwhc3x8KG8uY2hlY2tlZD0hMSxlPSExKTt2YXIgYT1mdW5jdGlvbigpe2lmKHQpe2Zvcih2YXIgbj1vLmNoaWxkTm9kZXMsaT0wLHM9bi5sZW5ndGg7aTxzO2krKyl7dmFyIGE9bltpXTtyPXJ8fCExIT09ZTt2YXIgbD1hLmRpc2FibGVkP2EuY2hlY2tlZDpyO2Euc2V0Q2hlY2tlZChsLHQsITAscil9dmFyIGM9dShuKSxkPWMuaGFsZixmPWMuYWxsO2Z8fChvLmNoZWNrZWQ9ZixvLmluZGV0ZXJtaW5hdGU9ZCl9fTtpZihvLnNob3VsZExvYWREYXRhKCkpcmV0dXJuIG8ubG9hZERhdGEoZnVuY3Rpb24oKXthKCksYyhvKX0se2NoZWNrZWQ6ITEhPT1lfSkse3Y6dm9pZCAwfTthKCl9KCk7aWYoIm9iamVjdCI9PT0odm9pZCAwPT09cz8idW5kZWZpbmVkIjppKHMpKSlyZXR1cm4gcy52fXZhciBhPXRoaXMucGFyZW50O2EmJjAhPT1hLmxldmVsJiYobnx8YyhhKSl9fSxlLnByb3RvdHlwZS5nZXRDaGlsZHJlbj1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdJiZhcmd1bWVudHNbMF07aWYoMD09PXRoaXMubGV2ZWwpcmV0dXJuIHRoaXMuZGF0YTt2YXIgdD10aGlzLmRhdGE7aWYoIXQpcmV0dXJuIG51bGw7dmFyIG49dGhpcy5zdG9yZS5wcm9wcyxyPSJjaGlsZHJlbiI7cmV0dXJuIG4mJihyPW4uY2hpbGRyZW58fCJjaGlsZHJlbiIpLHZvaWQgMD09PXRbcl0mJih0W3JdPW51bGwpLGUmJiF0W3JdJiYodFtyXT1bXSksdFtyXX0sZS5wcm90b3R5cGUudXBkYXRlQ2hpbGRyZW49ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy5nZXRDaGlsZHJlbigpfHxbXSxuPXRoaXMuY2hpbGROb2Rlcy5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUuZGF0YX0pLHI9e30saT1bXTt0LmZvckVhY2goZnVuY3Rpb24oZSx0KXtlW2wuTk9ERV9LRVldP3JbZVtsLk5PREVfS0VZXV09e2luZGV4OnQsZGF0YTplfTppLnB1c2goe2luZGV4OnQsZGF0YTplfSl9KSx0aGlzLnN0b3JlLmxhenl8fG4uZm9yRWFjaChmdW5jdGlvbih0KXtyW3RbbC5OT0RFX0tFWV1dfHxlLnJlbW92ZUNoaWxkQnlEYXRhKHQpfSksaS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBuPXQuaW5kZXgscj10LmRhdGE7ZS5pbnNlcnRDaGlsZCh7ZGF0YTpyfSxuKX0pLHRoaXMudXBkYXRlTGVhZlN0YXRlKCl9LGUucHJvdG90eXBlLmxvYWREYXRhPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e307aWYoITAhPT10aGlzLnN0b3JlLmxhenl8fCF0aGlzLnN0b3JlLmxvYWR8fHRoaXMubG9hZGVkfHx0aGlzLmxvYWRpbmcmJiFPYmplY3Qua2V5cyhuKS5sZW5ndGgpZSYmZS5jYWxsKHRoaXMpO2Vsc2V7dGhpcy5sb2FkaW5nPSEwO3RoaXMuc3RvcmUubG9hZCh0aGlzLGZ1bmN0aW9uKHIpe3QubG9hZGVkPSEwLHQubG9hZGluZz0hMSx0LmNoaWxkTm9kZXM9W10sdC5kb0NyZWF0ZUNoaWxkcmVuKHIsbiksdC51cGRhdGVMZWFmU3RhdGUoKSxjKHQpLGUmJmUuY2FsbCh0LHIpfSl9fSxvKGUsW3trZXk6ImxhYmVsIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZCh0aGlzLCJsYWJlbCIpfX0se2tleToia2V5IixnZXQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnN0b3JlLmtleTtyZXR1cm4gdGhpcy5kYXRhP3RoaXMuZGF0YVtlXTpudWxsfX0se2tleToiZGlzYWJsZWQiLGdldDpmdW5jdGlvbigpe3JldHVybiBkKHRoaXMsImRpc2FibGVkIil9fSx7a2V5OiJuZXh0U2libGluZyIsZ2V0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wYXJlbnQ7aWYoZSl7dmFyIHQ9ZS5jaGlsZE5vZGVzLmluZGV4T2YodGhpcyk7aWYodD4tMSlyZXR1cm4gZS5jaGlsZE5vZGVzW3QrMV19cmV0dXJuIG51bGx9fSx7a2V5OiJwcmV2aW91c1NpYmxpbmciLGdldDpmdW5jdGlvbigpe3ZhciBlPXRoaXMucGFyZW50O2lmKGUpe3ZhciB0PWUuY2hpbGROb2Rlcy5pbmRleE9mKHRoaXMpO2lmKHQ+LTEpcmV0dXJuIHQ+MD9lLmNoaWxkTm9kZXNbdC0xXTpudWxsfXJldHVybiBudWxsfX1dKSxlfSgpO3QuZGVmYXVsdD1ofSwyNTI6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigyNTMpLGk9bi5uKHIpLG89bigyNTQpLHM9bigwKShpLmEsby5hLCExLG51bGwsbnVsbCxudWxsKTt0LmRlZmF1bHQ9cy5leHBvcnRzfSwyNTM6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9YShuKDIxKSksaT1hKG4oMTYpKSxvPWEobigxKSkscz1uKDMzKTtmdW5jdGlvbiBhKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX10LmRlZmF1bHQ9e25hbWU6IkVsVHJlZU5vZGUiLGNvbXBvbmVudE5hbWU6IkVsVHJlZU5vZGUiLG1peGluczpbby5kZWZhdWx0XSxwcm9wczp7bm9kZTp7ZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybnt9fX0scHJvcHM6e30scmVuZGVyQ29udGVudDpGdW5jdGlvbixyZW5kZXJBZnRlckV4cGFuZDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9fSxjb21wb25lbnRzOntFbENvbGxhcHNlVHJhbnNpdGlvbjpyLmRlZmF1bHQsRWxDaGVja2JveDppLmRlZmF1bHQsTm9kZUNvbnRlbnQ6e3Byb3BzOntub2RlOntyZXF1aXJlZDohMH19LHJlbmRlcjpmdW5jdGlvbihlKXt2YXIgdD10aGlzLiRwYXJlbnQsbj10LnRyZWUscj10aGlzLm5vZGUsaT1yLmRhdGEsbz1yLnN0b3JlO3JldHVybiB0LnJlbmRlckNvbnRlbnQ/dC5yZW5kZXJDb250ZW50LmNhbGwodC5fcmVuZGVyUHJveHksZSx7X3NlbGY6bi4kdm5vZGUuY29udGV4dCxub2RlOnIsZGF0YTppLHN0b3JlOm99KTpuLiRzY29wZWRTbG90cy5kZWZhdWx0P24uJHNjb3BlZFNsb3RzLmRlZmF1bHQoe25vZGU6cixkYXRhOml9KTplKCJzcGFuIix7Y2xhc3M6ImVsLXRyZWUtbm9kZV9fbGFiZWwifSxbci5sYWJlbF0pfX19LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57dHJlZTpudWxsLGV4cGFuZGVkOiExLGNoaWxkTm9kZVJlbmRlcmVkOiExLHNob3dDaGVja2JveDohMSxvbGRDaGVja2VkOm51bGwsb2xkSW5kZXRlcm1pbmF0ZTpudWxsfX0sd2F0Y2g6eyJub2RlLmluZGV0ZXJtaW5hdGUiOmZ1bmN0aW9uKGUpe3RoaXMuaGFuZGxlU2VsZWN0Q2hhbmdlKHRoaXMubm9kZS5jaGVja2VkLGUpfSwibm9kZS5jaGVja2VkIjpmdW5jdGlvbihlKXt0aGlzLmhhbmRsZVNlbGVjdENoYW5nZShlLHRoaXMubm9kZS5pbmRldGVybWluYXRlKX0sIm5vZGUuZXhwYW5kZWQiOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXtyZXR1cm4gdC5leHBhbmRlZD1lfSksZSYmKHRoaXMuY2hpbGROb2RlUmVuZGVyZWQ9ITApfX0sbWV0aG9kczp7Z2V0Tm9kZUtleTpmdW5jdGlvbihlKXtyZXR1cm4oMCxzLmdldE5vZGVLZXkpKHRoaXMudHJlZS5ub2RlS2V5LGUuZGF0YSl9LGhhbmRsZVNlbGVjdENoYW5nZTpmdW5jdGlvbihlLHQpe3RoaXMub2xkQ2hlY2tlZCE9PWUmJnRoaXMub2xkSW5kZXRlcm1pbmF0ZSE9PXQmJnRoaXMudHJlZS4kZW1pdCgiY2hlY2stY2hhbmdlIix0aGlzLm5vZGUuZGF0YSxlLHQpLHRoaXMub2xkQ2hlY2tlZD1lLHRoaXMuaW5kZXRlcm1pbmF0ZT10fSxoYW5kbGVDbGljazpmdW5jdGlvbigpe3ZhciBlPXRoaXMudHJlZS5zdG9yZTtlLnNldEN1cnJlbnROb2RlKHRoaXMubm9kZSksdGhpcy50cmVlLiRlbWl0KCJjdXJyZW50LWNoYW5nZSIsZS5jdXJyZW50Tm9kZT9lLmN1cnJlbnROb2RlLmRhdGE6bnVsbCxlLmN1cnJlbnROb2RlKSx0aGlzLnRyZWUuY3VycmVudE5vZGU9dGhpcyx0aGlzLnRyZWUuZXhwYW5kT25DbGlja05vZGUmJnRoaXMuaGFuZGxlRXhwYW5kSWNvbkNsaWNrKCksdGhpcy50cmVlLmNoZWNrT25DbGlja05vZGUmJiF0aGlzLm5vZGUuZGlzYWJsZWQmJnRoaXMuaGFuZGxlQ2hlY2tDaGFuZ2UobnVsbCx7dGFyZ2V0OntjaGVja2VkOiF0aGlzLm5vZGUuY2hlY2tlZH19KSx0aGlzLnRyZWUuJGVtaXQoIm5vZGUtY2xpY2siLHRoaXMubm9kZS5kYXRhLHRoaXMubm9kZSx0aGlzKX0saGFuZGxlQ29udGV4dE1lbnU6ZnVuY3Rpb24oZSl7dGhpcy50cmVlLl9ldmVudHNbIm5vZGUtY29udGV4dG1lbnUiXSYmdGhpcy50cmVlLl9ldmVudHNbIm5vZGUtY29udGV4dG1lbnUiXS5sZW5ndGg+MCYmKGUuc3RvcFByb3BhZ2F0aW9uKCksZS5wcmV2ZW50RGVmYXVsdCgpKSx0aGlzLnRyZWUuJGVtaXQoIm5vZGUtY29udGV4dG1lbnUiLGUsdGhpcy5ub2RlLmRhdGEsdGhpcy5ub2RlLHRoaXMpfSxoYW5kbGVFeHBhbmRJY29uQ2xpY2s6ZnVuY3Rpb24oKXt0aGlzLm5vZGUuaXNMZWFmfHwodGhpcy5leHBhbmRlZD8odGhpcy50cmVlLiRlbWl0KCJub2RlLWNvbGxhcHNlIix0aGlzLm5vZGUuZGF0YSx0aGlzLm5vZGUsdGhpcyksdGhpcy5ub2RlLmNvbGxhcHNlKCkpOih0aGlzLm5vZGUuZXhwYW5kKCksdGhpcy4kZW1pdCgibm9kZS1leHBhbmQiLHRoaXMubm9kZS5kYXRhLHRoaXMubm9kZSx0aGlzKSkpfSxoYW5kbGVDaGVja0NoYW5nZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7dGhpcy5ub2RlLnNldENoZWNrZWQodC50YXJnZXQuY2hlY2tlZCwhdGhpcy50cmVlLmNoZWNrU3RyaWN0bHkpLHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7dmFyIGU9bi50cmVlLnN0b3JlO24udHJlZS4kZW1pdCgiY2hlY2siLG4ubm9kZS5kYXRhLHtjaGVja2VkTm9kZXM6ZS5nZXRDaGVja2VkTm9kZXMoKSxjaGVja2VkS2V5czplLmdldENoZWNrZWRLZXlzKCksaGFsZkNoZWNrZWROb2RlczplLmdldEhhbGZDaGVja2VkTm9kZXMoKSxoYWxmQ2hlY2tlZEtleXM6ZS5nZXRIYWxmQ2hlY2tlZEtleXMoKX0pfSl9LGhhbmRsZUNoaWxkTm9kZUV4cGFuZDpmdW5jdGlvbihlLHQsbil7dGhpcy5icm9hZGNhc3QoIkVsVHJlZU5vZGUiLCJ0cmVlLW5vZGUtZXhwYW5kIix0KSx0aGlzLnRyZWUuJGVtaXQoIm5vZGUtZXhwYW5kIixlLHQsbil9LGhhbmRsZURyYWdTdGFydDpmdW5jdGlvbihlKXt0aGlzLnRyZWUuZHJhZ2dhYmxlJiZ0aGlzLnRyZWUuJGVtaXQoInRyZWUtbm9kZS1kcmFnLXN0YXJ0IixlLHRoaXMpfSxoYW5kbGVEcmFnT3ZlcjpmdW5jdGlvbihlKXt0aGlzLnRyZWUuZHJhZ2dhYmxlJiYodGhpcy50cmVlLiRlbWl0KCJ0cmVlLW5vZGUtZHJhZy1vdmVyIixlLHRoaXMpLGUucHJldmVudERlZmF1bHQoKSl9LGhhbmRsZURyb3A6ZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpfSxoYW5kbGVEcmFnRW5kOmZ1bmN0aW9uKGUpe3RoaXMudHJlZS5kcmFnZ2FibGUmJnRoaXMudHJlZS4kZW1pdCgidHJlZS1ub2RlLWRyYWctZW5kIixlLHRoaXMpfX0sY3JlYXRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLiRwYXJlbnQ7dC5pc1RyZWU/dGhpcy50cmVlPXQ6dGhpcy50cmVlPXQudHJlZTt2YXIgbj10aGlzLnRyZWU7bnx8Y29uc29sZS53YXJuKCJDYW4gbm90IGZpbmQgbm9kZSdzIHRyZWUuIik7dmFyIHI9KG4ucHJvcHN8fHt9KS5jaGlsZHJlbnx8ImNoaWxkcmVuIjt0aGlzLiR3YXRjaCgibm9kZS5kYXRhLiIrcixmdW5jdGlvbigpe2Uubm9kZS51cGRhdGVDaGlsZHJlbigpfSksdGhpcy5zaG93Q2hlY2tib3g9bi5zaG93Q2hlY2tib3gsdGhpcy5ub2RlLmV4cGFuZGVkJiYodGhpcy5leHBhbmRlZD0hMCx0aGlzLmNoaWxkTm9kZVJlbmRlcmVkPSEwKSx0aGlzLnRyZWUuYWNjb3JkaW9uJiZ0aGlzLiRvbigidHJlZS1ub2RlLWV4cGFuZCIsZnVuY3Rpb24odCl7ZS5ub2RlIT09dCYmZS5ub2RlLmNvbGxhcHNlKCl9KX19fSwyNTQ6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXMsbj10LiRjcmVhdGVFbGVtZW50LHI9dC5fc2VsZi5fY3x8bjtyZXR1cm4gcigiZGl2Iix7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6dC5ub2RlLnZpc2libGUsZXhwcmVzc2lvbjoibm9kZS52aXNpYmxlIn1dLHJlZjoibm9kZSIsc3RhdGljQ2xhc3M6ImVsLXRyZWUtbm9kZSIsY2xhc3M6eyJpcy1leHBhbmRlZCI6dC5leHBhbmRlZCwiaXMtY3VycmVudCI6dC50cmVlLnN0b3JlLmN1cnJlbnROb2RlPT09dC5ub2RlLCJpcy1oaWRkZW4iOiF0Lm5vZGUudmlzaWJsZSwiaXMtZm9jdXNhYmxlIjohdC5ub2RlLmRpc2FibGVkLCJpcy1jaGVja2VkIjohdC5ub2RlLmRpc2FibGVkJiZ0Lm5vZGUuY2hlY2tlZH0sYXR0cnM6e3JvbGU6InRyZWVpdGVtIix0YWJpbmRleDoiLTEiLCJhcmlhLWV4cGFuZGVkIjp0LmV4cGFuZGVkLCJhcmlhLWRpc2FibGVkIjp0Lm5vZGUuZGlzYWJsZWQsImFyaWEtY2hlY2tlZCI6dC5ub2RlLmNoZWNrZWQsZHJhZ2dhYmxlOnQudHJlZS5kcmFnZ2FibGV9LG9uOntjbGljazpmdW5jdGlvbihlKXtlLnN0b3BQcm9wYWdhdGlvbigpLHQuaGFuZGxlQ2xpY2soZSl9LGNvbnRleHRtZW51OmZ1bmN0aW9uKHQpe3JldHVybiBlLmhhbmRsZUNvbnRleHRNZW51KHQpfSxkcmFnc3RhcnQ6ZnVuY3Rpb24oZSl7ZS5zdG9wUHJvcGFnYXRpb24oKSx0LmhhbmRsZURyYWdTdGFydChlKX0sZHJhZ292ZXI6ZnVuY3Rpb24oZSl7ZS5zdG9wUHJvcGFnYXRpb24oKSx0LmhhbmRsZURyYWdPdmVyKGUpfSxkcmFnZW5kOmZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCksdC5oYW5kbGVEcmFnRW5kKGUpfSxkcm9wOmZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCksdC5oYW5kbGVEcm9wKGUpfX19LFtyKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtdHJlZS1ub2RlX19jb250ZW50IixzdHlsZTp7InBhZGRpbmctbGVmdCI6KHQubm9kZS5sZXZlbC0xKSp0LnRyZWUuaW5kZW50KyJweCJ9fSxbcigic3BhbiIse2NsYXNzOlt7ImlzLWxlYWYiOnQubm9kZS5pc0xlYWYsZXhwYW5kZWQ6IXQubm9kZS5pc0xlYWYmJnQuZXhwYW5kZWR9LCJlbC10cmVlLW5vZGVfX2V4cGFuZC1pY29uIix0LnRyZWUuaWNvbkNsYXNzP3QudHJlZS5pY29uQ2xhc3M6ImVsLWljb24tY2FyZXQtcmlnaHQiXSxvbjp7Y2xpY2s6ZnVuY3Rpb24oZSl7ZS5zdG9wUHJvcGFnYXRpb24oKSx0LmhhbmRsZUV4cGFuZEljb25DbGljayhlKX19fSksdC5zaG93Q2hlY2tib3g/cigiZWwtY2hlY2tib3giLHthdHRyczp7aW5kZXRlcm1pbmF0ZTp0Lm5vZGUuaW5kZXRlcm1pbmF0ZSxkaXNhYmxlZDohIXQubm9kZS5kaXNhYmxlZH0sb246e2NoYW5nZTp0LmhhbmRsZUNoZWNrQ2hhbmdlfSxuYXRpdmVPbjp7Y2xpY2s6ZnVuY3Rpb24oZSl7ZS5zdG9wUHJvcGFnYXRpb24oKX19LG1vZGVsOnt2YWx1ZTp0Lm5vZGUuY2hlY2tlZCxjYWxsYmFjazpmdW5jdGlvbihlKXt0LiRzZXQodC5ub2RlLCJjaGVja2VkIixlKX0sZXhwcmVzc2lvbjoibm9kZS5jaGVja2VkIn19KTp0Ll9lKCksdC5ub2RlLmxvYWRpbmc/cigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC10cmVlLW5vZGVfX2xvYWRpbmctaWNvbiBlbC1pY29uLWxvYWRpbmcifSk6dC5fZSgpLHIoIm5vZGUtY29udGVudCIse2F0dHJzOntub2RlOnQubm9kZX19KV0sMSkscigiZWwtY29sbGFwc2UtdHJhbnNpdGlvbiIsWyF0LnJlbmRlckFmdGVyRXhwYW5kfHx0LmNoaWxkTm9kZVJlbmRlcmVkP3IoImRpdiIse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOnQuZXhwYW5kZWQsZXhwcmVzc2lvbjoiZXhwYW5kZWQifV0sc3RhdGljQ2xhc3M6ImVsLXRyZWUtbm9kZV9fY2hpbGRyZW4iLGF0dHJzOntyb2xlOiJncm91cCIsImFyaWEtZXhwYW5kZWQiOnQuZXhwYW5kZWR9fSx0Ll9sKHQubm9kZS5jaGlsZE5vZGVzLGZ1bmN0aW9uKGUpe3JldHVybiByKCJlbC10cmVlLW5vZGUiLHtrZXk6dC5nZXROb2RlS2V5KGUpLGF0dHJzOnsicmVuZGVyLWNvbnRlbnQiOnQucmVuZGVyQ29udGVudCwicmVuZGVyLWFmdGVyLWV4cGFuZCI6dC5yZW5kZXJBZnRlckV4cGFuZCxub2RlOmV9LG9uOnsibm9kZS1leHBhbmQiOnQuaGFuZGxlQ2hpbGROb2RlRXhwYW5kfX0pfSkpOnQuX2UoKV0pXSwxKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn0sMjU1OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLXRyZWUiLGNsYXNzOnsiZWwtdHJlZS0taGlnaGxpZ2h0LWN1cnJlbnQiOmUuaGlnaGxpZ2h0Q3VycmVudCwiaXMtZHJhZ2dpbmciOiEhZS5kcmFnU3RhdGUuZHJhZ2dpbmdOb2RlLCJpcy1kcm9wLW5vdC1hbGxvdyI6IWUuZHJhZ1N0YXRlLmFsbG93RHJvcCwiaXMtZHJvcC1pbm5lciI6ImlubmVyIj09PWUuZHJhZ1N0YXRlLmRyb3BUeXBlfSxhdHRyczp7cm9sZToidHJlZSJ9fSxbZS5fbChlLnJvb3QuY2hpbGROb2RlcyxmdW5jdGlvbih0KXtyZXR1cm4gbigiZWwtdHJlZS1ub2RlIix7a2V5OmUuZ2V0Tm9kZUtleSh0KSxhdHRyczp7bm9kZTp0LHByb3BzOmUucHJvcHMsInJlbmRlci1hZnRlci1leHBhbmQiOmUucmVuZGVyQWZ0ZXJFeHBhbmQsInJlbmRlci1jb250ZW50IjplLnJlbmRlckNvbnRlbnR9LG9uOnsibm9kZS1leHBhbmQiOmUuaGFuZGxlTm9kZUV4cGFuZH19KX0pLGUuaXNFbXB0eT9uKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtdHJlZV9fZW1wdHktYmxvY2sifSxbbigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC10cmVlX19lbXB0eS10ZXh0In0sW2UuX3YoZS5fcyhlLmVtcHR5VGV4dCkpXSldKTplLl9lKCksbigiZGl2Iix7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6ZS5kcmFnU3RhdGUuc2hvd0Ryb3BJbmRpY2F0b3IsZXhwcmVzc2lvbjoiZHJhZ1N0YXRlLnNob3dEcm9wSW5kaWNhdG9yIn1dLHJlZjoiZHJvcEluZGljYXRvciIsc3RhdGljQ2xhc3M6ImVsLXRyZWVfX2Ryb3AtaW5kaWNhdG9yIn0pXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn0sMzpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCIya3ZBIil9LDMzOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByPXQuTk9ERV9LRVk9IiR0cmVlTm9kZUlkIjt0Lm1hcmtOb2RlRGF0YT1mdW5jdGlvbihlLHQpe3QmJiF0W3JdJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLHt2YWx1ZTplLmlkLGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiExLHdyaXRhYmxlOiExfSl9LHQuZ2V0Tm9kZUtleT1mdW5jdGlvbihlLHQpe3JldHVybiBlP3RbZV06dFtyXX0sdC5maW5kTmVhcmVzdENvbXBvbmVudD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1lO24mJiJCT0RZIiE9PW4udGFnTmFtZTspe2lmKG4uX192dWVfXyYmbi5fX3Z1ZV9fLiRvcHRpb25zLm5hbWU9PT10KXJldHVybiBuLl9fdnVlX187bj1uLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9fSw5OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImptYUMiKX19KX0sIjg4MC8iOmZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9bigiaEp4OCIpfSwiOTRWUSI6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCJZb2JrIiksaT1uKCJYOERPIiksbz1uKCJlNm4wIikscz17fTtuKCJoSng4IikocyxuKCJkU3pkIikoIml0ZXJhdG9yIiksZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLGUuZXhwb3J0cz1mdW5jdGlvbihlLHQsbil7ZS5wcm90b3R5cGU9cihzLHtuZXh0OmkoMSxuKX0pLG8oZSx0KyIgSXRlcmF0b3IiKX19LCI5YkJVIjpmdW5jdGlvbihlLHQsbil7bigibUNsdSIpO3ZhciByPW4oIkZlQmwiKS5PYmplY3Q7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gci5kZWZpbmVQcm9wZXJ0eShlLHQsbil9fSxCd2ZZOmZ1bmN0aW9uKGUsdCxuKXtuKCJmV2ZiIiksbigiTTZhMCIpLG4oIk9ZbHMiKSxuKCJRV2UvIiksZS5leHBvcnRzPW4oIkZlQmwiKS5TeW1ib2x9LEM0TVY6ZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz17ZGVmYXVsdDpuKCI5YkJVIiksX19lc01vZHVsZTohMH19LENYdzk6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcixpLG8scyxhPW4oIk80ZzgiKSxsPW4oIjdLdkQiKSx1PW4oIitaTUoiKSxjPW4oIlJZLzQiKSxkPW4oImtNMkUiKSxmPW4oIkVxakkiKSxoPW4oImxPbkoiKSxwPW4oIjJLeFIiKSxtPW4oIk5XdCsiKSx2PW4oInQ4eDkiKSxnPW4oIkw0MnUiKS5zZXQseT1uKCI4Mk11IikoKSxfPW4oInFBUlAiKSxiPW4oImRORGIiKSx4PW4oImlVYksiKSxDPW4oImZKVWIiKSx3PWwuVHlwZUVycm9yLGs9bC5wcm9jZXNzLFM9ayYmay52ZXJzaW9ucyxBPVMmJlMudjh8fCIiLEU9bC5Qcm9taXNlLE09InByb2Nlc3MiPT1jKGspLE89ZnVuY3Rpb24oKXt9LEQ9aT1fLmYsJD0hIWZ1bmN0aW9uKCl7dHJ5e3ZhciBlPUUucmVzb2x2ZSgxKSx0PShlLmNvbnN0cnVjdG9yPXt9KVtuKCJkU3pkIikoInNwZWNpZXMiKV09ZnVuY3Rpb24oZSl7ZShPLE8pfTtyZXR1cm4oTXx8ImZ1bmN0aW9uIj09dHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCkmJmUudGhlbihPKWluc3RhbmNlb2YgdCYmMCE9PUEuaW5kZXhPZigiNi42IikmJi0xPT09eC5pbmRleE9mKCJDaHJvbWUvNjYiKX1jYXRjaChlKXt9fSgpLFQ9ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuISghZihlKXx8ImZ1bmN0aW9uIiE9dHlwZW9mKHQ9ZS50aGVuKSkmJnR9LFA9ZnVuY3Rpb24oZSx0KXtpZighZS5fbil7ZS5fbj0hMDt2YXIgbj1lLl9jO3koZnVuY3Rpb24oKXtmb3IodmFyIHI9ZS5fdixpPTE9PWUuX3Msbz0wLHM9ZnVuY3Rpb24odCl7dmFyIG4sbyxzLGE9aT90Lm9rOnQuZmFpbCxsPXQucmVzb2x2ZSx1PXQucmVqZWN0LGM9dC5kb21haW47dHJ5e2E/KGl8fCgyPT1lLl9oJiZJKGUpLGUuX2g9MSksITA9PT1hP249cjooYyYmYy5lbnRlcigpLG49YShyKSxjJiYoYy5leGl0KCkscz0hMCkpLG49PT10LnByb21pc2U/dSh3KCJQcm9taXNlLWNoYWluIGN5Y2xlIikpOihvPVQobikpP28uY2FsbChuLGwsdSk6bChuKSk6dShyKX1jYXRjaChlKXtjJiYhcyYmYy5leGl0KCksdShlKX19O24ubGVuZ3RoPm87KXMobltvKytdKTtlLl9jPVtdLGUuX249ITEsdCYmIWUuX2gmJk4oZSl9KX19LE49ZnVuY3Rpb24oZSl7Zy5jYWxsKGwsZnVuY3Rpb24oKXt2YXIgdCxuLHIsaT1lLl92LG89RihlKTtpZihvJiYodD1iKGZ1bmN0aW9uKCl7TT9rLmVtaXQoInVuaGFuZGxlZFJlamVjdGlvbiIsaSxlKToobj1sLm9udW5oYW5kbGVkcmVqZWN0aW9uKT9uKHtwcm9taXNlOmUscmVhc29uOml9KToocj1sLmNvbnNvbGUpJiZyLmVycm9yJiZyLmVycm9yKCJVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24iLGkpfSksZS5faD1NfHxGKGUpPzI6MSksZS5fYT12b2lkIDAsbyYmdC5lKXRocm93IHQudn0pfSxGPWZ1bmN0aW9uKGUpe3JldHVybiAxIT09ZS5faCYmMD09PShlLl9hfHxlLl9jKS5sZW5ndGh9LEk9ZnVuY3Rpb24oZSl7Zy5jYWxsKGwsZnVuY3Rpb24oKXt2YXIgdDtNP2suZW1pdCgicmVqZWN0aW9uSGFuZGxlZCIsZSk6KHQ9bC5vbnJlamVjdGlvbmhhbmRsZWQpJiZ0KHtwcm9taXNlOmUscmVhc29uOmUuX3Z9KX0pfSxSPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dC5fZHx8KHQuX2Q9ITAsKHQ9dC5fd3x8dCkuX3Y9ZSx0Ll9zPTIsdC5fYXx8KHQuX2E9dC5fYy5zbGljZSgpKSxQKHQsITApKX0saj1mdW5jdGlvbihlKXt2YXIgdCxuPXRoaXM7aWYoIW4uX2Qpe24uX2Q9ITAsbj1uLl93fHxuO3RyeXtpZihuPT09ZSl0aHJvdyB3KCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZiIpOyh0PVQoZSkpP3koZnVuY3Rpb24oKXt2YXIgcj17X3c6bixfZDohMX07dHJ5e3QuY2FsbChlLHUoaixyLDEpLHUoUixyLDEpKX1jYXRjaChlKXtSLmNhbGwocixlKX19KToobi5fdj1lLG4uX3M9MSxQKG4sITEpKX1jYXRjaChlKXtSLmNhbGwoe193Om4sX2Q6ITF9LGUpfX19OyR8fChFPWZ1bmN0aW9uKGUpe3AodGhpcyxFLCJQcm9taXNlIiwiX2giKSxoKGUpLHIuY2FsbCh0aGlzKTt0cnl7ZSh1KGosdGhpcywxKSx1KFIsdGhpcywxKSl9Y2F0Y2goZSl7Ui5jYWxsKHRoaXMsZSl9fSwocj1mdW5jdGlvbihlKXt0aGlzLl9jPVtdLHRoaXMuX2E9dm9pZCAwLHRoaXMuX3M9MCx0aGlzLl9kPSExLHRoaXMuX3Y9dm9pZCAwLHRoaXMuX2g9MCx0aGlzLl9uPSExfSkucHJvdG90eXBlPW4oInhIL2oiKShFLnByb3RvdHlwZSx7dGhlbjpmdW5jdGlvbihlLHQpe3ZhciBuPUQodih0aGlzLEUpKTtyZXR1cm4gbi5vaz0iZnVuY3Rpb24iIT10eXBlb2YgZXx8ZSxuLmZhaWw9ImZ1bmN0aW9uIj09dHlwZW9mIHQmJnQsbi5kb21haW49TT9rLmRvbWFpbjp2b2lkIDAsdGhpcy5fYy5wdXNoKG4pLHRoaXMuX2EmJnRoaXMuX2EucHVzaChuKSx0aGlzLl9zJiZQKHRoaXMsITEpLG4ucHJvbWlzZX0sY2F0Y2g6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMudGhlbih2b2lkIDAsZSl9fSksbz1mdW5jdGlvbigpe3ZhciBlPW5ldyByO3RoaXMucHJvbWlzZT1lLHRoaXMucmVzb2x2ZT11KGosZSwxKSx0aGlzLnJlamVjdD11KFIsZSwxKX0sXy5mPUQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1FfHxlPT09cz9uZXcgbyhlKTppKGUpfSksZChkLkcrZC5XK2QuRiohJCx7UHJvbWlzZTpFfSksbigiZTZuMCIpKEUsIlByb21pc2UiKSxuKCJiUnJNIikoIlByb21pc2UiKSxzPW4oIkZlQmwiKS5Qcm9taXNlLGQoZC5TK2QuRiohJCwiUHJvbWlzZSIse3JlamVjdDpmdW5jdGlvbihlKXt2YXIgdD1EKHRoaXMpO3JldHVybigwLHQucmVqZWN0KShlKSx0LnByb21pc2V9fSksZChkLlMrZC5GKihhfHwhJCksIlByb21pc2UiLHtyZXNvbHZlOmZ1bmN0aW9uKGUpe3JldHVybiBDKGEmJnRoaXM9PT1zP0U6dGhpcyxlKX19KSxkKGQuUytkLkYqISgkJiZuKCJkWTB5IikoZnVuY3Rpb24oZSl7RS5hbGwoZSkuY2F0Y2goTyl9KSksIlByb21pc2UiLHthbGw6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPUQodCkscj1uLnJlc29sdmUsaT1uLnJlamVjdCxvPWIoZnVuY3Rpb24oKXt2YXIgbj1bXSxvPTAscz0xO20oZSwhMSxmdW5jdGlvbihlKXt2YXIgYT1vKyssbD0hMTtuLnB1c2godm9pZCAwKSxzKyssdC5yZXNvbHZlKGUpLnRoZW4oZnVuY3Rpb24oZSl7bHx8KGw9ITAsblthXT1lLC0tc3x8cihuKSl9LGkpfSksLS1zfHxyKG4pfSk7cmV0dXJuIG8uZSYmaShvLnYpLG4ucHJvbWlzZX0scmFjZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49RCh0KSxyPW4ucmVqZWN0LGk9YihmdW5jdGlvbigpe20oZSwhMSxmdW5jdGlvbihlKXt0LnJlc29sdmUoZSkudGhlbihuLnJlc29sdmUscil9KX0pO3JldHVybiBpLmUmJnIoaS52KSxuLnByb21pc2V9fSl9LENkeDM6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oInNCM2UiKSxpPW4oImxrdGoiKTtuKCJ1cVVvIikoImtleXMiLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBpKHIoZSkpfX0pfSxEMkwyOmZ1bmN0aW9uKGUsdCl7dmFyIG49e30uaGFzT3duUHJvcGVydHk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uY2FsbChlLHQpfX0sRFFDcjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oImNHRzIiKTtmdW5jdGlvbiBpKGUpe3JldHVybiBlbmNvZGVVUklDb21wb25lbnQoZSkucmVwbGFjZSgvJTQwL2dpLCJAIikucmVwbGFjZSgvJTNBL2dpLCI6IikucmVwbGFjZSgvJTI0L2csIiQiKS5yZXBsYWNlKC8lMkMvZ2ksIiwiKS5yZXBsYWNlKC8lMjAvZywiKyIpLnJlcGxhY2UoLyU1Qi9naSwiWyIpLnJlcGxhY2UoLyU1RC9naSwiXSIpfWUuZXhwb3J0cz1mdW5jdGlvbihlLHQsbil7aWYoIXQpcmV0dXJuIGU7dmFyIG87aWYobilvPW4odCk7ZWxzZSBpZihyLmlzVVJMU2VhcmNoUGFyYW1zKHQpKW89dC50b1N0cmluZygpO2Vsc2V7dmFyIHM9W107ci5mb3JFYWNoKHQsZnVuY3Rpb24oZSx0KXtudWxsIT09ZSYmdm9pZCAwIT09ZSYmKHIuaXNBcnJheShlKSYmKHQrPSJbXSIpLHIuaXNBcnJheShlKXx8KGU9W2VdKSxyLmZvckVhY2goZSxmdW5jdGlvbihlKXtyLmlzRGF0ZShlKT9lPWUudG9JU09TdHJpbmcoKTpyLmlzT2JqZWN0KGUpJiYoZT1KU09OLnN0cmluZ2lmeShlKSkscy5wdXNoKGkodCkrIj0iK2koZSkpfSkpfSksbz1zLmpvaW4oIiYiKX1yZXR1cm4gbyYmKGUrPSgtMT09PWUuaW5kZXhPZigiPyIpPyI/IjoiJiIpK28pLGV9fSxEUUpZOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmInN5bWJvbCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIGV9LG89bigiaHlFQiIpLHM9KHI9bykmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O3ZhciBhLGw9bHx8e307bC5EaWFsb2c9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXM7aWYodGhpcy5kaWFsb2dOb2RlPWUsbnVsbD09PXRoaXMuZGlhbG9nTm9kZXx8ImRpYWxvZyIhPT10aGlzLmRpYWxvZ05vZGUuZ2V0QXR0cmlidXRlKCJyb2xlIikpdGhyb3cgbmV3IEVycm9yKCJEaWFsb2coKSByZXF1aXJlcyBhIERPTSBlbGVtZW50IHdpdGggQVJJQSByb2xlIG9mIGRpYWxvZy4iKTsic3RyaW5nIj09dHlwZW9mIHQ/dGhpcy5mb2N1c0FmdGVyQ2xvc2VkPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHQpOiJvYmplY3QiPT09KHZvaWQgMD09PXQ/InVuZGVmaW5lZCI6aSh0KSk/dGhpcy5mb2N1c0FmdGVyQ2xvc2VkPXQ6dGhpcy5mb2N1c0FmdGVyQ2xvc2VkPW51bGwsInN0cmluZyI9PXR5cGVvZiBuP3RoaXMuZm9jdXNGaXJzdD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChuKToib2JqZWN0Ij09PSh2b2lkIDA9PT1uPyJ1bmRlZmluZWQiOmkobikpP3RoaXMuZm9jdXNGaXJzdD1uOnRoaXMuZm9jdXNGaXJzdD1udWxsLHRoaXMuZm9jdXNGaXJzdD90aGlzLmZvY3VzRmlyc3QuZm9jdXMoKTpzLmRlZmF1bHQuZm9jdXNGaXJzdERlc2NlbmRhbnQodGhpcy5kaWFsb2dOb2RlKSx0aGlzLmxhc3RGb2N1cz1kb2N1bWVudC5hY3RpdmVFbGVtZW50LGE9ZnVuY3Rpb24oZSl7ci50cmFwRm9jdXMoZSl9LHRoaXMuYWRkTGlzdGVuZXJzKCl9LGwuRGlhbG9nLnByb3RvdHlwZS5hZGRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJmb2N1cyIsYSwhMCl9LGwuRGlhbG9nLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcnM9ZnVuY3Rpb24oKXtkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCJmb2N1cyIsYSwhMCl9LGwuRGlhbG9nLnByb3RvdHlwZS5jbG9zZURpYWxvZz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5yZW1vdmVMaXN0ZW5lcnMoKSx0aGlzLmZvY3VzQWZ0ZXJDbG9zZWQmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXtlLmZvY3VzQWZ0ZXJDbG9zZWQuZm9jdXMoKX0pfSxsLkRpYWxvZy5wcm90b3R5cGUudHJhcEZvY3VzPWZ1bmN0aW9uKGUpe3MuZGVmYXVsdC5JZ25vcmVVdGlsRm9jdXNDaGFuZ2VzfHwodGhpcy5kaWFsb2dOb2RlLmNvbnRhaW5zKGUudGFyZ2V0KT90aGlzLmxhc3RGb2N1cz1lLnRhcmdldDoocy5kZWZhdWx0LmZvY3VzRmlyc3REZXNjZW5kYW50KHRoaXMuZGlhbG9nTm9kZSksdGhpcy5sYXN0Rm9jdXM9PT1kb2N1bWVudC5hY3RpdmVFbGVtZW50JiZzLmRlZmF1bHQuZm9jdXNMYXN0RGVzY2VuZGFudCh0aGlzLmRpYWxvZ05vZGUpLHRoaXMubGFzdEZvY3VzPWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKX0sdC5kZWZhdWx0PWwuRGlhbG9nfSxEZDh3OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigid29PZiIpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O3QuZGVmYXVsdD1vLmRlZmF1bHR8fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciBuPWFyZ3VtZW50c1t0XTtmb3IodmFyIHIgaW4gbilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixyKSYmKGVbcl09bltyXSl9cmV0dXJuIGV9fSxEdVIyOmZ1bmN0aW9uKGUsdCl7dmFyIG47bj1mdW5jdGlvbigpe3JldHVybiB0aGlzfSgpO3RyeXtuPW58fEZ1bmN0aW9uKCJyZXR1cm4gdGhpcyIpKCl8fCgwLGV2YWwpKCJ0aGlzIil9Y2F0Y2goZSl7Im9iamVjdCI9PXR5cGVvZiB3aW5kb3cmJihuPXdpbmRvdyl9ZS5leHBvcnRzPW59LCJFL2luIjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMCx0LmlzRGVmPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDAhPT1lJiZudWxsIT09ZX0sdC5pc0tvcmVhbj1mdW5jdGlvbihlKXtyZXR1cm4vKFsoXHVBQzAwLVx1RDdBRil8KFx1MzEzMC1cdTMxOEYpXSkrL2dpLnRlc3QoZSl9fSxFR1ppOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJue3ZhbHVlOnQsZG9uZTohIWV9fX0sRUtUVjpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBpPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLG4pLGkubD0hMCxpLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsImEiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPSIvZGlzdC8iLG4obi5zPTEyMil9KHswOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt2YXIgcyxhPWU9ZXx8e30sbD10eXBlb2YgZS5kZWZhdWx0OyJvYmplY3QiIT09bCYmImZ1bmN0aW9uIiE9PWx8fChzPWUsYT1lLmRlZmF1bHQpO3ZhciB1LGM9ImZ1bmN0aW9uIj09dHlwZW9mIGE/YS5vcHRpb25zOmE7aWYodCYmKGMucmVuZGVyPXQucmVuZGVyLGMuc3RhdGljUmVuZGVyRm5zPXQuc3RhdGljUmVuZGVyRm5zLGMuX2NvbXBpbGVkPSEwKSxuJiYoYy5mdW5jdGlvbmFsPSEwKSxpJiYoYy5fc2NvcGVJZD1pKSxvPyh1PWZ1bmN0aW9uKGUpeyhlPWV8fHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fHx0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCl8fCJ1bmRlZmluZWQiPT10eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfX3x8KGU9X19WVUVfU1NSX0NPTlRFWFRfXyksciYmci5jYWxsKHRoaXMsZSksZSYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChvKX0sYy5fc3NyUmVnaXN0ZXI9dSk6ciYmKHU9ciksdSl7dmFyIGQ9Yy5mdW5jdGlvbmFsLGY9ZD9jLnJlbmRlcjpjLmJlZm9yZUNyZWF0ZTtkPyhjLl9pbmplY3RTdHlsZXM9dSxjLnJlbmRlcj1mdW5jdGlvbihlLHQpe3JldHVybiB1LmNhbGwodCksZihlLHQpfSk6Yy5iZWZvcmVDcmVhdGU9Zj9bXS5jb25jYXQoZix1KTpbdV19cmV0dXJue2VzTW9kdWxlOnMsZXhwb3J0czphLG9wdGlvbnM6Y319fSwxOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImZQbGwiKX0sMTIyOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigxMjMpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O28uZGVmYXVsdC5pbnN0YWxsPWZ1bmN0aW9uKGUpe2UuY29tcG9uZW50KG8uZGVmYXVsdC5uYW1lLG8uZGVmYXVsdCl9LHQuZGVmYXVsdD1vLmRlZmF1bHR9LDEyMzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKDEyNCksaT1uLm4ociksbz1uKDEyNSkscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDEyNDpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcixpPW4oMSksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07dC5kZWZhdWx0PXtuYW1lOiJFbENoZWNrYm94IixtaXhpbnM6W28uZGVmYXVsdF0saW5qZWN0OntlbEZvcm06e2RlZmF1bHQ6IiJ9LGVsRm9ybUl0ZW06e2RlZmF1bHQ6IiJ9fSxjb21wb25lbnROYW1lOiJFbENoZWNrYm94IixkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3NlbGZNb2RlbDohMSxmb2N1czohMSxpc0xpbWl0RXhjZWVkZWQ6ITF9fSxjb21wdXRlZDp7bW9kZWw6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlzR3JvdXA/dGhpcy5zdG9yZTp2b2lkIDAhPT10aGlzLnZhbHVlP3RoaXMudmFsdWU6dGhpcy5zZWxmTW9kZWx9LHNldDpmdW5jdGlvbihlKXt0aGlzLmlzR3JvdXA/KHRoaXMuaXNMaW1pdEV4Y2VlZGVkPSExLHZvaWQgMCE9PXRoaXMuX2NoZWNrYm94R3JvdXAubWluJiZlLmxlbmd0aDx0aGlzLl9jaGVja2JveEdyb3VwLm1pbiYmKHRoaXMuaXNMaW1pdEV4Y2VlZGVkPSEwKSx2b2lkIDAhPT10aGlzLl9jaGVja2JveEdyb3VwLm1heCYmZS5sZW5ndGg+dGhpcy5fY2hlY2tib3hHcm91cC5tYXgmJih0aGlzLmlzTGltaXRFeGNlZWRlZD0hMCksITE9PT10aGlzLmlzTGltaXRFeGNlZWRlZCYmdGhpcy5kaXNwYXRjaCgiRWxDaGVja2JveEdyb3VwIiwiaW5wdXQiLFtlXSkpOih0aGlzLiRlbWl0KCJpbnB1dCIsZSksdGhpcy5zZWxmTW9kZWw9ZSl9fSxpc0NoZWNrZWQ6ZnVuY3Rpb24oKXtyZXR1cm4iW29iamVjdCBCb29sZWFuXSI9PT17fS50b1N0cmluZy5jYWxsKHRoaXMubW9kZWwpP3RoaXMubW9kZWw6QXJyYXkuaXNBcnJheSh0aGlzLm1vZGVsKT90aGlzLm1vZGVsLmluZGV4T2YodGhpcy5sYWJlbCk+LTE6bnVsbCE9PXRoaXMubW9kZWwmJnZvaWQgMCE9PXRoaXMubW9kZWw/dGhpcy5tb2RlbD09PXRoaXMudHJ1ZUxhYmVsOnZvaWQgMH0saXNHcm91cDpmdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLiRwYXJlbnQ7ZTspe2lmKCJFbENoZWNrYm94R3JvdXAiPT09ZS4kb3B0aW9ucy5jb21wb25lbnROYW1lKXJldHVybiB0aGlzLl9jaGVja2JveEdyb3VwPWUsITA7ZT1lLiRwYXJlbnR9cmV0dXJuITF9LHN0b3JlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NoZWNrYm94R3JvdXA/dGhpcy5fY2hlY2tib3hHcm91cC52YWx1ZTp0aGlzLnZhbHVlfSxpc0Rpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNHcm91cD90aGlzLl9jaGVja2JveEdyb3VwLmRpc2FibGVkfHx0aGlzLmRpc2FibGVkfHwodGhpcy5lbEZvcm18fHt9KS5kaXNhYmxlZDp0aGlzLmRpc2FibGVkfHwodGhpcy5lbEZvcm18fHt9KS5kaXNhYmxlZH0sX2VsRm9ybUl0ZW1TaXplOmZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMuZWxGb3JtSXRlbXx8e30pLmVsRm9ybUl0ZW1TaXplfSxjaGVja2JveFNpemU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnNpemV8fHRoaXMuX2VsRm9ybUl0ZW1TaXplfHwodGhpcy4kRUxFTUVOVHx8e30pLnNpemU7cmV0dXJuIHRoaXMuaXNHcm91cCYmdGhpcy5fY2hlY2tib3hHcm91cC5jaGVja2JveEdyb3VwU2l6ZXx8ZX19LHByb3BzOnt2YWx1ZTp7fSxsYWJlbDp7fSxpbmRldGVybWluYXRlOkJvb2xlYW4sZGlzYWJsZWQ6Qm9vbGVhbixjaGVja2VkOkJvb2xlYW4sbmFtZTpTdHJpbmcsdHJ1ZUxhYmVsOltTdHJpbmcsTnVtYmVyXSxmYWxzZUxhYmVsOltTdHJpbmcsTnVtYmVyXSxpZDpTdHJpbmcsY29udHJvbHM6U3RyaW5nLGJvcmRlcjpCb29sZWFuLHNpemU6U3RyaW5nfSxtZXRob2RzOnthZGRUb1N0b3JlOmZ1bmN0aW9uKCl7QXJyYXkuaXNBcnJheSh0aGlzLm1vZGVsKSYmLTE9PT10aGlzLm1vZGVsLmluZGV4T2YodGhpcy5sYWJlbCk/dGhpcy5tb2RlbC5wdXNoKHRoaXMubGFiZWwpOnRoaXMubW9kZWw9dGhpcy50cnVlTGFiZWx8fCEwfSxoYW5kbGVDaGFuZ2U6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZighdGhpcy5pc0xpbWl0RXhjZWVkZWQpe3ZhciBuPXZvaWQgMDtuPWUudGFyZ2V0LmNoZWNrZWQ/dm9pZCAwPT09dGhpcy50cnVlTGFiZWx8fHRoaXMudHJ1ZUxhYmVsOnZvaWQgMCE9PXRoaXMuZmFsc2VMYWJlbCYmdGhpcy5mYWxzZUxhYmVsLHRoaXMuJGVtaXQoImNoYW5nZSIsbixlKSx0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3QuaXNHcm91cCYmdC5kaXNwYXRjaCgiRWxDaGVja2JveEdyb3VwIiwiY2hhbmdlIixbdC5fY2hlY2tib3hHcm91cC52YWx1ZV0pfSl9fX0sY3JlYXRlZDpmdW5jdGlvbigpe3RoaXMuY2hlY2tlZCYmdGhpcy5hZGRUb1N0b3JlKCl9LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLmluZGV0ZXJtaW5hdGUmJnRoaXMuJGVsLnNldEF0dHJpYnV0ZSgiYXJpYS1jb250cm9scyIsdGhpcy5jb250cm9scyl9LHdhdGNoOnt2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLmRpc3BhdGNoKCJFbEZvcm1JdGVtIiwiZWwuZm9ybS5jaGFuZ2UiLGUpfX19fSwxMjU6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKCJsYWJlbCIse3N0YXRpY0NsYXNzOiJlbC1jaGVja2JveCIsY2xhc3M6W2UuYm9yZGVyJiZlLmNoZWNrYm94U2l6ZT8iZWwtY2hlY2tib3gtLSIrZS5jaGVja2JveFNpemU6IiIseyJpcy1kaXNhYmxlZCI6ZS5pc0Rpc2FibGVkfSx7ImlzLWJvcmRlcmVkIjplLmJvcmRlcn0seyJpcy1jaGVja2VkIjplLmlzQ2hlY2tlZH1dLGF0dHJzOntyb2xlOiJjaGVja2JveCIsImFyaWEtY2hlY2tlZCI6ZS5pbmRldGVybWluYXRlPyJtaXhlZCI6ZS5pc0NoZWNrZWQsImFyaWEtZGlzYWJsZWQiOmUuaXNEaXNhYmxlZCxpZDplLmlkfX0sW24oInNwYW4iLHtzdGF0aWNDbGFzczoiZWwtY2hlY2tib3hfX2lucHV0IixjbGFzczp7ImlzLWRpc2FibGVkIjplLmlzRGlzYWJsZWQsImlzLWNoZWNrZWQiOmUuaXNDaGVja2VkLCJpcy1pbmRldGVybWluYXRlIjplLmluZGV0ZXJtaW5hdGUsImlzLWZvY3VzIjplLmZvY3VzfSxhdHRyczp7ImFyaWEtY2hlY2tlZCI6Im1peGVkIn19LFtuKCJzcGFuIix7c3RhdGljQ2xhc3M6ImVsLWNoZWNrYm94X19pbm5lciJ9KSxlLnRydWVMYWJlbHx8ZS5mYWxzZUxhYmVsP24oImlucHV0Iix7ZGlyZWN0aXZlczpbe25hbWU6Im1vZGVsIixyYXdOYW1lOiJ2LW1vZGVsIix2YWx1ZTplLm1vZGVsLGV4cHJlc3Npb246Im1vZGVsIn1dLHN0YXRpY0NsYXNzOiJlbC1jaGVja2JveF9fb3JpZ2luYWwiLGF0dHJzOnt0eXBlOiJjaGVja2JveCIsImFyaWEtaGlkZGVuIjoidHJ1ZSIsbmFtZTplLm5hbWUsZGlzYWJsZWQ6ZS5pc0Rpc2FibGVkLCJ0cnVlLXZhbHVlIjplLnRydWVMYWJlbCwiZmFsc2UtdmFsdWUiOmUuZmFsc2VMYWJlbH0sZG9tUHJvcHM6e2NoZWNrZWQ6QXJyYXkuaXNBcnJheShlLm1vZGVsKT9lLl9pKGUubW9kZWwsbnVsbCk+LTE6ZS5fcShlLm1vZGVsLGUudHJ1ZUxhYmVsKX0sb246e2NoYW5nZTpbZnVuY3Rpb24odCl7dmFyIG49ZS5tb2RlbCxyPXQudGFyZ2V0LGk9ci5jaGVja2VkP2UudHJ1ZUxhYmVsOmUuZmFsc2VMYWJlbDtpZihBcnJheS5pc0FycmF5KG4pKXt2YXIgbz1lLl9pKG4sbnVsbCk7ci5jaGVja2VkP288MCYmKGUubW9kZWw9bi5jb25jYXQoW251bGxdKSk6bz4tMSYmKGUubW9kZWw9bi5zbGljZSgwLG8pLmNvbmNhdChuLnNsaWNlKG8rMSkpKX1lbHNlIGUubW9kZWw9aX0sZS5oYW5kbGVDaGFuZ2VdLGZvY3VzOmZ1bmN0aW9uKHQpe2UuZm9jdXM9ITB9LGJsdXI6ZnVuY3Rpb24odCl7ZS5mb2N1cz0hMX19fSk6bigiaW5wdXQiLHtkaXJlY3RpdmVzOlt7bmFtZToibW9kZWwiLHJhd05hbWU6InYtbW9kZWwiLHZhbHVlOmUubW9kZWwsZXhwcmVzc2lvbjoibW9kZWwifV0sc3RhdGljQ2xhc3M6ImVsLWNoZWNrYm94X19vcmlnaW5hbCIsYXR0cnM6e3R5cGU6ImNoZWNrYm94IiwiYXJpYS1oaWRkZW4iOiJ0cnVlIixkaXNhYmxlZDplLmlzRGlzYWJsZWQsbmFtZTplLm5hbWV9LGRvbVByb3BzOnt2YWx1ZTplLmxhYmVsLGNoZWNrZWQ6QXJyYXkuaXNBcnJheShlLm1vZGVsKT9lLl9pKGUubW9kZWwsZS5sYWJlbCk+LTE6ZS5tb2RlbH0sb246e2NoYW5nZTpbZnVuY3Rpb24odCl7dmFyIG49ZS5tb2RlbCxyPXQudGFyZ2V0LGk9ISFyLmNoZWNrZWQ7aWYoQXJyYXkuaXNBcnJheShuKSl7dmFyIG89ZS5sYWJlbCxzPWUuX2kobixvKTtyLmNoZWNrZWQ/czwwJiYoZS5tb2RlbD1uLmNvbmNhdChbb10pKTpzPi0xJiYoZS5tb2RlbD1uLnNsaWNlKDAscykuY29uY2F0KG4uc2xpY2UocysxKSkpfWVsc2UgZS5tb2RlbD1pfSxlLmhhbmRsZUNoYW5nZV0sZm9jdXM6ZnVuY3Rpb24odCl7ZS5mb2N1cz0hMH0sYmx1cjpmdW5jdGlvbih0KXtlLmZvY3VzPSExfX19KV0pLGUuJHNsb3RzLmRlZmF1bHR8fGUubGFiZWw/bigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC1jaGVja2JveF9fbGFiZWwifSxbZS5fdCgiZGVmYXVsdCIpLGUuJHNsb3RzLmRlZmF1bHQ/ZS5fZSgpOltlLl92KGUuX3MoZS5sYWJlbCkpXV0sMik6ZS5fZSgpXSl9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9fSl9LEVxQkM6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCJrTTJFIiksaT1uKCJGZUJsIiksbz1uKCI3S3ZEIikscz1uKCJ0OHg5IiksYT1uKCJmSlViIik7cihyLlArci5SLCJQcm9taXNlIix7ZmluYWxseTpmdW5jdGlvbihlKXt2YXIgdD1zKHRoaXMsaS5Qcm9taXNlfHxvLlByb21pc2UpLG49ImZ1bmN0aW9uIj09dHlwZW9mIGU7cmV0dXJuIHRoaXMudGhlbihuP2Z1bmN0aW9uKG4pe3JldHVybiBhKHQsZSgpKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIG59KX06ZSxuP2Z1bmN0aW9uKG4pe3JldHVybiBhKHQsZSgpKS50aGVuKGZ1bmN0aW9uKCl7dGhyb3cgbn0pfTplKX19KX0sRXFqSTpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4ib2JqZWN0Ij09dHlwZW9mIGU/bnVsbCE9PWU6ImZ1bmN0aW9uIj09dHlwZW9mIGV9fSwiRlorZiI6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107cmV0dXJuIHQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odCl7dmFyIG49ZnVuY3Rpb24oZSx0KXt2YXIgbj1lWzFdfHwiIixyPWVbM107aWYoIXIpcmV0dXJuIG47aWYodCYmImZ1bmN0aW9uIj09dHlwZW9mIGJ0b2Epe3ZhciBpPShzPXIsIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwiK2J0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHMpKSkpKyIgKi8iKSxvPXIuc291cmNlcy5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIi8qIyBzb3VyY2VVUkw9IityLnNvdXJjZVJvb3QrZSsiICovIn0pO3JldHVybltuXS5jb25jYXQobykuY29uY2F0KFtpXSkuam9pbigiXG4iKX12YXIgcztyZXR1cm5bbl0uam9pbigiXG4iKX0odCxlKTtyZXR1cm4gdFsyXT8iQG1lZGlhICIrdFsyXSsieyIrbisifSI6bn0pLmpvaW4oIiIpfSx0Lmk9ZnVuY3Rpb24oZSxuKXsic3RyaW5nIj09dHlwZW9mIGUmJihlPVtbbnVsbCxlLCIiXV0pO2Zvcih2YXIgcj17fSxpPTA7aTx0aGlzLmxlbmd0aDtpKyspe3ZhciBvPXRoaXNbaV1bMF07Im51bWJlciI9PXR5cGVvZiBvJiYocltvXT0hMCl9Zm9yKGk9MDtpPGUubGVuZ3RoO2krKyl7dmFyIHM9ZVtpXTsibnVtYmVyIj09dHlwZW9mIHNbMF0mJnJbc1swXV18fChuJiYhc1syXT9zWzJdPW46biYmKHNbMl09IigiK3NbMl0rIikgYW5kICgiK24rIikiKSx0LnB1c2gocykpfX0sdH19LEZlQmw6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmV4cG9ydHM9e3ZlcnNpb246IjIuNi4wIn07Im51bWJlciI9PXR5cGVvZiBfX2UmJihfX2U9bil9LEZ0RDM6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCJ0OHFqIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLGksbyl7dmFyIHM9bmV3IEVycm9yKGUpO3JldHVybiByKHMsdCxuLGksbyl9fSxHSEJjOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiY0dHMiIpO2UuZXhwb3J0cz1yLmlzU3RhbmRhcmRCcm93c2VyRW52KCk/ZnVuY3Rpb24oKXt2YXIgZSx0PS8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIik7ZnVuY3Rpb24gaShlKXt2YXIgcj1lO3JldHVybiB0JiYobi5zZXRBdHRyaWJ1dGUoImhyZWYiLHIpLHI9bi5ocmVmKSxuLnNldEF0dHJpYnV0ZSgiaHJlZiIscikse2hyZWY6bi5ocmVmLHByb3RvY29sOm4ucHJvdG9jb2w/bi5wcm90b2NvbC5yZXBsYWNlKC86JC8sIiIpOiIiLGhvc3Q6bi5ob3N0LHNlYXJjaDpuLnNlYXJjaD9uLnNlYXJjaC5yZXBsYWNlKC9eXD8vLCIiKToiIixoYXNoOm4uaGFzaD9uLmhhc2gucmVwbGFjZSgvXiMvLCIiKToiIixob3N0bmFtZTpuLmhvc3RuYW1lLHBvcnQ6bi5wb3J0LHBhdGhuYW1lOiIvIj09PW4ucGF0aG5hbWUuY2hhckF0KDApP24ucGF0aG5hbWU6Ii8iK24ucGF0aG5hbWV9fXJldHVybiBlPWkod2luZG93LmxvY2F0aW9uLmhyZWYpLGZ1bmN0aW9uKHQpe3ZhciBuPXIuaXNTdHJpbmcodCk/aSh0KTp0O3JldHVybiBuLnByb3RvY29sPT09ZS5wcm90b2NvbCYmbi5ob3N0PT09ZS5ob3N0fX0oKTpmdW5jdGlvbigpe3JldHVybiEwfX0sR2VnUDpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiBuKHIpe2lmKHRbcl0pcmV0dXJuIHRbcl0uZXhwb3J0czt2YXIgaT10W3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtyXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyxuKSxpLmw9ITAsaS5leHBvcnRzfXJldHVybiBuLm09ZSxuLmM9dCxuLmQ9ZnVuY3Rpb24oZSx0LHIpe24ubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxuLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIG4uZCh0LCJhIix0KSx0fSxuLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LG4ucD0iL2Rpc3QvIixuKG4ucz0yOTgpfSh7MDpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbixyLGksbyl7dmFyIHMsYT1lPWV8fHt9LGw9dHlwZW9mIGUuZGVmYXVsdDsib2JqZWN0IiE9PWwmJiJmdW5jdGlvbiIhPT1sfHwocz1lLGE9ZS5kZWZhdWx0KTt2YXIgdSxjPSJmdW5jdGlvbiI9PXR5cGVvZiBhP2Eub3B0aW9uczphO2lmKHQmJihjLnJlbmRlcj10LnJlbmRlcixjLnN0YXRpY1JlbmRlckZucz10LnN0YXRpY1JlbmRlckZucyxjLl9jb21waWxlZD0hMCksbiYmKGMuZnVuY3Rpb25hbD0hMCksaSYmKGMuX3Njb3BlSWQ9aSksbz8odT1mdW5jdGlvbihlKXsoZT1lfHx0aGlzLiR2bm9kZSYmdGhpcy4kdm5vZGUuc3NyQ29udGV4dHx8dGhpcy5wYXJlbnQmJnRoaXMucGFyZW50LiR2bm9kZSYmdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpfHwidW5kZWZpbmVkIj09dHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX198fChlPV9fVlVFX1NTUl9DT05URVhUX18pLHImJnIuY2FsbCh0aGlzLGUpLGUmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobyl9LGMuX3NzclJlZ2lzdGVyPXUpOnImJih1PXIpLHUpe3ZhciBkPWMuZnVuY3Rpb25hbCxmPWQ/Yy5yZW5kZXI6Yy5iZWZvcmVDcmVhdGU7ZD8oYy5faW5qZWN0U3R5bGVzPXUsYy5yZW5kZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdS5jYWxsKHQpLGYoZSx0KX0pOmMuYmVmb3JlQ3JlYXRlPWY/W10uY29uY2F0KGYsdSk6W3VdfXJldHVybntlc01vZHVsZTpzLGV4cG9ydHM6YSxvcHRpb25zOmN9fX0sMjk4OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigyOTkpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O28uZGVmYXVsdC5pbnN0YWxsPWZ1bmN0aW9uKGUpe2UuY29tcG9uZW50KG8uZGVmYXVsdC5uYW1lLG8uZGVmYXVsdCl9LHQuZGVmYXVsdD1vLmRlZmF1bHR9LDI5OTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKDMwMCksaT1uLm4ociksbz1uKDMwMSkscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDMwMDpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMCx0LmRlZmF1bHQ9e25hbWU6IkVsUHJvZ3Jlc3MiLHByb3BzOnt0eXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OiJsaW5lIix2YWxpZGF0b3I6ZnVuY3Rpb24oZSl7cmV0dXJuWyJsaW5lIiwiY2lyY2xlIl0uaW5kZXhPZihlKT4tMX19LHBlcmNlbnRhZ2U6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MCxyZXF1aXJlZDohMCx2YWxpZGF0b3I6ZnVuY3Rpb24oZSl7cmV0dXJuIGU+PTAmJmU8PTEwMH19LHN0YXR1czp7dHlwZTpTdHJpbmcsdmFsaWRhdG9yOmZ1bmN0aW9uKGUpe3JldHVyblsidGV4dCIsInN1Y2Nlc3MiLCJleGNlcHRpb24iXS5pbmRleE9mKGUpPi0xfX0sc3Ryb2tlV2lkdGg6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6Nn0sdGV4dEluc2lkZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHdpZHRoOnt0eXBlOk51bWJlcixkZWZhdWx0OjEyNn0sc2hvd1RleHQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjb2xvcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDoiIn19LGNvbXB1dGVkOntiYXJTdHlsZTpmdW5jdGlvbigpe3ZhciBlPXt9O3JldHVybiBlLndpZHRoPXRoaXMucGVyY2VudGFnZSsiJSIsZS5iYWNrZ3JvdW5kQ29sb3I9dGhpcy5jb2xvcixlfSxyZWxhdGl2ZVN0cm9rZVdpZHRoOmZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMuc3Ryb2tlV2lkdGgvdGhpcy53aWR0aCoxMDApLnRvRml4ZWQoMSl9LHRyYWNrUGF0aDpmdW5jdGlvbigpe3ZhciBlPXBhcnNlSW50KDUwLXBhcnNlRmxvYXQodGhpcy5yZWxhdGl2ZVN0cm9rZVdpZHRoKS8yLDEwKTtyZXR1cm4iTSA1MCA1MCBtIDAgLSIrZSsiIGEgIitlKyIgIitlKyIgMCAxIDEgMCAiKzIqZSsiIGEgIitlKyIgIitlKyIgMCAxIDEgMCAtIisyKmV9LHBlcmltZXRlcjpmdW5jdGlvbigpe3ZhciBlPTUwLXBhcnNlRmxvYXQodGhpcy5yZWxhdGl2ZVN0cm9rZVdpZHRoKS8yO3JldHVybiAyKk1hdGguUEkqZX0sY2lyY2xlUGF0aFN0eWxlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wZXJpbWV0ZXI7cmV0dXJue3N0cm9rZURhc2hhcnJheTplKyJweCwiK2UrInB4IixzdHJva2VEYXNob2Zmc2V0OigxLXRoaXMucGVyY2VudGFnZS8xMDApKmUrInB4Iix0cmFuc2l0aW9uOiJzdHJva2UtZGFzaG9mZnNldCAwLjZzIGVhc2UgMHMsIHN0cm9rZSAwLjZzIGVhc2UifX0sc3Ryb2tlOmZ1bmN0aW9uKCl7dmFyIGU9dm9pZCAwO2lmKHRoaXMuY29sb3IpZT10aGlzLmNvbG9yO2Vsc2Ugc3dpdGNoKHRoaXMuc3RhdHVzKXtjYXNlInN1Y2Nlc3MiOmU9IiMxM2NlNjYiO2JyZWFrO2Nhc2UiZXhjZXB0aW9uIjplPSIjZmY0OTQ5IjticmVhaztkZWZhdWx0OmU9IiMyMGEwZmYifXJldHVybiBlfSxpY29uQ2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4ibGluZSI9PT10aGlzLnR5cGU/InN1Y2Nlc3MiPT09dGhpcy5zdGF0dXM/ImVsLWljb24tY2lyY2xlLWNoZWNrIjoiZWwtaWNvbi1jaXJjbGUtY2xvc2UiOiJzdWNjZXNzIj09PXRoaXMuc3RhdHVzPyJlbC1pY29uLWNoZWNrIjoiZWwtaWNvbi1jbG9zZSJ9LHByb2dyZXNzVGV4dFNpemU6ZnVuY3Rpb24oKXtyZXR1cm4ibGluZSI9PT10aGlzLnR5cGU/MTIrLjQqdGhpcy5zdHJva2VXaWR0aDouMTExMTExKnRoaXMud2lkdGgrMn19fX0sMzAxOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLXByb2dyZXNzIixjbGFzczpbImVsLXByb2dyZXNzLS0iK2UudHlwZSxlLnN0YXR1cz8iaXMtIitlLnN0YXR1czoiIix7ImVsLXByb2dyZXNzLS13aXRob3V0LXRleHQiOiFlLnNob3dUZXh0LCJlbC1wcm9ncmVzcy0tdGV4dC1pbnNpZGUiOmUudGV4dEluc2lkZX1dLGF0dHJzOntyb2xlOiJwcm9ncmVzc2JhciIsImFyaWEtdmFsdWVub3ciOmUucGVyY2VudGFnZSwiYXJpYS12YWx1ZW1pbiI6IjAiLCJhcmlhLXZhbHVlbWF4IjoiMTAwIn19LFsibGluZSI9PT1lLnR5cGU/bigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLXByb2dyZXNzLWJhciJ9LFtuKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtcHJvZ3Jlc3MtYmFyX19vdXRlciIsc3R5bGU6e2hlaWdodDplLnN0cm9rZVdpZHRoKyJweCJ9fSxbbigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLXByb2dyZXNzLWJhcl9faW5uZXIiLHN0eWxlOmUuYmFyU3R5bGV9LFtlLnNob3dUZXh0JiZlLnRleHRJbnNpZGU/bigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLXByb2dyZXNzLWJhcl9faW5uZXJUZXh0In0sW2UuX3YoZS5fcyhlLnBlcmNlbnRhZ2UpKyIlIildKTplLl9lKCldKV0pXSk6bigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLXByb2dyZXNzLWNpcmNsZSIsc3R5bGU6e2hlaWdodDplLndpZHRoKyJweCIsd2lkdGg6ZS53aWR0aCsicHgifX0sW24oInN2ZyIse2F0dHJzOnt2aWV3Qm94OiIwIDAgMTAwIDEwMCJ9fSxbbigicGF0aCIse3N0YXRpY0NsYXNzOiJlbC1wcm9ncmVzcy1jaXJjbGVfX3RyYWNrIixhdHRyczp7ZDplLnRyYWNrUGF0aCxzdHJva2U6IiNlNWU5ZjIiLCJzdHJva2Utd2lkdGgiOmUucmVsYXRpdmVTdHJva2VXaWR0aCxmaWxsOiJub25lIn19KSxuKCJwYXRoIix7c3RhdGljQ2xhc3M6ImVsLXByb2dyZXNzLWNpcmNsZV9fcGF0aCIsc3R5bGU6ZS5jaXJjbGVQYXRoU3R5bGUsYXR0cnM6e2Q6ZS50cmFja1BhdGgsInN0cm9rZS1saW5lY2FwIjoicm91bmQiLHN0cm9rZTplLnN0cm9rZSwic3Ryb2tlLXdpZHRoIjplLnJlbGF0aXZlU3Ryb2tlV2lkdGgsZmlsbDoibm9uZSJ9fSldKV0pLGUuc2hvd1RleHQmJiFlLnRleHRJbnNpZGU/bigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLXByb2dyZXNzX190ZXh0IixzdHlsZTp7Zm9udFNpemU6ZS5wcm9ncmVzc1RleHRTaXplKyJweCJ9fSxbZS5zdGF0dXM/WyJ0ZXh0Ij09PWUuc3RhdHVzP2UuX3QoImRlZmF1bHQiKTpuKCJpIix7Y2xhc3M6ZS5pY29uQ2xhc3N9KV06W2UuX3YoZS5fcyhlLnBlcmNlbnRhZ2UpKyIlIildXSwyKTplLl9lKCldKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn19KX0sSEpNeDpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBpPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLG4pLGkubD0hMCxpLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsImEiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPSIvZGlzdC8iLG4obi5zPTEwMSl9KHswOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt2YXIgcyxhPWU9ZXx8e30sbD10eXBlb2YgZS5kZWZhdWx0OyJvYmplY3QiIT09bCYmImZ1bmN0aW9uIiE9PWx8fChzPWUsYT1lLmRlZmF1bHQpO3ZhciB1LGM9ImZ1bmN0aW9uIj09dHlwZW9mIGE/YS5vcHRpb25zOmE7aWYodCYmKGMucmVuZGVyPXQucmVuZGVyLGMuc3RhdGljUmVuZGVyRm5zPXQuc3RhdGljUmVuZGVyRm5zLGMuX2NvbXBpbGVkPSEwKSxuJiYoYy5mdW5jdGlvbmFsPSEwKSxpJiYoYy5fc2NvcGVJZD1pKSxvPyh1PWZ1bmN0aW9uKGUpeyhlPWV8fHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fHx0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCl8fCJ1bmRlZmluZWQiPT10eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfX3x8KGU9X19WVUVfU1NSX0NPTlRFWFRfXyksciYmci5jYWxsKHRoaXMsZSksZSYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChvKX0sYy5fc3NyUmVnaXN0ZXI9dSk6ciYmKHU9ciksdSl7dmFyIGQ9Yy5mdW5jdGlvbmFsLGY9ZD9jLnJlbmRlcjpjLmJlZm9yZUNyZWF0ZTtkPyhjLl9pbmplY3RTdHlsZXM9dSxjLnJlbmRlcj1mdW5jdGlvbihlLHQpe3JldHVybiB1LmNhbGwodCksZihlLHQpfSk6Yy5iZWZvcmVDcmVhdGU9Zj9bXS5jb25jYXQoZix1KTpbdV19cmV0dXJue2VzTW9kdWxlOnMsZXhwb3J0czphLG9wdGlvbnM6Y319fSwxOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImZQbGwiKX0sMTAxOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigxMDIpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O28uZGVmYXVsdC5pbnN0YWxsPWZ1bmN0aW9uKGUpe2UuY29tcG9uZW50KG8uZGVmYXVsdC5uYW1lLG8uZGVmYXVsdCl9LHQuZGVmYXVsdD1vLmRlZmF1bHR9LDEwMjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKDEwMyksaT1uLm4ociksbz1uKDEwNSkscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDEwMzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj1sKG4oMSkpLGk9bChuKDgpKSxvPWwobigxMDQpKSxzPWwobig5KSksYT1uKDIzKTtmdW5jdGlvbiBsKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX10LmRlZmF1bHQ9e25hbWU6IkVsSW5wdXQiLGNvbXBvbmVudE5hbWU6IkVsSW5wdXQiLG1peGluczpbci5kZWZhdWx0LGkuZGVmYXVsdF0saW5oZXJpdEF0dHJzOiExLGluamVjdDp7ZWxGb3JtOntkZWZhdWx0OiIifSxlbEZvcm1JdGVtOntkZWZhdWx0OiIifX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntjdXJyZW50VmFsdWU6dm9pZCAwPT09dGhpcy52YWx1ZXx8bnVsbD09PXRoaXMudmFsdWU/IiI6dGhpcy52YWx1ZSx0ZXh0YXJlYUNhbGNTdHlsZTp7fSxob3ZlcmluZzohMSxmb2N1c2VkOiExLGlzT25Db21wb3NpdGlvbjohMSx2YWx1ZUJlZm9yZUNvbXBvc2l0aW9uOm51bGx9fSxwcm9wczp7dmFsdWU6W1N0cmluZyxOdW1iZXJdLHNpemU6U3RyaW5nLHJlc2l6ZTpTdHJpbmcsZm9ybTpTdHJpbmcsZGlzYWJsZWQ6Qm9vbGVhbixyZWFkb25seTpCb29sZWFuLHR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6InRleHQifSxhdXRvc2l6ZTp7dHlwZTpbQm9vbGVhbixPYmplY3RdLGRlZmF1bHQ6ITF9LGF1dG9jb21wbGV0ZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDoib2ZmIn0sYXV0b0NvbXBsZXRlOnt0eXBlOlN0cmluZyx2YWxpZGF0b3I6ZnVuY3Rpb24oZSl7cmV0dXJuITB9fSx2YWxpZGF0ZUV2ZW50Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sc3VmZml4SWNvbjpTdHJpbmcscHJlZml4SWNvbjpTdHJpbmcsbGFiZWw6U3RyaW5nLGNsZWFyYWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHRhYmluZGV4OlN0cmluZ30sY29tcHV0ZWQ6e19lbEZvcm1JdGVtU2l6ZTpmdW5jdGlvbigpe3JldHVybih0aGlzLmVsRm9ybUl0ZW18fHt9KS5lbEZvcm1JdGVtU2l6ZX0sdmFsaWRhdGVTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVsRm9ybUl0ZW0/dGhpcy5lbEZvcm1JdGVtLnZhbGlkYXRlU3RhdGU6IiJ9LG5lZWRTdGF0dXNJY29uOmZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLmVsRm9ybSYmdGhpcy5lbEZvcm0uc3RhdHVzSWNvbn0sdmFsaWRhdGVJY29uOmZ1bmN0aW9uKCl7cmV0dXJue3ZhbGlkYXRpbmc6ImVsLWljb24tbG9hZGluZyIsc3VjY2VzczoiZWwtaWNvbi1jaXJjbGUtY2hlY2siLGVycm9yOiJlbC1pY29uLWNpcmNsZS1jbG9zZSJ9W3RoaXMudmFsaWRhdGVTdGF0ZV19LHRleHRhcmVhU3R5bGU6ZnVuY3Rpb24oKXtyZXR1cm4oMCxzLmRlZmF1bHQpKHt9LHRoaXMudGV4dGFyZWFDYWxjU3R5bGUse3Jlc2l6ZTp0aGlzLnJlc2l6ZX0pfSxpbnB1dFNpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaXplfHx0aGlzLl9lbEZvcm1JdGVtU2l6ZXx8KHRoaXMuJEVMRU1FTlR8fHt9KS5zaXplfSxpbnB1dERpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGlzYWJsZWR8fCh0aGlzLmVsRm9ybXx8e30pLmRpc2FibGVkfSxzaG93Q2xlYXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jbGVhcmFibGUmJiF0aGlzLmlucHV0RGlzYWJsZWQmJiF0aGlzLnJlYWRvbmx5JiYiIiE9PXRoaXMuY3VycmVudFZhbHVlJiYodGhpcy5mb2N1c2VkfHx0aGlzLmhvdmVyaW5nKX19LHdhdGNoOnt2YWx1ZTpmdW5jdGlvbihlLHQpe3RoaXMuc2V0Q3VycmVudFZhbHVlKGUpfX0sbWV0aG9kczp7Zm9jdXM6ZnVuY3Rpb24oKXsodGhpcy4kcmVmcy5pbnB1dHx8dGhpcy4kcmVmcy50ZXh0YXJlYSkuZm9jdXMoKX0sYmx1cjpmdW5jdGlvbigpeyh0aGlzLiRyZWZzLmlucHV0fHx0aGlzLiRyZWZzLnRleHRhcmVhKS5ibHVyKCl9LGdldE1pZ3JhdGluZ0NvbmZpZzpmdW5jdGlvbigpe3JldHVybntwcm9wczp7aWNvbjoiaWNvbiBpcyByZW1vdmVkLCB1c2Ugc3VmZml4LWljb24gLyBwcmVmaXgtaWNvbiBpbnN0ZWFkLiIsIm9uLWljb24tY2xpY2siOiJvbi1pY29uLWNsaWNrIGlzIHJlbW92ZWQuIn0sZXZlbnRzOntjbGljazoiY2xpY2sgaXMgcmVtb3ZlZC4ifX19LGhhbmRsZUJsdXI6ZnVuY3Rpb24oZSl7dGhpcy5mb2N1c2VkPSExLHRoaXMuJGVtaXQoImJsdXIiLGUpLHRoaXMudmFsaWRhdGVFdmVudCYmdGhpcy5kaXNwYXRjaCgiRWxGb3JtSXRlbSIsImVsLmZvcm0uYmx1ciIsW3RoaXMuY3VycmVudFZhbHVlXSl9LHNlbGVjdDpmdW5jdGlvbigpeyh0aGlzLiRyZWZzLmlucHV0fHx0aGlzLiRyZWZzLnRleHRhcmVhKS5zZWxlY3QoKX0scmVzaXplVGV4dGFyZWE6ZnVuY3Rpb24oKXtpZighdGhpcy4kaXNTZXJ2ZXIpe3ZhciBlPXRoaXMuYXV0b3NpemU7aWYoInRleHRhcmVhIj09PXRoaXMudHlwZSlpZihlKXt2YXIgdD1lLm1pblJvd3Msbj1lLm1heFJvd3M7dGhpcy50ZXh0YXJlYUNhbGNTdHlsZT0oMCxvLmRlZmF1bHQpKHRoaXMuJHJlZnMudGV4dGFyZWEsdCxuKX1lbHNlIHRoaXMudGV4dGFyZWFDYWxjU3R5bGU9e21pbkhlaWdodDooMCxvLmRlZmF1bHQpKHRoaXMuJHJlZnMudGV4dGFyZWEpLm1pbkhlaWdodH19fSxoYW5kbGVGb2N1czpmdW5jdGlvbihlKXt0aGlzLmZvY3VzZWQ9ITAsdGhpcy4kZW1pdCgiZm9jdXMiLGUpfSxoYW5kbGVDb21wb3NpdGlvbjpmdW5jdGlvbihlKXtpZigiY29tcG9zaXRpb25lbmQiPT09ZS50eXBlKXRoaXMuaXNPbkNvbXBvc2l0aW9uPSExLHRoaXMuY3VycmVudFZhbHVlPXRoaXMudmFsdWVCZWZvcmVDb21wb3NpdGlvbix0aGlzLnZhbHVlQmVmb3JlQ29tcG9zaXRpb249bnVsbCx0aGlzLmhhbmRsZUlucHV0KGUpO2Vsc2V7dmFyIHQ9ZS50YXJnZXQudmFsdWUsbj10W3QubGVuZ3RoLTFdfHwiIjt0aGlzLmlzT25Db21wb3NpdGlvbj0hKDAsYS5pc0tvcmVhbikobiksdGhpcy5pc09uQ29tcG9zaXRpb24mJiJjb21wb3NpdGlvbnN0YXJ0Ij09PWUudHlwZSYmKHRoaXMudmFsdWVCZWZvcmVDb21wb3NpdGlvbj10KX19LGhhbmRsZUlucHV0OmZ1bmN0aW9uKGUpe3ZhciB0PWUudGFyZ2V0LnZhbHVlO3RoaXMuc2V0Q3VycmVudFZhbHVlKHQpLHRoaXMuaXNPbkNvbXBvc2l0aW9ufHx0aGlzLiRlbWl0KCJpbnB1dCIsdCl9LGhhbmRsZUNoYW5nZTpmdW5jdGlvbihlKXt0aGlzLiRlbWl0KCJjaGFuZ2UiLGUudGFyZ2V0LnZhbHVlKX0sc2V0Q3VycmVudFZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuaXNPbkNvbXBvc2l0aW9uJiZlPT09dGhpcy52YWx1ZUJlZm9yZUNvbXBvc2l0aW9ufHwodGhpcy5jdXJyZW50VmFsdWU9ZSx0aGlzLmlzT25Db21wb3NpdGlvbnx8KHRoaXMuJG5leHRUaWNrKHRoaXMucmVzaXplVGV4dGFyZWEpLHRoaXMudmFsaWRhdGVFdmVudCYmdGhpcy5jdXJyZW50VmFsdWU9PT10aGlzLnZhbHVlJiZ0aGlzLmRpc3BhdGNoKCJFbEZvcm1JdGVtIiwiZWwuZm9ybS5jaGFuZ2UiLFtlXSkpKX0sY2FsY0ljb25PZmZzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9W10uc2xpY2UuY2FsbCh0aGlzLiRlbC5xdWVyeVNlbGVjdG9yQWxsKCIuZWwtaW5wdXRfXyIrZSl8fFtdKTtpZih0Lmxlbmd0aCl7Zm9yKHZhciBuPW51bGwscj0wO3I8dC5sZW5ndGg7cisrKWlmKHRbcl0ucGFyZW50Tm9kZT09PXRoaXMuJGVsKXtuPXRbcl07YnJlYWt9aWYobil7dmFyIGk9e3N1ZmZpeDoiYXBwZW5kIixwcmVmaXg6InByZXBlbmQifVtlXTt0aGlzLiRzbG90c1tpXT9uLnN0eWxlLnRyYW5zZm9ybT0idHJhbnNsYXRlWCgiKygic3VmZml4Ij09PWU/Ii0iOiIiKSt0aGlzLiRlbC5xdWVyeVNlbGVjdG9yKCIuZWwtaW5wdXQtZ3JvdXBfXyIraSkub2Zmc2V0V2lkdGgrInB4KSI6bi5yZW1vdmVBdHRyaWJ1dGUoInN0eWxlIil9fX0sdXBkYXRlSWNvbk9mZnNldDpmdW5jdGlvbigpe3RoaXMuY2FsY0ljb25PZmZzZXQoInByZWZpeCIpLHRoaXMuY2FsY0ljb25PZmZzZXQoInN1ZmZpeCIpfSxjbGVhcjpmdW5jdGlvbigpe3RoaXMuJGVtaXQoImlucHV0IiwiIiksdGhpcy4kZW1pdCgiY2hhbmdlIiwiIiksdGhpcy4kZW1pdCgiY2xlYXIiKSx0aGlzLnNldEN1cnJlbnRWYWx1ZSgiIil9fSxjcmVhdGVkOmZ1bmN0aW9uKCl7dGhpcy4kb24oImlucHV0U2VsZWN0Iix0aGlzLnNlbGVjdCl9LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLnJlc2l6ZVRleHRhcmVhKCksdGhpcy51cGRhdGVJY29uT2Zmc2V0KCl9LHVwZGF0ZWQ6ZnVuY3Rpb24oKXt0aGlzLiRuZXh0VGljayh0aGlzLnVwZGF0ZUljb25PZmZzZXQpfX19LDEwNDpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMCx0LmRlZmF1bHQ9ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjEsbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtyfHwocj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZXh0YXJlYSIpLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocikpO3ZhciBzPWZ1bmN0aW9uKGUpe3ZhciB0PXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGUpLG49dC5nZXRQcm9wZXJ0eVZhbHVlKCJib3gtc2l6aW5nIikscj1wYXJzZUZsb2F0KHQuZ2V0UHJvcGVydHlWYWx1ZSgicGFkZGluZy1ib3R0b20iKSkrcGFyc2VGbG9hdCh0LmdldFByb3BlcnR5VmFsdWUoInBhZGRpbmctdG9wIikpLGk9cGFyc2VGbG9hdCh0LmdldFByb3BlcnR5VmFsdWUoImJvcmRlci1ib3R0b20td2lkdGgiKSkrcGFyc2VGbG9hdCh0LmdldFByb3BlcnR5VmFsdWUoImJvcmRlci10b3Atd2lkdGgiKSk7cmV0dXJue2NvbnRleHRTdHlsZTpvLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZSsiOiIrdC5nZXRQcm9wZXJ0eVZhbHVlKGUpfSkuam9pbigiOyIpLHBhZGRpbmdTaXplOnIsYm9yZGVyU2l6ZTppLGJveFNpemluZzpufX0oZSksYT1zLnBhZGRpbmdTaXplLGw9cy5ib3JkZXJTaXplLHU9cy5ib3hTaXppbmcsYz1zLmNvbnRleHRTdHlsZTtyLnNldEF0dHJpYnV0ZSgic3R5bGUiLGMrIjsiK2kpLHIudmFsdWU9ZS52YWx1ZXx8ZS5wbGFjZWhvbGRlcnx8IiI7dmFyIGQ9ci5zY3JvbGxIZWlnaHQsZj17fTsiYm9yZGVyLWJveCI9PT11P2QrPWw6ImNvbnRlbnQtYm94Ij09PXUmJihkLT1hKTtyLnZhbHVlPSIiO3ZhciBoPXIuc2Nyb2xsSGVpZ2h0LWE7aWYobnVsbCE9PXQpe3ZhciBwPWgqdDsiYm9yZGVyLWJveCI9PT11JiYocD1wK2ErbCksZD1NYXRoLm1heChwLGQpLGYubWluSGVpZ2h0PXArInB4In1pZihudWxsIT09bil7dmFyIG09aCpuOyJib3JkZXItYm94Ij09PXUmJihtPW0rYStsKSxkPU1hdGgubWluKG0sZCl9cmV0dXJuIGYuaGVpZ2h0PWQrInB4IixyLnBhcmVudE5vZGUmJnIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKSxyPW51bGwsZn07dmFyIHI9dm9pZCAwLGk9IlxuICBoZWlnaHQ6MCAhaW1wb3J0YW50O1xuICB2aXNpYmlsaXR5OmhpZGRlbiAhaW1wb3J0YW50O1xuICBvdmVyZmxvdzpoaWRkZW4gIWltcG9ydGFudDtcbiAgcG9zaXRpb246YWJzb2x1dGUgIWltcG9ydGFudDtcbiAgei1pbmRleDotMTAwMCAhaW1wb3J0YW50O1xuICB0b3A6MCAhaW1wb3J0YW50O1xuICByaWdodDowICFpbXBvcnRhbnRcbiIsbz1bImxldHRlci1zcGFjaW5nIiwibGluZS1oZWlnaHQiLCJwYWRkaW5nLXRvcCIsInBhZGRpbmctYm90dG9tIiwiZm9udC1mYW1pbHkiLCJmb250LXdlaWdodCIsImZvbnQtc2l6ZSIsInRleHQtcmVuZGVyaW5nIiwidGV4dC10cmFuc2Zvcm0iLCJ3aWR0aCIsInRleHQtaW5kZW50IiwicGFkZGluZy1sZWZ0IiwicGFkZGluZy1yaWdodCIsImJvcmRlci13aWR0aCIsImJveC1zaXppbmciXX0sMTA1OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbigiZGl2Iix7Y2xhc3M6WyJ0ZXh0YXJlYSI9PT1lLnR5cGU/ImVsLXRleHRhcmVhIjoiZWwtaW5wdXQiLGUuaW5wdXRTaXplPyJlbC1pbnB1dC0tIitlLmlucHV0U2l6ZToiIix7ImlzLWRpc2FibGVkIjplLmlucHV0RGlzYWJsZWQsImVsLWlucHV0LWdyb3VwIjplLiRzbG90cy5wcmVwZW5kfHxlLiRzbG90cy5hcHBlbmQsImVsLWlucHV0LWdyb3VwLS1hcHBlbmQiOmUuJHNsb3RzLmFwcGVuZCwiZWwtaW5wdXQtZ3JvdXAtLXByZXBlbmQiOmUuJHNsb3RzLnByZXBlbmQsImVsLWlucHV0LS1wcmVmaXgiOmUuJHNsb3RzLnByZWZpeHx8ZS5wcmVmaXhJY29uLCJlbC1pbnB1dC0tc3VmZml4IjplLiRzbG90cy5zdWZmaXh8fGUuc3VmZml4SWNvbnx8ZS5jbGVhcmFibGV9XSxvbjp7bW91c2VlbnRlcjpmdW5jdGlvbih0KXtlLmhvdmVyaW5nPSEwfSxtb3VzZWxlYXZlOmZ1bmN0aW9uKHQpe2UuaG92ZXJpbmc9ITF9fX0sWyJ0ZXh0YXJlYSIhPT1lLnR5cGU/W2UuJHNsb3RzLnByZXBlbmQ/bigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLWlucHV0LWdyb3VwX19wcmVwZW5kIn0sW2UuX3QoInByZXBlbmQiKV0sMik6ZS5fZSgpLCJ0ZXh0YXJlYSIhPT1lLnR5cGU/bigiaW5wdXQiLGUuX2Ioe3JlZjoiaW5wdXQiLHN0YXRpY0NsYXNzOiJlbC1pbnB1dF9faW5uZXIiLGF0dHJzOnt0YWJpbmRleDplLnRhYmluZGV4LHR5cGU6ZS50eXBlLGRpc2FibGVkOmUuaW5wdXREaXNhYmxlZCxyZWFkb25seTplLnJlYWRvbmx5LGF1dG9jb21wbGV0ZTplLmF1dG9Db21wbGV0ZXx8ZS5hdXRvY29tcGxldGUsImFyaWEtbGFiZWwiOmUubGFiZWx9LGRvbVByb3BzOnt2YWx1ZTplLmN1cnJlbnRWYWx1ZX0sb246e2NvbXBvc2l0aW9uc3RhcnQ6ZS5oYW5kbGVDb21wb3NpdGlvbixjb21wb3NpdGlvbnVwZGF0ZTplLmhhbmRsZUNvbXBvc2l0aW9uLGNvbXBvc2l0aW9uZW5kOmUuaGFuZGxlQ29tcG9zaXRpb24saW5wdXQ6ZS5oYW5kbGVJbnB1dCxmb2N1czplLmhhbmRsZUZvY3VzLGJsdXI6ZS5oYW5kbGVCbHVyLGNoYW5nZTplLmhhbmRsZUNoYW5nZX19LCJpbnB1dCIsZS4kYXR0cnMsITEpKTplLl9lKCksZS4kc2xvdHMucHJlZml4fHxlLnByZWZpeEljb24/bigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC1pbnB1dF9fcHJlZml4In0sW2UuX3QoInByZWZpeCIpLGUucHJlZml4SWNvbj9uKCJpIix7c3RhdGljQ2xhc3M6ImVsLWlucHV0X19pY29uIixjbGFzczplLnByZWZpeEljb259KTplLl9lKCldLDIpOmUuX2UoKSxlLiRzbG90cy5zdWZmaXh8fGUuc3VmZml4SWNvbnx8ZS5zaG93Q2xlYXJ8fGUudmFsaWRhdGVTdGF0ZSYmZS5uZWVkU3RhdHVzSWNvbj9uKCJzcGFuIix7c3RhdGljQ2xhc3M6ImVsLWlucHV0X19zdWZmaXgifSxbbigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC1pbnB1dF9fc3VmZml4LWlubmVyIn0sW2Uuc2hvd0NsZWFyP24oImkiLHtzdGF0aWNDbGFzczoiZWwtaW5wdXRfX2ljb24gZWwtaWNvbi1jaXJjbGUtY2xvc2UgZWwtaW5wdXRfX2NsZWFyIixvbjp7Y2xpY2s6ZS5jbGVhcn19KTpbZS5fdCgic3VmZml4IiksZS5zdWZmaXhJY29uP24oImkiLHtzdGF0aWNDbGFzczoiZWwtaW5wdXRfX2ljb24iLGNsYXNzOmUuc3VmZml4SWNvbn0pOmUuX2UoKV1dLDIpLGUudmFsaWRhdGVTdGF0ZT9uKCJpIix7c3RhdGljQ2xhc3M6ImVsLWlucHV0X19pY29uIixjbGFzczpbImVsLWlucHV0X192YWxpZGF0ZUljb24iLGUudmFsaWRhdGVJY29uXX0pOmUuX2UoKV0pOmUuX2UoKSxlLiRzbG90cy5hcHBlbmQ/bigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLWlucHV0LWdyb3VwX19hcHBlbmQifSxbZS5fdCgiYXBwZW5kIildLDIpOmUuX2UoKV06bigidGV4dGFyZWEiLGUuX2Ioe3JlZjoidGV4dGFyZWEiLHN0YXRpY0NsYXNzOiJlbC10ZXh0YXJlYV9faW5uZXIiLHN0eWxlOmUudGV4dGFyZWFTdHlsZSxhdHRyczp7dGFiaW5kZXg6ZS50YWJpbmRleCxkaXNhYmxlZDplLmlucHV0RGlzYWJsZWQscmVhZG9ubHk6ZS5yZWFkb25seSxhdXRvY29tcGxldGU6ZS5hdXRvQ29tcGxldGV8fGUuYXV0b2NvbXBsZXRlLCJhcmlhLWxhYmVsIjplLmxhYmVsfSxkb21Qcm9wczp7dmFsdWU6ZS5jdXJyZW50VmFsdWV9LG9uOntjb21wb3NpdGlvbnN0YXJ0OmUuaGFuZGxlQ29tcG9zaXRpb24sY29tcG9zaXRpb251cGRhdGU6ZS5oYW5kbGVDb21wb3NpdGlvbixjb21wb3NpdGlvbmVuZDplLmhhbmRsZUNvbXBvc2l0aW9uLGlucHV0OmUuaGFuZGxlSW5wdXQsZm9jdXM6ZS5oYW5kbGVGb2N1cyxibHVyOmUuaGFuZGxlQmx1cixjaGFuZ2U6ZS5oYW5kbGVDaGFuZ2V9fSwidGV4dGFyZWEiLGUuJGF0dHJzLCExKSldLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119O3QuYT1yfSwyMzpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJFL2luIil9LDg6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiYVc1bCIpfSw5OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImptYUMiKX19KX0sSVNZVzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcixpPW4oIjcrdVciKSxvPShyPWkpJiZyLl9fZXNNb2R1bGU/cjp7ZGVmYXVsdDpyfSxzPW4oIjJrdkEiKTt2YXIgYT1bXSxsPSJAQGNsaWNrb3V0c2lkZUNvbnRleHQiLHU9dm9pZCAwLGM9MDtmdW5jdGlvbiBkKGUsdCxuKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30saT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e307IShuJiZuLmNvbnRleHQmJnIudGFyZ2V0JiZpLnRhcmdldCl8fGUuY29udGFpbnMoci50YXJnZXQpfHxlLmNvbnRhaW5zKGkudGFyZ2V0KXx8ZT09PXIudGFyZ2V0fHxuLmNvbnRleHQucG9wcGVyRWxtJiYobi5jb250ZXh0LnBvcHBlckVsbS5jb250YWlucyhyLnRhcmdldCl8fG4uY29udGV4dC5wb3BwZXJFbG0uY29udGFpbnMoaS50YXJnZXQpKXx8KHQuZXhwcmVzc2lvbiYmZVtsXS5tZXRob2ROYW1lJiZuLmNvbnRleHRbZVtsXS5tZXRob2ROYW1lXT9uLmNvbnRleHRbZVtsXS5tZXRob2ROYW1lXSgpOmVbbF0uYmluZGluZ0ZuJiZlW2xdLmJpbmRpbmdGbigpKX19IW8uZGVmYXVsdC5wcm90b3R5cGUuJGlzU2VydmVyJiYoMCxzLm9uKShkb2N1bWVudCwibW91c2Vkb3duIixmdW5jdGlvbihlKXtyZXR1cm4gdT1lfSksIW8uZGVmYXVsdC5wcm90b3R5cGUuJGlzU2VydmVyJiYoMCxzLm9uKShkb2N1bWVudCwibW91c2V1cCIsZnVuY3Rpb24oZSl7YS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiB0W2xdLmRvY3VtZW50SGFuZGxlcihlLHUpfSl9KSx0LmRlZmF1bHQ9e2JpbmQ6ZnVuY3Rpb24oZSx0LG4pe2EucHVzaChlKTt2YXIgcj1jKys7ZVtsXT17aWQ6cixkb2N1bWVudEhhbmRsZXI6ZChlLHQsbiksbWV0aG9kTmFtZTp0LmV4cHJlc3Npb24sYmluZGluZ0ZuOnQudmFsdWV9fSx1cGRhdGU6ZnVuY3Rpb24oZSx0LG4pe2VbbF0uZG9jdW1lbnRIYW5kbGVyPWQoZSx0LG4pLGVbbF0ubWV0aG9kTmFtZT10LmV4cHJlc3Npb24sZVtsXS5iaW5kaW5nRm49dC52YWx1ZX0sdW5iaW5kOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1hLmxlbmd0aCxuPTA7bjx0O24rKylpZihhW25dW2xdLmlkPT09ZVtsXS5pZCl7YS5zcGxpY2UobiwxKTticmVha31kZWxldGUgZVtsXX19fSxJYmh1OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCJEMkwyIiksaT1uKCJUY1E3Iiksbz1uKCJ2RmMvIikoITEpLHM9bigiYXgzZCIpKCJJRV9QUk9UTyIpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciBuLGE9aShlKSxsPTAsdT1bXTtmb3IobiBpbiBhKW4hPXMmJnIoYSxuKSYmdS5wdXNoKG4pO2Zvcig7dC5sZW5ndGg+bDspcihhLG49dFtsKytdKSYmKH5vKHUsbil8fHUucHVzaChuKSk7cmV0dXJuIHV9fSwiSlAreiI6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZnVuY3Rpb24oKXtmb3IodmFyIG49bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpLHI9MDtyPG4ubGVuZ3RoO3IrKyluW3JdPWFyZ3VtZW50c1tyXTtyZXR1cm4gZS5hcHBseSh0LG4pfX19LEtDTFk6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjsoZnVuY3Rpb24odCl7dmFyIHI9bigiY0dHMiIpLGk9bigiNVZRKyIpLG89eyJDb250ZW50LVR5cGUiOiJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQifTtmdW5jdGlvbiBzKGUsdCl7IXIuaXNVbmRlZmluZWQoZSkmJnIuaXNVbmRlZmluZWQoZVsiQ29udGVudC1UeXBlIl0pJiYoZVsiQ29udGVudC1UeXBlIl09dCl9dmFyIGEsbD17YWRhcHRlcjooInVuZGVmaW5lZCIhPXR5cGVvZiBYTUxIdHRwUmVxdWVzdD9hPW4oIjdHd1ciKTp2b2lkIDAhPT10JiYoYT1uKCI3R3dXIikpLGEpLHRyYW5zZm9ybVJlcXVlc3Q6W2Z1bmN0aW9uKGUsdCl7cmV0dXJuIGkodCwiQ29udGVudC1UeXBlIiksci5pc0Zvcm1EYXRhKGUpfHxyLmlzQXJyYXlCdWZmZXIoZSl8fHIuaXNCdWZmZXIoZSl8fHIuaXNTdHJlYW0oZSl8fHIuaXNGaWxlKGUpfHxyLmlzQmxvYihlKT9lOnIuaXNBcnJheUJ1ZmZlclZpZXcoZSk/ZS5idWZmZXI6ci5pc1VSTFNlYXJjaFBhcmFtcyhlKT8ocyh0LCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCIpLGUudG9TdHJpbmcoKSk6ci5pc09iamVjdChlKT8ocyh0LCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgiKSxKU09OLnN0cmluZ2lmeShlKSk6ZX1dLHRyYW5zZm9ybVJlc3BvbnNlOltmdW5jdGlvbihlKXtpZigic3RyaW5nIj09dHlwZW9mIGUpdHJ5e2U9SlNPTi5wYXJzZShlKX1jYXRjaChlKXt9cmV0dXJuIGV9XSx0aW1lb3V0OjAseHNyZkNvb2tpZU5hbWU6IlhTUkYtVE9LRU4iLHhzcmZIZWFkZXJOYW1lOiJYLVhTUkYtVE9LRU4iLG1heENvbnRlbnRMZW5ndGg6LTEsdmFsaWRhdGVTdGF0dXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU+PTIwMCYmZTwzMDB9fTtsLmhlYWRlcnM9e2NvbW1vbjp7QWNjZXB0OiJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyoifX0sci5mb3JFYWNoKFsiZGVsZXRlIiwiZ2V0IiwiaGVhZCJdLGZ1bmN0aW9uKGUpe2wuaGVhZGVyc1tlXT17fX0pLHIuZm9yRWFjaChbInBvc3QiLCJwdXQiLCJwYXRjaCJdLGZ1bmN0aW9uKGUpe2wuaGVhZGVyc1tlXT1yLm1lcmdlKG8pfSksZS5leHBvcnRzPWx9KS5jYWxsKHQsbigiVzJuVSIpKX0sS2g0VzpmdW5jdGlvbihlLHQsbil7dC5mPW4oImRTemQiKX0sTDQydTpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLHM9bigiK1pNSiIpLGE9bigia251QyIpLGw9bigiUlBMViIpLHU9bigiT04wNyIpLGM9bigiN0t2RCIpLGQ9Yy5wcm9jZXNzLGY9Yy5zZXRJbW1lZGlhdGUsaD1jLmNsZWFySW1tZWRpYXRlLHA9Yy5NZXNzYWdlQ2hhbm5lbCxtPWMuRGlzcGF0Y2gsdj0wLGc9e30seT1mdW5jdGlvbigpe3ZhciBlPSt0aGlzO2lmKGcuaGFzT3duUHJvcGVydHkoZSkpe3ZhciB0PWdbZV07ZGVsZXRlIGdbZV0sdCgpfX0sXz1mdW5jdGlvbihlKXt5LmNhbGwoZS5kYXRhKX07ZiYmaHx8KGY9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLG49MTthcmd1bWVudHMubGVuZ3RoPm47KXQucHVzaChhcmd1bWVudHNbbisrXSk7cmV0dXJuIGdbKyt2XT1mdW5jdGlvbigpe2EoImZ1bmN0aW9uIj09dHlwZW9mIGU/ZTpGdW5jdGlvbihlKSx0KX0scih2KSx2fSxoPWZ1bmN0aW9uKGUpe2RlbGV0ZSBnW2VdfSwicHJvY2VzcyI9PW4oIlI5TTIiKShkKT9yPWZ1bmN0aW9uKGUpe2QubmV4dFRpY2socyh5LGUsMSkpfTptJiZtLm5vdz9yPWZ1bmN0aW9uKGUpe20ubm93KHMoeSxlLDEpKX06cD8obz0oaT1uZXcgcCkucG9ydDIsaS5wb3J0MS5vbm1lc3NhZ2U9XyxyPXMoby5wb3N0TWVzc2FnZSxvLDEpKTpjLmFkZEV2ZW50TGlzdGVuZXImJiJmdW5jdGlvbiI9PXR5cGVvZiBwb3N0TWVzc2FnZSYmIWMuaW1wb3J0U2NyaXB0cz8ocj1mdW5jdGlvbihlKXtjLnBvc3RNZXNzYWdlKGUrIiIsIioiKX0sYy5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIixfLCExKSk6cj0ib25yZWFkeXN0YXRlY2hhbmdlImluIHUoInNjcmlwdCIpP2Z1bmN0aW9uKGUpe2wuYXBwZW5kQ2hpbGQodSgic2NyaXB0IikpLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2wucmVtb3ZlQ2hpbGQodGhpcykseS5jYWxsKGUpfX06ZnVuY3Rpb24oZSl7c2V0VGltZW91dChzKHksZSwxKSwwKX0pLGUuZXhwb3J0cz17c2V0OmYsY2xlYXI6aH19LExLWmU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oIk5wSVEiKSxpPW4oIlg4RE8iKSxvPW4oIlRjUTciKSxzPW4oIk1tTXciKSxhPW4oIkQyTDIiKSxsPW4oIlNmQjciKSx1PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7dC5mPW4oIitFMzkiKT91OmZ1bmN0aW9uKGUsdCl7aWYoZT1vKGUpLHQ9cyh0LCEwKSxsKXRyeXtyZXR1cm4gdShlLHQpfWNhdGNoKGUpe31pZihhKGUsdCkpcmV0dXJuIGkoIXIuZi5jYWxsKGUsdCksZVt0XSl9fSxMUjZ5OmZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihyKXtpZih0W3JdKXJldHVybiB0W3JdLmV4cG9ydHM7dmFyIGk9dFtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxyKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCwiYSIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9Ii9kaXN0LyIsbihuLnM9MTU5KX0oezA6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4scixpLG8pe3ZhciBzLGE9ZT1lfHx7fSxsPXR5cGVvZiBlLmRlZmF1bHQ7Im9iamVjdCIhPT1sJiYiZnVuY3Rpb24iIT09bHx8KHM9ZSxhPWUuZGVmYXVsdCk7dmFyIHUsYz0iZnVuY3Rpb24iPT10eXBlb2YgYT9hLm9wdGlvbnM6YTtpZih0JiYoYy5yZW5kZXI9dC5yZW5kZXIsYy5zdGF0aWNSZW5kZXJGbnM9dC5zdGF0aWNSZW5kZXJGbnMsYy5fY29tcGlsZWQ9ITApLG4mJihjLmZ1bmN0aW9uYWw9ITApLGkmJihjLl9zY29wZUlkPWkpLG8/KHU9ZnVuY3Rpb24oZSl7KGU9ZXx8dGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR8fHRoaXMucGFyZW50JiZ0aGlzLnBhcmVudC4kdm5vZGUmJnRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KXx8InVuZGVmaW5lZCI9PXR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9ffHwoZT1fX1ZVRV9TU1JfQ09OVEVYVF9fKSxyJiZyLmNhbGwodGhpcyxlKSxlJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cyYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG8pfSxjLl9zc3JSZWdpc3Rlcj11KTpyJiYodT1yKSx1KXt2YXIgZD1jLmZ1bmN0aW9uYWwsZj1kP2MucmVuZGVyOmMuYmVmb3JlQ3JlYXRlO2Q/KGMuX2luamVjdFN0eWxlcz11LGMucmVuZGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHUuY2FsbCh0KSxmKGUsdCl9KTpjLmJlZm9yZUNyZWF0ZT1mP1tdLmNvbmNhdChmLHUpOlt1XX1yZXR1cm57ZXNNb2R1bGU6cyxleHBvcnRzOmEsb3B0aW9uczpjfX19LDEwOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oIklTWVciKX0sMTM6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiN0o5cyIpfSwxNDpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJPTjNPIil9LDE1OTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcixpPW4oMTYwKSxvPShyPWkpJiZyLl9fZXNNb2R1bGU/cjp7ZGVmYXVsdDpyfTtvLmRlZmF1bHQuaW5zdGFsbD1mdW5jdGlvbihlKXtlLmNvbXBvbmVudChvLmRlZmF1bHQubmFtZSxvLmRlZmF1bHQpfSx0LmRlZmF1bHQ9by5kZWZhdWx0fSwxNjpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJFS1RWIil9LDE2MDpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKDE2MSksaT1uLm4ociksbz1uKDE3Mykscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDE2MTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj1wKG4oMTYpKSxpPXAobigxNCkpLG89bigxOCkscz1wKG4oMTYyKSksYT1wKG4oNSkpLGw9cChuKDgpKSx1PXAobigxNjQpKSxjPXAobigxNjUpKSxkPXAobigxNjYpKSxmPXAobigxNjcpKSxoPXAobigxNzIpKTtmdW5jdGlvbiBwKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgbT0xO3QuZGVmYXVsdD17bmFtZToiRWxUYWJsZSIsbWl4aW5zOlthLmRlZmF1bHQsbC5kZWZhdWx0XSxkaXJlY3RpdmVzOntNb3VzZXdoZWVsOnMuZGVmYXVsdH0scHJvcHM6e2RhdGE6e3R5cGU6QXJyYXksZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybltdfX0sc2l6ZTpTdHJpbmcsd2lkdGg6W1N0cmluZyxOdW1iZXJdLGhlaWdodDpbU3RyaW5nLE51bWJlcl0sbWF4SGVpZ2h0OltTdHJpbmcsTnVtYmVyXSxmaXQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxzdHJpcGU6Qm9vbGVhbixib3JkZXI6Qm9vbGVhbixyb3dLZXk6W1N0cmluZyxGdW5jdGlvbl0sY29udGV4dDp7fSxzaG93SGVhZGVyOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sc2hvd1N1bW1hcnk6Qm9vbGVhbixzdW1UZXh0OlN0cmluZyxzdW1tYXJ5TWV0aG9kOkZ1bmN0aW9uLHJvd0NsYXNzTmFtZTpbU3RyaW5nLEZ1bmN0aW9uXSxyb3dTdHlsZTpbT2JqZWN0LEZ1bmN0aW9uXSxjZWxsQ2xhc3NOYW1lOltTdHJpbmcsRnVuY3Rpb25dLGNlbGxTdHlsZTpbT2JqZWN0LEZ1bmN0aW9uXSxoZWFkZXJSb3dDbGFzc05hbWU6W1N0cmluZyxGdW5jdGlvbl0saGVhZGVyUm93U3R5bGU6W09iamVjdCxGdW5jdGlvbl0saGVhZGVyQ2VsbENsYXNzTmFtZTpbU3RyaW5nLEZ1bmN0aW9uXSxoZWFkZXJDZWxsU3R5bGU6W09iamVjdCxGdW5jdGlvbl0saGlnaGxpZ2h0Q3VycmVudFJvdzpCb29sZWFuLGN1cnJlbnRSb3dLZXk6W1N0cmluZyxOdW1iZXJdLGVtcHR5VGV4dDpTdHJpbmcsZXhwYW5kUm93S2V5czpBcnJheSxkZWZhdWx0RXhwYW5kQWxsOkJvb2xlYW4sZGVmYXVsdFNvcnQ6T2JqZWN0LHRvb2x0aXBFZmZlY3Q6U3RyaW5nLHNwYW5NZXRob2Q6RnVuY3Rpb24sc2VsZWN0T25JbmRldGVybWluYXRlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH19LGNvbXBvbmVudHM6e1RhYmxlSGVhZGVyOmYuZGVmYXVsdCxUYWJsZUZvb3RlcjpoLmRlZmF1bHQsVGFibGVCb2R5OmQuZGVmYXVsdCxFbENoZWNrYm94OnIuZGVmYXVsdH0sbWV0aG9kczp7Z2V0TWlncmF0aW5nQ29uZmlnOmZ1bmN0aW9uKCl7cmV0dXJue2V2ZW50czp7ZXhwYW5kOiJleHBhbmQgaXMgcmVuYW1lZCB0byBleHBhbmQtY2hhbmdlIn19fSxzZXRDdXJyZW50Um93OmZ1bmN0aW9uKGUpe3RoaXMuc3RvcmUuY29tbWl0KCJzZXRDdXJyZW50Um93IixlKX0sdG9nZ2xlUm93U2VsZWN0aW9uOmZ1bmN0aW9uKGUsdCl7dGhpcy5zdG9yZS50b2dnbGVSb3dTZWxlY3Rpb24oZSx0KSx0aGlzLnN0b3JlLnVwZGF0ZUFsbFNlbGVjdGVkKCl9LHRvZ2dsZVJvd0V4cGFuc2lvbjpmdW5jdGlvbihlLHQpe3RoaXMuc3RvcmUudG9nZ2xlUm93RXhwYW5zaW9uKGUsdCl9LGNsZWFyU2VsZWN0aW9uOmZ1bmN0aW9uKCl7dGhpcy5zdG9yZS5jbGVhclNlbGVjdGlvbigpfSxjbGVhckZpbHRlcjpmdW5jdGlvbihlKXt0aGlzLnN0b3JlLmNsZWFyRmlsdGVyKGUpfSxjbGVhclNvcnQ6ZnVuY3Rpb24oKXt0aGlzLnN0b3JlLmNsZWFyU29ydCgpfSxoYW5kbGVNb3VzZUxlYXZlOmZ1bmN0aW9uKCl7dGhpcy5zdG9yZS5jb21taXQoInNldEhvdmVyUm93IixudWxsKSx0aGlzLmhvdmVyU3RhdGUmJih0aGlzLmhvdmVyU3RhdGU9bnVsbCl9LHVwZGF0ZVNjcm9sbFk6ZnVuY3Rpb24oKXt0aGlzLmxheW91dC51cGRhdGVTY3JvbGxZKCksdGhpcy5sYXlvdXQudXBkYXRlQ29sdW1uc1dpZHRoKCl9LGhhbmRsZUZpeGVkTW91c2V3aGVlbDpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuYm9keVdyYXBwZXI7aWYoTWF0aC5hYnModC5zcGluWSk+MCl7dmFyIHI9bi5zY3JvbGxUb3A7dC5waXhlbFk8MCYmMCE9PXImJmUucHJldmVudERlZmF1bHQoKSx0LnBpeGVsWT4wJiZuLnNjcm9sbEhlaWdodC1uLmNsaWVudEhlaWdodD5yJiZlLnByZXZlbnREZWZhdWx0KCksbi5zY3JvbGxUb3ArPU1hdGguY2VpbCh0LnBpeGVsWS81KX1lbHNlIG4uc2Nyb2xsTGVmdCs9TWF0aC5jZWlsKHQucGl4ZWxYLzUpfSxoYW5kbGVIZWFkZXJGb290ZXJNb3VzZXdoZWVsOmZ1bmN0aW9uKGUsdCl7dmFyIG49dC5waXhlbFgscj10LnBpeGVsWTtNYXRoLmFicyhuKT49TWF0aC5hYnMocikmJihlLnByZXZlbnREZWZhdWx0KCksdGhpcy5ib2R5V3JhcHBlci5zY3JvbGxMZWZ0Kz10LnBpeGVsWC81KX0sYmluZEV2ZW50czpmdW5jdGlvbigpe3ZhciBlPXRoaXMuJHJlZnMsdD1lLmhlYWRlcldyYXBwZXIsbj1lLmZvb3RlcldyYXBwZXIscj10aGlzLiRyZWZzLGk9dGhpczt0aGlzLmJvZHlXcmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoInNjcm9sbCIsZnVuY3Rpb24oKXt0JiYodC5zY3JvbGxMZWZ0PXRoaXMuc2Nyb2xsTGVmdCksbiYmKG4uc2Nyb2xsTGVmdD10aGlzLnNjcm9sbExlZnQpLHIuZml4ZWRCb2R5V3JhcHBlciYmKHIuZml4ZWRCb2R5V3JhcHBlci5zY3JvbGxUb3A9dGhpcy5zY3JvbGxUb3ApLHIucmlnaHRGaXhlZEJvZHlXcmFwcGVyJiYoci5yaWdodEZpeGVkQm9keVdyYXBwZXIuc2Nyb2xsVG9wPXRoaXMuc2Nyb2xsVG9wKTt2YXIgZT10aGlzLnNjcm9sbFdpZHRoLXRoaXMub2Zmc2V0V2lkdGgtMSxvPXRoaXMuc2Nyb2xsTGVmdDtpLnNjcm9sbFBvc2l0aW9uPW8+PWU/InJpZ2h0IjowPT09bz8ibGVmdCI6Im1pZGRsZSJ9KSx0aGlzLmZpdCYmKDAsby5hZGRSZXNpemVMaXN0ZW5lcikodGhpcy4kZWwsdGhpcy5yZXNpemVMaXN0ZW5lcil9LHJlc2l6ZUxpc3RlbmVyOmZ1bmN0aW9uKCl7aWYodGhpcy4kcmVhZHkpe3ZhciBlPSExLHQ9dGhpcy4kZWwsbj10aGlzLnJlc2l6ZVN0YXRlLHI9bi53aWR0aCxpPW4uaGVpZ2h0LG89dC5vZmZzZXRXaWR0aDtyIT09byYmKGU9ITApO3ZhciBzPXQub2Zmc2V0SGVpZ2h0Oyh0aGlzLmhlaWdodHx8dGhpcy5zaG91bGRVcGRhdGVIZWlnaHQpJiZpIT09cyYmKGU9ITApLGUmJih0aGlzLnJlc2l6ZVN0YXRlLndpZHRoPW8sdGhpcy5yZXNpemVTdGF0ZS5oZWlnaHQ9cyx0aGlzLmRvTGF5b3V0KCkpfX0sZG9MYXlvdXQ6ZnVuY3Rpb24oKXt0aGlzLmxheW91dC51cGRhdGVDb2x1bW5zV2lkdGgoKSx0aGlzLnNob3VsZFVwZGF0ZUhlaWdodCYmdGhpcy5sYXlvdXQudXBkYXRlRWxzSGVpZ2h0KCl9LHNvcnQ6ZnVuY3Rpb24oZSx0KXt0aGlzLnN0b3JlLmNvbW1pdCgic29ydCIse3Byb3A6ZSxvcmRlcjp0fSl9LHRvZ2dsZUFsbFNlbGVjdGlvbjpmdW5jdGlvbigpe3RoaXMuc3RvcmUuY29tbWl0KCJ0b2dnbGVBbGxTZWxlY3Rpb24iKX19LGNyZWF0ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMudGFibGVJZD0iZWwtdGFibGVfIittKyssdGhpcy5kZWJvdW5jZWRVcGRhdGVMYXlvdXQ9KDAsaS5kZWZhdWx0KSg1MCxmdW5jdGlvbigpe3JldHVybiBlLmRvTGF5b3V0KCl9KX0sY29tcHV0ZWQ6e3RhYmxlU2l6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNpemV8fCh0aGlzLiRFTEVNRU5UfHx7fSkuc2l6ZX0sYm9keVdyYXBwZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kcmVmcy5ib2R5V3JhcHBlcn0sc2hvdWxkVXBkYXRlSGVpZ2h0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGVpZ2h0fHx0aGlzLm1heEhlaWdodHx8dGhpcy5maXhlZENvbHVtbnMubGVuZ3RoPjB8fHRoaXMucmlnaHRGaXhlZENvbHVtbnMubGVuZ3RoPjB9LHNlbGVjdGlvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0b3JlLnN0YXRlcy5zZWxlY3Rpb259LGNvbHVtbnM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdG9yZS5zdGF0ZXMuY29sdW1uc30sdGFibGVEYXRhOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RvcmUuc3RhdGVzLmRhdGF9LGZpeGVkQ29sdW1uczpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0b3JlLnN0YXRlcy5maXhlZENvbHVtbnN9LHJpZ2h0Rml4ZWRDb2x1bW5zOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RvcmUuc3RhdGVzLnJpZ2h0Rml4ZWRDb2x1bW5zfSxib2R5V2lkdGg6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmxheW91dCx0PWUuYm9keVdpZHRoLG49ZS5zY3JvbGxZLHI9ZS5ndXR0ZXJXaWR0aDtyZXR1cm4gdD90LShuP3I6MCkrInB4IjoiIn0sYm9keUhlaWdodDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhlaWdodD97aGVpZ2h0OnRoaXMubGF5b3V0LmJvZHlIZWlnaHQ/dGhpcy5sYXlvdXQuYm9keUhlaWdodCsicHgiOiIifTp0aGlzLm1heEhlaWdodD97Im1heC1oZWlnaHQiOih0aGlzLnNob3dIZWFkZXI/dGhpcy5tYXhIZWlnaHQtdGhpcy5sYXlvdXQuaGVhZGVySGVpZ2h0LXRoaXMubGF5b3V0LmZvb3RlckhlaWdodDp0aGlzLm1heEhlaWdodC10aGlzLmxheW91dC5mb290ZXJIZWlnaHQpKyJweCJ9Ont9fSxmaXhlZEJvZHlIZWlnaHQ6ZnVuY3Rpb24oKXtpZih0aGlzLmhlaWdodClyZXR1cm57aGVpZ2h0OnRoaXMubGF5b3V0LmZpeGVkQm9keUhlaWdodD90aGlzLmxheW91dC5maXhlZEJvZHlIZWlnaHQrInB4IjoiIn07aWYodGhpcy5tYXhIZWlnaHQpe3ZhciBlPXRoaXMubGF5b3V0LnNjcm9sbFg/dGhpcy5tYXhIZWlnaHQtdGhpcy5sYXlvdXQuZ3V0dGVyV2lkdGg6dGhpcy5tYXhIZWlnaHQ7cmV0dXJuIHRoaXMuc2hvd0hlYWRlciYmKGUtPXRoaXMubGF5b3V0LmhlYWRlckhlaWdodCkseyJtYXgtaGVpZ2h0IjooZS09dGhpcy5sYXlvdXQuZm9vdGVySGVpZ2h0KSsicHgifX1yZXR1cm57fX0sZml4ZWRIZWlnaHQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXhIZWlnaHQ/dGhpcy5zaG93U3VtbWFyeT97Ym90dG9tOjB9Ontib3R0b206dGhpcy5sYXlvdXQuc2Nyb2xsWCYmdGhpcy5kYXRhLmxlbmd0aD90aGlzLmxheW91dC5ndXR0ZXJXaWR0aCsicHgiOiIifTp0aGlzLnNob3dTdW1tYXJ5P3toZWlnaHQ6dGhpcy5sYXlvdXQudGFibGVIZWlnaHQ/dGhpcy5sYXlvdXQudGFibGVIZWlnaHQrInB4IjoiIn06e2hlaWdodDp0aGlzLmxheW91dC52aWV3cG9ydEhlaWdodD90aGlzLmxheW91dC52aWV3cG9ydEhlaWdodCsicHgiOiIifX19LHdhdGNoOntoZWlnaHQ6e2ltbWVkaWF0ZTohMCxoYW5kbGVyOmZ1bmN0aW9uKGUpe3RoaXMubGF5b3V0LnNldEhlaWdodChlKX19LG1heEhlaWdodDp7aW1tZWRpYXRlOiEwLGhhbmRsZXI6ZnVuY3Rpb24oZSl7dGhpcy5sYXlvdXQuc2V0TWF4SGVpZ2h0KGUpfX0sY3VycmVudFJvd0tleTpmdW5jdGlvbihlKXt0aGlzLnN0b3JlLnNldEN1cnJlbnRSb3dLZXkoZSl9LGRhdGE6e2ltbWVkaWF0ZTohMCxoYW5kbGVyOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy5zdG9yZS5jb21taXQoInNldERhdGEiLGUpLHRoaXMuJHJlYWR5JiZ0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3QuZG9MYXlvdXQoKX0pfX0sZXhwYW5kUm93S2V5czp7aW1tZWRpYXRlOiEwLGhhbmRsZXI6ZnVuY3Rpb24oZSl7ZSYmdGhpcy5zdG9yZS5zZXRFeHBhbmRSb3dLZXlzKGUpfX19LGRlc3Ryb3llZDpmdW5jdGlvbigpe3RoaXMucmVzaXplTGlzdGVuZXImJigwLG8ucmVtb3ZlUmVzaXplTGlzdGVuZXIpKHRoaXMuJGVsLHRoaXMucmVzaXplTGlzdGVuZXIpfSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLmJpbmRFdmVudHMoKSx0aGlzLnN0b3JlLnVwZGF0ZUNvbHVtbnMoKSx0aGlzLmRvTGF5b3V0KCksdGhpcy5yZXNpemVTdGF0ZT17d2lkdGg6dGhpcy4kZWwub2Zmc2V0V2lkdGgsaGVpZ2h0OnRoaXMuJGVsLm9mZnNldEhlaWdodH0sdGhpcy5zdG9yZS5zdGF0ZXMuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QuZmlsdGVyZWRWYWx1ZSYmdC5maWx0ZXJlZFZhbHVlLmxlbmd0aCYmZS5zdG9yZS5jb21taXQoImZpbHRlckNoYW5nZSIse2NvbHVtbjp0LHZhbHVlczp0LmZpbHRlcmVkVmFsdWUsc2lsZW50OiEwfSl9KSx0aGlzLiRyZWFkeT0hMH0sZGF0YTpmdW5jdGlvbigpe3ZhciBlPW5ldyB1LmRlZmF1bHQodGhpcyx7cm93S2V5OnRoaXMucm93S2V5LGRlZmF1bHRFeHBhbmRBbGw6dGhpcy5kZWZhdWx0RXhwYW5kQWxsLHNlbGVjdE9uSW5kZXRlcm1pbmF0ZTp0aGlzLnNlbGVjdE9uSW5kZXRlcm1pbmF0ZX0pO3JldHVybntsYXlvdXQ6bmV3IGMuZGVmYXVsdCh7c3RvcmU6ZSx0YWJsZTp0aGlzLGZpdDp0aGlzLmZpdCxzaG93SGVhZGVyOnRoaXMuc2hvd0hlYWRlcn0pLHN0b3JlOmUsaXNIaWRkZW46ITEscmVuZGVyRXhwYW5kZWQ6bnVsbCxyZXNpemVQcm94eVZpc2libGU6ITEscmVzaXplU3RhdGU6e3dpZHRoOm51bGwsaGVpZ2h0Om51bGx9LGlzR3JvdXA6ITEsc2Nyb2xsUG9zaXRpb246ImxlZnQifX19fSwxNjI6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHIsaT1uKDE2Myksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07dmFyIHM9InVuZGVmaW5lZCIhPXR5cGVvZiBuYXZpZ2F0b3ImJm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCJmaXJlZm94Iik+LTE7dC5kZWZhdWx0PXtiaW5kOmZ1bmN0aW9uKGUsdCl7dmFyIG4scjtuPWUscj10LnZhbHVlLG4mJm4uYWRkRXZlbnRMaXN0ZW5lciYmbi5hZGRFdmVudExpc3RlbmVyKHM/IkRPTU1vdXNlU2Nyb2xsIjoibW91c2V3aGVlbCIsZnVuY3Rpb24oZSl7dmFyIHQ9KDAsby5kZWZhdWx0KShlKTtyJiZyLmFwcGx5KHRoaXMsW2UsdF0pfSl9fX0sMTYzOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oIjNmbysiKX0sMTY0OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByPWwobig0KSksaT1sKG4oMTQpKSxvPWwobig5KSkscz1uKDMpLGE9big0OCk7ZnVuY3Rpb24gbChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIHU9ZnVuY3Rpb24oZSx0KXt2YXIgbj10LnNvcnRpbmdDb2x1bW47cmV0dXJuIG4mJiJzdHJpbmciIT10eXBlb2Ygbi5zb3J0YWJsZT8oMCxhLm9yZGVyQnkpKGUsdC5zb3J0UHJvcCx0LnNvcnRPcmRlcixuLnNvcnRNZXRob2Qsbi5zb3J0QnkpOmV9LGM9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtyZXR1cm4oZXx8W10pLmZvckVhY2goZnVuY3Rpb24oZSxyKXtuWygwLGEuZ2V0Um93SWRlbnRpdHkpKGUsdCldPXtyb3c6ZSxpbmRleDpyfX0pLG59LGQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPSExLGk9ZS5zZWxlY3Rpb24sbz1pLmluZGV4T2YodCk7cmV0dXJuIHZvaWQgMD09PW4/LTE9PT1vPyhpLnB1c2godCkscj0hMCk6KGkuc3BsaWNlKG8sMSkscj0hMCk6biYmLTE9PT1vPyhpLnB1c2godCkscj0hMCk6IW4mJm8+LTEmJihpLnNwbGljZShvLDEpLHI9ITApLHJ9LGY9ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9O2lmKCFlKXRocm93IG5ldyBFcnJvcigiVGFibGUgaXMgcmVxdWlyZWQuIik7Zm9yKHZhciBuIGluIHRoaXMudGFibGU9ZSx0aGlzLnN0YXRlcz17cm93S2V5Om51bGwsX2NvbHVtbnM6W10sb3JpZ2luQ29sdW1uczpbXSxjb2x1bW5zOltdLGZpeGVkQ29sdW1uczpbXSxyaWdodEZpeGVkQ29sdW1uczpbXSxsZWFmQ29sdW1uczpbXSxmaXhlZExlYWZDb2x1bW5zOltdLHJpZ2h0Rml4ZWRMZWFmQ29sdW1uczpbXSxsZWFmQ29sdW1uc0xlbmd0aDowLGZpeGVkTGVhZkNvbHVtbnNMZW5ndGg6MCxyaWdodEZpeGVkTGVhZkNvbHVtbnNMZW5ndGg6MCxpc0NvbXBsZXg6ITEsZmlsdGVyZWREYXRhOm51bGwsZGF0YTpudWxsLHNvcnRpbmdDb2x1bW46bnVsbCxzb3J0UHJvcDpudWxsLHNvcnRPcmRlcjpudWxsLGlzQWxsU2VsZWN0ZWQ6ITEsc2VsZWN0aW9uOltdLHJlc2VydmVTZWxlY3Rpb246ITEsc2VsZWN0YWJsZTpudWxsLGN1cnJlbnRSb3c6bnVsbCxob3ZlclJvdzpudWxsLGZpbHRlcnM6e30sZXhwYW5kUm93czpbXSxkZWZhdWx0RXhwYW5kQWxsOiExLHNlbGVjdE9uSW5kZXRlcm1pbmF0ZTohMX0sdCl0Lmhhc093blByb3BlcnR5KG4pJiZ0aGlzLnN0YXRlcy5oYXNPd25Qcm9wZXJ0eShuKSYmKHRoaXMuc3RhdGVzW25dPXRbbl0pfTtmLnByb3RvdHlwZS5tdXRhdGlvbnM9e3NldERhdGE6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLGk9ZS5fZGF0YSE9PXQ7ZS5fZGF0YT10LE9iamVjdC5rZXlzKGUuZmlsdGVycykuZm9yRWFjaChmdW5jdGlvbihyKXt2YXIgaT1lLmZpbHRlcnNbcl07aWYoaSYmMCE9PWkubGVuZ3RoKXt2YXIgbz0oMCxhLmdldENvbHVtbkJ5SWQpKG4uc3RhdGVzLHIpO28mJm8uZmlsdGVyTWV0aG9kJiYodD10LmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gaS5zb21lKGZ1bmN0aW9uKHQpe3JldHVybiBvLmZpbHRlck1ldGhvZC5jYWxsKG51bGwsdCxlLG8pfSl9KSl9fSksZS5maWx0ZXJlZERhdGE9dCxlLmRhdGE9dSh0fHxbXSxlKSx0aGlzLnVwZGF0ZUN1cnJlbnRSb3coKTt2YXIgbyxzLGw9ZS5yb3dLZXk7aWYoZS5yZXNlcnZlU2VsZWN0aW9uP2w/KG89ZS5zZWxlY3Rpb24scz1jKG8sbCksZS5kYXRhLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9KDAsYS5nZXRSb3dJZGVudGl0eSkoZSxsKSxuPXNbdF07biYmKG9bbi5pbmRleF09ZSl9KSxuLnVwZGF0ZUFsbFNlbGVjdGVkKCkpOmNvbnNvbGUud2FybigiV0FSTjogcm93S2V5IGlzIHJlcXVpcmVkIHdoZW4gcmVzZXJ2ZS1zZWxlY3Rpb24gaXMgZW5hYmxlZC4iKTooaT90aGlzLmNsZWFyU2VsZWN0aW9uKCk6dGhpcy5jbGVhblNlbGVjdGlvbigpLHRoaXMudXBkYXRlQWxsU2VsZWN0ZWQoKSksZS5kZWZhdWx0RXhwYW5kQWxsKXRoaXMuc3RhdGVzLmV4cGFuZFJvd3M9KGUuZGF0YXx8W10pLnNsaWNlKDApO2Vsc2UgaWYobCl7dmFyIGQ9Yyh0aGlzLnN0YXRlcy5leHBhbmRSb3dzLGwpLGY9W10saD1lLmRhdGEscD1BcnJheS5pc0FycmF5KGgpLG09MDtmb3IoaD1wP2g6aFtTeW1ib2wuaXRlcmF0b3JdKCk7Oyl7dmFyIHY7aWYocCl7aWYobT49aC5sZW5ndGgpYnJlYWs7dj1oW20rK119ZWxzZXtpZigobT1oLm5leHQoKSkuZG9uZSlicmVhazt2PW0udmFsdWV9dmFyIGc9djtkWygwLGEuZ2V0Um93SWRlbnRpdHkpKGcsbCldJiZmLnB1c2goZyl9dGhpcy5zdGF0ZXMuZXhwYW5kUm93cz1mfWVsc2UgdGhpcy5zdGF0ZXMuZXhwYW5kUm93cz1bXTtyLmRlZmF1bHQubmV4dFRpY2soZnVuY3Rpb24oKXtyZXR1cm4gbi50YWJsZS51cGRhdGVTY3JvbGxZKCl9KX0sY2hhbmdlU29ydENvbmRpdGlvbjpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7ZS5kYXRhPXUoZS5maWx0ZXJlZERhdGF8fGUuX2RhdGF8fFtdLGUpO3ZhciBpPXRoaXMudGFibGUsbz1pLiRlbCxhPWkuaGlnaGxpZ2h0Q3VycmVudFJvdztpZihvJiZhKXt2YXIgbD1lLmRhdGEsYz1vLnF1ZXJ5U2VsZWN0b3IoInRib2R5IikuY2hpbGRyZW4sZD1bXS5maWx0ZXIuY2FsbChjLGZ1bmN0aW9uKGUpe3JldHVybigwLHMuaGFzQ2xhc3MpKGUsImVsLXRhYmxlX19yb3ciKX0pLGY9ZFtsLmluZGV4T2YoZS5jdXJyZW50Um93KV07W10uZm9yRWFjaC5jYWxsKGQsZnVuY3Rpb24oZSl7cmV0dXJuKDAscy5yZW1vdmVDbGFzcykoZSwiY3VycmVudC1yb3ciKX0pLCgwLHMuYWRkQ2xhc3MpKGYsImN1cnJlbnQtcm93Iil9dCYmdC5zaWxlbnR8fHRoaXMudGFibGUuJGVtaXQoInNvcnQtY2hhbmdlIix7Y29sdW1uOnRoaXMuc3RhdGVzLnNvcnRpbmdDb2x1bW4scHJvcDp0aGlzLnN0YXRlcy5zb3J0UHJvcCxvcmRlcjp0aGlzLnN0YXRlcy5zb3J0T3JkZXJ9KSxyLmRlZmF1bHQubmV4dFRpY2soZnVuY3Rpb24oKXtyZXR1cm4gbi50YWJsZS51cGRhdGVTY3JvbGxZKCl9KX0sc29ydDpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMsaT10LnByb3Asbz10Lm9yZGVyO2kmJihlLnNvcnRQcm9wPWksZS5zb3J0T3JkZXI9b3x8ImFzY2VuZGluZyIsci5kZWZhdWx0Lm5leHRUaWNrKGZ1bmN0aW9uKCl7Zm9yKHZhciB0PTAscj1lLmNvbHVtbnMubGVuZ3RoO3Q8cjt0Kyspe3ZhciBpPWUuY29sdW1uc1t0XTtpZihpLnByb3BlcnR5PT09ZS5zb3J0UHJvcCl7aS5vcmRlcj1lLnNvcnRPcmRlcixlLnNvcnRpbmdDb2x1bW49aTticmVha319ZS5zb3J0aW5nQ29sdW1uJiZuLmNvbW1pdCgiY2hhbmdlU29ydENvbmRpdGlvbiIpfSkpfSxmaWx0ZXJDaGFuZ2U6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLGk9dC5jb2x1bW4sbz10LnZhbHVlcyxzPXQuc2lsZW50LGw9dC5tdWx0aTtvJiYhQXJyYXkuaXNBcnJheShvKSYmKG89W29dKTt2YXIgYz17fTtsP2kuZm9yRWFjaChmdW5jdGlvbih0KXtlLmZpbHRlcnNbdC5pZF09byxjW3QuY29sdW1uS2V5fHx0LmlkXT1vfSk6aS5wcm9wZXJ0eSYmKGUuZmlsdGVyc1tpLmlkXT1vLGNbaS5jb2x1bW5LZXl8fGkuaWRdPW8pO3ZhciBkPWUuX2RhdGE7T2JqZWN0LmtleXMoZS5maWx0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciByPWUuZmlsdGVyc1t0XTtpZihyJiYwIT09ci5sZW5ndGgpe3ZhciBpPSgwLGEuZ2V0Q29sdW1uQnlJZCkobi5zdGF0ZXMsdCk7aSYmaS5maWx0ZXJNZXRob2QmJihkPWQuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiByLnNvbWUoZnVuY3Rpb24odCl7cmV0dXJuIGkuZmlsdGVyTWV0aG9kLmNhbGwobnVsbCx0LGUsaSl9KX0pKX19KSxlLmZpbHRlcmVkRGF0YT1kLGUuZGF0YT11KGQsZSksc3x8dGhpcy50YWJsZS4kZW1pdCgiZmlsdGVyLWNoYW5nZSIsYyksci5kZWZhdWx0Lm5leHRUaWNrKGZ1bmN0aW9uKCl7cmV0dXJuIG4udGFibGUudXBkYXRlU2Nyb2xsWSgpfSl9LGluc2VydENvbHVtbjpmdW5jdGlvbihlLHQsbixyKXt2YXIgaT1lLl9jb2x1bW5zO3ImJigoaT1yLmNoaWxkcmVuKXx8KGk9ci5jaGlsZHJlbj1bXSkpLHZvaWQgMCE9PW4/aS5zcGxpY2UobiwwLHQpOmkucHVzaCh0KSwic2VsZWN0aW9uIj09PXQudHlwZSYmKGUuc2VsZWN0YWJsZT10LnNlbGVjdGFibGUsZS5yZXNlcnZlU2VsZWN0aW9uPXQucmVzZXJ2ZVNlbGVjdGlvbiksdGhpcy50YWJsZS4kcmVhZHkmJih0aGlzLnVwZGF0ZUNvbHVtbnMoKSx0aGlzLnNjaGVkdWxlTGF5b3V0KCkpfSxyZW1vdmVDb2x1bW46ZnVuY3Rpb24oZSx0LG4pe3ZhciByPWUuX2NvbHVtbnM7biYmKChyPW4uY2hpbGRyZW4pfHwocj1uLmNoaWxkcmVuPVtdKSksciYmci5zcGxpY2Uoci5pbmRleE9mKHQpLDEpLHRoaXMudGFibGUuJHJlYWR5JiYodGhpcy51cGRhdGVDb2x1bW5zKCksdGhpcy5zY2hlZHVsZUxheW91dCgpKX0sc2V0SG92ZXJSb3c6ZnVuY3Rpb24oZSx0KXtlLmhvdmVyUm93PXR9LHNldEN1cnJlbnRSb3c6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmN1cnJlbnRSb3c7ZS5jdXJyZW50Um93PXQsbiE9PXQmJnRoaXMudGFibGUuJGVtaXQoImN1cnJlbnQtY2hhbmdlIix0LG4pfSxyb3dTZWxlY3RlZENoYW5nZWQ6ZnVuY3Rpb24oZSx0KXt2YXIgbj1kKGUsdCkscj1lLnNlbGVjdGlvbjtpZihuKXt2YXIgaT10aGlzLnRhYmxlO2kuJGVtaXQoInNlbGVjdGlvbi1jaGFuZ2UiLHI/ci5zbGljZSgpOltdKSxpLiRlbWl0KCJzZWxlY3QiLHIsdCl9dGhpcy51cGRhdGVBbGxTZWxlY3RlZCgpfSx0b2dnbGVBbGxTZWxlY3Rpb246KDAsaS5kZWZhdWx0KSgxMCxmdW5jdGlvbihlKXt2YXIgdD1lLmRhdGF8fFtdO2lmKDAhPT10Lmxlbmd0aCl7dmFyIG49dGhpcy5zdGF0ZXMuc2VsZWN0aW9uLHI9ZS5zZWxlY3RPbkluZGV0ZXJtaW5hdGU/IWUuaXNBbGxTZWxlY3RlZDohKGUuaXNBbGxTZWxlY3RlZHx8bi5sZW5ndGgpLGk9ITE7dC5mb3JFYWNoKGZ1bmN0aW9uKHQsbil7ZS5zZWxlY3RhYmxlP2Uuc2VsZWN0YWJsZS5jYWxsKG51bGwsdCxuKSYmZChlLHQscikmJihpPSEwKTpkKGUsdCxyKSYmKGk9ITApfSk7dmFyIG89dGhpcy50YWJsZTtpJiZvLiRlbWl0KCJzZWxlY3Rpb24tY2hhbmdlIixuP24uc2xpY2UoKTpbXSksby4kZW1pdCgic2VsZWN0LWFsbCIsbiksZS5pc0FsbFNlbGVjdGVkPXJ9fSl9O3ZhciBoPWZ1bmN0aW9uIGUodCl7dmFyIG49W107cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbih0KXt0LmNoaWxkcmVuP24ucHVzaC5hcHBseShuLGUodC5jaGlsZHJlbikpOm4ucHVzaCh0KX0pLG59O2YucHJvdG90eXBlLnVwZGF0ZUNvbHVtbnM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnN0YXRlcyx0PWUuX2NvbHVtbnN8fFtdO2UuZml4ZWRDb2x1bW5zPXQuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiEwPT09ZS5maXhlZHx8ImxlZnQiPT09ZS5maXhlZH0pLGUucmlnaHRGaXhlZENvbHVtbnM9dC5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuInJpZ2h0Ij09PWUuZml4ZWR9KSxlLmZpeGVkQ29sdW1ucy5sZW5ndGg+MCYmdFswXSYmInNlbGVjdGlvbiI9PT10WzBdLnR5cGUmJiF0WzBdLmZpeGVkJiYodFswXS5maXhlZD0hMCxlLmZpeGVkQ29sdW1ucy51bnNoaWZ0KHRbMF0pKTt2YXIgbj10LmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4hZS5maXhlZH0pO2Uub3JpZ2luQ29sdW1ucz1bXS5jb25jYXQoZS5maXhlZENvbHVtbnMpLmNvbmNhdChuKS5jb25jYXQoZS5yaWdodEZpeGVkQ29sdW1ucyk7dmFyIHI9aChuKSxpPWgoZS5maXhlZENvbHVtbnMpLG89aChlLnJpZ2h0Rml4ZWRDb2x1bW5zKTtlLmxlYWZDb2x1bW5zTGVuZ3RoPXIubGVuZ3RoLGUuZml4ZWRMZWFmQ29sdW1uc0xlbmd0aD1pLmxlbmd0aCxlLnJpZ2h0Rml4ZWRMZWFmQ29sdW1uc0xlbmd0aD1vLmxlbmd0aCxlLmNvbHVtbnM9W10uY29uY2F0KGkpLmNvbmNhdChyKS5jb25jYXQobyksZS5pc0NvbXBsZXg9ZS5maXhlZENvbHVtbnMubGVuZ3RoPjB8fGUucmlnaHRGaXhlZENvbHVtbnMubGVuZ3RoPjB9LGYucHJvdG90eXBlLmlzU2VsZWN0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuKHRoaXMuc3RhdGVzLnNlbGVjdGlvbnx8W10pLmluZGV4T2YoZSk+LTF9LGYucHJvdG90eXBlLmNsZWFyU2VsZWN0aW9uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5zdGF0ZXM7ZS5pc0FsbFNlbGVjdGVkPSExO3ZhciB0PWUuc2VsZWN0aW9uO2Uuc2VsZWN0aW9uLmxlbmd0aCYmKGUuc2VsZWN0aW9uPVtdKSx0Lmxlbmd0aD4wJiZ0aGlzLnRhYmxlLiRlbWl0KCJzZWxlY3Rpb24tY2hhbmdlIixlLnNlbGVjdGlvbj9lLnNlbGVjdGlvbi5zbGljZSgpOltdKX0sZi5wcm90b3R5cGUuc2V0RXhwYW5kUm93S2V5cz1mdW5jdGlvbihlKXt2YXIgdD1bXSxuPXRoaXMuc3RhdGVzLmRhdGEscj10aGlzLnN0YXRlcy5yb3dLZXk7aWYoIXIpdGhyb3cgbmV3IEVycm9yKCJbVGFibGVdIHByb3Agcm93LWtleSBzaG91bGQgbm90IGJlIGVtcHR5LiIpO3ZhciBpPWMobixyKTtlLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIG49aVtlXTtuJiZ0LnB1c2gobi5yb3cpfSksdGhpcy5zdGF0ZXMuZXhwYW5kUm93cz10fSxmLnByb3RvdHlwZS50b2dnbGVSb3dTZWxlY3Rpb249ZnVuY3Rpb24oZSx0KXtkKHRoaXMuc3RhdGVzLGUsdCkmJnRoaXMudGFibGUuJGVtaXQoInNlbGVjdGlvbi1jaGFuZ2UiLHRoaXMuc3RhdGVzLnNlbGVjdGlvbj90aGlzLnN0YXRlcy5zZWxlY3Rpb24uc2xpY2UoKTpbXSl9LGYucHJvdG90eXBlLnRvZ2dsZVJvd0V4cGFuc2lvbj1mdW5jdGlvbihlLHQpeyhmdW5jdGlvbihlLHQsbil7dmFyIHI9ITEsaT1lLmV4cGFuZFJvd3M7aWYodm9pZCAwIT09bil7dmFyIG89aS5pbmRleE9mKHQpO24/LTE9PT1vJiYoaS5wdXNoKHQpLHI9ITApOi0xIT09byYmKGkuc3BsaWNlKG8sMSkscj0hMCl9ZWxzZXt2YXIgcz1pLmluZGV4T2YodCk7LTE9PT1zPyhpLnB1c2godCkscj0hMCk6KGkuc3BsaWNlKHMsMSkscj0hMCl9cmV0dXJuIHJ9KSh0aGlzLnN0YXRlcyxlLHQpJiYodGhpcy50YWJsZS4kZW1pdCgiZXhwYW5kLWNoYW5nZSIsZSx0aGlzLnN0YXRlcy5leHBhbmRSb3dzKSx0aGlzLnNjaGVkdWxlTGF5b3V0KCkpfSxmLnByb3RvdHlwZS5pc1Jvd0V4cGFuZGVkPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuc3RhdGVzLG49dC5leHBhbmRSb3dzLHI9dm9pZCAwPT09bj9bXTpuLGk9dC5yb3dLZXk7cmV0dXJuIGk/ISFjKHIsaSlbKDAsYS5nZXRSb3dJZGVudGl0eSkoZSxpKV06LTEhPT1yLmluZGV4T2YoZSl9LGYucHJvdG90eXBlLmNsZWFuU2VsZWN0aW9uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5zdGF0ZXMuc2VsZWN0aW9ufHxbXSx0PXRoaXMuc3RhdGVzLmRhdGEsbj10aGlzLnN0YXRlcy5yb3dLZXkscj12b2lkIDA7aWYobil7cj1bXTt2YXIgaT1jKGUsbiksbz1jKHQsbik7Zm9yKHZhciBzIGluIGkpaS5oYXNPd25Qcm9wZXJ0eShzKSYmIW9bc10mJnIucHVzaChpW3NdLnJvdyl9ZWxzZSByPWUuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybi0xPT09dC5pbmRleE9mKGUpfSk7ci5mb3JFYWNoKGZ1bmN0aW9uKHQpe2Uuc3BsaWNlKGUuaW5kZXhPZih0KSwxKX0pLHIubGVuZ3RoJiZ0aGlzLnRhYmxlLiRlbWl0KCJzZWxlY3Rpb24tY2hhbmdlIixlP2Uuc2xpY2UoKTpbXSl9LGYucHJvdG90eXBlLmNsZWFyRmlsdGVyPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj10aGlzLnN0YXRlcyxyPXRoaXMudGFibGUuJHJlZnMsaT1yLnRhYmxlSGVhZGVyLHM9ci5maXhlZFRhYmxlSGVhZGVyLGw9ci5yaWdodEZpeGVkVGFibGVIZWFkZXIsdT17fTtpJiYodT0oMCxvLmRlZmF1bHQpKHUsaS5maWx0ZXJQYW5lbHMpKSxzJiYodT0oMCxvLmRlZmF1bHQpKHUscy5maWx0ZXJQYW5lbHMpKSxsJiYodT0oMCxvLmRlZmF1bHQpKHUsbC5maWx0ZXJQYW5lbHMpKTt2YXIgYyxkPU9iamVjdC5rZXlzKHUpO2QubGVuZ3RoJiYoInN0cmluZyI9PXR5cGVvZiBlJiYoZT1bZV0pLEFycmF5LmlzQXJyYXkoZSk/KGM9ZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuKDAsYS5nZXRDb2x1bW5CeUtleSkobixlKX0pLGQuZm9yRWFjaChmdW5jdGlvbihlKXtjLmZpbmQoZnVuY3Rpb24odCl7cmV0dXJuIHQuaWQ9PT1lfSkmJih1W2VdLmZpbHRlcmVkVmFsdWU9W10pfSksdC5jb21taXQoImZpbHRlckNoYW5nZSIse2NvbHVtbjpjLHZhbHVlOltdLHNpbGVudDohMCxtdWx0aTohMH0pKTooZC5mb3JFYWNoKGZ1bmN0aW9uKGUpe3VbZV0uZmlsdGVyZWRWYWx1ZT1bXX0pLG4uZmlsdGVycz17fSx0aGlzLmNvbW1pdCgiZmlsdGVyQ2hhbmdlIix7Y29sdW1uOnt9LHZhbHVlczpbXSxzaWxlbnQ6ITB9KSkpfSxmLnByb3RvdHlwZS5jbGVhclNvcnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnN0YXRlcztlLnNvcnRpbmdDb2x1bW4mJihlLnNvcnRpbmdDb2x1bW4ub3JkZXI9bnVsbCxlLnNvcnRQcm9wPW51bGwsZS5zb3J0T3JkZXI9bnVsbCx0aGlzLmNvbW1pdCgiY2hhbmdlU29ydENvbmRpdGlvbiIse3NpbGVudDohMH0pKX0sZi5wcm90b3R5cGUudXBkYXRlQWxsU2VsZWN0ZWQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnN0YXRlcyx0PWUuc2VsZWN0aW9uLG49ZS5yb3dLZXkscj1lLnNlbGVjdGFibGUsaT1lLmRhdGE7aWYoaSYmMCE9PWkubGVuZ3RoKXt2YXIgbz12b2lkIDA7biYmKG89YyhlLnNlbGVjdGlvbixuKSk7Zm9yKHZhciBzLGw9ITAsdT0wLGQ9MCxmPWkubGVuZ3RoO2Q8ZjtkKyspe3ZhciBoPWlbZF0scD1yJiZyLmNhbGwobnVsbCxoLGQpO2lmKHM9aCxvP29bKDAsYS5nZXRSb3dJZGVudGl0eSkocyxuKV06LTEhPT10LmluZGV4T2YocykpdSsrO2Vsc2UgaWYoIXJ8fHApe2w9ITE7YnJlYWt9fTA9PT11JiYobD0hMSksZS5pc0FsbFNlbGVjdGVkPWx9ZWxzZSBlLmlzQWxsU2VsZWN0ZWQ9ITF9LGYucHJvdG90eXBlLnNjaGVkdWxlTGF5b3V0PWZ1bmN0aW9uKGUpe2UmJnRoaXMudXBkYXRlQ29sdW1ucygpLHRoaXMudGFibGUuZGVib3VuY2VkVXBkYXRlTGF5b3V0KCl9LGYucHJvdG90eXBlLnNldEN1cnJlbnRSb3dLZXk9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5zdGF0ZXMsbj10LnJvd0tleTtpZighbil0aHJvdyBuZXcgRXJyb3IoIltUYWJsZV0gcm93LWtleSBzaG91bGQgbm90IGJlIGVtcHR5LiIpO3ZhciByPXQuZGF0YXx8W10saT1jKHIsbilbZV07dC5jdXJyZW50Um93PWk/aS5yb3c6bnVsbH0sZi5wcm90b3R5cGUudXBkYXRlQ3VycmVudFJvdz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuc3RhdGVzLHQ9dGhpcy50YWJsZSxuPWUuZGF0YXx8W10scj1lLmN1cnJlbnRSb3c7aWYoLTE9PT1uLmluZGV4T2Yocikpe2lmKGUucm93S2V5JiZyKXtmb3IodmFyIGk9bnVsbCxvPTA7bzxuLmxlbmd0aDtvKyspe3ZhciBzPW5bb107aWYocyYmc1tlLnJvd0tleV09PT1yW2Uucm93S2V5XSl7aT1zO2JyZWFrfX1pZihpKXJldHVybiB2b2lkKGUuY3VycmVudFJvdz1pKX1lLmN1cnJlbnRSb3c9bnVsbCxlLmN1cnJlbnRSb3chPT1yJiZ0LiRlbWl0KCJjdXJyZW50LWNoYW5nZSIsbnVsbCxyKX19LGYucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLm11dGF0aW9ucztpZighdFtlXSl0aHJvdyBuZXcgRXJyb3IoIkFjdGlvbiBub3QgZm91bmQ6ICIrZSk7Zm9yKHZhciBuPWFyZ3VtZW50cy5sZW5ndGgscj1BcnJheShuPjE/bi0xOjApLGk9MTtpPG47aSsrKXJbaS0xXT1hcmd1bWVudHNbaV07dFtlXS5hcHBseSh0aGlzLFt0aGlzLnN0YXRlc10uY29uY2F0KHIpKX0sdC5kZWZhdWx0PWZ9LDE2NTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj1vKG4oMzgpKSxpPW8obig0KSk7ZnVuY3Rpb24gbyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe2Zvcih2YXIgbiBpbiBmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfSh0aGlzLGUpLHRoaXMub2JzZXJ2ZXJzPVtdLHRoaXMudGFibGU9bnVsbCx0aGlzLnN0b3JlPW51bGwsdGhpcy5jb2x1bW5zPW51bGwsdGhpcy5maXQ9ITAsdGhpcy5zaG93SGVhZGVyPSEwLHRoaXMuaGVpZ2h0PW51bGwsdGhpcy5zY3JvbGxYPSExLHRoaXMuc2Nyb2xsWT0hMSx0aGlzLmJvZHlXaWR0aD1udWxsLHRoaXMuZml4ZWRXaWR0aD1udWxsLHRoaXMucmlnaHRGaXhlZFdpZHRoPW51bGwsdGhpcy50YWJsZUhlaWdodD1udWxsLHRoaXMuaGVhZGVySGVpZ2h0PTQ0LHRoaXMuYXBwZW5kSGVpZ2h0PTAsdGhpcy5mb290ZXJIZWlnaHQ9NDQsdGhpcy52aWV3cG9ydEhlaWdodD1udWxsLHRoaXMuYm9keUhlaWdodD1udWxsLHRoaXMuZml4ZWRCb2R5SGVpZ2h0PW51bGwsdGhpcy5ndXR0ZXJXaWR0aD0oMCxyLmRlZmF1bHQpKCksdCl0Lmhhc093blByb3BlcnR5KG4pJiYodGhpc1tuXT10W25dKTtpZighdGhpcy50YWJsZSl0aHJvdyBuZXcgRXJyb3IoInRhYmxlIGlzIHJlcXVpcmVkIGZvciBUYWJsZSBMYXlvdXQiKTtpZighdGhpcy5zdG9yZSl0aHJvdyBuZXcgRXJyb3IoInN0b3JlIGlzIHJlcXVpcmVkIGZvciBUYWJsZSBMYXlvdXQiKX1yZXR1cm4gZS5wcm90b3R5cGUudXBkYXRlU2Nyb2xsWT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuaGVpZ2h0O2lmKCJzdHJpbmciPT10eXBlb2YgZXx8Im51bWJlciI9PXR5cGVvZiBlKXt2YXIgdD10aGlzLnRhYmxlLmJvZHlXcmFwcGVyO2lmKHRoaXMudGFibGUuJGVsJiZ0KXt2YXIgbj10LnF1ZXJ5U2VsZWN0b3IoIi5lbC10YWJsZV9fYm9keSIpO3RoaXMuc2Nyb2xsWT1uLm9mZnNldEhlaWdodD50aGlzLmJvZHlIZWlnaHR9fX0sZS5wcm90b3R5cGUuc2V0SGVpZ2h0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06ImhlaWdodCI7aWYoIWkuZGVmYXVsdC5wcm90b3R5cGUuJGlzU2VydmVyKXt2YXIgcj10aGlzLnRhYmxlLiRlbDtpZigic3RyaW5nIj09dHlwZW9mIGUmJi9eXGQrJC8udGVzdChlKSYmKGU9TnVtYmVyKGUpKSx0aGlzLmhlaWdodD1lLCFyJiYoZXx8MD09PWUpKXJldHVybiBpLmRlZmF1bHQubmV4dFRpY2soZnVuY3Rpb24oKXtyZXR1cm4gdC5zZXRIZWlnaHQoZSxuKX0pOyJudW1iZXIiPT10eXBlb2YgZT8oci5zdHlsZVtuXT1lKyJweCIsdGhpcy51cGRhdGVFbHNIZWlnaHQoKSk6InN0cmluZyI9PXR5cGVvZiBlJiYoci5zdHlsZVtuXT1lLHRoaXMudXBkYXRlRWxzSGVpZ2h0KCkpfX0sZS5wcm90b3R5cGUuc2V0TWF4SGVpZ2h0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnNldEhlaWdodChlLCJtYXgtaGVpZ2h0Iil9LGUucHJvdG90eXBlLnVwZGF0ZUVsc0hlaWdodD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoIXRoaXMudGFibGUuJHJlYWR5KXJldHVybiBpLmRlZmF1bHQubmV4dFRpY2soZnVuY3Rpb24oKXtyZXR1cm4gZS51cGRhdGVFbHNIZWlnaHQoKX0pO3ZhciB0PXRoaXMudGFibGUuJHJlZnMsbj10LmhlYWRlcldyYXBwZXIscj10LmFwcGVuZFdyYXBwZXIsbz10LmZvb3RlcldyYXBwZXI7aWYodGhpcy5hcHBlbmRIZWlnaHQ9cj9yLm9mZnNldEhlaWdodDowLCF0aGlzLnNob3dIZWFkZXJ8fG4pe3ZhciBzPXRoaXMuaGVhZGVySGVpZ2h0PXRoaXMuc2hvd0hlYWRlcj9uLm9mZnNldEhlaWdodDowO2lmKHRoaXMuc2hvd0hlYWRlciYmbi5vZmZzZXRXaWR0aD4wJiYodGhpcy50YWJsZS5jb2x1bW5zfHxbXSkubGVuZ3RoPjAmJnM8MilyZXR1cm4gaS5kZWZhdWx0Lm5leHRUaWNrKGZ1bmN0aW9uKCl7cmV0dXJuIGUudXBkYXRlRWxzSGVpZ2h0KCl9KTt2YXIgYT10aGlzLnRhYmxlSGVpZ2h0PXRoaXMudGFibGUuJGVsLmNsaWVudEhlaWdodDtpZihudWxsIT09dGhpcy5oZWlnaHQmJighaXNOYU4odGhpcy5oZWlnaHQpfHwic3RyaW5nIj09dHlwZW9mIHRoaXMuaGVpZ2h0KSl7dmFyIGw9dGhpcy5mb290ZXJIZWlnaHQ9bz9vLm9mZnNldEhlaWdodDowO3RoaXMuYm9keUhlaWdodD1hLXMtbCsobz8xOjApfXRoaXMuZml4ZWRCb2R5SGVpZ2h0PXRoaXMuc2Nyb2xsWD90aGlzLmJvZHlIZWlnaHQtdGhpcy5ndXR0ZXJXaWR0aDp0aGlzLmJvZHlIZWlnaHQ7dmFyIHU9IXRoaXMudGFibGUuZGF0YXx8MD09PXRoaXMudGFibGUuZGF0YS5sZW5ndGg7dGhpcy52aWV3cG9ydEhlaWdodD10aGlzLnNjcm9sbFg/YS0odT8wOnRoaXMuZ3V0dGVyV2lkdGgpOmEsdGhpcy51cGRhdGVTY3JvbGxZKCksdGhpcy5ub3RpZnlPYnNlcnZlcnMoInNjcm9sbGFibGUiKX19LGUucHJvdG90eXBlLmdldEZsYXR0ZW5Db2x1bW5zPWZ1bmN0aW9uKCl7dmFyIGU9W107cmV0dXJuIHRoaXMudGFibGUuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QuaXNDb2x1bW5Hcm91cD9lLnB1c2guYXBwbHkoZSx0LmNvbHVtbnMpOmUucHVzaCh0KX0pLGV9LGUucHJvdG90eXBlLnVwZGF0ZUNvbHVtbnNXaWR0aD1mdW5jdGlvbigpe2lmKCFpLmRlZmF1bHQucHJvdG90eXBlLiRpc1NlcnZlcil7dmFyIGUsdCxuLHI9dGhpcy5maXQsbz10aGlzLnRhYmxlLiRlbC5jbGllbnRXaWR0aCxzPTAsYT10aGlzLmdldEZsYXR0ZW5Db2x1bW5zKCksbD1hLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4ibnVtYmVyIiE9dHlwZW9mIGUud2lkdGh9KTtpZihhLmZvckVhY2goZnVuY3Rpb24oZSl7Im51bWJlciI9PXR5cGVvZiBlLndpZHRoJiZlLnJlYWxXaWR0aCYmKGUucmVhbFdpZHRoPW51bGwpfSksbC5sZW5ndGg+MCYmcil7YS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3MrPWUud2lkdGh8fGUubWluV2lkdGh8fDgwfSk7dmFyIHU9dGhpcy5zY3JvbGxZP3RoaXMuZ3V0dGVyV2lkdGg6MDtpZihzPD1vLXUpe3RoaXMuc2Nyb2xsWD0hMTt2YXIgYz1vLXUtczsxPT09bC5sZW5ndGg/bFswXS5yZWFsV2lkdGg9KGxbMF0ubWluV2lkdGh8fDgwKStjOihlPWwucmVkdWNlKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUrKHQubWluV2lkdGh8fDgwKX0sMCksdD1jL2Usbj0wLGwuZm9yRWFjaChmdW5jdGlvbihlLHIpe2lmKDAhPT1yKXt2YXIgaT1NYXRoLmZsb29yKChlLm1pbldpZHRofHw4MCkqdCk7bis9aSxlLnJlYWxXaWR0aD0oZS5taW5XaWR0aHx8ODApK2l9fSksbFswXS5yZWFsV2lkdGg9KGxbMF0ubWluV2lkdGh8fDgwKStjLW4pfWVsc2UgdGhpcy5zY3JvbGxYPSEwLGwuZm9yRWFjaChmdW5jdGlvbihlKXtlLnJlYWxXaWR0aD1lLm1pbldpZHRofSk7dGhpcy5ib2R5V2lkdGg9TWF0aC5tYXgocyxvKSx0aGlzLnRhYmxlLnJlc2l6ZVN0YXRlLndpZHRoPXRoaXMuYm9keVdpZHRofWVsc2UgYS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2Uud2lkdGh8fGUubWluV2lkdGg/ZS5yZWFsV2lkdGg9ZS53aWR0aHx8ZS5taW5XaWR0aDplLnJlYWxXaWR0aD04MCxzKz1lLnJlYWxXaWR0aH0pLHRoaXMuc2Nyb2xsWD1zPm8sdGhpcy5ib2R5V2lkdGg9czt2YXIgZD10aGlzLnN0b3JlLnN0YXRlcy5maXhlZENvbHVtbnM7aWYoZC5sZW5ndGg+MCl7dmFyIGY9MDtkLmZvckVhY2goZnVuY3Rpb24oZSl7Zis9ZS5yZWFsV2lkdGh8fGUud2lkdGh9KSx0aGlzLmZpeGVkV2lkdGg9Zn12YXIgaD10aGlzLnN0b3JlLnN0YXRlcy5yaWdodEZpeGVkQ29sdW1ucztpZihoLmxlbmd0aD4wKXt2YXIgcD0wO2guZm9yRWFjaChmdW5jdGlvbihlKXtwKz1lLnJlYWxXaWR0aHx8ZS53aWR0aH0pLHRoaXMucmlnaHRGaXhlZFdpZHRoPXB9dGhpcy5ub3RpZnlPYnNlcnZlcnMoImNvbHVtbnMiKX19LGUucHJvdG90eXBlLmFkZE9ic2VydmVyPWZ1bmN0aW9uKGUpe3RoaXMub2JzZXJ2ZXJzLnB1c2goZSl9LGUucHJvdG90eXBlLnJlbW92ZU9ic2VydmVyPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMub2JzZXJ2ZXJzLmluZGV4T2YoZSk7LTEhPT10JiZ0aGlzLm9ic2VydmVycy5zcGxpY2UodCwxKX0sZS5wcm90b3R5cGUubm90aWZ5T2JzZXJ2ZXJzPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy5vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbihuKXtzd2l0Y2goZSl7Y2FzZSJjb2x1bW5zIjpuLm9uQ29sdW1uc0NoYW5nZSh0KTticmVhaztjYXNlInNjcm9sbGFibGUiOm4ub25TY3JvbGxhYmxlQ2hhbmdlKHQpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKCJUYWJsZSBMYXlvdXQgZG9uJ3QgaGF2ZSBldmVudCAiK2UrIi4iKX19KX0sZX0oKTt0LmRlZmF1bHQ9c30sMTY2OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiBlfSxpPW4oNDgpLG89bigzKSxzPWMobigxNikpLGE9YyhuKDIyKSksbD1jKG4oMTQpKSx1PWMobigzOSkpO2Z1bmN0aW9uIGMoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXQuZGVmYXVsdD17bmFtZToiRWxUYWJsZUJvZHkiLG1peGluczpbdS5kZWZhdWx0XSxjb21wb25lbnRzOntFbENoZWNrYm94OnMuZGVmYXVsdCxFbFRvb2x0aXA6YS5kZWZhdWx0fSxwcm9wczp7c3RvcmU6e3JlcXVpcmVkOiEwfSxzdHJpcGU6Qm9vbGVhbixjb250ZXh0Ont9LHJvd0NsYXNzTmFtZTpbU3RyaW5nLEZ1bmN0aW9uXSxyb3dTdHlsZTpbT2JqZWN0LEZ1bmN0aW9uXSxmaXhlZDpTdHJpbmcsaGlnaGxpZ2h0OkJvb2xlYW59LHJlbmRlcjpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49dGhpcy5jb2x1bW5zLm1hcChmdW5jdGlvbihlLG4pe3JldHVybiB0LmlzQ29sdW1uSGlkZGVuKG4pfSk7cmV0dXJuIGUoInRhYmxlIix7Y2xhc3M6ImVsLXRhYmxlX19ib2R5IixhdHRyczp7Y2VsbHNwYWNpbmc6IjAiLGNlbGxwYWRkaW5nOiIwIixib3JkZXI6IjAifX0sW2UoImNvbGdyb3VwIixudWxsLFt0aGlzLl9sKHRoaXMuY29sdW1ucyxmdW5jdGlvbih0KXtyZXR1cm4gZSgiY29sIix7YXR0cnM6e25hbWU6dC5pZH19LFtdKX0pXSksZSgidGJvZHkiLG51bGwsW3RoaXMuX2wodGhpcy5kYXRhLGZ1bmN0aW9uKHIsaSl7cmV0dXJuW2UoInRyIix7c3R5bGU6dC5yb3dTdHlsZT90LmdldFJvd1N0eWxlKHIsaSk6bnVsbCxrZXk6dC50YWJsZS5yb3dLZXk/dC5nZXRLZXlPZlJvdyhyLGkpOmksb246e2RibGNsaWNrOmZ1bmN0aW9uKGUpe3JldHVybiB0LmhhbmRsZURvdWJsZUNsaWNrKGUscil9LGNsaWNrOmZ1bmN0aW9uKGUpe3JldHVybiB0LmhhbmRsZUNsaWNrKGUscil9LGNvbnRleHRtZW51OmZ1bmN0aW9uKGUpe3JldHVybiB0LmhhbmRsZUNvbnRleHRNZW51KGUscil9LG1vdXNlZW50ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHQuaGFuZGxlTW91c2VFbnRlcihpKX0sbW91c2VsZWF2ZTpmdW5jdGlvbihlKXtyZXR1cm4gdC5oYW5kbGVNb3VzZUxlYXZlKCl9fSxjbGFzczpbdC5nZXRSb3dDbGFzcyhyLGkpXX0sW3QuX2wodC5jb2x1bW5zLGZ1bmN0aW9uKG8scyl7dmFyIGE9dC5nZXRTcGFuKHIsbyxpLHMpLGw9YS5yb3dzcGFuLHU9YS5jb2xzcGFuO3JldHVybiBsJiZ1P2UoInRkIix7c3R5bGU6dC5nZXRDZWxsU3R5bGUoaSxzLHIsbyksY2xhc3M6dC5nZXRDZWxsQ2xhc3MoaSxzLHIsbyksYXR0cnM6e3Jvd3NwYW46bCxjb2xzcGFuOnV9LG9uOnttb3VzZWVudGVyOmZ1bmN0aW9uKGUpe3JldHVybiB0LmhhbmRsZUNlbGxNb3VzZUVudGVyKGUscil9LG1vdXNlbGVhdmU6dC5oYW5kbGVDZWxsTW91c2VMZWF2ZX19LFtvLnJlbmRlckNlbGwuY2FsbCh0Ll9yZW5kZXJQcm94eSxlLHtyb3c6cixjb2x1bW46bywkaW5kZXg6aSxzdG9yZTp0LnN0b3JlLF9zZWxmOnQuY29udGV4dHx8dC50YWJsZS4kdm5vZGUuY29udGV4dH0sbltzXSldKToiIn0pXSksdC5zdG9yZS5pc1Jvd0V4cGFuZGVkKHIpP2UoInRyIixudWxsLFtlKCJ0ZCIse2F0dHJzOntjb2xzcGFuOnQuY29sdW1ucy5sZW5ndGh9LGNsYXNzOiJlbC10YWJsZV9fZXhwYW5kZWQtY2VsbCJ9LFt0LnRhYmxlLnJlbmRlckV4cGFuZGVkP3QudGFibGUucmVuZGVyRXhwYW5kZWQoZSx7cm93OnIsJGluZGV4Omksc3RvcmU6dC5zdG9yZX0pOiIiXSldKToiIl19KS5jb25jYXQoZSgiZWwtdG9vbHRpcCIse2F0dHJzOntlZmZlY3Q6dGhpcy50YWJsZS50b29sdGlwRWZmZWN0LHBsYWNlbWVudDoidG9wIixjb250ZW50OnRoaXMudG9vbHRpcENvbnRlbnR9LHJlZjoidG9vbHRpcCJ9LFtdKSldKV0pfSx3YXRjaDp7InN0b3JlLnN0YXRlcy5ob3ZlclJvdyI6ZnVuY3Rpb24oZSx0KXtpZih0aGlzLnN0b3JlLnN0YXRlcy5pc0NvbXBsZXgpe3ZhciBuPXRoaXMuJGVsO2lmKG4pe3ZhciByPW4ucXVlcnlTZWxlY3RvcigidGJvZHkiKS5jaGlsZHJlbixpPVtdLmZpbHRlci5jYWxsKHIsZnVuY3Rpb24oZSl7cmV0dXJuKDAsby5oYXNDbGFzcykoZSwiZWwtdGFibGVfX3JvdyIpfSkscz1pW3RdLGE9aVtlXTtzJiYoMCxvLnJlbW92ZUNsYXNzKShzLCJob3Zlci1yb3ciKSxhJiYoMCxvLmFkZENsYXNzKShhLCJob3Zlci1yb3ciKX19fSwic3RvcmUuc3RhdGVzLmN1cnJlbnRSb3ciOmZ1bmN0aW9uKGUsdCl7aWYodGhpcy5oaWdobGlnaHQpe3ZhciBuPXRoaXMuJGVsO2lmKG4pe3ZhciByPXRoaXMuc3RvcmUuc3RhdGVzLmRhdGEsaT1uLnF1ZXJ5U2VsZWN0b3IoInRib2R5IikuY2hpbGRyZW4scz1bXS5maWx0ZXIuY2FsbChpLGZ1bmN0aW9uKGUpe3JldHVybigwLG8uaGFzQ2xhc3MpKGUsImVsLXRhYmxlX19yb3ciKX0pLGE9c1tyLmluZGV4T2YodCldLGw9c1tyLmluZGV4T2YoZSldO2E/KDAsby5yZW1vdmVDbGFzcykoYSwiY3VycmVudC1yb3ciKTpbXS5mb3JFYWNoLmNhbGwocyxmdW5jdGlvbihlKXtyZXR1cm4oMCxvLnJlbW92ZUNsYXNzKShlLCJjdXJyZW50LXJvdyIpfSksbCYmKDAsby5hZGRDbGFzcykobCwiY3VycmVudC1yb3ciKX19fX0sY29tcHV0ZWQ6e3RhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJHBhcmVudH0sZGF0YTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0b3JlLnN0YXRlcy5kYXRhfSxjb2x1bW5zQ291bnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdG9yZS5zdGF0ZXMuY29sdW1ucy5sZW5ndGh9LGxlZnRGaXhlZExlYWZDb3VudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0b3JlLnN0YXRlcy5maXhlZExlYWZDb2x1bW5zTGVuZ3RofSxyaWdodEZpeGVkTGVhZkNvdW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RvcmUuc3RhdGVzLnJpZ2h0Rml4ZWRMZWFmQ29sdW1uc0xlbmd0aH0sbGVmdEZpeGVkQ291bnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdG9yZS5zdGF0ZXMuZml4ZWRDb2x1bW5zLmxlbmd0aH0scmlnaHRGaXhlZENvdW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RvcmUuc3RhdGVzLnJpZ2h0Rml4ZWRDb2x1bW5zLmxlbmd0aH0sY29sdW1uczpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0b3JlLnN0YXRlcy5jb2x1bW5zfX0sZGF0YTpmdW5jdGlvbigpe3JldHVybnt0b29sdGlwQ29udGVudDoiIn19LGNyZWF0ZWQ6ZnVuY3Rpb24oKXt0aGlzLmFjdGl2YXRlVG9vbHRpcD0oMCxsLmRlZmF1bHQpKDUwLGZ1bmN0aW9uKGUpe3JldHVybiBlLmhhbmRsZVNob3dQb3BwZXIoKX0pfSxtZXRob2RzOntnZXRLZXlPZlJvdzpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMudGFibGUucm93S2V5O3JldHVybiBuPygwLGkuZ2V0Um93SWRlbnRpdHkpKGUsbik6dH0saXNDb2x1bW5IaWRkZW46ZnVuY3Rpb24oZSl7cmV0dXJuITA9PT10aGlzLmZpeGVkfHwibGVmdCI9PT10aGlzLmZpeGVkP2U+PXRoaXMubGVmdEZpeGVkTGVhZkNvdW50OiJyaWdodCI9PT10aGlzLmZpeGVkP2U8dGhpcy5jb2x1bW5zQ291bnQtdGhpcy5yaWdodEZpeGVkTGVhZkNvdW50OmU8dGhpcy5sZWZ0Rml4ZWRMZWFmQ291bnR8fGU+PXRoaXMuY29sdW1uc0NvdW50LXRoaXMucmlnaHRGaXhlZExlYWZDb3VudH0sZ2V0U3BhbjpmdW5jdGlvbihlLHQsbixpKXt2YXIgbz0xLHM9MSxhPXRoaXMudGFibGUuc3Bhbk1ldGhvZDtpZigiZnVuY3Rpb24iPT10eXBlb2YgYSl7dmFyIGw9YSh7cm93OmUsY29sdW1uOnQscm93SW5kZXg6bixjb2x1bW5JbmRleDppfSk7QXJyYXkuaXNBcnJheShsKT8obz1sWzBdLHM9bFsxXSk6Im9iamVjdCI9PT0odm9pZCAwPT09bD8idW5kZWZpbmVkIjpyKGwpKSYmKG89bC5yb3dzcGFuLHM9bC5jb2xzcGFuKX1yZXR1cm57cm93c3BhbjpvLGNvbHNwYW46c319LGdldFJvd1N0eWxlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy50YWJsZS5yb3dTdHlsZTtyZXR1cm4iZnVuY3Rpb24iPT10eXBlb2Ygbj9uLmNhbGwobnVsbCx7cm93OmUscm93SW5kZXg6dH0pOm59LGdldFJvd0NsYXNzOmZ1bmN0aW9uKGUsdCl7dmFyIG49WyJlbC10YWJsZV9fcm93Il07dGhpcy50YWJsZS5oaWdobGlnaHRDdXJyZW50Um93JiZlPT09dGhpcy5zdG9yZS5zdGF0ZXMuY3VycmVudFJvdyYmbi5wdXNoKCJjdXJyZW50LXJvdyIpLHRoaXMuc3RyaXBlJiZ0JTI9PTEmJm4ucHVzaCgiZWwtdGFibGVfX3Jvdy0tc3RyaXBlZCIpO3ZhciByPXRoaXMudGFibGUucm93Q2xhc3NOYW1lO3JldHVybiJzdHJpbmciPT10eXBlb2Ygcj9uLnB1c2gocik6ImZ1bmN0aW9uIj09dHlwZW9mIHImJm4ucHVzaChyLmNhbGwobnVsbCx7cm93OmUscm93SW5kZXg6dH0pKSx0aGlzLnN0b3JlLnN0YXRlcy5leHBhbmRSb3dzLmluZGV4T2YoZSk+LTEmJm4ucHVzaCgiZXhwYW5kZWQiKSxuLmpvaW4oIiAiKX0sZ2V0Q2VsbFN0eWxlOmZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpPXRoaXMudGFibGUuY2VsbFN0eWxlO3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBpP2kuY2FsbChudWxsLHtyb3dJbmRleDplLGNvbHVtbkluZGV4OnQscm93Om4sY29sdW1uOnJ9KTppfSxnZXRDZWxsQ2xhc3M6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGk9W3IuaWQsci5hbGlnbixyLmNsYXNzTmFtZV07dGhpcy5pc0NvbHVtbkhpZGRlbih0KSYmaS5wdXNoKCJpcy1oaWRkZW4iKTt2YXIgbz10aGlzLnRhYmxlLmNlbGxDbGFzc05hbWU7cmV0dXJuInN0cmluZyI9PXR5cGVvZiBvP2kucHVzaChvKToiZnVuY3Rpb24iPT10eXBlb2YgbyYmaS5wdXNoKG8uY2FsbChudWxsLHtyb3dJbmRleDplLGNvbHVtbkluZGV4OnQscm93Om4sY29sdW1uOnJ9KSksaS5qb2luKCIgIil9LGhhbmRsZUNlbGxNb3VzZUVudGVyOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy50YWJsZSxyPSgwLGkuZ2V0Q2VsbCkoZSk7aWYocil7dmFyIHM9KDAsaS5nZXRDb2x1bW5CeUNlbGwpKG4sciksYT1uLmhvdmVyU3RhdGU9e2NlbGw6cixjb2x1bW46cyxyb3c6dH07bi4kZW1pdCgiY2VsbC1tb3VzZS1lbnRlciIsYS5yb3csYS5jb2x1bW4sYS5jZWxsLGUpfXZhciBsPWUudGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoIi5jZWxsIik7aWYoKDAsby5oYXNDbGFzcykobCwiZWwtdG9vbHRpcCIpJiZsLmNoaWxkTm9kZXMubGVuZ3RoKXt2YXIgdT1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO2lmKHUuc2V0U3RhcnQobCwwKSx1LnNldEVuZChsLGwuY2hpbGROb2Rlcy5sZW5ndGgpLCh1LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKygocGFyc2VJbnQoKDAsby5nZXRTdHlsZSkobCwicGFkZGluZ0xlZnQiKSwxMCl8fDApKyhwYXJzZUludCgoMCxvLmdldFN0eWxlKShsLCJwYWRkaW5nUmlnaHQiKSwxMCl8fDApKT5sLm9mZnNldFdpZHRofHxsLnNjcm9sbFdpZHRoPmwub2Zmc2V0V2lkdGgpJiZ0aGlzLiRyZWZzLnRvb2x0aXApe3ZhciBjPXRoaXMuJHJlZnMudG9vbHRpcDt0aGlzLnRvb2x0aXBDb250ZW50PXIuaW5uZXJUZXh0fHxyLnRleHRDb250ZW50LGMucmVmZXJlbmNlRWxtPXIsYy4kcmVmcy5wb3BwZXImJihjLiRyZWZzLnBvcHBlci5zdHlsZS5kaXNwbGF5PSJub25lIiksYy5kb0Rlc3Ryb3koKSxjLnNldEV4cGVjdGVkU3RhdGUoITApLHRoaXMuYWN0aXZhdGVUb29sdGlwKGMpfX19LGhhbmRsZUNlbGxNb3VzZUxlYXZlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuJHJlZnMudG9vbHRpcDtpZih0JiYodC5zZXRFeHBlY3RlZFN0YXRlKCExKSx0LmhhbmRsZUNsb3NlUG9wcGVyKCkpLCgwLGkuZ2V0Q2VsbCkoZSkpe3ZhciBuPXRoaXMudGFibGUuaG92ZXJTdGF0ZXx8e307dGhpcy50YWJsZS4kZW1pdCgiY2VsbC1tb3VzZS1sZWF2ZSIsbi5yb3csbi5jb2x1bW4sbi5jZWxsLGUpfX0saGFuZGxlTW91c2VFbnRlcjpmdW5jdGlvbihlKXt0aGlzLnN0b3JlLmNvbW1pdCgic2V0SG92ZXJSb3ciLGUpfSxoYW5kbGVNb3VzZUxlYXZlOmZ1bmN0aW9uKCl7dGhpcy5zdG9yZS5jb21taXQoInNldEhvdmVyUm93IixudWxsKX0saGFuZGxlQ29udGV4dE1lbnU6ZnVuY3Rpb24oZSx0KXt0aGlzLmhhbmRsZUV2ZW50KGUsdCwiY29udGV4dG1lbnUiKX0saGFuZGxlRG91YmxlQ2xpY2s6ZnVuY3Rpb24oZSx0KXt0aGlzLmhhbmRsZUV2ZW50KGUsdCwiZGJsY2xpY2siKX0saGFuZGxlQ2xpY2s6ZnVuY3Rpb24oZSx0KXt0aGlzLnN0b3JlLmNvbW1pdCgic2V0Q3VycmVudFJvdyIsdCksdGhpcy5oYW5kbGVFdmVudChlLHQsImNsaWNrIil9LGhhbmRsZUV2ZW50OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLnRhYmxlLG89KDAsaS5nZXRDZWxsKShlKSxzPXZvaWQgMDtvJiYocz0oMCxpLmdldENvbHVtbkJ5Q2VsbCkocixvKSkmJnIuJGVtaXQoImNlbGwtIituLHQscyxvLGUpLHIuJGVtaXQoInJvdy0iK24sdCxlLHMpfSxoYW5kbGVFeHBhbmRDbGljazpmdW5jdGlvbihlLHQpe3Quc3RvcFByb3BhZ2F0aW9uKCksdGhpcy5zdG9yZS50b2dnbGVSb3dFeHBhbnNpb24oZSl9fX19LDE2NzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj1uKDMpLGk9dShuKDE2KSksbz11KG4oMjUpKSxzPXUobig0KSksYT11KG4oMTY4KSksbD11KG4oMzkpKTtmdW5jdGlvbiB1KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgYz1mdW5jdGlvbihlKXt2YXIgdD0xO2UuZm9yRWFjaChmdW5jdGlvbihlKXtlLmxldmVsPTEsZnVuY3Rpb24gZShuLHIpe2lmKHImJihuLmxldmVsPXIubGV2ZWwrMSx0PG4ubGV2ZWwmJih0PW4ubGV2ZWwpKSxuLmNoaWxkcmVuKXt2YXIgaT0wO24uY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbih0KXtlKHQsbiksaSs9dC5jb2xTcGFufSksbi5jb2xTcGFuPWl9ZWxzZSBuLmNvbFNwYW49MX0oZSl9KTtmb3IodmFyIG49W10scj0wO3I8dDtyKyspbi5wdXNoKFtdKTtyZXR1cm4gZnVuY3Rpb24gZSh0KXt2YXIgbj1bXTtyZXR1cm4gdC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QuY2hpbGRyZW4/KG4ucHVzaCh0KSxuLnB1c2guYXBwbHkobixlKHQuY2hpbGRyZW4pKSk6bi5wdXNoKHQpfSksbn0oZSkuZm9yRWFjaChmdW5jdGlvbihlKXtlLmNoaWxkcmVuP2Uucm93U3Bhbj0xOmUucm93U3Bhbj10LWUubGV2ZWwrMSxuW2UubGV2ZWwtMV0ucHVzaChlKX0pLG59O3QuZGVmYXVsdD17bmFtZToiRWxUYWJsZUhlYWRlciIsbWl4aW5zOltsLmRlZmF1bHRdLHJlbmRlcjpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49dGhpcy5zdG9yZS5zdGF0ZXMub3JpZ2luQ29sdW1ucyxyPWMobix0aGlzLmNvbHVtbnMpLGk9ci5sZW5ndGg+MTtyZXR1cm4gaSYmKHRoaXMuJHBhcmVudC5pc0dyb3VwPSEwKSxlKCJ0YWJsZSIse2NsYXNzOiJlbC10YWJsZV9faGVhZGVyIixhdHRyczp7Y2VsbHNwYWNpbmc6IjAiLGNlbGxwYWRkaW5nOiIwIixib3JkZXI6IjAifX0sW2UoImNvbGdyb3VwIixudWxsLFt0aGlzLl9sKHRoaXMuY29sdW1ucyxmdW5jdGlvbih0KXtyZXR1cm4gZSgiY29sIix7YXR0cnM6e25hbWU6dC5pZH19LFtdKX0pLHRoaXMuaGFzR3V0dGVyP2UoImNvbCIse2F0dHJzOntuYW1lOiJndXR0ZXIifX0sW10pOiIiXSksZSgidGhlYWQiLHtjbGFzczpbeyJpcy1ncm91cCI6aSwiaGFzLWd1dHRlciI6dGhpcy5oYXNHdXR0ZXJ9XX0sW3RoaXMuX2wocixmdW5jdGlvbihuLHIpe3JldHVybiBlKCJ0ciIse3N0eWxlOnQuZ2V0SGVhZGVyUm93U3R5bGUociksY2xhc3M6dC5nZXRIZWFkZXJSb3dDbGFzcyhyKX0sW3QuX2wobixmdW5jdGlvbihpLG8pe3JldHVybiBlKCJ0aCIse2F0dHJzOntjb2xzcGFuOmkuY29sU3Bhbixyb3dzcGFuOmkucm93U3Bhbn0sb246e21vdXNlbW92ZTpmdW5jdGlvbihlKXtyZXR1cm4gdC5oYW5kbGVNb3VzZU1vdmUoZSxpKX0sbW91c2VvdXQ6dC5oYW5kbGVNb3VzZU91dCxtb3VzZWRvd246ZnVuY3Rpb24oZSl7cmV0dXJuIHQuaGFuZGxlTW91c2VEb3duKGUsaSl9LGNsaWNrOmZ1bmN0aW9uKGUpe3JldHVybiB0LmhhbmRsZUhlYWRlckNsaWNrKGUsaSl9LGNvbnRleHRtZW51OmZ1bmN0aW9uKGUpe3JldHVybiB0LmhhbmRsZUhlYWRlckNvbnRleHRNZW51KGUsaSl9fSxzdHlsZTp0LmdldEhlYWRlckNlbGxTdHlsZShyLG8sbixpKSxjbGFzczp0LmdldEhlYWRlckNlbGxDbGFzcyhyLG8sbixpKSxrZXk6aS5pZH0sW2UoImRpdiIse2NsYXNzOlsiY2VsbCIsaS5maWx0ZXJlZFZhbHVlJiZpLmZpbHRlcmVkVmFsdWUubGVuZ3RoPjA/ImhpZ2hsaWdodCI6IiIsaS5sYWJlbENsYXNzTmFtZV19LFtpLnJlbmRlckhlYWRlcj9pLnJlbmRlckhlYWRlci5jYWxsKHQuX3JlbmRlclByb3h5LGUse2NvbHVtbjppLCRpbmRleDpvLHN0b3JlOnQuc3RvcmUsX3NlbGY6dC4kcGFyZW50LiR2bm9kZS5jb250ZXh0fSk6aS5sYWJlbCxpLnNvcnRhYmxlP2UoInNwYW4iLHtjbGFzczoiY2FyZXQtd3JhcHBlciIsb246e2NsaWNrOmZ1bmN0aW9uKGUpe3JldHVybiB0LmhhbmRsZVNvcnRDbGljayhlLGkpfX19LFtlKCJpIix7Y2xhc3M6InNvcnQtY2FyZXQgYXNjZW5kaW5nIixvbjp7Y2xpY2s6ZnVuY3Rpb24oZSl7cmV0dXJuIHQuaGFuZGxlU29ydENsaWNrKGUsaSwiYXNjZW5kaW5nIil9fX0sW10pLGUoImkiLHtjbGFzczoic29ydC1jYXJldCBkZXNjZW5kaW5nIixvbjp7Y2xpY2s6ZnVuY3Rpb24oZSl7cmV0dXJuIHQuaGFuZGxlU29ydENsaWNrKGUsaSwiZGVzY2VuZGluZyIpfX19LFtdKV0pOiIiLGkuZmlsdGVyYWJsZT9lKCJzcGFuIix7Y2xhc3M6ImVsLXRhYmxlX19jb2x1bW4tZmlsdGVyLXRyaWdnZXIiLG9uOntjbGljazpmdW5jdGlvbihlKXtyZXR1cm4gdC5oYW5kbGVGaWx0ZXJDbGljayhlLGkpfX19LFtlKCJpIix7Y2xhc3M6WyJlbC1pY29uLWFycm93LWRvd24iLGkuZmlsdGVyT3BlbmVkPyJlbC1pY29uLWFycm93LXVwIjoiIl19LFtdKV0pOiIiXSldKX0pLHQuaGFzR3V0dGVyP2UoInRoIix7Y2xhc3M6Imd1dHRlciJ9LFtdKToiIl0pfSldKV0pfSxwcm9wczp7Zml4ZWQ6U3RyaW5nLHN0b3JlOntyZXF1aXJlZDohMH0sYm9yZGVyOkJvb2xlYW4sZGVmYXVsdFNvcnQ6e3R5cGU6T2JqZWN0LGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm57cHJvcDoiIixvcmRlcjoiIn19fX0sY29tcG9uZW50czp7RWxDaGVja2JveDppLmRlZmF1bHQsRWxUYWc6by5kZWZhdWx0fSxjb21wdXRlZDp7dGFibGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kcGFyZW50fSxpc0FsbFNlbGVjdGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RvcmUuc3RhdGVzLmlzQWxsU2VsZWN0ZWR9LGNvbHVtbnNDb3VudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0b3JlLnN0YXRlcy5jb2x1bW5zLmxlbmd0aH0sbGVmdEZpeGVkQ291bnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdG9yZS5zdGF0ZXMuZml4ZWRDb2x1bW5zLmxlbmd0aH0scmlnaHRGaXhlZENvdW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RvcmUuc3RhdGVzLnJpZ2h0Rml4ZWRDb2x1bW5zLmxlbmd0aH0sbGVmdEZpeGVkTGVhZkNvdW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RvcmUuc3RhdGVzLmZpeGVkTGVhZkNvbHVtbnNMZW5ndGh9LHJpZ2h0Rml4ZWRMZWFmQ291bnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdG9yZS5zdGF0ZXMucmlnaHRGaXhlZExlYWZDb2x1bW5zTGVuZ3RofSxjb2x1bW5zOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RvcmUuc3RhdGVzLmNvbHVtbnN9LGhhc0d1dHRlcjpmdW5jdGlvbigpe3JldHVybiF0aGlzLmZpeGVkJiZ0aGlzLnRhYmxlTGF5b3V0Lmd1dHRlcldpZHRofX0sY3JlYXRlZDpmdW5jdGlvbigpe3RoaXMuZmlsdGVyUGFuZWxzPXt9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5kZWZhdWx0U29ydCx0PWUucHJvcCxuPWUub3JkZXI7dGhpcy5zdG9yZS5jb21taXQoInNvcnQiLHtwcm9wOnQsb3JkZXI6bn0pfSxiZWZvcmVEZXN0cm95OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5maWx0ZXJQYW5lbHM7Zm9yKHZhciB0IGluIGUpZS5oYXNPd25Qcm9wZXJ0eSh0KSYmZVt0XSYmZVt0XS4kZGVzdHJveSghMCl9LG1ldGhvZHM6e2lzQ2VsbEhpZGRlbjpmdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wLHI9MDtyPGU7cisrKW4rPXRbcl0uY29sU3Bhbjt2YXIgaT1uK3RbZV0uY29sU3Bhbi0xO3JldHVybiEwPT09dGhpcy5maXhlZHx8ImxlZnQiPT09dGhpcy5maXhlZD9pPj10aGlzLmxlZnRGaXhlZExlYWZDb3VudDoicmlnaHQiPT09dGhpcy5maXhlZD9uPHRoaXMuY29sdW1uc0NvdW50LXRoaXMucmlnaHRGaXhlZExlYWZDb3VudDppPHRoaXMubGVmdEZpeGVkTGVhZkNvdW50fHxuPj10aGlzLmNvbHVtbnNDb3VudC10aGlzLnJpZ2h0Rml4ZWRMZWFmQ291bnR9LGdldEhlYWRlclJvd1N0eWxlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMudGFibGUuaGVhZGVyUm93U3R5bGU7cmV0dXJuImZ1bmN0aW9uIj09dHlwZW9mIHQ/dC5jYWxsKG51bGwse3Jvd0luZGV4OmV9KTp0fSxnZXRIZWFkZXJSb3dDbGFzczpmdW5jdGlvbihlKXt2YXIgdD1bXSxuPXRoaXMudGFibGUuaGVhZGVyUm93Q2xhc3NOYW1lO3JldHVybiJzdHJpbmciPT10eXBlb2Ygbj90LnB1c2gobik6ImZ1bmN0aW9uIj09dHlwZW9mIG4mJnQucHVzaChuLmNhbGwobnVsbCx7cm93SW5kZXg6ZX0pKSx0LmpvaW4oIiAiKX0sZ2V0SGVhZGVyQ2VsbFN0eWxlOmZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpPXRoaXMudGFibGUuaGVhZGVyQ2VsbFN0eWxlO3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBpP2kuY2FsbChudWxsLHtyb3dJbmRleDplLGNvbHVtbkluZGV4OnQscm93Om4sY29sdW1uOnJ9KTppfSxnZXRIZWFkZXJDZWxsQ2xhc3M6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGk9W3IuaWQsci5vcmRlcixyLmhlYWRlckFsaWduLHIuY2xhc3NOYW1lLHIubGFiZWxDbGFzc05hbWVdOzA9PT1lJiZ0aGlzLmlzQ2VsbEhpZGRlbih0LG4pJiZpLnB1c2goImlzLWhpZGRlbiIpLHIuY2hpbGRyZW58fGkucHVzaCgiaXMtbGVhZiIpLHIuc29ydGFibGUmJmkucHVzaCgiaXMtc29ydGFibGUiKTt2YXIgbz10aGlzLnRhYmxlLmhlYWRlckNlbGxDbGFzc05hbWU7cmV0dXJuInN0cmluZyI9PXR5cGVvZiBvP2kucHVzaChvKToiZnVuY3Rpb24iPT10eXBlb2YgbyYmaS5wdXNoKG8uY2FsbChudWxsLHtyb3dJbmRleDplLGNvbHVtbkluZGV4OnQscm93Om4sY29sdW1uOnJ9KSksaS5qb2luKCIgIil9LHRvZ2dsZUFsbFNlbGVjdGlvbjpmdW5jdGlvbihlKXtlLnN0b3BQcm9wYWdhdGlvbigpLHRoaXMuc3RvcmUuY29tbWl0KCJ0b2dnbGVBbGxTZWxlY3Rpb24iKX0saGFuZGxlRmlsdGVyQ2xpY2s6ZnVuY3Rpb24oZSx0KXtlLnN0b3BQcm9wYWdhdGlvbigpO3ZhciBuPWUudGFyZ2V0LHI9IlRIIj09PW4udGFnTmFtZT9uOm4ucGFyZW50Tm9kZTtyPXIucXVlcnlTZWxlY3RvcigiLmVsLXRhYmxlX19jb2x1bW4tZmlsdGVyLXRyaWdnZXIiKXx8cjt2YXIgaT10aGlzLiRwYXJlbnQsbz10aGlzLmZpbHRlclBhbmVsc1t0LmlkXTtvJiZ0LmZpbHRlck9wZW5lZD9vLnNob3dQb3BwZXI9ITE6KG98fChvPW5ldyBzLmRlZmF1bHQoYS5kZWZhdWx0KSx0aGlzLmZpbHRlclBhbmVsc1t0LmlkXT1vLHQuZmlsdGVyUGxhY2VtZW50JiYoby5wbGFjZW1lbnQ9dC5maWx0ZXJQbGFjZW1lbnQpLG8udGFibGU9aSxvLmNlbGw9cixvLmNvbHVtbj10LCF0aGlzLiRpc1NlcnZlciYmby4kbW91bnQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IikpKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7by5zaG93UG9wcGVyPSEwfSwxNikpfSxoYW5kbGVIZWFkZXJDbGljazpmdW5jdGlvbihlLHQpeyF0LmZpbHRlcnMmJnQuc29ydGFibGU/dGhpcy5oYW5kbGVTb3J0Q2xpY2soZSx0KTp0LmZpbHRlcmFibGUmJiF0LnNvcnRhYmxlJiZ0aGlzLmhhbmRsZUZpbHRlckNsaWNrKGUsdCksdGhpcy4kcGFyZW50LiRlbWl0KCJoZWFkZXItY2xpY2siLHQsZSl9LGhhbmRsZUhlYWRlckNvbnRleHRNZW51OmZ1bmN0aW9uKGUsdCl7dGhpcy4kcGFyZW50LiRlbWl0KCJoZWFkZXItY29udGV4dG1lbnUiLHQsZSl9LGhhbmRsZU1vdXNlRG93bjpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7dGhpcy4kaXNTZXJ2ZXJ8fHQuY2hpbGRyZW4mJnQuY2hpbGRyZW4ubGVuZ3RoPjB8fHRoaXMuZHJhZ2dpbmdDb2x1bW4mJnRoaXMuYm9yZGVyJiZmdW5jdGlvbigpe24uZHJhZ2dpbmc9ITAsbi4kcGFyZW50LnJlc2l6ZVByb3h5VmlzaWJsZT0hMDt2YXIgaT1uLiRwYXJlbnQsbz1pLiRlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0LHM9bi4kZWwucXVlcnlTZWxlY3RvcigidGguIit0LmlkKSxhPXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbD1hLmxlZnQtbyszMDsoMCxyLmFkZENsYXNzKShzLCJub2NsaWNrIiksbi5kcmFnU3RhdGU9e3N0YXJ0TW91c2VMZWZ0OmUuY2xpZW50WCxzdGFydExlZnQ6YS5yaWdodC1vLHN0YXJ0Q29sdW1uTGVmdDphLmxlZnQtbyx0YWJsZUxlZnQ6b307dmFyIHU9aS4kcmVmcy5yZXNpemVQcm94eTt1LnN0eWxlLmxlZnQ9bi5kcmFnU3RhdGUuc3RhcnRMZWZ0KyJweCIsZG9jdW1lbnQub25zZWxlY3RzdGFydD1mdW5jdGlvbigpe3JldHVybiExfSxkb2N1bWVudC5vbmRyYWdzdGFydD1mdW5jdGlvbigpe3JldHVybiExfTt2YXIgYz1mdW5jdGlvbihlKXt2YXIgdD1lLmNsaWVudFgtbi5kcmFnU3RhdGUuc3RhcnRNb3VzZUxlZnQscj1uLmRyYWdTdGF0ZS5zdGFydExlZnQrdDt1LnN0eWxlLmxlZnQ9TWF0aC5tYXgobCxyKSsicHgifTtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW1vdmUiLGMpLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNldXAiLGZ1bmN0aW9uIG8oKXtpZihuLmRyYWdnaW5nKXt2YXIgYT1uLmRyYWdTdGF0ZSxsPWEuc3RhcnRDb2x1bW5MZWZ0LGQ9YS5zdGFydExlZnQsZj1wYXJzZUludCh1LnN0eWxlLmxlZnQsMTApLWw7dC53aWR0aD10LnJlYWxXaWR0aD1mLGkuJGVtaXQoImhlYWRlci1kcmFnZW5kIix0LndpZHRoLGQtbCx0LGUpLG4uc3RvcmUuc2NoZWR1bGVMYXlvdXQoKSxkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvcj0iIixuLmRyYWdnaW5nPSExLG4uZHJhZ2dpbmdDb2x1bW49bnVsbCxuLmRyYWdTdGF0ZT17fSxpLnJlc2l6ZVByb3h5VmlzaWJsZT0hMX1kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCJtb3VzZW1vdmUiLGMpLGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIm1vdXNldXAiLG8pLGRvY3VtZW50Lm9uc2VsZWN0c3RhcnQ9bnVsbCxkb2N1bWVudC5vbmRyYWdzdGFydD1udWxsLHNldFRpbWVvdXQoZnVuY3Rpb24oKXsoMCxyLnJlbW92ZUNsYXNzKShzLCJub2NsaWNrIil9LDApfSl9KCl9LGhhbmRsZU1vdXNlTW92ZTpmdW5jdGlvbihlLHQpe2lmKCEodC5jaGlsZHJlbiYmdC5jaGlsZHJlbi5sZW5ndGg+MCkpe2Zvcih2YXIgbj1lLnRhcmdldDtuJiYiVEgiIT09bi50YWdOYW1lOyluPW4ucGFyZW50Tm9kZTtpZih0JiZ0LnJlc2l6YWJsZSYmIXRoaXMuZHJhZ2dpbmcmJnRoaXMuYm9yZGVyKXt2YXIgaT1uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG89ZG9jdW1lbnQuYm9keS5zdHlsZTtpLndpZHRoPjEyJiZpLnJpZ2h0LWUucGFnZVg8OD8oby5jdXJzb3I9ImNvbC1yZXNpemUiLCgwLHIuaGFzQ2xhc3MpKG4sImlzLXNvcnRhYmxlIikmJihuLnN0eWxlLmN1cnNvcj0iY29sLXJlc2l6ZSIpLHRoaXMuZHJhZ2dpbmdDb2x1bW49dCk6dGhpcy5kcmFnZ2luZ3x8KG8uY3Vyc29yPSIiLCgwLHIuaGFzQ2xhc3MpKG4sImlzLXNvcnRhYmxlIikmJihuLnN0eWxlLmN1cnNvcj0icG9pbnRlciIpLHRoaXMuZHJhZ2dpbmdDb2x1bW49bnVsbCl9fX0saGFuZGxlTW91c2VPdXQ6ZnVuY3Rpb24oKXt0aGlzLiRpc1NlcnZlcnx8KGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yPSIiKX0sdG9nZ2xlT3JkZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5vcmRlcixuPWUuc29ydE9yZGVycztpZigiIj09PXQpcmV0dXJuIG5bMF07dmFyIHI9bi5pbmRleE9mKHR8fG51bGwpO3JldHVybiBuW3I+bi5sZW5ndGgtMj8wOnIrMV19LGhhbmRsZVNvcnRDbGljazpmdW5jdGlvbihlLHQsbil7ZS5zdG9wUHJvcGFnYXRpb24oKTtmb3IodmFyIGk9bnx8dGhpcy50b2dnbGVPcmRlcih0KSxvPWUudGFyZ2V0O28mJiJUSCIhPT1vLnRhZ05hbWU7KW89by5wYXJlbnROb2RlO2lmKG8mJiJUSCI9PT1vLnRhZ05hbWUmJigwLHIuaGFzQ2xhc3MpKG8sIm5vY2xpY2siKSkoMCxyLnJlbW92ZUNsYXNzKShvLCJub2NsaWNrIik7ZWxzZSBpZih0LnNvcnRhYmxlKXt2YXIgcz10aGlzLnN0b3JlLnN0YXRlcyxhPXMuc29ydFByb3AsbD12b2lkIDAsdT1zLnNvcnRpbmdDb2x1bW47KHUhPT10fHx1PT09dCYmbnVsbD09PXUub3JkZXIpJiYodSYmKHUub3JkZXI9bnVsbCkscy5zb3J0aW5nQ29sdW1uPXQsYT10LnByb3BlcnR5KSxpP2w9dC5vcmRlcj1pOihsPXQub3JkZXI9bnVsbCxzLnNvcnRpbmdDb2x1bW49bnVsbCxhPW51bGwpLHMuc29ydFByb3A9YSxzLnNvcnRPcmRlcj1sLHRoaXMuc3RvcmUuY29tbWl0KCJjaGFuZ2VTb3J0Q29uZGl0aW9uIil9fX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntkcmFnZ2luZ0NvbHVtbjpudWxsLGRyYWdnaW5nOiExLGRyYWdTdGF0ZTp7fX19fX0sMTY4OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oMTY5KSxpPW4ubihyKSxvPW4oMTcxKSxzPW4oMCkoaS5hLG8uYSwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PXMuZXhwb3J0c30sMTY5OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByPWMobig3KSksaT1uKDEzKSxvPWMobig1KSkscz1jKG4oMTApKSxhPWMobigxNzApKSxsPWMobigxNikpLHU9YyhuKDQwKSk7ZnVuY3Rpb24gYyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dC5kZWZhdWx0PXtuYW1lOiJFbFRhYmxlRmlsdGVyUGFuZWwiLG1peGluczpbci5kZWZhdWx0LG8uZGVmYXVsdF0sZGlyZWN0aXZlczp7Q2xpY2tvdXRzaWRlOnMuZGVmYXVsdH0sY29tcG9uZW50czp7RWxDaGVja2JveDpsLmRlZmF1bHQsRWxDaGVja2JveEdyb3VwOnUuZGVmYXVsdH0scHJvcHM6e3BsYWNlbWVudDp7dHlwZTpTdHJpbmcsZGVmYXVsdDoiYm90dG9tLWVuZCJ9fSxjdXN0b21SZW5kZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGUoImRpdiIse2NsYXNzOiJlbC10YWJsZS1maWx0ZXIifSxbZSgiZGl2Iix7Y2xhc3M6ImVsLXRhYmxlLWZpbHRlcl9fY29udGVudCJ9LFtdKSxlKCJkaXYiLHtjbGFzczoiZWwtdGFibGUtZmlsdGVyX19ib3R0b20ifSxbZSgiYnV0dG9uIix7b246e2NsaWNrOnRoaXMuaGFuZGxlQ29uZmlybX19LFt0aGlzLnQoImVsLnRhYmxlLmNvbmZpcm1GaWx0ZXIiKV0pLGUoImJ1dHRvbiIse29uOntjbGljazp0aGlzLmhhbmRsZVJlc2V0fX0sW3RoaXMudCgiZWwudGFibGUucmVzZXRGaWx0ZXIiKV0pXSldKX0sbWV0aG9kczp7aXNBY3RpdmU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUudmFsdWU9PT10aGlzLmZpbHRlclZhbHVlfSxoYW5kbGVPdXRzaWRlQ2xpY2s6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtlLnNob3dQb3BwZXI9ITF9LDE2KX0saGFuZGxlQ29uZmlybTpmdW5jdGlvbigpe3RoaXMuY29uZmlybUZpbHRlcih0aGlzLmZpbHRlcmVkVmFsdWUpLHRoaXMuaGFuZGxlT3V0c2lkZUNsaWNrKCl9LGhhbmRsZVJlc2V0OmZ1bmN0aW9uKCl7dGhpcy5maWx0ZXJlZFZhbHVlPVtdLHRoaXMuY29uZmlybUZpbHRlcih0aGlzLmZpbHRlcmVkVmFsdWUpLHRoaXMuaGFuZGxlT3V0c2lkZUNsaWNrKCl9LGhhbmRsZVNlbGVjdDpmdW5jdGlvbihlKXt0aGlzLmZpbHRlclZhbHVlPWUsdm9pZCAwIT09ZSYmbnVsbCE9PWU/dGhpcy5jb25maXJtRmlsdGVyKHRoaXMuZmlsdGVyZWRWYWx1ZSk6dGhpcy5jb25maXJtRmlsdGVyKFtdKSx0aGlzLmhhbmRsZU91dHNpZGVDbGljaygpfSxjb25maXJtRmlsdGVyOmZ1bmN0aW9uKGUpe3RoaXMudGFibGUuc3RvcmUuY29tbWl0KCJmaWx0ZXJDaGFuZ2UiLHtjb2x1bW46dGhpcy5jb2x1bW4sdmFsdWVzOmV9KSx0aGlzLnRhYmxlLnN0b3JlLnVwZGF0ZUFsbFNlbGVjdGVkKCl9fSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3RhYmxlOm51bGwsY2VsbDpudWxsLGNvbHVtbjpudWxsfX0sY29tcHV0ZWQ6e2ZpbHRlcnM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb2x1bW4mJnRoaXMuY29sdW1uLmZpbHRlcnN9LGZpbHRlclZhbHVlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5jb2x1bW4uZmlsdGVyZWRWYWx1ZXx8W10pWzBdfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5maWx0ZXJlZFZhbHVlJiYodm9pZCAwIT09ZSYmbnVsbCE9PWU/dGhpcy5maWx0ZXJlZFZhbHVlLnNwbGljZSgwLDEsZSk6dGhpcy5maWx0ZXJlZFZhbHVlLnNwbGljZSgwLDEpKX19LGZpbHRlcmVkVmFsdWU6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbHVtbiYmdGhpcy5jb2x1bW4uZmlsdGVyZWRWYWx1ZXx8W119LHNldDpmdW5jdGlvbihlKXt0aGlzLmNvbHVtbiYmKHRoaXMuY29sdW1uLmZpbHRlcmVkVmFsdWU9ZSl9fSxtdWx0aXBsZTpmdW5jdGlvbigpe3JldHVybiF0aGlzLmNvbHVtbnx8dGhpcy5jb2x1bW4uZmlsdGVyTXVsdGlwbGV9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLnBvcHBlckVsbT10aGlzLiRlbCx0aGlzLnJlZmVyZW5jZUVsbT10aGlzLmNlbGwsdGhpcy50YWJsZS5ib2R5V3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCJzY3JvbGwiLGZ1bmN0aW9uKCl7ZS51cGRhdGVQb3BwZXIoKX0pLHRoaXMuJHdhdGNoKCJzaG93UG9wcGVyIixmdW5jdGlvbih0KXtlLmNvbHVtbiYmKGUuY29sdW1uLmZpbHRlck9wZW5lZD10KSx0P2EuZGVmYXVsdC5vcGVuKGUpOmEuZGVmYXVsdC5jbG9zZShlKX0pfSx3YXRjaDp7c2hvd1BvcHBlcjpmdW5jdGlvbihlKXshMD09PWUmJnBhcnNlSW50KHRoaXMucG9wcGVySlMuX3BvcHBlci5zdHlsZS56SW5kZXgsMTApPGkuUG9wdXBNYW5hZ2VyLnpJbmRleCYmKHRoaXMucG9wcGVySlMuX3BvcHBlci5zdHlsZS56SW5kZXg9aS5Qb3B1cE1hbmFnZXIubmV4dFpJbmRleCgpKX19fX0sMTcwOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9big0KTt2YXIgbz1bXTshKChyPWkpJiZyLl9fZXNNb2R1bGU/cjp7ZGVmYXVsdDpyfSkuZGVmYXVsdC5wcm90b3R5cGUuJGlzU2VydmVyJiZkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsZnVuY3Rpb24oZSl7by5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBuPWUudGFyZ2V0O3QmJnQuJGVsJiYobj09PXQuJGVsfHx0LiRlbC5jb250YWlucyhuKXx8dC5oYW5kbGVPdXRzaWRlQ2xpY2smJnQuaGFuZGxlT3V0c2lkZUNsaWNrKGUpKX0pfSksdC5kZWZhdWx0PXtvcGVuOmZ1bmN0aW9uKGUpe2UmJm8ucHVzaChlKX0sY2xvc2U6ZnVuY3Rpb24oZSl7LTEhPT1vLmluZGV4T2YoZSkmJm8uc3BsaWNlKGUsMSl9fX0sMTcxOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbigidHJhbnNpdGlvbiIse2F0dHJzOntuYW1lOiJlbC16b29tLWluLXRvcCJ9fSxbZS5tdWx0aXBsZT9uKCJkaXYiLHtkaXJlY3RpdmVzOlt7bmFtZToiY2xpY2tvdXRzaWRlIixyYXdOYW1lOiJ2LWNsaWNrb3V0c2lkZSIsdmFsdWU6ZS5oYW5kbGVPdXRzaWRlQ2xpY2ssZXhwcmVzc2lvbjoiaGFuZGxlT3V0c2lkZUNsaWNrIn0se25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6ZS5zaG93UG9wcGVyLGV4cHJlc3Npb246InNob3dQb3BwZXIifV0sc3RhdGljQ2xhc3M6ImVsLXRhYmxlLWZpbHRlciJ9LFtuKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtdGFibGUtZmlsdGVyX19jb250ZW50In0sW24oImVsLXNjcm9sbGJhciIse2F0dHJzOnsid3JhcC1jbGFzcyI6ImVsLXRhYmxlLWZpbHRlcl9fd3JhcCJ9fSxbbigiZWwtY2hlY2tib3gtZ3JvdXAiLHtzdGF0aWNDbGFzczoiZWwtdGFibGUtZmlsdGVyX19jaGVja2JveC1ncm91cCIsbW9kZWw6e3ZhbHVlOmUuZmlsdGVyZWRWYWx1ZSxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmZpbHRlcmVkVmFsdWU9dH0sZXhwcmVzc2lvbjoiZmlsdGVyZWRWYWx1ZSJ9fSxlLl9sKGUuZmlsdGVycyxmdW5jdGlvbih0KXtyZXR1cm4gbigiZWwtY2hlY2tib3giLHtrZXk6dC52YWx1ZSxhdHRyczp7bGFiZWw6dC52YWx1ZX19LFtlLl92KGUuX3ModC50ZXh0KSldKX0pKV0sMSldLDEpLG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC10YWJsZS1maWx0ZXJfX2JvdHRvbSJ9LFtuKCJidXR0b24iLHtjbGFzczp7ImlzLWRpc2FibGVkIjowPT09ZS5maWx0ZXJlZFZhbHVlLmxlbmd0aH0sYXR0cnM6e2Rpc2FibGVkOjA9PT1lLmZpbHRlcmVkVmFsdWUubGVuZ3RofSxvbjp7Y2xpY2s6ZS5oYW5kbGVDb25maXJtfX0sW2UuX3YoZS5fcyhlLnQoImVsLnRhYmxlLmNvbmZpcm1GaWx0ZXIiKSkpXSksbigiYnV0dG9uIix7b246e2NsaWNrOmUuaGFuZGxlUmVzZXR9fSxbZS5fdihlLl9zKGUudCgiZWwudGFibGUucmVzZXRGaWx0ZXIiKSkpXSldKV0pOm4oImRpdiIse2RpcmVjdGl2ZXM6W3tuYW1lOiJjbGlja291dHNpZGUiLHJhd05hbWU6InYtY2xpY2tvdXRzaWRlIix2YWx1ZTplLmhhbmRsZU91dHNpZGVDbGljayxleHByZXNzaW9uOiJoYW5kbGVPdXRzaWRlQ2xpY2sifSx7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTplLnNob3dQb3BwZXIsZXhwcmVzc2lvbjoic2hvd1BvcHBlciJ9XSxzdGF0aWNDbGFzczoiZWwtdGFibGUtZmlsdGVyIn0sW24oInVsIix7c3RhdGljQ2xhc3M6ImVsLXRhYmxlLWZpbHRlcl9fbGlzdCJ9LFtuKCJsaSIse3N0YXRpY0NsYXNzOiJlbC10YWJsZS1maWx0ZXJfX2xpc3QtaXRlbSIsY2xhc3M6eyJpcy1hY3RpdmUiOnZvaWQgMD09PWUuZmlsdGVyVmFsdWV8fG51bGw9PT1lLmZpbHRlclZhbHVlfSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVTZWxlY3QobnVsbCl9fX0sW2UuX3YoZS5fcyhlLnQoImVsLnRhYmxlLmNsZWFyRmlsdGVyIikpKV0pLGUuX2woZS5maWx0ZXJzLGZ1bmN0aW9uKHQpe3JldHVybiBuKCJsaSIse2tleTp0LnZhbHVlLHN0YXRpY0NsYXNzOiJlbC10YWJsZS1maWx0ZXJfX2xpc3QtaXRlbSIsY2xhc3M6eyJpcy1hY3RpdmUiOmUuaXNBY3RpdmUodCl9LGF0dHJzOntsYWJlbDp0LnZhbHVlfSxvbjp7Y2xpY2s6ZnVuY3Rpb24obil7ZS5oYW5kbGVTZWxlY3QodC52YWx1ZSl9fX0sW2UuX3YoZS5fcyh0LnRleHQpKV0pfSldLDIpXSldKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn0sMTcyOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigzOSksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07dC5kZWZhdWx0PXtuYW1lOiJFbFRhYmxlRm9vdGVyIixtaXhpbnM6W28uZGVmYXVsdF0scmVuZGVyOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1bXTtyZXR1cm4gdGhpcy5zdW1tYXJ5TWV0aG9kP249dGhpcy5zdW1tYXJ5TWV0aG9kKHtjb2x1bW5zOnRoaXMuY29sdW1ucyxkYXRhOnRoaXMuc3RvcmUuc3RhdGVzLmRhdGF9KTp0aGlzLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihlLHIpe2lmKDAhPT1yKXt2YXIgaT10LnN0b3JlLnN0YXRlcy5kYXRhLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gTnVtYmVyKHRbZS5wcm9wZXJ0eV0pfSksbz1bXSxzPSEwO2kuZm9yRWFjaChmdW5jdGlvbihlKXtpZighaXNOYU4oZSkpe3M9ITE7dmFyIHQ9KCIiK2UpLnNwbGl0KCIuIilbMV07by5wdXNoKHQ/dC5sZW5ndGg6MCl9fSk7dmFyIGE9TWF0aC5tYXguYXBwbHkobnVsbCxvKTtuW3JdPXM/IiI6aS5yZWR1Y2UoZnVuY3Rpb24oZSx0KXt2YXIgbj1OdW1iZXIodCk7cmV0dXJuIGlzTmFOKG4pP2U6cGFyc2VGbG9hdCgoZSt0KS50b0ZpeGVkKE1hdGgubWluKGEsMjApKSl9LDApfWVsc2UgbltyXT10LnN1bVRleHR9KSxlKCJ0YWJsZSIse2NsYXNzOiJlbC10YWJsZV9fZm9vdGVyIixhdHRyczp7Y2VsbHNwYWNpbmc6IjAiLGNlbGxwYWRkaW5nOiIwIixib3JkZXI6IjAifX0sW2UoImNvbGdyb3VwIixudWxsLFt0aGlzLl9sKHRoaXMuY29sdW1ucyxmdW5jdGlvbih0KXtyZXR1cm4gZSgiY29sIix7YXR0cnM6e25hbWU6dC5pZH19LFtdKX0pLHRoaXMuaGFzR3V0dGVyP2UoImNvbCIse2F0dHJzOntuYW1lOiJndXR0ZXIifX0sW10pOiIiXSksZSgidGJvZHkiLHtjbGFzczpbeyJoYXMtZ3V0dGVyIjp0aGlzLmhhc0d1dHRlcn1dfSxbZSgidHIiLG51bGwsW3RoaXMuX2wodGhpcy5jb2x1bW5zLGZ1bmN0aW9uKHIsaSl7cmV0dXJuIGUoInRkIix7YXR0cnM6e2NvbHNwYW46ci5jb2xTcGFuLHJvd3NwYW46ci5yb3dTcGFufSxjbGFzczpbci5pZCxyLmhlYWRlckFsaWduLHIuY2xhc3NOYW1lfHwiIix0LmlzQ2VsbEhpZGRlbihpLHQuY29sdW1ucyk/ImlzLWhpZGRlbiI6IiIsci5jaGlsZHJlbj8iIjoiaXMtbGVhZiIsci5sYWJlbENsYXNzTmFtZV19LFtlKCJkaXYiLHtjbGFzczpbImNlbGwiLHIubGFiZWxDbGFzc05hbWVdfSxbbltpXV0pXSl9KSx0aGlzLmhhc0d1dHRlcj9lKCJ0aCIse2NsYXNzOiJndXR0ZXIifSxbXSk6IiJdKV0pXSl9LHByb3BzOntmaXhlZDpTdHJpbmcsc3RvcmU6e3JlcXVpcmVkOiEwfSxzdW1tYXJ5TWV0aG9kOkZ1bmN0aW9uLHN1bVRleHQ6U3RyaW5nLGJvcmRlcjpCb29sZWFuLGRlZmF1bHRTb3J0Ont0eXBlOk9iamVjdCxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJue3Byb3A6IiIsb3JkZXI6IiJ9fX19LGNvbXB1dGVkOnt0YWJsZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLiRwYXJlbnR9LGlzQWxsU2VsZWN0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdG9yZS5zdGF0ZXMuaXNBbGxTZWxlY3RlZH0sY29sdW1uc0NvdW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RvcmUuc3RhdGVzLmNvbHVtbnMubGVuZ3RofSxsZWZ0Rml4ZWRDb3VudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0b3JlLnN0YXRlcy5maXhlZENvbHVtbnMubGVuZ3RofSxyaWdodEZpeGVkQ291bnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdG9yZS5zdGF0ZXMucmlnaHRGaXhlZENvbHVtbnMubGVuZ3RofSxjb2x1bW5zOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RvcmUuc3RhdGVzLmNvbHVtbnN9LGhhc0d1dHRlcjpmdW5jdGlvbigpe3JldHVybiF0aGlzLmZpeGVkJiZ0aGlzLnRhYmxlTGF5b3V0Lmd1dHRlcldpZHRofX0sbWV0aG9kczp7aXNDZWxsSGlkZGVuOmZ1bmN0aW9uKGUsdCl7aWYoITA9PT10aGlzLmZpeGVkfHwibGVmdCI9PT10aGlzLmZpeGVkKXJldHVybiBlPj10aGlzLmxlZnRGaXhlZENvdW50O2lmKCJyaWdodCI9PT10aGlzLmZpeGVkKXtmb3IodmFyIG49MCxyPTA7cjxlO3IrKyluKz10W3JdLmNvbFNwYW47cmV0dXJuIG48dGhpcy5jb2x1bW5zQ291bnQtdGhpcy5yaWdodEZpeGVkQ291bnR9cmV0dXJuIGU8dGhpcy5sZWZ0Rml4ZWRDb3VudHx8ZT49dGhpcy5jb2x1bW5zQ291bnQtdGhpcy5yaWdodEZpeGVkQ291bnR9fX19LDE3MzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC10YWJsZSIsY2xhc3M6W3siZWwtdGFibGUtLWZpdCI6ZS5maXQsImVsLXRhYmxlLS1zdHJpcGVkIjplLnN0cmlwZSwiZWwtdGFibGUtLWJvcmRlciI6ZS5ib3JkZXJ8fGUuaXNHcm91cCwiZWwtdGFibGUtLWhpZGRlbiI6ZS5pc0hpZGRlbiwiZWwtdGFibGUtLWdyb3VwIjplLmlzR3JvdXAsImVsLXRhYmxlLS1mbHVpZC1oZWlnaHQiOmUubWF4SGVpZ2h0LCJlbC10YWJsZS0tc2Nyb2xsYWJsZS14IjplLmxheW91dC5zY3JvbGxYLCJlbC10YWJsZS0tc2Nyb2xsYWJsZS15IjplLmxheW91dC5zY3JvbGxZLCJlbC10YWJsZS0tZW5hYmxlLXJvdy1ob3ZlciI6IWUuc3RvcmUuc3RhdGVzLmlzQ29tcGxleCwiZWwtdGFibGUtLWVuYWJsZS1yb3ctdHJhbnNpdGlvbiI6MCE9PShlLnN0b3JlLnN0YXRlcy5kYXRhfHxbXSkubGVuZ3RoJiYoZS5zdG9yZS5zdGF0ZXMuZGF0YXx8W10pLmxlbmd0aDwxMDB9LGUudGFibGVTaXplPyJlbC10YWJsZS0tIitlLnRhYmxlU2l6ZToiIl0sb246e21vdXNlbGVhdmU6ZnVuY3Rpb24odCl7ZS5oYW5kbGVNb3VzZUxlYXZlKHQpfX19LFtuKCJkaXYiLHtyZWY6ImhpZGRlbkNvbHVtbnMiLHN0YXRpY0NsYXNzOiJoaWRkZW4tY29sdW1ucyJ9LFtlLl90KCJkZWZhdWx0IildLDIpLGUuc2hvd0hlYWRlcj9uKCJkaXYiLHtkaXJlY3RpdmVzOlt7bmFtZToibW91c2V3aGVlbCIscmF3TmFtZToidi1tb3VzZXdoZWVsIix2YWx1ZTplLmhhbmRsZUhlYWRlckZvb3Rlck1vdXNld2hlZWwsZXhwcmVzc2lvbjoiaGFuZGxlSGVhZGVyRm9vdGVyTW91c2V3aGVlbCJ9XSxyZWY6ImhlYWRlcldyYXBwZXIiLHN0YXRpY0NsYXNzOiJlbC10YWJsZV9faGVhZGVyLXdyYXBwZXIifSxbbigidGFibGUtaGVhZGVyIix7cmVmOiJ0YWJsZUhlYWRlciIsc3R5bGU6e3dpZHRoOmUubGF5b3V0LmJvZHlXaWR0aD9lLmxheW91dC5ib2R5V2lkdGgrInB4IjoiIn0sYXR0cnM6e3N0b3JlOmUuc3RvcmUsYm9yZGVyOmUuYm9yZGVyLCJkZWZhdWx0LXNvcnQiOmUuZGVmYXVsdFNvcnR9fSldLDEpOmUuX2UoKSxuKCJkaXYiLHtyZWY6ImJvZHlXcmFwcGVyIixzdGF0aWNDbGFzczoiZWwtdGFibGVfX2JvZHktd3JhcHBlciIsY2xhc3M6W2UubGF5b3V0LnNjcm9sbFg/ImlzLXNjcm9sbGluZy0iK2Uuc2Nyb2xsUG9zaXRpb246ImlzLXNjcm9sbGluZy1ub25lIl0sc3R5bGU6W2UuYm9keUhlaWdodF19LFtuKCJ0YWJsZS1ib2R5Iix7c3R5bGU6e3dpZHRoOmUuYm9keVdpZHRofSxhdHRyczp7Y29udGV4dDplLmNvbnRleHQsc3RvcmU6ZS5zdG9yZSxzdHJpcGU6ZS5zdHJpcGUsInJvdy1jbGFzcy1uYW1lIjplLnJvd0NsYXNzTmFtZSwicm93LXN0eWxlIjplLnJvd1N0eWxlLGhpZ2hsaWdodDplLmhpZ2hsaWdodEN1cnJlbnRSb3d9fSksZS5kYXRhJiYwIT09ZS5kYXRhLmxlbmd0aD9lLl9lKCk6bigiZGl2Iix7cmVmOiJlbXB0eUJsb2NrIixzdGF0aWNDbGFzczoiZWwtdGFibGVfX2VtcHR5LWJsb2NrIixzdHlsZTp7d2lkdGg6ZS5ib2R5V2lkdGh9fSxbbigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC10YWJsZV9fZW1wdHktdGV4dCJ9LFtlLl90KCJlbXB0eSIsW2UuX3YoZS5fcyhlLmVtcHR5VGV4dHx8ZS50KCJlbC50YWJsZS5lbXB0eVRleHQiKSkpXSldLDIpXSksZS4kc2xvdHMuYXBwZW5kP24oImRpdiIse3JlZjoiYXBwZW5kV3JhcHBlciIsc3RhdGljQ2xhc3M6ImVsLXRhYmxlX19hcHBlbmQtd3JhcHBlciJ9LFtlLl90KCJhcHBlbmQiKV0sMik6ZS5fZSgpXSwxKSxlLnNob3dTdW1tYXJ5P24oImRpdiIse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOmUuZGF0YSYmZS5kYXRhLmxlbmd0aD4wLGV4cHJlc3Npb246ImRhdGEgJiYgZGF0YS5sZW5ndGggPiAwIn0se25hbWU6Im1vdXNld2hlZWwiLHJhd05hbWU6InYtbW91c2V3aGVlbCIsdmFsdWU6ZS5oYW5kbGVIZWFkZXJGb290ZXJNb3VzZXdoZWVsLGV4cHJlc3Npb246ImhhbmRsZUhlYWRlckZvb3Rlck1vdXNld2hlZWwifV0scmVmOiJmb290ZXJXcmFwcGVyIixzdGF0aWNDbGFzczoiZWwtdGFibGVfX2Zvb3Rlci13cmFwcGVyIn0sW24oInRhYmxlLWZvb3RlciIse3N0eWxlOnt3aWR0aDplLmxheW91dC5ib2R5V2lkdGg/ZS5sYXlvdXQuYm9keVdpZHRoKyJweCI6IiJ9LGF0dHJzOntzdG9yZTplLnN0b3JlLGJvcmRlcjplLmJvcmRlciwic3VtLXRleHQiOmUuc3VtVGV4dHx8ZS50KCJlbC50YWJsZS5zdW1UZXh0IiksInN1bW1hcnktbWV0aG9kIjplLnN1bW1hcnlNZXRob2QsImRlZmF1bHQtc29ydCI6ZS5kZWZhdWx0U29ydH19KV0sMSk6ZS5fZSgpLGUuZml4ZWRDb2x1bW5zLmxlbmd0aD4wP24oImRpdiIse2RpcmVjdGl2ZXM6W3tuYW1lOiJtb3VzZXdoZWVsIixyYXdOYW1lOiJ2LW1vdXNld2hlZWwiLHZhbHVlOmUuaGFuZGxlRml4ZWRNb3VzZXdoZWVsLGV4cHJlc3Npb246ImhhbmRsZUZpeGVkTW91c2V3aGVlbCJ9XSxyZWY6ImZpeGVkV3JhcHBlciIsc3RhdGljQ2xhc3M6ImVsLXRhYmxlX19maXhlZCIsc3R5bGU6W3t3aWR0aDplLmxheW91dC5maXhlZFdpZHRoP2UubGF5b3V0LmZpeGVkV2lkdGgrInB4IjoiIn0sZS5maXhlZEhlaWdodF19LFtlLnNob3dIZWFkZXI/bigiZGl2Iix7cmVmOiJmaXhlZEhlYWRlcldyYXBwZXIiLHN0YXRpY0NsYXNzOiJlbC10YWJsZV9fZml4ZWQtaGVhZGVyLXdyYXBwZXIifSxbbigidGFibGUtaGVhZGVyIix7cmVmOiJmaXhlZFRhYmxlSGVhZGVyIixzdHlsZTp7d2lkdGg6ZS5ib2R5V2lkdGh9LGF0dHJzOntmaXhlZDoibGVmdCIsYm9yZGVyOmUuYm9yZGVyLHN0b3JlOmUuc3RvcmV9fSldLDEpOmUuX2UoKSxuKCJkaXYiLHtyZWY6ImZpeGVkQm9keVdyYXBwZXIiLHN0YXRpY0NsYXNzOiJlbC10YWJsZV9fZml4ZWQtYm9keS13cmFwcGVyIixzdHlsZTpbe3RvcDplLmxheW91dC5oZWFkZXJIZWlnaHQrInB4In0sZS5maXhlZEJvZHlIZWlnaHRdfSxbbigidGFibGUtYm9keSIse3N0eWxlOnt3aWR0aDplLmJvZHlXaWR0aH0sYXR0cnM6e2ZpeGVkOiJsZWZ0IixzdG9yZTplLnN0b3JlLHN0cmlwZTplLnN0cmlwZSxoaWdobGlnaHQ6ZS5oaWdobGlnaHRDdXJyZW50Um93LCJyb3ctY2xhc3MtbmFtZSI6ZS5yb3dDbGFzc05hbWUsInJvdy1zdHlsZSI6ZS5yb3dTdHlsZX19KSxlLiRzbG90cy5hcHBlbmQ/bigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLXRhYmxlX19hcHBlbmQtZ3V0dGVyIixzdHlsZTp7aGVpZ2h0OmUubGF5b3V0LmFwcGVuZEhlaWdodCsicHgifX0pOmUuX2UoKV0sMSksZS5zaG93U3VtbWFyeT9uKCJkaXYiLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTplLmRhdGEmJmUuZGF0YS5sZW5ndGg+MCxleHByZXNzaW9uOiJkYXRhICYmIGRhdGEubGVuZ3RoID4gMCJ9XSxyZWY6ImZpeGVkRm9vdGVyV3JhcHBlciIsc3RhdGljQ2xhc3M6ImVsLXRhYmxlX19maXhlZC1mb290ZXItd3JhcHBlciJ9LFtuKCJ0YWJsZS1mb290ZXIiLHtzdHlsZTp7d2lkdGg6ZS5ib2R5V2lkdGh9LGF0dHJzOntmaXhlZDoibGVmdCIsYm9yZGVyOmUuYm9yZGVyLCJzdW0tdGV4dCI6ZS5zdW1UZXh0fHxlLnQoImVsLnRhYmxlLnN1bVRleHQiKSwic3VtbWFyeS1tZXRob2QiOmUuc3VtbWFyeU1ldGhvZCxzdG9yZTplLnN0b3JlfX0pXSwxKTplLl9lKCldKTplLl9lKCksZS5yaWdodEZpeGVkQ29sdW1ucy5sZW5ndGg+MD9uKCJkaXYiLHtkaXJlY3RpdmVzOlt7bmFtZToibW91c2V3aGVlbCIscmF3TmFtZToidi1tb3VzZXdoZWVsIix2YWx1ZTplLmhhbmRsZUZpeGVkTW91c2V3aGVlbCxleHByZXNzaW9uOiJoYW5kbGVGaXhlZE1vdXNld2hlZWwifV0scmVmOiJyaWdodEZpeGVkV3JhcHBlciIsc3RhdGljQ2xhc3M6ImVsLXRhYmxlX19maXhlZC1yaWdodCIsc3R5bGU6W3t3aWR0aDplLmxheW91dC5yaWdodEZpeGVkV2lkdGg/ZS5sYXlvdXQucmlnaHRGaXhlZFdpZHRoKyJweCI6IiIscmlnaHQ6ZS5sYXlvdXQuc2Nyb2xsWT8oZS5ib3JkZXI/ZS5sYXlvdXQuZ3V0dGVyV2lkdGg6ZS5sYXlvdXQuZ3V0dGVyV2lkdGh8fDApKyJweCI6IiJ9LGUuZml4ZWRIZWlnaHRdfSxbZS5zaG93SGVhZGVyP24oImRpdiIse3JlZjoicmlnaHRGaXhlZEhlYWRlcldyYXBwZXIiLHN0YXRpY0NsYXNzOiJlbC10YWJsZV9fZml4ZWQtaGVhZGVyLXdyYXBwZXIifSxbbigidGFibGUtaGVhZGVyIix7cmVmOiJyaWdodEZpeGVkVGFibGVIZWFkZXIiLHN0eWxlOnt3aWR0aDplLmJvZHlXaWR0aH0sYXR0cnM6e2ZpeGVkOiJyaWdodCIsYm9yZGVyOmUuYm9yZGVyLHN0b3JlOmUuc3RvcmV9fSldLDEpOmUuX2UoKSxuKCJkaXYiLHtyZWY6InJpZ2h0Rml4ZWRCb2R5V3JhcHBlciIsc3RhdGljQ2xhc3M6ImVsLXRhYmxlX19maXhlZC1ib2R5LXdyYXBwZXIiLHN0eWxlOlt7dG9wOmUubGF5b3V0LmhlYWRlckhlaWdodCsicHgifSxlLmZpeGVkQm9keUhlaWdodF19LFtuKCJ0YWJsZS1ib2R5Iix7c3R5bGU6e3dpZHRoOmUuYm9keVdpZHRofSxhdHRyczp7Zml4ZWQ6InJpZ2h0IixzdG9yZTplLnN0b3JlLHN0cmlwZTplLnN0cmlwZSwicm93LWNsYXNzLW5hbWUiOmUucm93Q2xhc3NOYW1lLCJyb3ctc3R5bGUiOmUucm93U3R5bGUsaGlnaGxpZ2h0OmUuaGlnaGxpZ2h0Q3VycmVudFJvd319KV0sMSksZS5zaG93U3VtbWFyeT9uKCJkaXYiLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTplLmRhdGEmJmUuZGF0YS5sZW5ndGg+MCxleHByZXNzaW9uOiJkYXRhICYmIGRhdGEubGVuZ3RoID4gMCJ9XSxyZWY6InJpZ2h0Rml4ZWRGb290ZXJXcmFwcGVyIixzdGF0aWNDbGFzczoiZWwtdGFibGVfX2ZpeGVkLWZvb3Rlci13cmFwcGVyIn0sW24oInRhYmxlLWZvb3RlciIse3N0eWxlOnt3aWR0aDplLmJvZHlXaWR0aH0sYXR0cnM6e2ZpeGVkOiJyaWdodCIsYm9yZGVyOmUuYm9yZGVyLCJzdW0tdGV4dCI6ZS5zdW1UZXh0fHxlLnQoImVsLnRhYmxlLnN1bVRleHQiKSwic3VtbWFyeS1tZXRob2QiOmUuc3VtbWFyeU1ldGhvZCxzdG9yZTplLnN0b3JlfX0pXSwxKTplLl9lKCldKTplLl9lKCksZS5yaWdodEZpeGVkQ29sdW1ucy5sZW5ndGg+MD9uKCJkaXYiLHtyZWY6InJpZ2h0Rml4ZWRQYXRjaCIsc3RhdGljQ2xhc3M6ImVsLXRhYmxlX19maXhlZC1yaWdodC1wYXRjaCIsc3R5bGU6e3dpZHRoOmUubGF5b3V0LnNjcm9sbFk/ZS5sYXlvdXQuZ3V0dGVyV2lkdGgrInB4IjoiMCIsaGVpZ2h0OmUubGF5b3V0LmhlYWRlckhlaWdodCsicHgifX0pOmUuX2UoKSxuKCJkaXYiLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTplLnJlc2l6ZVByb3h5VmlzaWJsZSxleHByZXNzaW9uOiJyZXNpemVQcm94eVZpc2libGUifV0scmVmOiJyZXNpemVQcm94eSIsc3RhdGljQ2xhc3M6ImVsLXRhYmxlX19jb2x1bW4tcmVzaXplLXByb3h5In0pXSl9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9LDE4OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oIjAydzEiKX0sMjpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJ5bERKIil9LDIyOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImFNd1ciKX0sMjU6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigib3JiUyIpfSwzOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oIjJrdkEiKX0sMzg6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiNlR3aCIpfSwzOTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMCx0LmRlZmF1bHQ9e2NyZWF0ZWQ6ZnVuY3Rpb24oKXt0aGlzLnRhYmxlTGF5b3V0LmFkZE9ic2VydmVyKHRoaXMpfSxkZXN0cm95ZWQ6ZnVuY3Rpb24oKXt0aGlzLnRhYmxlTGF5b3V0LnJlbW92ZU9ic2VydmVyKHRoaXMpfSxjb21wdXRlZDp7dGFibGVMYXlvdXQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmxheW91dDtpZighZSYmdGhpcy50YWJsZSYmKGU9dGhpcy50YWJsZS5sYXlvdXQpLCFlKXRocm93IG5ldyBFcnJvcigiQ2FuIG5vdCBmaW5kIHRhYmxlIGxheW91dC4iKTtyZXR1cm4gZX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLm9uQ29sdW1uc0NoYW5nZSh0aGlzLnRhYmxlTGF5b3V0KSx0aGlzLm9uU2Nyb2xsYWJsZUNoYW5nZSh0aGlzLnRhYmxlTGF5b3V0KX0sdXBkYXRlZDpmdW5jdGlvbigpe3RoaXMuX191cGRhdGVkX198fCh0aGlzLm9uQ29sdW1uc0NoYW5nZSh0aGlzLnRhYmxlTGF5b3V0KSx0aGlzLm9uU2Nyb2xsYWJsZUNoYW5nZSh0aGlzLnRhYmxlTGF5b3V0KSx0aGlzLl9fdXBkYXRlZF9fPSEwKX0sbWV0aG9kczp7b25Db2x1bW5zQ2hhbmdlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kZWwucXVlcnlTZWxlY3RvckFsbCgiY29sZ3JvdXAgPiBjb2wiKTtpZihlLmxlbmd0aCl7dmFyIHQ9e307dGhpcy50YWJsZUxheW91dC5nZXRGbGF0dGVuQ29sdW1ucygpLmZvckVhY2goZnVuY3Rpb24oZSl7dFtlLmlkXT1lfSk7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7bisrKXt2YXIgaT1lW25dLG89aS5nZXRBdHRyaWJ1dGUoIm5hbWUiKSxzPXRbb107cyYmaS5zZXRBdHRyaWJ1dGUoIndpZHRoIixzLnJlYWxXaWR0aHx8cy53aWR0aCl9fX0sb25TY3JvbGxhYmxlQ2hhbmdlOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLiRlbC5xdWVyeVNlbGVjdG9yQWxsKCJjb2xncm91cCA+IGNvbFtuYW1lPWd1dHRlcl0iKSxuPTAscj10Lmxlbmd0aDtuPHI7bisrKXt0W25dLnNldEF0dHJpYnV0ZSgid2lkdGgiLGUuc2Nyb2xsWT9lLmd1dHRlcldpZHRoOiIwIil9Zm9yKHZhciBpPXRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3JBbGwoInRoLmd1dHRlciIpLG89MCxzPWkubGVuZ3RoO288cztvKyspe3ZhciBhPWlbb107YS5zdHlsZS53aWR0aD1lLnNjcm9sbFk/ZS5ndXR0ZXJXaWR0aCsicHgiOiIwIixhLnN0eWxlLmRpc3BsYXk9ZS5zY3JvbGxZPyIiOiJub25lIn19fX19LDQ6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiNyt1VyIpfSw0MDpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJzM3VlIil9LDQ4OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwLHQuZ2V0Um93SWRlbnRpdHk9dC5nZXRDb2x1bW5CeUNlbGw9dC5nZXRDb2x1bW5CeUtleT10LmdldENvbHVtbkJ5SWQ9dC5vcmRlckJ5PXQuZ2V0Q2VsbD12b2lkIDA7dmFyIHI9ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmInN5bWJvbCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIGV9LGk9bigyKSxvPSh0LmdldENlbGw9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUudGFyZ2V0O3QmJiJIVE1MIiE9PXQudGFnTmFtZS50b1VwcGVyQ2FzZSgpOyl7aWYoIlREIj09PXQudGFnTmFtZS50b1VwcGVyQ2FzZSgpKXJldHVybiB0O3Q9dC5wYXJlbnROb2RlfXJldHVybiBudWxsfSxmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9PWUmJiJvYmplY3QiPT09KHZvaWQgMD09PWU/InVuZGVmaW5lZCI6cihlKSl9KSxzPSh0Lm9yZGVyQnk9ZnVuY3Rpb24oZSx0LG4scixzKXtpZighdCYmIXImJighc3x8QXJyYXkuaXNBcnJheShzKSYmIXMubGVuZ3RoKSlyZXR1cm4gZTtuPSJzdHJpbmciPT10eXBlb2Ygbj8iZGVzY2VuZGluZyI9PT1uPy0xOjE6biYmbjwwPy0xOjE7dmFyIGE9cj9udWxsOmZ1bmN0aW9uKG4scil7cmV0dXJuIHM/KEFycmF5LmlzQXJyYXkocyl8fChzPVtzXSkscy5tYXAoZnVuY3Rpb24odCl7cmV0dXJuInN0cmluZyI9PXR5cGVvZiB0PygwLGkuZ2V0VmFsdWVCeVBhdGgpKG4sdCk6dChuLHIsZSl9KSk6KCIka2V5IiE9PXQmJm8obikmJiIkdmFsdWUiaW4gbiYmKG49bi4kdmFsdWUpLFtvKG4pPygwLGkuZ2V0VmFsdWVCeVBhdGgpKG4sdCk6bl0pfTtyZXR1cm4gZS5tYXAoZnVuY3Rpb24oZSx0KXtyZXR1cm57dmFsdWU6ZSxpbmRleDp0LGtleTphP2EoZSx0KTpudWxsfX0pLnNvcnQoZnVuY3Rpb24oZSx0KXt2YXIgaT1mdW5jdGlvbihlLHQpe2lmKHIpcmV0dXJuIHIoZS52YWx1ZSx0LnZhbHVlKTtmb3IodmFyIG49MCxpPWUua2V5Lmxlbmd0aDtuPGk7bisrKXtpZihlLmtleVtuXTx0LmtleVtuXSlyZXR1cm4tMTtpZihlLmtleVtuXT50LmtleVtuXSlyZXR1cm4gMX1yZXR1cm4gMH0oZSx0KTtyZXR1cm4gaXx8KGk9ZS5pbmRleC10LmluZGV4KSxpKm59KS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUudmFsdWV9KX0sdC5nZXRDb2x1bW5CeUlkPWZ1bmN0aW9uKGUsdCl7dmFyIG49bnVsbDtyZXR1cm4gZS5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5pZD09PXQmJihuPWUpfSksbn0pO3QuZ2V0Q29sdW1uQnlLZXk9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49bnVsbCxyPTA7cjxlLmNvbHVtbnMubGVuZ3RoO3IrKyl7dmFyIGk9ZS5jb2x1bW5zW3JdO2lmKGkuY29sdW1uS2V5PT09dCl7bj1pO2JyZWFrfX1yZXR1cm4gbn0sdC5nZXRDb2x1bW5CeUNlbGw9ZnVuY3Rpb24oZSx0KXt2YXIgbj0odC5jbGFzc05hbWV8fCIiKS5tYXRjaCgvZWwtdGFibGVfW15cc10rL2dtKTtyZXR1cm4gbj9zKGUsblswXSk6bnVsbH0sdC5nZXRSb3dJZGVudGl0eT1mdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBFcnJvcigicm93IGlzIHJlcXVpcmVkIHdoZW4gZ2V0IHJvdyBpZGVudGl0eSIpO2lmKCJzdHJpbmciPT10eXBlb2YgdCl7aWYodC5pbmRleE9mKCIuIik8MClyZXR1cm4gZVt0XTtmb3IodmFyIG49dC5zcGxpdCgiLiIpLHI9ZSxpPTA7aTxuLmxlbmd0aDtpKyspcj1yW25baV1dO3JldHVybiByfWlmKCJmdW5jdGlvbiI9PXR5cGVvZiB0KXJldHVybiB0LmNhbGwobnVsbCxlKX19LDU6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigieSs3eCIpfSw3OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImZLeDMiKX0sODpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJhVzVsIil9LDk6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiam1hQyIpfX0pfSxNNmEwOmZ1bmN0aW9uKGUsdCl7fSxNVTVEOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCJSOU0yIik7ZS5leHBvcnRzPU9iamVjdCgieiIpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApP09iamVjdDpmdW5jdGlvbihlKXtyZXR1cm4iU3RyaW5nIj09cihlKT9lLnNwbGl0KCIiKTpPYmplY3QoZSl9fSxNZXpvOmZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihyKXtpZih0W3JdKXJldHVybiB0W3JdLmV4cG9ydHM7dmFyIGk9dFtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxyKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCwiYSIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9Ii9kaXN0LyIsbihuLnM9MjI3KX0oezA6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4scixpLG8pe3ZhciBzLGE9ZT1lfHx7fSxsPXR5cGVvZiBlLmRlZmF1bHQ7Im9iamVjdCIhPT1sJiYiZnVuY3Rpb24iIT09bHx8KHM9ZSxhPWUuZGVmYXVsdCk7dmFyIHUsYz0iZnVuY3Rpb24iPT10eXBlb2YgYT9hLm9wdGlvbnM6YTtpZih0JiYoYy5yZW5kZXI9dC5yZW5kZXIsYy5zdGF0aWNSZW5kZXJGbnM9dC5zdGF0aWNSZW5kZXJGbnMsYy5fY29tcGlsZWQ9ITApLG4mJihjLmZ1bmN0aW9uYWw9ITApLGkmJihjLl9zY29wZUlkPWkpLG8/KHU9ZnVuY3Rpb24oZSl7KGU9ZXx8dGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR8fHRoaXMucGFyZW50JiZ0aGlzLnBhcmVudC4kdm5vZGUmJnRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KXx8InVuZGVmaW5lZCI9PXR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9ffHwoZT1fX1ZVRV9TU1JfQ09OVEVYVF9fKSxyJiZyLmNhbGwodGhpcyxlKSxlJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cyYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG8pfSxjLl9zc3JSZWdpc3Rlcj11KTpyJiYodT1yKSx1KXt2YXIgZD1jLmZ1bmN0aW9uYWwsZj1kP2MucmVuZGVyOmMuYmVmb3JlQ3JlYXRlO2Q/KGMuX2luamVjdFN0eWxlcz11LGMucmVuZGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHUuY2FsbCh0KSxmKGUsdCl9KTpjLmJlZm9yZUNyZWF0ZT1mP1tdLmNvbmNhdChmLHUpOlt1XX1yZXR1cm57ZXNNb2R1bGU6cyxleHBvcnRzOmEsb3B0aW9uczpjfX19LDE6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiZlBsbCIpfSwyOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oInlsREoiKX0sMjI3OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigyMjgpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O28uZGVmYXVsdC5pbnN0YWxsPWZ1bmN0aW9uKGUpe2UuY29tcG9uZW50KG8uZGVmYXVsdC5uYW1lLG8uZGVmYXVsdCl9LHQuZGVmYXVsdD1vLmRlZmF1bHR9LDIyODpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKDIyOSksaT1uLm4ociksbz1uKDIzMSkscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDIyOTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj1hKG4oMjMwKSksaT1hKG4oMSkpLG89YShuKDkpKSxzPW4oMik7ZnVuY3Rpb24gYShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dC5kZWZhdWx0PXtuYW1lOiJFbEZvcm1JdGVtIixjb21wb25lbnROYW1lOiJFbEZvcm1JdGVtIixtaXhpbnM6W2kuZGVmYXVsdF0scHJvdmlkZTpmdW5jdGlvbigpe3JldHVybntlbEZvcm1JdGVtOnRoaXN9fSxpbmplY3Q6WyJlbEZvcm0iXSxwcm9wczp7bGFiZWw6U3RyaW5nLGxhYmVsV2lkdGg6U3RyaW5nLHByb3A6U3RyaW5nLHJlcXVpcmVkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDp2b2lkIDB9LHJ1bGVzOltPYmplY3QsQXJyYXldLGVycm9yOlN0cmluZyx2YWxpZGF0ZVN0YXR1czpTdHJpbmcsZm9yOlN0cmluZyxpbmxpbmVNZXNzYWdlOnt0eXBlOltTdHJpbmcsQm9vbGVhbl0sZGVmYXVsdDoiIn0sc2hvd01lc3NhZ2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxzaXplOlN0cmluZ30sd2F0Y2g6e2Vycm9yOntpbW1lZGlhdGU6ITAsaGFuZGxlcjpmdW5jdGlvbihlKXt0aGlzLnZhbGlkYXRlTWVzc2FnZT1lLHRoaXMudmFsaWRhdGVTdGF0ZT1lPyJlcnJvciI6IiJ9fSx2YWxpZGF0ZVN0YXR1czpmdW5jdGlvbihlKXt0aGlzLnZhbGlkYXRlU3RhdGU9ZX19LGNvbXB1dGVkOntsYWJlbEZvcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmZvcnx8dGhpcy5wcm9wfSxsYWJlbFN0eWxlOmZ1bmN0aW9uKCl7dmFyIGU9e307aWYoInRvcCI9PT10aGlzLmZvcm0ubGFiZWxQb3NpdGlvbilyZXR1cm4gZTt2YXIgdD10aGlzLmxhYmVsV2lkdGh8fHRoaXMuZm9ybS5sYWJlbFdpZHRoO3JldHVybiB0JiYoZS53aWR0aD10KSxlfSxjb250ZW50U3R5bGU6ZnVuY3Rpb24oKXt2YXIgZT17fSx0PXRoaXMubGFiZWw7aWYoInRvcCI9PT10aGlzLmZvcm0ubGFiZWxQb3NpdGlvbnx8dGhpcy5mb3JtLmlubGluZSlyZXR1cm4gZTtpZighdCYmIXRoaXMubGFiZWxXaWR0aCYmdGhpcy5pc05lc3RlZClyZXR1cm4gZTt2YXIgbj10aGlzLmxhYmVsV2lkdGh8fHRoaXMuZm9ybS5sYWJlbFdpZHRoO3JldHVybiBuJiYoZS5tYXJnaW5MZWZ0PW4pLGV9LGZvcm06ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy4kcGFyZW50LHQ9ZS4kb3B0aW9ucy5jb21wb25lbnROYW1lOyJFbEZvcm0iIT09dDspIkVsRm9ybUl0ZW0iPT09dCYmKHRoaXMuaXNOZXN0ZWQ9ITApLHQ9KGU9ZS4kcGFyZW50KS4kb3B0aW9ucy5jb21wb25lbnROYW1lO3JldHVybiBlfSxmaWVsZFZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5mb3JtLm1vZGVsO2lmKGUmJnRoaXMucHJvcCl7dmFyIHQ9dGhpcy5wcm9wO3JldHVybi0xIT09dC5pbmRleE9mKCI6IikmJih0PXQucmVwbGFjZSgvOi8sIi4iKSksKDAscy5nZXRQcm9wQnlQYXRoKShlLHQsITApLnZ9fSxpc1JlcXVpcmVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5nZXRSdWxlcygpLHQ9ITE7cmV0dXJuIGUmJmUubGVuZ3RoJiZlLmV2ZXJ5KGZ1bmN0aW9uKGUpe3JldHVybiFlLnJlcXVpcmVkfHwodD0hMCwhMSl9KSx0fSxfZm9ybVNpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbEZvcm0uc2l6ZX0sZWxGb3JtSXRlbVNpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaXplfHx0aGlzLl9mb3JtU2l6ZX0sc2l6ZUNsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWxGb3JtSXRlbVNpemV8fCh0aGlzLiRFTEVNRU5UfHx7fSkuc2l6ZX19LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57dmFsaWRhdGVTdGF0ZToiIix2YWxpZGF0ZU1lc3NhZ2U6IiIsdmFsaWRhdGVEaXNhYmxlZDohMSx2YWxpZGF0b3I6e30saXNOZXN0ZWQ6ITF9fSxtZXRob2RzOnt2YWxpZGF0ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnMubm9vcDt0aGlzLnZhbGlkYXRlRGlzYWJsZWQ9ITE7dmFyIGk9dGhpcy5nZXRGaWx0ZXJlZFJ1bGUoZSk7aWYoKCFpfHwwPT09aS5sZW5ndGgpJiZ2b2lkIDA9PT10aGlzLnJlcXVpcmVkKXJldHVybiBuKCksITA7dGhpcy52YWxpZGF0ZVN0YXRlPSJ2YWxpZGF0aW5nIjt2YXIgbz17fTtpJiZpLmxlbmd0aD4wJiZpLmZvckVhY2goZnVuY3Rpb24oZSl7ZGVsZXRlIGUudHJpZ2dlcn0pLG9bdGhpcy5wcm9wXT1pO3ZhciBhPW5ldyByLmRlZmF1bHQobyksbD17fTtsW3RoaXMucHJvcF09dGhpcy5maWVsZFZhbHVlLGEudmFsaWRhdGUobCx7Zmlyc3RGaWVsZHM6ITB9LGZ1bmN0aW9uKGUscil7dC52YWxpZGF0ZVN0YXRlPWU/ImVycm9yIjoic3VjY2VzcyIsdC52YWxpZGF0ZU1lc3NhZ2U9ZT9lWzBdLm1lc3NhZ2U6IiIsbih0LnZhbGlkYXRlTWVzc2FnZSxyKSx0LmVsRm9ybSYmdC5lbEZvcm0uJGVtaXQoInZhbGlkYXRlIix0LnByb3AsIWUsdC52YWxpZGF0ZU1lc3NhZ2V8fG51bGwpfSl9LGNsZWFyVmFsaWRhdGU6ZnVuY3Rpb24oKXt0aGlzLnZhbGlkYXRlU3RhdGU9IiIsdGhpcy52YWxpZGF0ZU1lc3NhZ2U9IiIsdGhpcy52YWxpZGF0ZURpc2FibGVkPSExfSxyZXNldEZpZWxkOmZ1bmN0aW9uKCl7dGhpcy52YWxpZGF0ZVN0YXRlPSIiLHRoaXMudmFsaWRhdGVNZXNzYWdlPSIiO3ZhciBlPXRoaXMuZm9ybS5tb2RlbCx0PXRoaXMuZmllbGRWYWx1ZSxuPXRoaXMucHJvcDstMSE9PW4uaW5kZXhPZigiOiIpJiYobj1uLnJlcGxhY2UoLzovLCIuIikpO3ZhciByPSgwLHMuZ2V0UHJvcEJ5UGF0aCkoZSxuLCEwKTt0aGlzLnZhbGlkYXRlRGlzYWJsZWQ9ITAsQXJyYXkuaXNBcnJheSh0KT9yLm9bci5rXT1bXS5jb25jYXQodGhpcy5pbml0aWFsVmFsdWUpOnIub1tyLmtdPXRoaXMuaW5pdGlhbFZhbHVlLHRoaXMuYnJvYWRjYXN0KCJFbFRpbWVTZWxlY3QiLCJmaWVsZFJlc2V0Iix0aGlzLmluaXRpYWxWYWx1ZSl9LGdldFJ1bGVzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5mb3JtLnJ1bGVzLHQ9dGhpcy5ydWxlcyxuPXZvaWQgMCE9PXRoaXMucmVxdWlyZWQ/e3JlcXVpcmVkOiEhdGhpcy5yZXF1aXJlZH06W10scj0oMCxzLmdldFByb3BCeVBhdGgpKGUsdGhpcy5wcm9wfHwiIik7cmV0dXJuIGU9ZT9yLm9bdGhpcy5wcm9wfHwiIl18fHIudjpbXSxbXS5jb25jYXQodHx8ZXx8W10pLmNvbmNhdChuKX0sZ2V0RmlsdGVyZWRSdWxlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmdldFJ1bGVzKCkuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiF0LnRyaWdnZXJ8fCIiPT09ZXx8KEFycmF5LmlzQXJyYXkodC50cmlnZ2VyKT90LnRyaWdnZXIuaW5kZXhPZihlKT4tMTp0LnRyaWdnZXI9PT1lKX0pLm1hcChmdW5jdGlvbihlKXtyZXR1cm4oMCxvLmRlZmF1bHQpKHt9LGUpfSl9LG9uRmllbGRCbHVyOmZ1bmN0aW9uKCl7dGhpcy52YWxpZGF0ZSgiYmx1ciIpfSxvbkZpZWxkQ2hhbmdlOmZ1bmN0aW9uKCl7dGhpcy52YWxpZGF0ZURpc2FibGVkP3RoaXMudmFsaWRhdGVEaXNhYmxlZD0hMTp0aGlzLnZhbGlkYXRlKCJjaGFuZ2UiKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXtpZih0aGlzLnByb3Ape3RoaXMuZGlzcGF0Y2goIkVsRm9ybSIsImVsLmZvcm0uYWRkRmllbGQiLFt0aGlzXSk7dmFyIGU9dGhpcy5maWVsZFZhbHVlO0FycmF5LmlzQXJyYXkoZSkmJihlPVtdLmNvbmNhdChlKSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsImluaXRpYWxWYWx1ZSIse3ZhbHVlOmV9KSwodGhpcy5nZXRSdWxlcygpLmxlbmd0aHx8dm9pZCAwIT09dGhpcy5yZXF1aXJlZCkmJih0aGlzLiRvbigiZWwuZm9ybS5ibHVyIix0aGlzLm9uRmllbGRCbHVyKSx0aGlzLiRvbigiZWwuZm9ybS5jaGFuZ2UiLHRoaXMub25GaWVsZENoYW5nZSkpfX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMuZGlzcGF0Y2goIkVsRm9ybSIsImVsLmZvcm0ucmVtb3ZlRmllbGQiLFt0aGlzXSl9fX0sMjMwOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImp3ZnYiKX0sMjMxOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLWZvcm0taXRlbSIsY2xhc3M6W3siZWwtZm9ybS1pdGVtLS1mZWVkYmFjayI6ZS5lbEZvcm0mJmUuZWxGb3JtLnN0YXR1c0ljb24sImlzLWVycm9yIjoiZXJyb3IiPT09ZS52YWxpZGF0ZVN0YXRlLCJpcy12YWxpZGF0aW5nIjoidmFsaWRhdGluZyI9PT1lLnZhbGlkYXRlU3RhdGUsImlzLXN1Y2Nlc3MiOiJzdWNjZXNzIj09PWUudmFsaWRhdGVTdGF0ZSwiaXMtcmVxdWlyZWQiOmUuaXNSZXF1aXJlZHx8ZS5yZXF1aXJlZCwiaXMtbm8tYXN0ZXJpc2siOmUuZWxGb3JtJiZlLmVsRm9ybS5oaWRlUmVxdWlyZWRBc3Rlcmlza30sZS5zaXplQ2xhc3M/ImVsLWZvcm0taXRlbS0tIitlLnNpemVDbGFzczoiIl19LFtlLmxhYmVsfHxlLiRzbG90cy5sYWJlbD9uKCJsYWJlbCIse3N0YXRpY0NsYXNzOiJlbC1mb3JtLWl0ZW1fX2xhYmVsIixzdHlsZTplLmxhYmVsU3R5bGUsYXR0cnM6e2ZvcjplLmxhYmVsRm9yfX0sW2UuX3QoImxhYmVsIixbZS5fdihlLl9zKGUubGFiZWwrZS5mb3JtLmxhYmVsU3VmZml4KSldKV0sMik6ZS5fZSgpLG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC1mb3JtLWl0ZW1fX2NvbnRlbnQiLHN0eWxlOmUuY29udGVudFN0eWxlfSxbZS5fdCgiZGVmYXVsdCIpLG4oInRyYW5zaXRpb24iLHthdHRyczp7bmFtZToiZWwtem9vbS1pbi10b3AifX0sWyJlcnJvciI9PT1lLnZhbGlkYXRlU3RhdGUmJmUuc2hvd01lc3NhZ2UmJmUuZm9ybS5zaG93TWVzc2FnZT9lLl90KCJlcnJvciIsW24oImRpdiIse3N0YXRpY0NsYXNzOiJlbC1mb3JtLWl0ZW1fX2Vycm9yIixjbGFzczp7ImVsLWZvcm0taXRlbV9fZXJyb3ItLWlubGluZSI6ImJvb2xlYW4iPT10eXBlb2YgZS5pbmxpbmVNZXNzYWdlP2UuaW5saW5lTWVzc2FnZTplLmVsRm9ybSYmZS5lbEZvcm0uaW5saW5lTWVzc2FnZXx8ITF9fSxbZS5fdigiXG4gICAgICAgICAgIitlLl9zKGUudmFsaWRhdGVNZXNzYWdlKSsiXG4gICAgICAgICIpXSldLHtlcnJvcjplLnZhbGlkYXRlTWVzc2FnZX0pOmUuX2UoKV0sMildLDIpXSl9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9LDk6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiam1hQyIpfX0pfSxNaHl4OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCIvYlFwIiksaT1uKCJkU3pkIikoIml0ZXJhdG9yIiksbz1BcnJheS5wcm90b3R5cGU7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDAhPT1lJiYoci5BcnJheT09PWV8fG9baV09PT1lKX19LE1tTXc6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oIkVxakkiKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZighcihlKSlyZXR1cm4gZTt2YXIgbixpO2lmKHQmJiJmdW5jdGlvbiI9PXR5cGVvZihuPWUudG9TdHJpbmcpJiYhcihpPW4uY2FsbChlKSkpcmV0dXJuIGk7aWYoImZ1bmN0aW9uIj09dHlwZW9mKG49ZS52YWx1ZU9mKSYmIXIoaT1uLmNhbGwoZSkpKXJldHVybiBpO2lmKCF0JiYiZnVuY3Rpb24iPT10eXBlb2Yobj1lLnRvU3RyaW5nKSYmIXIoaT1uLmNhbGwoZSkpKXJldHVybiBpO3Rocm93IFR5cGVFcnJvcigiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlIil9fSxOTW9mOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHIsaTsiZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7dm9pZCAwPT09KGk9ImZ1bmN0aW9uIj09dHlwZW9mKHI9ZnVuY3Rpb24oKXt2YXIgZT13aW5kb3csdD17cGxhY2VtZW50OiJib3R0b20iLGdwdUFjY2VsZXJhdGlvbjohMCxvZmZzZXQ6MCxib3VuZGFyaWVzRWxlbWVudDoidmlld3BvcnQiLGJvdW5kYXJpZXNQYWRkaW5nOjUscHJldmVudE92ZXJmbG93T3JkZXI6WyJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iXSxmbGlwQmVoYXZpb3I6ImZsaXAiLGFycm93RWxlbWVudDoiW3gtYXJyb3ddIixhcnJvd09mZnNldDowLG1vZGlmaWVyczpbInNoaWZ0Iiwib2Zmc2V0IiwicHJldmVudE92ZXJmbG93Iiwia2VlcFRvZ2V0aGVyIiwiYXJyb3ciLCJmbGlwIiwiYXBwbHlTdHlsZSJdLG1vZGlmaWVyc0lnbm9yZWQ6W10sZm9yY2VBYnNvbHV0ZTohMX07ZnVuY3Rpb24gbihlLG4scil7dGhpcy5fcmVmZXJlbmNlPWUuanF1ZXJ5P2VbMF06ZSx0aGlzLnN0YXRlPXt9O3ZhciBpPXZvaWQgMD09PW58fG51bGw9PT1uLG89biYmIltvYmplY3QgT2JqZWN0XSI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobik7cmV0dXJuIHRoaXMuX3BvcHBlcj1pfHxvP3RoaXMucGFyc2Uobz9uOnt9KTpuLmpxdWVyeT9uWzBdOm4sdGhpcy5fb3B0aW9ucz1PYmplY3QuYXNzaWduKHt9LHQsciksdGhpcy5fb3B0aW9ucy5tb2RpZmllcnM9dGhpcy5fb3B0aW9ucy5tb2RpZmllcnMubWFwKGZ1bmN0aW9uKGUpe2lmKC0xPT09dGhpcy5fb3B0aW9ucy5tb2RpZmllcnNJZ25vcmVkLmluZGV4T2YoZSkpcmV0dXJuImFwcGx5U3R5bGUiPT09ZSYmdGhpcy5fcG9wcGVyLnNldEF0dHJpYnV0ZSgieC1wbGFjZW1lbnQiLHRoaXMuX29wdGlvbnMucGxhY2VtZW50KSx0aGlzLm1vZGlmaWVyc1tlXXx8ZX0uYmluZCh0aGlzKSksdGhpcy5zdGF0ZS5wb3NpdGlvbj10aGlzLl9nZXRQb3NpdGlvbih0aGlzLl9wb3BwZXIsdGhpcy5fcmVmZXJlbmNlKSxjKHRoaXMuX3BvcHBlcix7cG9zaXRpb246dGhpcy5zdGF0ZS5wb3NpdGlvbix0b3A6MH0pLHRoaXMudXBkYXRlKCksdGhpcy5fc2V0dXBFdmVudExpc3RlbmVycygpLHRoaXN9ZnVuY3Rpb24gcih0KXt2YXIgbj10LnN0eWxlLmRpc3BsYXkscj10LnN0eWxlLnZpc2liaWxpdHk7dC5zdHlsZS5kaXNwbGF5PSJibG9jayIsdC5zdHlsZS52aXNpYmlsaXR5PSJoaWRkZW4iO3Qub2Zmc2V0V2lkdGg7dmFyIGk9ZS5nZXRDb21wdXRlZFN0eWxlKHQpLG89cGFyc2VGbG9hdChpLm1hcmdpblRvcCkrcGFyc2VGbG9hdChpLm1hcmdpbkJvdHRvbSkscz1wYXJzZUZsb2F0KGkubWFyZ2luTGVmdCkrcGFyc2VGbG9hdChpLm1hcmdpblJpZ2h0KSxhPXt3aWR0aDp0Lm9mZnNldFdpZHRoK3MsaGVpZ2h0OnQub2Zmc2V0SGVpZ2h0K299O3JldHVybiB0LnN0eWxlLmRpc3BsYXk9bix0LnN0eWxlLnZpc2liaWxpdHk9cixhfWZ1bmN0aW9uIGkoZSl7dmFyIHQ9e2xlZnQ6InJpZ2h0IixyaWdodDoibGVmdCIsYm90dG9tOiJ0b3AiLHRvcDoiYm90dG9tIn07cmV0dXJuIGUucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19KX1mdW5jdGlvbiBvKGUpe3ZhciB0PU9iamVjdC5hc3NpZ24oe30sZSk7cmV0dXJuIHQucmlnaHQ9dC5sZWZ0K3Qud2lkdGgsdC5ib3R0b209dC50b3ArdC5oZWlnaHQsdH1mdW5jdGlvbiBzKGUsdCl7dmFyIG4scj0wO2ZvcihuIGluIGUpe2lmKGVbbl09PT10KXJldHVybiByO3IrK31yZXR1cm4gbnVsbH1mdW5jdGlvbiBhKHQsbil7cmV0dXJuIGUuZ2V0Q29tcHV0ZWRTdHlsZSh0LG51bGwpW25dfWZ1bmN0aW9uIGwodCl7dmFyIG49dC5vZmZzZXRQYXJlbnQ7cmV0dXJuIG4hPT1lLmRvY3VtZW50LmJvZHkmJm4/bjplLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudH1mdW5jdGlvbiB1KHQpe3ZhciBuPXQucGFyZW50Tm9kZTtyZXR1cm4gbj9uPT09ZS5kb2N1bWVudD9lLmRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wfHxlLmRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdD9lLmRvY3VtZW50LmJvZHk6ZS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ6LTEhPT1bInNjcm9sbCIsImF1dG8iXS5pbmRleE9mKGEobiwib3ZlcmZsb3ciKSl8fC0xIT09WyJzY3JvbGwiLCJhdXRvIl0uaW5kZXhPZihhKG4sIm92ZXJmbG93LXgiKSl8fC0xIT09WyJzY3JvbGwiLCJhdXRvIl0uaW5kZXhPZihhKG4sIm92ZXJmbG93LXkiKSk/bjp1KHQucGFyZW50Tm9kZSk6dH1mdW5jdGlvbiBjKGUsdCl7T2JqZWN0LmtleXModCkuZm9yRWFjaChmdW5jdGlvbihuKXt2YXIgcixpPSIiOy0xIT09WyJ3aWR0aCIsImhlaWdodCIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCJdLmluZGV4T2YobikmJigiIiE9PShyPXRbbl0pJiYhaXNOYU4ocGFyc2VGbG9hdChyKSkmJmlzRmluaXRlKHIpKSYmKGk9InB4IiksZS5zdHlsZVtuXT10W25dK2l9KX1mdW5jdGlvbiBkKGUpe3ZhciB0PXt3aWR0aDplLm9mZnNldFdpZHRoLGhlaWdodDplLm9mZnNldEhlaWdodCxsZWZ0OmUub2Zmc2V0TGVmdCx0b3A6ZS5vZmZzZXRUb3B9O3JldHVybiB0LnJpZ2h0PXQubGVmdCt0LndpZHRoLHQuYm90dG9tPXQudG9wK3QuaGVpZ2h0LHR9ZnVuY3Rpb24gZihlKXt2YXIgdD1lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG49LTEhPW5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZigiTVNJRSIpJiYiSFRNTCI9PT1lLnRhZ05hbWU/LWUuc2Nyb2xsVG9wOnQudG9wO3JldHVybntsZWZ0OnQubGVmdCx0b3A6bixyaWdodDp0LnJpZ2h0LGJvdHRvbTp0LmJvdHRvbSx3aWR0aDp0LnJpZ2h0LXQubGVmdCxoZWlnaHQ6dC5ib3R0b20tbn19ZnVuY3Rpb24gaCh0KXtmb3IodmFyIG49WyIiLCJtcyIsIndlYmtpdCIsIm1veiIsIm8iXSxyPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBpPW5bcl0/bltyXSt0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSk6dDtpZih2b2lkIDAhPT1lLmRvY3VtZW50LmJvZHkuc3R5bGVbaV0pcmV0dXJuIGl9cmV0dXJuIG51bGx9cmV0dXJuIG4ucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcG9wcGVyLnJlbW92ZUF0dHJpYnV0ZSgieC1wbGFjZW1lbnQiKSx0aGlzLl9wb3BwZXIuc3R5bGUubGVmdD0iIix0aGlzLl9wb3BwZXIuc3R5bGUucG9zaXRpb249IiIsdGhpcy5fcG9wcGVyLnN0eWxlLnRvcD0iIix0aGlzLl9wb3BwZXIuc3R5bGVbaCgidHJhbnNmb3JtIildPSIiLHRoaXMuX3JlbW92ZUV2ZW50TGlzdGVuZXJzKCksdGhpcy5fb3B0aW9ucy5yZW1vdmVPbkRlc3Ryb3kmJnRoaXMuX3BvcHBlci5yZW1vdmUoKSx0aGlzfSxuLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgZT17aW5zdGFuY2U6dGhpcyxzdHlsZXM6e319O2UucGxhY2VtZW50PXRoaXMuX29wdGlvbnMucGxhY2VtZW50LGUuX29yaWdpbmFsUGxhY2VtZW50PXRoaXMuX29wdGlvbnMucGxhY2VtZW50LGUub2Zmc2V0cz10aGlzLl9nZXRPZmZzZXRzKHRoaXMuX3BvcHBlcix0aGlzLl9yZWZlcmVuY2UsZS5wbGFjZW1lbnQpLGUuYm91bmRhcmllcz10aGlzLl9nZXRCb3VuZGFyaWVzKGUsdGhpcy5fb3B0aW9ucy5ib3VuZGFyaWVzUGFkZGluZyx0aGlzLl9vcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50KSxlPXRoaXMucnVuTW9kaWZpZXJzKGUsdGhpcy5fb3B0aW9ucy5tb2RpZmllcnMpLCJmdW5jdGlvbiI9PXR5cGVvZiB0aGlzLnN0YXRlLnVwZGF0ZUNhbGxiYWNrJiZ0aGlzLnN0YXRlLnVwZGF0ZUNhbGxiYWNrKGUpfSxuLnByb3RvdHlwZS5vbkNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gZSh0aGlzKSx0aGlzfSxuLnByb3RvdHlwZS5vblVwZGF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5zdGF0ZS51cGRhdGVDYWxsYmFjaz1lLHRoaXN9LG4ucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKHQpe3ZhciBuPXt0YWdOYW1lOiJkaXYiLGNsYXNzTmFtZXM6WyJwb3BwZXIiXSxhdHRyaWJ1dGVzOltdLHBhcmVudDplLmRvY3VtZW50LmJvZHksY29udGVudDoiIixjb250ZW50VHlwZToidGV4dCIsYXJyb3dUYWdOYW1lOiJkaXYiLGFycm93Q2xhc3NOYW1lczpbInBvcHBlcl9fYXJyb3ciXSxhcnJvd0F0dHJpYnV0ZXM6WyJ4LWFycm93Il19O3Q9T2JqZWN0LmFzc2lnbih7fSxuLHQpO3ZhciByPWUuZG9jdW1lbnQsaT1yLmNyZWF0ZUVsZW1lbnQodC50YWdOYW1lKTtpZihhKGksdC5jbGFzc05hbWVzKSxsKGksdC5hdHRyaWJ1dGVzKSwibm9kZSI9PT10LmNvbnRlbnRUeXBlP2kuYXBwZW5kQ2hpbGQodC5jb250ZW50LmpxdWVyeT90LmNvbnRlbnRbMF06dC5jb250ZW50KToiaHRtbCI9PT10LmNvbnRlbnRUeXBlP2kuaW5uZXJIVE1MPXQuY29udGVudDppLnRleHRDb250ZW50PXQuY29udGVudCx0LmFycm93VGFnTmFtZSl7dmFyIG89ci5jcmVhdGVFbGVtZW50KHQuYXJyb3dUYWdOYW1lKTthKG8sdC5hcnJvd0NsYXNzTmFtZXMpLGwobyx0LmFycm93QXR0cmlidXRlcyksaS5hcHBlbmRDaGlsZChvKX12YXIgcz10LnBhcmVudC5qcXVlcnk/dC5wYXJlbnRbMF06dC5wYXJlbnQ7aWYoInN0cmluZyI9PXR5cGVvZiBzKXtpZigocz1yLnF1ZXJ5U2VsZWN0b3JBbGwodC5wYXJlbnQpKS5sZW5ndGg+MSYmY29uc29sZS53YXJuKCJXQVJOSU5HOiB0aGUgZ2l2ZW4gYHBhcmVudGAgcXVlcnkoIit0LnBhcmVudCsiKSBtYXRjaGVkIG1vcmUgdGhhbiBvbmUgZWxlbWVudCwgdGhlIGZpcnN0IG9uZSB3aWxsIGJlIHVzZWQiKSwwPT09cy5sZW5ndGgpdGhyb3ciRVJST1I6IHRoZSBnaXZlbiBgcGFyZW50YCBkb2Vzbid0IGV4aXN0cyEiO3M9c1swXX1yZXR1cm4gcy5sZW5ndGg+MSYmcyBpbnN0YW5jZW9mIEVsZW1lbnQ9PSExJiYoY29uc29sZS53YXJuKCJXQVJOSU5HOiB5b3UgaGF2ZSBwYXNzZWQgYXMgcGFyZW50IGEgbGlzdCBvZiBlbGVtZW50cywgdGhlIGZpcnN0IG9uZSB3aWxsIGJlIHVzZWQiKSxzPXNbMF0pLHMuYXBwZW5kQ2hpbGQoaSksaTtmdW5jdGlvbiBhKGUsdCl7dC5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UuY2xhc3NMaXN0LmFkZCh0KX0pfWZ1bmN0aW9uIGwoZSx0KXt0LmZvckVhY2goZnVuY3Rpb24odCl7ZS5zZXRBdHRyaWJ1dGUodC5zcGxpdCgiOiIpWzBdLHQuc3BsaXQoIjoiKVsxXXx8IiIpfSl9fSxuLnByb3RvdHlwZS5fZ2V0UG9zaXRpb249ZnVuY3Rpb24odCxuKXtsKG4pO3JldHVybiB0aGlzLl9vcHRpb25zLmZvcmNlQWJzb2x1dGU/ImFic29sdXRlIjpmdW5jdGlvbiB0KG4pe2lmKG49PT1lLmRvY3VtZW50LmJvZHkpcmV0dXJuITE7aWYoImZpeGVkIj09PWEobiwicG9zaXRpb24iKSlyZXR1cm4hMDtyZXR1cm4gbi5wYXJlbnROb2RlP3Qobi5wYXJlbnROb2RlKTpufShuKT8iZml4ZWQiOiJhYnNvbHV0ZSJ9LG4ucHJvdG90eXBlLl9nZXRPZmZzZXRzPWZ1bmN0aW9uKGUsdCxuKXtuPW4uc3BsaXQoIi0iKVswXTt2YXIgaT17fTtpLnBvc2l0aW9uPXRoaXMuc3RhdGUucG9zaXRpb247dmFyIG89ImZpeGVkIj09PWkucG9zaXRpb24scz1mdW5jdGlvbihlLHQsbil7dmFyIHI9ZihlKSxpPWYodCk7aWYobil7dmFyIG89dSh0KTtpLnRvcCs9by5zY3JvbGxUb3AsaS5ib3R0b20rPW8uc2Nyb2xsVG9wLGkubGVmdCs9by5zY3JvbGxMZWZ0LGkucmlnaHQrPW8uc2Nyb2xsTGVmdH1yZXR1cm57dG9wOnIudG9wLWkudG9wLGxlZnQ6ci5sZWZ0LWkubGVmdCxib3R0b206ci50b3AtaS50b3Arci5oZWlnaHQscmlnaHQ6ci5sZWZ0LWkubGVmdCtyLndpZHRoLHdpZHRoOnIud2lkdGgsaGVpZ2h0OnIuaGVpZ2h0fX0odCxsKGUpLG8pLGE9cihlKTtyZXR1cm4tMSE9PVsicmlnaHQiLCJsZWZ0Il0uaW5kZXhPZihuKT8oaS50b3A9cy50b3Arcy5oZWlnaHQvMi1hLmhlaWdodC8yLGkubGVmdD0ibGVmdCI9PT1uP3MubGVmdC1hLndpZHRoOnMucmlnaHQpOihpLmxlZnQ9cy5sZWZ0K3Mud2lkdGgvMi1hLndpZHRoLzIsaS50b3A9InRvcCI9PT1uP3MudG9wLWEuaGVpZ2h0OnMuYm90dG9tKSxpLndpZHRoPWEud2lkdGgsaS5oZWlnaHQ9YS5oZWlnaHQse3BvcHBlcjppLHJlZmVyZW5jZTpzfX0sbi5wcm90b3R5cGUuX3NldHVwRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXtpZih0aGlzLnN0YXRlLnVwZGF0ZUJvdW5kPXRoaXMudXBkYXRlLmJpbmQodGhpcyksZS5hZGRFdmVudExpc3RlbmVyKCJyZXNpemUiLHRoaXMuc3RhdGUudXBkYXRlQm91bmQpLCJ3aW5kb3ciIT09dGhpcy5fb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCl7dmFyIHQ9dSh0aGlzLl9yZWZlcmVuY2UpO3QhPT1lLmRvY3VtZW50LmJvZHkmJnQhPT1lLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudHx8KHQ9ZSksdC5hZGRFdmVudExpc3RlbmVyKCJzY3JvbGwiLHRoaXMuc3RhdGUudXBkYXRlQm91bmQpLHRoaXMuc3RhdGUuc2Nyb2xsVGFyZ2V0PXR9fSxuLnByb3RvdHlwZS5fcmVtb3ZlRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXIoInJlc2l6ZSIsdGhpcy5zdGF0ZS51cGRhdGVCb3VuZCksIndpbmRvdyIhPT10aGlzLl9vcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50JiZ0aGlzLnN0YXRlLnNjcm9sbFRhcmdldCYmKHRoaXMuc3RhdGUuc2Nyb2xsVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoInNjcm9sbCIsdGhpcy5zdGF0ZS51cGRhdGVCb3VuZCksdGhpcy5zdGF0ZS5zY3JvbGxUYXJnZXQ9bnVsbCksdGhpcy5zdGF0ZS51cGRhdGVCb3VuZD1udWxsfSxuLnByb3RvdHlwZS5fZ2V0Qm91bmRhcmllcz1mdW5jdGlvbih0LG4scil7dmFyIGksbyxzPXt9O2lmKCJ3aW5kb3ciPT09cil7dmFyIGE9ZS5kb2N1bWVudC5ib2R5LGM9ZS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7aT1NYXRoLm1heChhLnNjcm9sbEhlaWdodCxhLm9mZnNldEhlaWdodCxjLmNsaWVudEhlaWdodCxjLnNjcm9sbEhlaWdodCxjLm9mZnNldEhlaWdodCkscz17dG9wOjAscmlnaHQ6TWF0aC5tYXgoYS5zY3JvbGxXaWR0aCxhLm9mZnNldFdpZHRoLGMuY2xpZW50V2lkdGgsYy5zY3JvbGxXaWR0aCxjLm9mZnNldFdpZHRoKSxib3R0b206aSxsZWZ0OjB9fWVsc2UgaWYoInZpZXdwb3J0Ij09PXIpe3ZhciBmPWwodGhpcy5fcG9wcGVyKSxoPXUodGhpcy5fcG9wcGVyKSxwPWQoZiksbT0iZml4ZWQiPT09dC5vZmZzZXRzLnBvcHBlci5wb3NpdGlvbj8wOihvPWgpPT1kb2N1bWVudC5ib2R5P01hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AsZG9jdW1lbnQuYm9keS5zY3JvbGxUb3ApOm8uc2Nyb2xsVG9wLHY9ImZpeGVkIj09PXQub2Zmc2V0cy5wb3BwZXIucG9zaXRpb24/MDpmdW5jdGlvbihlKXtyZXR1cm4gZT09ZG9jdW1lbnQuYm9keT9NYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCxkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQpOmUuc2Nyb2xsTGVmdH0oaCk7cz17dG9wOjAtKHAudG9wLW0pLHJpZ2h0OmUuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLShwLmxlZnQtdiksYm90dG9tOmUuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodC0ocC50b3AtbSksbGVmdDowLShwLmxlZnQtdil9fWVsc2Ugcz1sKHRoaXMuX3BvcHBlcik9PT1yP3t0b3A6MCxsZWZ0OjAscmlnaHQ6ci5jbGllbnRXaWR0aCxib3R0b206ci5jbGllbnRIZWlnaHR9OmQocik7cmV0dXJuIHMubGVmdCs9bixzLnJpZ2h0LT1uLHMudG9wPXMudG9wK24scy5ib3R0b209cy5ib3R0b20tbixzfSxuLnByb3RvdHlwZS5ydW5Nb2RpZmllcnM9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXQuc2xpY2UoKTtyZXR1cm4gdm9pZCAwIT09biYmKHI9dGhpcy5fb3B0aW9ucy5tb2RpZmllcnMuc2xpY2UoMCxzKHRoaXMuX29wdGlvbnMubW9kaWZpZXJzLG4pKSksci5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBuOyhuPXQpJiYiW29iamVjdCBGdW5jdGlvbl0iPT09e30udG9TdHJpbmcuY2FsbChuKSYmKGU9dC5jYWxsKHRoaXMsZSkpfS5iaW5kKHRoaXMpKSxlfSxuLnByb3RvdHlwZS5pc01vZGlmaWVyUmVxdWlyZWQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj1zKHRoaXMuX29wdGlvbnMubW9kaWZpZXJzLGUpO3JldHVybiEhdGhpcy5fb3B0aW9ucy5tb2RpZmllcnMuc2xpY2UoMCxuKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT10fSkubGVuZ3RofSxuLnByb3RvdHlwZS5tb2RpZmllcnM9e30sbi5wcm90b3R5cGUubW9kaWZpZXJzLmFwcGx5U3R5bGU9ZnVuY3Rpb24oZSl7dmFyIHQsbj17cG9zaXRpb246ZS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvbn0scj1NYXRoLnJvdW5kKGUub2Zmc2V0cy5wb3BwZXIubGVmdCksaT1NYXRoLnJvdW5kKGUub2Zmc2V0cy5wb3BwZXIudG9wKTtyZXR1cm4gdGhpcy5fb3B0aW9ucy5ncHVBY2NlbGVyYXRpb24mJih0PWgoInRyYW5zZm9ybSIpKT8oblt0XT0idHJhbnNsYXRlM2QoIityKyJweCwgIitpKyJweCwgMCkiLG4udG9wPTAsbi5sZWZ0PTApOihuLmxlZnQ9cixuLnRvcD1pKSxPYmplY3QuYXNzaWduKG4sZS5zdHlsZXMpLGModGhpcy5fcG9wcGVyLG4pLHRoaXMuX3BvcHBlci5zZXRBdHRyaWJ1dGUoIngtcGxhY2VtZW50IixlLnBsYWNlbWVudCksdGhpcy5pc01vZGlmaWVyUmVxdWlyZWQodGhpcy5tb2RpZmllcnMuYXBwbHlTdHlsZSx0aGlzLm1vZGlmaWVycy5hcnJvdykmJmUub2Zmc2V0cy5hcnJvdyYmYyhlLmFycm93RWxlbWVudCxlLm9mZnNldHMuYXJyb3cpLGV9LG4ucHJvdG90eXBlLm1vZGlmaWVycy5zaGlmdD1mdW5jdGlvbihlKXt2YXIgdD1lLnBsYWNlbWVudCxuPXQuc3BsaXQoIi0iKVswXSxyPXQuc3BsaXQoIi0iKVsxXTtpZihyKXt2YXIgaT1lLm9mZnNldHMucmVmZXJlbmNlLHM9byhlLm9mZnNldHMucG9wcGVyKSxhPXt5OntzdGFydDp7dG9wOmkudG9wfSxlbmQ6e3RvcDppLnRvcCtpLmhlaWdodC1zLmhlaWdodH19LHg6e3N0YXJ0OntsZWZ0OmkubGVmdH0sZW5kOntsZWZ0OmkubGVmdCtpLndpZHRoLXMud2lkdGh9fX0sbD0tMSE9PVsiYm90dG9tIiwidG9wIl0uaW5kZXhPZihuKT8ieCI6InkiO2Uub2Zmc2V0cy5wb3BwZXI9T2JqZWN0LmFzc2lnbihzLGFbbF1bcl0pfXJldHVybiBlfSxuLnByb3RvdHlwZS5tb2RpZmllcnMucHJldmVudE92ZXJmbG93PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX29wdGlvbnMucHJldmVudE92ZXJmbG93T3JkZXIsbj1vKGUub2Zmc2V0cy5wb3BwZXIpLHI9e2xlZnQ6ZnVuY3Rpb24oKXt2YXIgdD1uLmxlZnQ7cmV0dXJuIG4ubGVmdDxlLmJvdW5kYXJpZXMubGVmdCYmKHQ9TWF0aC5tYXgobi5sZWZ0LGUuYm91bmRhcmllcy5sZWZ0KSkse2xlZnQ6dH19LHJpZ2h0OmZ1bmN0aW9uKCl7dmFyIHQ9bi5sZWZ0O3JldHVybiBuLnJpZ2h0PmUuYm91bmRhcmllcy5yaWdodCYmKHQ9TWF0aC5taW4obi5sZWZ0LGUuYm91bmRhcmllcy5yaWdodC1uLndpZHRoKSkse2xlZnQ6dH19LHRvcDpmdW5jdGlvbigpe3ZhciB0PW4udG9wO3JldHVybiBuLnRvcDxlLmJvdW5kYXJpZXMudG9wJiYodD1NYXRoLm1heChuLnRvcCxlLmJvdW5kYXJpZXMudG9wKSkse3RvcDp0fX0sYm90dG9tOmZ1bmN0aW9uKCl7dmFyIHQ9bi50b3A7cmV0dXJuIG4uYm90dG9tPmUuYm91bmRhcmllcy5ib3R0b20mJih0PU1hdGgubWluKG4udG9wLGUuYm91bmRhcmllcy5ib3R0b20tbi5oZWlnaHQpKSx7dG9wOnR9fX07cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbih0KXtlLm9mZnNldHMucG9wcGVyPU9iamVjdC5hc3NpZ24obixyW3RdKCkpfSksZX0sbi5wcm90b3R5cGUubW9kaWZpZXJzLmtlZXBUb2dldGhlcj1mdW5jdGlvbihlKXt2YXIgdD1vKGUub2Zmc2V0cy5wb3BwZXIpLG49ZS5vZmZzZXRzLnJlZmVyZW5jZSxyPU1hdGguZmxvb3I7cmV0dXJuIHQucmlnaHQ8cihuLmxlZnQpJiYoZS5vZmZzZXRzLnBvcHBlci5sZWZ0PXIobi5sZWZ0KS10LndpZHRoKSx0LmxlZnQ+cihuLnJpZ2h0KSYmKGUub2Zmc2V0cy5wb3BwZXIubGVmdD1yKG4ucmlnaHQpKSx0LmJvdHRvbTxyKG4udG9wKSYmKGUub2Zmc2V0cy5wb3BwZXIudG9wPXIobi50b3ApLXQuaGVpZ2h0KSx0LnRvcD5yKG4uYm90dG9tKSYmKGUub2Zmc2V0cy5wb3BwZXIudG9wPXIobi5ib3R0b20pKSxlfSxuLnByb3RvdHlwZS5tb2RpZmllcnMuZmxpcD1mdW5jdGlvbihlKXtpZighdGhpcy5pc01vZGlmaWVyUmVxdWlyZWQodGhpcy5tb2RpZmllcnMuZmxpcCx0aGlzLm1vZGlmaWVycy5wcmV2ZW50T3ZlcmZsb3cpKXJldHVybiBjb25zb2xlLndhcm4oIldBUk5JTkc6IHByZXZlbnRPdmVyZmxvdyBtb2RpZmllciBpcyByZXF1aXJlZCBieSBmbGlwIG1vZGlmaWVyIGluIG9yZGVyIHRvIHdvcmssIGJlIHN1cmUgdG8gaW5jbHVkZSBpdCBiZWZvcmUgZmxpcCEiKSxlO2lmKGUuZmxpcHBlZCYmZS5wbGFjZW1lbnQ9PT1lLl9vcmlnaW5hbFBsYWNlbWVudClyZXR1cm4gZTt2YXIgdD1lLnBsYWNlbWVudC5zcGxpdCgiLSIpWzBdLG49aSh0KSxyPWUucGxhY2VtZW50LnNwbGl0KCItIilbMV18fCIiLHM9W107cmV0dXJuKHM9ImZsaXAiPT09dGhpcy5fb3B0aW9ucy5mbGlwQmVoYXZpb3I/W3Qsbl06dGhpcy5fb3B0aW9ucy5mbGlwQmVoYXZpb3IpLmZvckVhY2goZnVuY3Rpb24oYSxsKXtpZih0PT09YSYmcy5sZW5ndGghPT1sKzEpe3Q9ZS5wbGFjZW1lbnQuc3BsaXQoIi0iKVswXSxuPWkodCk7dmFyIHU9byhlLm9mZnNldHMucG9wcGVyKSxjPS0xIT09WyJyaWdodCIsImJvdHRvbSJdLmluZGV4T2YodCk7KGMmJk1hdGguZmxvb3IoZS5vZmZzZXRzLnJlZmVyZW5jZVt0XSk+TWF0aC5mbG9vcih1W25dKXx8IWMmJk1hdGguZmxvb3IoZS5vZmZzZXRzLnJlZmVyZW5jZVt0XSk8TWF0aC5mbG9vcih1W25dKSkmJihlLmZsaXBwZWQ9ITAsZS5wbGFjZW1lbnQ9c1tsKzFdLHImJihlLnBsYWNlbWVudCs9Ii0iK3IpLGUub2Zmc2V0cy5wb3BwZXI9dGhpcy5fZ2V0T2Zmc2V0cyh0aGlzLl9wb3BwZXIsdGhpcy5fcmVmZXJlbmNlLGUucGxhY2VtZW50KS5wb3BwZXIsZT10aGlzLnJ1bk1vZGlmaWVycyhlLHRoaXMuX29wdGlvbnMubW9kaWZpZXJzLHRoaXMuX2ZsaXApKX19LmJpbmQodGhpcykpLGV9LG4ucHJvdG90eXBlLm1vZGlmaWVycy5vZmZzZXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fb3B0aW9ucy5vZmZzZXQsbj1lLm9mZnNldHMucG9wcGVyO3JldHVybi0xIT09ZS5wbGFjZW1lbnQuaW5kZXhPZigibGVmdCIpP24udG9wLT10Oi0xIT09ZS5wbGFjZW1lbnQuaW5kZXhPZigicmlnaHQiKT9uLnRvcCs9dDotMSE9PWUucGxhY2VtZW50LmluZGV4T2YoInRvcCIpP24ubGVmdC09dDotMSE9PWUucGxhY2VtZW50LmluZGV4T2YoImJvdHRvbSIpJiYobi5sZWZ0Kz10KSxlfSxuLnByb3RvdHlwZS5tb2RpZmllcnMuYXJyb3c9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fb3B0aW9ucy5hcnJvd0VsZW1lbnQsbj10aGlzLl9vcHRpb25zLmFycm93T2Zmc2V0O2lmKCJzdHJpbmciPT10eXBlb2YgdCYmKHQ9dGhpcy5fcG9wcGVyLnF1ZXJ5U2VsZWN0b3IodCkpLCF0KXJldHVybiBlO2lmKCF0aGlzLl9wb3BwZXIuY29udGFpbnModCkpcmV0dXJuIGNvbnNvbGUud2FybigiV0FSTklORzogYGFycm93RWxlbWVudGAgbXVzdCBiZSBjaGlsZCBvZiBpdHMgcG9wcGVyIGVsZW1lbnQhIiksZTtpZighdGhpcy5pc01vZGlmaWVyUmVxdWlyZWQodGhpcy5tb2RpZmllcnMuYXJyb3csdGhpcy5tb2RpZmllcnMua2VlcFRvZ2V0aGVyKSlyZXR1cm4gY29uc29sZS53YXJuKCJXQVJOSU5HOiBrZWVwVG9nZXRoZXIgbW9kaWZpZXIgaXMgcmVxdWlyZWQgYnkgYXJyb3cgbW9kaWZpZXIgaW4gb3JkZXIgdG8gd29yaywgYmUgc3VyZSB0byBpbmNsdWRlIGl0IGJlZm9yZSBhcnJvdyEiKSxlO3ZhciBpPXt9LHM9ZS5wbGFjZW1lbnQuc3BsaXQoIi0iKVswXSxhPW8oZS5vZmZzZXRzLnBvcHBlciksbD1lLm9mZnNldHMucmVmZXJlbmNlLHU9LTEhPT1bImxlZnQiLCJyaWdodCJdLmluZGV4T2YocyksYz11PyJoZWlnaHQiOiJ3aWR0aCIsZD11PyJ0b3AiOiJsZWZ0IixmPXU/ImxlZnQiOiJ0b3AiLGg9dT8iYm90dG9tIjoicmlnaHQiLHA9cih0KVtjXTtsW2hdLXA8YVtkXSYmKGUub2Zmc2V0cy5wb3BwZXJbZF0tPWFbZF0tKGxbaF0tcCkpLGxbZF0rcD5hW2hdJiYoZS5vZmZzZXRzLnBvcHBlcltkXSs9bFtkXStwLWFbaF0pO3ZhciBtPWxbZF0rKG58fGxbY10vMi1wLzIpLWFbZF07cmV0dXJuIG09TWF0aC5tYXgoTWF0aC5taW4oYVtjXS1wLTgsbSksOCksaVtkXT1tLGlbZl09IiIsZS5vZmZzZXRzLmFycm93PWksZS5hcnJvd0VsZW1lbnQ9dCxlfSxPYmplY3QuYXNzaWdufHxPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LCJhc3NpZ24iLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpmdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lfHxudWxsPT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY29udmVydCBmaXJzdCBhcmd1bWVudCB0byBvYmplY3QiKTtmb3IodmFyIHQ9T2JqZWN0KGUpLG49MTtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKXt2YXIgcj1hcmd1bWVudHNbbl07aWYodm9pZCAwIT09ciYmbnVsbCE9PXIpe3I9T2JqZWN0KHIpO2Zvcih2YXIgaT1PYmplY3Qua2V5cyhyKSxvPTAscz1pLmxlbmd0aDtvPHM7bysrKXt2YXIgYT1pW29dLGw9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLGEpO3ZvaWQgMCE9PWwmJmwuZW51bWVyYWJsZSYmKHRbYV09clthXSl9fX1yZXR1cm4gdH19KSxufSk/ci5jYWxsKHQsbix0LGUpOnIpfHwoZS5leHBvcnRzPWkpfSwiTld0KyI6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oIitaTUoiKSxpPW4oIm1zWGkiKSxvPW4oIk1oeXgiKSxzPW4oIjc3UGwiKSxhPW4oIlFSRzQiKSxsPW4oIjNmczIiKSx1PXt9LGM9e307KHQ9ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLGQsZil7dmFyIGgscCxtLHYsZz1mP2Z1bmN0aW9uKCl7cmV0dXJuIGV9OmwoZSkseT1yKG4sZCx0PzI6MSksXz0wO2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBnKXRocm93IFR5cGVFcnJvcihlKyIgaXMgbm90IGl0ZXJhYmxlISIpO2lmKG8oZykpe2ZvcihoPWEoZS5sZW5ndGgpO2g+XztfKyspaWYoKHY9dD95KHMocD1lW19dKVswXSxwWzFdKTp5KGVbX10pKT09PXV8fHY9PT1jKXJldHVybiB2fWVsc2UgZm9yKG09Zy5jYWxsKGUpOyEocD1tLm5leHQoKSkuZG9uZTspaWYoKHY9aShtLHkscC52YWx1ZSx0KSk9PT11fHx2PT09YylyZXR1cm4gdn0pLkJSRUFLPXUsdC5SRVRVUk49Y30sTll4TzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiOwovKioKICogdnVleCB2My4wLjEKICogKGMpIDIwMTcgRXZhbiBZb3UKICogQGxpY2Vuc2UgTUlUCiAqL3ZhciByPWZ1bmN0aW9uKGUpe2lmKE51bWJlcihlLnZlcnNpb24uc3BsaXQoIi4iKVswXSk+PTIpZS5taXhpbih7YmVmb3JlQ3JlYXRlOm59KTtlbHNle3ZhciB0PWUucHJvdG90eXBlLl9pbml0O2UucHJvdG90eXBlLl9pbml0PWZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUmJihlPXt9KSxlLmluaXQ9ZS5pbml0P1tuXS5jb25jYXQoZS5pbml0KTpuLHQuY2FsbCh0aGlzLGUpfX1mdW5jdGlvbiBuKCl7dmFyIGU9dGhpcy4kb3B0aW9ucztlLnN0b3JlP3RoaXMuJHN0b3JlPSJmdW5jdGlvbiI9PXR5cGVvZiBlLnN0b3JlP2Uuc3RvcmUoKTplLnN0b3JlOmUucGFyZW50JiZlLnBhcmVudC4kc3RvcmUmJih0aGlzLiRzdG9yZT1lLnBhcmVudC4kc3RvcmUpfX0saT0idW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187ZnVuY3Rpb24gbyhlLHQpe09iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24obil7cmV0dXJuIHQoZVtuXSxuKX0pfXZhciBzPWZ1bmN0aW9uKGUsdCl7dGhpcy5ydW50aW1lPXQsdGhpcy5fY2hpbGRyZW49T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9yYXdNb2R1bGU9ZTt2YXIgbj1lLnN0YXRlO3RoaXMuc3RhdGU9KCJmdW5jdGlvbiI9PXR5cGVvZiBuP24oKTpuKXx8e319LGE9e25hbWVzcGFjZWQ6e2NvbmZpZ3VyYWJsZTohMH19O2EubmFtZXNwYWNlZC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuX3Jhd01vZHVsZS5uYW1lc3BhY2VkfSxzLnByb3RvdHlwZS5hZGRDaGlsZD1mdW5jdGlvbihlLHQpe3RoaXMuX2NoaWxkcmVuW2VdPXR9LHMucHJvdG90eXBlLnJlbW92ZUNoaWxkPWZ1bmN0aW9uKGUpe2RlbGV0ZSB0aGlzLl9jaGlsZHJlbltlXX0scy5wcm90b3R5cGUuZ2V0Q2hpbGQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2NoaWxkcmVuW2VdfSxzLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oZSl7dGhpcy5fcmF3TW9kdWxlLm5hbWVzcGFjZWQ9ZS5uYW1lc3BhY2VkLGUuYWN0aW9ucyYmKHRoaXMuX3Jhd01vZHVsZS5hY3Rpb25zPWUuYWN0aW9ucyksZS5tdXRhdGlvbnMmJih0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zPWUubXV0YXRpb25zKSxlLmdldHRlcnMmJih0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycz1lLmdldHRlcnMpfSxzLnByb3RvdHlwZS5mb3JFYWNoQ2hpbGQ9ZnVuY3Rpb24oZSl7byh0aGlzLl9jaGlsZHJlbixlKX0scy5wcm90b3R5cGUuZm9yRWFjaEdldHRlcj1mdW5jdGlvbihlKXt0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycyYmbyh0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycyxlKX0scy5wcm90b3R5cGUuZm9yRWFjaEFjdGlvbj1mdW5jdGlvbihlKXt0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucyYmbyh0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucyxlKX0scy5wcm90b3R5cGUuZm9yRWFjaE11dGF0aW9uPWZ1bmN0aW9uKGUpe3RoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMmJm8odGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucyxlKX0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMocy5wcm90b3R5cGUsYSk7dmFyIGw9ZnVuY3Rpb24oZSl7dGhpcy5yZWdpc3RlcihbXSxlLCExKX07bC5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlZHVjZShmdW5jdGlvbihlLHQpe3JldHVybiBlLmdldENoaWxkKHQpfSx0aGlzLnJvb3QpfSxsLnByb3RvdHlwZS5nZXROYW1lc3BhY2U9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5yb290O3JldHVybiBlLnJlZHVjZShmdW5jdGlvbihlLG4pe3JldHVybiBlKygodD10LmdldENoaWxkKG4pKS5uYW1lc3BhY2VkP24rIi8iOiIiKX0sIiIpfSxsLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oZSl7IWZ1bmN0aW9uIGUodCxuLHIpezA7bi51cGRhdGUocik7aWYoci5tb2R1bGVzKWZvcih2YXIgaSBpbiByLm1vZHVsZXMpe2lmKCFuLmdldENoaWxkKGkpKXJldHVybiB2b2lkIDA7ZSh0LmNvbmNhdChpKSxuLmdldENoaWxkKGkpLHIubW9kdWxlc1tpXSl9fShbXSx0aGlzLnJvb3QsZSl9LGwucHJvdG90eXBlLnJlZ2lzdGVyPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzO3ZvaWQgMD09PW4mJihuPSEwKTt2YXIgaT1uZXcgcyh0LG4pOzA9PT1lLmxlbmd0aD90aGlzLnJvb3Q9aTp0aGlzLmdldChlLnNsaWNlKDAsLTEpKS5hZGRDaGlsZChlW2UubGVuZ3RoLTFdLGkpO3QubW9kdWxlcyYmbyh0Lm1vZHVsZXMsZnVuY3Rpb24odCxpKXtyLnJlZ2lzdGVyKGUuY29uY2F0KGkpLHQsbil9KX0sbC5wcm90b3R5cGUudW5yZWdpc3Rlcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmdldChlLnNsaWNlKDAsLTEpKSxuPWVbZS5sZW5ndGgtMV07dC5nZXRDaGlsZChuKS5ydW50aW1lJiZ0LnJlbW92ZUNoaWxkKG4pfTt2YXIgdTt2YXIgYz1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3ZvaWQgMD09PWUmJihlPXt9KSwhdSYmInVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5WdWUmJnkod2luZG93LlZ1ZSk7dmFyIG49ZS5wbHVnaW5zO3ZvaWQgMD09PW4mJihuPVtdKTt2YXIgcj1lLnN0cmljdDt2b2lkIDA9PT1yJiYocj0hMSk7dmFyIG89ZS5zdGF0ZTt2b2lkIDA9PT1vJiYobz17fSksImZ1bmN0aW9uIj09dHlwZW9mIG8mJihvPW8oKXx8e30pLHRoaXMuX2NvbW1pdHRpbmc9ITEsdGhpcy5fYWN0aW9ucz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2FjdGlvblN1YnNjcmliZXJzPVtdLHRoaXMuX211dGF0aW9ucz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX3dyYXBwZWRHZXR0ZXJzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fbW9kdWxlcz1uZXcgbChlKSx0aGlzLl9tb2R1bGVzTmFtZXNwYWNlTWFwPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fc3Vic2NyaWJlcnM9W10sdGhpcy5fd2F0Y2hlclZNPW5ldyB1O3ZhciBzPXRoaXMsYT10aGlzLmRpc3BhdGNoLGM9dGhpcy5jb21taXQ7dGhpcy5kaXNwYXRjaD1mdW5jdGlvbihlLHQpe3JldHVybiBhLmNhbGwocyxlLHQpfSx0aGlzLmNvbW1pdD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGMuY2FsbChzLGUsdCxuKX0sdGhpcy5zdHJpY3Q9cixtKHRoaXMsbyxbXSx0aGlzLl9tb2R1bGVzLnJvb3QpLHAodGhpcyxvKSxuLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGUodCl9KSx1LmNvbmZpZy5kZXZ0b29scyYmZnVuY3Rpb24oZSl7aSYmKGUuX2RldnRvb2xIb29rPWksaS5lbWl0KCJ2dWV4OmluaXQiLGUpLGkub24oInZ1ZXg6dHJhdmVsLXRvLXN0YXRlIixmdW5jdGlvbih0KXtlLnJlcGxhY2VTdGF0ZSh0KX0pLGUuc3Vic2NyaWJlKGZ1bmN0aW9uKGUsdCl7aS5lbWl0KCJ2dWV4Om11dGF0aW9uIixlLHQpfSkpfSh0aGlzKX0sZD17c3RhdGU6e2NvbmZpZ3VyYWJsZTohMH19O2Z1bmN0aW9uIGYoZSx0KXtyZXR1cm4gdC5pbmRleE9mKGUpPDAmJnQucHVzaChlKSxmdW5jdGlvbigpe3ZhciBuPXQuaW5kZXhPZihlKTtuPi0xJiZ0LnNwbGljZShuLDEpfX1mdW5jdGlvbiBoKGUsdCl7ZS5fYWN0aW9ucz1PYmplY3QuY3JlYXRlKG51bGwpLGUuX211dGF0aW9ucz1PYmplY3QuY3JlYXRlKG51bGwpLGUuX3dyYXBwZWRHZXR0ZXJzPU9iamVjdC5jcmVhdGUobnVsbCksZS5fbW9kdWxlc05hbWVzcGFjZU1hcD1PYmplY3QuY3JlYXRlKG51bGwpO3ZhciBuPWUuc3RhdGU7bShlLG4sW10sZS5fbW9kdWxlcy5yb290LCEwKSxwKGUsbix0KX1mdW5jdGlvbiBwKGUsdCxuKXt2YXIgcj1lLl92bTtlLmdldHRlcnM9e307dmFyIGk9e307byhlLl93cmFwcGVkR2V0dGVycyxmdW5jdGlvbih0LG4pe2lbbl09ZnVuY3Rpb24oKXtyZXR1cm4gdChlKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUuZ2V0dGVycyxuLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5fdm1bbl19LGVudW1lcmFibGU6ITB9KX0pO3ZhciBzPXUuY29uZmlnLnNpbGVudDt1LmNvbmZpZy5zaWxlbnQ9ITAsZS5fdm09bmV3IHUoe2RhdGE6eyQkc3RhdGU6dH0sY29tcHV0ZWQ6aX0pLHUuY29uZmlnLnNpbGVudD1zLGUuc3RyaWN0JiZmdW5jdGlvbihlKXtlLl92bS4kd2F0Y2goZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YS4kJHN0YXRlfSxmdW5jdGlvbigpezB9LHtkZWVwOiEwLHN5bmM6ITB9KX0oZSksciYmKG4mJmUuX3dpdGhDb21taXQoZnVuY3Rpb24oKXtyLl9kYXRhLiQkc3RhdGU9bnVsbH0pLHUubmV4dFRpY2soZnVuY3Rpb24oKXtyZXR1cm4gci4kZGVzdHJveSgpfSkpfWZ1bmN0aW9uIG0oZSx0LG4scixpKXt2YXIgbz0hbi5sZW5ndGgscz1lLl9tb2R1bGVzLmdldE5hbWVzcGFjZShuKTtpZihyLm5hbWVzcGFjZWQmJihlLl9tb2R1bGVzTmFtZXNwYWNlTWFwW3NdPXIpLCFvJiYhaSl7dmFyIGE9dih0LG4uc2xpY2UoMCwtMSkpLGw9bltuLmxlbmd0aC0xXTtlLl93aXRoQ29tbWl0KGZ1bmN0aW9uKCl7dS5zZXQoYSxsLHIuc3RhdGUpfSl9dmFyIGM9ci5jb250ZXh0PWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj0iIj09PXQsaT17ZGlzcGF0Y2g6cj9lLmRpc3BhdGNoOmZ1bmN0aW9uKG4scixpKXt2YXIgbz1nKG4scixpKSxzPW8ucGF5bG9hZCxhPW8ub3B0aW9ucyxsPW8udHlwZTtyZXR1cm4gYSYmYS5yb290fHwobD10K2wpLGUuZGlzcGF0Y2gobCxzKX0sY29tbWl0OnI/ZS5jb21taXQ6ZnVuY3Rpb24obixyLGkpe3ZhciBvPWcobixyLGkpLHM9by5wYXlsb2FkLGE9by5vcHRpb25zLGw9by50eXBlO2EmJmEucm9vdHx8KGw9dCtsKSxlLmNvbW1pdChsLHMsYSl9fTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaSx7Z2V0dGVyczp7Z2V0OnI/ZnVuY3Rpb24oKXtyZXR1cm4gZS5nZXR0ZXJzfTpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlLHQpe3ZhciBuPXt9LHI9dC5sZW5ndGg7cmV0dXJuIE9iamVjdC5rZXlzKGUuZ2V0dGVycykuZm9yRWFjaChmdW5jdGlvbihpKXtpZihpLnNsaWNlKDAscik9PT10KXt2YXIgbz1pLnNsaWNlKHIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShuLG8se2dldDpmdW5jdGlvbigpe3JldHVybiBlLmdldHRlcnNbaV19LGVudW1lcmFibGU6ITB9KX19KSxufShlLHQpfX0sc3RhdGU6e2dldDpmdW5jdGlvbigpe3JldHVybiB2KGUuc3RhdGUsbil9fX0pLGl9KGUscyxuKTtyLmZvckVhY2hNdXRhdGlvbihmdW5jdGlvbih0LG4peyFmdW5jdGlvbihlLHQsbixyKXsoZS5fbXV0YXRpb25zW3RdfHwoZS5fbXV0YXRpb25zW3RdPVtdKSkucHVzaChmdW5jdGlvbih0KXtuLmNhbGwoZSxyLnN0YXRlLHQpfSl9KGUscytuLHQsYyl9KSxyLmZvckVhY2hBY3Rpb24oZnVuY3Rpb24odCxuKXt2YXIgcj10LnJvb3Q/bjpzK24saT10LmhhbmRsZXJ8fHQ7IWZ1bmN0aW9uKGUsdCxuLHIpeyhlLl9hY3Rpb25zW3RdfHwoZS5fYWN0aW9uc1t0XT1bXSkpLnB1c2goZnVuY3Rpb24odCxpKXt2YXIgbyxzPW4uY2FsbChlLHtkaXNwYXRjaDpyLmRpc3BhdGNoLGNvbW1pdDpyLmNvbW1pdCxnZXR0ZXJzOnIuZ2V0dGVycyxzdGF0ZTpyLnN0YXRlLHJvb3RHZXR0ZXJzOmUuZ2V0dGVycyxyb290U3RhdGU6ZS5zdGF0ZX0sdCxpKTtyZXR1cm4obz1zKSYmImZ1bmN0aW9uIj09dHlwZW9mIG8udGhlbnx8KHM9UHJvbWlzZS5yZXNvbHZlKHMpKSxlLl9kZXZ0b29sSG9vaz9zLmNhdGNoKGZ1bmN0aW9uKHQpe3Rocm93IGUuX2RldnRvb2xIb29rLmVtaXQoInZ1ZXg6ZXJyb3IiLHQpLHR9KTpzfSl9KGUscixpLGMpfSksci5mb3JFYWNoR2V0dGVyKGZ1bmN0aW9uKHQsbil7IWZ1bmN0aW9uKGUsdCxuLHIpe2lmKGUuX3dyYXBwZWRHZXR0ZXJzW3RdKXJldHVybiB2b2lkIDA7ZS5fd3JhcHBlZEdldHRlcnNbdF09ZnVuY3Rpb24oZSl7cmV0dXJuIG4oci5zdGF0ZSxyLmdldHRlcnMsZS5zdGF0ZSxlLmdldHRlcnMpfX0oZSxzK24sdCxjKX0pLHIuZm9yRWFjaENoaWxkKGZ1bmN0aW9uKHIsbyl7bShlLHQsbi5jb25jYXQobykscixpKX0pfWZ1bmN0aW9uIHYoZSx0KXtyZXR1cm4gdC5sZW5ndGg/dC5yZWR1Y2UoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZVt0XX0sZSk6ZX1mdW5jdGlvbiBnKGUsdCxuKXt2YXIgcjtyZXR1cm4gbnVsbCE9PShyPWUpJiYib2JqZWN0Ij09dHlwZW9mIHImJmUudHlwZSYmKG49dCx0PWUsZT1lLnR5cGUpLHt0eXBlOmUscGF5bG9hZDp0LG9wdGlvbnM6bn19ZnVuY3Rpb24geShlKXt1JiZlPT09dXx8cih1PWUpfWQuc3RhdGUuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3ZtLl9kYXRhLiQkc3RhdGV9LGQuc3RhdGUuc2V0PWZ1bmN0aW9uKGUpezB9LGMucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcyxpPWcoZSx0LG4pLG89aS50eXBlLHM9aS5wYXlsb2FkLGE9KGkub3B0aW9ucyx7dHlwZTpvLHBheWxvYWQ6c30pLGw9dGhpcy5fbXV0YXRpb25zW29dO2wmJih0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uKCl7bC5mb3JFYWNoKGZ1bmN0aW9uKGUpe2Uocyl9KX0pLHRoaXMuX3N1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGUoYSxyLnN0YXRlKX0pKX0sYy5wcm90b3R5cGUuZGlzcGF0Y2g9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLHI9ZyhlLHQpLGk9ci50eXBlLG89ci5wYXlsb2FkLHM9e3R5cGU6aSxwYXlsb2FkOm99LGE9dGhpcy5fYWN0aW9uc1tpXTtpZihhKXJldHVybiB0aGlzLl9hY3Rpb25TdWJzY3JpYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBlKHMsbi5zdGF0ZSl9KSxhLmxlbmd0aD4xP1Byb21pc2UuYWxsKGEubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlKG8pfSkpOmFbMF0obyl9LGMucHJvdG90eXBlLnN1YnNjcmliZT1mdW5jdGlvbihlKXtyZXR1cm4gZihlLHRoaXMuX3N1YnNjcmliZXJzKX0sYy5wcm90b3R5cGUuc3Vic2NyaWJlQWN0aW9uPWZ1bmN0aW9uKGUpe3JldHVybiBmKGUsdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMpfSxjLnByb3RvdHlwZS53YXRjaD1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcztyZXR1cm4gdGhpcy5fd2F0Y2hlclZNLiR3YXRjaChmdW5jdGlvbigpe3JldHVybiBlKHIuc3RhdGUsci5nZXR0ZXJzKX0sdCxuKX0sYy5wcm90b3R5cGUucmVwbGFjZVN0YXRlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbigpe3QuX3ZtLl9kYXRhLiQkc3RhdGU9ZX0pfSxjLnByb3RvdHlwZS5yZWdpc3Rlck1vZHVsZT1mdW5jdGlvbihlLHQsbil7dm9pZCAwPT09biYmKG49e30pLCJzdHJpbmciPT10eXBlb2YgZSYmKGU9W2VdKSx0aGlzLl9tb2R1bGVzLnJlZ2lzdGVyKGUsdCksbSh0aGlzLHRoaXMuc3RhdGUsZSx0aGlzLl9tb2R1bGVzLmdldChlKSxuLnByZXNlcnZlU3RhdGUpLHAodGhpcyx0aGlzLnN0YXRlKX0sYy5wcm90b3R5cGUudW5yZWdpc3Rlck1vZHVsZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzOyJzdHJpbmciPT10eXBlb2YgZSYmKGU9W2VdKSx0aGlzLl9tb2R1bGVzLnVucmVnaXN0ZXIoZSksdGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbigpe3ZhciBuPXYodC5zdGF0ZSxlLnNsaWNlKDAsLTEpKTt1LmRlbGV0ZShuLGVbZS5sZW5ndGgtMV0pfSksaCh0aGlzKX0sYy5wcm90b3R5cGUuaG90VXBkYXRlPWZ1bmN0aW9uKGUpe3RoaXMuX21vZHVsZXMudXBkYXRlKGUpLGgodGhpcywhMCl9LGMucHJvdG90eXBlLl93aXRoQ29tbWl0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX2NvbW1pdHRpbmc7dGhpcy5fY29tbWl0dGluZz0hMCxlKCksdGhpcy5fY29tbWl0dGluZz10fSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjLnByb3RvdHlwZSxkKTt2YXIgXz1rKGZ1bmN0aW9uKGUsdCl7dmFyIG49e307cmV0dXJuIHcodCkuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgcj10LmtleSxpPXQudmFsO25bcl09ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRzdG9yZS5zdGF0ZSxuPXRoaXMuJHN0b3JlLmdldHRlcnM7aWYoZSl7dmFyIHI9Uyh0aGlzLiRzdG9yZSwibWFwU3RhdGUiLGUpO2lmKCFyKXJldHVybjt0PXIuY29udGV4dC5zdGF0ZSxuPXIuY29udGV4dC5nZXR0ZXJzfXJldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBpP2kuY2FsbCh0aGlzLHQsbik6dFtpXX0sbltyXS52dWV4PSEwfSksbn0pLGI9ayhmdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybiB3KHQpLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIHI9dC5rZXksaT10LnZhbDtuW3JdPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLG49YXJndW1lbnRzLmxlbmd0aDtuLS07KXRbbl09YXJndW1lbnRzW25dO3ZhciByPXRoaXMuJHN0b3JlLmNvbW1pdDtpZihlKXt2YXIgbz1TKHRoaXMuJHN0b3JlLCJtYXBNdXRhdGlvbnMiLGUpO2lmKCFvKXJldHVybjtyPW8uY29udGV4dC5jb21taXR9cmV0dXJuImZ1bmN0aW9uIj09dHlwZW9mIGk/aS5hcHBseSh0aGlzLFtyXS5jb25jYXQodCkpOnIuYXBwbHkodGhpcy4kc3RvcmUsW2ldLmNvbmNhdCh0KSl9fSksbn0pLHg9ayhmdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybiB3KHQpLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIHI9dC5rZXksaT10LnZhbDtpPWUraSxuW3JdPWZ1bmN0aW9uKCl7aWYoIWV8fFModGhpcy4kc3RvcmUsIm1hcEdldHRlcnMiLGUpKXJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzW2ldfSxuW3JdLnZ1ZXg9ITB9KSxufSksQz1rKGZ1bmN0aW9uKGUsdCl7dmFyIG49e307cmV0dXJuIHcodCkuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgcj10LmtleSxpPXQudmFsO25bcl09ZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10sbj1hcmd1bWVudHMubGVuZ3RoO24tLTspdFtuXT1hcmd1bWVudHNbbl07dmFyIHI9dGhpcy4kc3RvcmUuZGlzcGF0Y2g7aWYoZSl7dmFyIG89Uyh0aGlzLiRzdG9yZSwibWFwQWN0aW9ucyIsZSk7aWYoIW8pcmV0dXJuO3I9by5jb250ZXh0LmRpc3BhdGNofXJldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBpP2kuYXBwbHkodGhpcyxbcl0uY29uY2F0KHQpKTpyLmFwcGx5KHRoaXMuJHN0b3JlLFtpXS5jb25jYXQodCkpfX0pLG59KTtmdW5jdGlvbiB3KGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP2UubWFwKGZ1bmN0aW9uKGUpe3JldHVybntrZXk6ZSx2YWw6ZX19KTpPYmplY3Qua2V5cyhlKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJue2tleTp0LHZhbDplW3RdfX0pfWZ1bmN0aW9uIGsoZSl7cmV0dXJuIGZ1bmN0aW9uKHQsbil7cmV0dXJuInN0cmluZyIhPXR5cGVvZiB0PyhuPXQsdD0iIik6Ii8iIT09dC5jaGFyQXQodC5sZW5ndGgtMSkmJih0Kz0iLyIpLGUodCxuKX19ZnVuY3Rpb24gUyhlLHQsbil7cmV0dXJuIGUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbl19dmFyIEE9e1N0b3JlOmMsaW5zdGFsbDp5LHZlcnNpb246IjMuMC4xIixtYXBTdGF0ZTpfLG1hcE11dGF0aW9uczpiLG1hcEdldHRlcnM6eCxtYXBBY3Rpb25zOkMsY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnM6ZnVuY3Rpb24oZSl7cmV0dXJue21hcFN0YXRlOl8uYmluZChudWxsLGUpLG1hcEdldHRlcnM6eC5iaW5kKG51bGwsZSksbWFwTXV0YXRpb25zOmIuYmluZChudWxsLGUpLG1hcEFjdGlvbnM6Qy5iaW5kKG51bGwsZSl9fX07dC5hPUF9LE5wSVE6ZnVuY3Rpb24oZSx0KXt0LmY9e30ucHJvcGVydHlJc0VudW1lcmFibGV9LE80Zzg6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ITB9LE9Belk6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHIsaT1uKCI3K3VXIiksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn0scz1uKCIya3ZBIik7dmFyIGE9ITEsbD0hMSx1PTJlMyxjPWZ1bmN0aW9uKCl7aWYoIW8uZGVmYXVsdC5wcm90b3R5cGUuJGlzU2VydmVyKXt2YXIgZT1mLm1vZGFsRG9tO3JldHVybiBlP2E9ITA6KGE9ITEsZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSxmLm1vZGFsRG9tPWUsZS5hZGRFdmVudExpc3RlbmVyKCJ0b3VjaG1vdmUiLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpfSksZS5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsZnVuY3Rpb24oKXtmLmRvT25Nb2RhbENsaWNrJiZmLmRvT25Nb2RhbENsaWNrKCl9KSksZX19LGQ9e30sZj17bW9kYWxGYWRlOiEwLGdldEluc3RhbmNlOmZ1bmN0aW9uKGUpe3JldHVybiBkW2VdfSxyZWdpc3RlcjpmdW5jdGlvbihlLHQpe2UmJnQmJihkW2VdPXQpfSxkZXJlZ2lzdGVyOmZ1bmN0aW9uKGUpe2UmJihkW2VdPW51bGwsZGVsZXRlIGRbZV0pfSxuZXh0WkluZGV4OmZ1bmN0aW9uKCl7cmV0dXJuIGYuekluZGV4Kyt9LG1vZGFsU3RhY2s6W10sZG9Pbk1vZGFsQ2xpY2s6ZnVuY3Rpb24oKXt2YXIgZT1mLm1vZGFsU3RhY2tbZi5tb2RhbFN0YWNrLmxlbmd0aC0xXTtpZihlKXt2YXIgdD1mLmdldEluc3RhbmNlKGUuaWQpO3QmJnQuY2xvc2VPbkNsaWNrTW9kYWwmJnQuY2xvc2UoKX19LG9wZW5Nb2RhbDpmdW5jdGlvbihlLHQsbixyLGkpe2lmKCFvLmRlZmF1bHQucHJvdG90eXBlLiRpc1NlcnZlciYmZSYmdm9pZCAwIT09dCl7dGhpcy5tb2RhbEZhZGU9aTtmb3IodmFyIGw9dGhpcy5tb2RhbFN0YWNrLHU9MCxkPWwubGVuZ3RoO3U8ZDt1Kyspe2lmKGxbdV0uaWQ9PT1lKXJldHVybn12YXIgZj1jKCk7aWYoKDAscy5hZGRDbGFzcykoZiwidi1tb2RhbCIpLHRoaXMubW9kYWxGYWRlJiYhYSYmKDAscy5hZGRDbGFzcykoZiwidi1tb2RhbC1lbnRlciIpLHIpci50cmltKCkuc3BsaXQoL1xzKy8pLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuKDAscy5hZGRDbGFzcykoZixlKX0pO3NldFRpbWVvdXQoZnVuY3Rpb24oKXsoMCxzLnJlbW92ZUNsYXNzKShmLCJ2LW1vZGFsLWVudGVyIil9LDIwMCksbiYmbi5wYXJlbnROb2RlJiYxMSE9PW4ucGFyZW50Tm9kZS5ub2RlVHlwZT9uLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoZik6ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmKSx0JiYoZi5zdHlsZS56SW5kZXg9dCksZi50YWJJbmRleD0wLGYuc3R5bGUuZGlzcGxheT0iIix0aGlzLm1vZGFsU3RhY2sucHVzaCh7aWQ6ZSx6SW5kZXg6dCxtb2RhbENsYXNzOnJ9KX19LGNsb3NlTW9kYWw6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5tb2RhbFN0YWNrLG49YygpO2lmKHQubGVuZ3RoPjApe3ZhciByPXRbdC5sZW5ndGgtMV07aWYoci5pZD09PWUpe2lmKHIubW9kYWxDbGFzcylyLm1vZGFsQ2xhc3MudHJpbSgpLnNwbGl0KC9ccysvKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybigwLHMucmVtb3ZlQ2xhc3MpKG4sZSl9KTt0LnBvcCgpLHQubGVuZ3RoPjAmJihuLnN0eWxlLnpJbmRleD10W3QubGVuZ3RoLTFdLnpJbmRleCl9ZWxzZSBmb3IodmFyIGk9dC5sZW5ndGgtMTtpPj0wO2ktLSlpZih0W2ldLmlkPT09ZSl7dC5zcGxpY2UoaSwxKTticmVha319MD09PXQubGVuZ3RoJiYodGhpcy5tb2RhbEZhZGUmJigwLHMuYWRkQ2xhc3MpKG4sInYtbW9kYWwtbGVhdmUiKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7MD09PXQubGVuZ3RoJiYobi5wYXJlbnROb2RlJiZuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobiksbi5zdHlsZS5kaXNwbGF5PSJub25lIixmLm1vZGFsRG9tPXZvaWQgMCksKDAscy5yZW1vdmVDbGFzcykobiwidi1tb2RhbC1sZWF2ZSIpfSwyMDApKX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eShmLCJ6SW5kZXgiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx8fCh1PShvLmRlZmF1bHQucHJvdG90eXBlLiRFTEVNRU5UfHx7fSkuekluZGV4fHx1LGw9ITApLHV9LHNldDpmdW5jdGlvbihlKXt1PWV9fSk7by5kZWZhdWx0LnByb3RvdHlwZS4kaXNTZXJ2ZXJ8fHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJrZXlkb3duIixmdW5jdGlvbihlKXtpZigyNz09PWUua2V5Q29kZSl7dmFyIHQ9ZnVuY3Rpb24oKXtpZighby5kZWZhdWx0LnByb3RvdHlwZS4kaXNTZXJ2ZXImJmYubW9kYWxTdGFjay5sZW5ndGg+MCl7dmFyIGU9Zi5tb2RhbFN0YWNrW2YubW9kYWxTdGFjay5sZW5ndGgtMV07aWYoIWUpcmV0dXJuO3JldHVybiBmLmdldEluc3RhbmNlKGUuaWQpfX0oKTt0JiZ0LmNsb3NlT25QcmVzc0VzY2FwZSYmKHQuaGFuZGxlQ2xvc2U/dC5oYW5kbGVDbG9zZSgpOnQuaGFuZGxlQWN0aW9uP3QuaGFuZGxlQWN0aW9uKCJjYW5jZWwiKTp0LmNsb3NlKCkpfX0pLHQuZGVmYXVsdD1mfSxPTjA3OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCJFcWpJIiksaT1uKCI3S3ZEIikuZG9jdW1lbnQsbz1yKGkpJiZyKGkuY3JlYXRlRWxlbWVudCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBvP2kuY3JlYXRlRWxlbWVudChlKTp7fX19LE9OM086ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oInVZMWEiKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB2b2lkIDA9PT1uP3IoZSx0LCExKTpyKGUsbiwhMSE9PXQpfX0sT1lsczpmdW5jdGlvbihlLHQsbil7bigiY3JscCIpKCJhc3luY0l0ZXJhdG9yIil9LFB6eEs6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oIkQyTDIiKSxpPW4oInNCM2UiKSxvPW4oImF4M2QiKSgiSUVfUFJPVE8iKSxzPU9iamVjdC5wcm90b3R5cGU7ZS5leHBvcnRzPU9iamVjdC5nZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24oZSl7cmV0dXJuIGU9aShlKSxyKGUsbyk/ZVtvXToiZnVuY3Rpb24iPT10eXBlb2YgZS5jb25zdHJ1Y3RvciYmZSBpbnN0YW5jZW9mIGUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGU6ZSBpbnN0YW5jZW9mIE9iamVjdD9zOm51bGx9fSxRUkc0OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCJVdUdGIiksaT1NYXRoLm1pbjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGU+MD9pKHIoZSksOTAwNzE5OTI1NDc0MDk5MSk6MH19LCJRV2UvIjpmdW5jdGlvbihlLHQsbil7bigiY3JscCIpKCJvYnNlcnZhYmxlIil9LFI0d2M6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oImtNMkUiKTtyKHIuUytyLkYsIk9iamVjdCIse2Fzc2lnbjpuKCJUbzNMIil9KX0sUjlNMjpmdW5jdGlvbihlLHQpe3ZhciBuPXt9LnRvU3RyaW5nO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbi5jYWxsKGUpLnNsaWNlKDgsLTEpfX0sUkRvSzpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBpPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLG4pLGkubD0hMCxpLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsImEiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPSIvZGlzdC8iLG4obi5zPTExMCl9KHswOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt2YXIgcyxhPWU9ZXx8e30sbD10eXBlb2YgZS5kZWZhdWx0OyJvYmplY3QiIT09bCYmImZ1bmN0aW9uIiE9PWx8fChzPWUsYT1lLmRlZmF1bHQpO3ZhciB1LGM9ImZ1bmN0aW9uIj09dHlwZW9mIGE/YS5vcHRpb25zOmE7aWYodCYmKGMucmVuZGVyPXQucmVuZGVyLGMuc3RhdGljUmVuZGVyRm5zPXQuc3RhdGljUmVuZGVyRm5zLGMuX2NvbXBpbGVkPSEwKSxuJiYoYy5mdW5jdGlvbmFsPSEwKSxpJiYoYy5fc2NvcGVJZD1pKSxvPyh1PWZ1bmN0aW9uKGUpeyhlPWV8fHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fHx0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCl8fCJ1bmRlZmluZWQiPT10eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfX3x8KGU9X19WVUVfU1NSX0NPTlRFWFRfXyksciYmci5jYWxsKHRoaXMsZSksZSYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChvKX0sYy5fc3NyUmVnaXN0ZXI9dSk6ciYmKHU9ciksdSl7dmFyIGQ9Yy5mdW5jdGlvbmFsLGY9ZD9jLnJlbmRlcjpjLmJlZm9yZUNyZWF0ZTtkPyhjLl9pbmplY3RTdHlsZXM9dSxjLnJlbmRlcj1mdW5jdGlvbihlLHQpe3JldHVybiB1LmNhbGwodCksZihlLHQpfSk6Yy5iZWZvcmVDcmVhdGU9Zj9bXS5jb25jYXQoZix1KTpbdV19cmV0dXJue2VzTW9kdWxlOnMsZXhwb3J0czphLG9wdGlvbnM6Y319fSwxOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImZQbGwiKX0sMTEwOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigxMTEpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O28uZGVmYXVsdC5pbnN0YWxsPWZ1bmN0aW9uKGUpe2UuY29tcG9uZW50KG8uZGVmYXVsdC5uYW1lLG8uZGVmYXVsdCl9LHQuZGVmYXVsdD1vLmRlZmF1bHR9LDExMTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKDExMiksaT1uLm4ociksbz1uKDExMykscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDExMjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcixpPW4oMSksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07dC5kZWZhdWx0PXtuYW1lOiJFbFJhZGlvIixtaXhpbnM6W28uZGVmYXVsdF0saW5qZWN0OntlbEZvcm06e2RlZmF1bHQ6IiJ9LGVsRm9ybUl0ZW06e2RlZmF1bHQ6IiJ9fSxjb21wb25lbnROYW1lOiJFbFJhZGlvIixwcm9wczp7dmFsdWU6e30sbGFiZWw6e30sZGlzYWJsZWQ6Qm9vbGVhbixuYW1lOlN0cmluZyxib3JkZXI6Qm9vbGVhbixzaXplOlN0cmluZ30sZGF0YTpmdW5jdGlvbigpe3JldHVybntmb2N1czohMX19LGNvbXB1dGVkOntpc0dyb3VwOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuJHBhcmVudDtlOyl7aWYoIkVsUmFkaW9Hcm91cCI9PT1lLiRvcHRpb25zLmNvbXBvbmVudE5hbWUpcmV0dXJuIHRoaXMuX3JhZGlvR3JvdXA9ZSwhMDtlPWUuJHBhcmVudH1yZXR1cm4hMX0sbW9kZWw6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlzR3JvdXA/dGhpcy5fcmFkaW9Hcm91cC52YWx1ZTp0aGlzLnZhbHVlfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5pc0dyb3VwP3RoaXMuZGlzcGF0Y2goIkVsUmFkaW9Hcm91cCIsImlucHV0IixbZV0pOnRoaXMuJGVtaXQoImlucHV0IixlKX19LF9lbEZvcm1JdGVtU2l6ZTpmdW5jdGlvbigpe3JldHVybih0aGlzLmVsRm9ybUl0ZW18fHt9KS5lbEZvcm1JdGVtU2l6ZX0scmFkaW9TaXplOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5zaXplfHx0aGlzLl9lbEZvcm1JdGVtU2l6ZXx8KHRoaXMuJEVMRU1FTlR8fHt9KS5zaXplO3JldHVybiB0aGlzLmlzR3JvdXAmJnRoaXMuX3JhZGlvR3JvdXAucmFkaW9Hcm91cFNpemV8fGV9LGlzRGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc0dyb3VwP3RoaXMuX3JhZGlvR3JvdXAuZGlzYWJsZWR8fHRoaXMuZGlzYWJsZWR8fCh0aGlzLmVsRm9ybXx8e30pLmRpc2FibGVkOnRoaXMuZGlzYWJsZWR8fCh0aGlzLmVsRm9ybXx8e30pLmRpc2FibGVkfSx0YWJJbmRleDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlzRGlzYWJsZWR8fHRoaXMuaXNHcm91cCYmdGhpcy5tb2RlbCE9PXRoaXMubGFiZWw/LTE6MH19LG1ldGhvZHM6e2hhbmRsZUNoYW5nZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXtlLiRlbWl0KCJjaGFuZ2UiLGUubW9kZWwpLGUuaXNHcm91cCYmZS5kaXNwYXRjaCgiRWxSYWRpb0dyb3VwIiwiaGFuZGxlQ2hhbmdlIixlLm1vZGVsKX0pfX19fSwxMTM6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKCJsYWJlbCIse3N0YXRpY0NsYXNzOiJlbC1yYWRpbyIsY2xhc3M6W2UuYm9yZGVyJiZlLnJhZGlvU2l6ZT8iZWwtcmFkaW8tLSIrZS5yYWRpb1NpemU6IiIseyJpcy1kaXNhYmxlZCI6ZS5pc0Rpc2FibGVkfSx7ImlzLWZvY3VzIjplLmZvY3VzfSx7ImlzLWJvcmRlcmVkIjplLmJvcmRlcn0seyJpcy1jaGVja2VkIjplLm1vZGVsPT09ZS5sYWJlbH1dLGF0dHJzOntyb2xlOiJyYWRpbyIsImFyaWEtY2hlY2tlZCI6ZS5tb2RlbD09PWUubGFiZWwsImFyaWEtZGlzYWJsZWQiOmUuaXNEaXNhYmxlZCx0YWJpbmRleDplLnRhYkluZGV4fSxvbjp7a2V5ZG93bjpmdW5jdGlvbih0KXtpZighKCJidXR0b24iaW4gdCkmJmUuX2sodC5rZXlDb2RlLCJzcGFjZSIsMzIsdC5rZXkpKXJldHVybiBudWxsO3Quc3RvcFByb3BhZ2F0aW9uKCksdC5wcmV2ZW50RGVmYXVsdCgpLGUubW9kZWw9ZS5pc0Rpc2FibGVkP2UubW9kZWw6ZS5sYWJlbH19fSxbbigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC1yYWRpb19faW5wdXQiLGNsYXNzOnsiaXMtZGlzYWJsZWQiOmUuaXNEaXNhYmxlZCwiaXMtY2hlY2tlZCI6ZS5tb2RlbD09PWUubGFiZWx9fSxbbigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC1yYWRpb19faW5uZXIifSksbigiaW5wdXQiLHtkaXJlY3RpdmVzOlt7bmFtZToibW9kZWwiLHJhd05hbWU6InYtbW9kZWwiLHZhbHVlOmUubW9kZWwsZXhwcmVzc2lvbjoibW9kZWwifV0sc3RhdGljQ2xhc3M6ImVsLXJhZGlvX19vcmlnaW5hbCIsYXR0cnM6e3R5cGU6InJhZGlvIiwiYXJpYS1oaWRkZW4iOiJ0cnVlIixuYW1lOmUubmFtZSxkaXNhYmxlZDplLmlzRGlzYWJsZWQsdGFiaW5kZXg6Ii0xIn0sZG9tUHJvcHM6e3ZhbHVlOmUubGFiZWwsY2hlY2tlZDplLl9xKGUubW9kZWwsZS5sYWJlbCl9LG9uOntmb2N1czpmdW5jdGlvbih0KXtlLmZvY3VzPSEwfSxibHVyOmZ1bmN0aW9uKHQpe2UuZm9jdXM9ITF9LGNoYW5nZTpbZnVuY3Rpb24odCl7ZS5tb2RlbD1lLmxhYmVsfSxlLmhhbmRsZUNoYW5nZV19fSldKSxuKCJzcGFuIix7c3RhdGljQ2xhc3M6ImVsLXJhZGlvX19sYWJlbCIsb246e2tleWRvd246ZnVuY3Rpb24oZSl7ZS5zdG9wUHJvcGFnYXRpb24oKX19fSxbZS5fdCgiZGVmYXVsdCIpLGUuJHNsb3RzLmRlZmF1bHQ/ZS5fZSgpOltlLl92KGUuX3MoZS5sYWJlbCkpXV0sMildKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn19KX0sUlBMVjpmdW5jdGlvbihlLHQsbil7dmFyIHI9bigiN0t2RCIpLmRvY3VtZW50O2UuZXhwb3J0cz1yJiZyLmRvY3VtZW50RWxlbWVudH0sIlJZLzQiOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCJSOU0yIiksaT1uKCJkU3pkIikoInRvU3RyaW5nVGFnIiksbz0iQXJndW1lbnRzIj09cihmdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHN9KCkpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdCxuLHM7cmV0dXJuIHZvaWQgMD09PWU/IlVuZGVmaW5lZCI6bnVsbD09PWU/Ik51bGwiOiJzdHJpbmciPT10eXBlb2Yobj1mdW5jdGlvbihlLHQpe3RyeXtyZXR1cm4gZVt0XX1jYXRjaChlKXt9fSh0PU9iamVjdChlKSxpKSk/bjpvP3IodCk6Ik9iamVjdCI9PShzPXIodCkpJiYiZnVuY3Rpb24iPT10eXBlb2YgdC5jYWxsZWU/IkFyZ3VtZW50cyI6c319LFJlM3I6ZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKGUpe3JldHVybiEhZS5jb25zdHJ1Y3RvciYmImZ1bmN0aW9uIj09dHlwZW9mIGUuY29uc3RydWN0b3IuaXNCdWZmZXImJmUuY29uc3RydWN0b3IuaXNCdWZmZXIoZSl9Ci8qIQogKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyCiAqCiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+CiAqIEBsaWNlbnNlICBNSVQKICovCmUuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZSYmKG4oZSl8fGZ1bmN0aW9uKGUpe3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBlLnJlYWRGbG9hdExFJiYiZnVuY3Rpb24iPT10eXBlb2YgZS5zbGljZSYmbihlLnNsaWNlKDAsMCkpfShlKXx8ISFlLl9pc0J1ZmZlcil9fSxScmVsOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCJUY1E3IiksaT1uKCJuMFQ2IikuZixvPXt9LnRvU3RyaW5nLHM9Im9iamVjdCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdyYmT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM/T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KTpbXTtlLmV4cG9ydHMuZj1mdW5jdGlvbihlKXtyZXR1cm4gcyYmIltvYmplY3QgV2luZG93XSI9PW8uY2FsbChlKT9mdW5jdGlvbihlKXt0cnl7cmV0dXJuIGkoZSl9Y2F0Y2goZSl7cmV0dXJuIHMuc2xpY2UoKX19KGUpOmkocihlKSl9fSxTODJsOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4hIWUoKX1jYXRjaChlKXtyZXR1cm4hMH19fSxTVExqOmZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihyKXtpZih0W3JdKXJldHVybiB0W3JdLmV4cG9ydHM7dmFyIGk9dFtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxyKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCwiYSIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9Ii9kaXN0LyIsbihuLnM9MTQ2KX0oezA6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4scixpLG8pe3ZhciBzLGE9ZT1lfHx7fSxsPXR5cGVvZiBlLmRlZmF1bHQ7Im9iamVjdCIhPT1sJiYiZnVuY3Rpb24iIT09bHx8KHM9ZSxhPWUuZGVmYXVsdCk7dmFyIHUsYz0iZnVuY3Rpb24iPT10eXBlb2YgYT9hLm9wdGlvbnM6YTtpZih0JiYoYy5yZW5kZXI9dC5yZW5kZXIsYy5zdGF0aWNSZW5kZXJGbnM9dC5zdGF0aWNSZW5kZXJGbnMsYy5fY29tcGlsZWQ9ITApLG4mJihjLmZ1bmN0aW9uYWw9ITApLGkmJihjLl9zY29wZUlkPWkpLG8/KHU9ZnVuY3Rpb24oZSl7KGU9ZXx8dGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR8fHRoaXMucGFyZW50JiZ0aGlzLnBhcmVudC4kdm5vZGUmJnRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KXx8InVuZGVmaW5lZCI9PXR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9ffHwoZT1fX1ZVRV9TU1JfQ09OVEVYVF9fKSxyJiZyLmNhbGwodGhpcyxlKSxlJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cyYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG8pfSxjLl9zc3JSZWdpc3Rlcj11KTpyJiYodT1yKSx1KXt2YXIgZD1jLmZ1bmN0aW9uYWwsZj1kP2MucmVuZGVyOmMuYmVmb3JlQ3JlYXRlO2Q/KGMuX2luamVjdFN0eWxlcz11LGMucmVuZGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHUuY2FsbCh0KSxmKGUsdCl9KTpjLmJlZm9yZUNyZWF0ZT1mP1tdLmNvbmNhdChmLHUpOlt1XX1yZXR1cm57ZXNNb2R1bGU6cyxleHBvcnRzOmEsb3B0aW9uczpjfX19LDE6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiZlBsbCIpfSwxNDY6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHIsaT1uKDM1KSxvPShyPWkpJiZyLl9fZXNNb2R1bGU/cjp7ZGVmYXVsdDpyfTtvLmRlZmF1bHQuaW5zdGFsbD1mdW5jdGlvbihlKXtlLmNvbXBvbmVudChvLmRlZmF1bHQubmFtZSxvLmRlZmF1bHQpfSx0LmRlZmF1bHQ9by5kZWZhdWx0fSwyOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oInlsREoiKX0sMzU6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigzNiksaT1uLm4ociksbz1uKDM3KSxzPW4oMCkoaS5hLG8uYSwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PXMuZXhwb3J0c30sMzY6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHIsaT0iZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiYic3ltYm9sIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiYiZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT8ic3ltYm9sIjp0eXBlb2YgZX0sbz1uKDEpLHM9KHI9bykmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9LGE9bigyKTt0LmRlZmF1bHQ9e21peGluczpbcy5kZWZhdWx0XSxuYW1lOiJFbE9wdGlvbiIsY29tcG9uZW50TmFtZToiRWxPcHRpb24iLGluamVjdDpbInNlbGVjdCJdLHByb3BzOnt2YWx1ZTp7cmVxdWlyZWQ6ITB9LGxhYmVsOltTdHJpbmcsTnVtYmVyXSxjcmVhdGVkOkJvb2xlYW4sZGlzYWJsZWQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntpbmRleDotMSxncm91cERpc2FibGVkOiExLHZpc2libGU6ITAsaGl0U3RhdGU6ITEsaG92ZXI6ITF9fSxjb21wdXRlZDp7aXNPYmplY3Q6ZnVuY3Rpb24oKXtyZXR1cm4iW29iamVjdCBvYmplY3RdIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzLnZhbHVlKS50b0xvd2VyQ2FzZSgpfSxjdXJyZW50TGFiZWw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sYWJlbHx8KHRoaXMuaXNPYmplY3Q/IiI6dGhpcy52YWx1ZSl9LGN1cnJlbnRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlfHx0aGlzLmxhYmVsfHwiIn0saXRlbVNlbGVjdGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VsZWN0Lm11bHRpcGxlP3RoaXMuY29udGFpbnModGhpcy5zZWxlY3QudmFsdWUsdGhpcy52YWx1ZSk6dGhpcy5pc0VxdWFsKHRoaXMudmFsdWUsdGhpcy5zZWxlY3QudmFsdWUpfSxsaW1pdFJlYWNoZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuc2VsZWN0Lm11bHRpcGxlJiYoIXRoaXMuaXRlbVNlbGVjdGVkJiYodGhpcy5zZWxlY3QudmFsdWV8fFtdKS5sZW5ndGg+PXRoaXMuc2VsZWN0Lm11bHRpcGxlTGltaXQmJnRoaXMuc2VsZWN0Lm11bHRpcGxlTGltaXQ+MCl9fSx3YXRjaDp7Y3VycmVudExhYmVsOmZ1bmN0aW9uKCl7dGhpcy5jcmVhdGVkfHx0aGlzLnNlbGVjdC5yZW1vdGV8fHRoaXMuZGlzcGF0Y2goIkVsU2VsZWN0Iiwic2V0U2VsZWN0ZWQiKX0sdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLnNlbGVjdCxyPW4ucmVtb3RlLG89bi52YWx1ZUtleTtpZighdGhpcy5jcmVhdGVkJiYhcil7aWYobyYmIm9iamVjdCI9PT0odm9pZCAwPT09ZT8idW5kZWZpbmVkIjppKGUpKSYmIm9iamVjdCI9PT0odm9pZCAwPT09dD8idW5kZWZpbmVkIjppKHQpKSYmZVtvXT09PXRbb10pcmV0dXJuO3RoaXMuZGlzcGF0Y2goIkVsU2VsZWN0Iiwic2V0U2VsZWN0ZWQiKX19fSxtZXRob2RzOntpc0VxdWFsOmZ1bmN0aW9uKGUsdCl7aWYodGhpcy5pc09iamVjdCl7dmFyIG49dGhpcy5zZWxlY3QudmFsdWVLZXk7cmV0dXJuKDAsYS5nZXRWYWx1ZUJ5UGF0aCkoZSxuKT09PSgwLGEuZ2V0VmFsdWVCeVBhdGgpKHQsbil9cmV0dXJuIGU9PT10fSxjb250YWluczpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06W10sbj1hcmd1bWVudHNbMV07aWYoIXRoaXMuaXNPYmplY3QpcmV0dXJuIHQuaW5kZXhPZihuKT4tMTt2YXIgcixvPShyPWUuc2VsZWN0LnZhbHVlS2V5LHt2OnQuc29tZShmdW5jdGlvbihlKXtyZXR1cm4oMCxhLmdldFZhbHVlQnlQYXRoKShlLHIpPT09KDAsYS5nZXRWYWx1ZUJ5UGF0aCkobixyKX0pfSk7cmV0dXJuIm9iamVjdCI9PT0odm9pZCAwPT09bz8idW5kZWZpbmVkIjppKG8pKT9vLnY6dm9pZCAwfSxoYW5kbGVHcm91cERpc2FibGVkOmZ1bmN0aW9uKGUpe3RoaXMuZ3JvdXBEaXNhYmxlZD1lfSxob3Zlckl0ZW06ZnVuY3Rpb24oKXt0aGlzLmRpc2FibGVkfHx0aGlzLmdyb3VwRGlzYWJsZWR8fCh0aGlzLnNlbGVjdC5ob3ZlckluZGV4PXRoaXMuc2VsZWN0Lm9wdGlvbnMuaW5kZXhPZih0aGlzKSl9LHNlbGVjdE9wdGlvbkNsaWNrOmZ1bmN0aW9uKCl7ITAhPT10aGlzLmRpc2FibGVkJiYhMCE9PXRoaXMuZ3JvdXBEaXNhYmxlZCYmdGhpcy5kaXNwYXRjaCgiRWxTZWxlY3QiLCJoYW5kbGVPcHRpb25DbGljayIsW3RoaXMsITBdKX0scXVlcnlDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy52aXNpYmxlPW5ldyBSZWdFeHAoKDAsYS5lc2NhcGVSZWdleHBTdHJpbmcpKGUpLCJpIikudGVzdCh0aGlzLmN1cnJlbnRMYWJlbCl8fHRoaXMuY3JlYXRlZCx0aGlzLnZpc2libGV8fHRoaXMuc2VsZWN0LmZpbHRlcmVkT3B0aW9uc0NvdW50LS19fSxjcmVhdGVkOmZ1bmN0aW9uKCl7dGhpcy5zZWxlY3Qub3B0aW9ucy5wdXNoKHRoaXMpLHRoaXMuc2VsZWN0LmNhY2hlZE9wdGlvbnMucHVzaCh0aGlzKSx0aGlzLnNlbGVjdC5vcHRpb25zQ291bnQrKyx0aGlzLnNlbGVjdC5maWx0ZXJlZE9wdGlvbnNDb3VudCsrLHRoaXMuJG9uKCJxdWVyeUNoYW5nZSIsdGhpcy5xdWVyeUNoYW5nZSksdGhpcy4kb24oImhhbmRsZUdyb3VwRGlzYWJsZWQiLHRoaXMuaGFuZGxlR3JvdXBEaXNhYmxlZCl9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLnNlbGVjdC5vbk9wdGlvbkRlc3Ryb3kodGhpcy5zZWxlY3Qub3B0aW9ucy5pbmRleE9mKHRoaXMpKX19fSwzNzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oImxpIix7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6ZS52aXNpYmxlLGV4cHJlc3Npb246InZpc2libGUifV0sc3RhdGljQ2xhc3M6ImVsLXNlbGVjdC1kcm9wZG93bl9faXRlbSIsY2xhc3M6e3NlbGVjdGVkOmUuaXRlbVNlbGVjdGVkLCJpcy1kaXNhYmxlZCI6ZS5kaXNhYmxlZHx8ZS5ncm91cERpc2FibGVkfHxlLmxpbWl0UmVhY2hlZCxob3ZlcjplLmhvdmVyfSxvbjp7bW91c2VlbnRlcjplLmhvdmVySXRlbSxjbGljazpmdW5jdGlvbih0KXt0LnN0b3BQcm9wYWdhdGlvbigpLGUuc2VsZWN0T3B0aW9uQ2xpY2sodCl9fX0sW2UuX3QoImRlZmF1bHQiLFtuKCJzcGFuIixbZS5fdihlLl9zKGUuY3VycmVudExhYmVsKSldKV0pXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn19KX0sU2ZCNzpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPSFuKCIrRTM5IikmJiFuKCJTODJsIikoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KG4oIk9OMDciKSgiZGl2IiksImEiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSl9LFN2bkY6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmInN5bWJvbCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIGV9O3QuZGVmYXVsdD1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1BcnJheSh0PjE/dC0xOjApLHM9MTtzPHQ7cysrKW5bcy0xXT1hcmd1bWVudHNbc107cmV0dXJuIDE9PT1uLmxlbmd0aCYmIm9iamVjdCI9PT1yKG5bMF0pJiYobj1uWzBdKSxuJiZuLmhhc093blByb3BlcnR5fHwobj17fSksZS5yZXBsYWNlKG8sZnVuY3Rpb24odCxyLG8scyl7dmFyIGE9dm9pZCAwO3JldHVybiJ7Ij09PWVbcy0xXSYmIn0iPT09ZVtzK3QubGVuZ3RoXT9vOm51bGw9PT0oYT0oMCxpLmhhc093bikobixvKT9uW29dOm51bGwpfHx2b2lkIDA9PT1hPyIiOmF9KX19O3ZhciBpPW4oInlsREoiKSxvPS8oJXwpXHsoWzAtOWEtekEtWl9dKylcfS9nfSxUTlYxOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiY0dHMiIpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHIuZm9yRWFjaChuLGZ1bmN0aW9uKG4pe2U9bihlLHQpfSksZX19LFRjUTc6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oIk1VNUQiKSxpPW4oIjUyZ0MiKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIHIoaShlKSl9fSxUbzNMOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigibGt0aiIpLGk9bigiMWtTNyIpLG89bigiTnBJUSIpLHM9bigic0IzZSIpLGE9bigiTVU1RCIpLGw9T2JqZWN0LmFzc2lnbjtlLmV4cG9ydHM9IWx8fG4oIlM4MmwiKShmdW5jdGlvbigpe3ZhciBlPXt9LHQ9e30sbj1TeW1ib2woKSxyPSJhYmNkZWZnaGlqa2xtbm9wcXJzdCI7cmV0dXJuIGVbbl09NyxyLnNwbGl0KCIiKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3RbZV09ZX0pLDchPWwoe30sZSlbbl18fE9iamVjdC5rZXlzKGwoe30sdCkpLmpvaW4oIiIpIT1yfSk/ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49cyhlKSxsPWFyZ3VtZW50cy5sZW5ndGgsdT0xLGM9aS5mLGQ9by5mO2w+dTspZm9yKHZhciBmLGg9YShhcmd1bWVudHNbdSsrXSkscD1jP3IoaCkuY29uY2F0KGMoaCkpOnIoaCksbT1wLmxlbmd0aCx2PTA7bT52OylkLmNhbGwoaCxmPXBbdisrXSkmJihuW2ZdPWhbZl0pO3JldHVybiBufTpsfSxVNWp1OmZ1bmN0aW9uKGUsdCxuKXtuKCJNNmEwIiksbigielFSOSIpLG4oIit0UFUiKSxuKCJDWHc5IiksbigiRXFCQyIpLG4oImpLVysiKSxlLmV4cG9ydHM9bigiRmVCbCIpLlByb21pc2V9LFV1R0Y6ZnVuY3Rpb24oZSx0KXt2YXIgbj1NYXRoLmNlaWwscj1NYXRoLmZsb29yO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gaXNOYU4oZT0rZSk/MDooZT4wP3I6bikoZSl9fSxWM3RBOmZ1bmN0aW9uKGUsdCxuKXtuKCJSNHdjIiksZS5leHBvcnRzPW4oIkZlQmwiKS5PYmplY3QuYXNzaWdufSwiVlUvOCI6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4scixpLG8pe3ZhciBzLGE9ZT1lfHx7fSxsPXR5cGVvZiBlLmRlZmF1bHQ7Im9iamVjdCIhPT1sJiYiZnVuY3Rpb24iIT09bHx8KHM9ZSxhPWUuZGVmYXVsdCk7dmFyIHUsYz0iZnVuY3Rpb24iPT10eXBlb2YgYT9hLm9wdGlvbnM6YTtpZih0JiYoYy5yZW5kZXI9dC5yZW5kZXIsYy5zdGF0aWNSZW5kZXJGbnM9dC5zdGF0aWNSZW5kZXJGbnMsYy5fY29tcGlsZWQ9ITApLG4mJihjLmZ1bmN0aW9uYWw9ITApLGkmJihjLl9zY29wZUlkPWkpLG8/KHU9ZnVuY3Rpb24oZSl7KGU9ZXx8dGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR8fHRoaXMucGFyZW50JiZ0aGlzLnBhcmVudC4kdm5vZGUmJnRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KXx8InVuZGVmaW5lZCI9PXR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9ffHwoZT1fX1ZVRV9TU1JfQ09OVEVYVF9fKSxyJiZyLmNhbGwodGhpcyxlKSxlJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cyYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG8pfSxjLl9zc3JSZWdpc3Rlcj11KTpyJiYodT1yKSx1KXt2YXIgZD1jLmZ1bmN0aW9uYWwsZj1kP2MucmVuZGVyOmMuYmVmb3JlQ3JlYXRlO2Q/KGMuX2luamVjdFN0eWxlcz11LGMucmVuZGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHUuY2FsbCh0KSxmKGUsdCl9KTpjLmJlZm9yZUNyZWF0ZT1mP1tdLmNvbmNhdChmLHUpOlt1XX1yZXR1cm57ZXNNb2R1bGU6cyxleHBvcnRzOmEsb3B0aW9uczpjfX19LFZpM1Q6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITAsdC5kZWZhdWx0PXtlbDp7Y29sb3JwaWNrZXI6e2NvbmZpcm06IuehruWumiIsY2xlYXI6Iua4heepuiJ9LGRhdGVwaWNrZXI6e25vdzoi5q2k5Yi7Iix0b2RheToi5LuK5aSpIixjYW5jZWw6IuWPlua2iCIsY2xlYXI6Iua4heepuiIsY29uZmlybToi56Gu5a6aIixzZWxlY3REYXRlOiLpgInmi6nml6XmnJ8iLHNlbGVjdFRpbWU6IumAieaLqeaXtumXtCIsc3RhcnREYXRlOiLlvIDlp4vml6XmnJ8iLHN0YXJ0VGltZToi5byA5aeL5pe26Ze0IixlbmREYXRlOiLnu5PmnZ/ml6XmnJ8iLGVuZFRpbWU6Iue7k+adn+aXtumXtCIscHJldlllYXI6IuWJjeS4gOW5tCIsbmV4dFllYXI6IuWQjuS4gOW5tCIscHJldk1vbnRoOiLkuIrkuKrmnIgiLG5leHRNb250aDoi5LiL5Liq5pyIIix5ZWFyOiLlubQiLG1vbnRoMToiMSDmnIgiLG1vbnRoMjoiMiDmnIgiLG1vbnRoMzoiMyDmnIgiLG1vbnRoNDoiNCDmnIgiLG1vbnRoNToiNSDmnIgiLG1vbnRoNjoiNiDmnIgiLG1vbnRoNzoiNyDmnIgiLG1vbnRoODoiOCDmnIgiLG1vbnRoOToiOSDmnIgiLG1vbnRoMTA6IjEwIOaciCIsbW9udGgxMToiMTEg5pyIIixtb250aDEyOiIxMiDmnIgiLHdlZWtzOntzdW46IuaXpSIsbW9uOiLkuIAiLHR1ZToi5LqMIix3ZWQ6IuS4iSIsdGh1OiLlm5siLGZyaToi5LqUIixzYXQ6IuWFrSJ9LG1vbnRoczp7amFuOiLkuIDmnIgiLGZlYjoi5LqM5pyIIixtYXI6IuS4ieaciCIsYXByOiLlm5vmnIgiLG1heToi5LqU5pyIIixqdW46IuWFreaciCIsanVsOiLkuIPmnIgiLGF1Zzoi5YWr5pyIIixzZXA6IuS5neaciCIsb2N0OiLljYHmnIgiLG5vdjoi5Y2B5LiA5pyIIixkZWM6IuWNgeS6jOaciCJ9fSxzZWxlY3Q6e2xvYWRpbmc6IuWKoOi9veS4rSIsbm9NYXRjaDoi5peg5Yy56YWN5pWw5o2uIixub0RhdGE6IuaXoOaVsOaNriIscGxhY2Vob2xkZXI6Iuivt+mAieaLqSJ9LGNhc2NhZGVyOntub01hdGNoOiLml6DljLnphY3mlbDmja4iLGxvYWRpbmc6IuWKoOi9veS4rSIscGxhY2Vob2xkZXI6Iuivt+mAieaLqSJ9LHBhZ2luYXRpb246e2dvdG86IuWJjeW+gCIscGFnZXNpemU6IuadoS/pobUiLHRvdGFsOiLlhbEge3RvdGFsfSDmnaEiLHBhZ2VDbGFzc2lmaWVyOiLpobUifSxtZXNzYWdlYm94Ont0aXRsZToi5o+Q56S6Iixjb25maXJtOiLnoa7lrpoiLGNhbmNlbDoi5Y+W5raIIixlcnJvcjoi6L6T5YWl55qE5pWw5o2u5LiN5ZCI5rOVISJ9LHVwbG9hZDp7ZGVsZXRlVGlwOiLmjIkgZGVsZXRlIOmUruWPr+WIoOmZpCIsZGVsZXRlOiLliKDpmaQiLHByZXZpZXc6Iuafpeeci+WbvueJhyIsY29udGludWU6Iue7p+e7reS4iuS8oCJ9LHRhYmxlOntlbXB0eVRleHQ6IuaaguaXoOaVsOaNriIsY29uZmlybUZpbHRlcjoi562b6YCJIixyZXNldEZpbHRlcjoi6YeN572uIixjbGVhckZpbHRlcjoi5YWo6YOoIixzdW1UZXh0OiLlkIjorqEifSx0cmVlOntlbXB0eVRleHQ6IuaaguaXoOaVsOaNriJ9LHRyYW5zZmVyOntub01hdGNoOiLml6DljLnphY3mlbDmja4iLG5vRGF0YToi5peg5pWw5o2uIix0aXRsZXM6WyLliJfooaggMSIsIuWIl+ihqCAyIl0sZmlsdGVyUGxhY2Vob2xkZXI6Iuivt+i+k+WFpeaQnOe0ouWGheWuuSIsbm9DaGVja2VkRm9ybWF0OiLlhbEge3RvdGFsfSDpobkiLGhhc0NoZWNrZWRGb3JtYXQ6IuW3sumAiSB7Y2hlY2tlZH0ve3RvdGFsfSDpobkifX19fSxXMm5VOmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpPWUuZXhwb3J0cz17fTtmdW5jdGlvbiBvKCl7dGhyb3cgbmV3IEVycm9yKCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkIil9ZnVuY3Rpb24gcygpe3Rocm93IG5ldyBFcnJvcigiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkIil9ZnVuY3Rpb24gYShlKXtpZihuPT09c2V0VGltZW91dClyZXR1cm4gc2V0VGltZW91dChlLDApO2lmKChuPT09b3x8IW4pJiZzZXRUaW1lb3V0KXJldHVybiBuPXNldFRpbWVvdXQsc2V0VGltZW91dChlLDApO3RyeXtyZXR1cm4gbihlLDApfWNhdGNoKHQpe3RyeXtyZXR1cm4gbi5jYWxsKG51bGwsZSwwKX1jYXRjaCh0KXtyZXR1cm4gbi5jYWxsKHRoaXMsZSwwKX19fSFmdW5jdGlvbigpe3RyeXtuPSJmdW5jdGlvbiI9PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6b31jYXRjaChlKXtuPW99dHJ5e3I9ImZ1bmN0aW9uIj09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6c31jYXRjaChlKXtyPXN9fSgpO3ZhciBsLHU9W10sYz0hMSxkPS0xO2Z1bmN0aW9uIGYoKXtjJiZsJiYoYz0hMSxsLmxlbmd0aD91PWwuY29uY2F0KHUpOmQ9LTEsdS5sZW5ndGgmJmgoKSl9ZnVuY3Rpb24gaCgpe2lmKCFjKXt2YXIgZT1hKGYpO2M9ITA7Zm9yKHZhciB0PXUubGVuZ3RoO3Q7KXtmb3IobD11LHU9W107KytkPHQ7KWwmJmxbZF0ucnVuKCk7ZD0tMSx0PXUubGVuZ3RofWw9bnVsbCxjPSExLGZ1bmN0aW9uKGUpe2lmKHI9PT1jbGVhclRpbWVvdXQpcmV0dXJuIGNsZWFyVGltZW91dChlKTtpZigocj09PXN8fCFyKSYmY2xlYXJUaW1lb3V0KXJldHVybiByPWNsZWFyVGltZW91dCxjbGVhclRpbWVvdXQoZSk7dHJ5e3IoZSl9Y2F0Y2godCl7dHJ5e3JldHVybiByLmNhbGwobnVsbCxlKX1jYXRjaCh0KXtyZXR1cm4gci5jYWxsKHRoaXMsZSl9fX0oZSl9fWZ1bmN0aW9uIHAoZSx0KXt0aGlzLmZ1bj1lLHRoaXMuYXJyYXk9dH1mdW5jdGlvbiBtKCl7fWkubmV4dFRpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKWZvcih2YXIgbj0xO248YXJndW1lbnRzLmxlbmd0aDtuKyspdFtuLTFdPWFyZ3VtZW50c1tuXTt1LnB1c2gobmV3IHAoZSx0KSksMSE9PXUubGVuZ3RofHxjfHxhKGgpfSxwLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfSxpLnRpdGxlPSJicm93c2VyIixpLmJyb3dzZXI9ITAsaS5lbnY9e30saS5hcmd2PVtdLGkudmVyc2lvbj0iIixpLnZlcnNpb25zPXt9LGkub249bSxpLmFkZExpc3RlbmVyPW0saS5vbmNlPW0saS5vZmY9bSxpLnJlbW92ZUxpc3RlbmVyPW0saS5yZW1vdmVBbGxMaXN0ZW5lcnM9bSxpLmVtaXQ9bSxpLnByZXBlbmRMaXN0ZW5lcj1tLGkucHJlcGVuZE9uY2VMaXN0ZW5lcj1tLGkubGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybltdfSxpLmJpbmRpbmc9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCIpfSxpLmN3ZD1mdW5jdGlvbigpe3JldHVybiIvIn0saS5jaGRpcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCIpfSxpLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fSxYOERPOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJue2VudW1lcmFibGU6ISgxJmUpLGNvbmZpZ3VyYWJsZTohKDImZSksd3JpdGFibGU6ISg0JmUpLHZhbHVlOnR9fX0sWGM0RzpmdW5jdGlvbihlLHQsbil7dmFyIHI9bigibGt0aiIpLGk9bigiMWtTNyIpLG89bigiTnBJUSIpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1yKGUpLG49aS5mO2lmKG4pZm9yKHZhciBzLGE9bihlKSxsPW8uZix1PTA7YS5sZW5ndGg+dTspbC5jYWxsKGUscz1hW3UrK10pJiZ0LnB1c2gocyk7cmV0dXJuIHR9fSxYbVdNOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiS0NMWSIpLGk9bigiY0dHMiIpLG89bigiZnVHayIpLHM9bigieEx0UiIpLGE9bigiZEl3UCIpLGw9bigicVJmSSIpO2Z1bmN0aW9uIHUoZSl7dGhpcy5kZWZhdWx0cz1lLHRoaXMuaW50ZXJjZXB0b3JzPXtyZXF1ZXN0Om5ldyBvLHJlc3BvbnNlOm5ldyBvfX11LnByb3RvdHlwZS5yZXF1ZXN0PWZ1bmN0aW9uKGUpeyJzdHJpbmciPT10eXBlb2YgZSYmKGU9aS5tZXJnZSh7dXJsOmFyZ3VtZW50c1swXX0sYXJndW1lbnRzWzFdKSksKGU9aS5tZXJnZShyLHRoaXMuZGVmYXVsdHMse21ldGhvZDoiZ2V0In0sZSkpLm1ldGhvZD1lLm1ldGhvZC50b0xvd2VyQ2FzZSgpLGUuYmFzZVVSTCYmIWEoZS51cmwpJiYoZS51cmw9bChlLmJhc2VVUkwsZS51cmwpKTt2YXIgdD1bcyx2b2lkIDBdLG49UHJvbWlzZS5yZXNvbHZlKGUpO2Zvcih0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24oZSl7dC51bnNoaWZ0KGUuZnVsZmlsbGVkLGUucmVqZWN0ZWQpfSksdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbihlKXt0LnB1c2goZS5mdWxmaWxsZWQsZS5yZWplY3RlZCl9KTt0Lmxlbmd0aDspbj1uLnRoZW4odC5zaGlmdCgpLHQuc2hpZnQoKSk7cmV0dXJuIG59LGkuZm9yRWFjaChbImRlbGV0ZSIsImdldCIsImhlYWQiLCJvcHRpb25zIl0sZnVuY3Rpb24oZSl7dS5wcm90b3R5cGVbZV09ZnVuY3Rpb24odCxuKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KGkubWVyZ2Uobnx8e30se21ldGhvZDplLHVybDp0fSkpfX0pLGkuZm9yRWFjaChbInBvc3QiLCJwdXQiLCJwYXRjaCJdLGZ1bmN0aW9uKGUpe3UucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQsbixyKXtyZXR1cm4gdGhpcy5yZXF1ZXN0KGkubWVyZ2Uocnx8e30se21ldGhvZDplLHVybDp0LGRhdGE6bn0pKX19KSxlLmV4cG9ydHM9dX0sWTVtUzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByLGk9bigibEZrYyIpO2kuY2FuVXNlRE9NJiYocj1kb2N1bWVudC5pbXBsZW1lbnRhdGlvbiYmZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSYmITAhPT1kb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCIiLCIiKSkKLyoqCiAqIENoZWNrcyBpZiBhbiBldmVudCBpcyBzdXBwb3J0ZWQgaW4gdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGVudmlyb25tZW50LgogKgogKiBOT1RFOiBUaGlzIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5IGZvciBub24tZ2VuZXJpYyBldmVudHMgc3VjaCBhcyBgY2hhbmdlYCwKICogYHJlc2V0YCwgYGxvYWRgLCBgZXJyb3JgLCBhbmQgYHNlbGVjdGAuCiAqCiAqIEJvcnJvd3MgZnJvbSBNb2Rlcm5penIuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVTdWZmaXggRXZlbnQgbmFtZSwgZS5nLiAiY2xpY2siLgogKiBAcGFyYW0gez9ib29sZWFufSBjYXB0dXJlIENoZWNrIGlmIHRoZSBjYXB0dXJlIHBoYXNlIGlzIHN1cHBvcnRlZC4KICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgc3VwcG9ydGVkLgogKiBAaW50ZXJuYWwKICogQGxpY2Vuc2UgTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUCiAqLyxlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZighaS5jYW5Vc2VET018fHQmJiEoImFkZEV2ZW50TGlzdGVuZXIiaW4gZG9jdW1lbnQpKXJldHVybiExO3ZhciBuPSJvbiIrZSxvPW4gaW4gZG9jdW1lbnQ7aWYoIW8pe3ZhciBzPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpO3Muc2V0QXR0cmlidXRlKG4sInJldHVybjsiKSxvPSJmdW5jdGlvbiI9PXR5cGVvZiBzW25dfXJldHVybiFvJiZyJiYid2hlZWwiPT09ZSYmKG89ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgiRXZlbnRzLndoZWVsIiwiMy4wIikpLG99fSxZQWhCOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiKytLMyIpLGk9bigiWTVtUyIpLG89MTAscz00MCxhPTgwMDtmdW5jdGlvbiBsKGUpe3ZhciB0PTAsbj0wLHI9MCxpPTA7cmV0dXJuImRldGFpbCJpbiBlJiYobj1lLmRldGFpbCksIndoZWVsRGVsdGEiaW4gZSYmKG49LWUud2hlZWxEZWx0YS8xMjApLCJ3aGVlbERlbHRhWSJpbiBlJiYobj0tZS53aGVlbERlbHRhWS8xMjApLCJ3aGVlbERlbHRhWCJpbiBlJiYodD0tZS53aGVlbERlbHRhWC8xMjApLCJheGlzImluIGUmJmUuYXhpcz09PWUuSE9SSVpPTlRBTF9BWElTJiYodD1uLG49MCkscj10Km8saT1uKm8sImRlbHRhWSJpbiBlJiYoaT1lLmRlbHRhWSksImRlbHRhWCJpbiBlJiYocj1lLmRlbHRhWCksKHJ8fGkpJiZlLmRlbHRhTW9kZSYmKDE9PWUuZGVsdGFNb2RlPyhyKj1zLGkqPXMpOihyKj1hLGkqPWEpKSxyJiYhdCYmKHQ9cjwxPy0xOjEpLGkmJiFuJiYobj1pPDE/LTE6MSkse3NwaW5YOnQsc3Bpblk6bixwaXhlbFg6cixwaXhlbFk6aX19bC5nZXRFdmVudFR5cGU9ZnVuY3Rpb24oKXtyZXR1cm4gci5maXJlZm94KCk/IkRPTU1vdXNlU2Nyb2xsIjppKCJ3aGVlbCIpPyJ3aGVlbCI6Im1vdXNld2hlZWwifSxlLmV4cG9ydHM9bH0sWW9iazpmdW5jdGlvbihlLHQsbil7dmFyIHI9bigiNzdQbCIpLGk9bigicWlvNiIpLG89bigieG5jOSIpLHM9bigiYXgzZCIpKCJJRV9QUk9UTyIpLGE9ZnVuY3Rpb24oKXt9LGw9ZnVuY3Rpb24oKXt2YXIgZSx0PW4oIk9OMDciKSgiaWZyYW1lIikscj1vLmxlbmd0aDtmb3IodC5zdHlsZS5kaXNwbGF5PSJub25lIixuKCJSUExWIikuYXBwZW5kQ2hpbGQodCksdC5zcmM9ImphdmFzY3JpcHQ6IiwoZT10LmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQpLm9wZW4oKSxlLndyaXRlKCI8c2NyaXB0PmRvY3VtZW50LkY9T2JqZWN0PFwvc2NyaXB0PiIpLGUuY2xvc2UoKSxsPWUuRjtyLS07KWRlbGV0ZSBsLnByb3RvdHlwZVtvW3JdXTtyZXR1cm4gbCgpfTtlLmV4cG9ydHM9T2JqZWN0LmNyZWF0ZXx8ZnVuY3Rpb24oZSx0KXt2YXIgbjtyZXR1cm4gbnVsbCE9PWU/KGEucHJvdG90eXBlPXIoZSksbj1uZXcgYSxhLnByb3RvdHlwZT1udWxsLG5bc109ZSk6bj1sKCksdm9pZCAwPT09dD9uOmkobix0KX19LFpjd2c6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9bigiMmt2QSIpO3ZhciBpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpeyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfSh0aGlzLGUpfXJldHVybiBlLnByb3RvdHlwZS5iZWZvcmVFbnRlcj1mdW5jdGlvbihlKXsoMCxyLmFkZENsYXNzKShlLCJjb2xsYXBzZS10cmFuc2l0aW9uIiksZS5kYXRhc2V0fHwoZS5kYXRhc2V0PXt9KSxlLmRhdGFzZXQub2xkUGFkZGluZ1RvcD1lLnN0eWxlLnBhZGRpbmdUb3AsZS5kYXRhc2V0Lm9sZFBhZGRpbmdCb3R0b209ZS5zdHlsZS5wYWRkaW5nQm90dG9tLGUuc3R5bGUuaGVpZ2h0PSIwIixlLnN0eWxlLnBhZGRpbmdUb3A9MCxlLnN0eWxlLnBhZGRpbmdCb3R0b209MH0sZS5wcm90b3R5cGUuZW50ZXI9ZnVuY3Rpb24oZSl7ZS5kYXRhc2V0Lm9sZE92ZXJmbG93PWUuc3R5bGUub3ZlcmZsb3csMCE9PWUuc2Nyb2xsSGVpZ2h0PyhlLnN0eWxlLmhlaWdodD1lLnNjcm9sbEhlaWdodCsicHgiLGUuc3R5bGUucGFkZGluZ1RvcD1lLmRhdGFzZXQub2xkUGFkZGluZ1RvcCxlLnN0eWxlLnBhZGRpbmdCb3R0b209ZS5kYXRhc2V0Lm9sZFBhZGRpbmdCb3R0b20pOihlLnN0eWxlLmhlaWdodD0iIixlLnN0eWxlLnBhZGRpbmdUb3A9ZS5kYXRhc2V0Lm9sZFBhZGRpbmdUb3AsZS5zdHlsZS5wYWRkaW5nQm90dG9tPWUuZGF0YXNldC5vbGRQYWRkaW5nQm90dG9tKSxlLnN0eWxlLm92ZXJmbG93PSJoaWRkZW4ifSxlLnByb3RvdHlwZS5hZnRlckVudGVyPWZ1bmN0aW9uKGUpeygwLHIucmVtb3ZlQ2xhc3MpKGUsImNvbGxhcHNlLXRyYW5zaXRpb24iKSxlLnN0eWxlLmhlaWdodD0iIixlLnN0eWxlLm92ZXJmbG93PWUuZGF0YXNldC5vbGRPdmVyZmxvd30sZS5wcm90b3R5cGUuYmVmb3JlTGVhdmU9ZnVuY3Rpb24oZSl7ZS5kYXRhc2V0fHwoZS5kYXRhc2V0PXt9KSxlLmRhdGFzZXQub2xkUGFkZGluZ1RvcD1lLnN0eWxlLnBhZGRpbmdUb3AsZS5kYXRhc2V0Lm9sZFBhZGRpbmdCb3R0b209ZS5zdHlsZS5wYWRkaW5nQm90dG9tLGUuZGF0YXNldC5vbGRPdmVyZmxvdz1lLnN0eWxlLm92ZXJmbG93LGUuc3R5bGUuaGVpZ2h0PWUuc2Nyb2xsSGVpZ2h0KyJweCIsZS5zdHlsZS5vdmVyZmxvdz0iaGlkZGVuIn0sZS5wcm90b3R5cGUubGVhdmU9ZnVuY3Rpb24oZSl7MCE9PWUuc2Nyb2xsSGVpZ2h0JiYoKDAsci5hZGRDbGFzcykoZSwiY29sbGFwc2UtdHJhbnNpdGlvbiIpLGUuc3R5bGUuaGVpZ2h0PTAsZS5zdHlsZS5wYWRkaW5nVG9wPTAsZS5zdHlsZS5wYWRkaW5nQm90dG9tPTApfSxlLnByb3RvdHlwZS5hZnRlckxlYXZlPWZ1bmN0aW9uKGUpeygwLHIucmVtb3ZlQ2xhc3MpKGUsImNvbGxhcHNlLXRyYW5zaXRpb24iKSxlLnN0eWxlLmhlaWdodD0iIixlLnN0eWxlLm92ZXJmbG93PWUuZGF0YXNldC5vbGRPdmVyZmxvdyxlLnN0eWxlLnBhZGRpbmdUb3A9ZS5kYXRhc2V0Lm9sZFBhZGRpbmdUb3AsZS5zdHlsZS5wYWRkaW5nQm90dG9tPWUuZGF0YXNldC5vbGRQYWRkaW5nQm90dG9tfSxlfSgpO3QuZGVmYXVsdD17bmFtZToiRWxDb2xsYXBzZVRyYW5zaXRpb24iLGZ1bmN0aW9uYWw6ITAscmVuZGVyOmZ1bmN0aW9uKGUsdCl7dmFyIG49dC5jaGlsZHJlbjtyZXR1cm4gZSgidHJhbnNpdGlvbiIse29uOm5ldyBpfSxuKX19fSxaemlwOmZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9e2RlZmF1bHQ6bigiL242USIpLF9fZXNNb2R1bGU6ITB9fSxhTXdXOmZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihyKXtpZih0W3JdKXJldHVybiB0W3JdLmV4cG9ydHM7dmFyIGk9dFtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxyKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCwiYSIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9Ii9kaXN0LyIsbihuLnM9MjA3KX0oezE0OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oIk9OM08iKX0sMjpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJ5bERKIil9LDIwOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImZVcVciKX0sMjA3OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigyMDgpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O28uZGVmYXVsdC5pbnN0YWxsPWZ1bmN0aW9uKGUpe2UuY29tcG9uZW50KG8uZGVmYXVsdC5uYW1lLG8uZGVmYXVsdCl9LHQuZGVmYXVsdD1vLmRlZmF1bHR9LDIwODpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj11KG4oNykpLGk9dShuKDE0KSksbz1uKDMpLHM9bigyMCksYT1uKDIpLGw9dShuKDQpKTtmdW5jdGlvbiB1KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX10LmRlZmF1bHQ9e25hbWU6IkVsVG9vbHRpcCIsbWl4aW5zOltyLmRlZmF1bHRdLHByb3BzOntvcGVuRGVsYXk6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0sZGlzYWJsZWQ6Qm9vbGVhbixtYW51YWw6Qm9vbGVhbixlZmZlY3Q6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6ImRhcmsifSxhcnJvd09mZnNldDp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxwb3BwZXJDbGFzczpTdHJpbmcsY29udGVudDpTdHJpbmcsdmlzaWJsZUFycm93OntkZWZhdWx0OiEwfSx0cmFuc2l0aW9uOnt0eXBlOlN0cmluZyxkZWZhdWx0OiJlbC1mYWRlLWluLWxpbmVhciJ9LHBvcHBlck9wdGlvbnM6e2RlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm57Ym91bmRhcmllc1BhZGRpbmc6MTAsZ3B1QWNjZWxlcmF0aW9uOiExfX19LGVudGVyYWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGhpZGVBZnRlcjp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfX0sZGF0YTpmdW5jdGlvbigpe3JldHVybnt0aW1lb3V0UGVuZGluZzpudWxsLGZvY3VzaW5nOiExfX0sY29tcHV0ZWQ6e3Rvb2x0aXBJZDpmdW5jdGlvbigpe3JldHVybiJlbC10b29sdGlwLSIrKDAsYS5nZW5lcmF0ZUlkKSgpfX0sYmVmb3JlQ3JlYXRlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiRpc1NlcnZlcnx8KHRoaXMucG9wcGVyVk09bmV3IGwuZGVmYXVsdCh7ZGF0YTp7bm9kZToiIn0scmVuZGVyOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm5vZGV9fSkuJG1vdW50KCksdGhpcy5kZWJvdW5jZUNsb3NlPSgwLGkuZGVmYXVsdCkoMjAwLGZ1bmN0aW9uKCl7cmV0dXJuIGUuaGFuZGxlQ2xvc2VQb3BwZXIoKX0pKX0scmVuZGVyOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aWYodGhpcy5wb3BwZXJWTSYmKHRoaXMucG9wcGVyVk0ubm9kZT1lKCJ0cmFuc2l0aW9uIix7YXR0cnM6e25hbWU6dGhpcy50cmFuc2l0aW9ufSxvbjp7YWZ0ZXJMZWF2ZTp0aGlzLmRvRGVzdHJveX19LFtlKCJkaXYiLHtvbjp7bW91c2VsZWF2ZTpmdW5jdGlvbigpe3Quc2V0RXhwZWN0ZWRTdGF0ZSghMSksdC5kZWJvdW5jZUNsb3NlKCl9LG1vdXNlZW50ZXI6ZnVuY3Rpb24oKXt0LnNldEV4cGVjdGVkU3RhdGUoITApfX0scmVmOiJwb3BwZXIiLGF0dHJzOntyb2xlOiJ0b29sdGlwIixpZDp0aGlzLnRvb2x0aXBJZCwiYXJpYS1oaWRkZW4iOnRoaXMuZGlzYWJsZWR8fCF0aGlzLnNob3dQb3BwZXI/InRydWUiOiJmYWxzZSJ9LGRpcmVjdGl2ZXM6W3tuYW1lOiJzaG93Iix2YWx1ZTohdGhpcy5kaXNhYmxlZCYmdGhpcy5zaG93UG9wcGVyfV0sY2xhc3M6WyJlbC10b29sdGlwX19wb3BwZXIiLCJpcy0iK3RoaXMuZWZmZWN0LHRoaXMucG9wcGVyQ2xhc3NdfSxbdGhpcy4kc2xvdHMuY29udGVudHx8dGhpcy5jb250ZW50XSldKSksIXRoaXMuJHNsb3RzLmRlZmF1bHR8fCF0aGlzLiRzbG90cy5kZWZhdWx0Lmxlbmd0aClyZXR1cm4gdGhpcy4kc2xvdHMuZGVmYXVsdDt2YXIgbj0oMCxzLmdldEZpcnN0Q29tcG9uZW50Q2hpbGQpKHRoaXMuJHNsb3RzLmRlZmF1bHQpO2lmKCFuKXJldHVybiBuO3ZhciByPW4uZGF0YT1uLmRhdGF8fHt9O3JldHVybiByLnN0YXRpY0NsYXNzPXRoaXMuY29uY2F0Q2xhc3Moci5zdGF0aWNDbGFzcywiZWwtdG9vbHRpcCIpLG59LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMucmVmZXJlbmNlRWxtPXRoaXMuJGVsLDE9PT10aGlzLiRlbC5ub2RlVHlwZSYmKHRoaXMuJGVsLnNldEF0dHJpYnV0ZSgiYXJpYS1kZXNjcmliZWRieSIsdGhpcy50b29sdGlwSWQpLHRoaXMuJGVsLnNldEF0dHJpYnV0ZSgidGFiaW5kZXgiLDApLCgwLG8ub24pKHRoaXMucmVmZXJlbmNlRWxtLCJtb3VzZWVudGVyIix0aGlzLnNob3cpLCgwLG8ub24pKHRoaXMucmVmZXJlbmNlRWxtLCJtb3VzZWxlYXZlIix0aGlzLmhpZGUpLCgwLG8ub24pKHRoaXMucmVmZXJlbmNlRWxtLCJmb2N1cyIsZnVuY3Rpb24oKXtpZihlLiRzbG90cy5kZWZhdWx0JiZlLiRzbG90cy5kZWZhdWx0Lmxlbmd0aCl7dmFyIHQ9ZS4kc2xvdHMuZGVmYXVsdFswXS5jb21wb25lbnRJbnN0YW5jZTt0JiZ0LmZvY3VzP3QuZm9jdXMoKTplLmhhbmRsZUZvY3VzKCl9ZWxzZSBlLmhhbmRsZUZvY3VzKCl9KSwoMCxvLm9uKSh0aGlzLnJlZmVyZW5jZUVsbSwiYmx1ciIsdGhpcy5oYW5kbGVCbHVyKSwoMCxvLm9uKSh0aGlzLnJlZmVyZW5jZUVsbSwiY2xpY2siLHRoaXMucmVtb3ZlRm9jdXNpbmcpKX0sd2F0Y2g6e2ZvY3VzaW5nOmZ1bmN0aW9uKGUpe2U/KDAsby5hZGRDbGFzcykodGhpcy5yZWZlcmVuY2VFbG0sImZvY3VzaW5nIik6KDAsby5yZW1vdmVDbGFzcykodGhpcy5yZWZlcmVuY2VFbG0sImZvY3VzaW5nIil9fSxtZXRob2RzOntzaG93OmZ1bmN0aW9uKCl7dGhpcy5zZXRFeHBlY3RlZFN0YXRlKCEwKSx0aGlzLmhhbmRsZVNob3dQb3BwZXIoKX0saGlkZTpmdW5jdGlvbigpe3RoaXMuc2V0RXhwZWN0ZWRTdGF0ZSghMSksdGhpcy5kZWJvdW5jZUNsb3NlKCl9LGhhbmRsZUZvY3VzOmZ1bmN0aW9uKCl7dGhpcy5mb2N1c2luZz0hMCx0aGlzLnNob3coKX0saGFuZGxlQmx1cjpmdW5jdGlvbigpe3RoaXMuZm9jdXNpbmc9ITEsdGhpcy5oaWRlKCl9LHJlbW92ZUZvY3VzaW5nOmZ1bmN0aW9uKCl7dGhpcy5mb2N1c2luZz0hMX0sY29uY2F0Q2xhc3M6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZSYmZS5pbmRleE9mKHQpPi0xP2U6ZT90P2UrIiAiK3Q6ZTp0fHwiIn0saGFuZGxlU2hvd1BvcHBlcjpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5leHBlY3RlZFN0YXRlJiYhdGhpcy5tYW51YWwmJihjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KSx0aGlzLnRpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe2Uuc2hvd1BvcHBlcj0hMH0sdGhpcy5vcGVuRGVsYXkpLHRoaXMuaGlkZUFmdGVyPjAmJih0aGlzLnRpbWVvdXRQZW5kaW5nPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtlLnNob3dQb3BwZXI9ITF9LHRoaXMuaGlkZUFmdGVyKSkpfSxoYW5kbGVDbG9zZVBvcHBlcjpmdW5jdGlvbigpe3RoaXMuZW50ZXJhYmxlJiZ0aGlzLmV4cGVjdGVkU3RhdGV8fHRoaXMubWFudWFsfHwoY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCksdGhpcy50aW1lb3V0UGVuZGluZyYmY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dFBlbmRpbmcpLHRoaXMuc2hvd1BvcHBlcj0hMSx0aGlzLmRpc2FibGVkJiZ0aGlzLmRvRGVzdHJveSgpKX0sc2V0RXhwZWN0ZWRTdGF0ZTpmdW5jdGlvbihlKXshMT09PWUmJmNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRQZW5kaW5nKSx0aGlzLmV4cGVjdGVkU3RhdGU9ZX19LGRlc3Ryb3llZDpmdW5jdGlvbigpe3ZhciBlPXRoaXMucmVmZXJlbmNlRWxtOygwLG8ub2ZmKShlLCJtb3VzZWVudGVyIix0aGlzLnNob3cpLCgwLG8ub2ZmKShlLCJtb3VzZWxlYXZlIix0aGlzLmhpZGUpLCgwLG8ub2ZmKShlLCJmb2N1cyIsdGhpcy5oYW5kbGVGb2N1cyksKDAsby5vZmYpKGUsImJsdXIiLHRoaXMuaGFuZGxlQmx1ciksKDAsby5vZmYpKGUsImNsaWNrIix0aGlzLnJlbW92ZUZvY3VzaW5nKX19fSwzOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oIjJrdkEiKX0sNDpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCI3K3VXIil9LDc6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiZkt4MyIpfX0pfSxhVzVsOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwLHQuZGVmYXVsdD17bW91bnRlZDpmdW5jdGlvbigpe30sbWV0aG9kczp7Z2V0TWlncmF0aW5nQ29uZmlnOmZ1bmN0aW9uKCl7cmV0dXJue3Byb3BzOnt9LGV2ZW50czp7fX19fX19LGF4M2Q6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oImU4QUIiKSgia2V5cyIpLGk9bigiM0VvKyIpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gcltlXXx8KHJbZV09aShlKSl9fSxiT2RJOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigiQzRNViIpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O3QuZGVmYXVsdD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHQgaW4gZT8oMCxvLmRlZmF1bHQpKGUsdCx7dmFsdWU6bixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOmVbdF09bixlfX0sYlJyTTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oIjdLdkQiKSxpPW4oIkZlQmwiKSxvPW4oImV2RDUiKSxzPW4oIitFMzkiKSxhPW4oImRTemQiKSgic3BlY2llcyIpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD0iZnVuY3Rpb24iPT10eXBlb2YgaVtlXT9pW2VdOnJbZV07cyYmdCYmIXRbYV0mJm8uZih0LGEse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc319KX19LCJjL1RyIjpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPXtkZWZhdWx0Om4oIjV6ZGUiKSxfX2VzTW9kdWxlOiEwfX0sY0dHMjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oIkpQK3oiKSxpPW4oIlJlM3IiKSxvPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7ZnVuY3Rpb24gcyhlKXtyZXR1cm4iW29iamVjdCBBcnJheV0iPT09by5jYWxsKGUpfWZ1bmN0aW9uIGEoZSl7cmV0dXJuIG51bGwhPT1lJiYib2JqZWN0Ij09dHlwZW9mIGV9ZnVuY3Rpb24gbChlKXtyZXR1cm4iW29iamVjdCBGdW5jdGlvbl0iPT09by5jYWxsKGUpfWZ1bmN0aW9uIHUoZSx0KXtpZihudWxsIT09ZSYmdm9pZCAwIT09ZSlpZigib2JqZWN0Ij09dHlwZW9mIGV8fHMoZSl8fChlPVtlXSkscyhlKSlmb3IodmFyIG49MCxyPWUubGVuZ3RoO248cjtuKyspdC5jYWxsKG51bGwsZVtuXSxuLGUpO2Vsc2UgZm9yKHZhciBpIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsaSkmJnQuY2FsbChudWxsLGVbaV0saSxlKX1lLmV4cG9ydHM9e2lzQXJyYXk6cyxpc0FycmF5QnVmZmVyOmZ1bmN0aW9uKGUpe3JldHVybiJbb2JqZWN0IEFycmF5QnVmZmVyXSI9PT1vLmNhbGwoZSl9LGlzQnVmZmVyOmksaXNGb3JtRGF0YTpmdW5jdGlvbihlKXtyZXR1cm4idW5kZWZpbmVkIiE9dHlwZW9mIEZvcm1EYXRhJiZlIGluc3RhbmNlb2YgRm9ybURhdGF9LGlzQXJyYXlCdWZmZXJWaWV3OmZ1bmN0aW9uKGUpe3JldHVybiJ1bmRlZmluZWQiIT10eXBlb2YgQXJyYXlCdWZmZXImJkFycmF5QnVmZmVyLmlzVmlldz9BcnJheUJ1ZmZlci5pc1ZpZXcoZSk6ZSYmZS5idWZmZXImJmUuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXJ9LGlzU3RyaW5nOmZ1bmN0aW9uKGUpe3JldHVybiJzdHJpbmciPT10eXBlb2YgZX0saXNOdW1iZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIm51bWJlciI9PXR5cGVvZiBlfSxpc09iamVjdDphLGlzVW5kZWZpbmVkOmZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lfSxpc0RhdGU6ZnVuY3Rpb24oZSl7cmV0dXJuIltvYmplY3QgRGF0ZV0iPT09by5jYWxsKGUpfSxpc0ZpbGU6ZnVuY3Rpb24oZSl7cmV0dXJuIltvYmplY3QgRmlsZV0iPT09by5jYWxsKGUpfSxpc0Jsb2I6ZnVuY3Rpb24oZSl7cmV0dXJuIltvYmplY3QgQmxvYl0iPT09by5jYWxsKGUpfSxpc0Z1bmN0aW9uOmwsaXNTdHJlYW06ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSkmJmwoZS5waXBlKX0saXNVUkxTZWFyY2hQYXJhbXM6ZnVuY3Rpb24oZSl7cmV0dXJuInVuZGVmaW5lZCIhPXR5cGVvZiBVUkxTZWFyY2hQYXJhbXMmJmUgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXN9LGlzU3RhbmRhcmRCcm93c2VyRW52OmZ1bmN0aW9uKCl7cmV0dXJuKCJ1bmRlZmluZWQiPT10eXBlb2YgbmF2aWdhdG9yfHwiUmVhY3ROYXRpdmUiIT09bmF2aWdhdG9yLnByb2R1Y3QpJiYidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdyYmInVuZGVmaW5lZCIhPXR5cGVvZiBkb2N1bWVudH0sZm9yRWFjaDp1LG1lcmdlOmZ1bmN0aW9uIGUoKXt2YXIgdD17fTtmdW5jdGlvbiBuKG4scil7Im9iamVjdCI9PXR5cGVvZiB0W3JdJiYib2JqZWN0Ij09dHlwZW9mIG4/dFtyXT1lKHRbcl0sbik6dFtyXT1ufWZvcih2YXIgcj0wLGk9YXJndW1lbnRzLmxlbmd0aDtyPGk7cisrKXUoYXJndW1lbnRzW3JdLG4pO3JldHVybiB0fSxleHRlbmQ6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB1KHQsZnVuY3Rpb24odCxpKXtlW2ldPW4mJiJmdW5jdGlvbiI9PXR5cGVvZiB0P3IodCxuKTp0fSksZX0sdHJpbTpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9eXHMqLywiIikucmVwbGFjZSgvXHMqJC8sIiIpfX19LGNXeHk6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCJkVk9QIik7ZnVuY3Rpb24gaShlKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uIik7dmFyIHQ7dGhpcy5wcm9taXNlPW5ldyBQcm9taXNlKGZ1bmN0aW9uKGUpe3Q9ZX0pO3ZhciBuPXRoaXM7ZShmdW5jdGlvbihlKXtuLnJlYXNvbnx8KG4ucmVhc29uPW5ldyByKGUpLHQobi5yZWFzb24pKX0pfWkucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQ9ZnVuY3Rpb24oKXtpZih0aGlzLnJlYXNvbil0aHJvdyB0aGlzLnJlYXNvbn0saS5zb3VyY2U9ZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm57dG9rZW46bmV3IGkoZnVuY3Rpb24odCl7ZT10fSksY2FuY2VsOmV9fSxlLmV4cG9ydHM9aX0sY3JscDpmdW5jdGlvbihlLHQsbil7dmFyIHI9bigiN0t2RCIpLGk9bigiRmVCbCIpLG89bigiTzRnOCIpLHM9bigiS2g0VyIpLGE9bigiZXZENSIpLmY7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PWkuU3ltYm9sfHwoaS5TeW1ib2w9bz97fTpyLlN5bWJvbHx8e30pOyJfIj09ZS5jaGFyQXQoMCl8fGUgaW4gdHx8YSh0LGUse3ZhbHVlOnMuZihlKX0pfX0sZEl3UDpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4vXihbYS16XVthLXpcZFwrXC1cLl0qOik/XC9cLy9pLnRlc3QoZSl9fSxkTkRiOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm57ZTohMSx2OmUoKX19Y2F0Y2goZSl7cmV0dXJue2U6ITAsdjplfX19fSxkU3pkOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCJlOEFCIikoIndrcyIpLGk9bigiM0VvKyIpLG89bigiN0t2RCIpLlN5bWJvbCxzPSJmdW5jdGlvbiI9PXR5cGVvZiBvOyhlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIHJbZV18fChyW2VdPXMmJm9bZV18fChzP286aSkoIlN5bWJvbC4iK2UpKX0pLnN0b3JlPXJ9LGRWT1A6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKGUpe3RoaXMubWVzc2FnZT1lfXIucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIkNhbmNlbCIrKHRoaXMubWVzc2FnZT8iOiAiK3RoaXMubWVzc2FnZToiIil9LHIucHJvdG90eXBlLl9fQ0FOQ0VMX189ITAsZS5leHBvcnRzPXJ9LGRZMHk6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oImRTemQiKSgiaXRlcmF0b3IiKSxpPSExO3RyeXt2YXIgbz1bN11bcl0oKTtvLnJldHVybj1mdW5jdGlvbigpe2k9ITB9LEFycmF5LmZyb20obyxmdW5jdGlvbigpe3Rocm93IDJ9KX1jYXRjaChlKXt9ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYoIXQmJiFpKXJldHVybiExO3ZhciBuPSExO3RyeXt2YXIgbz1bN10scz1vW3JdKCk7cy5uZXh0PWZ1bmN0aW9uKCl7cmV0dXJue2RvbmU6bj0hMH19LG9bcl09ZnVuY3Rpb24oKXtyZXR1cm4gc30sZShvKX1jYXRjaChlKXt9cmV0dXJuIG59fSxlMEJtOmZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihyKXtpZih0W3JdKXJldHVybiB0W3JdLmV4cG9ydHM7dmFyIGk9dFtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxyKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCwiYSIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9Ii9kaXN0LyIsbihuLnM9MTM4KX0oezA6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4scixpLG8pe3ZhciBzLGE9ZT1lfHx7fSxsPXR5cGVvZiBlLmRlZmF1bHQ7Im9iamVjdCIhPT1sJiYiZnVuY3Rpb24iIT09bHx8KHM9ZSxhPWUuZGVmYXVsdCk7dmFyIHUsYz0iZnVuY3Rpb24iPT10eXBlb2YgYT9hLm9wdGlvbnM6YTtpZih0JiYoYy5yZW5kZXI9dC5yZW5kZXIsYy5zdGF0aWNSZW5kZXJGbnM9dC5zdGF0aWNSZW5kZXJGbnMsYy5fY29tcGlsZWQ9ITApLG4mJihjLmZ1bmN0aW9uYWw9ITApLGkmJihjLl9zY29wZUlkPWkpLG8/KHU9ZnVuY3Rpb24oZSl7KGU9ZXx8dGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR8fHRoaXMucGFyZW50JiZ0aGlzLnBhcmVudC4kdm5vZGUmJnRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KXx8InVuZGVmaW5lZCI9PXR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9ffHwoZT1fX1ZVRV9TU1JfQ09OVEVYVF9fKSxyJiZyLmNhbGwodGhpcyxlKSxlJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cyYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG8pfSxjLl9zc3JSZWdpc3Rlcj11KTpyJiYodT1yKSx1KXt2YXIgZD1jLmZ1bmN0aW9uYWwsZj1kP2MucmVuZGVyOmMuYmVmb3JlQ3JlYXRlO2Q/KGMuX2luamVjdFN0eWxlcz11LGMucmVuZGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHUuY2FsbCh0KSxmKGUsdCl9KTpjLmJlZm9yZUNyZWF0ZT1mP1tdLmNvbmNhdChmLHUpOlt1XX1yZXR1cm57ZXNNb2R1bGU6cyxleHBvcnRzOmEsb3B0aW9uczpjfX19LDE6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiZlBsbCIpfSwxMDpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJJU1lXIil9LDEyOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oInVyVzgiKX0sMTM4OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigxMzkpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O28uZGVmYXVsdC5pbnN0YWxsPWZ1bmN0aW9uKGUpe2UuY29tcG9uZW50KG8uZGVmYXVsdC5uYW1lLG8uZGVmYXVsdCl9LHQuZGVmYXVsdD1vLmRlZmF1bHR9LDEzOTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKDE0MCksaT1uLm4ociksbz1uKDE0NSkscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDE0OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oIk9OM08iKX0sMTQwOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiBlfSxpPWIobigxKSksbz1iKG4oMTkpKSxzPWIobig1KSksYT1iKG4oNikpLGw9YihuKDE0MSkpLHU9YihuKDM1KSksYz1iKG4oMjUpKSxkPWIobigxNykpLGY9YihuKDE0KSksaD1iKG4oMTApKSxwPW4oMTgpLG09bigxMiksdj1iKG4oMjYpKSxnPW4oMikseT1iKG4oMTQ0KSksXz1uKDIzKTtmdW5jdGlvbiBiKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX10LmRlZmF1bHQ9e21peGluczpbaS5kZWZhdWx0LHMuZGVmYXVsdCwoMCxvLmRlZmF1bHQpKCJyZWZlcmVuY2UiKSx5LmRlZmF1bHRdLG5hbWU6IkVsU2VsZWN0Iixjb21wb25lbnROYW1lOiJFbFNlbGVjdCIsaW5qZWN0OntlbEZvcm06e2RlZmF1bHQ6IiJ9LGVsRm9ybUl0ZW06e2RlZmF1bHQ6IiJ9fSxwcm92aWRlOmZ1bmN0aW9uKCl7cmV0dXJue3NlbGVjdDp0aGlzfX0sY29tcHV0ZWQ6e19lbEZvcm1JdGVtU2l6ZTpmdW5jdGlvbigpe3JldHVybih0aGlzLmVsRm9ybUl0ZW18fHt9KS5lbEZvcm1JdGVtU2l6ZX0scmVhZG9ubHk6ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5maWx0ZXJhYmxlfHx0aGlzLm11bHRpcGxlfHwhKDAsZy5pc0lFKSgpJiYhKDAsZy5pc0VkZ2UpKCkmJiF0aGlzLnZpc2libGV9LHNob3dDbG9zZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMubXVsdGlwbGU/QXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSYmdGhpcy52YWx1ZS5sZW5ndGg+MDp2b2lkIDAhPT10aGlzLnZhbHVlJiZudWxsIT09dGhpcy52YWx1ZSYmIiIhPT10aGlzLnZhbHVlO3JldHVybiB0aGlzLmNsZWFyYWJsZSYmIXRoaXMuc2VsZWN0RGlzYWJsZWQmJnRoaXMuaW5wdXRIb3ZlcmluZyYmZX0saWNvbkNsYXNzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVtb3RlJiZ0aGlzLmZpbHRlcmFibGU/IiI6dGhpcy52aXNpYmxlPyJhcnJvdy11cCBpcy1yZXZlcnNlIjoiYXJyb3ctdXAifSxkZWJvdW5jZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnJlbW90ZT8zMDA6MH0sZW1wdHlUZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubG9hZGluZz90aGlzLmxvYWRpbmdUZXh0fHx0aGlzLnQoImVsLnNlbGVjdC5sb2FkaW5nIik6KCF0aGlzLnJlbW90ZXx8IiIhPT10aGlzLnF1ZXJ5fHwwIT09dGhpcy5vcHRpb25zLmxlbmd0aCkmJih0aGlzLmZpbHRlcmFibGUmJnRoaXMucXVlcnkmJnRoaXMub3B0aW9ucy5sZW5ndGg+MCYmMD09PXRoaXMuZmlsdGVyZWRPcHRpb25zQ291bnQ/dGhpcy5ub01hdGNoVGV4dHx8dGhpcy50KCJlbC5zZWxlY3Qubm9NYXRjaCIpOjA9PT10aGlzLm9wdGlvbnMubGVuZ3RoP3RoaXMubm9EYXRhVGV4dHx8dGhpcy50KCJlbC5zZWxlY3Qubm9EYXRhIik6bnVsbCl9LHNob3dOZXdPcHRpb246ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy5vcHRpb25zLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4hZS5jcmVhdGVkfSkuc29tZShmdW5jdGlvbih0KXtyZXR1cm4gdC5jdXJyZW50TGFiZWw9PT1lLnF1ZXJ5fSk7cmV0dXJuIHRoaXMuZmlsdGVyYWJsZSYmdGhpcy5hbGxvd0NyZWF0ZSYmIiIhPT10aGlzLnF1ZXJ5JiYhdH0sc2VsZWN0U2l6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNpemV8fHRoaXMuX2VsRm9ybUl0ZW1TaXplfHwodGhpcy4kRUxFTUVOVHx8e30pLnNpemV9LHNlbGVjdERpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGlzYWJsZWR8fCh0aGlzLmVsRm9ybXx8e30pLmRpc2FibGVkfSxjb2xsYXBzZVRhZ1NpemU6ZnVuY3Rpb24oKXtyZXR1cm5bInNtYWxsIiwibWluaSJdLmluZGV4T2YodGhpcy5zZWxlY3RTaXplKT4tMT8ibWluaSI6InNtYWxsIn19LGNvbXBvbmVudHM6e0VsSW5wdXQ6YS5kZWZhdWx0LEVsU2VsZWN0TWVudTpsLmRlZmF1bHQsRWxPcHRpb246dS5kZWZhdWx0LEVsVGFnOmMuZGVmYXVsdCxFbFNjcm9sbGJhcjpkLmRlZmF1bHR9LGRpcmVjdGl2ZXM6e0NsaWNrb3V0c2lkZTpoLmRlZmF1bHR9LHByb3BzOntuYW1lOlN0cmluZyxpZDpTdHJpbmcsdmFsdWU6e3JlcXVpcmVkOiEwfSxhdXRvY29tcGxldGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6Im9mZiJ9LGF1dG9Db21wbGV0ZTp7dHlwZTpTdHJpbmcsdmFsaWRhdG9yOmZ1bmN0aW9uKGUpe3JldHVybiEwfX0sYXV0b21hdGljRHJvcGRvd246Qm9vbGVhbixzaXplOlN0cmluZyxkaXNhYmxlZDpCb29sZWFuLGNsZWFyYWJsZTpCb29sZWFuLGZpbHRlcmFibGU6Qm9vbGVhbixhbGxvd0NyZWF0ZTpCb29sZWFuLGxvYWRpbmc6Qm9vbGVhbixwb3BwZXJDbGFzczpTdHJpbmcscmVtb3RlOkJvb2xlYW4sbG9hZGluZ1RleHQ6U3RyaW5nLG5vTWF0Y2hUZXh0OlN0cmluZyxub0RhdGFUZXh0OlN0cmluZyxyZW1vdGVNZXRob2Q6RnVuY3Rpb24sZmlsdGVyTWV0aG9kOkZ1bmN0aW9uLG11bHRpcGxlOkJvb2xlYW4sbXVsdGlwbGVMaW1pdDp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxwbGFjZWhvbGRlcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybigwLG0udCkoImVsLnNlbGVjdC5wbGFjZWhvbGRlciIpfX0sZGVmYXVsdEZpcnN0T3B0aW9uOkJvb2xlYW4scmVzZXJ2ZUtleXdvcmQ6Qm9vbGVhbix2YWx1ZUtleTp7dHlwZTpTdHJpbmcsZGVmYXVsdDoidmFsdWUifSxjb2xsYXBzZVRhZ3M6Qm9vbGVhbixwb3BwZXJBcHBlbmRUb0JvZHk6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntvcHRpb25zOltdLGNhY2hlZE9wdGlvbnM6W10sY3JlYXRlZExhYmVsOm51bGwsY3JlYXRlZFNlbGVjdGVkOiExLHNlbGVjdGVkOnRoaXMubXVsdGlwbGU/W106e30saW5wdXRMZW5ndGg6MjAsaW5wdXRXaWR0aDowLGluaXRpYWxJbnB1dEhlaWdodDowLGNhY2hlZFBsYWNlSG9sZGVyOiIiLG9wdGlvbnNDb3VudDowLGZpbHRlcmVkT3B0aW9uc0NvdW50OjAsdmlzaWJsZTohMSxzb2Z0Rm9jdXM6ITEsc2VsZWN0ZWRMYWJlbDoiIixob3ZlckluZGV4Oi0xLHF1ZXJ5OiIiLHByZXZpb3VzUXVlcnk6bnVsbCxpbnB1dEhvdmVyaW5nOiExLGN1cnJlbnRQbGFjZWhvbGRlcjoiIixtZW51VmlzaWJsZU9uRm9jdXM6ITEsaXNPbkNvbXBvc2l0aW9uOiExLGlzU2lsZW50Qmx1cjohMX19LHdhdGNoOntzZWxlY3REaXNhYmxlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXtlLnJlc2V0SW5wdXRIZWlnaHQoKX0pfSxwbGFjZWhvbGRlcjpmdW5jdGlvbihlKXt0aGlzLmNhY2hlZFBsYWNlSG9sZGVyPXRoaXMuY3VycmVudFBsYWNlaG9sZGVyPWV9LHZhbHVlOmZ1bmN0aW9uKGUsdCl7dGhpcy5tdWx0aXBsZSYmKHRoaXMucmVzZXRJbnB1dEhlaWdodCgpLGUubGVuZ3RoPjB8fHRoaXMuJHJlZnMuaW5wdXQmJiIiIT09dGhpcy5xdWVyeT90aGlzLmN1cnJlbnRQbGFjZWhvbGRlcj0iIjp0aGlzLmN1cnJlbnRQbGFjZWhvbGRlcj10aGlzLmNhY2hlZFBsYWNlSG9sZGVyLHRoaXMuZmlsdGVyYWJsZSYmIXRoaXMucmVzZXJ2ZUtleXdvcmQmJih0aGlzLnF1ZXJ5PSIiLHRoaXMuaGFuZGxlUXVlcnlDaGFuZ2UodGhpcy5xdWVyeSkpKSx0aGlzLnNldFNlbGVjdGVkKCksdGhpcy5maWx0ZXJhYmxlJiYhdGhpcy5tdWx0aXBsZSYmKHRoaXMuaW5wdXRMZW5ndGg9MjApLCgwLGcudmFsdWVFcXVhbHMpKGUsdCl8fHRoaXMuZGlzcGF0Y2goIkVsRm9ybUl0ZW0iLCJlbC5mb3JtLmNoYW5nZSIsZSl9LHZpc2libGU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztlPyh0aGlzLmJyb2FkY2FzdCgiRWxTZWxlY3REcm9wZG93biIsInVwZGF0ZVBvcHBlciIpLHRoaXMuZmlsdGVyYWJsZSYmKHRoaXMucXVlcnk9dGhpcy5yZW1vdGU/IiI6dGhpcy5zZWxlY3RlZExhYmVsLHRoaXMuaGFuZGxlUXVlcnlDaGFuZ2UodGhpcy5xdWVyeSksdGhpcy5tdWx0aXBsZT90aGlzLiRyZWZzLmlucHV0LmZvY3VzKCk6KHRoaXMucmVtb3RlfHwodGhpcy5icm9hZGNhc3QoIkVsT3B0aW9uIiwicXVlcnlDaGFuZ2UiLCIiKSx0aGlzLmJyb2FkY2FzdCgiRWxPcHRpb25Hcm91cCIsInF1ZXJ5Q2hhbmdlIikpLHRoaXMuYnJvYWRjYXN0KCJFbElucHV0IiwiaW5wdXRTZWxlY3QiKSkpKToodGhpcy5icm9hZGNhc3QoIkVsU2VsZWN0RHJvcGRvd24iLCJkZXN0cm95UG9wcGVyIiksdGhpcy4kcmVmcy5pbnB1dCYmdGhpcy4kcmVmcy5pbnB1dC5ibHVyKCksdGhpcy5xdWVyeT0iIix0aGlzLnByZXZpb3VzUXVlcnk9bnVsbCx0aGlzLnNlbGVjdGVkTGFiZWw9IiIsdGhpcy5pbnB1dExlbmd0aD0yMCx0aGlzLm1lbnVWaXNpYmxlT25Gb2N1cz0hMSx0aGlzLnJlc2V0SG92ZXJJbmRleCgpLHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7dC4kcmVmcy5pbnB1dCYmIiI9PT10LiRyZWZzLmlucHV0LnZhbHVlJiYwPT09dC5zZWxlY3RlZC5sZW5ndGgmJih0LmN1cnJlbnRQbGFjZWhvbGRlcj10LmNhY2hlZFBsYWNlSG9sZGVyKX0pLHRoaXMubXVsdGlwbGV8fHRoaXMuc2VsZWN0ZWQmJih0aGlzLmZpbHRlcmFibGUmJnRoaXMuYWxsb3dDcmVhdGUmJnRoaXMuY3JlYXRlZFNlbGVjdGVkJiZ0aGlzLmNyZWF0ZWRMYWJlbD90aGlzLnNlbGVjdGVkTGFiZWw9dGhpcy5jcmVhdGVkTGFiZWw6dGhpcy5zZWxlY3RlZExhYmVsPXRoaXMuc2VsZWN0ZWQuY3VycmVudExhYmVsLHRoaXMuZmlsdGVyYWJsZSYmKHRoaXMucXVlcnk9dGhpcy5zZWxlY3RlZExhYmVsKSkpLHRoaXMuJGVtaXQoInZpc2libGUtY2hhbmdlIixlKX0sb3B0aW9uczpmdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoIXRoaXMuJGlzU2VydmVyKXt0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe2UuYnJvYWRjYXN0KCJFbFNlbGVjdERyb3Bkb3duIiwidXBkYXRlUG9wcGVyIil9KSx0aGlzLm11bHRpcGxlJiZ0aGlzLnJlc2V0SW5wdXRIZWlnaHQoKTt2YXIgdD10aGlzLiRlbC5xdWVyeVNlbGVjdG9yQWxsKCJpbnB1dCIpOy0xPT09W10uaW5kZXhPZi5jYWxsKHQsZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkmJnRoaXMuc2V0U2VsZWN0ZWQoKSx0aGlzLmRlZmF1bHRGaXJzdE9wdGlvbiYmKHRoaXMuZmlsdGVyYWJsZXx8dGhpcy5yZW1vdGUpJiZ0aGlzLmZpbHRlcmVkT3B0aW9uc0NvdW50JiZ0aGlzLmNoZWNrRGVmYXVsdEZpcnN0T3B0aW9uKCl9fX0sbWV0aG9kczp7aGFuZGxlQ29tcG9zaXRpb246ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQudmFsdWU7aWYoImNvbXBvc2l0aW9uZW5kIj09PWUudHlwZSl0aGlzLmlzT25Db21wb3NpdGlvbj0hMSx0aGlzLmhhbmRsZVF1ZXJ5Q2hhbmdlKHQpO2Vsc2V7dmFyIG49dFt0Lmxlbmd0aC0xXXx8IiI7dGhpcy5pc09uQ29tcG9zaXRpb249ISgwLF8uaXNLb3JlYW4pKG4pfX0saGFuZGxlUXVlcnlDaGFuZ2U6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZih0aGlzLnByZXZpb3VzUXVlcnkhPT1lJiYhdGhpcy5pc09uQ29tcG9zaXRpb24paWYobnVsbCE9PXRoaXMucHJldmlvdXNRdWVyeXx8ImZ1bmN0aW9uIiE9dHlwZW9mIHRoaXMuZmlsdGVyTWV0aG9kJiYiZnVuY3Rpb24iIT10eXBlb2YgdGhpcy5yZW1vdGVNZXRob2Qpe2lmKHRoaXMucHJldmlvdXNRdWVyeT1lLHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7dC52aXNpYmxlJiZ0LmJyb2FkY2FzdCgiRWxTZWxlY3REcm9wZG93biIsInVwZGF0ZVBvcHBlciIpfSksdGhpcy5ob3ZlckluZGV4PS0xLHRoaXMubXVsdGlwbGUmJnRoaXMuZmlsdGVyYWJsZSl7dmFyIG49MTUqdGhpcy4kcmVmcy5pbnB1dC52YWx1ZS5sZW5ndGgrMjA7dGhpcy5pbnB1dExlbmd0aD10aGlzLmNvbGxhcHNlVGFncz9NYXRoLm1pbig1MCxuKTpuLHRoaXMubWFuYWdlUGxhY2Vob2xkZXIoKSx0aGlzLnJlc2V0SW5wdXRIZWlnaHQoKX10aGlzLnJlbW90ZSYmImZ1bmN0aW9uIj09dHlwZW9mIHRoaXMucmVtb3RlTWV0aG9kPyh0aGlzLmhvdmVySW5kZXg9LTEsdGhpcy5yZW1vdGVNZXRob2QoZSkpOiJmdW5jdGlvbiI9PXR5cGVvZiB0aGlzLmZpbHRlck1ldGhvZD8odGhpcy5maWx0ZXJNZXRob2QoZSksdGhpcy5icm9hZGNhc3QoIkVsT3B0aW9uR3JvdXAiLCJxdWVyeUNoYW5nZSIpKToodGhpcy5maWx0ZXJlZE9wdGlvbnNDb3VudD10aGlzLm9wdGlvbnNDb3VudCx0aGlzLmJyb2FkY2FzdCgiRWxPcHRpb24iLCJxdWVyeUNoYW5nZSIsZSksdGhpcy5icm9hZGNhc3QoIkVsT3B0aW9uR3JvdXAiLCJxdWVyeUNoYW5nZSIpKSx0aGlzLmRlZmF1bHRGaXJzdE9wdGlvbiYmKHRoaXMuZmlsdGVyYWJsZXx8dGhpcy5yZW1vdGUpJiZ0aGlzLmZpbHRlcmVkT3B0aW9uc0NvdW50JiZ0aGlzLmNoZWNrRGVmYXVsdEZpcnN0T3B0aW9uKCl9ZWxzZSB0aGlzLnByZXZpb3VzUXVlcnk9ZX0sc2Nyb2xsVG9PcHRpb246ZnVuY3Rpb24oZSl7dmFyIHQ9QXJyYXkuaXNBcnJheShlKSYmZVswXT9lWzBdLiRlbDplLiRlbDtpZih0aGlzLiRyZWZzLnBvcHBlciYmdCl7dmFyIG49dGhpcy4kcmVmcy5wb3BwZXIuJGVsLnF1ZXJ5U2VsZWN0b3IoIi5lbC1zZWxlY3QtZHJvcGRvd25fX3dyYXAiKTsoMCx2LmRlZmF1bHQpKG4sdCl9dGhpcy4kcmVmcy5zY3JvbGxiYXImJnRoaXMuJHJlZnMuc2Nyb2xsYmFyLmhhbmRsZVNjcm9sbCgpfSxoYW5kbGVNZW51RW50ZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7cmV0dXJuIGUuc2Nyb2xsVG9PcHRpb24oZS5zZWxlY3RlZCl9KX0sZW1pdENoYW5nZTpmdW5jdGlvbihlKXsoMCxnLnZhbHVlRXF1YWxzKSh0aGlzLnZhbHVlLGUpfHx0aGlzLiRlbWl0KCJjaGFuZ2UiLGUpfSxnZXRPcHRpb246ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXZvaWQgMCxuPSJbb2JqZWN0IG9iamVjdF0iPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnRvTG93ZXJDYXNlKCkscj0iW29iamVjdCBudWxsXSI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkudG9Mb3dlckNhc2UoKSxpPXRoaXMuY2FjaGVkT3B0aW9ucy5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIG89dGhpcy5jYWNoZWRPcHRpb25zW2ldO2lmKG4/KDAsZy5nZXRWYWx1ZUJ5UGF0aCkoby52YWx1ZSx0aGlzLnZhbHVlS2V5KT09PSgwLGcuZ2V0VmFsdWVCeVBhdGgpKGUsdGhpcy52YWx1ZUtleSk6by52YWx1ZT09PWUpe3Q9bzticmVha319aWYodClyZXR1cm4gdDt2YXIgcz17dmFsdWU6ZSxjdXJyZW50TGFiZWw6bnx8cj8iIjplfTtyZXR1cm4gdGhpcy5tdWx0aXBsZSYmKHMuaGl0U3RhdGU9ITEpLHN9LHNldFNlbGVjdGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZighdGhpcy5tdWx0aXBsZSl7dmFyIHQ9dGhpcy5nZXRPcHRpb24odGhpcy52YWx1ZSk7cmV0dXJuIHQuY3JlYXRlZD8odGhpcy5jcmVhdGVkTGFiZWw9dC5jdXJyZW50TGFiZWwsdGhpcy5jcmVhdGVkU2VsZWN0ZWQ9ITApOnRoaXMuY3JlYXRlZFNlbGVjdGVkPSExLHRoaXMuc2VsZWN0ZWRMYWJlbD10LmN1cnJlbnRMYWJlbCx0aGlzLnNlbGVjdGVkPXQsdm9pZCh0aGlzLmZpbHRlcmFibGUmJih0aGlzLnF1ZXJ5PXRoaXMuc2VsZWN0ZWRMYWJlbCkpfXZhciBuPVtdO0FycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkmJnRoaXMudmFsdWUuZm9yRWFjaChmdW5jdGlvbih0KXtuLnB1c2goZS5nZXRPcHRpb24odCkpfSksdGhpcy5zZWxlY3RlZD1uLHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7ZS5yZXNldElucHV0SGVpZ2h0KCl9KX0saGFuZGxlRm9jdXM6ZnVuY3Rpb24oZSl7dGhpcy5zb2Z0Rm9jdXM/dGhpcy5zb2Z0Rm9jdXM9ITE6KCh0aGlzLmF1dG9tYXRpY0Ryb3Bkb3dufHx0aGlzLmZpbHRlcmFibGUpJiYodGhpcy52aXNpYmxlPSEwLHRoaXMubWVudVZpc2libGVPbkZvY3VzPSEwKSx0aGlzLiRlbWl0KCJmb2N1cyIsZSkpfSxibHVyOmZ1bmN0aW9uKCl7dGhpcy52aXNpYmxlPSExLHRoaXMuJHJlZnMucmVmZXJlbmNlLmJsdXIoKX0saGFuZGxlQmx1cjpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0LmlzU2lsZW50Qmx1cj90LmlzU2lsZW50Qmx1cj0hMTp0LiRlbWl0KCJibHVyIixlKX0sNTApLHRoaXMuc29mdEZvY3VzPSExfSxoYW5kbGVDbGVhckNsaWNrOmZ1bmN0aW9uKGUpe3RoaXMuZGVsZXRlU2VsZWN0ZWQoZSl9LGRvRGVzdHJveTpmdW5jdGlvbigpe3RoaXMuJHJlZnMucG9wcGVyJiZ0aGlzLiRyZWZzLnBvcHBlci5kb0Rlc3Ryb3koKX0saGFuZGxlQ2xvc2U6ZnVuY3Rpb24oKXt0aGlzLnZpc2libGU9ITF9LHRvZ2dsZUxhc3RPcHRpb25IaXRTdGF0ZTpmdW5jdGlvbihlKXtpZihBcnJheS5pc0FycmF5KHRoaXMuc2VsZWN0ZWQpKXt2YXIgdD10aGlzLnNlbGVjdGVkW3RoaXMuc2VsZWN0ZWQubGVuZ3RoLTFdO2lmKHQpcmV0dXJuITA9PT1lfHwhMT09PWU/KHQuaGl0U3RhdGU9ZSxlKToodC5oaXRTdGF0ZT0hdC5oaXRTdGF0ZSx0LmhpdFN0YXRlKX19LGRlbGV0ZVByZXZUYWc6ZnVuY3Rpb24oZSl7aWYoZS50YXJnZXQudmFsdWUubGVuZ3RoPD0wJiYhdGhpcy50b2dnbGVMYXN0T3B0aW9uSGl0U3RhdGUoKSl7dmFyIHQ9dGhpcy52YWx1ZS5zbGljZSgpO3QucG9wKCksdGhpcy4kZW1pdCgiaW5wdXQiLHQpLHRoaXMuZW1pdENoYW5nZSh0KX19LG1hbmFnZVBsYWNlaG9sZGVyOmZ1bmN0aW9uKCl7IiIhPT10aGlzLmN1cnJlbnRQbGFjZWhvbGRlciYmKHRoaXMuY3VycmVudFBsYWNlaG9sZGVyPXRoaXMuJHJlZnMuaW5wdXQudmFsdWU/IiI6dGhpcy5jYWNoZWRQbGFjZUhvbGRlcil9LHJlc2V0SW5wdXRTdGF0ZTpmdW5jdGlvbihlKXs4IT09ZS5rZXlDb2RlJiZ0aGlzLnRvZ2dsZUxhc3RPcHRpb25IaXRTdGF0ZSghMSksdGhpcy5pbnB1dExlbmd0aD0xNSp0aGlzLiRyZWZzLmlucHV0LnZhbHVlLmxlbmd0aCsyMCx0aGlzLnJlc2V0SW5wdXRIZWlnaHQoKX0scmVzZXRJbnB1dEhlaWdodDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5jb2xsYXBzZVRhZ3MmJiF0aGlzLmZpbHRlcmFibGV8fHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7aWYoZS4kcmVmcy5yZWZlcmVuY2Upe3ZhciB0PWUuJHJlZnMucmVmZXJlbmNlLiRlbC5jaGlsZE5vZGVzLG49W10uZmlsdGVyLmNhbGwodCxmdW5jdGlvbihlKXtyZXR1cm4iSU5QVVQiPT09ZS50YWdOYW1lfSlbMF0scj1lLiRyZWZzLnRhZ3MsaT1lLmluaXRpYWxJbnB1dEhlaWdodHx8NDA7bi5zdHlsZS5oZWlnaHQ9MD09PWUuc2VsZWN0ZWQubGVuZ3RoP2krInB4IjpNYXRoLm1heChyP3IuY2xpZW50SGVpZ2h0KyhyLmNsaWVudEhlaWdodD5pPzY6MCk6MCxpKSsicHgiLGUudmlzaWJsZSYmITEhPT1lLmVtcHR5VGV4dCYmZS5icm9hZGNhc3QoIkVsU2VsZWN0RHJvcGRvd24iLCJ1cGRhdGVQb3BwZXIiKX19KX0scmVzZXRIb3ZlckluZGV4OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5tdWx0aXBsZT9lLnNlbGVjdGVkLmxlbmd0aD4wP2UuaG92ZXJJbmRleD1NYXRoLm1pbi5hcHBseShudWxsLGUuc2VsZWN0ZWQubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBlLm9wdGlvbnMuaW5kZXhPZih0KX0pKTplLmhvdmVySW5kZXg9LTE6ZS5ob3ZlckluZGV4PWUub3B0aW9ucy5pbmRleE9mKGUuc2VsZWN0ZWQpfSwzMDApfSxoYW5kbGVPcHRpb25TZWxlY3Q6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO2lmKHRoaXMubXVsdGlwbGUpe3ZhciByPXRoaXMudmFsdWUuc2xpY2UoKSxpPXRoaXMuZ2V0VmFsdWVJbmRleChyLGUudmFsdWUpO2k+LTE/ci5zcGxpY2UoaSwxKToodGhpcy5tdWx0aXBsZUxpbWl0PD0wfHxyLmxlbmd0aDx0aGlzLm11bHRpcGxlTGltaXQpJiZyLnB1c2goZS52YWx1ZSksdGhpcy4kZW1pdCgiaW5wdXQiLHIpLHRoaXMuZW1pdENoYW5nZShyKSxlLmNyZWF0ZWQmJih0aGlzLnF1ZXJ5PSIiLHRoaXMuaGFuZGxlUXVlcnlDaGFuZ2UoIiIpLHRoaXMuaW5wdXRMZW5ndGg9MjApLHRoaXMuZmlsdGVyYWJsZSYmdGhpcy4kcmVmcy5pbnB1dC5mb2N1cygpfWVsc2UgdGhpcy4kZW1pdCgiaW5wdXQiLGUudmFsdWUpLHRoaXMuZW1pdENoYW5nZShlLnZhbHVlKSx0aGlzLnZpc2libGU9ITE7dGhpcy5pc1NpbGVudEJsdXI9dCx0aGlzLnNldFNvZnRGb2N1cygpLHRoaXMudmlzaWJsZXx8dGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXtuLnNjcm9sbFRvT3B0aW9uKGUpfSl9LHNldFNvZnRGb2N1czpmdW5jdGlvbigpe3RoaXMuc29mdEZvY3VzPSEwO3ZhciBlPXRoaXMuJHJlZnMuaW5wdXR8fHRoaXMuJHJlZnMucmVmZXJlbmNlO2UmJmUuZm9jdXMoKX0sZ2V0VmFsdWVJbmRleDpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06W10sbj1hcmd1bWVudHNbMV07aWYoISgiW29iamVjdCBvYmplY3RdIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuKS50b0xvd2VyQ2FzZSgpKSlyZXR1cm4gdC5pbmRleE9mKG4pO3ZhciBpLG8scz0oaT1lLnZhbHVlS2V5LG89LTEsdC5zb21lKGZ1bmN0aW9uKGUsdCl7cmV0dXJuKDAsZy5nZXRWYWx1ZUJ5UGF0aCkoZSxpKT09PSgwLGcuZ2V0VmFsdWVCeVBhdGgpKG4saSkmJihvPXQsITApfSkse3Y6b30pO3JldHVybiJvYmplY3QiPT09KHZvaWQgMD09PXM/InVuZGVmaW5lZCI6cihzKSk/cy52OnZvaWQgMH0sdG9nZ2xlTWVudTpmdW5jdGlvbigpe3RoaXMuc2VsZWN0RGlzYWJsZWR8fCh0aGlzLm1lbnVWaXNpYmxlT25Gb2N1cz90aGlzLm1lbnVWaXNpYmxlT25Gb2N1cz0hMTp0aGlzLnZpc2libGU9IXRoaXMudmlzaWJsZSx0aGlzLnZpc2libGUmJih0aGlzLiRyZWZzLmlucHV0fHx0aGlzLiRyZWZzLnJlZmVyZW5jZSkuZm9jdXMoKSl9LHNlbGVjdE9wdGlvbjpmdW5jdGlvbigpe3RoaXMudmlzaWJsZT90aGlzLm9wdGlvbnNbdGhpcy5ob3ZlckluZGV4XSYmdGhpcy5oYW5kbGVPcHRpb25TZWxlY3QodGhpcy5vcHRpb25zW3RoaXMuaG92ZXJJbmRleF0pOnRoaXMudG9nZ2xlTWVudSgpfSxkZWxldGVTZWxlY3RlZDpmdW5jdGlvbihlKXtlLnN0b3BQcm9wYWdhdGlvbigpO3ZhciB0PXRoaXMubXVsdGlwbGU/W106IiI7dGhpcy4kZW1pdCgiaW5wdXQiLHQpLHRoaXMuZW1pdENoYW5nZSh0KSx0aGlzLnZpc2libGU9ITEsdGhpcy4kZW1pdCgiY2xlYXIiKX0sZGVsZXRlVGFnOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5zZWxlY3RlZC5pbmRleE9mKHQpO2lmKG4+LTEmJiF0aGlzLnNlbGVjdERpc2FibGVkKXt2YXIgcj10aGlzLnZhbHVlLnNsaWNlKCk7ci5zcGxpY2UobiwxKSx0aGlzLiRlbWl0KCJpbnB1dCIsciksdGhpcy5lbWl0Q2hhbmdlKHIpLHRoaXMuJGVtaXQoInJlbW92ZS10YWciLHQudmFsdWUpfWUuc3RvcFByb3BhZ2F0aW9uKCl9LG9uSW5wdXRDaGFuZ2U6ZnVuY3Rpb24oKXt0aGlzLmZpbHRlcmFibGUmJnRoaXMucXVlcnkhPT10aGlzLnNlbGVjdGVkTGFiZWwmJih0aGlzLnF1ZXJ5PXRoaXMuc2VsZWN0ZWRMYWJlbCx0aGlzLmhhbmRsZVF1ZXJ5Q2hhbmdlKHRoaXMucXVlcnkpKX0sb25PcHRpb25EZXN0cm95OmZ1bmN0aW9uKGUpe2U+LTEmJih0aGlzLm9wdGlvbnNDb3VudC0tLHRoaXMuZmlsdGVyZWRPcHRpb25zQ291bnQtLSx0aGlzLm9wdGlvbnMuc3BsaWNlKGUsMSkpfSxyZXNldElucHV0V2lkdGg6ZnVuY3Rpb24oKXt0aGlzLmlucHV0V2lkdGg9dGhpcy4kcmVmcy5yZWZlcmVuY2UuJGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRofSxoYW5kbGVSZXNpemU6ZnVuY3Rpb24oKXt0aGlzLnJlc2V0SW5wdXRXaWR0aCgpLHRoaXMubXVsdGlwbGUmJnRoaXMucmVzZXRJbnB1dEhlaWdodCgpfSxjaGVja0RlZmF1bHRGaXJzdE9wdGlvbjpmdW5jdGlvbigpe3RoaXMuaG92ZXJJbmRleD0tMTtmb3IodmFyIGU9ITEsdD10aGlzLm9wdGlvbnMubGVuZ3RoLTE7dD49MDt0LS0paWYodGhpcy5vcHRpb25zW3RdLmNyZWF0ZWQpe2U9ITAsdGhpcy5ob3ZlckluZGV4PXQ7YnJlYWt9aWYoIWUpZm9yKHZhciBuPTA7biE9PXRoaXMub3B0aW9ucy5sZW5ndGg7KytuKXt2YXIgcj10aGlzLm9wdGlvbnNbbl07aWYodGhpcy5xdWVyeSl7aWYoIXIuZGlzYWJsZWQmJiFyLmdyb3VwRGlzYWJsZWQmJnIudmlzaWJsZSl7dGhpcy5ob3ZlckluZGV4PW47YnJlYWt9fWVsc2UgaWYoci5pdGVtU2VsZWN0ZWQpe3RoaXMuaG92ZXJJbmRleD1uO2JyZWFrfX19LGdldFZhbHVlS2V5OmZ1bmN0aW9uKGUpe3JldHVybiJbb2JqZWN0IG9iamVjdF0iIT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUudmFsdWUpLnRvTG93ZXJDYXNlKCk/ZS52YWx1ZTooMCxnLmdldFZhbHVlQnlQYXRoKShlLnZhbHVlLHRoaXMudmFsdWVLZXkpfX0sY3JlYXRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5jYWNoZWRQbGFjZUhvbGRlcj10aGlzLmN1cnJlbnRQbGFjZWhvbGRlcj10aGlzLnBsYWNlaG9sZGVyLHRoaXMubXVsdGlwbGUmJiFBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpJiZ0aGlzLiRlbWl0KCJpbnB1dCIsW10pLCF0aGlzLm11bHRpcGxlJiZBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpJiZ0aGlzLiRlbWl0KCJpbnB1dCIsIiIpLHRoaXMuZGVib3VuY2VkT25JbnB1dENoYW5nZT0oMCxmLmRlZmF1bHQpKHRoaXMuZGVib3VuY2UsZnVuY3Rpb24oKXtlLm9uSW5wdXRDaGFuZ2UoKX0pLHRoaXMuZGVib3VuY2VkUXVlcnlDaGFuZ2U9KDAsZi5kZWZhdWx0KSh0aGlzLmRlYm91bmNlLGZ1bmN0aW9uKHQpe2UuaGFuZGxlUXVlcnlDaGFuZ2UodC50YXJnZXQudmFsdWUpfSksdGhpcy4kb24oImhhbmRsZU9wdGlvbkNsaWNrIix0aGlzLmhhbmRsZU9wdGlvblNlbGVjdCksdGhpcy4kb24oInNldFNlbGVjdGVkIix0aGlzLnNldFNlbGVjdGVkKX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5tdWx0aXBsZSYmQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSYmdGhpcy52YWx1ZS5sZW5ndGg+MCYmKHRoaXMuY3VycmVudFBsYWNlaG9sZGVyPSIiKSwoMCxwLmFkZFJlc2l6ZUxpc3RlbmVyKSh0aGlzLiRlbCx0aGlzLmhhbmRsZVJlc2l6ZSk7dmFyIHQ9dGhpcy4kcmVmcy5yZWZlcmVuY2U7aWYodCYmdC4kZWwpe3RoaXMuaW5pdGlhbElucHV0SGVpZ2h0PXQuJGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodHx8e21lZGl1bTozNixzbWFsbDozMixtaW5pOjI4fVt0aGlzLnNlbGVjdFNpemVdfXRoaXMucmVtb3RlJiZ0aGlzLm11bHRpcGxlJiZ0aGlzLnJlc2V0SW5wdXRIZWlnaHQoKSx0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3QmJnQuJGVsJiYoZS5pbnB1dFdpZHRoPXQuJGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKX0pLHRoaXMuc2V0U2VsZWN0ZWQoKX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMuJGVsJiZ0aGlzLmhhbmRsZVJlc2l6ZSYmKDAscC5yZW1vdmVSZXNpemVMaXN0ZW5lcikodGhpcy4kZWwsdGhpcy5oYW5kbGVSZXNpemUpfX19LDE0MTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKDE0MiksaT1uLm4ociksbz1uKDE0Mykscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDE0MjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcixpPW4oNyksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07dC5kZWZhdWx0PXtuYW1lOiJFbFNlbGVjdERyb3Bkb3duIixjb21wb25lbnROYW1lOiJFbFNlbGVjdERyb3Bkb3duIixtaXhpbnM6W28uZGVmYXVsdF0scHJvcHM6e3BsYWNlbWVudDp7ZGVmYXVsdDoiYm90dG9tLXN0YXJ0In0sYm91bmRhcmllc1BhZGRpbmc6e2RlZmF1bHQ6MH0scG9wcGVyT3B0aW9uczp7ZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybntncHVBY2NlbGVyYXRpb246ITF9fX0sdmlzaWJsZUFycm93OntkZWZhdWx0OiEwfSxhcHBlbmRUb0JvZHk6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfX0sZGF0YTpmdW5jdGlvbigpe3JldHVybnttaW5XaWR0aDoiIn19LGNvbXB1dGVkOntwb3BwZXJDbGFzczpmdW5jdGlvbigpe3JldHVybiB0aGlzLiRwYXJlbnQucG9wcGVyQ2xhc3N9fSx3YXRjaDp7IiRwYXJlbnQuaW5wdXRXaWR0aCI6ZnVuY3Rpb24oKXt0aGlzLm1pbldpZHRoPXRoaXMuJHBhcmVudC4kZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgrInB4In19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMucmVmZXJlbmNlRWxtPXRoaXMuJHBhcmVudC4kcmVmcy5yZWZlcmVuY2UuJGVsLHRoaXMuJHBhcmVudC5wb3BwZXJFbG09dGhpcy5wb3BwZXJFbG09dGhpcy4kZWwsdGhpcy4kb24oInVwZGF0ZVBvcHBlciIsZnVuY3Rpb24oKXtlLiRwYXJlbnQudmlzaWJsZSYmZS51cGRhdGVQb3BwZXIoKX0pLHRoaXMuJG9uKCJkZXN0cm95UG9wcGVyIix0aGlzLmRlc3Ryb3lQb3BwZXIpfX19LDE0MzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRjcmVhdGVFbGVtZW50O3JldHVybih0aGlzLl9zZWxmLl9jfHxlKSgiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLXNlbGVjdC1kcm9wZG93biBlbC1wb3BwZXIiLGNsYXNzOlt7ImlzLW11bHRpcGxlIjp0aGlzLiRwYXJlbnQubXVsdGlwbGV9LHRoaXMucG9wcGVyQ2xhc3NdLHN0eWxlOnttaW5XaWR0aDp0aGlzLm1pbldpZHRofX0sW3RoaXMuX3QoImRlZmF1bHQiKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9LDE0NDpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMCx0LmRlZmF1bHQ9e2RhdGE6ZnVuY3Rpb24oKXtyZXR1cm57aG92ZXJPcHRpb246LTF9fSxjb21wdXRlZDp7b3B0aW9uc0FsbERpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3B0aW9ucy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUudmlzaWJsZX0pLmV2ZXJ5KGZ1bmN0aW9uKGUpe3JldHVybiBlLmRpc2FibGVkfSl9fSx3YXRjaDp7aG92ZXJJbmRleDpmdW5jdGlvbihlKXt2YXIgdD10aGlzOyJudW1iZXIiPT10eXBlb2YgZSYmZT4tMSYmKHRoaXMuaG92ZXJPcHRpb249dGhpcy5vcHRpb25zW2VdfHx7fSksdGhpcy5vcHRpb25zLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5ob3Zlcj10LmhvdmVyT3B0aW9uPT09ZX0pfX0sbWV0aG9kczp7bmF2aWdhdGVPcHRpb25zOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aWYodGhpcy52aXNpYmxlKXtpZigwIT09dGhpcy5vcHRpb25zLmxlbmd0aCYmMCE9PXRoaXMuZmlsdGVyZWRPcHRpb25zQ291bnQmJiF0aGlzLm9wdGlvbnNBbGxEaXNhYmxlZCl7Im5leHQiPT09ZT8odGhpcy5ob3ZlckluZGV4KyssdGhpcy5ob3ZlckluZGV4PT09dGhpcy5vcHRpb25zLmxlbmd0aCYmKHRoaXMuaG92ZXJJbmRleD0wKSk6InByZXYiPT09ZSYmKHRoaXMuaG92ZXJJbmRleC0tLHRoaXMuaG92ZXJJbmRleDwwJiYodGhpcy5ob3ZlckluZGV4PXRoaXMub3B0aW9ucy5sZW5ndGgtMSkpO3ZhciBuPXRoaXMub3B0aW9uc1t0aGlzLmhvdmVySW5kZXhdOyEwIT09bi5kaXNhYmxlZCYmITAhPT1uLmdyb3VwRGlzYWJsZWQmJm4udmlzaWJsZXx8dGhpcy5uYXZpZ2F0ZU9wdGlvbnMoZSksdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXtyZXR1cm4gdC5zY3JvbGxUb09wdGlvbih0LmhvdmVyT3B0aW9uKX0pfX1lbHNlIHRoaXMudmlzaWJsZT0hMH19fX0sMTQ1OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbigiZGl2Iix7ZGlyZWN0aXZlczpbe25hbWU6ImNsaWNrb3V0c2lkZSIscmF3TmFtZToidi1jbGlja291dHNpZGUiLHZhbHVlOmUuaGFuZGxlQ2xvc2UsZXhwcmVzc2lvbjoiaGFuZGxlQ2xvc2UifV0sc3RhdGljQ2xhc3M6ImVsLXNlbGVjdCIsY2xhc3M6W2Uuc2VsZWN0U2l6ZT8iZWwtc2VsZWN0LS0iK2Uuc2VsZWN0U2l6ZToiIl0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe3Quc3RvcFByb3BhZ2F0aW9uKCksZS50b2dnbGVNZW51KHQpfX19LFtlLm11bHRpcGxlP24oImRpdiIse3JlZjoidGFncyIsc3RhdGljQ2xhc3M6ImVsLXNlbGVjdF9fdGFncyIsc3R5bGU6eyJtYXgtd2lkdGgiOmUuaW5wdXRXaWR0aC0zMisicHgiLHdpZHRoOiIxMDAlIn19LFtlLmNvbGxhcHNlVGFncyYmZS5zZWxlY3RlZC5sZW5ndGg/bigic3BhbiIsW24oImVsLXRhZyIse2F0dHJzOntjbG9zYWJsZTohZS5zZWxlY3REaXNhYmxlZCxzaXplOmUuY29sbGFwc2VUYWdTaXplLGhpdDplLnNlbGVjdGVkWzBdLmhpdFN0YXRlLHR5cGU6ImluZm8iLCJkaXNhYmxlLXRyYW5zaXRpb25zIjoiIn0sb246e2Nsb3NlOmZ1bmN0aW9uKHQpe2UuZGVsZXRlVGFnKHQsZS5zZWxlY3RlZFswXSl9fX0sW24oInNwYW4iLHtzdGF0aWNDbGFzczoiZWwtc2VsZWN0X190YWdzLXRleHQifSxbZS5fdihlLl9zKGUuc2VsZWN0ZWRbMF0uY3VycmVudExhYmVsKSldKV0pLGUuc2VsZWN0ZWQubGVuZ3RoPjE/bigiZWwtdGFnIix7YXR0cnM6e2Nsb3NhYmxlOiExLHNpemU6ZS5jb2xsYXBzZVRhZ1NpemUsdHlwZToiaW5mbyIsImRpc2FibGUtdHJhbnNpdGlvbnMiOiIifX0sW24oInNwYW4iLHtzdGF0aWNDbGFzczoiZWwtc2VsZWN0X190YWdzLXRleHQifSxbZS5fdigiKyAiK2UuX3MoZS5zZWxlY3RlZC5sZW5ndGgtMSkpXSldKTplLl9lKCldLDEpOmUuX2UoKSxlLmNvbGxhcHNlVGFncz9lLl9lKCk6bigidHJhbnNpdGlvbi1ncm91cCIse29uOnsiYWZ0ZXItbGVhdmUiOmUucmVzZXRJbnB1dEhlaWdodH19LGUuX2woZS5zZWxlY3RlZCxmdW5jdGlvbih0KXtyZXR1cm4gbigiZWwtdGFnIix7a2V5OmUuZ2V0VmFsdWVLZXkodCksYXR0cnM6e2Nsb3NhYmxlOiFlLnNlbGVjdERpc2FibGVkLHNpemU6ZS5jb2xsYXBzZVRhZ1NpemUsaGl0OnQuaGl0U3RhdGUsdHlwZToiaW5mbyIsImRpc2FibGUtdHJhbnNpdGlvbnMiOiIifSxvbjp7Y2xvc2U6ZnVuY3Rpb24obil7ZS5kZWxldGVUYWcobix0KX19fSxbbigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC1zZWxlY3RfX3RhZ3MtdGV4dCJ9LFtlLl92KGUuX3ModC5jdXJyZW50TGFiZWwpKV0pXSl9KSksZS5maWx0ZXJhYmxlP24oImlucHV0Iix7ZGlyZWN0aXZlczpbe25hbWU6Im1vZGVsIixyYXdOYW1lOiJ2LW1vZGVsIix2YWx1ZTplLnF1ZXJ5LGV4cHJlc3Npb246InF1ZXJ5In1dLHJlZjoiaW5wdXQiLHN0YXRpY0NsYXNzOiJlbC1zZWxlY3RfX2lucHV0IixjbGFzczpbZS5zZWxlY3RTaXplPyJpcy0iK2Uuc2VsZWN0U2l6ZToiIl0sc3R5bGU6eyJmbGV4LWdyb3ciOiIxIix3aWR0aDplLmlucHV0TGVuZ3RoLyhlLmlucHV0V2lkdGgtMzIpKyIlIiwibWF4LXdpZHRoIjplLmlucHV0V2lkdGgtNDIrInB4In0sYXR0cnM6e3R5cGU6InRleHQiLGRpc2FibGVkOmUuc2VsZWN0RGlzYWJsZWQsYXV0b2NvbXBsZXRlOmUuYXV0b0NvbXBsZXRlfHxlLmF1dG9jb21wbGV0ZX0sZG9tUHJvcHM6e3ZhbHVlOmUucXVlcnl9LG9uOntmb2N1czplLmhhbmRsZUZvY3VzLGJsdXI6ZnVuY3Rpb24odCl7ZS5zb2Z0Rm9jdXM9ITF9LGNsaWNrOmZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCl9LGtleXVwOmUubWFuYWdlUGxhY2Vob2xkZXIsa2V5ZG93bjpbZS5yZXNldElucHV0U3RhdGUsZnVuY3Rpb24odCl7aWYoISgiYnV0dG9uImluIHQpJiZlLl9rKHQua2V5Q29kZSwiZG93biIsNDAsdC5rZXkpKXJldHVybiBudWxsO3QucHJldmVudERlZmF1bHQoKSxlLm5hdmlnYXRlT3B0aW9ucygibmV4dCIpfSxmdW5jdGlvbih0KXtpZighKCJidXR0b24iaW4gdCkmJmUuX2sodC5rZXlDb2RlLCJ1cCIsMzgsdC5rZXkpKXJldHVybiBudWxsO3QucHJldmVudERlZmF1bHQoKSxlLm5hdmlnYXRlT3B0aW9ucygicHJldiIpfSxmdW5jdGlvbih0KXtpZighKCJidXR0b24iaW4gdCkmJmUuX2sodC5rZXlDb2RlLCJlbnRlciIsMTMsdC5rZXkpKXJldHVybiBudWxsO3QucHJldmVudERlZmF1bHQoKSxlLnNlbGVjdE9wdGlvbih0KX0sZnVuY3Rpb24odCl7aWYoISgiYnV0dG9uImluIHQpJiZlLl9rKHQua2V5Q29kZSwiZXNjIiwyNyx0LmtleSkpcmV0dXJuIG51bGw7dC5zdG9wUHJvcGFnYXRpb24oKSx0LnByZXZlbnREZWZhdWx0KCksZS52aXNpYmxlPSExfSxmdW5jdGlvbih0KXtpZighKCJidXR0b24iaW4gdCkmJmUuX2sodC5rZXlDb2RlLCJkZWxldGUiLFs4LDQ2XSx0LmtleSkpcmV0dXJuIG51bGw7ZS5kZWxldGVQcmV2VGFnKHQpfV0sY29tcG9zaXRpb25zdGFydDplLmhhbmRsZUNvbXBvc2l0aW9uLGNvbXBvc2l0aW9udXBkYXRlOmUuaGFuZGxlQ29tcG9zaXRpb24sY29tcG9zaXRpb25lbmQ6ZS5oYW5kbGVDb21wb3NpdGlvbixpbnB1dDpbZnVuY3Rpb24odCl7dC50YXJnZXQuY29tcG9zaW5nfHwoZS5xdWVyeT10LnRhcmdldC52YWx1ZSl9LGUuZGVib3VuY2VkUXVlcnlDaGFuZ2VdfX0pOmUuX2UoKV0sMSk6ZS5fZSgpLG4oImVsLWlucHV0Iix7cmVmOiJyZWZlcmVuY2UiLGNsYXNzOnsiaXMtZm9jdXMiOmUudmlzaWJsZX0sYXR0cnM6e3R5cGU6InRleHQiLHBsYWNlaG9sZGVyOmUuY3VycmVudFBsYWNlaG9sZGVyLG5hbWU6ZS5uYW1lLGlkOmUuaWQsYXV0b2NvbXBsZXRlOmUuYXV0b0NvbXBsZXRlfHxlLmF1dG9jb21wbGV0ZSxzaXplOmUuc2VsZWN0U2l6ZSxkaXNhYmxlZDplLnNlbGVjdERpc2FibGVkLHJlYWRvbmx5OmUucmVhZG9ubHksInZhbGlkYXRlLWV2ZW50IjohMX0sb246e2ZvY3VzOmUuaGFuZGxlRm9jdXMsYmx1cjplLmhhbmRsZUJsdXJ9LG5hdGl2ZU9uOntrZXl1cDpmdW5jdGlvbih0KXtlLmRlYm91bmNlZE9uSW5wdXRDaGFuZ2UodCl9LGtleWRvd246W2Z1bmN0aW9uKHQpe2lmKCEoImJ1dHRvbiJpbiB0KSYmZS5fayh0LmtleUNvZGUsImRvd24iLDQwLHQua2V5KSlyZXR1cm4gbnVsbDt0LnN0b3BQcm9wYWdhdGlvbigpLHQucHJldmVudERlZmF1bHQoKSxlLm5hdmlnYXRlT3B0aW9ucygibmV4dCIpfSxmdW5jdGlvbih0KXtpZighKCJidXR0b24iaW4gdCkmJmUuX2sodC5rZXlDb2RlLCJ1cCIsMzgsdC5rZXkpKXJldHVybiBudWxsO3Quc3RvcFByb3BhZ2F0aW9uKCksdC5wcmV2ZW50RGVmYXVsdCgpLGUubmF2aWdhdGVPcHRpb25zKCJwcmV2Iil9LGZ1bmN0aW9uKHQpe2lmKCEoImJ1dHRvbiJpbiB0KSYmZS5fayh0LmtleUNvZGUsImVudGVyIiwxMyx0LmtleSkpcmV0dXJuIG51bGw7dC5wcmV2ZW50RGVmYXVsdCgpLGUuc2VsZWN0T3B0aW9uKHQpfSxmdW5jdGlvbih0KXtpZighKCJidXR0b24iaW4gdCkmJmUuX2sodC5rZXlDb2RlLCJlc2MiLDI3LHQua2V5KSlyZXR1cm4gbnVsbDt0LnN0b3BQcm9wYWdhdGlvbigpLHQucHJldmVudERlZmF1bHQoKSxlLnZpc2libGU9ITF9LGZ1bmN0aW9uKHQpe2lmKCEoImJ1dHRvbiJpbiB0KSYmZS5fayh0LmtleUNvZGUsInRhYiIsOSx0LmtleSkpcmV0dXJuIG51bGw7ZS52aXNpYmxlPSExfV0scGFzdGU6ZnVuY3Rpb24odCl7ZS5kZWJvdW5jZWRPbklucHV0Q2hhbmdlKHQpfSxtb3VzZWVudGVyOmZ1bmN0aW9uKHQpe2UuaW5wdXRIb3ZlcmluZz0hMH0sbW91c2VsZWF2ZTpmdW5jdGlvbih0KXtlLmlucHV0SG92ZXJpbmc9ITF9fSxtb2RlbDp7dmFsdWU6ZS5zZWxlY3RlZExhYmVsLGNhbGxiYWNrOmZ1bmN0aW9uKHQpe2Uuc2VsZWN0ZWRMYWJlbD10fSxleHByZXNzaW9uOiJzZWxlY3RlZExhYmVsIn19LFtlLiRzbG90cy5wcmVmaXg/bigidGVtcGxhdGUiLHthdHRyczp7c2xvdDoicHJlZml4In0sc2xvdDoicHJlZml4In0sW2UuX3QoInByZWZpeCIpXSwyKTplLl9lKCksbigidGVtcGxhdGUiLHthdHRyczp7c2xvdDoic3VmZml4In0sc2xvdDoic3VmZml4In0sW24oImkiLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTohZS5zaG93Q2xvc2UsZXhwcmVzc2lvbjoiIXNob3dDbG9zZSJ9XSxjbGFzczpbImVsLXNlbGVjdF9fY2FyZXQiLCJlbC1pbnB1dF9faWNvbiIsImVsLWljb24tIitlLmljb25DbGFzc119KSxlLnNob3dDbG9zZT9uKCJpIix7c3RhdGljQ2xhc3M6ImVsLXNlbGVjdF9fY2FyZXQgZWwtaW5wdXRfX2ljb24gZWwtaWNvbi1jaXJjbGUtY2xvc2UiLG9uOntjbGljazplLmhhbmRsZUNsZWFyQ2xpY2t9fSk6ZS5fZSgpXSldLDIpLG4oInRyYW5zaXRpb24iLHthdHRyczp7bmFtZToiZWwtem9vbS1pbi10b3AifSxvbjp7ImJlZm9yZS1lbnRlciI6ZS5oYW5kbGVNZW51RW50ZXIsImFmdGVyLWxlYXZlIjplLmRvRGVzdHJveX19LFtuKCJlbC1zZWxlY3QtbWVudSIse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOmUudmlzaWJsZSYmITEhPT1lLmVtcHR5VGV4dCxleHByZXNzaW9uOiJ2aXNpYmxlICYmIGVtcHR5VGV4dCAhPT0gZmFsc2UifV0scmVmOiJwb3BwZXIiLGF0dHJzOnsiYXBwZW5kLXRvLWJvZHkiOmUucG9wcGVyQXBwZW5kVG9Cb2R5fX0sW24oImVsLXNjcm9sbGJhciIse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOmUub3B0aW9ucy5sZW5ndGg+MCYmIWUubG9hZGluZyxleHByZXNzaW9uOiJvcHRpb25zLmxlbmd0aCA+IDAgJiYgIWxvYWRpbmcifV0scmVmOiJzY3JvbGxiYXIiLGNsYXNzOnsiaXMtZW1wdHkiOiFlLmFsbG93Q3JlYXRlJiZlLnF1ZXJ5JiYwPT09ZS5maWx0ZXJlZE9wdGlvbnNDb3VudH0sYXR0cnM6e3RhZzoidWwiLCJ3cmFwLWNsYXNzIjoiZWwtc2VsZWN0LWRyb3Bkb3duX193cmFwIiwidmlldy1jbGFzcyI6ImVsLXNlbGVjdC1kcm9wZG93bl9fbGlzdCJ9fSxbZS5zaG93TmV3T3B0aW9uP24oImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZTplLnF1ZXJ5LGNyZWF0ZWQ6IiJ9fSk6ZS5fZSgpLGUuX3QoImRlZmF1bHQiKV0sMiksZS5lbXB0eVRleHQmJighZS5hbGxvd0NyZWF0ZXx8ZS5sb2FkaW5nfHxlLmFsbG93Q3JlYXRlJiYwPT09ZS5vcHRpb25zLmxlbmd0aCk/bigicCIse3N0YXRpY0NsYXNzOiJlbC1zZWxlY3QtZHJvcGRvd25fX2VtcHR5In0sW2UuX3YoIlxuICAgICAgICAiK2UuX3MoZS5lbXB0eVRleHQpKyJcbiAgICAgICIpXSk6ZS5fZSgpXSwxKV0sMSldLDEpfSxzdGF0aWNSZW5kZXJGbnM6W119O3QuYT1yfSwxNzpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJmRUIrIil9LDE4OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oIjAydzEiKX0sMTk6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiMW9aZSIpfSwyOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oInlsREoiKX0sMjM6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiRS9pbiIpfSwyNTpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJvcmJTIil9LDI2OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oInpUQ2kiKX0sMzU6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigzNiksaT1uLm4ociksbz1uKDM3KSxzPW4oMCkoaS5hLG8uYSwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PXMuZXhwb3J0c30sMzY6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHIsaT0iZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiYic3ltYm9sIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiYiZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT8ic3ltYm9sIjp0eXBlb2YgZX0sbz1uKDEpLHM9KHI9bykmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9LGE9bigyKTt0LmRlZmF1bHQ9e21peGluczpbcy5kZWZhdWx0XSxuYW1lOiJFbE9wdGlvbiIsY29tcG9uZW50TmFtZToiRWxPcHRpb24iLGluamVjdDpbInNlbGVjdCJdLHByb3BzOnt2YWx1ZTp7cmVxdWlyZWQ6ITB9LGxhYmVsOltTdHJpbmcsTnVtYmVyXSxjcmVhdGVkOkJvb2xlYW4sZGlzYWJsZWQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntpbmRleDotMSxncm91cERpc2FibGVkOiExLHZpc2libGU6ITAsaGl0U3RhdGU6ITEsaG92ZXI6ITF9fSxjb21wdXRlZDp7aXNPYmplY3Q6ZnVuY3Rpb24oKXtyZXR1cm4iW29iamVjdCBvYmplY3RdIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzLnZhbHVlKS50b0xvd2VyQ2FzZSgpfSxjdXJyZW50TGFiZWw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sYWJlbHx8KHRoaXMuaXNPYmplY3Q/IiI6dGhpcy52YWx1ZSl9LGN1cnJlbnRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlfHx0aGlzLmxhYmVsfHwiIn0saXRlbVNlbGVjdGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VsZWN0Lm11bHRpcGxlP3RoaXMuY29udGFpbnModGhpcy5zZWxlY3QudmFsdWUsdGhpcy52YWx1ZSk6dGhpcy5pc0VxdWFsKHRoaXMudmFsdWUsdGhpcy5zZWxlY3QudmFsdWUpfSxsaW1pdFJlYWNoZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuc2VsZWN0Lm11bHRpcGxlJiYoIXRoaXMuaXRlbVNlbGVjdGVkJiYodGhpcy5zZWxlY3QudmFsdWV8fFtdKS5sZW5ndGg+PXRoaXMuc2VsZWN0Lm11bHRpcGxlTGltaXQmJnRoaXMuc2VsZWN0Lm11bHRpcGxlTGltaXQ+MCl9fSx3YXRjaDp7Y3VycmVudExhYmVsOmZ1bmN0aW9uKCl7dGhpcy5jcmVhdGVkfHx0aGlzLnNlbGVjdC5yZW1vdGV8fHRoaXMuZGlzcGF0Y2goIkVsU2VsZWN0Iiwic2V0U2VsZWN0ZWQiKX0sdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLnNlbGVjdCxyPW4ucmVtb3RlLG89bi52YWx1ZUtleTtpZighdGhpcy5jcmVhdGVkJiYhcil7aWYobyYmIm9iamVjdCI9PT0odm9pZCAwPT09ZT8idW5kZWZpbmVkIjppKGUpKSYmIm9iamVjdCI9PT0odm9pZCAwPT09dD8idW5kZWZpbmVkIjppKHQpKSYmZVtvXT09PXRbb10pcmV0dXJuO3RoaXMuZGlzcGF0Y2goIkVsU2VsZWN0Iiwic2V0U2VsZWN0ZWQiKX19fSxtZXRob2RzOntpc0VxdWFsOmZ1bmN0aW9uKGUsdCl7aWYodGhpcy5pc09iamVjdCl7dmFyIG49dGhpcy5zZWxlY3QudmFsdWVLZXk7cmV0dXJuKDAsYS5nZXRWYWx1ZUJ5UGF0aCkoZSxuKT09PSgwLGEuZ2V0VmFsdWVCeVBhdGgpKHQsbil9cmV0dXJuIGU9PT10fSxjb250YWluczpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06W10sbj1hcmd1bWVudHNbMV07aWYoIXRoaXMuaXNPYmplY3QpcmV0dXJuIHQuaW5kZXhPZihuKT4tMTt2YXIgcixvPShyPWUuc2VsZWN0LnZhbHVlS2V5LHt2OnQuc29tZShmdW5jdGlvbihlKXtyZXR1cm4oMCxhLmdldFZhbHVlQnlQYXRoKShlLHIpPT09KDAsYS5nZXRWYWx1ZUJ5UGF0aCkobixyKX0pfSk7cmV0dXJuIm9iamVjdCI9PT0odm9pZCAwPT09bz8idW5kZWZpbmVkIjppKG8pKT9vLnY6dm9pZCAwfSxoYW5kbGVHcm91cERpc2FibGVkOmZ1bmN0aW9uKGUpe3RoaXMuZ3JvdXBEaXNhYmxlZD1lfSxob3Zlckl0ZW06ZnVuY3Rpb24oKXt0aGlzLmRpc2FibGVkfHx0aGlzLmdyb3VwRGlzYWJsZWR8fCh0aGlzLnNlbGVjdC5ob3ZlckluZGV4PXRoaXMuc2VsZWN0Lm9wdGlvbnMuaW5kZXhPZih0aGlzKSl9LHNlbGVjdE9wdGlvbkNsaWNrOmZ1bmN0aW9uKCl7ITAhPT10aGlzLmRpc2FibGVkJiYhMCE9PXRoaXMuZ3JvdXBEaXNhYmxlZCYmdGhpcy5kaXNwYXRjaCgiRWxTZWxlY3QiLCJoYW5kbGVPcHRpb25DbGljayIsW3RoaXMsITBdKX0scXVlcnlDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy52aXNpYmxlPW5ldyBSZWdFeHAoKDAsYS5lc2NhcGVSZWdleHBTdHJpbmcpKGUpLCJpIikudGVzdCh0aGlzLmN1cnJlbnRMYWJlbCl8fHRoaXMuY3JlYXRlZCx0aGlzLnZpc2libGV8fHRoaXMuc2VsZWN0LmZpbHRlcmVkT3B0aW9uc0NvdW50LS19fSxjcmVhdGVkOmZ1bmN0aW9uKCl7dGhpcy5zZWxlY3Qub3B0aW9ucy5wdXNoKHRoaXMpLHRoaXMuc2VsZWN0LmNhY2hlZE9wdGlvbnMucHVzaCh0aGlzKSx0aGlzLnNlbGVjdC5vcHRpb25zQ291bnQrKyx0aGlzLnNlbGVjdC5maWx0ZXJlZE9wdGlvbnNDb3VudCsrLHRoaXMuJG9uKCJxdWVyeUNoYW5nZSIsdGhpcy5xdWVyeUNoYW5nZSksdGhpcy4kb24oImhhbmRsZUdyb3VwRGlzYWJsZWQiLHRoaXMuaGFuZGxlR3JvdXBEaXNhYmxlZCl9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLnNlbGVjdC5vbk9wdGlvbkRlc3Ryb3kodGhpcy5zZWxlY3Qub3B0aW9ucy5pbmRleE9mKHRoaXMpKX19fSwzNzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oImxpIix7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6ZS52aXNpYmxlLGV4cHJlc3Npb246InZpc2libGUifV0sc3RhdGljQ2xhc3M6ImVsLXNlbGVjdC1kcm9wZG93bl9faXRlbSIsY2xhc3M6e3NlbGVjdGVkOmUuaXRlbVNlbGVjdGVkLCJpcy1kaXNhYmxlZCI6ZS5kaXNhYmxlZHx8ZS5ncm91cERpc2FibGVkfHxlLmxpbWl0UmVhY2hlZCxob3ZlcjplLmhvdmVyfSxvbjp7bW91c2VlbnRlcjplLmhvdmVySXRlbSxjbGljazpmdW5jdGlvbih0KXt0LnN0b3BQcm9wYWdhdGlvbigpLGUuc2VsZWN0T3B0aW9uQ2xpY2sodCl9fX0sW2UuX3QoImRlZmF1bHQiLFtuKCJzcGFuIixbZS5fdihlLl9zKGUuY3VycmVudExhYmVsKSldKV0pXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn0sNTpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJ5Kzd4Iil9LDY6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiSEpNeCIpfSw3OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImZLeDMiKX19KX0sZTZuMDpmdW5jdGlvbihlLHQsbil7dmFyIHI9bigiZXZENSIpLmYsaT1uKCJEMkwyIiksbz1uKCJkU3pkIikoInRvU3RyaW5nVGFnIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuKXtlJiYhaShlPW4/ZTplLnByb3RvdHlwZSxvKSYmcihlLG8se2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTp0fSl9fSxlOEFCOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCJGZUJsIiksaT1uKCI3S3ZEIiksbz1pWyJfX2NvcmUtanNfc2hhcmVkX18iXXx8KGlbIl9fY29yZS1qc19zaGFyZWRfXyJdPXt9KTsoZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG9bZV18fChvW2VdPXZvaWQgMCE9PXQ/dDp7fSl9KSgidmVyc2lvbnMiLFtdKS5wdXNoKHt2ZXJzaW9uOnIudmVyc2lvbixtb2RlOm4oIk80ZzgiKT8icHVyZSI6Imdsb2JhbCIsY29weXJpZ2h0OiLCqSAyMDE4IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpIn0pfSxlQkdGOmZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihyKXtpZih0W3JdKXJldHVybiB0W3JdLmV4cG9ydHM7dmFyIGk9dFtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxyKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCwiYSIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9Ii9kaXN0LyIsbihuLnM9MTE4KX0oezA6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4scixpLG8pe3ZhciBzLGE9ZT1lfHx7fSxsPXR5cGVvZiBlLmRlZmF1bHQ7Im9iamVjdCIhPT1sJiYiZnVuY3Rpb24iIT09bHx8KHM9ZSxhPWUuZGVmYXVsdCk7dmFyIHUsYz0iZnVuY3Rpb24iPT10eXBlb2YgYT9hLm9wdGlvbnM6YTtpZih0JiYoYy5yZW5kZXI9dC5yZW5kZXIsYy5zdGF0aWNSZW5kZXJGbnM9dC5zdGF0aWNSZW5kZXJGbnMsYy5fY29tcGlsZWQ9ITApLG4mJihjLmZ1bmN0aW9uYWw9ITApLGkmJihjLl9zY29wZUlkPWkpLG8/KHU9ZnVuY3Rpb24oZSl7KGU9ZXx8dGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR8fHRoaXMucGFyZW50JiZ0aGlzLnBhcmVudC4kdm5vZGUmJnRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KXx8InVuZGVmaW5lZCI9PXR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9ffHwoZT1fX1ZVRV9TU1JfQ09OVEVYVF9fKSxyJiZyLmNhbGwodGhpcyxlKSxlJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cyYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG8pfSxjLl9zc3JSZWdpc3Rlcj11KTpyJiYodT1yKSx1KXt2YXIgZD1jLmZ1bmN0aW9uYWwsZj1kP2MucmVuZGVyOmMuYmVmb3JlQ3JlYXRlO2Q/KGMuX2luamVjdFN0eWxlcz11LGMucmVuZGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHUuY2FsbCh0KSxmKGUsdCl9KTpjLmJlZm9yZUNyZWF0ZT1mP1tdLmNvbmNhdChmLHUpOlt1XX1yZXR1cm57ZXNNb2R1bGU6cyxleHBvcnRzOmEsb3B0aW9uczpjfX19LDE6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiZlBsbCIpfSwxMTg6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHIsaT1uKDExOSksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07by5kZWZhdWx0Lmluc3RhbGw9ZnVuY3Rpb24oZSl7ZS5jb21wb25lbnQoby5kZWZhdWx0Lm5hbWUsby5kZWZhdWx0KX0sdC5kZWZhdWx0PW8uZGVmYXVsdH0sMTE5OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oMTIwKSxpPW4ubihyKSxvPW4oMTIxKSxzPW4oMCkoaS5hLG8uYSwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PXMuZXhwb3J0c30sMTIwOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigxKSxvPShyPWkpJiZyLl9fZXNNb2R1bGU/cjp7ZGVmYXVsdDpyfTt0LmRlZmF1bHQ9e25hbWU6IkVsUmFkaW9CdXR0b24iLG1peGluczpbby5kZWZhdWx0XSxpbmplY3Q6e2VsRm9ybTp7ZGVmYXVsdDoiIn0sZWxGb3JtSXRlbTp7ZGVmYXVsdDoiIn19LHByb3BzOntsYWJlbDp7fSxkaXNhYmxlZDpCb29sZWFuLG5hbWU6U3RyaW5nfSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2ZvY3VzOiExfX0sY29tcHV0ZWQ6e3ZhbHVlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmFkaW9Hcm91cC52YWx1ZX0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX3JhZGlvR3JvdXAuJGVtaXQoImlucHV0IixlKX19LF9yYWRpb0dyb3VwOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuJHBhcmVudDtlOyl7aWYoIkVsUmFkaW9Hcm91cCI9PT1lLiRvcHRpb25zLmNvbXBvbmVudE5hbWUpcmV0dXJuIGU7ZT1lLiRwYXJlbnR9cmV0dXJuITF9LGFjdGl2ZVN0eWxlOmZ1bmN0aW9uKCl7cmV0dXJue2JhY2tncm91bmRDb2xvcjp0aGlzLl9yYWRpb0dyb3VwLmZpbGx8fCIiLGJvcmRlckNvbG9yOnRoaXMuX3JhZGlvR3JvdXAuZmlsbHx8IiIsYm94U2hhZG93OnRoaXMuX3JhZGlvR3JvdXAuZmlsbD8iLTFweCAwIDAgMCAiK3RoaXMuX3JhZGlvR3JvdXAuZmlsbDoiIixjb2xvcjp0aGlzLl9yYWRpb0dyb3VwLnRleHRDb2xvcnx8IiJ9fSxfZWxGb3JtSXRlbVNpemU6ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5lbEZvcm1JdGVtfHx7fSkuZWxGb3JtSXRlbVNpemV9LHNpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmFkaW9Hcm91cC5yYWRpb0dyb3VwU2l6ZXx8dGhpcy5fZWxGb3JtSXRlbVNpemV8fCh0aGlzLiRFTEVNRU5UfHx7fSkuc2l6ZX0saXNEaXNhYmxlZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRpc2FibGVkfHx0aGlzLl9yYWRpb0dyb3VwLmRpc2FibGVkfHwodGhpcy5lbEZvcm18fHt9KS5kaXNhYmxlZH0sdGFiSW5kZXg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc0Rpc2FibGVkfHx0aGlzLl9yYWRpb0dyb3VwJiZ0aGlzLnZhbHVlIT09dGhpcy5sYWJlbD8tMTowfX0sbWV0aG9kczp7aGFuZGxlQ2hhbmdlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe2UuZGlzcGF0Y2goIkVsUmFkaW9Hcm91cCIsImhhbmRsZUNoYW5nZSIsZS52YWx1ZSl9KX19fX0sMTIxOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbigibGFiZWwiLHtzdGF0aWNDbGFzczoiZWwtcmFkaW8tYnV0dG9uIixjbGFzczpbZS5zaXplPyJlbC1yYWRpby1idXR0b24tLSIrZS5zaXplOiIiLHsiaXMtYWN0aXZlIjplLnZhbHVlPT09ZS5sYWJlbH0seyJpcy1kaXNhYmxlZCI6ZS5pc0Rpc2FibGVkfSx7ImlzLWZvY3VzIjplLmZvY3VzfV0sYXR0cnM6e3JvbGU6InJhZGlvIiwiYXJpYS1jaGVja2VkIjplLnZhbHVlPT09ZS5sYWJlbCwiYXJpYS1kaXNhYmxlZCI6ZS5pc0Rpc2FibGVkLHRhYmluZGV4OmUudGFiSW5kZXh9LG9uOntrZXlkb3duOmZ1bmN0aW9uKHQpe2lmKCEoImJ1dHRvbiJpbiB0KSYmZS5fayh0LmtleUNvZGUsInNwYWNlIiwzMix0LmtleSkpcmV0dXJuIG51bGw7dC5zdG9wUHJvcGFnYXRpb24oKSx0LnByZXZlbnREZWZhdWx0KCksZS52YWx1ZT1lLmlzRGlzYWJsZWQ/ZS52YWx1ZTplLmxhYmVsfX19LFtuKCJpbnB1dCIse2RpcmVjdGl2ZXM6W3tuYW1lOiJtb2RlbCIscmF3TmFtZToidi1tb2RlbCIsdmFsdWU6ZS52YWx1ZSxleHByZXNzaW9uOiJ2YWx1ZSJ9XSxzdGF0aWNDbGFzczoiZWwtcmFkaW8tYnV0dG9uX19vcmlnLXJhZGlvIixhdHRyczp7dHlwZToicmFkaW8iLG5hbWU6ZS5uYW1lLGRpc2FibGVkOmUuaXNEaXNhYmxlZCx0YWJpbmRleDoiLTEifSxkb21Qcm9wczp7dmFsdWU6ZS5sYWJlbCxjaGVja2VkOmUuX3EoZS52YWx1ZSxlLmxhYmVsKX0sb246e2NoYW5nZTpbZnVuY3Rpb24odCl7ZS52YWx1ZT1lLmxhYmVsfSxlLmhhbmRsZUNoYW5nZV0sZm9jdXM6ZnVuY3Rpb24odCl7ZS5mb2N1cz0hMH0sYmx1cjpmdW5jdGlvbih0KXtlLmZvY3VzPSExfX19KSxuKCJzcGFuIix7c3RhdGljQ2xhc3M6ImVsLXJhZGlvLWJ1dHRvbl9faW5uZXIiLHN0eWxlOmUudmFsdWU9PT1lLmxhYmVsP2UuYWN0aXZlU3R5bGU6bnVsbCxvbjp7a2V5ZG93bjpmdW5jdGlvbihlKXtlLnN0b3BQcm9wYWdhdGlvbigpfX19LFtlLl90KCJkZWZhdWx0IiksZS4kc2xvdHMuZGVmYXVsdD9lLl9lKCk6W2UuX3YoZS5fcyhlLmxhYmVsKSldXSwyKV0pfSxzdGF0aWNSZW5kZXJGbnM6W119O3QuYT1yfX0pfSxlTmZhOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI7IWZ1bmN0aW9uKGkpe3ZhciBvPXt9LHM9L2R7MSw0fXxNezEsNH18eXkoPzp5eSk/fFN7MSwzfXxEb3xaWnwoW0hoTXNEbV0pXDE/fFthQV18IlteIl0qInwnW14nXSonL2csYT0vXGRcZD8vLGw9L1swLTldKlsnYS16XHUwMEEwLVx1MDVGRlx1MDcwMC1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZFRl0rfFtcdTA2MDAtXHUwNkZGXC9dKyhccyo/W1x1MDYwMC1cdTA2RkZdKyl7MSwyfS9pLHU9ZnVuY3Rpb24oKXt9O2Z1bmN0aW9uIGMoZSx0KXtmb3IodmFyIG49W10scj0wLGk9ZS5sZW5ndGg7cjxpO3IrKyluLnB1c2goZVtyXS5zdWJzdHIoMCx0KSk7cmV0dXJuIG59ZnVuY3Rpb24gZChlKXtyZXR1cm4gZnVuY3Rpb24odCxuLHIpe3ZhciBpPXJbZV0uaW5kZXhPZihuLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK24uc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCkpO35pJiYodC5tb250aD1pKX19ZnVuY3Rpb24gZihlLHQpe2ZvcihlPVN0cmluZyhlKSx0PXR8fDI7ZS5sZW5ndGg8dDspZT0iMCIrZTtyZXR1cm4gZX12YXIgaD1bIlN1bmRheSIsIk1vbmRheSIsIlR1ZXNkYXkiLCJXZWRuZXNkYXkiLCJUaHVyc2RheSIsIkZyaWRheSIsIlNhdHVyZGF5Il0scD1bIkphbnVhcnkiLCJGZWJydWFyeSIsIk1hcmNoIiwiQXByaWwiLCJNYXkiLCJKdW5lIiwiSnVseSIsIkF1Z3VzdCIsIlNlcHRlbWJlciIsIk9jdG9iZXIiLCJOb3ZlbWJlciIsIkRlY2VtYmVyIl0sbT1jKHAsMyksdj1jKGgsMyk7by5pMThuPXtkYXlOYW1lc1Nob3J0OnYsZGF5TmFtZXM6aCxtb250aE5hbWVzU2hvcnQ6bSxtb250aE5hbWVzOnAsYW1QbTpbImFtIiwicG0iXSxEb0ZuOmZ1bmN0aW9uKGUpe3JldHVybiBlK1sidGgiLCJzdCIsIm5kIiwicmQiXVtlJTEwPjM/MDooZS1lJTEwIT0xMCkqZSUxMF19fTt2YXIgZz17RDpmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXREYXkoKX0sREQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGYoZS5nZXREYXkoKSl9LERvOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQuRG9GbihlLmdldERhdGUoKSl9LGQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuZ2V0RGF0ZSgpfSxkZDpmdW5jdGlvbihlKXtyZXR1cm4gZihlLmdldERhdGUoKSl9LGRkZDpmdW5jdGlvbihlLHQpe3JldHVybiB0LmRheU5hbWVzU2hvcnRbZS5nZXREYXkoKV19LGRkZGQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5kYXlOYW1lc1tlLmdldERheSgpXX0sTTpmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRNb250aCgpKzF9LE1NOmZ1bmN0aW9uKGUpe3JldHVybiBmKGUuZ2V0TW9udGgoKSsxKX0sTU1NOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQubW9udGhOYW1lc1Nob3J0W2UuZ2V0TW9udGgoKV19LE1NTU06ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5tb250aE5hbWVzW2UuZ2V0TW9udGgoKV19LHl5OmZ1bmN0aW9uKGUpe3JldHVybiBTdHJpbmcoZS5nZXRGdWxsWWVhcigpKS5zdWJzdHIoMil9LHl5eXk6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuZ2V0RnVsbFllYXIoKX0saDpmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRIb3VycygpJTEyfHwxMn0saGg6ZnVuY3Rpb24oZSl7cmV0dXJuIGYoZS5nZXRIb3VycygpJTEyfHwxMil9LEg6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuZ2V0SG91cnMoKX0sSEg6ZnVuY3Rpb24oZSl7cmV0dXJuIGYoZS5nZXRIb3VycygpKX0sbTpmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRNaW51dGVzKCl9LG1tOmZ1bmN0aW9uKGUpe3JldHVybiBmKGUuZ2V0TWludXRlcygpKX0sczpmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRTZWNvbmRzKCl9LHNzOmZ1bmN0aW9uKGUpe3JldHVybiBmKGUuZ2V0U2Vjb25kcygpKX0sUzpmdW5jdGlvbihlKXtyZXR1cm4gTWF0aC5yb3VuZChlLmdldE1pbGxpc2Vjb25kcygpLzEwMCl9LFNTOmZ1bmN0aW9uKGUpe3JldHVybiBmKE1hdGgucm91bmQoZS5nZXRNaWxsaXNlY29uZHMoKS8xMCksMil9LFNTUzpmdW5jdGlvbihlKXtyZXR1cm4gZihlLmdldE1pbGxpc2Vjb25kcygpLDMpfSxhOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuZ2V0SG91cnMoKTwxMj90LmFtUG1bMF06dC5hbVBtWzFdfSxBOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuZ2V0SG91cnMoKTwxMj90LmFtUG1bMF0udG9VcHBlckNhc2UoKTp0LmFtUG1bMV0udG9VcHBlckNhc2UoKX0sWlo6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5nZXRUaW1lem9uZU9mZnNldCgpO3JldHVybih0PjA/Ii0iOiIrIikrZigxMDAqTWF0aC5mbG9vcihNYXRoLmFicyh0KS82MCkrTWF0aC5hYnModCklNjAsNCl9fSx5PXtkOlthLGZ1bmN0aW9uKGUsdCl7ZS5kYXk9dH1dLE06W2EsZnVuY3Rpb24oZSx0KXtlLm1vbnRoPXQtMX1dLHl5OlthLGZ1bmN0aW9uKGUsdCl7dmFyIG49KygiIisobmV3IERhdGUpLmdldEZ1bGxZZWFyKCkpLnN1YnN0cigwLDIpO2UueWVhcj0iIisodD42OD9uLTE6bikrdH1dLGg6W2EsZnVuY3Rpb24oZSx0KXtlLmhvdXI9dH1dLG06W2EsZnVuY3Rpb24oZSx0KXtlLm1pbnV0ZT10fV0sczpbYSxmdW5jdGlvbihlLHQpe2Uuc2Vjb25kPXR9XSx5eXl5OlsvXGR7NH0vLGZ1bmN0aW9uKGUsdCl7ZS55ZWFyPXR9XSxTOlsvXGQvLGZ1bmN0aW9uKGUsdCl7ZS5taWxsaXNlY29uZD0xMDAqdH1dLFNTOlsvXGR7Mn0vLGZ1bmN0aW9uKGUsdCl7ZS5taWxsaXNlY29uZD0xMCp0fV0sU1NTOlsvXGR7M30vLGZ1bmN0aW9uKGUsdCl7ZS5taWxsaXNlY29uZD10fV0sRDpbYSx1XSxkZGQ6W2wsdV0sTU1NOltsLGQoIm1vbnRoTmFtZXNTaG9ydCIpXSxNTU1NOltsLGQoIm1vbnRoTmFtZXMiKV0sYTpbbCxmdW5jdGlvbihlLHQsbil7dmFyIHI9dC50b0xvd2VyQ2FzZSgpO3I9PT1uLmFtUG1bMF0/ZS5pc1BtPSExOnI9PT1uLmFtUG1bMV0mJihlLmlzUG09ITApfV0sWlo6Wy9bXCtcLV1cZFxkOj9cZFxkLyxmdW5jdGlvbihlLHQpe3ZhciBuLHI9KHQrIiIpLm1hdGNoKC8oW1wrXC1dfFxkXGQpL2dpKTtyJiYobj02MCpyWzFdK3BhcnNlSW50KHJbMl0sMTApLGUudGltZXpvbmVPZmZzZXQ9IisiPT09clswXT9uOi1uKX1dfTt5LkREPXkuRCx5LmRkZGQ9eS5kZGQseS5Ebz15LmRkPXkuZCx5Lm1tPXkubSx5LmhoPXkuSD15LkhIPXkuaCx5Lk1NPXkuTSx5LnNzPXkucyx5LkE9eS5hLG8ubWFza3M9e2RlZmF1bHQ6ImRkZCBNTU0gZGQgeXl5eSBISDptbTpzcyIsc2hvcnREYXRlOiJNL0QveXkiLG1lZGl1bURhdGU6Ik1NTSBkLCB5eXl5Iixsb25nRGF0ZToiTU1NTSBkLCB5eXl5IixmdWxsRGF0ZToiZGRkZCwgTU1NTSBkLCB5eXl5IixzaG9ydFRpbWU6IkhIOm1tIixtZWRpdW1UaW1lOiJISDptbTpzcyIsbG9uZ1RpbWU6IkhIOm1tOnNzLlNTUyJ9LG8uZm9ybWF0PWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1ufHxvLmkxOG47aWYoIm51bWJlciI9PXR5cGVvZiBlJiYoZT1uZXcgRGF0ZShlKSksIltvYmplY3QgRGF0ZV0iIT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfHxpc05hTihlLmdldFRpbWUoKSkpdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIERhdGUgaW4gZmVjaGEuZm9ybWF0Iik7cmV0dXJuKHQ9by5tYXNrc1t0XXx8dHx8by5tYXNrcy5kZWZhdWx0KS5yZXBsYWNlKHMsZnVuY3Rpb24odCl7cmV0dXJuIHQgaW4gZz9nW3RdKGUscik6dC5zbGljZSgxLHQubGVuZ3RoLTEpfSl9LG8ucGFyc2U9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW58fG8uaTE4bjtpZigic3RyaW5nIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIGZvcm1hdCBpbiBmZWNoYS5wYXJzZSIpO2lmKHQ9by5tYXNrc1t0XXx8dCxlLmxlbmd0aD4xZTMpcmV0dXJuITE7dmFyIGk9ITAsYT17fTtpZih0LnJlcGxhY2UocyxmdW5jdGlvbih0KXtpZih5W3RdKXt2YXIgbj15W3RdLG89ZS5zZWFyY2goblswXSk7fm8/ZS5yZXBsYWNlKG5bMF0sZnVuY3Rpb24odCl7cmV0dXJuIG5bMV0oYSx0LHIpLGU9ZS5zdWJzdHIobyt0Lmxlbmd0aCksdH0pOmk9ITF9cmV0dXJuIHlbdF0/IiI6dC5zbGljZSgxLHQubGVuZ3RoLTEpfSksIWkpcmV0dXJuITE7dmFyIGwsdT1uZXcgRGF0ZTtyZXR1cm4hMD09PWEuaXNQbSYmbnVsbCE9YS5ob3VyJiYxMiE9K2EuaG91cj9hLmhvdXI9K2EuaG91cisxMjohMT09PWEuaXNQbSYmMTI9PSthLmhvdXImJihhLmhvdXI9MCksbnVsbCE9YS50aW1lem9uZU9mZnNldD8oYS5taW51dGU9KyhhLm1pbnV0ZXx8MCktK2EudGltZXpvbmVPZmZzZXQsbD1uZXcgRGF0ZShEYXRlLlVUQyhhLnllYXJ8fHUuZ2V0RnVsbFllYXIoKSxhLm1vbnRofHwwLGEuZGF5fHwxLGEuaG91cnx8MCxhLm1pbnV0ZXx8MCxhLnNlY29uZHx8MCxhLm1pbGxpc2Vjb25kfHwwKSkpOmw9bmV3IERhdGUoYS55ZWFyfHx1LmdldEZ1bGxZZWFyKCksYS5tb250aHx8MCxhLmRheXx8MSxhLmhvdXJ8fDAsYS5taW51dGV8fDAsYS5zZWNvbmR8fDAsYS5taWxsaXNlY29uZHx8MCksbH0sdm9pZCAwIT09ZSYmZS5leHBvcnRzP2UuZXhwb3J0cz1vOnZvaWQgMD09PShyPWZ1bmN0aW9uKCl7cmV0dXJuIG99LmNhbGwodCxuLHQsZSkpfHwoZS5leHBvcnRzPXIpfSgpfSxldkQ1OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCI3N1BsIiksaT1uKCJTZkI3Iiksbz1uKCJNbU13Iikscz1PYmplY3QuZGVmaW5lUHJvcGVydHk7dC5mPW4oIitFMzkiKT9PYmplY3QuZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24oZSx0LG4pe2lmKHIoZSksdD1vKHQsITApLHIobiksaSl0cnl7cmV0dXJuIHMoZSx0LG4pfWNhdGNoKGUpe31pZigiZ2V0ImluIG58fCJzZXQiaW4gbil0aHJvdyBUeXBlRXJyb3IoIkFjY2Vzc29ycyBub3Qgc3VwcG9ydGVkISIpO3JldHVybiJ2YWx1ZSJpbiBuJiYoZVt0XT1uLnZhbHVlKSxlfX0sZkJRMjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oImV2RDUiKSxpPW4oIlg4RE8iKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4pe3QgaW4gZT9yLmYoZSx0LGkoMCxuKSk6ZVt0XT1ufX0sZkRQTzpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBpPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLG4pLGkubD0hMCxpLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsImEiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPSIvZGlzdC8iLG4obi5zPTExNCl9KHswOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt2YXIgcyxhPWU9ZXx8e30sbD10eXBlb2YgZS5kZWZhdWx0OyJvYmplY3QiIT09bCYmImZ1bmN0aW9uIiE9PWx8fChzPWUsYT1lLmRlZmF1bHQpO3ZhciB1LGM9ImZ1bmN0aW9uIj09dHlwZW9mIGE/YS5vcHRpb25zOmE7aWYodCYmKGMucmVuZGVyPXQucmVuZGVyLGMuc3RhdGljUmVuZGVyRm5zPXQuc3RhdGljUmVuZGVyRm5zLGMuX2NvbXBpbGVkPSEwKSxuJiYoYy5mdW5jdGlvbmFsPSEwKSxpJiYoYy5fc2NvcGVJZD1pKSxvPyh1PWZ1bmN0aW9uKGUpeyhlPWV8fHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fHx0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCl8fCJ1bmRlZmluZWQiPT10eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfX3x8KGU9X19WVUVfU1NSX0NPTlRFWFRfXyksciYmci5jYWxsKHRoaXMsZSksZSYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChvKX0sYy5fc3NyUmVnaXN0ZXI9dSk6ciYmKHU9ciksdSl7dmFyIGQ9Yy5mdW5jdGlvbmFsLGY9ZD9jLnJlbmRlcjpjLmJlZm9yZUNyZWF0ZTtkPyhjLl9pbmplY3RTdHlsZXM9dSxjLnJlbmRlcj1mdW5jdGlvbihlLHQpe3JldHVybiB1LmNhbGwodCksZihlLHQpfSk6Yy5iZWZvcmVDcmVhdGU9Zj9bXS5jb25jYXQoZix1KTpbdV19cmV0dXJue2VzTW9kdWxlOnMsZXhwb3J0czphLG9wdGlvbnM6Y319fSwxOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImZQbGwiKX0sMTE0OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigxMTUpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O28uZGVmYXVsdC5pbnN0YWxsPWZ1bmN0aW9uKGUpe2UuY29tcG9uZW50KG8uZGVmYXVsdC5uYW1lLG8uZGVmYXVsdCl9LHQuZGVmYXVsdD1vLmRlZmF1bHR9LDExNTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKDExNiksaT1uLm4ociksbz1uKDExNykscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDExNjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcixpPW4oMSksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07dmFyIHM9T2JqZWN0LmZyZWV6ZSh7TEVGVDozNyxVUDozOCxSSUdIVDozOSxET1dOOjQwfSk7dC5kZWZhdWx0PXtuYW1lOiJFbFJhZGlvR3JvdXAiLGNvbXBvbmVudE5hbWU6IkVsUmFkaW9Hcm91cCIsaW5qZWN0OntlbEZvcm1JdGVtOntkZWZhdWx0OiIifX0sbWl4aW5zOltvLmRlZmF1bHRdLHByb3BzOnt2YWx1ZTp7fSxzaXplOlN0cmluZyxmaWxsOlN0cmluZyx0ZXh0Q29sb3I6U3RyaW5nLGRpc2FibGVkOkJvb2xlYW59LGNvbXB1dGVkOntfZWxGb3JtSXRlbVNpemU6ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5lbEZvcm1JdGVtfHx7fSkuZWxGb3JtSXRlbVNpemV9LHJhZGlvR3JvdXBTaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2l6ZXx8dGhpcy5fZWxGb3JtSXRlbVNpemV8fCh0aGlzLiRFTEVNRU5UfHx7fSkuc2l6ZX19LGNyZWF0ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuJG9uKCJoYW5kbGVDaGFuZ2UiLGZ1bmN0aW9uKHQpe2UuJGVtaXQoImNoYW5nZSIsdCl9KX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIlt0eXBlPXJhZGlvXSIpLHQ9dGhpcy4kZWwucXVlcnlTZWxlY3RvckFsbCgiW3JvbGU9cmFkaW9dIilbMF07IVtdLnNvbWUuY2FsbChlLGZ1bmN0aW9uKGUpe3JldHVybiBlLmNoZWNrZWR9KSYmdCYmKHQudGFiSW5kZXg9MCl9LG1ldGhvZHM6e2hhbmRsZUtleWRvd246ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQsbj0iSU5QVVQiPT09dC5ub2RlTmFtZT8iW3R5cGU9cmFkaW9dIjoiW3JvbGU9cmFkaW9dIixyPXRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3JBbGwobiksaT1yLmxlbmd0aCxvPVtdLmluZGV4T2YuY2FsbChyLHQpLGE9dGhpcy4kZWwucXVlcnlTZWxlY3RvckFsbCgiW3JvbGU9cmFkaW9dIik7c3dpdGNoKGUua2V5Q29kZSl7Y2FzZSBzLkxFRlQ6Y2FzZSBzLlVQOmUuc3RvcFByb3BhZ2F0aW9uKCksZS5wcmV2ZW50RGVmYXVsdCgpLDA9PT1vPyhhW2ktMV0uY2xpY2soKSxhW2ktMV0uZm9jdXMoKSk6KGFbby0xXS5jbGljaygpLGFbby0xXS5mb2N1cygpKTticmVhaztjYXNlIHMuUklHSFQ6Y2FzZSBzLkRPV046bz09PWktMT8oZS5zdG9wUHJvcGFnYXRpb24oKSxlLnByZXZlbnREZWZhdWx0KCksYVswXS5jbGljaygpLGFbMF0uZm9jdXMoKSk6KGFbbysxXS5jbGljaygpLGFbbysxXS5mb2N1cygpKX19fSx3YXRjaDp7dmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5kaXNwYXRjaCgiRWxGb3JtSXRlbSIsImVsLmZvcm0uY2hhbmdlIixbdGhpcy52YWx1ZV0pfX19fSwxMTc6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kY3JlYXRlRWxlbWVudDtyZXR1cm4odGhpcy5fc2VsZi5fY3x8ZSkoImRpdiIse3N0YXRpY0NsYXNzOiJlbC1yYWRpby1ncm91cCIsYXR0cnM6e3JvbGU6InJhZGlvZ3JvdXAifSxvbjp7a2V5ZG93bjp0aGlzLmhhbmRsZUtleWRvd259fSxbdGhpcy5fdCgiZGVmYXVsdCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn19KX0sImZFQisiOmZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihyKXtpZih0W3JdKXJldHVybiB0W3JdLmV4cG9ydHM7dmFyIGk9dFtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxyKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCwiYSIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9Ii9kaXN0LyIsbihuLnM9MzM2KX0oezE4OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oIjAydzEiKX0sMjpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJ5bERKIil9LDM6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiMmt2QSIpfSwzMzY6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHIsaT1uKDMzNyksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07by5kZWZhdWx0Lmluc3RhbGw9ZnVuY3Rpb24oZSl7ZS5jb21wb25lbnQoby5kZWZhdWx0Lm5hbWUsby5kZWZhdWx0KX0sdC5kZWZhdWx0PW8uZGVmYXVsdH0sMzM3OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByPW4oMTgpLGk9YShuKDM4KSksbz1uKDIpLHM9YShuKDMzOCkpO2Z1bmN0aW9uIGEoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXQuZGVmYXVsdD17bmFtZToiRWxTY3JvbGxiYXIiLGNvbXBvbmVudHM6e0JhcjpzLmRlZmF1bHR9LHByb3BzOntuYXRpdmU6Qm9vbGVhbix3cmFwU3R5bGU6e30sd3JhcENsYXNzOnt9LHZpZXdDbGFzczp7fSx2aWV3U3R5bGU6e30sbm9yZXNpemU6Qm9vbGVhbix0YWc6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6ImRpdiJ9fSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3NpemVXaWR0aDoiMCIsc2l6ZUhlaWdodDoiMCIsbW92ZVg6MCxtb3ZlWTowfX0sY29tcHV0ZWQ6e3dyYXA6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kcmVmcy53cmFwfX0scmVuZGVyOmZ1bmN0aW9uKGUpe3ZhciB0PSgwLGkuZGVmYXVsdCkoKSxuPXRoaXMud3JhcFN0eWxlO2lmKHQpe3ZhciByPSItIit0KyJweCIsYT0ibWFyZ2luLWJvdHRvbTogIityKyI7IG1hcmdpbi1yaWdodDogIityKyI7IjtBcnJheS5pc0FycmF5KHRoaXMud3JhcFN0eWxlKT8obj0oMCxvLnRvT2JqZWN0KSh0aGlzLndyYXBTdHlsZSkpLm1hcmdpblJpZ2h0PW4ubWFyZ2luQm90dG9tPXI6InN0cmluZyI9PXR5cGVvZiB0aGlzLndyYXBTdHlsZT9uKz1hOm49YX12YXIgbD1lKHRoaXMudGFnLHtjbGFzczpbImVsLXNjcm9sbGJhcl9fdmlldyIsdGhpcy52aWV3Q2xhc3NdLHN0eWxlOnRoaXMudmlld1N0eWxlLHJlZjoicmVzaXplIn0sdGhpcy4kc2xvdHMuZGVmYXVsdCksdT1lKCJkaXYiLHtyZWY6IndyYXAiLHN0eWxlOm4sb246e3Njcm9sbDp0aGlzLmhhbmRsZVNjcm9sbH0sY2xhc3M6W3RoaXMud3JhcENsYXNzLCJlbC1zY3JvbGxiYXJfX3dyYXAiLHQ/IiI6ImVsLXNjcm9sbGJhcl9fd3JhcC0taGlkZGVuLWRlZmF1bHQiXX0sW1tsXV0pO3JldHVybiBlKCJkaXYiLHtjbGFzczoiZWwtc2Nyb2xsYmFyIn0sdGhpcy5uYXRpdmU/W2UoImRpdiIse3JlZjoid3JhcCIsY2xhc3M6W3RoaXMud3JhcENsYXNzLCJlbC1zY3JvbGxiYXJfX3dyYXAiXSxzdHlsZTpufSxbW2xdXSldOlt1LGUocy5kZWZhdWx0LHthdHRyczp7bW92ZTp0aGlzLm1vdmVYLHNpemU6dGhpcy5zaXplV2lkdGh9fSxbXSksZShzLmRlZmF1bHQse2F0dHJzOnt2ZXJ0aWNhbDohMCxtb3ZlOnRoaXMubW92ZVksc2l6ZTp0aGlzLnNpemVIZWlnaHR9fSxbXSldKX0sbWV0aG9kczp7aGFuZGxlU2Nyb2xsOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy53cmFwO3RoaXMubW92ZVk9MTAwKmUuc2Nyb2xsVG9wL2UuY2xpZW50SGVpZ2h0LHRoaXMubW92ZVg9MTAwKmUuc2Nyb2xsTGVmdC9lLmNsaWVudFdpZHRofSx1cGRhdGU6ZnVuY3Rpb24oKXt2YXIgZSx0LG49dGhpcy53cmFwO24mJihlPTEwMCpuLmNsaWVudEhlaWdodC9uLnNjcm9sbEhlaWdodCx0PTEwMCpuLmNsaWVudFdpZHRoL24uc2Nyb2xsV2lkdGgsdGhpcy5zaXplSGVpZ2h0PWU8MTAwP2UrIiUiOiIiLHRoaXMuc2l6ZVdpZHRoPXQ8MTAwP3QrIiUiOiIiKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLm5hdGl2ZXx8KHRoaXMuJG5leHRUaWNrKHRoaXMudXBkYXRlKSwhdGhpcy5ub3Jlc2l6ZSYmKDAsci5hZGRSZXNpemVMaXN0ZW5lcikodGhpcy4kcmVmcy5yZXNpemUsdGhpcy51cGRhdGUpKX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMubmF0aXZlfHwhdGhpcy5ub3Jlc2l6ZSYmKDAsci5yZW1vdmVSZXNpemVMaXN0ZW5lcikodGhpcy4kcmVmcy5yZXNpemUsdGhpcy51cGRhdGUpfX19LDMzODpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj1uKDMpLGk9bigzMzkpO3QuZGVmYXVsdD17bmFtZToiQmFyIixwcm9wczp7dmVydGljYWw6Qm9vbGVhbixzaXplOlN0cmluZyxtb3ZlOk51bWJlcn0sY29tcHV0ZWQ6e2JhcjpmdW5jdGlvbigpe3JldHVybiBpLkJBUl9NQVBbdGhpcy52ZXJ0aWNhbD8idmVydGljYWwiOiJob3Jpem9udGFsIl19LHdyYXA6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kcGFyZW50LndyYXB9fSxyZW5kZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5zaXplLG49dGhpcy5tb3ZlLHI9dGhpcy5iYXI7cmV0dXJuIGUoImRpdiIse2NsYXNzOlsiZWwtc2Nyb2xsYmFyX19iYXIiLCJpcy0iK3Iua2V5XSxvbjp7bW91c2Vkb3duOnRoaXMuY2xpY2tUcmFja0hhbmRsZXJ9fSxbZSgiZGl2Iix7cmVmOiJ0aHVtYiIsY2xhc3M6ImVsLXNjcm9sbGJhcl9fdGh1bWIiLG9uOnttb3VzZWRvd246dGhpcy5jbGlja1RodW1iSGFuZGxlcn0sc3R5bGU6KDAsaS5yZW5kZXJUaHVtYlN0eWxlKSh7c2l6ZTp0LG1vdmU6bixiYXI6cn0pfSxbXSldKX0sbWV0aG9kczp7Y2xpY2tUaHVtYkhhbmRsZXI6ZnVuY3Rpb24oZSl7dGhpcy5zdGFydERyYWcoZSksdGhpc1t0aGlzLmJhci5heGlzXT1lLmN1cnJlbnRUYXJnZXRbdGhpcy5iYXIub2Zmc2V0XS0oZVt0aGlzLmJhci5jbGllbnRdLWUuY3VycmVudFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVt0aGlzLmJhci5kaXJlY3Rpb25dKX0sY2xpY2tUcmFja0hhbmRsZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9MTAwKihNYXRoLmFicyhlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVt0aGlzLmJhci5kaXJlY3Rpb25dLWVbdGhpcy5iYXIuY2xpZW50XSktdGhpcy4kcmVmcy50aHVtYlt0aGlzLmJhci5vZmZzZXRdLzIpL3RoaXMuJGVsW3RoaXMuYmFyLm9mZnNldF07dGhpcy53cmFwW3RoaXMuYmFyLnNjcm9sbF09dCp0aGlzLndyYXBbdGhpcy5iYXIuc2Nyb2xsU2l6ZV0vMTAwfSxzdGFydERyYWc6ZnVuY3Rpb24oZSl7ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSx0aGlzLmN1cnNvckRvd249ITAsKDAsci5vbikoZG9jdW1lbnQsIm1vdXNlbW92ZSIsdGhpcy5tb3VzZU1vdmVEb2N1bWVudEhhbmRsZXIpLCgwLHIub24pKGRvY3VtZW50LCJtb3VzZXVwIix0aGlzLm1vdXNlVXBEb2N1bWVudEhhbmRsZXIpLGRvY3VtZW50Lm9uc2VsZWN0c3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX19LG1vdXNlTW92ZURvY3VtZW50SGFuZGxlcjpmdW5jdGlvbihlKXtpZighMSE9PXRoaXMuY3Vyc29yRG93bil7dmFyIHQ9dGhpc1t0aGlzLmJhci5heGlzXTtpZih0KXt2YXIgbj0xMDAqKC0xKih0aGlzLiRlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVt0aGlzLmJhci5kaXJlY3Rpb25dLWVbdGhpcy5iYXIuY2xpZW50XSktKHRoaXMuJHJlZnMudGh1bWJbdGhpcy5iYXIub2Zmc2V0XS10KSkvdGhpcy4kZWxbdGhpcy5iYXIub2Zmc2V0XTt0aGlzLndyYXBbdGhpcy5iYXIuc2Nyb2xsXT1uKnRoaXMud3JhcFt0aGlzLmJhci5zY3JvbGxTaXplXS8xMDB9fX0sbW91c2VVcERvY3VtZW50SGFuZGxlcjpmdW5jdGlvbihlKXt0aGlzLmN1cnNvckRvd249ITEsdGhpc1t0aGlzLmJhci5heGlzXT0wLCgwLHIub2ZmKShkb2N1bWVudCwibW91c2Vtb3ZlIix0aGlzLm1vdXNlTW92ZURvY3VtZW50SGFuZGxlciksZG9jdW1lbnQub25zZWxlY3RzdGFydD1udWxsfX0sZGVzdHJveWVkOmZ1bmN0aW9uKCl7KDAsci5vZmYpKGRvY3VtZW50LCJtb3VzZXVwIix0aGlzLm1vdXNlVXBEb2N1bWVudEhhbmRsZXIpfX19LDMzOTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMCx0LnJlbmRlclRodW1iU3R5bGU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5tb3ZlLG49ZS5zaXplLHI9ZS5iYXIsaT17fSxvPSJ0cmFuc2xhdGUiK3IuYXhpcysiKCIrdCsiJSkiO3JldHVybiBpW3Iuc2l6ZV09bixpLnRyYW5zZm9ybT1vLGkubXNUcmFuc2Zvcm09byxpLndlYmtpdFRyYW5zZm9ybT1vLGl9O3QuQkFSX01BUD17dmVydGljYWw6e29mZnNldDoib2Zmc2V0SGVpZ2h0IixzY3JvbGw6InNjcm9sbFRvcCIsc2Nyb2xsU2l6ZToic2Nyb2xsSGVpZ2h0IixzaXplOiJoZWlnaHQiLGtleToidmVydGljYWwiLGF4aXM6IlkiLGNsaWVudDoiY2xpZW50WSIsZGlyZWN0aW9uOiJ0b3AifSxob3Jpem9udGFsOntvZmZzZXQ6Im9mZnNldFdpZHRoIixzY3JvbGw6InNjcm9sbExlZnQiLHNjcm9sbFNpemU6InNjcm9sbFdpZHRoIixzaXplOiJ3aWR0aCIsa2V5OiJob3Jpem9udGFsIixheGlzOiJYIixjbGllbnQ6ImNsaWVudFgiLGRpcmVjdGlvbjoibGVmdCJ9fX0sMzg6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiNlR3aCIpfX0pfSxmSlViOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCI3N1BsIiksaT1uKCJFcWpJIiksbz1uKCJxQVJQIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYocihlKSxpKHQpJiZ0LmNvbnN0cnVjdG9yPT09ZSlyZXR1cm4gdDt2YXIgbj1vLmYoZSk7cmV0dXJuKDAsbi5yZXNvbHZlKSh0KSxuLnByb21pc2V9fSxmS3gzOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigiNyt1VyIpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9LHM9bigiN0o5cyIpO3ZhciBhPW8uZGVmYXVsdC5wcm90b3R5cGUuJGlzU2VydmVyP2Z1bmN0aW9uKCl7fTpuKCJOTW9mIiksbD1mdW5jdGlvbihlKXtyZXR1cm4gZS5zdG9wUHJvcGFnYXRpb24oKX07dC5kZWZhdWx0PXtwcm9wczp7dHJhbnNmb3JtT3JpZ2luOnt0eXBlOltCb29sZWFuLFN0cmluZ10sZGVmYXVsdDohMH0scGxhY2VtZW50Ont0eXBlOlN0cmluZyxkZWZhdWx0OiJib3R0b20ifSxib3VuZGFyaWVzUGFkZGluZzp7dHlwZTpOdW1iZXIsZGVmYXVsdDo1fSxyZWZlcmVuY2U6e30scG9wcGVyOnt9LG9mZnNldDp7ZGVmYXVsdDowfSx2YWx1ZTpCb29sZWFuLHZpc2libGVBcnJvdzpCb29sZWFuLGFycm93T2Zmc2V0Ont0eXBlOk51bWJlcixkZWZhdWx0OjM1fSxhcHBlbmRUb0JvZHk6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxwb3BwZXJPcHRpb25zOnt0eXBlOk9iamVjdCxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJue2dwdUFjY2VsZXJhdGlvbjohMX19fX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntzaG93UG9wcGVyOiExLGN1cnJlbnRQbGFjZW1lbnQ6IiJ9fSx3YXRjaDp7dmFsdWU6e2ltbWVkaWF0ZTohMCxoYW5kbGVyOmZ1bmN0aW9uKGUpe3RoaXMuc2hvd1BvcHBlcj1lLHRoaXMuJGVtaXQoImlucHV0IixlKX19LHNob3dQb3BwZXI6ZnVuY3Rpb24oZSl7dGhpcy5kaXNhYmxlZHx8KGU/dGhpcy51cGRhdGVQb3BwZXIoKTp0aGlzLmRlc3Ryb3lQb3BwZXIoKSx0aGlzLiRlbWl0KCJpbnB1dCIsZSkpfX0sbWV0aG9kczp7Y3JlYXRlUG9wcGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZighdGhpcy4kaXNTZXJ2ZXImJih0aGlzLmN1cnJlbnRQbGFjZW1lbnQ9dGhpcy5jdXJyZW50UGxhY2VtZW50fHx0aGlzLnBsYWNlbWVudCwvXih0b3B8Ym90dG9tfGxlZnR8cmlnaHQpKC1zdGFydHwtZW5kKT8kL2cudGVzdCh0aGlzLmN1cnJlbnRQbGFjZW1lbnQpKSl7dmFyIHQ9dGhpcy5wb3BwZXJPcHRpb25zLG49dGhpcy5wb3BwZXJFbG09dGhpcy5wb3BwZXJFbG18fHRoaXMucG9wcGVyfHx0aGlzLiRyZWZzLnBvcHBlcixyPXRoaXMucmVmZXJlbmNlRWxtPXRoaXMucmVmZXJlbmNlRWxtfHx0aGlzLnJlZmVyZW5jZXx8dGhpcy4kcmVmcy5yZWZlcmVuY2U7IXImJnRoaXMuJHNsb3RzLnJlZmVyZW5jZSYmdGhpcy4kc2xvdHMucmVmZXJlbmNlWzBdJiYocj10aGlzLnJlZmVyZW5jZUVsbT10aGlzLiRzbG90cy5yZWZlcmVuY2VbMF0uZWxtKSxuJiZyJiYodGhpcy52aXNpYmxlQXJyb3cmJnRoaXMuYXBwZW5kQXJyb3cobiksdGhpcy5hcHBlbmRUb0JvZHkmJmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5wb3BwZXJFbG0pLHRoaXMucG9wcGVySlMmJnRoaXMucG9wcGVySlMuZGVzdHJveSYmdGhpcy5wb3BwZXJKUy5kZXN0cm95KCksdC5wbGFjZW1lbnQ9dGhpcy5jdXJyZW50UGxhY2VtZW50LHQub2Zmc2V0PXRoaXMub2Zmc2V0LHQuYXJyb3dPZmZzZXQ9dGhpcy5hcnJvd09mZnNldCx0aGlzLnBvcHBlckpTPW5ldyBhKHIsbix0KSx0aGlzLnBvcHBlckpTLm9uQ3JlYXRlKGZ1bmN0aW9uKHQpe2UuJGVtaXQoImNyZWF0ZWQiLGUpLGUucmVzZXRUcmFuc2Zvcm1PcmlnaW4oKSxlLiRuZXh0VGljayhlLnVwZGF0ZVBvcHBlcil9KSwiZnVuY3Rpb24iPT10eXBlb2YgdC5vblVwZGF0ZSYmdGhpcy5wb3BwZXJKUy5vblVwZGF0ZSh0Lm9uVXBkYXRlKSx0aGlzLnBvcHBlckpTLl9wb3BwZXIuc3R5bGUuekluZGV4PXMuUG9wdXBNYW5hZ2VyLm5leHRaSW5kZXgoKSx0aGlzLnBvcHBlckVsbS5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsbCkpfX0sdXBkYXRlUG9wcGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wb3BwZXJKUztlPyhlLnVwZGF0ZSgpLGUuX3BvcHBlciYmKGUuX3BvcHBlci5zdHlsZS56SW5kZXg9cy5Qb3B1cE1hbmFnZXIubmV4dFpJbmRleCgpKSk6dGhpcy5jcmVhdGVQb3BwZXIoKX0sZG9EZXN0cm95OmZ1bmN0aW9uKGUpeyF0aGlzLnBvcHBlckpTfHx0aGlzLnNob3dQb3BwZXImJiFlfHwodGhpcy5wb3BwZXJKUy5kZXN0cm95KCksdGhpcy5wb3BwZXJKUz1udWxsKX0sZGVzdHJveVBvcHBlcjpmdW5jdGlvbigpe3RoaXMucG9wcGVySlMmJnRoaXMucmVzZXRUcmFuc2Zvcm1PcmlnaW4oKX0scmVzZXRUcmFuc2Zvcm1PcmlnaW46ZnVuY3Rpb24oKXtpZih0aGlzLnRyYW5zZm9ybU9yaWdpbil7dmFyIGU9dGhpcy5wb3BwZXJKUy5fcG9wcGVyLmdldEF0dHJpYnV0ZSgieC1wbGFjZW1lbnQiKS5zcGxpdCgiLSIpWzBdLHQ9e3RvcDoiYm90dG9tIixib3R0b206InRvcCIsbGVmdDoicmlnaHQiLHJpZ2h0OiJsZWZ0In1bZV07dGhpcy5wb3BwZXJKUy5fcG9wcGVyLnN0eWxlLnRyYW5zZm9ybU9yaWdpbj0ic3RyaW5nIj09dHlwZW9mIHRoaXMudHJhbnNmb3JtT3JpZ2luP3RoaXMudHJhbnNmb3JtT3JpZ2luOlsidG9wIiwiYm90dG9tIl0uaW5kZXhPZihlKT4tMT8iY2VudGVyICIrdDp0KyIgY2VudGVyIn19LGFwcGVuZEFycm93OmZ1bmN0aW9uKGUpe3ZhciB0PXZvaWQgMDtpZighdGhpcy5hcHBlbmRlZCl7Zm9yKHZhciBuIGluIHRoaXMuYXBwZW5kZWQ9ITAsZS5hdHRyaWJ1dGVzKWlmKC9eX3YtLy50ZXN0KGUuYXR0cmlidXRlc1tuXS5uYW1lKSl7dD1lLmF0dHJpYnV0ZXNbbl0ubmFtZTticmVha312YXIgcj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTt0JiZyLnNldEF0dHJpYnV0ZSh0LCIiKSxyLnNldEF0dHJpYnV0ZSgieC1hcnJvdyIsIiIpLHIuY2xhc3NOYW1lPSJwb3BwZXJfX2Fycm93IixlLmFwcGVuZENoaWxkKHIpfX19LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLmRvRGVzdHJveSghMCksdGhpcy5wb3BwZXJFbG0mJnRoaXMucG9wcGVyRWxtLnBhcmVudE5vZGU9PT1kb2N1bWVudC5ib2R5JiYodGhpcy5wb3BwZXJFbG0ucmVtb3ZlRXZlbnRMaXN0ZW5lcigiY2xpY2siLGwpLGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5wb3BwZXJFbG0pKX0sZGVhY3RpdmF0ZWQ6ZnVuY3Rpb24oKXt0aGlzLiRvcHRpb25zLmJlZm9yZURlc3Ryb3lbMF0uY2FsbCh0aGlzKX19fSxmUGxsOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwLHQuZGVmYXVsdD17bWV0aG9kczp7ZGlzcGF0Y2g6ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcj10aGlzLiRwYXJlbnR8fHRoaXMuJHJvb3QsaT1yLiRvcHRpb25zLmNvbXBvbmVudE5hbWU7ciYmKCFpfHxpIT09ZSk7KShyPXIuJHBhcmVudCkmJihpPXIuJG9wdGlvbnMuY29tcG9uZW50TmFtZSk7ciYmci4kZW1pdC5hcHBseShyLFt0XS5jb25jYXQobikpfSxicm9hZGNhc3Q6ZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbiBlKHQsbixyKXt0aGlzLiRjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGkpe2kuJG9wdGlvbnMuY29tcG9uZW50TmFtZT09PXQ/aS4kZW1pdC5hcHBseShpLFtuXS5jb25jYXQocikpOmUuYXBwbHkoaSxbdCxuXS5jb25jYXQoW3JdKSl9KX0pLmNhbGwodGhpcyxlLHQsbil9fX19LGZVcVc6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmInN5bWJvbCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIGV9O3QuaXNWTm9kZT1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9PWUmJiJvYmplY3QiPT09KHZvaWQgMD09PWU/InVuZGVmaW5lZCI6cihlKSkmJigwLGkuaGFzT3duKShlLCJjb21wb25lbnRPcHRpb25zIil9LHQuZ2V0Rmlyc3RDb21wb25lbnRDaGlsZD1mdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUudGFnfSlbMF19O3ZhciBpPW4oInlsREoiKX0sZldmYjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oIjdLdkQiKSxpPW4oIkQyTDIiKSxvPW4oIitFMzkiKSxzPW4oImtNMkUiKSxhPW4oIjg4MC8iKSxsPW4oIjA2T1kiKS5LRVksdT1uKCJTODJsIiksYz1uKCJlOEFCIiksZD1uKCJlNm4wIiksZj1uKCIzRW8rIiksaD1uKCJkU3pkIikscD1uKCJLaDRXIiksbT1uKCJjcmxwIiksdj1uKCJYYzRHIiksZz1uKCI3VU11IikseT1uKCI3N1BsIiksXz1uKCJFcWpJIiksYj1uKCJUY1E3IikseD1uKCJNbU13IiksQz1uKCJYOERPIiksdz1uKCJZb2JrIiksaz1uKCJScmVsIiksUz1uKCJMS1plIiksQT1uKCJldkQ1IiksRT1uKCJsa3RqIiksTT1TLmYsTz1BLmYsRD1rLmYsJD1yLlN5bWJvbCxUPXIuSlNPTixQPVQmJlQuc3RyaW5naWZ5LE49aCgiX2hpZGRlbiIpLEY9aCgidG9QcmltaXRpdmUiKSxJPXt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLFI9Yygic3ltYm9sLXJlZ2lzdHJ5Iiksaj1jKCJzeW1ib2xzIiksQj1jKCJvcC1zeW1ib2xzIiksTD1PYmplY3QucHJvdG90eXBlLFY9ImZ1bmN0aW9uIj09dHlwZW9mICQsSD1yLlFPYmplY3Qsej0hSHx8IUgucHJvdG90eXBlfHwhSC5wcm90b3R5cGUuZmluZENoaWxkLFc9byYmdShmdW5jdGlvbigpe3JldHVybiA3IT13KE8oe30sImEiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTyh0aGlzLCJhIix7dmFsdWU6N30pLmF9fSkpLmF9KT9mdW5jdGlvbihlLHQsbil7dmFyIHI9TShMLHQpO3ImJmRlbGV0ZSBMW3RdLE8oZSx0LG4pLHImJmUhPT1MJiZPKEwsdCxyKX06TyxxPWZ1bmN0aW9uKGUpe3ZhciB0PWpbZV09dygkLnByb3RvdHlwZSk7cmV0dXJuIHQuX2s9ZSx0fSxVPVYmJiJzeW1ib2wiPT10eXBlb2YgJC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4ic3ltYm9sIj09dHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgJH0sSz1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGU9PT1MJiZLKEIsdCxuKSx5KGUpLHQ9eCh0LCEwKSx5KG4pLGkoaix0KT8obi5lbnVtZXJhYmxlPyhpKGUsTikmJmVbTl1bdF0mJihlW05dW3RdPSExKSxuPXcobix7ZW51bWVyYWJsZTpDKDAsITEpfSkpOihpKGUsTil8fE8oZSxOLEMoMSx7fSkpLGVbTl1bdF09ITApLFcoZSx0LG4pKTpPKGUsdCxuKX0sWT1mdW5jdGlvbihlLHQpe3koZSk7Zm9yKHZhciBuLHI9dih0PWIodCkpLGk9MCxvPXIubGVuZ3RoO28+aTspSyhlLG49cltpKytdLHRbbl0pO3JldHVybiBlfSxHPWZ1bmN0aW9uKGUpe3ZhciB0PUkuY2FsbCh0aGlzLGU9eChlLCEwKSk7cmV0dXJuISh0aGlzPT09TCYmaShqLGUpJiYhaShCLGUpKSYmKCEodHx8IWkodGhpcyxlKXx8IWkoaixlKXx8aSh0aGlzLE4pJiZ0aGlzW05dW2VdKXx8dCl9LEo9ZnVuY3Rpb24oZSx0KXtpZihlPWIoZSksdD14KHQsITApLGUhPT1MfHwhaShqLHQpfHxpKEIsdCkpe3ZhciBuPU0oZSx0KTtyZXR1cm4hbnx8IWkoaix0KXx8aShlLE4pJiZlW05dW3RdfHwobi5lbnVtZXJhYmxlPSEwKSxufX0sWD1mdW5jdGlvbihlKXtmb3IodmFyIHQsbj1EKGIoZSkpLHI9W10sbz0wO24ubGVuZ3RoPm87KWkoaix0PW5bbysrXSl8fHQ9PU58fHQ9PWx8fHIucHVzaCh0KTtyZXR1cm4gcn0sUT1mdW5jdGlvbihlKXtmb3IodmFyIHQsbj1lPT09TCxyPUQobj9COmIoZSkpLG89W10scz0wO3IubGVuZ3RoPnM7KSFpKGosdD1yW3MrK10pfHxuJiYhaShMLHQpfHxvLnB1c2goalt0XSk7cmV0dXJuIG99O1Z8fChhKCgkPWZ1bmN0aW9uKCl7aWYodGhpcyBpbnN0YW5jZW9mICQpdGhyb3cgVHlwZUVycm9yKCJTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhIik7dmFyIGU9Zihhcmd1bWVudHMubGVuZ3RoPjA/YXJndW1lbnRzWzBdOnZvaWQgMCksdD1mdW5jdGlvbihuKXt0aGlzPT09TCYmdC5jYWxsKEIsbiksaSh0aGlzLE4pJiZpKHRoaXNbTl0sZSkmJih0aGlzW05dW2VdPSExKSxXKHRoaXMsZSxDKDEsbikpfTtyZXR1cm4gbyYmeiYmVyhMLGUse2NvbmZpZ3VyYWJsZTohMCxzZXQ6dH0pLHEoZSl9KS5wcm90b3R5cGUsInRvU3RyaW5nIixmdW5jdGlvbigpe3JldHVybiB0aGlzLl9rfSksUy5mPUosQS5mPUssbigibjBUNiIpLmY9ay5mPVgsbigiTnBJUSIpLmY9RyxuKCIxa1M3IikuZj1RLG8mJiFuKCJPNGc4IikmJmEoTCwicHJvcGVydHlJc0VudW1lcmFibGUiLEcsITApLHAuZj1mdW5jdGlvbihlKXtyZXR1cm4gcShoKGUpKX0pLHMocy5HK3MuVytzLkYqIVYse1N5bWJvbDokfSk7Zm9yKHZhciBaPSJoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcyIuc3BsaXQoIiwiKSxlZT0wO1oubGVuZ3RoPmVlOyloKFpbZWUrK10pO2Zvcih2YXIgdGU9RShoLnN0b3JlKSxuZT0wO3RlLmxlbmd0aD5uZTspbSh0ZVtuZSsrXSk7cyhzLlMrcy5GKiFWLCJTeW1ib2wiLHtmb3I6ZnVuY3Rpb24oZSl7cmV0dXJuIGkoUixlKz0iIik/UltlXTpSW2VdPSQoZSl9LGtleUZvcjpmdW5jdGlvbihlKXtpZighVShlKSl0aHJvdyBUeXBlRXJyb3IoZSsiIGlzIG5vdCBhIHN5bWJvbCEiKTtmb3IodmFyIHQgaW4gUilpZihSW3RdPT09ZSlyZXR1cm4gdH0sdXNlU2V0dGVyOmZ1bmN0aW9uKCl7ej0hMH0sdXNlU2ltcGxlOmZ1bmN0aW9uKCl7ej0hMX19KSxzKHMuUytzLkYqIVYsIk9iamVjdCIse2NyZWF0ZTpmdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10P3coZSk6WSh3KGUpLHQpfSxkZWZpbmVQcm9wZXJ0eTpLLGRlZmluZVByb3BlcnRpZXM6WSxnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6SixnZXRPd25Qcm9wZXJ0eU5hbWVzOlgsZ2V0T3duUHJvcGVydHlTeW1ib2xzOlF9KSxUJiZzKHMuUytzLkYqKCFWfHx1KGZ1bmN0aW9uKCl7dmFyIGU9JCgpO3JldHVybiJbbnVsbF0iIT1QKFtlXSl8fCJ7fSIhPVAoe2E6ZX0pfHwie30iIT1QKE9iamVjdChlKSl9KSksIkpTT04iLHtzdHJpbmdpZnk6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG4scj1bZV0saT0xO2FyZ3VtZW50cy5sZW5ndGg+aTspci5wdXNoKGFyZ3VtZW50c1tpKytdKTtpZihuPXQ9clsxXSwoXyh0KXx8dm9pZCAwIT09ZSkmJiFVKGUpKXJldHVybiBnKHQpfHwodD1mdW5jdGlvbihlLHQpe2lmKCJmdW5jdGlvbiI9PXR5cGVvZiBuJiYodD1uLmNhbGwodGhpcyxlLHQpKSwhVSh0KSlyZXR1cm4gdH0pLHJbMV09dCxQLmFwcGx5KFQscil9fSksJC5wcm90b3R5cGVbRl18fG4oImhKeDgiKSgkLnByb3RvdHlwZSxGLCQucHJvdG90eXBlLnZhbHVlT2YpLGQoJCwiU3ltYm9sIiksZChNYXRoLCJNYXRoIiwhMCksZChyLkpTT04sIkpTT04iLCEwKX0sZlpqTDpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPXtkZWZhdWx0Om4oImpGYkMiKSxfX2VzTW9kdWxlOiEwfX0sZmtCMjpmdW5jdGlvbihlLHQsbil7dmFyIHI9bigiVXVHRiIpLGk9TWF0aC5tYXgsbz1NYXRoLm1pbjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4oZT1yKGUpKTwwP2koZSt0LDApOm8oZSx0KX19LGZ1R2s6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCJjR0cyIik7ZnVuY3Rpb24gaSgpe3RoaXMuaGFuZGxlcnM9W119aS5wcm90b3R5cGUudXNlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuaGFuZGxlcnMucHVzaCh7ZnVsZmlsbGVkOmUscmVqZWN0ZWQ6dH0pLHRoaXMuaGFuZGxlcnMubGVuZ3RoLTF9LGkucHJvdG90eXBlLmVqZWN0PWZ1bmN0aW9uKGUpe3RoaXMuaGFuZGxlcnNbZV0mJih0aGlzLmhhbmRsZXJzW2VdPW51bGwpfSxpLnByb3RvdHlwZS5mb3JFYWNoPWZ1bmN0aW9uKGUpe3IuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLGZ1bmN0aW9uKHQpe251bGwhPT10JiZlKHQpfSl9LGUuZXhwb3J0cz1pfSxoNjV0OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCJVdUdGIiksaT1uKCI1MmdDIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LG4pe3ZhciBvLHMsYT1TdHJpbmcoaSh0KSksbD1yKG4pLHU9YS5sZW5ndGg7cmV0dXJuIGw8MHx8bD49dT9lPyIiOnZvaWQgMDoobz1hLmNoYXJDb2RlQXQobCkpPDU1Mjk2fHxvPjU2MzE5fHxsKzE9PT11fHwocz1hLmNoYXJDb2RlQXQobCsxKSk8NTYzMjB8fHM+NTczNDM/ZT9hLmNoYXJBdChsKTpvOmU/YS5zbGljZShsLGwrMik6cy01NjMyMCsoby01NTI5Njw8MTApKzY1NTM2fX19LGhKeDg6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oImV2RDUiKSxpPW4oIlg4RE8iKTtlLmV4cG9ydHM9bigiK0UzOSIpP2Z1bmN0aW9uKGUsdCxuKXtyZXR1cm4gci5mKGUsdCxpKDEsbikpfTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIGVbdF09bixlfX0saHlFQjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj1yfHx7fTtyLlV0aWxzPXIuVXRpbHN8fHt9LHIuVXRpbHMuZm9jdXNGaXJzdERlc2NlbmRhbnQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTA7dDxlLmNoaWxkTm9kZXMubGVuZ3RoO3QrKyl7dmFyIG49ZS5jaGlsZE5vZGVzW3RdO2lmKHIuVXRpbHMuYXR0ZW1wdEZvY3VzKG4pfHxyLlV0aWxzLmZvY3VzRmlyc3REZXNjZW5kYW50KG4pKXJldHVybiEwfXJldHVybiExfSxyLlV0aWxzLmZvY3VzTGFzdERlc2NlbmRhbnQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuY2hpbGROb2Rlcy5sZW5ndGgtMTt0Pj0wO3QtLSl7dmFyIG49ZS5jaGlsZE5vZGVzW3RdO2lmKHIuVXRpbHMuYXR0ZW1wdEZvY3VzKG4pfHxyLlV0aWxzLmZvY3VzTGFzdERlc2NlbmRhbnQobikpcmV0dXJuITB9cmV0dXJuITF9LHIuVXRpbHMuYXR0ZW1wdEZvY3VzPWZ1bmN0aW9uKGUpe2lmKCFyLlV0aWxzLmlzRm9jdXNhYmxlKGUpKXJldHVybiExO3IuVXRpbHMuSWdub3JlVXRpbEZvY3VzQ2hhbmdlcz0hMDt0cnl7ZS5mb2N1cygpfWNhdGNoKGUpe31yZXR1cm4gci5VdGlscy5JZ25vcmVVdGlsRm9jdXNDaGFuZ2VzPSExLGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ9PT1lfSxyLlV0aWxzLmlzRm9jdXNhYmxlPWZ1bmN0aW9uKGUpe2lmKGUudGFiSW5kZXg+MHx8MD09PWUudGFiSW5kZXgmJm51bGwhPT1lLmdldEF0dHJpYnV0ZSgidGFiSW5kZXgiKSlyZXR1cm4hMDtpZihlLmRpc2FibGVkKXJldHVybiExO3N3aXRjaChlLm5vZGVOYW1lKXtjYXNlIkEiOnJldHVybiEhZS5ocmVmJiYiaWdub3JlIiE9PWUucmVsO2Nhc2UiSU5QVVQiOnJldHVybiJoaWRkZW4iIT09ZS50eXBlJiYiZmlsZSIhPT1lLnR5cGU7Y2FzZSJCVVRUT04iOmNhc2UiU0VMRUNUIjpjYXNlIlRFWFRBUkVBIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX0sci5VdGlscy50cmlnZ2VyRXZlbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj12b2lkIDA7bj0vXm1vdXNlfGNsaWNrLy50ZXN0KHQpPyJNb3VzZUV2ZW50cyI6L15rZXkvLnRlc3QodCk/IktleWJvYXJkRXZlbnQiOiJIVE1MRXZlbnRzIjtmb3IodmFyIHI9ZG9jdW1lbnQuY3JlYXRlRXZlbnQobiksaT1hcmd1bWVudHMubGVuZ3RoLG89QXJyYXkoaT4yP2ktMjowKSxzPTI7czxpO3MrKylvW3MtMl09YXJndW1lbnRzW3NdO3JldHVybiByLmluaXRFdmVudC5hcHBseShyLFt0XS5jb25jYXQobykpLGUuZGlzcGF0Y2hFdmVudD9lLmRpc3BhdGNoRXZlbnQocik6ZS5maXJlRXZlbnQoIm9uIit0LHIpLGV9LHIuVXRpbHMua2V5cz17dGFiOjksZW50ZXI6MTMsc3BhY2U6MzIsbGVmdDozNyx1cDozOCxyaWdodDozOSxkb3duOjQwfSx0LmRlZmF1bHQ9ci5VdGlsc30saTNyWDpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4hIWUmJiJvYmplY3QiPT10eXBlb2YgZX0oZSkmJiFmdW5jdGlvbihlKXt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSk7cmV0dXJuIltvYmplY3QgUmVnRXhwXSI9PT10fHwiW29iamVjdCBEYXRlXSI9PT10fHxmdW5jdGlvbihlKXtyZXR1cm4gZS4kJHR5cGVvZj09PWl9KGUpfShlKX07dmFyIGk9ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcj9TeW1ib2wuZm9yKCJyZWFjdC5lbGVtZW50Iik6NjAxMDM7ZnVuY3Rpb24gbyhlLHQpe3ZhciBuO3JldHVybiB0JiYhMD09PXQuY2xvbmUmJnIoZSk/YSgobj1lLEFycmF5LmlzQXJyYXkobik/W106e30pLGUsdCk6ZX1mdW5jdGlvbiBzKGUsdCxuKXt2YXIgaT1lLnNsaWNlKCk7cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbih0LHMpe3ZvaWQgMD09PWlbc10/aVtzXT1vKHQsbik6cih0KT9pW3NdPWEoZVtzXSx0LG4pOi0xPT09ZS5pbmRleE9mKHQpJiZpLnB1c2gobyh0LG4pKX0pLGl9ZnVuY3Rpb24gYShlLHQsbil7dmFyIGk9QXJyYXkuaXNBcnJheSh0KTtyZXR1cm4gaT09PUFycmF5LmlzQXJyYXkoZSk/aT8oKG58fHthcnJheU1lcmdlOnN9KS5hcnJheU1lcmdlfHxzKShlLHQsbik6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPXt9O3JldHVybiByKGUpJiZPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2lbdF09byhlW3RdLG4pfSksT2JqZWN0LmtleXModCkuZm9yRWFjaChmdW5jdGlvbihzKXtyKHRbc10pJiZlW3NdP2lbc109YShlW3NdLHRbc10sbik6aVtzXT1vKHRbc10sbil9KSxpfShlLHQsbik6byh0LG4pfWEuYWxsPWZ1bmN0aW9uKGUsdCl7aWYoIUFycmF5LmlzQXJyYXkoZSl8fGUubGVuZ3RoPDIpdGhyb3cgbmV3IEVycm9yKCJmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXkgd2l0aCBhdCBsZWFzdCB0d28gZWxlbWVudHMiKTtyZXR1cm4gZS5yZWR1Y2UoZnVuY3Rpb24oZSxuKXtyZXR1cm4gYShlLG4sdCl9KX07dmFyIGw9YTtlLmV4cG9ydHM9bH0saVViSzpmdW5jdGlvbihlLHQsbil7dmFyIHI9bigiN0t2RCIpLm5hdmlnYXRvcjtlLmV4cG9ydHM9ciYmci51c2VyQWdlbnR8fCIifSxpdWI1OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcjsidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHIpe2lmKG5bcl0pcmV0dXJuIG5bcl0uZXhwb3J0czt2YXIgaT1uW3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtyXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyx0KSxpLmw9ITAsaS5leHBvcnRzfXZhciBuPXt9O3JldHVybiB0Lm09ZSx0LmM9bix0LmQ9ZnVuY3Rpb24oZSxuLHIpe3QubyhlLG4pfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6cn0pfSx0Lm49ZnVuY3Rpb24oZSl7dmFyIG49ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIHQuZChuLCJhIixuKSxufSx0Lm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LHQucD0iL2Rpc3QvIix0KHQucz0yKX0oW2Z1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcihlKXtpZihBcnJheS5pc0FycmF5KGUpKXtmb3IodmFyIHQ9MCxuPUFycmF5KGUubGVuZ3RoKTt0PGUubGVuZ3RoO3QrKyluW3RdPWVbdF07cmV0dXJuIG59cmV0dXJuIEFycmF5LmZyb20oZSl9dmFyIGk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlO2lmKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoZSkpcmV0dXJuIGZ1bmN0aW9uKGUsdCl7dmFyIG49W10scj0hMCxpPSExLG89dm9pZCAwO3RyeXtmb3IodmFyIHMsYT1lW1N5bWJvbC5pdGVyYXRvcl0oKTshKHI9KHM9YS5uZXh0KCkpLmRvbmUpJiYobi5wdXNoKHMudmFsdWUpLCF0fHxuLmxlbmd0aCE9PXQpO3I9ITApO31jYXRjaChlKXtpPSEwLG89ZX1maW5hbGx5e3RyeXshciYmYS5yZXR1cm4mJmEucmV0dXJuKCl9ZmluYWxseXtpZihpKXRocm93IG99fXJldHVybiBufShlLHQpO3Rocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKX19KCk7dC5hPXtkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2Zyb21faXNfaW5kZXRlcm1pbmF0ZTohMSxmcm9tX2NoZWNrX2FsbDohMSx0b19pc19pbmRldGVybWluYXRlOiExLHRvX2NoZWNrX2FsbDohMSxmcm9tX2V4cGFuZGVkX2tleXM6W10sdG9fZXhwYW5kZWRfa2V5czpbXSxzZWxmX2Zyb206W10sc2VsZl90bzpbXSxmcm9tX2Rpc2FibGVkOiEwLHRvX2Rpc2FibGVkOiEwLGZyb21fY2hlY2tfa2V5czpbXSx0b19jaGVja19rZXlzOltdLGZpbHRlckZyb206IiIsZmlsdGVyVG86IiIsZmlsdGVyTGlzdEZpcnN0OiIiLGZpbHRlckxpc3RTZWNvbmQ6IiIsZmlsdGVyTGlzdFRoaXJkOiIiLGFyY2hpdmVGaXJzdDpbXSxhcmNoaXZlU2Vjb25kOltdLGFyY2hpdmVUaGlyZDpbXSxhZGRyZXNzZWU6W10sQ2M6W10sc2VjcmV0X3JlY2VpdmVyOltdLG1vdmVfdXA6ITF9fSxwcm9wczp7d2lkdGg6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6IjEwMCUifSxoZWlnaHQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6IjMyMHB4In0sdGl0bGU6e3R5cGU6QXJyYXksZGVmYXVsdDpmdW5jdGlvbigpe3JldHVyblsi5rqQ5YiX6KGoIiwi55uu5qCH5YiX6KGoIl19fSxidXR0b25fdGV4dDpBcnJheSxmcm9tX2RhdGE6e3R5cGU6QXJyYXksZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybltdfX0sdG9fZGF0YTp7dHlwZTpBcnJheSxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuW119fSxkZWZhdWx0UHJvcHM6e3R5cGU6T2JqZWN0LGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm57bGFiZWw6ImxhYmVsIixjaGlsZHJlbjoiY2hpbGRyZW4ifX19LG5vZGVfa2V5Ont0eXBlOlN0cmluZyxkZWZhdWx0OiJpZCJ9LHBpZDp7dHlwZTpTdHJpbmcsZGVmYXVsdDoicGlkIn0sbGVhZk9ubHk6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxmaWx0ZXI6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxvcGVuQWxsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0scmVuZGVyQ29udGVudDpGdW5jdGlvbixtb2RlOnt0eXBlOlN0cmluZyxkZWZhdWx0OiJ0cmFuc2ZlciJ9LHRyYW5zZmVyT3Blbk5vZGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxkZWZhdWx0Q2hlY2tlZEtleXM6e3R5cGU6QXJyYXksZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybltdfX0scGxhY2Vob2xkZXI6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6Iui+k+WFpeWFs+mUruWtl+i/m+ihjOi/h+a7pCJ9LGRlZmF1bHRUcmFuc2Zlcjp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9fSxjcmVhdGVkOmZ1bmN0aW9uKCl7dGhpcy5mcm9tX2NoZWNrX2tleXM9dGhpcy5kZWZhdWx0Q2hlY2tlZEtleXN9LG1ldGhvZHM6e2FkZFRvQWltczpmdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmQsbj0ibnVtYmVyIj09dHlwZW9mIGVbY10/JyInK2MrJyI6JytlW2NdKyIsIjonIicrYysnIjoiJytlW2NdKyciJztyZXR1cm4gUmVnRXhwKG4pLnRlc3QodCl9dmFyIHQ9dGhpcyxuPXRoaXMuJHJlZnNbImZyb20tdHJlZSJdLmdldENoZWNrZWRLZXlzKHRoaXMubGVhZk9ubHkpLHI9dGhpcy4kcmVmc1siZnJvbS10cmVlIl0uZ2V0SGFsZkNoZWNrZWRLZXlzKCksaT10aGlzLiRyZWZzWyJmcm9tLXRyZWUiXS5nZXRDaGVja2VkTm9kZXModGhpcy5sZWFmT25seSksbz1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGkpKSxzPXRoaXMuJHJlZnNbImZyb20tdHJlZSJdLmdldEhhbGZDaGVja2VkTm9kZXMoKSxhPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocykpLGw9dGhpcy5kZWZhdWx0UHJvcHMuY2hpbGRyZW58fCJjaGlsZHJlbiIsdT10aGlzLnBpZHx8InBpZCIsYz10aGlzLm5vZGVfa2V5fHwiaWQiLGQ9SlNPTi5zdHJpbmdpZnkodGhpcy5zZWxmX3RvX2RhdGEpLGY9W107SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzKSkuZm9yRWFjaChmdW5jdGlvbih0KXtlKHQpfHxmLnB1c2godCl9KSxmLmZvckVhY2goZnVuY3Rpb24oZSl7ZVtsXT1bXSwwPT1lW3VdP3QuJHJlZnNbInRvLXRyZWUiXS5hcHBlbmQoZSk6dC4kcmVmc1sidG8tdHJlZSJdLmFwcGVuZChlLGVbdV0pfSk7dmFyIGg9W107by5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UodCl8fGgucHVzaCh0KX0pLGguZm9yRWFjaChmdW5jdGlvbihlKXtlW2xdJiZlW2xdLmxlbmd0aD4wJiYoZVtsXT1bXSx0LiRyZWZzWyJ0by10cmVlIl0uYXBwZW5kKGUsZVt1XSkpfSksaS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIWVbbF18fDA9PWVbbF0ubGVuZ3RofSkuZm9yRWFjaChmdW5jdGlvbihuKXtlKG4pfHx0LiRyZWZzWyJ0by10cmVlIl0uYXBwZW5kKG4sblt1XSl9KSxpLmZvckVhY2goZnVuY3Rpb24oZSl7dC4kcmVmc1siZnJvbS10cmVlIl0ucmVtb3ZlKGUpfSksdGhpcy5mcm9tX2NoZWNrX2tleXM9W10sdGhpcy50cmFuc2Zlck9wZW5Ob2RlJiYodGhpcy50b19leHBhbmRlZF9rZXlzPW4pLHRoaXMuJGVtaXQoImFkZEJ0biIsdGhpcy5zZWxmX2Zyb21fZGF0YSx0aGlzLnNlbGZfdG9fZGF0YSx7a2V5czpuLG5vZGVzOm8saGFyZktleXM6cixoYWxmTm9kZXM6YX0pfSxyZW1vdmVUb1NvdXJjZTpmdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmQsbj0ibnVtYmVyIj09dHlwZW9mIGVbY10/JyInK2MrJyI6JytlW2NdKyIsIjonIicrYysnIjoiJytlW2NdKyciJztyZXR1cm4gUmVnRXhwKG4pLnRlc3QodCl9dmFyIHQ9dGhpcyxuPXRoaXMuJHJlZnNbInRvLXRyZWUiXS5nZXRDaGVja2VkS2V5cyh0aGlzLmxlYWZPbmx5KSxyPXRoaXMuJHJlZnNbInRvLXRyZWUiXS5nZXRIYWxmQ2hlY2tlZEtleXMoKSxpPXRoaXMuJHJlZnNbInRvLXRyZWUiXS5nZXRDaGVja2VkTm9kZXModGhpcy5sZWFmT25seSksbz1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGkpKSxzPXRoaXMuJHJlZnNbInRvLXRyZWUiXS5nZXRIYWxmQ2hlY2tlZE5vZGVzKCksYT1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHMpKSxsPXRoaXMuZGVmYXVsdFByb3BzLmNoaWxkcmVufHwiY2hpbGRyZW4iLHU9dGhpcy5waWR8fCJwaWQiLGM9dGhpcy5ub2RlX2tleXx8ImlkIixkPUpTT04uc3RyaW5naWZ5KHRoaXMuc2VsZl9mcm9tX2RhdGEpLGY9W107SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzKSkuZm9yRWFjaChmdW5jdGlvbih0KXtlKHQpfHxmLnB1c2godCl9KSxmLmZvckVhY2goZnVuY3Rpb24oZSl7ZVtsXT1bXSwwPT1lW3VdP3QuJHJlZnNbImZyb20tdHJlZSJdLmFwcGVuZChlKTp0LiRyZWZzWyJmcm9tLXRyZWUiXS5hcHBlbmQoZSxlW3VdKX0pO3ZhciBoPVtdO28uZm9yRWFjaChmdW5jdGlvbih0KXtlKHQpfHxoLnB1c2godCl9KSxoLmZvckVhY2goZnVuY3Rpb24oZSl7ZVtsXSYmZVtsXS5sZW5ndGg+MCYmKGVbbF09W10sdC4kcmVmc1siZnJvbS10cmVlIl0uYXBwZW5kKGUsZVt1XSkpfSksaS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIWVbbF18fDA9PWVbbF0ubGVuZ3RofSkuZm9yRWFjaChmdW5jdGlvbihuKXtlKG4pfHx0LiRyZWZzWyJmcm9tLXRyZWUiXS5hcHBlbmQobixuW3VdKX0pLGkuZm9yRWFjaChmdW5jdGlvbihlKXt0LiRyZWZzWyJ0by10cmVlIl0ucmVtb3ZlKGUpfSksdGhpcy50b19jaGVja19rZXlzPVtdLHRoaXMudHJhbnNmZXJPcGVuTm9kZSYmKHRoaXMuZnJvbV9leHBhbmRlZF9rZXlzPW4pLHRoaXMuJGVtaXQoInJlbW92ZUJ0biIsdGhpcy5zZWxmX2Zyb21fZGF0YSx0aGlzLnNlbGZfdG9fZGF0YSx7a2V5czpuLG5vZGVzOm8saGFyZktleXM6cixoYWxmTm9kZXM6YX0pfSxmcm9tVHJlZUNoZWNrZWQ6ZnVuY3Rpb24oZSx0KXt0aGlzLmZyb21fY2hlY2tfa2V5cz10LmNoZWNrZWROb2Rlc30sdG9UcmVlQ2hlY2tlZDpmdW5jdGlvbihlLHQpe3RoaXMudG9fY2hlY2tfa2V5cz10LmNoZWNrZWROb2Rlc30sZnJvbUFsbEJveENoYW5nZTpmdW5jdGlvbihlKXswIT10aGlzLnNlbGZfZnJvbV9kYXRhLmxlbmd0aCYmKGU/KHRoaXMuZnJvbV9jaGVja19rZXlzPXRoaXMuc2VsZl9mcm9tX2RhdGEsdGhpcy4kcmVmc1siZnJvbS10cmVlIl0uc2V0Q2hlY2tlZE5vZGVzKHRoaXMuc2VsZl9mcm9tX2RhdGEpKToodGhpcy4kcmVmc1siZnJvbS10cmVlIl0uc2V0Q2hlY2tlZE5vZGVzKFtdKSx0aGlzLmZyb21fY2hlY2tfa2V5cz1bXSkpfSx0b0FsbEJveENoYW5nZTpmdW5jdGlvbihlKXswIT10aGlzLnNlbGZfdG9fZGF0YS5sZW5ndGgmJihlPyh0aGlzLnRvX2NoZWNrX2tleXM9dGhpcy5zZWxmX3RvX2RhdGEsdGhpcy4kcmVmc1sidG8tdHJlZSJdLnNldENoZWNrZWROb2Rlcyh0aGlzLnNlbGZfdG9fZGF0YSkpOih0aGlzLiRyZWZzWyJ0by10cmVlIl0uc2V0Q2hlY2tlZE5vZGVzKFtdKSx0aGlzLnRvX2NoZWNrX2tleXM9W10pKX0sZmlsdGVyTm9kZUZyb206ZnVuY3Rpb24oZSx0KXtyZXR1cm4hZXx8LTEhPT10W3RoaXMuZGVmYXVsdFByb3BzLmxhYmVsXS5pbmRleE9mKGUpfSxmaWx0ZXJOb2RlVG86ZnVuY3Rpb24oZSx0KXtyZXR1cm4hZXx8LTEhPT10W3RoaXMuZGVmYXVsdFByb3BzLmxhYmVsXS5pbmRleE9mKGUpfSxhZGRyZXNzTGlzdFRyYW5zZmVyOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj0odGhpcy4kcmVmc1siZnJvbS10cmVlIl0uZ2V0Q2hlY2tlZEtleXMoITApLHRoaXMuJHJlZnNbImZyb20tdHJlZSJdLmdldENoZWNrZWROb2RlcyghMCkpLGk9W107c3dpdGNoKGUpe2Nhc2UgMDppPW4uZmlsdGVyKGZ1bmN0aW9uKGUpe2lmKCF0LmFkZHJlc3NlZS5zb21lKGZ1bmN0aW9uKG4pe3JldHVybiBuW3Qubm9kZV9rZXldPT1lW3Qubm9kZV9rZXldfSkpcmV0dXJuIGV9KSx0aGlzLmFkZHJlc3NlZT1bXS5jb25jYXQocih0aGlzLmFkZHJlc3NlZSkscihpKSk7YnJlYWs7Y2FzZSAxOmk9bi5maWx0ZXIoZnVuY3Rpb24oZSl7aWYoIXQuQ2Muc29tZShmdW5jdGlvbihuKXtyZXR1cm4gblt0Lm5vZGVfa2V5XT09ZVt0Lm5vZGVfa2V5XX0pKXJldHVybiBlfSksdGhpcy5DYz1bXS5jb25jYXQocih0aGlzLkNjKSxyKGkpKTticmVhaztjYXNlIDI6aT1uLmZpbHRlcihmdW5jdGlvbihlKXtpZighdC5zZWNyZXRfcmVjZWl2ZXIuc29tZShmdW5jdGlvbihuKXtyZXR1cm4gblt0Lm5vZGVfa2V5XT09ZVt0Lm5vZGVfa2V5XX0pKXJldHVybiBlfSksdGhpcy5zZWNyZXRfcmVjZWl2ZXI9W10uY29uY2F0KHIodGhpcy5zZWNyZXRfcmVjZWl2ZXIpLHIoaSkpfXRoaXMuJHJlZnNbImZyb20tdHJlZSJdLnNldENoZWNrZWRLZXlzKFtdKSx0aGlzLmZyb21fY2hlY2tfa2V5cz1bXSx0aGlzLiRlbWl0KCJhZGRCdG4iLHRoaXMuYWRkcmVzc2VlLHRoaXMuQ2MsdGhpcy5zZWNyZXRfcmVjZWl2ZXIpfSxjbGVhckxpc3Q6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO3N3aXRjaChlKXtjYXNlIDA6dGhpcy5hZGRyZXNzZWU9ImFsbCI9PXQ/W106dGhpcy5hZGRyZXNzZWUuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlW24ubm9kZV9rZXldIT10fSk7YnJlYWs7Y2FzZSAxOnRoaXMuQ2M9ImFsbCI9PXQ/W106dGhpcy5DYy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGVbbi5ub2RlX2tleV0hPXR9KTticmVhaztjYXNlIDI6dGhpcy5zZWNyZXRfcmVjZWl2ZXI9ImFsbCI9PXQ/W106dGhpcy5zZWNyZXRfcmVjZWl2ZXIuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlW24ubm9kZV9rZXldIT10fSl9dGhpcy4kZW1pdCgicmVtb3ZlQnRuIix0aGlzLmFkZHJlc3NlZSx0aGlzLkNjLHRoaXMuc2VjcmV0X3JlY2VpdmVyKX0sbW92ZVVwOmZ1bmN0aW9uKGUpe3RoaXMubW92ZV91cD0idXAiPT1lfX0sY29tcHV0ZWQ6e3NlbGZfZnJvbV9kYXRhOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PVtdLmNvbmNhdChyKHRoaXMuZnJvbV9kYXRhKSxyKHRoaXMuc2VsZl9mcm9tKSk7cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbih0KXt0W2UucGlkXT0wfSksdH0sc2VsZl90b19kYXRhOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PVtdLmNvbmNhdChyKHRoaXMudG9fZGF0YSkscih0aGlzLnNlbGZfdG8pKTtyZXR1cm4gdC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3RbZS5waWRdPTB9KSx0fSxmcm9tVGl0bGU6ZnVuY3Rpb24oKXtyZXR1cm4gaSh0aGlzLnRpdGxlLDEpWzBdfSx0b1RpdGxlOmZ1bmN0aW9uKCl7cmV0dXJuIGkodGhpcy50aXRsZSwyKVsxXX0sdG9UaXRsZVNlY29uZDpmdW5jdGlvbigpe3JldHVybiBpKHRoaXMudGl0bGUsMylbMl19LHRvVGl0bGVUaGlyZDpmdW5jdGlvbigpe3JldHVybiBpKHRoaXMudGl0bGUsNClbM119LGZyb21CdXR0b246ZnVuY3Rpb24oKXtpZih2b2lkIDAhPXRoaXMuYnV0dG9uX3RleHQpcmV0dXJuIGkodGhpcy5idXR0b25fdGV4dCwxKVswXX0sdG9CdXR0b246ZnVuY3Rpb24oKXtpZih2b2lkIDAhPXRoaXMuYnV0dG9uX3RleHQpcmV0dXJuIGkodGhpcy5idXR0b25fdGV4dCwyKVsxXX19LHdhdGNoOntmcm9tX2NoZWNrX2tleXM6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztlLmxlbmd0aD4wPyh0aGlzLmZyb21fZGlzYWJsZWQ9ITEsdGhpcy5mcm9tX2lzX2luZGV0ZXJtaW5hdGU9ITAsZS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIDA9PWVbdC5waWRdfSkubGVuZ3RoPT10aGlzLnNlbGZfZnJvbV9kYXRhLmxlbmd0aD8odGhpcy5mcm9tX2lzX2luZGV0ZXJtaW5hdGU9ITEsdGhpcy5mcm9tX2NoZWNrX2FsbD0hMCk6KHRoaXMuZnJvbV9pc19pbmRldGVybWluYXRlPSEwLHRoaXMuZnJvbV9jaGVja19hbGw9ITEpKToodGhpcy5mcm9tX2Rpc2FibGVkPSEwLHRoaXMuZnJvbV9pc19pbmRldGVybWluYXRlPSExLHRoaXMuZnJvbV9jaGVja19hbGw9ITEpfSx0b19jaGVja19rZXlzOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7ZS5sZW5ndGg+MD8odGhpcy50b19kaXNhYmxlZD0hMSx0aGlzLnRvX2lzX2luZGV0ZXJtaW5hdGU9ITAsZS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIDA9PWVbdC5waWRdfSkubGVuZ3RoPT10aGlzLnNlbGZfdG9fZGF0YS5sZW5ndGg/KHRoaXMudG9faXNfaW5kZXRlcm1pbmF0ZT0hMSx0aGlzLnRvX2NoZWNrX2FsbD0hMCk6KHRoaXMudG9faXNfaW5kZXRlcm1pbmF0ZT0hMCx0aGlzLnRvX2NoZWNrX2FsbD0hMSkpOih0aGlzLnRvX2Rpc2FibGVkPSEwLHRoaXMudG9faXNfaW5kZXRlcm1pbmF0ZT0hMSx0aGlzLnRvX2NoZWNrX2FsbD0hMSl9LGZpbHRlckZyb206ZnVuY3Rpb24oZSl7dGhpcy4kcmVmc1siZnJvbS10cmVlIl0uZmlsdGVyKGUpfSxmaWx0ZXJUbzpmdW5jdGlvbihlKXt0aGlzLiRyZWZzWyJ0by10cmVlIl0uZmlsdGVyKGUpfSxmaWx0ZXJMaXN0Rmlyc3Q6ZnVuY3Rpb24oZSx0KXsiIj09dCYmKHRoaXMuYXJjaGl2ZUZpcnN0PXRoaXMuYWRkcmVzc2VlKSwiIj09ZSYmKHRoaXMuYWRkcmVzc2VlPXRoaXMuYXJjaGl2ZUZpcnN0KTt2YXIgbj1SZWdFeHAoZSk7dGhpcy5hZGRyZXNzZWU9dGhpcy5hZGRyZXNzZWUuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBuLnRlc3QoZS5sYWJlbCl9KX0sZmlsdGVyTGlzdFNlY29uZDpmdW5jdGlvbihlLHQpeyIiPT10JiYodGhpcy5hcmNoaXZlU2Vjb25kPXRoaXMuQ2MpLCIiPT1lJiYodGhpcy5DYz10aGlzLmFyY2hpdmVTZWNvbmQpO3ZhciBuPVJlZ0V4cChlKTt0aGlzLkNjPXRoaXMuQ2MuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBuLnRlc3QoZS5sYWJlbCl9KX0sZmlsdGVyTGlzdFRoaXJkOmZ1bmN0aW9uKGUsdCl7IiI9PXQmJih0aGlzLmFyY2hpdmVUaGlyZD10aGlzLnNlY3JldF9yZWNlaXZlciksIiI9PWUmJih0aGlzLnNlY3JldF9yZWNlaXZlcj10aGlzLmFyY2hpdmVUaGlyZCk7dmFyIG49UmVnRXhwKGUpO3RoaXMuc2VjcmV0X3JlY2VpdmVyPXRoaXMuc2VjcmV0X3JlY2VpdmVyLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gbi50ZXN0KGUubGFiZWwpfSl9LGRlZmF1bHRDaGVja2VkS2V5czpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2UmJnRoaXMuZGVmYXVsdFRyYW5zZmVyJiZ0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3QuYWRkVG9BaW1zKCl9KX19fX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ImRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBTXdBQUFESUNBWUFBQUNrc3c3a0FBQVFwMGxFUVZSNG5PM2RlYlJrVlhVRzhBSWFRcUlNc2tTZ0lTb0NpZ3dOTHFhR3RFSWpFUWpTUzhJZ2hqQjBKeVF5QkZTR2FCRDZCbmp2bnUvN2JsVTFEMXA4ekpINXJTaFRSeU5EbzRJMkFtcUNVUkJJU0VBR0U4TVFpQUt0dWZuajNYYTEwTU1icXU3ZVZXLy8xdHIvc0ZpTGUvWTU1MUYxYTU5OUdvMFFRZ2doaEJCQ0NDR0VFRUlJSVlRUVFnZ2hoQkJDQ0NHRUVFSUlJWVFRUWdnaGhCQkNDQ0dFRUVJSUlZUVFRZ2doaEJCQ0NDR0VFRHFBNU03V3p4QkNUeUI1SHNtUzVIbld6eEtDVzNtZXY0MmtxczJ5TEpUbitkdXNueTBFVjFxdDF1YVNGcjVoczVRa1Mwa0xXNjNXNXRiUEdJSUxKTGNCY05XS05zdHljU1hKYmF5Zk5RUlR6V1p6SjVJanE5a3N5MktrMld6dVpQM01JWmlRdENlQVJXUGNMQ1hKRXNBaVNYdGFQM3NJdFpLMEg4bkY0OWtzeThYaVpyUDVZZXN4aEZBTEFITkkzamZCemJJczdnTXd4M29zSVhTVnBDTkpQalRKemJJc0hrb3BIV2s5cGhDNmd1UThBUC9hb2MyeUxCNG5PYzk2YkNGMGxLU1RTVDdiNGMyeTdIZWFad0NjYkQzR0VEcUM1SmtrWCtyR1psa3VYaUo1cHZWWVE1aXdMTXZXSWZtM0pKZDJlYk1zaTZVQXNpekwxckVlZXdqajBtNjNOK1NiNjhKcUNVbHN0OXNiV3VjZ2hERUJNSDFsZFdFMXhrVUFwbHZuSW9SVklya05SK3UrTERmTHNyaXkxV3B0YloyVEVGWW9wYlNUcEJzZGJKVGZCSUFiSmMyd3prMEl2MFhTbmlSdnM5NGdLNG5ibXMzbVRPc2NoZEJvTkJvTkFCL214T3ZDNm9xN0pPMXJuYXN3eFVrNm1KT3ZDNnNybHFTVURyYk9XWmlpU0g2Y25hc0xxeXYrbWVUSHJYTVhwaGlTOHpoYXgyVzlBY1lka2g0RE1OYzZoMkdLQUhDeXBHZXNGLzRrNDJtU0oxbm5NdlE1anRhRnZlaGd3WGNpWGdSd2huVk9ReC9Lc213ZEFCbUF1dXJDNm9yWEpjMGZIaDVlMnpySG9VKzAyKzBOSmRIQjR1NW1JS1cwZ1hXdVE0OERNSjNrUlE0V2RCMXhVYnZkM3N3NjU2Rkh0VnF0cmVtbkxxeVdBSEFGeWEyc2N4OTZqS1FaQUZ6VmhkVVlON1JhclIydDV5RDBpR2F6T1pOKzY4THFpbHNsN1dFOUY4RTVTZnVTdk12Qmd2VVFkK1o1SHZWblljV0tvdGlXWFdwVU1jNVlLcW5OK280MnJ5cWVMWXBpVyt1NUNjNmtsR1lCZU5sNmdRSjRPYy96ZlJxTlJpUFA4MzA4UEJQSkYxSktzNHluS0hnaGFTNTkxSVY5aitTaHl6OGJ5VU9yZjI2OWtSOGplWnpSRkFVdlNKNEV3THd1VE5JOUthVURWL1NNS2FVREpkMWovWXdrbnk2SzRzUzY1eWc0UVQ5MVlWOG51ZmRxbm5YdjZ0K3pmdFlYU0o1ZTF4d0ZCNGFIaDljR2tKRjgzY0VDdktrb2l0M0c4dHhGVWV4RzhpWUh6L3dhZ1BsWmxrM3I5bHdGWXltbERSelZoVjJiVXRwK25NKy9QY2xySFR4N1NSSkRRMFByZDJ1dWdqRm5kV0dYU3RweUl1T1F0Q1hKU3gyTW9RUndJY2xOT3oxWHdWaWU1MXRMdXNKNmdaRXNKVjB3TURDd3lXVEdNekF3c0lta0M2ekhVc1hsN1hiN1BaMmFxMkJNMGd5U056aFlXQ1hKSE1CNm5SZ1hnUFZJNWc3R1ZBSzRQcVVVOVdlOURzQk1TYmRhTHlpU3IwbzZlMlJrWksxT2ptOWtaR1F0U1dlVGZOWEJHRytKK3JNZTVxZ3U3SGtBcDNWenJBQk9JL204ZzdIZUFXQjJOOGNhdW9Ea1Iwa3VjYkNBZmtyeWhKckdmRUwxM3pNZHM2UnZTenFvampHSERwQjBCRWY3YjFsdmxrZUxvamkyenJFWFJYRXN5VWV0eHc3Z24wZ2VYdWZZd3dRQW1DdnBzYW04WUVnZVh2MzNwOXdmakRBT0pFL2lhTDh0NjRYeUhldVBKSklPSXZrZEI3bW83U05wR0FjQVozQzB6c2w2Z2R6cDVVc3ZnTmtrNzNTUWs2Ni85QWhqTkR3OHZMYWsrZlJSRitidVdLK2tQVWk2ZUsxTzhweE92MVlQNDVCUzJvQWtIQ3lHa280YlI3UmFyUjNwNUlkYkFLbFRQOXlHY1dpMzI1dEp1dEI2QVZTTHdIMXJJcEpiVmM5cG5pK1NRd3NXTEpoVWFWQVlCMmVUM3pQTjc5cnQ5bVowVW53SzRMSTh6NlArck5zOGZieVF4RjVycityc2VNTjFrbmF3emtuZmN2UUY5blVBV2E4MjhIWjJnTzVtQUx0YjU2VHZWSFZoSGw2UnZranlUT3Q4ZEFMOUhORytYZEkrMXZub0d4eXRDelAvRVU3U013Qk90czVISnptNkhPcGVrbjlrblkrZUora0lTUjdLUEI0bk9jODZIOTFBSjljUFN2cCtVUlNIV2Vlalo1RThydXFIWmIxWkhwSjBwSFUrdWtuU2tYUnd3UzJBbjVBOHhqb2ZQUWZBaWZSUkYzWWZnRG5XK2FnRGdEbjBjWVg2VXdBK2FaMlBua0h5ZFBxb0Mxc3NhVC9yZk5SSjBuNGtGenZJL1g5TCtveDFQbHpMc213YWdQa2tYN09lTUVtTFVrcDdXZWZFUWtwcEwwbUxyT2VBNUM4Qm5KMWwyWnJXT1hGbmFHaG9mZnFwQ3hzaHViTjFUaXlSM0xuS2cvVmNsQ1R6aFFzWHZ0VTZKMjZRM05STFhaaWtxNXJONW51dGMrSkJzOWw4cjZTcnJPZUVaQWxnMHEycCtnTEpyVWhlYmowaDFhUmNER0FMQnpuWmxLTXRZYzBiNUFIWUFzREYxbk5UeFlTYkgvYUZsTktPQUs1M01CRWx5YUxWYW0xa25aT2lLTFpkZHNSYTBtTWVMak5xdFZvYmtTd2N6RkhKQ2JUWDdRdFZYZGd0RGliZzE1TE96YkpzWFFjNU9ZVGtBOHMvbjZUN0pSMWkvV3habHEwcjZWeVN2M1l3WjJOdTRONFhBTXdHWUY0WEJ1QmxBSit6emtlajBXaVFQSWJrd3l0NTFvZnA1TWM4QUo5emNpdmFhcThJNlF1T21qUDhqT1NwMXZsb05CcU5vaWhPNU9yN2lUMEZ3TVZsUmlSUHJmSm5Pb2VTN2ltS1lvV1hVUFVGK21uLzgwUks2WGpyZkRRYWpRYUF2K2JZSzRiZFZFcW5sSTRuK1lTRHVYelROWWQ5Z2VSeGROQmdqdVNQQUJ4bG5ZOHN5MzZQNUhrYy8zZUNYNUU4cjlWcS9hNzFHQUFjUmZKSER1YjBFUUJIVytlalk2cTZNUE1XcGlRZjhQQUZlbUJnWUJPU0N5WXpGZ0J0U2Urd0hzdUtYbFFZeFpPUy90STZINVBHMGJvdzh5YlprcjZaVXRyZlFUNDYrYnZUcFI3T3hhZVU5cGYwVGVzNUp2bHprcCsyenNlRVpGazJqZVE1OUhFTnc5ZElmdEE2SnlSM0JuQmpoOGQyZzZRWkRzYjJ3U3JQMW5QOUM1S2ZMOHR5RGV1Y2pGbVdaZXRMU2c2U1YwcjZjcDdudTFqbnBDaUtXUUMrMm8weEFsaEU4ZytzeDVqbitTNlN2bXc5NTFWT0JpVzl4VG9ucThYUnNvNGg2NFJWY1RXQTkxdm5KS1YwSU1sdmRYbXMzL0R3a1JQQSswbGU3V0R1UzVJTFBIelBXNms4ejk4ajZUSUhpU3BKRGhkRjhTN3JuSkE4bk9RUGFocXppMWVzUlZHOGkrU3dnelZRQXJna3ovTjNXK2ZrVFNUdDRLVXVERUI3Y0hCd1krdWNrSnhYOTlVYjFSSGY0NnpIUGpnNHVER0F0dlZhcU9LYW9paTJzODdKYndEWW5UN3F3a3FTQXg0K3UwbzZCY0J6UmpsNFdwSjVkeHRKYnlFNTRHQk5sQ1MvQW1CWDY1dzBKTzFEOGc0SENmbUZwTE1hallicDI1RXN5OVlFY0JiSlY0eno4VDlPNnVUV2tIUVdSOTllbWE0UlNmOVlGTVdIekRLUlVqcEkwcmV0RTBFbjc5K3JVNk11cmdHdjR2OUlEbVJaWm41YWtlU25xM215enNtM1NCNWdsWVNWVmRmV0dVc0JtUGV5T3YvODh6ZW5rMGJmYnd4SkY5REhZYlREU0M2MXpnZkpaMDBTd1ByZS9xd3NYTlFRQVhpZmw2TzhLd3NBVjdSYXJhMGQ1T3Bva285WTU2UGRibTlZKytBdE53eUE3OVBCSzFRQXUzcjVzVzRNTVpMbitRZXNjMGJ5MEdyK1lzUFVGUGQ2T0FjaGFSOEF0enZZQ0dNT1NWK2xnektob2lnTzVHZy81ZGd3WFk3YjZlQ2tuYVNENmVNZzNMZ0RnSXVEVnlUM3J1WXpOa3lYNG1ZUFo3bEpmb0xrRDYwWC9pVGpCeW1sSTZ4eldSVEZiaVJ2amczVCtiak9RN2NRa245Qkh5Y05KeDFWRllMNWpRUXBwZTFKWGhjYnBrTUI0RElQL2Fna2ZZWStma3ZvWkc2ZmszU0tnOXh1Q2FDMk9zUiszakRtTis1bVdiYU9wUG4wY2JhbkcvRUtnTE9zejVBc1dMQmdFOVpVNmQ2WEcwYVMrWjN1VlJNN09WalVkVVNlWmRuNmx2a0dzRjRkWjZuNmJjTzhTdktja1pHUnRXb2YxSEtxTXZVdk9sakl0WVdrQ3dGTXQ4ejd5TWpJV3V6eWFkMSsyakRQa3p5OTlzRzhRZlZGOUJyckJXd1JBRncwWkdjWCswSDB4WWFSOUZNUHplb0F6S1NmNHdwVzhmZEZVWmdmN1Fad29xU09keHpxaHczektCMGNmSEowQTVlSGNOR09sVjNvYVdleVlTVGR3OUhmSkNZVmtoNUxLYzJxZlFCdkFHQlhrczg2V0tpZTRsa1BOd2lrbEdaVnZ4dE5lcjJSZk1KNlBEMVAwbjVPbW15WEpKZHc5QWF3SlE2ZXBRVHdzb2MvYU1HSnFqUG5VOVlMczRvckFieXZlaTVQeHdiK2plU2ZXODlWTUVieVRJNjlHWGkzWTZqZGJtKzIvUE1CbUE3QXhYV0dKUCtURGs2MkJnUExOUVAvbFlPRnVNcWp4QURXQXpEbzREbExqdlpPT0R2THNtbDF6MWt3SXVrZG5HUXo4QTdHaXlRL081Ym5KdmxaU1M4NWVPYVNKRXplTklWNmtkeXF6aUsvMWNTNEwwa2llVkkzZnBlWVlIekJ3eVc2b1V1YXplWk9YV2dHUHRINDhVVDdFWERWMS92VkdwSys1S0VkYitpd2xOSXNrdjlndmNDcVJYWWZnSTlOWmp6VnZTejNXNCtsaXE5NE9OZ1hPb1RrQWV4K00vQ3h4aDJTOXUzRXVLcXFoTHNjaktra2VRZUEyWjBZVnpCRThuQkpwaDFLdXZtWHVMcSt2Zllqdml1SkpRRG1kSEo4b1VhUzVnS290Um40S3VMdnVsVmlNamc0dUoya0x6a1lZMG55aDVMK3BCdmpERjBrNlJRNnFRdXI0NHdKZ0Mwa0xiUWVheFgvM2hmM1RVNEZaVm11NGFRWitMTE5NbGpYcWRHVTBnWmVibjRqK1hNQXA5VXg3akJCV1paNWFnWnUwajNmMGUwQkpZRFhKTTNQc215ZHV2TVFWZ1BBZERwcEJsNzlzSGlTY1Q3Y2ZDUWxXYlJhclkwczh4R1c0NnlxOTJHU3gxam5wTkZvTkFETWxmUVRCemtwU1g3Und4V0tVMTVSRkxzQThOSU0vSDVKaDFqblpIa2tENVgwb0lQY2xDU3Y4ZENNY2NxcWJqLzd1b09GVUpLOFU5SisxamxaRVpJZklYbTNneHlWSkcrUnRJZDFUcVlja2grbG4yYmdOd0hZM1RvbnF5SnBUNUszT3NoVlNmSXVyMzljK2hKSG00RS81R0RpZTZyNFVOSU9KSysxemxrVjM1MXNQVjBZQTBuSEEzakN3WVNYQUJiMldubTdzK2FFRTY3WURtTlFOUVAvTHdjVFhaTE1oNGFHVE51cVRsU3IxZHBJRWgza3NDVDVKTWtUckhQU1Y0YUhoOWRtbDF1SGpqV3F6akovWTkyNGU3S3lMSnNtNld3NnVBNmM1QXNBenJET1NWOXcxZ3o4YVpKL1paMlRUcEwwS1pJL2M1RGJwUURPemJKc1hldWM5S3lVMGp0Slh1eGdNa3VTanhSRmNheDFUcnBCMHArUmZOeEJqa3VTcmNIQndZMnRjOUp6bkRVRGZ3REFIMXZucEp0U1NrZlEvaHI1a21RcDZSSVBGMmoxREVsN1NQSnlLR294Z0QrMHpra2RVa29IMHNuSlZBRFh0MXF0SGExejRwNnpZN2MzVDdWZnBhc2V4b3NjNUw0a2VWdEthUy9ybkxnRjRHTWt2K3Rnb2txU1Z4ZEZzWjExVGl4SW1pSHBlZ2R6VUVxNm0rUkhySFBpRG9DalNmN1llb0txK0VLejJmeDk2NXhZcWk1cHZjVEJYSlFrSHl5S29xKy9RNDRMeVJNa1BlbGdZa3BKS2N1eTZPallhRFNLb25nN2dLYjFuRlR4Q0lDK2ZFczVMaHh0QnY2Q2d3bDVSZEpaV1phdGFaMFRUNGFHaG40SFFBYmdOUWR6OURTTkQrYVpvcC9qeEVzbC9hbDFQandEOEVtU1N4M01WUW5nVTliNU1HR2QrQ3I1TDVNOHdEb1h2UURBWVNSL2FUMW4xYnoxVk5GclI5RCtvOWlESkErMXprTXZJZmtKQU9aSEsvSThmN2QxTG1wbnZHSHVacnl1bkJDT0h0NjdOelpNelF3M3pDM05abk9tOWZoN1dWRVVIeUw1dGRnd05UTGFNTkdJb1VPYXplWUhTSTdFaHFsSjNSc0d3TVVwcFhkYWo3dWZ0RnF0clVsZUhodW1CalZ2bUxoaXJrc0dCZ1kyWWMxWElNYUc2ZDcvVmY2WDVPZEhSa2JXc2g1dlA2djdrdDNZTU4zWkxNK1JQTlY2bkZPSnBETklQaDhicGd1NnZHRWVsVFRYZW94VFVWVVY4Qit4WVRxc2l4dm1lMFZSSEdZOXZxa013RkVrL3lVMlRBZDFhY044STZXMHYvWFlRcU1CWUE3SkpiRmhPcVRURzBiU3JYRkN6eGNBczBuZUhodW1BenE4WWE2VnRJUDFtTUtiQWRpMTB6Y3NUTlVOYzJXSElzK3liSnIxZU1MS1pWbjJWa2tYZG1yT2k2SjR1L1dZUWdnaGhCQkNDQ0dFRUVJSUlZUVFRZ2doaEJCQ0NDR0VFRUlJSVlRUVFnZ2hoQkJDQ0NHRUVFSUlJWVFRUWdnaGhCQkNDQ0dFRUR6N2Y0cWhLUGpqWWw2TkFBQUFBRWxGVGtTdVFtQ0MifSxmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKDMpO3QuZGVmYXVsdD1yLmF9LGZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigwKSxpPW4oMTApLG89ITEscz1mdW5jdGlvbihlKXtvfHxuKDQpfSxhPW4oOSkoci5hLGkuYSwhMSxzLCJkYXRhLXYtMjBmMWUxNzIiLG51bGwpO2Eub3B0aW9ucy5fX2ZpbGU9ImxpYlxcdHJhbnNmZXItZXh0ZW5kLnZ1ZSIsdC5hPWEuZXhwb3J0c30sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oNSk7InN0cmluZyI9PXR5cGVvZiByJiYocj1bW2UuaSxyLCIiXV0pLHIubG9jYWxzJiYoZS5leHBvcnRzPXIubG9jYWxzKSxuKDcpKCJmZDBjMDkzYyIsciwhMSx7fSl9LGZ1bmN0aW9uKGUsdCxuKXsoZS5leHBvcnRzPW4oNikoITApKS5wdXNoKFtlLmksJ1xuYm9keVtkYXRhLXYtMjBmMWUxNzJdIHtcclxuICBsaW5lLWhlaWdodDogMS42NjY7XHJcbiAgY29sb3I6ICM2NjY7XHJcbiAgZm9udC1zaXplOiAxNHB4O1xufVxuYm9keVtkYXRhLXYtMjBmMWUxNzJdLCBpbnB1dFtkYXRhLXYtMjBmMWUxNzJdIHtcclxuICBmb250LWZhbWlseTogInZlcmRhbmEiO1xufVxuYm9keVtkYXRhLXYtMjBmMWUxNzJdLCBoMVtkYXRhLXYtMjBmMWUxNzJdLCBoMltkYXRhLXYtMjBmMWUxNzJdLCBoM1tkYXRhLXYtMjBmMWUxNzJdLCBoNFtkYXRhLXYtMjBmMWUxNzJdLCBoNVtkYXRhLXYtMjBmMWUxNzJdLCBoNltkYXRhLXYtMjBmMWUxNzJdLCB1bFtkYXRhLXYtMjBmMWUxNzJdLCBvbFtkYXRhLXYtMjBmMWUxNzJdLCBsaVtkYXRhLXYtMjBmMWUxNzJdLCBwW2RhdGEtdi0yMGYxZTE3Ml0sIGRsW2RhdGEtdi0yMGYxZTE3Ml0sIGR0W2RhdGEtdi0yMGYxZTE3Ml0sIGRkW2RhdGEtdi0yMGYxZTE3Ml0sIHRhYmxlW2RhdGEtdi0yMGYxZTE3Ml0sIHRoW2RhdGEtdi0yMGYxZTE3Ml0sIHRkW2RhdGEtdi0yMGYxZTE3Ml0ge1xyXG4gIG1hcmdpbjogMDtcclxuICBwYWRkaW5nOiAwO1xufVxudGFibGVbZGF0YS12LTIwZjFlMTcyXSwgdGhbZGF0YS12LTIwZjFlMTcyXSwgdGRbZGF0YS12LTIwZjFlMTcyXSwgaW1nW2RhdGEtdi0yMGYxZTE3Ml0ge1xyXG4gIGJvcmRlcjogMDtcbn1cbmVtW2RhdGEtdi0yMGYxZTE3Ml0sIGlbZGF0YS12LTIwZjFlMTcyXSwgdGhbZGF0YS12LTIwZjFlMTcyXSB7XHJcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cbmgxW2RhdGEtdi0yMGYxZTE3Ml0sIGgyW2RhdGEtdi0yMGYxZTE3Ml0sIGgzW2RhdGEtdi0yMGYxZTE3Ml0sIGg0W2RhdGEtdi0yMGYxZTE3Ml0sIGg1W2RhdGEtdi0yMGYxZTE3Ml0sIGg2W2RhdGEtdi0yMGYxZTE3Ml0sIHRoW2RhdGEtdi0yMGYxZTE3Ml0sIHN0cm9uZ1tkYXRhLXYtMjBmMWUxNzJdIHtcclxuICBmb250LXNpemU6IDEwMCU7XHJcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbn1cbmlucHV0W2RhdGEtdi0yMGYxZTE3Ml0sIHNlbGVjdFtkYXRhLXYtMjBmMWUxNzJdLCBidXR0b25bZGF0YS12LTIwZjFlMTcyXSwgdGV4dGFyZWFbZGF0YS12LTIwZjFlMTcyXSwgdGFibGVbZGF0YS12LTIwZjFlMTcyXSB7XHJcbiAgbWFyZ2luOiAwO1xyXG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xyXG4gIGZvbnQtc2l6ZTogMTAwJTtcbn1cbmlucHV0W2RhdGEtdi0yMGYxZTE3Ml0sIGJ1dHRvbltkYXRhLXYtMjBmMWUxNzJdIHtcclxuICBvdXRsaW5lOiBub25lO1xufVxudWxbZGF0YS12LTIwZjFlMTcyXSwgb2xbZGF0YS12LTIwZjFlMTcyXSB7XHJcbiAgbGlzdC1zdHlsZTogbm9uZTtcbn1cbnRhYmxlW2RhdGEtdi0yMGYxZTE3Ml0ge1xyXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XHJcbiAgYm9yZGVyLXNwYWNpbmc6IDA7XG59XG50aFtkYXRhLXYtMjBmMWUxNzJdLCBjYXB0aW9uW2RhdGEtdi0yMGYxZTE3Ml0ge1xyXG4gIHRleHQtYWxpZ246IGxlZnQ7XG59XG5hW2RhdGEtdi0yMGYxZTE3Ml0ge1xyXG4gIGNvbG9yOiAjNjY2O1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICBvdXRsaW5lOiBub25lO1xyXG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG5zZWxlY3RbZGF0YS12LTIwZjFlMTcyXSB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbn1cbi5lbC10cmVlW2RhdGEtdi0yMGYxZTE3Ml0ge1xyXG4gIG1pbi13aWR0aDogMTAwJTtcclxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDtcbn1cbi50cmFuc2ZlcltkYXRhLXYtMjBmMWUxNzJdIHtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbi50cmFuc2Zlci1sZWZ0W2RhdGEtdi0yMGYxZTE3Ml0ge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB0b3A6IDA7XHJcbiAgbGVmdDogMDtcbn1cbi50cmFuc2Zlci1yaWdodFtkYXRhLXYtMjBmMWUxNzJdIHtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgdG9wOiAwO1xyXG4gIHJpZ2h0OiAwO1xufVxuLnRyYW5zZmVyLXJpZ2h0LWl0ZW1bZGF0YS12LTIwZjFlMTcyXSB7XHJcbiAgaGVpZ2h0OiBjYWxjKCgxMDAlIC0gNDFweCkgLyAyKTtcbn1cbi50cmFuc2Zlci1yaWdodC1zbWFsbFtkYXRhLXYtMjBmMWUxNzJdIHtcclxuICBoZWlnaHQ6IDQxcHg7XG59XG4udHJhbnNmZXItbWFpbltkYXRhLXYtMjBmMWUxNzJdIHtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG4gIGhlaWdodDogY2FsYygxMDAlIC0gNDFweCk7XHJcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICBvdmVyZmxvdzogYXV0bztcbn1cbi50cmFuc2Zlci1sZWZ0W2RhdGEtdi0yMGYxZTE3Ml0sXHJcbi50cmFuc2Zlci1yaWdodFtkYXRhLXYtMjBmMWUxNzJdIHtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjZWJlZWY1O1xyXG4gIHdpZHRoOiA0MCU7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG59XG4udHJhbnNmZXItY2VudGVyW2RhdGEtdi0yMGYxZTE3Ml0ge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB0b3A6IDUwJTtcclxuICBsZWZ0OiA0MCU7XHJcbiAgd2lkdGg6IDIwJTtcclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuLnRyYW5zZmVyLWNlbnRlci1pdGVtW2RhdGEtdi0yMGYxZTE3Ml0ge1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbi5hZGRyZXNzLWxpc3QtY2VudGVyW2RhdGEtdi0yMGYxZTE3Ml0ge1xyXG4gIGhlaWdodDogMTAwJTtcbn1cbi5hZGRyZXNzLWxpc3QtY2VudGVyID4gLnRyYW5zZmVyLWNlbnRlci1pdGVtW2RhdGEtdi0yMGYxZTE3Ml0ge1xyXG4gIGhlaWdodDogNTAlO1xyXG4gIHBhZGRpbmc6IDcwcHggMTBweCAwO1xyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbi50cmFuc2Zlci10aXRsZVtkYXRhLXYtMjBmMWUxNzJdIHtcclxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2ViZWVmNTtcclxuICBwYWRkaW5nOiAwIDE1cHg7XHJcbiAgaGVpZ2h0OiA0MHB4O1xyXG4gIGxpbmUtaGVpZ2h0OiA0MHB4O1xyXG4gIGNvbG9yOiAjMzMzO1xyXG4gIGZvbnQtc2l6ZTogMTZweDtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmN2ZhO1xufVxuLnRyYW5zZmVyLXRpdGxlIC5lbC1jaGVja2JveFtkYXRhLXYtMjBmMWUxNzJdIHtcclxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG59XG4uZmlsdGVyLXRyZWVbZGF0YS12LTIwZjFlMTcyXSB7XHJcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbn1cbi5hZGRyZXNzLWxpc3QtdWxbZGF0YS12LTIwZjFlMTcyXSB7XHJcbiAgcGFkZGluZy1ib3R0b206IDIwcHg7XG59XG4uYWRkcmVzcy1saXN0LWxpW2RhdGEtdi0yMGYxZTE3Ml0ge1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBwYWRkaW5nOiA0cHggMjRweCA0cHggNHB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcclxuICBvdmVyZmxvdzogaGlkZGVuOyAvKui2heWHuumDqOWIhumakOiXjyovXHJcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsgLyrkuI3mjaLooYwqL1xyXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOyAvKui2heWHuumDqOWIhuaWh+Wtl+S7pS4uLuaYvuekuiovXG59XG4uYWRkcmVzcy1saXN0LWxpW2RhdGEtdi0yMGYxZTE3Ml06aG92ZXIge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWY3ZmE7XG59XG4uYWRkcmVzcy1saXN0LWxpOmhvdmVyIC5hZGRyZXNzLWxpc3QtZGVsW2RhdGEtdi0yMGYxZTE3Ml0ge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuLmFkZHJlc3MtbGlzdC1kZWxbZGF0YS12LTIwZjFlMTcyXSB7XHJcbiAgZGlzcGxheTogbm9uZTtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgdG9wOiA1MCU7XHJcbiAgcmlnaHQ6IDJweDtcclxuICBtYXJnaW4tdG9wOiAtMTBweDtcclxuICB3aWR0aDogMjBweDtcclxuICBoZWlnaHQ6IDIwcHg7XHJcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XHJcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmVmMGYwO1xyXG4gIGNvbG9yOiAjZjU2YzZjO1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbi51LWNsZWFyW2RhdGEtdi0yMGYxZTE3Ml0ge1xyXG4gIGZsb2F0OiByaWdodDtcclxuICBjb2xvcjogIzY3YzIzYTtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuLm1vdmVfdXBfaW1nW2RhdGEtdi0yMGYxZTE3Ml0ge1xyXG4gIGZsb2F0OiByaWdodDtcclxuICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gIHdpZHRoOiAyMHB4O1xyXG4gIGhlaWdodDogMjBweDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XG59XG4ubW92ZV9kb3duX2ltZ1tkYXRhLXYtMjBmMWUxNzJdIHtcclxuICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xufVxyXG4nLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIkc6L3ppbGlhby9ucG0vdHJlZS10cmFuc2Zlci9ucG0vbGliL2NsZWFyLmNzcyIsIkc6L3ppbGlhby9ucG0vdHJlZS10cmFuc2Zlci9ucG0vbGliL2xpYi90cmFuc2Zlci1leHRlbmQudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQUFBO0VBQ0UsbUJBQW1CO0VBQ25CLFlBQVk7RUFDWixnQkFBZ0I7Q0FBRTtBQUVwQjtFQUNFLHVCQUF1QjtDQUFFO0FBRTNCO0VBQ0UsVUFBVTtFQUNWLFdBQVc7Q0FBRTtBQUVmO0VBQ0UsVUFBVTtDQUFFO0FBRWQ7RUFDRSxtQkFBbUI7RUFDbkIsc0JBQXNCO0NBQUU7QUFFMUI7RUFDRSxnQkFBZ0I7RUFDaEIsb0JBQW9CO0NBQUU7QUFFeEI7RUFDRSxVQUFVO0VBQ1YscUJBQXFCO0VBQ3JCLGdCQUFnQjtDQUFFO0FBRXBCO0VBQ0UsY0FBYztDQUFFO0FBRWxCO0VBQ0UsaUJBQWlCO0NBQUU7QUFFckI7RUFDRSwwQkFBMEI7RUFDMUIsa0JBQWtCO0NBQUU7QUFFdEI7RUFDRSxpQkFBaUI7Q0FBRTtBQUVyQjtFQUNFLFlBQVk7RUFDWixzQkFBc0I7RUFDdEIsY0FBYztFQUNkLHlDQUF5QztDQUFFO0FBRTdDO0VBQ0UsdUJBQXVCO0NBQUU7QUNveUIzQjtFQUNBLGdCQUFBO0VBQ0EsaUNBQUE7Q0FDQTtBQUVBO0VBQ0EsbUJBQUE7RUFDQSxpQkFBQTtDQUNBO0FBRUE7RUFDQSxtQkFBQTtFQUNBLE9BQUE7RUFDQSxRQUFBO0NBQ0E7QUFFQTtFQUNBLG1CQUFBO0VBQ0EsT0FBQTtFQUNBLFNBQUE7Q0FDQTtBQUVBO0VBQ0EsZ0NBQUE7Q0FDQTtBQUVBO0VBQ0EsYUFBQTtDQUNBO0FBRUE7RUFDQSxjQUFBO0VBQ0EsMEJBQUE7RUFDQSx1QkFBQTtFQUNBLGVBQUE7Q0FDQTtBQUVBOztFQUVBLDBCQUFBO0VBQ0EsV0FBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7Q0FDQTtBQUVBO0VBQ0EsbUJBQUE7RUFDQSxTQUFBO0VBQ0EsVUFBQTtFQUNBLFdBQUE7RUFDQSw0QkFBQTtFQUNBLG1CQUFBO0NBQ0E7QUFFQTtFQUNBLGNBQUE7RUFDQSxpQkFBQTtDQUNBO0FBRUE7RUFDQSxhQUFBO0NBQ0E7QUFFQTtFQUNBLFlBQUE7RUFDQSxxQkFBQTtFQUNBLHVCQUFBO0VBQ0EsaUJBQUE7Q0FDQTtBQUVBO0VBQ0EsaUNBQUE7RUFDQSxnQkFBQTtFQUNBLGFBQUE7RUFDQSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxnQkFBQTtFQUNBLDBCQUFBO0NBQ0E7QUFFQTtFQUNBLG1CQUFBO0NBQ0E7QUFFQTtFQUNBLG9CQUFBO0NBQ0E7QUFFQTtFQUNBLHFCQUFBO0NBQ0E7QUFFQTtFQUNBLG1CQUFBO0VBQ0EsMEJBQUE7RUFDQSxtQkFBQTtFQUNBLGlCQUFBLENBQUEsVUFBQTtFQUNBLG9CQUFBLENBQUEsT0FBQTtFQUNBLHdCQUFBLENBQUEsZ0JBQUE7Q0FDQTtBQUVBO0VBQ0EsMEJBQUE7Q0FDQTtBQUVBO0VBQ0EsZUFBQTtDQUNBO0FBRUE7RUFDQSxjQUFBO0VBQ0EsbUJBQUE7RUFDQSxTQUFBO0VBQ0EsV0FBQTtFQUNBLGtCQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxrQkFBQTtFQUNBLG1CQUFBO0VBQ0EsbUJBQUE7RUFDQSwwQkFBQTtFQUNBLGVBQUE7RUFDQSxnQkFBQTtDQUNBO0FBRUE7RUFDQSxhQUFBO0VBQ0EsZUFBQTtFQUNBLGdCQUFBO0VBQ0EsZ0JBQUE7Q0FDQTtBQUVBO0VBQ0EsYUFBQTtFQUNBLGlCQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxnQkFBQTtDQUNBO0FBRUE7RUFDQSwwQkFBQTtDQUNBIixmaWxlOiJ0cmFuc2Zlci1leHRlbmQudnVlIixzb3VyY2VzQ29udGVudDpbJ2JvZHkge1xyXG4gIGxpbmUtaGVpZ2h0OiAxLjY2NjtcclxuICBjb2xvcjogIzY2NjtcclxuICBmb250LXNpemU6IDE0cHg7IH1cclxuXHJcbmJvZHksIGlucHV0IHtcclxuICBmb250LWZhbWlseTogInZlcmRhbmEiOyB9XHJcblxyXG5ib2R5LCBoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCB1bCwgb2wsIGxpLCBwLCBkbCwgZHQsIGRkLCB0YWJsZSwgdGgsIHRkIHtcclxuICBtYXJnaW46IDA7XHJcbiAgcGFkZGluZzogMDsgfVxyXG5cclxudGFibGUsIHRoLCB0ZCwgaW1nIHtcclxuICBib3JkZXI6IDA7IH1cclxuXHJcbmVtLCBpLCB0aCB7XHJcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxyXG5cclxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgdGgsIHN0cm9uZyB7XHJcbiAgZm9udC1zaXplOiAxMDAlO1xyXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7IH1cclxuXHJcbmlucHV0LCBzZWxlY3QsIGJ1dHRvbiwgdGV4dGFyZWEsIHRhYmxlIHtcclxuICBtYXJnaW46IDA7XHJcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XHJcbiAgZm9udC1zaXplOiAxMDAlOyB9XHJcblxyXG5pbnB1dCwgYnV0dG9uIHtcclxuICBvdXRsaW5lOiBub25lOyB9XHJcblxyXG51bCwgb2wge1xyXG4gIGxpc3Qtc3R5bGU6IG5vbmU7IH1cclxuXHJcbnRhYmxlIHtcclxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gIGJvcmRlci1zcGFjaW5nOiAwOyB9XHJcblxyXG50aCwgY2FwdGlvbiB7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDsgfVxyXG5cclxuYSB7XHJcbiAgY29sb3I6ICM2NjY7XHJcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gIG91dGxpbmU6IG5vbmU7XHJcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDsgfVxyXG5cclxuc2VsZWN0IHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOyB9XHJcblxyXG4vKiMgc291cmNlTWFwcGluZ1VSTD1jbGVhci5jc3MubWFwICovXHJcbicsJzx0ZW1wbGF0ZT5cclxuICA8ZGl2IGNsYXNzPSJ0cmFuc2ZlciIgOnN0eWxlPSJ7d2lkdGgsaGVpZ2h0fSI+XHJcbiAgICA8dGVtcGxhdGUgdi1pZj0ibW9kZSA9PSBcJ3RyYW5zZmVyXCciPlxyXG4gICAgICBceDNjIS0tIOW3puS+p+epv+aireahhiDljp/mlpnmoYYgLS1ceDNlXHJcbiAgICAgIDxkaXYgY2xhc3M9InRyYW5zZmVyLWxlZnQiPlxyXG4gICAgICAgIDxoMyBjbGFzcz0idHJhbnNmZXItdGl0bGUiPlxyXG4gICAgICAgICAgPGVsLWNoZWNrYm94IDppbmRldGVybWluYXRlPSJmcm9tX2lzX2luZGV0ZXJtaW5hdGUiIHYtbW9kZWw9ImZyb21fY2hlY2tfYWxsIiBAY2hhbmdlPVwnZnJvbUFsbEJveENoYW5nZVwnPjwvZWwtY2hlY2tib3g+XHJcbiAgICAgICAgICA8c3Bhbj57e2Zyb21UaXRsZX19PC9zcGFuPlxyXG4gICAgICAgIDwvaDM+XHJcbiAgICAgICAgXHgzYyEtLSDlhoXlrrnljLogLS1ceDNlXHJcbiAgICAgICAgPGRpdiBjbGFzcz0idHJhbnNmZXItbWFpbiI+XHJcbiAgICAgICAgICBceDNjIS0tIDxzbG90IG5hbWU9ImZyb20iPjwvc2xvdD4gLS1ceDNlXHJcbiAgICAgICAgICA8ZWwtaW5wdXQgdi1pZj0iZmlsdGVyIiA6cGxhY2Vob2xkZXI9InBsYWNlaG9sZGVyIiB2LW1vZGVsPSJmaWx0ZXJGcm9tIiBzaXplPSJzbWFsbCIgY2xhc3M9ImZpbHRlci10cmVlIj5cclxuICAgICAgICAgIDwvZWwtaW5wdXQ+XHJcbiAgICAgICAgICA8ZWwtdHJlZSByZWY9XCdmcm9tLXRyZWVcJyA6ZGF0YT0ic2VsZl9mcm9tX2RhdGEiIHNob3ctY2hlY2tib3ggOm5vZGUta2V5PSJub2RlX2tleSIgQGNoZWNrPVwnZnJvbVRyZWVDaGVja2VkXCcgOmRlZmF1bHQtZXhwYW5kZWQta2V5cz0iZnJvbV9leHBhbmRlZF9rZXlzIiA6cHJvcHM9ImRlZmF1bHRQcm9wcyIgOmZpbHRlci1ub2RlLW1ldGhvZD0iZmlsdGVyTm9kZUZyb20iIDpkZWZhdWx0LWV4cGFuZC1hbGw9Im9wZW5BbGwiIDpyZW5kZXItY29udGVudD1cJ3JlbmRlckNvbnRlbnRcJyA6ZGVmYXVsdC1jaGVja2VkLWtleXM9ImRlZmF1bHRDaGVja2VkS2V5cyI+XHJcbiAgICAgICAgICA8L2VsLXRyZWU+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICBceDNjIS0tIOepv+aireWMuiDmjInpkq7moYYgLS1ceDNlXHJcbiAgICAgIDxkaXYgY2xhc3M9InRyYW5zZmVyLWNlbnRlciI+XHJcbiAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCdidXR0b25fdGV4dFwnPlxyXG4gICAgICAgICAgPHAgY2xhc3M9InRyYW5zZmVyLWNlbnRlci1pdGVtIj5cclxuICAgICAgICAgICAgPGVsLWJ1dHRvbiB0eXBlPSJwcmltYXJ5IiBAY2xpY2s9ImFkZFRvQWltcyIgOmRpc2FibGVkPSJmcm9tX2Rpc2FibGVkIj5cclxuICAgICAgICAgICAgICB7e2Zyb21CdXR0b24gfHwgXCfmt7vliqBcJ319XHJcbiAgICAgICAgICAgICAgPGkgY2xhc3M9ImVsLWljb24tYXJyb3ctcmlnaHQiPjwvaT5cclxuICAgICAgICAgICAgPC9lbC1idXR0b24+XHJcbiAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICA8cCBjbGFzcz0idHJhbnNmZXItY2VudGVyLWl0ZW0iPlxyXG4gICAgICAgICAgICA8ZWwtYnV0dG9uIHR5cGU9InByaW1hcnkiIEBjbGljaz1cJ3JlbW92ZVRvU291cmNlXCcgOmRpc2FibGVkPSJ0b19kaXNhYmxlZCIgaWNvbj0iZWwtaWNvbi1hcnJvdy1sZWZ0Ij57e3RvQnV0dG9uIHx8IFwn56e76ZmkXCd9fTwvZWwtYnV0dG9uPlxyXG4gICAgICAgICAgPC9wPlxyXG4gICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cclxuICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2Zlci1jZW50ZXItaXRlbSI+XHJcbiAgICAgICAgICAgIDxlbC1idXR0b24gdHlwZT0icHJpbWFyeSIgQGNsaWNrPSJhZGRUb0FpbXMiIGljb249ImVsLWljb24tYXJyb3ctcmlnaHQiIGNpcmNsZSA6ZGlzYWJsZWQ9ImZyb21fZGlzYWJsZWQiPjwvZWwtYnV0dG9uPlxyXG4gICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgPHAgY2xhc3M9InRyYW5zZmVyLWNlbnRlci1pdGVtIj5cclxuICAgICAgICAgICAgPGVsLWJ1dHRvbiB0eXBlPSJwcmltYXJ5IiBAY2xpY2s9XCdyZW1vdmVUb1NvdXJjZVwnIDpkaXNhYmxlZD0idG9fZGlzYWJsZWQiIGljb249ImVsLWljb24tYXJyb3ctbGVmdCIgY2lyY2xlPjwvZWwtYnV0dG9uPlxyXG4gICAgICAgICAgPC9wPlxyXG4gICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICBceDNjIS0tIOWPs+S+p+epv+aireahhiDnm67moIfmoYYgLS1ceDNlXHJcbiAgICAgIDxkaXYgY2xhc3M9InRyYW5zZmVyLXJpZ2h0Ij5cclxuICAgICAgICA8aDMgY2xhc3M9InRyYW5zZmVyLXRpdGxlIj5cclxuICAgICAgICAgIDxlbC1jaGVja2JveCA6aW5kZXRlcm1pbmF0ZT0idG9faXNfaW5kZXRlcm1pbmF0ZSIgdi1tb2RlbD0idG9fY2hlY2tfYWxsIiBAY2hhbmdlPSJ0b0FsbEJveENoYW5nZSI+PC9lbC1jaGVja2JveD5cclxuICAgICAgICAgIDxzcGFuPnt7dG9UaXRsZX19PC9zcGFuPlxyXG4gICAgICAgIDwvaDM+XHJcbiAgICAgICAgXHgzYyEtLSDlhoXlrrnljLogLS1ceDNlXHJcbiAgICAgICAgPGRpdiBjbGFzcz0idHJhbnNmZXItbWFpbiI+XHJcbiAgICAgICAgICBceDNjIS0tIDxzbG90IG5hbWU9XCd0b1wnPjwvc2xvdD4gLS1ceDNlXHJcbiAgICAgICAgICA8ZWwtaW5wdXQgdi1pZj0iZmlsdGVyIiA6cGxhY2Vob2xkZXI9InBsYWNlaG9sZGVyIiB2LW1vZGVsPSJmaWx0ZXJUbyIgc2l6ZT0ic21hbGwiIGNsYXNzPSJmaWx0ZXItdHJlZSI+XHJcbiAgICAgICAgICA8L2VsLWlucHV0PlxyXG4gICAgICAgICAgPGVsLXRyZWUgc2xvdD1cJ3RvXCcgcmVmPVwndG8tdHJlZVwnIDpkYXRhPSJzZWxmX3RvX2RhdGEiIHNob3ctY2hlY2tib3ggOm5vZGUta2V5PSJub2RlX2tleSIgQGNoZWNrPVwndG9UcmVlQ2hlY2tlZFwnIDpkZWZhdWx0LWV4cGFuZGVkLWtleXM9InRvX2V4cGFuZGVkX2tleXMiIDpwcm9wcz0iZGVmYXVsdFByb3BzIiA6ZmlsdGVyLW5vZGUtbWV0aG9kPSJmaWx0ZXJOb2RlVG8iIDpkZWZhdWx0LWV4cGFuZC1hbGw9Im9wZW5BbGwiIDpyZW5kZXItY29udGVudD1cJ3JlbmRlckNvbnRlbnRcJz5cclxuICAgICAgICAgIDwvZWwtdHJlZT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L3RlbXBsYXRlPlxyXG4gICAgPHRlbXBsYXRlIHYtZWxzZS1pZj0ibW9kZSA9PSBcJ2FkZHJlc3NMaXN0XCciPlxyXG4gICAgICBceDNjIS0tIOW3puS+p+epv+aireahhiDljp/mlpnmoYYgLS1ceDNlXHJcbiAgICAgIDxkaXYgY2xhc3M9InRyYW5zZmVyLWxlZnQiPlxyXG4gICAgICAgIDxoMyBjbGFzcz0idHJhbnNmZXItdGl0bGUiPlxyXG4gICAgICAgICAgPGVsLWNoZWNrYm94IDppbmRldGVybWluYXRlPSJmcm9tX2lzX2luZGV0ZXJtaW5hdGUiIHYtbW9kZWw9ImZyb21fY2hlY2tfYWxsIiBAY2hhbmdlPVwnZnJvbUFsbEJveENoYW5nZVwnPjwvZWwtY2hlY2tib3g+XHJcbiAgICAgICAgICA8c3Bhbj57e2Zyb21UaXRsZX19PC9zcGFuPlxyXG4gICAgICAgIDwvaDM+XHJcbiAgICAgICAgXHgzYyEtLSDlhoXlrrnljLogLS1ceDNlXHJcbiAgICAgICAgPGRpdiBjbGFzcz0idHJhbnNmZXItbWFpbiI+XHJcbiAgICAgICAgICBceDNjIS0tIDxzbG90IG5hbWU9ImZyb20iPjwvc2xvdD4gLS1ceDNlXHJcbiAgICAgICAgICA8ZWwtaW5wdXQgdi1pZj0iZmlsdGVyIiA6cGxhY2Vob2xkZXI9InBsYWNlaG9sZGVyIiB2LW1vZGVsPSJmaWx0ZXJGcm9tIiBzaXplPSJzbWFsbCIgY2xhc3M9ImZpbHRlci10cmVlIj5cclxuICAgICAgICAgIDwvZWwtaW5wdXQ+XHJcbiAgICAgICAgICA8ZWwtdHJlZSByZWY9XCdmcm9tLXRyZWVcJyA6ZGF0YT0ic2VsZl9mcm9tX2RhdGEiIHNob3ctY2hlY2tib3ggOm5vZGUta2V5PSJub2RlX2tleSIgQGNoZWNrPVwnZnJvbVRyZWVDaGVja2VkXCcgOmRlZmF1bHQtZXhwYW5kZWQta2V5cz0iZnJvbV9leHBhbmRlZF9rZXlzIiA6cHJvcHM9ImRlZmF1bHRQcm9wcyIgOmZpbHRlci1ub2RlLW1ldGhvZD0iZmlsdGVyTm9kZUZyb20iIDpkZWZhdWx0LWV4cGFuZC1hbGw9Im9wZW5BbGwiIDpyZW5kZXItY29udGVudD1cJ3JlbmRlckNvbnRlbnRcJz5cclxuICAgICAgICAgIDwvZWwtdHJlZT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIFx4M2MhLS0g56m/5qKt5Yy6IOaMiemSruahhiAtLVx4M2VcclxuICAgICAgPGRpdiBjbGFzcz0idHJhbnNmZXItY2VudGVyIGFkZHJlc3MtbGlzdC1jZW50ZXIiPlxyXG4gICAgICAgIDxwIGNsYXNzPSJ0cmFuc2Zlci1jZW50ZXItaXRlbSIgdi1zaG93PVwnIW1vdmVfdXBcJz5cclxuICAgICAgICAgIDxlbC1idXR0b24gdHlwZT0icHJpbWFyeSIgQGNsaWNrPSJhZGRyZXNzTGlzdFRyYW5zZmVyKDApIiBpY29uPSJlbC1pY29uLWFycm93LXJpZ2h0IiBjaXJjbGUgOmRpc2FibGVkPSJmcm9tX2Rpc2FibGVkIj48L2VsLWJ1dHRvbj5cclxuICAgICAgICA8L3A+XHJcbiAgICAgICAgPHAgY2xhc3M9InRyYW5zZmVyLWNlbnRlci1pdGVtIj5cclxuICAgICAgICAgIDxlbC1idXR0b24gdHlwZT0icHJpbWFyeSIgQGNsaWNrPVwnYWRkcmVzc0xpc3RUcmFuc2ZlcigxKVwnIDpkaXNhYmxlZD0iZnJvbV9kaXNhYmxlZCIgaWNvbj0iZWwtaWNvbi1hcnJvdy1yaWdodCIgY2lyY2xlPjwvZWwtYnV0dG9uPlxyXG4gICAgICAgIDwvcD5cclxuICAgICAgICA8cCBjbGFzcz0idHJhbnNmZXItY2VudGVyLWl0ZW0iIHYtc2hvdz1cJ21vdmVfdXBcJz5cclxuICAgICAgICAgIDxlbC1idXR0b24gdHlwZT0icHJpbWFyeSIgQGNsaWNrPVwnYWRkcmVzc0xpc3RUcmFuc2ZlcigyKVwnIDpkaXNhYmxlZD0iZnJvbV9kaXNhYmxlZCIgaWNvbj0iZWwtaWNvbi1hcnJvdy1yaWdodCIgY2lyY2xlPjwvZWwtYnV0dG9uPlxyXG4gICAgICAgIDwvcD5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3M9InRyYW5zZmVyLXJpZ2h0Ij5cclxuICAgICAgICA8ZGl2IGNsYXNzPSJ0cmFuc2Zlci1yaWdodC1pdGVtIiA6Y2xhc3M9IntcJ3RyYW5zZmVyLXJpZ2h0LXNtYWxsXCc6bW92ZV91cH0iPlxyXG4gICAgICAgICAgPGgzIGNsYXNzPSJ0cmFuc2Zlci10aXRsZSI+XHJcbiAgICAgICAgICAgIDxzcGFuPnt7dG9UaXRsZX19PC9zcGFuPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz0idS1jbGVhciIgQGNsaWNrPSJjbGVhckxpc3QoMCxcJ2FsbFwnKSIgdi1pZj0iIW1vdmVfdXAiPua4heepujwvc3Bhbj5cclxuICAgICAgICAgICAgPGltZyBjbGFzcz0ibW92ZV91cF9pbWcgbW92ZV9kb3duX2ltZyIgdi1lbHNlIHNyYz0iLi9zaGFuZy5wbmciIGFsdD0iIiBAY2xpY2s9Im1vdmVVcChcJ2Rvd25cJykiPlxyXG4gICAgICAgICAgPC9oMz5cclxuICAgICAgICAgIFx4M2MhLS0g5YaF5a655Yy6IC0tXHgzZVxyXG4gICAgICAgICAgPGRpdiBjbGFzcz0idHJhbnNmZXItbWFpbiIgdi1pZj1cJyFtb3ZlX3VwXCc+XHJcbiAgICAgICAgICAgIFx4M2MhLS0gPHNsb3QgbmFtZT1cJ3RvXCc+PC9zbG90PiAtLVx4M2VcclxuICAgICAgICAgICAgPGVsLWlucHV0IHYtaWY9ImZpbHRlciIgOnBsYWNlaG9sZGVyPSJwbGFjZWhvbGRlciIgdi1tb2RlbD0iZmlsdGVyTGlzdEZpcnN0IiBzaXplPSJzbWFsbCIgY2xhc3M9ImZpbHRlci10cmVlIj5cclxuICAgICAgICAgICAgPC9lbC1pbnB1dD5cclxuICAgICAgICAgICAgPHVsIGNsYXNzPSJhZGRyZXNzLWxpc3QtdWwiPlxyXG4gICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWRkcmVzcy1saXN0LWxpIiB2LWZvcj0iaXRlbSBvZiBhZGRyZXNzZWUiIDprZXk9Iml0ZW1bbm9kZV9rZXldIj5cclxuICAgICAgICAgICAgICAgIDxsYWJlbD57e2l0ZW1bZGVmYXVsdFByb3BzLmxhYmVsXX19e3tpdGVtLkVtYWlsfX08L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9ImFkZHJlc3MtbGlzdC1kZWwiIEBjbGljaz0iY2xlYXJMaXN0KDAsaXRlbVtub2RlX2tleV0pIj54PC9pPlxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPSJ0cmFuc2Zlci1yaWdodC1pdGVtIj5cclxuICAgICAgICAgIDxoMyBjbGFzcz0idHJhbnNmZXItdGl0bGUiPlxyXG4gICAgICAgICAgICA8c3Bhbj57e3RvVGl0bGVTZWNvbmQgfHwgXCfmioTpgIHkurpcJ319PC9zcGFuPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz0idS1jbGVhciIgQGNsaWNrPSJjbGVhckxpc3QoMSxcJ2FsbFwnKSI+5riF56m6PC9zcGFuPlxyXG4gICAgICAgICAgPC9oMz5cclxuICAgICAgICAgIFx4M2MhLS0g5YaF5a655Yy6IC0tXHgzZVxyXG4gICAgICAgICAgPGRpdiBjbGFzcz0idHJhbnNmZXItbWFpbiI+XHJcbiAgICAgICAgICAgIFx4M2MhLS0gPHNsb3QgbmFtZT1cJ3RvXCc+PC9zbG90PiAtLVx4M2VcclxuICAgICAgICAgICAgPGVsLWlucHV0IHYtaWY9ImZpbHRlciIgOnBsYWNlaG9sZGVyPSJwbGFjZWhvbGRlciIgdi1tb2RlbD0iZmlsdGVyTGlzdFNlY29uZCIgc2l6ZT0ic21hbGwiIGNsYXNzPSJmaWx0ZXItdHJlZSI+XHJcbiAgICAgICAgICAgIDwvZWwtaW5wdXQ+XHJcbiAgICAgICAgICAgIDx1bCBjbGFzcz0iYWRkcmVzcy1saXN0LXVsIj5cclxuICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFkZHJlc3MtbGlzdC1saSIgdi1mb3I9Iml0ZW0gb2YgQ2MiIDprZXk9Iml0ZW1bbm9kZV9rZXldIj5cclxuICAgICAgICAgICAgICAgIDxsYWJlbD57e2l0ZW1bZGVmYXVsdFByb3BzLmxhYmVsXX19e3tpdGVtLkVtYWlsfX08L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9ImFkZHJlc3MtbGlzdC1kZWwiIEBjbGljaz0iY2xlYXJMaXN0KDEsaXRlbVtub2RlX2tleV0pIj54PC9pPlxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPSJ0cmFuc2Zlci1yaWdodC1pdGVtIiA6Y2xhc3M9IntcJ3RyYW5zZmVyLXJpZ2h0LXNtYWxsXCc6IW1vdmVfdXB9Ij5cclxuICAgICAgICAgIDxoMyBjbGFzcz0idHJhbnNmZXItdGl0bGUiPlxyXG4gICAgICAgICAgICA8c3Bhbj57e3RvVGl0bGVUaGlyZCB8fCBcJ+WvhumAgeS6ulwnfX08L3NwYW4+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ1LWNsZWFyIiBAY2xpY2s9ImNsZWFyTGlzdCgyLFwnYWxsXCcpIiB2LWlmPSJtb3ZlX3VwIj7muIXnqbo8L3NwYW4+XHJcbiAgICAgICAgICAgIDxpbWcgY2xhc3M9Im1vdmVfdXBfaW1nIiB2LWVsc2Ugc3JjPSIuL3NoYW5nLnBuZyIgYWx0PSIiIEBjbGljaz0ibW92ZVVwKFwndXBcJykiPlxyXG4gICAgICAgICAgPC9oMz5cclxuICAgICAgICAgIFx4M2MhLS0g5YaF5a655Yy6IC0tXHgzZVxyXG4gICAgICAgICAgPGRpdiBjbGFzcz0idHJhbnNmZXItbWFpbiIgdi1pZj1cJ21vdmVfdXBcJz5cclxuICAgICAgICAgICAgXHgzYyEtLSA8c2xvdCBuYW1lPVwndG9cJz48L3Nsb3Q+IC0tXHgzZVxyXG4gICAgICAgICAgICA8ZWwtaW5wdXQgdi1pZj0iZmlsdGVyIiA6cGxhY2Vob2xkZXI9InBsYWNlaG9sZGVyIiB2LW1vZGVsPSJmaWx0ZXJMaXN0VGhpcmQiIHNpemU9InNtYWxsIiBjbGFzcz0iZmlsdGVyLXRyZWUiPlxyXG4gICAgICAgICAgICA8L2VsLWlucHV0PlxyXG4gICAgICAgICAgICA8dWwgY2xhc3M9ImFkZHJlc3MtbGlzdC11bCI+XHJcbiAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhZGRyZXNzLWxpc3QtbGkiIHYtZm9yPSJpdGVtIG9mIHNlY3JldF9yZWNlaXZlciIgOmtleT0iaXRlbVtub2RlX2tleV0iPlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsPnt7aXRlbVtkZWZhdWx0UHJvcHMubGFiZWxdfX17e2l0ZW0uRW1haWx9fTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iYWRkcmVzcy1saXN0LWRlbCIgQGNsaWNrPSJjbGVhckxpc3QoMixpdGVtW25vZGVfa2V5XSkiPng8L2k+XHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvdGVtcGxhdGU+XHJcbiAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4vLyBpbXBvcnQgeyBjbG9uZURlZXBXaXRoIH0gZnJvbSAibG9kYXNoIjtcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGRhdGEoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBmcm9tX2lzX2luZGV0ZXJtaW5hdGU6IGZhbHNlLCAvLyDmupDmlbDmja7mmK/lkKbljYrpgIlcclxuICAgICAgZnJvbV9jaGVja19hbGw6IGZhbHNlLCAvLyDmupDmlbDmja7mmK/lkKblhajpgIlcclxuICAgICAgdG9faXNfaW5kZXRlcm1pbmF0ZTogZmFsc2UsIC8vIOebruagh+aVsOaNruaYr+WQpuWNiumAiVxyXG4gICAgICB0b19jaGVja19hbGw6IGZhbHNlLCAvLyDnm67moIfmlbDmja7mmK/lkKblhajpgIlcclxuICAgICAgZnJvbV9leHBhbmRlZF9rZXlzOiBbXSwgLy8g5rqQ5pWw5o2u5bGV5byA6IqC54K5XHJcbiAgICAgIHRvX2V4cGFuZGVkX2tleXM6IFtdLCAvLyDnm67moIfmlbDmja7lsZXlvIDoioLngrlcclxuICAgICAgLy8gc2VsZl9mcm9tX2RhdGE6IFsuLi50aGlzLmZyb21fZGF0YV0sIC8vIOW3puS+p+aVsOaNrlxyXG4gICAgICAvLyBzZWxmX3RvX2RhdGE6IFsuLi50aGlzLnRvX2RhdGFdLCAvLyDlj7PkvqfmlbDmja5cclxuICAgICAgc2VsZl9mcm9tOiBbXSwgLy8g5a2Q57uE5Lu25bem5L6n5pWw5o2uXHJcbiAgICAgIHNlbGZfdG86IFtdLCAvLyDlrZDnu4Tku7blj7PkvqfmlbDmja5cclxuICAgICAgZnJvbV9kaXNhYmxlZDogdHJ1ZSwgLy8g5re75Yqg5oyJ6ZKu5piv5ZCm56aB55SoXHJcbiAgICAgIHRvX2Rpc2FibGVkOiB0cnVlLCAvLyDnp7vpmaTmjInpkq7mmK/lkKbnpoHnlKhcclxuICAgICAgZnJvbV9jaGVja19rZXlzOiBbXSwgLy8g5rqQ5pWw5o2u6YCJ5Lita2V55pWw57uEIOS7peatpOWxnuaAp+WFs+iBlOepv+aireaMiemSru+8jOaAu+WFqOmAieOAgeWNiumAieeKtuaAgVxyXG4gICAgICB0b19jaGVja19rZXlzOiBbXSwgLy8g55uu5qCH5pWw5o2u6YCJ5Lita2V55pWw57uEIOS7peatpOWxnuaAp+WFs+iBlOepv+aireaMiemSru+8jOaAu+WFqOmAieOAgeWNiumAieeKtuaAgVxyXG4gICAgICBmaWx0ZXJGcm9tOiAiIiwgLy8g5rqQ5pWw5o2u562b6YCJXHJcbiAgICAgIGZpbHRlclRvOiAiIiwgLy8g55uu5qCH5pWw5o2u562b6YCJXHJcbiAgICAgIGZpbHRlckxpc3RGaXJzdDogIiIsIC8vIOmAmuiur+W9leaooeW8jyDlj7Mx562b6YCJXHJcbiAgICAgIGZpbHRlckxpc3RTZWNvbmQ6ICIiLCAvLyDpgJrorq/lvZXmqKHlvI8g5Y+zMuetm+mAiVxyXG4gICAgICBmaWx0ZXJMaXN0VGhpcmQ6ICIiLCAvLyDpgJrorq/lvZXmqKHlvI8g5Y+zM+etm+mAiVxyXG4gICAgICBhcmNoaXZlRmlyc3Q6IFtdLCAvLyDlrZjmoaPlj7PkvqfnrZvpgInliY3mlbDmja5cclxuICAgICAgYXJjaGl2ZVNlY29uZDogW10sIC8vIOWtmOaho+WPs+S+p+etm+mAieWJjeaVsOaNrlxyXG4gICAgICBhcmNoaXZlVGhpcmQ6IFtdLCAvLyDlrZjmoaPlj7PkvqfnrZvpgInliY3mlbDmja5cclxuICAgICAgYWRkcmVzc2VlOiBbXSwgLy8g5pS25Lu25Lq65YiX6KGoXHJcbiAgICAgIENjOiBbXSwgLy8g5oqE6YCB5Lq65YiX6KGoXHJcbiAgICAgIHNlY3JldF9yZWNlaXZlcjogW10sIC8vIOWvhumAgeS6uuWIl+ihqFxyXG4gICAgICBtb3ZlX3VwOiBmYWxzZSAvLyDpgJrorq/lvZXmqKHlvI8g5YiH5o2i5Y+z5L6nXHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgcHJvcHM6IHtcclxuICAgIC8vIOWuveW6plxyXG4gICAgd2lkdGg6IHtcclxuICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICBkZWZhdWx0OiAiMTAwJSJcclxuICAgIH0sXHJcbiAgICAvLyDpq5jluqZcclxuICAgIGhlaWdodDoge1xyXG4gICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgIGRlZmF1bHQ6ICIzMjBweCJcclxuICAgIH0sXHJcbiAgICAvLyDmoIfpophcclxuICAgIHRpdGxlOiB7XHJcbiAgICAgIHR5cGU6IEFycmF5LFxyXG4gICAgICBkZWZhdWx0OiAoKSA9PiBbIua6kOWIl+ihqCIsICLnm67moIfliJfooagiXVxyXG4gICAgfSxcclxuICAgIC8vIOepv+aireaMiemSruWQjeWtl1xyXG4gICAgYnV0dG9uX3RleHQ6IEFycmF5LFxyXG4gICAgLy8g5rqQ5pWw5o2uXHJcbiAgICBmcm9tX2RhdGE6IHtcclxuICAgICAgdHlwZTogQXJyYXksXHJcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtdXHJcbiAgICB9LFxyXG4gICAgLy8g6YCJ5Lit5pWw5o2uXHJcbiAgICB0b19kYXRhOiB7XHJcbiAgICAgIHR5cGU6IEFycmF5LFxyXG4gICAgICBkZWZhdWx0OiAoKSA9PiBbXVxyXG4gICAgfSxcclxuICAgIC8vIGVsLXRyZWUg6YWN572u6aG5XHJcbiAgICBkZWZhdWx0UHJvcHM6IHtcclxuICAgICAgdHlwZTogT2JqZWN0LFxyXG4gICAgICBkZWZhdWx0OiAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHsgbGFiZWw6ICJsYWJlbCIsIGNoaWxkcmVuOiAiY2hpbGRyZW4iIH07XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyBlbC10cmVlIG5vZGUta2V5IOW/hemhu+WUr+S4gFxyXG4gICAgbm9kZV9rZXk6IHtcclxuICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICBkZWZhdWx0OiAiaWQiXHJcbiAgICB9LFxyXG4gICAgLy8g6Ieq5a6a5LmJIHBpZOWPguaVsOWQjVxyXG4gICAgcGlkOiB7XHJcbiAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgZGVmYXVsdDogInBpZCJcclxuICAgIH0sXHJcbiAgICAvLyDmmK/lkKblj6rov5Tlm57lj7blrZDoioLngrlcclxuICAgIGxlYWZPbmx5OiB7XHJcbiAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgLy8g5piv5ZCm5ZCv55So562b6YCJXHJcbiAgICBmaWx0ZXI6IHtcclxuICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgZGVmYXVsdDogZmFsc2VcclxuICAgIH0sXHJcbiAgICAvLyDmmK/lkKblsZXlvIDmiYDmnInoioLngrlcclxuICAgIG9wZW5BbGw6IHtcclxuICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgZGVmYXVsdDogZmFsc2VcclxuICAgIH0sXHJcbiAgICAvLyDoh6rlrprkuYnmoJHoioLngrlcclxuICAgIHJlbmRlckNvbnRlbnQ6IEZ1bmN0aW9uLFxyXG4gICAgLy8g56m/5qKt5qGG5qih5byPXHJcbiAgICBtb2RlOiB7XHJcbiAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgZGVmYXVsdDogInRyYW5zZmVyIlxyXG4gICAgfSxcclxuICAgIC8vIOepv+aireWQjuaYr+WQpuWxleW8gOiKgueCuVxyXG4gICAgdHJhbnNmZXJPcGVuTm9kZToge1xyXG4gICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICBkZWZhdWx0OiB0cnVlXHJcbiAgICB9LFxyXG4gICAgLy8g5rqQ5pWw5o2uIOm7mOiupOmAieS4reiKgueCuVxyXG4gICAgZGVmYXVsdENoZWNrZWRLZXlzOiB7XHJcbiAgICAgIHR5cGU6IEFycmF5LFxyXG4gICAgICBkZWZhdWx0OiAoKSA9PiBbXVxyXG4gICAgfSxcclxuICAgIC8vIOetm+mAiXBsYWNlaG9sZGVyXHJcbiAgICBwbGFjZWhvbGRlcjoge1xyXG4gICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgIGRlZmF1bHQ6ICLovpPlhaXlhbPplK7lrZfov5vooYzov4fmu6QiXHJcbiAgICB9LFxyXG4gICAgIC8vIOm7mOiupOepv+aireS4gOasoem7mOiupOmAieS4reaVsOaNrlxyXG4gICAgZGVmYXVsdFRyYW5zZmVyOntcclxuICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgZGVmYXVsdDogZmFsc2VcclxuICAgIH0sXHJcbiAgfSxcclxuICBjcmVhdGVkKCkge1xyXG4gICAgdGhpcy5mcm9tX2NoZWNrX2tleXMgPSB0aGlzLmRlZmF1bHRDaGVja2VkS2V5cztcclxuICB9LFxyXG4gIG1ldGhvZHM6IHtcclxuICAgIC8vIOa3u+WKoOaMiemSrlxyXG4gICAgYWRkVG9BaW1zKCkge1xyXG4gICAgICAvLyDojrflj5bpgInkuK3pgJrov4fnqb/moq3moYbnmoRrZXlzIC0g5LuF55So5LqO5Lyg6YCB57qv5YeA55qEaWTmlbDnu4TliLDniLbnu4Tku7blkIzlkI7lj7DpgJrkv6FcclxuICAgICAgbGV0IGtleXMgPSB0aGlzLiRyZWZzWyJmcm9tLXRyZWUiXS5nZXRDaGVja2VkS2V5cyh0aGlzLmxlYWZPbmx5KTtcclxuICAgICAgLy8g6I635Y+W5Y2K6YCJ6YCa6L+H56m/5qKt5qGG55qEa2V5cyAtIOS7heeUqOS6juS8oOmAgee6r+WHgOeahGlk5pWw57uE5Yiw54i257uE5Lu25ZCM5ZCO5Y+w6YCa5L+hXHJcbiAgICAgIGxldCBoYXJmS2V5cyA9IHRoaXMuJHJlZnNbImZyb20tdHJlZSJdLmdldEhhbGZDaGVja2VkS2V5cygpO1xyXG4gICAgICAvLyDpgInkuK3oioLngrnmlbDmja5cclxuICAgICAgbGV0IGFycmF5Q2hlY2tlZE5vZGVzID0gdGhpcy4kcmVmc1siZnJvbS10cmVlIl0uZ2V0Q2hlY2tlZE5vZGVzKFxyXG4gICAgICAgIHRoaXMubGVhZk9ubHlcclxuICAgICAgKTtcclxuICAgICAgLy8g6I635Y+W6YCJ5Lit6YCa6L+H56m/5qKt5qGG55qEbm9kZXMgLSDku4XnlKjkuo7kvKDpgIHpgInkuK3oioLngrnmlbDnu4TliLDniLbnu4Tku7blkIzlkI7lj7DpgJrkv6HpnIDmsYJcclxuICAgICAgbGV0IG5vZGVzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhcnJheUNoZWNrZWROb2RlcykpO1xyXG4gICAgICAvLyDljYrpgInkuK3oioLngrnmlbDmja5cclxuICAgICAgbGV0IGFycmF5SGFsZkNoZWNrZWROb2RlcyA9IHRoaXMuJHJlZnNbImZyb20tdHJlZSJdLmdldEhhbGZDaGVja2VkTm9kZXMoKTtcclxuICAgICAgLy8g6I635Y+W5Y2K6YCJ6YCa6L+H56m/5qKt5qGG55qEbm9kZXMgLSDku4XnlKjkuo7kvKDpgIHpgInkuK3oioLngrnmlbDnu4TliLDniLbnu4Tku7blkIzlkI7lj7DpgJrkv6HpnIDmsYJcclxuICAgICAgbGV0IGhhbGZOb2RlcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYXJyYXlIYWxmQ2hlY2tlZE5vZGVzKSk7XHJcblxyXG4gICAgICAvLyDoh6rlrprkuYnlj4LmlbDor7vlj5borr7nva5cclxuICAgICAgbGV0IGNoaWxkcmVuX18gPSB0aGlzLmRlZmF1bHRQcm9wcy5jaGlsZHJlbiB8fCAiY2hpbGRyZW4iO1xyXG4gICAgICBsZXQgcGlkX18gPSB0aGlzLnBpZCB8fCAicGlkIjtcclxuICAgICAgbGV0IGlkX18gPSB0aGlzWyJub2RlX2tleSJdIHx8ICJpZCI7XHJcblxyXG4gICAgICAvKlxyXG4gICAgICAgKiDlhYjmlbTlkIjnm67moIfmoJHmsqHmnInniLboioLngrnnmoTlj7blrZDoioLngrnpgInkuK3vvIzpnIDopoHmlbTnkIblh7rmnaXmraTlj7blrZDoioLngrnnmoTniLboioLngrnnm7TliLDmoLnoioLngrnot6/lvoQgLSDmraTml7bmiYDmnInpqqjmnrboioLngrnlt7LmnIlcclxuICAgICAgICog5YaN5bCG5omA5pyJ5pyr56uv5Y+25a2Q6IqC54K55qC55o2ucGlk55u05o6l5o6o5YWl55uu5qCH5qCR5Y2z5Y+vXHJcbiAgICAgICAqIOWjsOaYjuaWsOebkuWtkOWwhuaJgOacieWNiumAieiKgueCueeahOWtkOiKgueCuea4hemZpCAtIOWPquS/neeVmemqqOaetiDlm6DkuLrmjpLluo/mmK/lhYjniLblkI7lrZAg5Zug5q2k5LiN5a2Y5Zyo5a2Q5YWD57Sg5aSE55CG5aW95o+S5YWl5pe254i25YWD57Sg6L+Y5rKh5aSE55CG55qE5oOF5Ya1XHJcbiAgICAgICAqIOS4i+mdouS4gOS6jOatpeaYr+S4uuS6huaQreW7uuWHuuadpeebruagh+agkeayoeacieagueiKgueCuei6r+W5suiKgueCueaXtueahOWPtuWtkOmAieS4re+8jOe7meatpOWPtuWtkOaQreW7uuWHuuagueiKgueCueWSjOi6r+W5suiKgueCuVxyXG4gICAgICAgKi9cclxuXHJcbiAgICAgIC8vIGxldOS4jeWtmOWcqOeKtuaAgeaPkOWNhyDlm6DmraTlnKjlh73mlbDosIPnlKjkuYvliY3otYvlgLwg5bm26YCS5b2S5Li65Lul5Li65pWw57uE77yBXHJcbiAgICAgIGxldCBzZWxmX3RvX2RhdGEgPSBKU09OLnN0cmluZ2lmeSh0aGlzLnNlbGZfdG9fZGF0YSk7XHJcbiAgICAgIC8vIOesrOS4gOatpVxyXG4gICAgICBsZXQgc2tlbGV0b25IYWxmQ2hlY2tlZE5vZGVzID0gSlNPTi5wYXJzZShcclxuICAgICAgICBKU09OLnN0cmluZ2lmeShhcnJheUhhbGZDaGVja2VkTm9kZXMpXHJcbiAgICAgICk7IC8vIOa3seaLt+i0neaVsOaNriAtIOWNiumAieiKgueCuVxyXG4gICAgICAvLyDnrZvpgInnm67moIfmoJHkuI3lrZjlnKjnmoTpqqjmnrboioLngrkgLSDljYrpgInlhoXnmoToioLngrlcclxuICAgICAgbGV0IG5ld1NrZWxldG9uSGFsZkNoZWNrZWROb2RlcyA9IFtdO1xyXG4gICAgICBza2VsZXRvbkhhbGZDaGVja2VkTm9kZXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICBpZiAoIWlucXVpcmVJc0V4aXN0KGl0ZW0pKSB7XHJcbiAgICAgICAgICBuZXdTa2VsZXRvbkhhbGZDaGVja2VkTm9kZXMucHVzaChpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICAvLyDnrZvpgInliLDnm67moIfmoJHkuI3lrZjlnKjnmoTpqqjmnrblkI7lnKjlpITnkIbmr4/kuKrpqqjmnrboioLngrkt6Z2e5pyr56uv5Y+25a2Q6IqC54K5IC0g5Y2K6YCJ6IqC54K5XHJcbiAgICAgIG5ld1NrZWxldG9uSGFsZkNoZWNrZWROb2Rlcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgIGl0ZW1bY2hpbGRyZW5fX10gPSBbXTtcclxuICAgICAgICBpZiAoaXRlbVtwaWRfX10gPT0gMCkge1xyXG4gICAgICAgICAgdGhpcy4kcmVmc1sidG8tdHJlZSJdLmFwcGVuZChpdGVtKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy4kcmVmc1sidG8tdHJlZSJdLmFwcGVuZChpdGVtLCBpdGVtW3BpZF9fXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIOesrOS6jOatpVxyXG4gICAgICAvKiBsZXQgY2xvbmVTa2VsZXRvbkNoZWNrZWROb2RlcyA9IEpTT04ucGFyc2UoXHJcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoYXJyYXlDaGVja2VkTm9kZXMpXHJcbiAgICAgICk7IC8vIOa3seaLt+i0neaVsOaNriAt6YCJ5Lit6IqC54K5ICovXHJcbiAgICAgIC8vIOetm+mAieebruagh+agkeS4jeWtmOWcqOeahOmqqOaetuiKgueCuSAtIOWFqOmAieWGheeahOiKgueCuVxyXG4gICAgICBsZXQgbmV3U2tlbGV0b25DaGVja2VkTm9kZXMgPSBbXTtcclxuICAgICAgbm9kZXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICBpZiAoIWlucXVpcmVJc0V4aXN0KGl0ZW0pKSB7XHJcbiAgICAgICAgICBuZXdTa2VsZXRvbkNoZWNrZWROb2Rlcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIC8vIOetm+mAieWIsOebruagh+agkeS4jeWtmOWcqOeahOmqqOaetuWQjuWcqOWkhOeQhuavj+S4qumqqOaetuiKgueCuS3pnZ7mnKvnq6/lj7blrZDoioLngrkgLSDlhajpgInoioLngrlcclxuICAgICAgbmV3U2tlbGV0b25DaGVja2VkTm9kZXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICBpZiAoaXRlbVtjaGlsZHJlbl9fXSAmJiBpdGVtW2NoaWxkcmVuX19dLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIGl0ZW1bY2hpbGRyZW5fX10gPSBbXTtcclxuICAgICAgICAgIHRoaXMuJHJlZnNbInRvLXRyZWUiXS5hcHBlbmQoaXRlbSwgaXRlbVtwaWRfX10pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyDnrKzkuInmraUg5aSE55CG5pyr56uv5Y+25a2Q5YWD57SgIC0g5aOw5piO5paw55uS5a2Q562b6YCJ5Ye65omA5pyJ5pyr56uv5Y+25a2Q6IqC54K5XHJcbiAgICAgIGxldCBsZWFmQ2hlY2tlZE5vZGVzID0gYXJyYXlDaGVja2VkTm9kZXMuZmlsdGVyKFxyXG4gICAgICAgIGl0ZW0gPT4gIWl0ZW1bY2hpbGRyZW5fX10gfHwgaXRlbVtjaGlsZHJlbl9fXS5sZW5ndGggPT0gMFxyXG4gICAgICApO1xyXG4gICAgICAvLyDmnKvnq6/lj7blrZDmj5LlhaXnm67moIfmoJFcclxuICAgICAgbGVhZkNoZWNrZWROb2Rlcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgIGlmICghaW5xdWlyZUlzRXhpc3QoaXRlbSkpIHtcclxuICAgICAgICAgIHRoaXMuJHJlZnNbInRvLXRyZWUiXS5hcHBlbmQoaXRlbSwgaXRlbVtwaWRfX10pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyDpgJLlvZLmn6Xor6JkYXRh5YaF5piv5ZCm5a2Y5ZyoaXRlbeWHveaVsFxyXG4gICAgICBmdW5jdGlvbiBpbnF1aXJlSXNFeGlzdChpdGVtLCBzdHJEYXRhID0gc2VsZl90b19kYXRhKSB7XHJcbiAgICAgICAgLy8g5bCG5qCR5b2i5pWw5o2u5qC85byP5YyW5oiQ5LiA57u05a2X56ym5LiyIOeEtuWQjumAmui/h+WMuemFjeadpeWIpOaWreaYr+WQpuW3suWtmOWcqFxyXG4gICAgICAgIGxldCBzdHJJdGVtID1cclxuICAgICAgICAgIHR5cGVvZiBpdGVtW2lkX19dID09ICJudW1iZXIiXHJcbiAgICAgICAgICAgID8gYCIke2lkX199Ijoke2l0ZW1baWRfX119LGBcclxuICAgICAgICAgICAgOiBgIiR7aWRfX30iOiIke2l0ZW1baWRfX119ImA7XHJcbiAgICAgICAgbGV0IHJlZyA9IFJlZ0V4cChzdHJJdGVtKTtcclxuICAgICAgICBsZXQgZXhpc3RlZCA9IHJlZy50ZXN0KHN0ckRhdGEpO1xyXG5cclxuICAgICAgICAvKiAgZm9yIChsZXQgaSBvZiBkYXRhKSB7XHJcbiAgICAgICAgICBpZiAoaXRlbS5pZCA9PSBpLmlkKSB7XHJcbiAgICAgICAgICAgIGV4aXN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChpLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgaW5xdWlyZUlzRXhpc3QoaXRlbSwgaS5jaGlsZHJlbik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSAqL1xyXG4gICAgICAgIHJldHVybiBleGlzdGVkO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKiAgLy8g6YCJ5Lit6aG5IOS7jua6kOaVsOaNruenu+mZpFxyXG4gICAgICBhcnJheUNoZWNrZWROb2Rlcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgIHJlY3Vyc2l2ZShpdGVtLCB0aGlzLnNlbGZfZnJvbV9kYXRhKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyDmupDmoJHpgJLlvZLmn6Xor6JcclxuICAgICAgZnVuY3Rpb24gcmVjdXJzaXZlKG9iaiwgZGF0YSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgb2YgZGF0YSkge1xyXG4gICAgICAgICAgaWYgKGkuaWQgPT0gb2JqLmlkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJmIiwgZGF0YSk7XHJcbiAgICAgICAgICAgIGxldCBhcnIgPSBkYXRhLmZpbHRlcihiID0+IGIuaWQgIT0gb2JqLmlkKTtcclxuICAgICAgICAgICAgZGF0YSA9IGFycjtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coInQiLCBkYXRhKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVjdXJzaXZlKG9iaiwgaS5jaGlsZHJlbik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9ICovXHJcblxyXG4gICAgICAvLyDlt6bkvqfliKDmjonpgInkuK3mlbDmja5cclxuICAgICAgYXJyYXlDaGVja2VkTm9kZXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICB0aGlzLiRyZWZzWyJmcm9tLXRyZWUiXS5yZW1vdmUoaXRlbSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8g5aSE55CG5a6M5q+V5oyJ6ZKu5oGi5aSN56aB55So54q25oCBXHJcbiAgICAgIHRoaXMuZnJvbV9jaGVja19rZXlzID0gW107XHJcblxyXG4gICAgICAvLyDnm67moIfmlbDmja7oioLngrnlsZXlvIBcclxuICAgICAgaWYgKHRoaXMudHJhbnNmZXJPcGVuTm9kZSkge1xyXG4gICAgICAgIHRoaXMudG9fZXhwYW5kZWRfa2V5cyA9IGtleXM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIOS8oOmAkuS/oeaBr+e7meeItue7hOS7tlxyXG4gICAgICB0aGlzLiRlbWl0KCJhZGRCdG4iLCB0aGlzLnNlbGZfZnJvbV9kYXRhLCB0aGlzLnNlbGZfdG9fZGF0YSwge1xyXG4gICAgICAgIGtleXMsXHJcbiAgICAgICAgbm9kZXMsXHJcbiAgICAgICAgaGFyZktleXMsXHJcbiAgICAgICAgaGFsZk5vZGVzXHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIC8vIOenu+mZpOaMiemSrlxyXG4gICAgcmVtb3ZlVG9Tb3VyY2UoKSB7XHJcbiAgICAgIC8vIOiOt+WPlumAieS4remAmui/h+epv+aireahhueahGtleXMgLSDku4XnlKjkuo7kvKDpgIHnuq/lh4DnmoRpZOaVsOe7hOWIsOeItue7hOS7tuWQjOWQjuWPsOmAmuS/oVxyXG4gICAgICBsZXQga2V5cyA9IHRoaXMuJHJlZnNbInRvLXRyZWUiXS5nZXRDaGVja2VkS2V5cyh0aGlzLmxlYWZPbmx5KTtcclxuICAgICAgLy8g6I635Y+W5Y2K6YCJ6YCa6L+H56m/5qKt5qGG55qEa2V5cyAtIOS7heeUqOS6juS8oOmAgee6r+WHgOeahGlk5pWw57uE5Yiw54i257uE5Lu25ZCM5ZCO5Y+w6YCa5L+hXHJcbiAgICAgIGxldCBoYXJmS2V5cyA9IHRoaXMuJHJlZnNbInRvLXRyZWUiXS5nZXRIYWxmQ2hlY2tlZEtleXMoKTtcclxuICAgICAgLy8g6I635Y+W6YCJ5Lit6YCa6L+H56m/5qKt5qGG55qEbm9kZXMg6YCJ5Lit6IqC54K55pWw5o2uXHJcbiAgICAgIGxldCBhcnJheUNoZWNrZWROb2RlcyA9IHRoaXMuJHJlZnNbInRvLXRyZWUiXS5nZXRDaGVja2VkTm9kZXMoXHJcbiAgICAgICAgdGhpcy5sZWFmT25seVxyXG4gICAgICApO1xyXG4gICAgICAvLyDojrflj5bpgInkuK3pgJrov4fnqb/moq3moYbnmoRub2RlcyAtIOS7heeUqOS6juS8oOmAgemAieS4reiKgueCueaVsOe7hOWIsOeItue7hOS7tuWQjOWQjuWPsOmAmuS/oemcgOaxglxyXG4gICAgICBsZXQgbm9kZXMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFycmF5Q2hlY2tlZE5vZGVzKSk7XHJcbiAgICAgIC8vIOWNiumAieS4reiKgueCueaVsOaNrlxyXG4gICAgICBsZXQgYXJyYXlIYWxmQ2hlY2tlZE5vZGVzID0gdGhpcy4kcmVmc1sidG8tdHJlZSJdLmdldEhhbGZDaGVja2VkTm9kZXMoKTtcclxuICAgICAgLy8g6I635Y+W5Y2K6YCJ6YCa6L+H56m/5qKt5qGG55qEbm9kZXMgLSDku4XnlKjkuo7kvKDpgIHpgInkuK3oioLngrnmlbDnu4TliLDniLbnu4Tku7blkIzlkI7lj7DpgJrkv6HpnIDmsYJcclxuICAgICAgbGV0IGhhbGZOb2RlcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYXJyYXlIYWxmQ2hlY2tlZE5vZGVzKSk7XHJcblxyXG4gICAgICAvLyDoh6rlrprkuYnlj4LmlbDor7vlj5borr7nva5cclxuICAgICAgbGV0IGNoaWxkcmVuX18gPSB0aGlzLmRlZmF1bHRQcm9wcy5jaGlsZHJlbiB8fCAiY2hpbGRyZW4iO1xyXG4gICAgICBsZXQgcGlkX18gPSB0aGlzLnBpZCB8fCAicGlkIjtcclxuICAgICAgbGV0IGlkX18gPSB0aGlzWyJub2RlX2tleSJdIHx8ICJpZCI7XHJcblxyXG4gICAgICAvKlxyXG4gICAgICAgKiDlhYjmlbTlkIjnm67moIfmoJHmsqHmnInniLboioLngrnnmoTlj7blrZDoioLngrnpgInkuK3vvIzpnIDopoHmlbTnkIblh7rmnaXmraTlj7blrZDoioLngrnnmoTniLboioLngrnnm7TliLDmoLnoioLngrnot6/lvoQgLSDmraTml7bmiYDmnInpqqjmnrboioLngrnlt7LmnIlcclxuICAgICAgICog5YaN5bCG5omA5pyJ5pyr56uv5Y+25a2Q6IqC54K55qC55o2ucGlk55u05o6l5o6o5YWl55uu5qCH5qCR5Y2z5Y+vXHJcbiAgICAgICAqIOWjsOaYjuaWsOebkuWtkOWwhuaJgOacieWNiumAieiKgueCueeahOWtkOiKgueCuea4hemZpCAtIOWPquS/neeVmemqqOaetiDlm6DkuLrmjpLluo/mmK/lhYjniLblkI7lrZAg5Zug5q2k5LiN5a2Y5Zyo5a2Q5YWD57Sg5aSE55CG5aW95o+S5YWl5pe254i25YWD57Sg6L+Y5rKh5aSE55CG55qE5oOF5Ya1XHJcbiAgICAgICAqIOS4i+mdouS4gOS6jOatpeaYr+S4uuS6huaQreW7uuWHuuadpeebruagh+agkeayoeacieagueiKgueCuei6r+W5suiKgueCueaXtueahOWPtuWtkOmAieS4re+8jOe7meatpOWPtuWtkOaQreW7uuWHuuagueiKgueCueWSjOi6r+W5suiKgueCuVxyXG4gICAgICAgKi9cclxuXHJcbiAgICAgIC8vIGxldOS4jeWtmOWcqOeKtuaAgeaPkOWNhyDlm6DmraTlnKjlh73mlbDosIPnlKjkuYvliY3otYvlgLwg5bm26YCS5b2S5Li65Lul5Li65pWw57uE77yBXHJcbiAgICAgIGxldCBzZWxmX2Zyb21fZGF0YSA9IEpTT04uc3RyaW5naWZ5KHRoaXMuc2VsZl9mcm9tX2RhdGEpO1xyXG4gICAgICAvLyDnrKzkuIDmraVcclxuICAgICAgbGV0IHNrZWxldG9uSGFsZkNoZWNrZWROb2RlcyA9IEpTT04ucGFyc2UoXHJcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoYXJyYXlIYWxmQ2hlY2tlZE5vZGVzKVxyXG4gICAgICApOyAvLyDmt7Hmi7fotJ3mlbDmja4gLSDljYrpgInoioLngrlcclxuICAgICAgLy8g562b6YCJ55uu5qCH5qCR5LiN5a2Y5Zyo55qE6aqo5p626IqC54K5IC0g5Y2K6YCJ5YaF55qE6IqC54K5XHJcbiAgICAgIGxldCBuZXdTa2VsZXRvbkhhbGZDaGVja2VkTm9kZXMgPSBbXTtcclxuICAgICAgc2tlbGV0b25IYWxmQ2hlY2tlZE5vZGVzLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgaWYgKCFpbnF1aXJlSXNFeGlzdChpdGVtKSkge1xyXG4gICAgICAgICAgbmV3U2tlbGV0b25IYWxmQ2hlY2tlZE5vZGVzLnB1c2goaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgLy8g562b6YCJ5Yiw55uu5qCH5qCR5LiN5a2Y5Zyo55qE6aqo5p625ZCO5Zyo5aSE55CG5q+P5Liq6aqo5p626IqC54K5Lemdnuacq+err+WPtuWtkOiKgueCuSAtIOWNiumAieiKgueCuVxyXG4gICAgICBuZXdTa2VsZXRvbkhhbGZDaGVja2VkTm9kZXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICBpdGVtW2NoaWxkcmVuX19dID0gW107XHJcbiAgICAgICAgaWYgKGl0ZW1bcGlkX19dID09IDApIHtcclxuICAgICAgICAgIHRoaXMuJHJlZnNbImZyb20tdHJlZSJdLmFwcGVuZChpdGVtKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy4kcmVmc1siZnJvbS10cmVlIl0uYXBwZW5kKGl0ZW0sIGl0ZW1bcGlkX19dKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8g56ys5LqM5q2lXHJcbiAgICAgIC8qIGxldCBjbG9uZVNrZWxldG9uQ2hlY2tlZE5vZGVzID0gSlNPTi5wYXJzZShcclxuICAgICAgICBKU09OLnN0cmluZ2lmeShhcnJheUNoZWNrZWROb2RlcylcclxuICAgICAgKTsgLy8g5rex5ou36LSd5pWw5o2uIC3pgInkuK3oioLngrkgKi9cclxuICAgICAgLy8g562b6YCJ55uu5qCH5qCR5LiN5a2Y5Zyo55qE6aqo5p626IqC54K5IC0g5YWo6YCJ5YaF55qE6IqC54K5XHJcbiAgICAgIGxldCBuZXdTa2VsZXRvbkNoZWNrZWROb2RlcyA9IFtdO1xyXG4gICAgICBub2Rlcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgIGlmICghaW5xdWlyZUlzRXhpc3QoaXRlbSkpIHtcclxuICAgICAgICAgIG5ld1NrZWxldG9uQ2hlY2tlZE5vZGVzLnB1c2goaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgLy8g562b6YCJ5Yiw55uu5qCH5qCR5LiN5a2Y5Zyo55qE6aqo5p625ZCO5Zyo5aSE55CG5q+P5Liq6aqo5p626IqC54K5Lemdnuacq+err+WPtuWtkOiKgueCuSAtIOWFqOmAieiKgueCuVxyXG4gICAgICBuZXdTa2VsZXRvbkNoZWNrZWROb2Rlcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgIGlmIChpdGVtW2NoaWxkcmVuX19dICYmIGl0ZW1bY2hpbGRyZW5fX10ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgaXRlbVtjaGlsZHJlbl9fXSA9IFtdO1xyXG4gICAgICAgICAgdGhpcy4kcmVmc1siZnJvbS10cmVlIl0uYXBwZW5kKGl0ZW0sIGl0ZW1bcGlkX19dKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8g56ys5LiJ5q2lIOWkhOeQhuacq+err+WPtuWtkOWFg+e0oCAtIOWjsOaYjuaWsOebkuWtkOetm+mAieWHuuaJgOacieacq+err+WPtuWtkOiKgueCuVxyXG4gICAgICBsZXQgbGVhZkNoZWNrZWROb2RlcyA9IGFycmF5Q2hlY2tlZE5vZGVzLmZpbHRlcihcclxuICAgICAgICBpdGVtID0+ICFpdGVtW2NoaWxkcmVuX19dIHx8IGl0ZW1bY2hpbGRyZW5fX10ubGVuZ3RoID09IDBcclxuICAgICAgKTtcclxuICAgICAgLy8g5pyr56uv5Y+25a2Q5o+S5YWl55uu5qCH5qCRXHJcbiAgICAgIGxlYWZDaGVja2VkTm9kZXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICBpZiAoIWlucXVpcmVJc0V4aXN0KGl0ZW0pKSB7XHJcbiAgICAgICAgICB0aGlzLiRyZWZzWyJmcm9tLXRyZWUiXS5hcHBlbmQoaXRlbSwgaXRlbVtwaWRfX10pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyDpgJLlvZLmn6Xor6JkYXRh5YaF5piv5ZCm5a2Y5ZyoaXRlbeWHveaVsFxyXG4gICAgICBmdW5jdGlvbiBpbnF1aXJlSXNFeGlzdChpdGVtLCBzdHJEYXRhID0gc2VsZl9mcm9tX2RhdGEpIHtcclxuICAgICAgICAvLyDlsIbmoJHlvaLmlbDmja7moLzlvI/ljJbmiJDkuIDnu7TlrZfnrKbkuLIg54S25ZCO6YCa6L+H5Yy56YWN5p2l5Yik5pat5piv5ZCm5bey5a2Y5ZyoXHJcbiAgICAgICAgbGV0IHN0ckl0ZW0gPVxyXG4gICAgICAgICAgdHlwZW9mIGl0ZW1baWRfX10gPT0gIm51bWJlciJcclxuICAgICAgICAgICAgPyBgIiR7aWRfX30iOiR7aXRlbVtpZF9fXX0sYFxyXG4gICAgICAgICAgICA6IGAiJHtpZF9ffSI6IiR7aXRlbVtpZF9fXX0iYDtcclxuICAgICAgICBsZXQgcmVnID0gUmVnRXhwKHN0ckl0ZW0pO1xyXG4gICAgICAgIGxldCBleGlzdGVkID0gcmVnLnRlc3Qoc3RyRGF0YSk7XHJcbiAgICAgICAgLyogIGZvciAobGV0IGkgb2YgZGF0YSkge1xyXG4gICAgICAgICAgaWYgKGl0ZW0uaWQgPT0gaS5pZCkge1xyXG4gICAgICAgICAgICBleGlzdGVkID0gdHJ1ZTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoaS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGlucXVpcmVJc0V4aXN0KGl0ZW0sIGkuY2hpbGRyZW4pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gKi9cclxuICAgICAgICByZXR1cm4gZXhpc3RlZDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLyogIC8vIOmAieS4remhuSDku47mupDmlbDmja7np7vpmaRcclxuICAgICAgYXJyYXlDaGVja2VkTm9kZXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICByZWN1cnNpdmUoaXRlbSwgdGhpcy5zZWxmX2Zyb21fZGF0YSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8g5rqQ5qCR6YCS5b2S5p+l6K+iXHJcbiAgICAgIGZ1bmN0aW9uIHJlY3Vyc2l2ZShvYmosIGRhdGEpIHtcclxuICAgICAgICBmb3IgKGxldCBpIG9mIGRhdGEpIHtcclxuICAgICAgICAgIGlmIChpLmlkID09IG9iai5pZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygiZiIsIGRhdGEpO1xyXG4gICAgICAgICAgICBsZXQgYXJyID0gZGF0YS5maWx0ZXIoYiA9PiBiLmlkICE9IG9iai5pZCk7XHJcbiAgICAgICAgICAgIGRhdGEgPSBhcnI7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJ0IiwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlY3Vyc2l2ZShvYmosIGkuY2hpbGRyZW4pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSAqL1xyXG5cclxuICAgICAgLy8g5Y+z5L6n5Yig5o6J6YCJ5Lit5pWw5o2uXHJcbiAgICAgIGFycmF5Q2hlY2tlZE5vZGVzLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgdGhpcy4kcmVmc1sidG8tdHJlZSJdLnJlbW92ZShpdGVtKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyDlpITnkIblrozmr5XmjInpkq7mgaLlpI3npoHnlKjnirbmgIFcclxuICAgICAgdGhpcy50b19jaGVja19rZXlzID0gW107XHJcblxyXG4gICAgICAvLyDnm67moIfmlbDmja7oioLngrnlsZXlvIBcclxuICAgICAgaWYgKHRoaXMudHJhbnNmZXJPcGVuTm9kZSkge1xyXG4gICAgICAgIHRoaXMuZnJvbV9leHBhbmRlZF9rZXlzID0ga2V5cztcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g5Lyg6YCS5L+h5oGv57uZ54i257uE5Lu2XHJcbiAgICAgIHRoaXMuJGVtaXQoInJlbW92ZUJ0biIsIHRoaXMuc2VsZl9mcm9tX2RhdGEsIHRoaXMuc2VsZl90b19kYXRhLCB7XHJcbiAgICAgICAga2V5cyxcclxuICAgICAgICBub2RlcyxcclxuICAgICAgICBoYXJmS2V5cyxcclxuICAgICAgICBoYWxmTm9kZXNcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgLy8g5rqQ5qCR6YCJ5Lit5LqL5Lu2IC0g5piv5ZCm56aB55So56m/5qKt5oyJ6ZKuXHJcbiAgICBmcm9tVHJlZUNoZWNrZWQobm9kZU9iaiwgdHJlZU9iaikge1xyXG4gICAgICB0aGlzLmZyb21fY2hlY2tfa2V5cyA9IHRyZWVPYmouY2hlY2tlZE5vZGVzO1xyXG4gICAgfSxcclxuICAgIC8vIOebruagh+agkemAieS4reS6i+S7tiAtIOaYr+WQpuemgeeUqOepv+aireaMiemSrlxyXG4gICAgdG9UcmVlQ2hlY2tlZChub2RlT2JqLCB0cmVlT2JqKSB7XHJcbiAgICAgIHRoaXMudG9fY2hlY2tfa2V5cyA9IHRyZWVPYmouY2hlY2tlZE5vZGVzO1xyXG4gICAgfSxcclxuICAgIC8vIOa6kOaVsOaNriDmgLvlhajpgIljaGVja2JveFxyXG4gICAgZnJvbUFsbEJveENoYW5nZSh2YWwpIHtcclxuICAgICAgaWYgKHRoaXMuc2VsZl9mcm9tX2RhdGEubGVuZ3RoID09IDApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgIC8vIGxldCBhcnJheSA9IFsuLi50aGlzLmZyb21fZGF0YV07XHJcbiAgICAgICAgdGhpcy5mcm9tX2NoZWNrX2tleXMgPSB0aGlzLnNlbGZfZnJvbV9kYXRhO1xyXG4gICAgICAgIHRoaXMuJHJlZnNbImZyb20tdHJlZSJdLnNldENoZWNrZWROb2Rlcyh0aGlzLnNlbGZfZnJvbV9kYXRhKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLiRyZWZzWyJmcm9tLXRyZWUiXS5zZXRDaGVja2VkTm9kZXMoW10pO1xyXG4gICAgICAgIHRoaXMuZnJvbV9jaGVja19rZXlzID0gW107XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyDnm67moIfmlbDmja4g5oC75YWo6YCJY2hlY2tib3hcclxuICAgIHRvQWxsQm94Q2hhbmdlKHZhbCkge1xyXG4gICAgICBpZiAodGhpcy5zZWxmX3RvX2RhdGEubGVuZ3RoID09IDApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgIHRoaXMudG9fY2hlY2tfa2V5cyA9IHRoaXMuc2VsZl90b19kYXRhO1xyXG4gICAgICAgIHRoaXMuJHJlZnNbInRvLXRyZWUiXS5zZXRDaGVja2VkTm9kZXModGhpcy5zZWxmX3RvX2RhdGEpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuJHJlZnNbInRvLXRyZWUiXS5zZXRDaGVja2VkTm9kZXMoW10pO1xyXG4gICAgICAgIHRoaXMudG9fY2hlY2tfa2V5cyA9IFtdO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgLy8g5rqQ5pWw5o2uIOetm+mAiVxyXG4gICAgZmlsdGVyTm9kZUZyb20odmFsdWUsIGRhdGEpIHtcclxuICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuIHRydWU7XHJcbiAgICAgIHJldHVybiBkYXRhW3RoaXMuZGVmYXVsdFByb3BzLmxhYmVsXS5pbmRleE9mKHZhbHVlKSAhPT0gLTE7XHJcbiAgICB9LFxyXG4gICAgLy8g55uu5qCH5pWw5o2u562b6YCJXHJcbiAgICBmaWx0ZXJOb2RlVG8odmFsdWUsIGRhdGEpIHtcclxuICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuIHRydWU7XHJcbiAgICAgIHJldHVybiBkYXRhW3RoaXMuZGVmYXVsdFByb3BzLmxhYmVsXS5pbmRleE9mKHZhbHVlKSAhPT0gLTE7XHJcbiAgICB9LFxyXG4gICAgLy8g6YCa6K6v5b2V5qih5byPIOepv+aireaTjeS9nFxyXG4gICAgYWRkcmVzc0xpc3RUcmFuc2Zlcih0eXBlKSB7XHJcbiAgICAgIC8vIOiOt+WPlumAieS4remAmui/h+epv+aireahhueahGtleXMgLSDku4XnlKjkuo7kvKDpgIHnuq/lh4DnmoRpZOaVsOe7hOWIsOeItue7hOS7tuWQjOWQjuWPsOmAmuS/oVxyXG4gICAgICBsZXQga2V5cyA9IHRoaXMuJHJlZnNbImZyb20tdHJlZSJdLmdldENoZWNrZWRLZXlzKHRydWUpO1xyXG4gICAgICAvLyDpgInkuK3oioLngrnmlbDmja5cclxuICAgICAgbGV0IGFycmF5Q2hlY2tlZE5vZGVzID0gdGhpcy4kcmVmc1siZnJvbS10cmVlIl0uZ2V0Q2hlY2tlZE5vZGVzKHRydWUpO1xyXG4gICAgICAvLyDljrvph43nrZvpgIlcclxuICAgICAgbGV0IGFycmF5RGVXZWlnaHRpbmcgPSBbXTtcclxuICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgYXJyYXlEZVdlaWdodGluZyA9IGFycmF5Q2hlY2tlZE5vZGVzLmZpbHRlcihpdGVtID0+IHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICF0aGlzLmFkZHJlc3NlZS5zb21lKFxyXG4gICAgICAgICAgICAgICAgaXRlID0+IGl0ZVt0aGlzLm5vZGVfa2V5XSA9PSBpdGVtW3RoaXMubm9kZV9rZXldXHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICB0aGlzLmFkZHJlc3NlZSA9IFsuLi50aGlzLmFkZHJlc3NlZSwgLi4uYXJyYXlEZVdlaWdodGluZ107XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICBhcnJheURlV2VpZ2h0aW5nID0gYXJyYXlDaGVja2VkTm9kZXMuZmlsdGVyKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgIXRoaXMuQ2Muc29tZShpdGUgPT4gaXRlW3RoaXMubm9kZV9rZXldID09IGl0ZW1bdGhpcy5ub2RlX2tleV0pXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHRoaXMuQ2MgPSBbLi4udGhpcy5DYywgLi4uYXJyYXlEZVdlaWdodGluZ107XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICBhcnJheURlV2VpZ2h0aW5nID0gYXJyYXlDaGVja2VkTm9kZXMuZmlsdGVyKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgIXRoaXMuc2VjcmV0X3JlY2VpdmVyLnNvbWUoXHJcbiAgICAgICAgICAgICAgICBpdGUgPT4gaXRlW3RoaXMubm9kZV9rZXldID09IGl0ZW1bdGhpcy5ub2RlX2tleV1cclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHRoaXMuc2VjcmV0X3JlY2VpdmVyID0gWy4uLnRoaXMuc2VjcmV0X3JlY2VpdmVyLCAuLi5hcnJheURlV2VpZ2h0aW5nXTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDlpITnkIblrozmr5Xlj5bmtojpgInkuK1cclxuICAgICAgdGhpcy4kcmVmc1siZnJvbS10cmVlIl0uc2V0Q2hlY2tlZEtleXMoW10pO1xyXG5cclxuICAgICAgLy8g5aSE55CG5a6M5q+V5oyJ6ZKu5oGi5aSN56aB55So54q25oCBXHJcbiAgICAgIHRoaXMuZnJvbV9jaGVja19rZXlzID0gW107XHJcblxyXG4gICAgICAvLyDkvKDpgJLkv6Hmga/nu5nniLbnu4Tku7ZcclxuICAgICAgdGhpcy4kZW1pdCgiYWRkQnRuIiwgdGhpcy5hZGRyZXNzZWUsIHRoaXMuQ2MsIHRoaXMuc2VjcmV0X3JlY2VpdmVyKTtcclxuICAgIH0sXHJcbiAgICAvLyDmuIXnkIYg6YCa6K6v5b2V6YCJ5LitIOaVsOaNrlxyXG4gICAgY2xlYXJMaXN0KHR5cGUsIGlkKSB7XHJcbiAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgIHRoaXMuYWRkcmVzc2VlID1cclxuICAgICAgICAgICAgaWQgPT0gImFsbCJcclxuICAgICAgICAgICAgICA/IFtdXHJcbiAgICAgICAgICAgICAgOiB0aGlzLmFkZHJlc3NlZS5maWx0ZXIoaXRlbSA9PiBpdGVtW3RoaXMubm9kZV9rZXldICE9IGlkKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgIHRoaXMuQ2MgPVxyXG4gICAgICAgICAgICBpZCA9PSAiYWxsIlxyXG4gICAgICAgICAgICAgID8gW11cclxuICAgICAgICAgICAgICA6IHRoaXMuQ2MuZmlsdGVyKGl0ZW0gPT4gaXRlbVt0aGlzLm5vZGVfa2V5XSAhPSBpZCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICB0aGlzLnNlY3JldF9yZWNlaXZlciA9XHJcbiAgICAgICAgICAgIGlkID09ICJhbGwiXHJcbiAgICAgICAgICAgICAgPyBbXVxyXG4gICAgICAgICAgICAgIDogdGhpcy5zZWNyZXRfcmVjZWl2ZXIuZmlsdGVyKGl0ZW0gPT4gaXRlbVt0aGlzLm5vZGVfa2V5XSAhPSBpZCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICAvLyDkvKDpgJLkv6Hmga/nu5nniLbnu4Tku7ZcclxuICAgICAgdGhpcy4kZW1pdCgicmVtb3ZlQnRuIiwgdGhpcy5hZGRyZXNzZWUsIHRoaXMuQ2MsIHRoaXMuc2VjcmV0X3JlY2VpdmVyKTtcclxuICAgIH0sXHJcbiAgICAvLyDlj7Pkvqcg6YCa6K6v5b2VIOS4iuS4i+iHquWKqFxyXG4gICAgbW92ZVVwKHR5cGUpIHtcclxuICAgICAgaWYgKHR5cGUgPT0gInVwIikge1xyXG4gICAgICAgIHRoaXMubW92ZV91cCA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5tb3ZlX3VwID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIGNvbXB1dGVkOiB7XHJcbiAgICAvLyDlt6bkvqfmlbDmja5cclxuICAgIHNlbGZfZnJvbV9kYXRhKCkge1xyXG4gICAgICBsZXQgZnJvbV9hcnJheSA9IFsuLi50aGlzLmZyb21fZGF0YSwgLi4udGhpcy5zZWxmX2Zyb21dO1xyXG4gICAgICBmcm9tX2FycmF5LmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgaXRlbVt0aGlzLnBpZF0gPSAwO1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIGZyb21fYXJyYXk7XHJcbiAgICB9LFxyXG4gICAgLy8g5Y+z5L6n5pWw5o2uXHJcbiAgICBzZWxmX3RvX2RhdGEoKSB7XHJcbiAgICAgIGxldCB0b19hcnJheSA9IFsuLi50aGlzLnRvX2RhdGEsIC4uLnRoaXMuc2VsZl90b107XHJcbiAgICAgIHRvX2FycmF5LmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgaXRlbVt0aGlzLnBpZF0gPSAwO1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIHRvX2FycmF5O1xyXG4gICAgfSxcclxuICAgIC8vIOW3puS+p+iPnOWNleWQjVxyXG4gICAgZnJvbVRpdGxlKCkge1xyXG4gICAgICBsZXQgW3RleHRdID0gdGhpcy50aXRsZTtcclxuICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICB9LFxyXG4gICAgLy8g5Y+z5L6n6I+c5Y2V5ZCNXHJcbiAgICB0b1RpdGxlKCkge1xyXG4gICAgICBsZXQgWywgdGV4dF0gPSB0aGlzLnRpdGxlO1xyXG4gICAgICByZXR1cm4gdGV4dDtcclxuICAgIH0sXHJcbiAgICAvLyDlj7Pkvqfoj5zljZXlkI0yXHJcbiAgICB0b1RpdGxlU2Vjb25kKCkge1xyXG4gICAgICBsZXQgWywgLCB0ZXh0XSA9IHRoaXMudGl0bGU7XHJcbiAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgfSxcclxuICAgIC8vIOWPs+S+p+iPnOWNleWQjTNcclxuICAgIHRvVGl0bGVUaGlyZCgpIHtcclxuICAgICAgbGV0IFssICwgLCB0ZXh0XSA9IHRoaXMudGl0bGU7XHJcbiAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgfSxcclxuICAgIC8vIOS4iumDqOaMiemSruWQjVxyXG4gICAgZnJvbUJ1dHRvbigpIHtcclxuICAgICAgaWYgKHRoaXMuYnV0dG9uX3RleHQgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgW3RleHRdID0gdGhpcy5idXR0b25fdGV4dDtcclxuICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICB9LFxyXG4gICAgLy8g5LiL6YOo5oyJ6ZKu5ZCNXHJcbiAgICB0b0J1dHRvbigpIHtcclxuICAgICAgaWYgKHRoaXMuYnV0dG9uX3RleHQgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBbLCB0ZXh0XSA9IHRoaXMuYnV0dG9uX3RleHQ7XHJcbiAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgd2F0Y2g6IHtcclxuICAgIC8vIOW3puS+pyDnirbmgIHnm5HmtYtcclxuICAgIGZyb21fY2hlY2tfa2V5cyh2YWwpIHtcclxuICAgICAgaWYgKHZhbC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgLy8g56m/5qKt5oyJ6ZKu5piv5ZCm56aB55SoXHJcbiAgICAgICAgdGhpcy5mcm9tX2Rpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgLy8g5oC75Y2K6YCJ5piv5ZCm5byA5ZCvXHJcbiAgICAgICAgdGhpcy5mcm9tX2lzX2luZGV0ZXJtaW5hdGUgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyDmgLvlhajpgInmmK/lkKblvIDlkK8gLSDmoLnmja7pgInkuK3oioLngrnkuK3kuLrmoLnoioLngrnnmoTmlbDph4/mmK/lkKblkozmupDmlbDmja7plb/luqbnm7jnrYlcclxuICAgICAgICBsZXQgYWxsQ2hlY2sgPSB2YWwuZmlsdGVyKGl0ZW0gPT4gaXRlbVt0aGlzLnBpZF0gPT0gMCk7XHJcbiAgICAgICAgaWYgKGFsbENoZWNrLmxlbmd0aCA9PSB0aGlzLnNlbGZfZnJvbV9kYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgLy8g5YWz6Zet5Y2K6YCJIOW8gOWQr+WFqOmAiVxyXG4gICAgICAgICAgdGhpcy5mcm9tX2lzX2luZGV0ZXJtaW5hdGUgPSBmYWxzZTtcclxuICAgICAgICAgIHRoaXMuZnJvbV9jaGVja19hbGwgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmZyb21faXNfaW5kZXRlcm1pbmF0ZSA9IHRydWU7XHJcbiAgICAgICAgICB0aGlzLmZyb21fY2hlY2tfYWxsID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZnJvbV9kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5mcm9tX2lzX2luZGV0ZXJtaW5hdGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmZyb21fY2hlY2tfYWxsID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyDlj7Pkvqcg54q25oCB55uR5rWLXHJcbiAgICB0b19jaGVja19rZXlzKHZhbCkge1xyXG4gICAgICBpZiAodmFsLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAvLyDnqb/moq3mjInpkq7mmK/lkKbnpoHnlKhcclxuICAgICAgICB0aGlzLnRvX2Rpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgLy8g5oC75Y2K6YCJ5piv5ZCm5byA5ZCvXHJcbiAgICAgICAgdGhpcy50b19pc19pbmRldGVybWluYXRlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8g5oC75YWo6YCJ5piv5ZCm5byA5ZCvIC0g5qC55o2u6YCJ5Lit6IqC54K55Lit5Li65qC56IqC54K555qE5pWw6YeP5piv5ZCm5ZKM5rqQ5pWw5o2u6ZW/5bqm55u4562JXHJcbiAgICAgICAgbGV0IGFsbENoZWNrID0gdmFsLmZpbHRlcihpdGVtID0+IGl0ZW1bdGhpcy5waWRdID09IDApO1xyXG4gICAgICAgIGlmIChhbGxDaGVjay5sZW5ndGggPT0gdGhpcy5zZWxmX3RvX2RhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAvLyDlhbPpl63ljYrpgIkg5byA5ZCv5YWo6YCJXHJcbiAgICAgICAgICB0aGlzLnRvX2lzX2luZGV0ZXJtaW5hdGUgPSBmYWxzZTtcclxuICAgICAgICAgIHRoaXMudG9fY2hlY2tfYWxsID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy50b19pc19pbmRldGVybWluYXRlID0gdHJ1ZTtcclxuICAgICAgICAgIHRoaXMudG9fY2hlY2tfYWxsID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMudG9fZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudG9faXNfaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudG9fY2hlY2tfYWxsID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyDlt6bkvqcg5pWw5o2u562b6YCJXHJcbiAgICBmaWx0ZXJGcm9tKHZhbCkge1xyXG4gICAgICB0aGlzLiRyZWZzWyJmcm9tLXRyZWUiXS5maWx0ZXIodmFsKTtcclxuICAgIH0sXHJcbiAgICAvLyDlj7Pkvqcg5pWw5o2u562b6YCJXHJcbiAgICBmaWx0ZXJUbyh2YWwpIHtcclxuICAgICAgdGhpcy4kcmVmc1sidG8tdHJlZSJdLmZpbHRlcih2YWwpO1xyXG4gICAgfSxcclxuICAgIC8vIOmAmuiur+W9leaooeW8jyDlj7Mx562b6YCJXHJcbiAgICBmaWx0ZXJMaXN0Rmlyc3QobmV3dmFsLCBvbGR2YWwpIHtcclxuICAgICAgaWYgKG9sZHZhbCA9PSAiIikge1xyXG4gICAgICAgIHRoaXMuYXJjaGl2ZUZpcnN0ID0gdGhpcy5hZGRyZXNzZWU7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG5ld3ZhbCA9PSAiIikge1xyXG4gICAgICAgIHRoaXMuYWRkcmVzc2VlID0gdGhpcy5hcmNoaXZlRmlyc3Q7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IHJlZyA9IFJlZ0V4cChuZXd2YWwpO1xyXG4gICAgICB0aGlzLmFkZHJlc3NlZSA9IHRoaXMuYWRkcmVzc2VlLmZpbHRlcihpdGVtID0+IHJlZy50ZXN0KGl0ZW0ubGFiZWwpKTtcclxuICAgIH0sXHJcbiAgICAvLyDpgJrorq/lvZXmqKHlvI8g5Y+zMuetm+mAiVxyXG4gICAgZmlsdGVyTGlzdFNlY29uZChuZXd2YWwsIG9sZHZhbCkge1xyXG4gICAgICBpZiAob2xkdmFsID09ICIiKSB7XHJcbiAgICAgICAgdGhpcy5hcmNoaXZlU2Vjb25kID0gdGhpcy5DYztcclxuICAgICAgfVxyXG4gICAgICBpZiAobmV3dmFsID09ICIiKSB7XHJcbiAgICAgICAgdGhpcy5DYyA9IHRoaXMuYXJjaGl2ZVNlY29uZDtcclxuICAgICAgfVxyXG4gICAgICBsZXQgcmVnID0gUmVnRXhwKG5ld3ZhbCk7XHJcbiAgICAgIHRoaXMuQ2MgPSB0aGlzLkNjLmZpbHRlcihpdGVtID0+IHJlZy50ZXN0KGl0ZW0ubGFiZWwpKTtcclxuICAgIH0sXHJcbiAgICAvLyDpgJrorq/lvZXmqKHlvI8g5Y+zM+etm+mAiVxyXG4gICAgZmlsdGVyTGlzdFRoaXJkKG5ld3ZhbCwgb2xkdmFsKSB7XHJcbiAgICAgIGlmIChvbGR2YWwgPT0gIiIpIHtcclxuICAgICAgICB0aGlzLmFyY2hpdmVUaGlyZCA9IHRoaXMuc2VjcmV0X3JlY2VpdmVyO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChuZXd2YWwgPT0gIiIpIHtcclxuICAgICAgICB0aGlzLnNlY3JldF9yZWNlaXZlciA9IHRoaXMuYXJjaGl2ZVRoaXJkO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCByZWcgPSBSZWdFeHAobmV3dmFsKTtcclxuICAgICAgdGhpcy5zZWNyZXRfcmVjZWl2ZXIgPSB0aGlzLnNlY3JldF9yZWNlaXZlci5maWx0ZXIoaXRlbSA9PlxyXG4gICAgICAgIHJlZy50ZXN0KGl0ZW0ubGFiZWwpXHJcbiAgICAgICk7XHJcbiAgICB9LFxyXG4gICAgICAvLyDnm5Hop4bpu5jorqTpgInkuK1cclxuICAgIGRlZmF1bHRDaGVja2VkS2V5cyh2YWwpe1xyXG4gICAgICBpZih2YWwgJiYgdGhpcy5kZWZhdWx0VHJhbnNmZXIpe1xyXG4gICAgICAgIHRoaXMuJG5leHRUaWNrKCgpPT57XHJcbiAgICAgICAgICB0aGlzLmFkZFRvQWltcygpXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuPFwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIHNjb3BlZD5cclxuQGltcG9ydCAiLi9jbGVhci5jc3MiO1xyXG4uZWwtdHJlZSB7XHJcbiAgbWluLXdpZHRoOiAxMDAlO1xyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4udHJhbnNmZXIge1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG59XHJcblxyXG4udHJhbnNmZXItbGVmdCB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRvcDogMDtcclxuICBsZWZ0OiAwO1xyXG59XHJcblxyXG4udHJhbnNmZXItcmlnaHQge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB0b3A6IDA7XHJcbiAgcmlnaHQ6IDA7XHJcbn1cclxuXHJcbi50cmFuc2Zlci1yaWdodC1pdGVtIHtcclxuICBoZWlnaHQ6IGNhbGMoKDEwMCUgLSA0MXB4KSAvIDIpO1xyXG59XHJcblxyXG4udHJhbnNmZXItcmlnaHQtc21hbGwge1xyXG4gIGhlaWdodDogNDFweDtcclxufVxyXG5cclxuLnRyYW5zZmVyLW1haW4ge1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA0MXB4KTtcclxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gIG92ZXJmbG93OiBhdXRvO1xyXG59XHJcblxyXG4udHJhbnNmZXItbGVmdCxcclxuLnRyYW5zZmVyLXJpZ2h0IHtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjZWJlZWY1O1xyXG4gIHdpZHRoOiA0MCU7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbn1cclxuXHJcbi50cmFuc2Zlci1jZW50ZXIge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB0b3A6IDUwJTtcclxuICBsZWZ0OiA0MCU7XHJcbiAgd2lkdGg6IDIwJTtcclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG4udHJhbnNmZXItY2VudGVyLWl0ZW0ge1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxufVxyXG5cclxuLmFkZHJlc3MtbGlzdC1jZW50ZXIge1xyXG4gIGhlaWdodDogMTAwJTtcclxufVxyXG5cclxuLmFkZHJlc3MtbGlzdC1jZW50ZXIgPiAudHJhbnNmZXItY2VudGVyLWl0ZW0ge1xyXG4gIGhlaWdodDogNTAlO1xyXG4gIHBhZGRpbmc6IDcwcHggMTBweCAwO1xyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxufVxyXG5cclxuLnRyYW5zZmVyLXRpdGxlIHtcclxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2ViZWVmNTtcclxuICBwYWRkaW5nOiAwIDE1cHg7XHJcbiAgaGVpZ2h0OiA0MHB4O1xyXG4gIGxpbmUtaGVpZ2h0OiA0MHB4O1xyXG4gIGNvbG9yOiAjMzMzO1xyXG4gIGZvbnQtc2l6ZTogMTZweDtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmN2ZhO1xyXG59XHJcblxyXG4udHJhbnNmZXItdGl0bGUgLmVsLWNoZWNrYm94IHtcclxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XHJcbn1cclxuXHJcbi5maWx0ZXItdHJlZSB7XHJcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxufVxyXG5cclxuLmFkZHJlc3MtbGlzdC11bCB7XHJcbiAgcGFkZGluZy1ib3R0b206IDIwcHg7XHJcbn1cclxuXHJcbi5hZGRyZXNzLWxpc3QtbGkge1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBwYWRkaW5nOiA0cHggMjRweCA0cHggNHB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcclxuICBvdmVyZmxvdzogaGlkZGVuOyAvKui2heWHuumDqOWIhumakOiXjyovXHJcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsgLyrkuI3mjaLooYwqL1xyXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOyAvKui2heWHuumDqOWIhuaWh+Wtl+S7pS4uLuaYvuekuiovXHJcbn1cclxuXHJcbi5hZGRyZXNzLWxpc3QtbGk6aG92ZXIge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWY3ZmE7XHJcbn1cclxuXHJcbi5hZGRyZXNzLWxpc3QtbGk6aG92ZXIgLmFkZHJlc3MtbGlzdC1kZWwge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcblxyXG4uYWRkcmVzcy1saXN0LWRlbCB7XHJcbiAgZGlzcGxheTogbm9uZTtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgdG9wOiA1MCU7XHJcbiAgcmlnaHQ6IDJweDtcclxuICBtYXJnaW4tdG9wOiAtMTBweDtcclxuICB3aWR0aDogMjBweDtcclxuICBoZWlnaHQ6IDIwcHg7XHJcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XHJcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmVmMGYwO1xyXG4gIGNvbG9yOiAjZjU2YzZjO1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG5cclxuLnUtY2xlYXIge1xyXG4gIGZsb2F0OiByaWdodDtcclxuICBjb2xvcjogIzY3YzIzYTtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcblxyXG4ubW92ZV91cF9pbWcge1xyXG4gIGZsb2F0OiByaWdodDtcclxuICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gIHdpZHRoOiAyMHB4O1xyXG4gIGhlaWdodDogMjBweDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuXHJcbi5tb3ZlX2Rvd25faW1nIHtcclxuICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xyXG59XHJcbjwvc3R5bGU+XHJcblxyXG4nXSxzb3VyY2VSb290OiIifV0pfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4oZSx0KXt2YXIgbj1lWzFdfHwiIixyPWVbM107aWYoIXIpcmV0dXJuIG47aWYodCYmImZ1bmN0aW9uIj09dHlwZW9mIGJ0b2Epe3ZhciBpPWZ1bmN0aW9uKGUpe3JldHVybiIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShlKSkpKSsiICovIn0ocik7cmV0dXJuW25dLmNvbmNhdChyLnNvdXJjZXMubWFwKGZ1bmN0aW9uKGUpe3JldHVybiIvKiMgc291cmNlVVJMPSIrci5zb3VyY2VSb290K2UrIiAqLyJ9KSkuY29uY2F0KFtpXSkuam9pbigiXG4iKX1yZXR1cm5bbl0uam9pbigiXG4iKX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107cmV0dXJuIHQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odCl7dmFyIHI9bih0LGUpO3JldHVybiB0WzJdPyJAbWVkaWEgIit0WzJdKyJ7IityKyJ9IjpyfSkuam9pbigiIil9LHQuaT1mdW5jdGlvbihlLG4peyJzdHJpbmciPT10eXBlb2YgZSYmKGU9W1tudWxsLGUsIiJdXSk7Zm9yKHZhciByPXt9LGk9MDtpPHRoaXMubGVuZ3RoO2krKyl7dmFyIG89dGhpc1tpXVswXTsibnVtYmVyIj09dHlwZW9mIG8mJihyW29dPSEwKX1mb3IoaT0wO2k8ZS5sZW5ndGg7aSsrKXt2YXIgcz1lW2ldOyJudW1iZXIiPT10eXBlb2Ygc1swXSYmcltzWzBdXXx8KG4mJiFzWzJdP3NbMl09bjpuJiYoc1syXT0iKCIrc1syXSsiKSBhbmQgKCIrbisiKSIpLHQucHVzaChzKSl9fSx0fX0sZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIHIoZSl7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kyspe3ZhciBuPWVbdF0scj11W24uaWRdO2lmKHIpe3IucmVmcysrO2Zvcih2YXIgaT0wO2k8ci5wYXJ0cy5sZW5ndGg7aSsrKXIucGFydHNbaV0obi5wYXJ0c1tpXSk7Zm9yKDtpPG4ucGFydHMubGVuZ3RoO2krKylyLnBhcnRzLnB1c2gobyhuLnBhcnRzW2ldKSk7ci5wYXJ0cy5sZW5ndGg+bi5wYXJ0cy5sZW5ndGgmJihyLnBhcnRzLmxlbmd0aD1uLnBhcnRzLmxlbmd0aCl9ZWxzZXt2YXIgcz1bXTtmb3IoaT0wO2k8bi5wYXJ0cy5sZW5ndGg7aSsrKXMucHVzaChvKG4ucGFydHNbaV0pKTt1W24uaWRdPXtpZDpuLmlkLHJlZnM6MSxwYXJ0czpzfX19fWZ1bmN0aW9uIGkoKXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHlsZSIpO3JldHVybiBlLnR5cGU9InRleHQvY3NzIixjLmFwcGVuZENoaWxkKGUpLGV9ZnVuY3Rpb24gbyhlKXt2YXIgdCxuLHI9ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcigic3R5bGVbIit2Kyd+PSInK2UuaWQrJyJdJyk7aWYocil7aWYoaClyZXR1cm4gcDtyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocil9aWYoZyl7dmFyIG89ZisrO3I9ZHx8KGQ9aSgpKSx0PXMuYmluZChudWxsLHIsbywhMSksbj1zLmJpbmQobnVsbCxyLG8sITApfWVsc2Ugcj1pKCksdD1mdW5jdGlvbihlLHQpe3ZhciBuPXQuY3NzLHI9dC5tZWRpYSxpPXQuc291cmNlTWFwO2lmKHImJmUuc2V0QXR0cmlidXRlKCJtZWRpYSIsciksbS5zc3JJZCYmZS5zZXRBdHRyaWJ1dGUodix0LmlkKSxpJiYobis9IlxuLyojIHNvdXJjZVVSTD0iK2kuc291cmNlc1swXSsiICovIixuKz0iXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LCIrYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoaSkpKSkrIiAqLyIpLGUuc3R5bGVTaGVldCllLnN0eWxlU2hlZXQuY3NzVGV4dD1uO2Vsc2V7Zm9yKDtlLmZpcnN0Q2hpbGQ7KWUucmVtb3ZlQ2hpbGQoZS5maXJzdENoaWxkKTtlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG4pKX19LmJpbmQobnVsbCxyKSxuPWZ1bmN0aW9uKCl7ci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHIpfTtyZXR1cm4gdChlKSxmdW5jdGlvbihyKXtpZihyKXtpZihyLmNzcz09PWUuY3NzJiZyLm1lZGlhPT09ZS5tZWRpYSYmci5zb3VyY2VNYXA9PT1lLnNvdXJjZU1hcClyZXR1cm47dChlPXIpfWVsc2UgbigpfX1mdW5jdGlvbiBzKGUsdCxuLHIpe3ZhciBpPW4/IiI6ci5jc3M7aWYoZS5zdHlsZVNoZWV0KWUuc3R5bGVTaGVldC5jc3NUZXh0PXkodCxpKTtlbHNle3ZhciBvPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGkpLHM9ZS5jaGlsZE5vZGVzO3NbdF0mJmUucmVtb3ZlQ2hpbGQoc1t0XSkscy5sZW5ndGg/ZS5pbnNlcnRCZWZvcmUobyxzW3RdKTplLmFwcGVuZENoaWxkKG8pfX12YXIgYT0idW5kZWZpbmVkIiE9dHlwZW9mIGRvY3VtZW50O2lmKCJ1bmRlZmluZWQiIT10eXBlb2YgREVCVUcmJkRFQlVHJiYhYSl0aHJvdyBuZXcgRXJyb3IoInZ1ZS1zdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudC4gVXNlIHsgdGFyZ2V0OiAnbm9kZScgfSBpbiB5b3VyIFdlYnBhY2sgY29uZmlnIHRvIGluZGljYXRlIGEgc2VydmVyLXJlbmRlcmluZyBlbnZpcm9ubWVudC4iKTt2YXIgbD1uKDgpLHU9e30sYz1hJiYoZG9jdW1lbnQuaGVhZHx8ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKVswXSksZD1udWxsLGY9MCxoPSExLHA9ZnVuY3Rpb24oKXt9LG09bnVsbCx2PSJkYXRhLXZ1ZS1zc3ItaWQiLGc9InVuZGVmaW5lZCIhPXR5cGVvZiBuYXZpZ2F0b3ImJi9tc2llIFs2LTldXGIvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4saSl7aD1uLG09aXx8e307dmFyIG89bChlLHQpO3JldHVybiByKG8pLGZ1bmN0aW9uKHQpe2Zvcih2YXIgbj1bXSxpPTA7aTxvLmxlbmd0aDtpKyspe3ZhciBzPW9baV07KGE9dVtzLmlkXSkucmVmcy0tLG4ucHVzaChhKX10P3Iobz1sKGUsdCkpOm89W107Zm9yKGk9MDtpPG4ubGVuZ3RoO2krKyl7dmFyIGE7aWYoMD09PShhPW5baV0pLnJlZnMpe2Zvcih2YXIgYz0wO2M8YS5wYXJ0cy5sZW5ndGg7YysrKWEucGFydHNbY10oKTtkZWxldGUgdVthLmlkXX19fX07dmFyIHk9ZnVuY3Rpb24oKXt2YXIgZT1bXTtyZXR1cm4gZnVuY3Rpb24odCxuKXtyZXR1cm4gZVt0XT1uLGUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oIlxuIil9fSgpfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1bXSxyPXt9LGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG89dFtpXSxzPW9bMF0sYT17aWQ6ZSsiOiIraSxjc3M6b1sxXSxtZWRpYTpvWzJdLHNvdXJjZU1hcDpvWzNdfTtyW3NdP3Jbc10ucGFydHMucHVzaChhKTpuLnB1c2gocltzXT17aWQ6cyxwYXJ0czpbYV19KX1yZXR1cm4gbn19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt2YXIgcyxhPWU9ZXx8e30sbD10eXBlb2YgZS5kZWZhdWx0OyJvYmplY3QiIT09bCYmImZ1bmN0aW9uIiE9PWx8fChzPWUsYT1lLmRlZmF1bHQpO3ZhciB1LGM9ImZ1bmN0aW9uIj09dHlwZW9mIGE/YS5vcHRpb25zOmE7aWYodCYmKGMucmVuZGVyPXQucmVuZGVyLGMuc3RhdGljUmVuZGVyRm5zPXQuc3RhdGljUmVuZGVyRm5zLGMuX2NvbXBpbGVkPSEwKSxuJiYoYy5mdW5jdGlvbmFsPSEwKSxpJiYoYy5fc2NvcGVJZD1pKSxvPyh1PWZ1bmN0aW9uKGUpeyhlPWV8fHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fHx0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCl8fCJ1bmRlZmluZWQiPT10eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfX3x8KGU9X19WVUVfU1NSX0NPTlRFWFRfXyksciYmci5jYWxsKHRoaXMsZSksZSYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChvKX0sYy5fc3NyUmVnaXN0ZXI9dSk6ciYmKHU9ciksdSl7dmFyIGQ9Yy5mdW5jdGlvbmFsLGY9ZD9jLnJlbmRlcjpjLmJlZm9yZUNyZWF0ZTtkPyhjLl9pbmplY3RTdHlsZXM9dSxjLnJlbmRlcj1mdW5jdGlvbihlLHQpe3JldHVybiB1LmNhbGwodCksZihlLHQpfSk6Yy5iZWZvcmVDcmVhdGU9Zj9bXS5jb25jYXQoZix1KTpbdV19cmV0dXJue2VzTW9kdWxlOnMsZXhwb3J0czphLG9wdGlvbnM6Y319fSxmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQscj1lLl9zZWxmLl9jfHx0O3JldHVybiByKCJkaXYiLHtzdGF0aWNDbGFzczoidHJhbnNmZXIiLHN0eWxlOnt3aWR0aDplLndpZHRoLGhlaWdodDplLmhlaWdodH19LFsidHJhbnNmZXIiPT1lLm1vZGU/W3IoImRpdiIse3N0YXRpY0NsYXNzOiJ0cmFuc2Zlci1sZWZ0In0sW3IoImgzIix7c3RhdGljQ2xhc3M6InRyYW5zZmVyLXRpdGxlIn0sW3IoImVsLWNoZWNrYm94Iix7YXR0cnM6e2luZGV0ZXJtaW5hdGU6ZS5mcm9tX2lzX2luZGV0ZXJtaW5hdGV9LG9uOntjaGFuZ2U6ZS5mcm9tQWxsQm94Q2hhbmdlfSxtb2RlbDp7dmFsdWU6ZS5mcm9tX2NoZWNrX2FsbCxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmZyb21fY2hlY2tfYWxsPXR9LGV4cHJlc3Npb246ImZyb21fY2hlY2tfYWxsIn19KSxlLl92KCIgIikscigic3BhbiIsW2UuX3YoZS5fcyhlLmZyb21UaXRsZSkpXSldLDEpLGUuX3YoIiAiKSxyKCJkaXYiLHtzdGF0aWNDbGFzczoidHJhbnNmZXItbWFpbiJ9LFtlLmZpbHRlcj9yKCJlbC1pbnB1dCIse3N0YXRpY0NsYXNzOiJmaWx0ZXItdHJlZSIsYXR0cnM6e3BsYWNlaG9sZGVyOmUucGxhY2Vob2xkZXIsc2l6ZToic21hbGwifSxtb2RlbDp7dmFsdWU6ZS5maWx0ZXJGcm9tLGNhbGxiYWNrOmZ1bmN0aW9uKHQpe2UuZmlsdGVyRnJvbT10fSxleHByZXNzaW9uOiJmaWx0ZXJGcm9tIn19KTplLl9lKCksZS5fdigiICIpLHIoImVsLXRyZWUiLHtyZWY6ImZyb20tdHJlZSIsYXR0cnM6e2RhdGE6ZS5zZWxmX2Zyb21fZGF0YSwic2hvdy1jaGVja2JveCI6IiIsIm5vZGUta2V5IjplLm5vZGVfa2V5LCJkZWZhdWx0LWV4cGFuZGVkLWtleXMiOmUuZnJvbV9leHBhbmRlZF9rZXlzLHByb3BzOmUuZGVmYXVsdFByb3BzLCJmaWx0ZXItbm9kZS1tZXRob2QiOmUuZmlsdGVyTm9kZUZyb20sImRlZmF1bHQtZXhwYW5kLWFsbCI6ZS5vcGVuQWxsLCJyZW5kZXItY29udGVudCI6ZS5yZW5kZXJDb250ZW50LCJkZWZhdWx0LWNoZWNrZWQta2V5cyI6ZS5kZWZhdWx0Q2hlY2tlZEtleXN9LG9uOntjaGVjazplLmZyb21UcmVlQ2hlY2tlZH19KV0sMSldKSxlLl92KCIgIikscigiZGl2Iix7c3RhdGljQ2xhc3M6InRyYW5zZmVyLWNlbnRlciJ9LFtlLmJ1dHRvbl90ZXh0P1tyKCJwIix7c3RhdGljQ2xhc3M6InRyYW5zZmVyLWNlbnRlci1pdGVtIn0sW3IoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5IixkaXNhYmxlZDplLmZyb21fZGlzYWJsZWR9LG9uOntjbGljazplLmFkZFRvQWltc319LFtlLl92KCJcbiAgICAgICAgICAgICIrZS5fcyhlLmZyb21CdXR0b258fCLmt7vliqAiKSsiXG4gICAgICAgICAgICAiKSxyKCJpIix7c3RhdGljQ2xhc3M6ImVsLWljb24tYXJyb3ctcmlnaHQifSldKV0sMSksZS5fdigiICIpLHIoInAiLHtzdGF0aWNDbGFzczoidHJhbnNmZXItY2VudGVyLWl0ZW0ifSxbcigiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InByaW1hcnkiLGRpc2FibGVkOmUudG9fZGlzYWJsZWQsaWNvbjoiZWwtaWNvbi1hcnJvdy1sZWZ0In0sb246e2NsaWNrOmUucmVtb3ZlVG9Tb3VyY2V9fSxbZS5fdihlLl9zKGUudG9CdXR0b258fCLnp7vpmaQiKSldKV0sMSldOltyKCJwIix7c3RhdGljQ2xhc3M6InRyYW5zZmVyLWNlbnRlci1pdGVtIn0sW3IoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5IixpY29uOiJlbC1pY29uLWFycm93LXJpZ2h0IixjaXJjbGU6IiIsZGlzYWJsZWQ6ZS5mcm9tX2Rpc2FibGVkfSxvbjp7Y2xpY2s6ZS5hZGRUb0FpbXN9fSldLDEpLGUuX3YoIiAiKSxyKCJwIix7c3RhdGljQ2xhc3M6InRyYW5zZmVyLWNlbnRlci1pdGVtIn0sW3IoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5IixkaXNhYmxlZDplLnRvX2Rpc2FibGVkLGljb246ImVsLWljb24tYXJyb3ctbGVmdCIsY2lyY2xlOiIifSxvbjp7Y2xpY2s6ZS5yZW1vdmVUb1NvdXJjZX19KV0sMSldXSwyKSxlLl92KCIgIikscigiZGl2Iix7c3RhdGljQ2xhc3M6InRyYW5zZmVyLXJpZ2h0In0sW3IoImgzIix7c3RhdGljQ2xhc3M6InRyYW5zZmVyLXRpdGxlIn0sW3IoImVsLWNoZWNrYm94Iix7YXR0cnM6e2luZGV0ZXJtaW5hdGU6ZS50b19pc19pbmRldGVybWluYXRlfSxvbjp7Y2hhbmdlOmUudG9BbGxCb3hDaGFuZ2V9LG1vZGVsOnt2YWx1ZTplLnRvX2NoZWNrX2FsbCxjYWxsYmFjazpmdW5jdGlvbih0KXtlLnRvX2NoZWNrX2FsbD10fSxleHByZXNzaW9uOiJ0b19jaGVja19hbGwifX0pLGUuX3YoIiAiKSxyKCJzcGFuIixbZS5fdihlLl9zKGUudG9UaXRsZSkpXSldLDEpLGUuX3YoIiAiKSxyKCJkaXYiLHtzdGF0aWNDbGFzczoidHJhbnNmZXItbWFpbiJ9LFtlLmZpbHRlcj9yKCJlbC1pbnB1dCIse3N0YXRpY0NsYXNzOiJmaWx0ZXItdHJlZSIsYXR0cnM6e3BsYWNlaG9sZGVyOmUucGxhY2Vob2xkZXIsc2l6ZToic21hbGwifSxtb2RlbDp7dmFsdWU6ZS5maWx0ZXJUbyxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmZpbHRlclRvPXR9LGV4cHJlc3Npb246ImZpbHRlclRvIn19KTplLl9lKCksZS5fdigiICIpLHIoImVsLXRyZWUiLHtyZWY6InRvLXRyZWUiLGF0dHJzOntzbG90OiJ0byIsZGF0YTplLnNlbGZfdG9fZGF0YSwic2hvdy1jaGVja2JveCI6IiIsIm5vZGUta2V5IjplLm5vZGVfa2V5LCJkZWZhdWx0LWV4cGFuZGVkLWtleXMiOmUudG9fZXhwYW5kZWRfa2V5cyxwcm9wczplLmRlZmF1bHRQcm9wcywiZmlsdGVyLW5vZGUtbWV0aG9kIjplLmZpbHRlck5vZGVUbywiZGVmYXVsdC1leHBhbmQtYWxsIjplLm9wZW5BbGwsInJlbmRlci1jb250ZW50IjplLnJlbmRlckNvbnRlbnR9LG9uOntjaGVjazplLnRvVHJlZUNoZWNrZWR9LHNsb3Q6InRvIn0pXSwxKV0pXToiYWRkcmVzc0xpc3QiPT1lLm1vZGU/W3IoImRpdiIse3N0YXRpY0NsYXNzOiJ0cmFuc2Zlci1sZWZ0In0sW3IoImgzIix7c3RhdGljQ2xhc3M6InRyYW5zZmVyLXRpdGxlIn0sW3IoImVsLWNoZWNrYm94Iix7YXR0cnM6e2luZGV0ZXJtaW5hdGU6ZS5mcm9tX2lzX2luZGV0ZXJtaW5hdGV9LG9uOntjaGFuZ2U6ZS5mcm9tQWxsQm94Q2hhbmdlfSxtb2RlbDp7dmFsdWU6ZS5mcm9tX2NoZWNrX2FsbCxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmZyb21fY2hlY2tfYWxsPXR9LGV4cHJlc3Npb246ImZyb21fY2hlY2tfYWxsIn19KSxlLl92KCIgIikscigic3BhbiIsW2UuX3YoZS5fcyhlLmZyb21UaXRsZSkpXSldLDEpLGUuX3YoIiAiKSxyKCJkaXYiLHtzdGF0aWNDbGFzczoidHJhbnNmZXItbWFpbiJ9LFtlLmZpbHRlcj9yKCJlbC1pbnB1dCIse3N0YXRpY0NsYXNzOiJmaWx0ZXItdHJlZSIsYXR0cnM6e3BsYWNlaG9sZGVyOmUucGxhY2Vob2xkZXIsc2l6ZToic21hbGwifSxtb2RlbDp7dmFsdWU6ZS5maWx0ZXJGcm9tLGNhbGxiYWNrOmZ1bmN0aW9uKHQpe2UuZmlsdGVyRnJvbT10fSxleHByZXNzaW9uOiJmaWx0ZXJGcm9tIn19KTplLl9lKCksZS5fdigiICIpLHIoImVsLXRyZWUiLHtyZWY6ImZyb20tdHJlZSIsYXR0cnM6e2RhdGE6ZS5zZWxmX2Zyb21fZGF0YSwic2hvdy1jaGVja2JveCI6IiIsIm5vZGUta2V5IjplLm5vZGVfa2V5LCJkZWZhdWx0LWV4cGFuZGVkLWtleXMiOmUuZnJvbV9leHBhbmRlZF9rZXlzLHByb3BzOmUuZGVmYXVsdFByb3BzLCJmaWx0ZXItbm9kZS1tZXRob2QiOmUuZmlsdGVyTm9kZUZyb20sImRlZmF1bHQtZXhwYW5kLWFsbCI6ZS5vcGVuQWxsLCJyZW5kZXItY29udGVudCI6ZS5yZW5kZXJDb250ZW50fSxvbjp7Y2hlY2s6ZS5mcm9tVHJlZUNoZWNrZWR9fSldLDEpXSksZS5fdigiICIpLHIoImRpdiIse3N0YXRpY0NsYXNzOiJ0cmFuc2Zlci1jZW50ZXIgYWRkcmVzcy1saXN0LWNlbnRlciJ9LFtyKCJwIix7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6IWUubW92ZV91cCxleHByZXNzaW9uOiIhbW92ZV91cCJ9XSxzdGF0aWNDbGFzczoidHJhbnNmZXItY2VudGVyLWl0ZW0ifSxbcigiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InByaW1hcnkiLGljb246ImVsLWljb24tYXJyb3ctcmlnaHQiLGNpcmNsZToiIixkaXNhYmxlZDplLmZyb21fZGlzYWJsZWR9LG9uOntjbGljazpmdW5jdGlvbih0KXtlLmFkZHJlc3NMaXN0VHJhbnNmZXIoMCl9fX0pXSwxKSxlLl92KCIgIikscigicCIse3N0YXRpY0NsYXNzOiJ0cmFuc2Zlci1jZW50ZXItaXRlbSJ9LFtyKCJlbC1idXR0b24iLHthdHRyczp7dHlwZToicHJpbWFyeSIsZGlzYWJsZWQ6ZS5mcm9tX2Rpc2FibGVkLGljb246ImVsLWljb24tYXJyb3ctcmlnaHQiLGNpcmNsZToiIn0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuYWRkcmVzc0xpc3RUcmFuc2ZlcigxKX19fSldLDEpLGUuX3YoIiAiKSxyKCJwIix7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6ZS5tb3ZlX3VwLGV4cHJlc3Npb246Im1vdmVfdXAifV0sc3RhdGljQ2xhc3M6InRyYW5zZmVyLWNlbnRlci1pdGVtIn0sW3IoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5IixkaXNhYmxlZDplLmZyb21fZGlzYWJsZWQsaWNvbjoiZWwtaWNvbi1hcnJvdy1yaWdodCIsY2lyY2xlOiIifSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5hZGRyZXNzTGlzdFRyYW5zZmVyKDIpfX19KV0sMSldKSxlLl92KCIgIikscigiZGl2Iix7c3RhdGljQ2xhc3M6InRyYW5zZmVyLXJpZ2h0In0sW3IoImRpdiIse3N0YXRpY0NsYXNzOiJ0cmFuc2Zlci1yaWdodC1pdGVtIixjbGFzczp7InRyYW5zZmVyLXJpZ2h0LXNtYWxsIjplLm1vdmVfdXB9fSxbcigiaDMiLHtzdGF0aWNDbGFzczoidHJhbnNmZXItdGl0bGUifSxbcigic3BhbiIsW2UuX3YoZS5fcyhlLnRvVGl0bGUpKV0pLGUuX3YoIiAiKSxlLm1vdmVfdXA/cigiaW1nIix7c3RhdGljQ2xhc3M6Im1vdmVfdXBfaW1nIG1vdmVfZG93bl9pbWciLGF0dHJzOntzcmM6bigxKSxhbHQ6IiJ9LG9uOntjbGljazpmdW5jdGlvbih0KXtlLm1vdmVVcCgiZG93biIpfX19KTpyKCJzcGFuIix7c3RhdGljQ2xhc3M6InUtY2xlYXIiLG9uOntjbGljazpmdW5jdGlvbih0KXtlLmNsZWFyTGlzdCgwLCJhbGwiKX19fSxbZS5fdigi5riF56m6IildKV0pLGUuX3YoIiAiKSxlLm1vdmVfdXA/ZS5fZSgpOnIoImRpdiIse3N0YXRpY0NsYXNzOiJ0cmFuc2Zlci1tYWluIn0sW2UuZmlsdGVyP3IoImVsLWlucHV0Iix7c3RhdGljQ2xhc3M6ImZpbHRlci10cmVlIixhdHRyczp7cGxhY2Vob2xkZXI6ZS5wbGFjZWhvbGRlcixzaXplOiJzbWFsbCJ9LG1vZGVsOnt2YWx1ZTplLmZpbHRlckxpc3RGaXJzdCxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmZpbHRlckxpc3RGaXJzdD10fSxleHByZXNzaW9uOiJmaWx0ZXJMaXN0Rmlyc3QifX0pOmUuX2UoKSxlLl92KCIgIikscigidWwiLHtzdGF0aWNDbGFzczoiYWRkcmVzcy1saXN0LXVsIn0sZS5fbChlLmFkZHJlc3NlZSxmdW5jdGlvbih0KXtyZXR1cm4gcigibGkiLHtrZXk6dFtlLm5vZGVfa2V5XSxzdGF0aWNDbGFzczoiYWRkcmVzcy1saXN0LWxpIn0sW3IoImxhYmVsIixbZS5fdihlLl9zKHRbZS5kZWZhdWx0UHJvcHMubGFiZWxdKStlLl9zKHQuRW1haWwpKV0pLGUuX3YoIiAiKSxyKCJpIix7c3RhdGljQ2xhc3M6ImFkZHJlc3MtbGlzdC1kZWwiLG9uOntjbGljazpmdW5jdGlvbihuKXtlLmNsZWFyTGlzdCgwLHRbZS5ub2RlX2tleV0pfX19LFtlLl92KCJ4IildKV0pfSkpXSwxKV0pLGUuX3YoIiAiKSxyKCJkaXYiLHtzdGF0aWNDbGFzczoidHJhbnNmZXItcmlnaHQtaXRlbSJ9LFtyKCJoMyIse3N0YXRpY0NsYXNzOiJ0cmFuc2Zlci10aXRsZSJ9LFtyKCJzcGFuIixbZS5fdihlLl9zKGUudG9UaXRsZVNlY29uZHx8IuaKhOmAgeS6uiIpKV0pLGUuX3YoIiAiKSxyKCJzcGFuIix7c3RhdGljQ2xhc3M6InUtY2xlYXIiLG9uOntjbGljazpmdW5jdGlvbih0KXtlLmNsZWFyTGlzdCgxLCJhbGwiKX19fSxbZS5fdigi5riF56m6IildKV0pLGUuX3YoIiAiKSxyKCJkaXYiLHtzdGF0aWNDbGFzczoidHJhbnNmZXItbWFpbiJ9LFtlLmZpbHRlcj9yKCJlbC1pbnB1dCIse3N0YXRpY0NsYXNzOiJmaWx0ZXItdHJlZSIsYXR0cnM6e3BsYWNlaG9sZGVyOmUucGxhY2Vob2xkZXIsc2l6ZToic21hbGwifSxtb2RlbDp7dmFsdWU6ZS5maWx0ZXJMaXN0U2Vjb25kLGNhbGxiYWNrOmZ1bmN0aW9uKHQpe2UuZmlsdGVyTGlzdFNlY29uZD10fSxleHByZXNzaW9uOiJmaWx0ZXJMaXN0U2Vjb25kIn19KTplLl9lKCksZS5fdigiICIpLHIoInVsIix7c3RhdGljQ2xhc3M6ImFkZHJlc3MtbGlzdC11bCJ9LGUuX2woZS5DYyxmdW5jdGlvbih0KXtyZXR1cm4gcigibGkiLHtrZXk6dFtlLm5vZGVfa2V5XSxzdGF0aWNDbGFzczoiYWRkcmVzcy1saXN0LWxpIn0sW3IoImxhYmVsIixbZS5fdihlLl9zKHRbZS5kZWZhdWx0UHJvcHMubGFiZWxdKStlLl9zKHQuRW1haWwpKV0pLGUuX3YoIiAiKSxyKCJpIix7c3RhdGljQ2xhc3M6ImFkZHJlc3MtbGlzdC1kZWwiLG9uOntjbGljazpmdW5jdGlvbihuKXtlLmNsZWFyTGlzdCgxLHRbZS5ub2RlX2tleV0pfX19LFtlLl92KCJ4IildKV0pfSkpXSwxKV0pLGUuX3YoIiAiKSxyKCJkaXYiLHtzdGF0aWNDbGFzczoidHJhbnNmZXItcmlnaHQtaXRlbSIsY2xhc3M6eyJ0cmFuc2Zlci1yaWdodC1zbWFsbCI6IWUubW92ZV91cH19LFtyKCJoMyIse3N0YXRpY0NsYXNzOiJ0cmFuc2Zlci10aXRsZSJ9LFtyKCJzcGFuIixbZS5fdihlLl9zKGUudG9UaXRsZVRoaXJkfHwi5a+G6YCB5Lq6IikpXSksZS5fdigiICIpLGUubW92ZV91cD9yKCJzcGFuIix7c3RhdGljQ2xhc3M6InUtY2xlYXIiLG9uOntjbGljazpmdW5jdGlvbih0KXtlLmNsZWFyTGlzdCgyLCJhbGwiKX19fSxbZS5fdigi5riF56m6IildKTpyKCJpbWciLHtzdGF0aWNDbGFzczoibW92ZV91cF9pbWciLGF0dHJzOntzcmM6bigxKSxhbHQ6IiJ9LG9uOntjbGljazpmdW5jdGlvbih0KXtlLm1vdmVVcCgidXAiKX19fSldKSxlLl92KCIgIiksZS5tb3ZlX3VwP3IoImRpdiIse3N0YXRpY0NsYXNzOiJ0cmFuc2Zlci1tYWluIn0sW2UuZmlsdGVyP3IoImVsLWlucHV0Iix7c3RhdGljQ2xhc3M6ImZpbHRlci10cmVlIixhdHRyczp7cGxhY2Vob2xkZXI6ZS5wbGFjZWhvbGRlcixzaXplOiJzbWFsbCJ9LG1vZGVsOnt2YWx1ZTplLmZpbHRlckxpc3RUaGlyZCxjYWxsYmFjazpmdW5jdGlvbih0KXtlLmZpbHRlckxpc3RUaGlyZD10fSxleHByZXNzaW9uOiJmaWx0ZXJMaXN0VGhpcmQifX0pOmUuX2UoKSxlLl92KCIgIikscigidWwiLHtzdGF0aWNDbGFzczoiYWRkcmVzcy1saXN0LXVsIn0sZS5fbChlLnNlY3JldF9yZWNlaXZlcixmdW5jdGlvbih0KXtyZXR1cm4gcigibGkiLHtrZXk6dFtlLm5vZGVfa2V5XSxzdGF0aWNDbGFzczoiYWRkcmVzcy1saXN0LWxpIn0sW3IoImxhYmVsIixbZS5fdihlLl9zKHRbZS5kZWZhdWx0UHJvcHMubGFiZWxdKStlLl9zKHQuRW1haWwpKV0pLGUuX3YoIiAiKSxyKCJpIix7c3RhdGljQ2xhc3M6ImFkZHJlc3MtbGlzdC1kZWwiLG9uOntjbGljazpmdW5jdGlvbihuKXtlLmNsZWFyTGlzdCgyLHRbZS5ub2RlX2tleV0pfX19LFtlLl92KCJ4IildKV0pfSkpXSwxKTplLl9lKCldKV0pXTplLl9lKCldLDIpfTtyLl93aXRoU3RyaXBwZWQ9ITA7dmFyIGk9e3JlbmRlcjpyLHN0YXRpY1JlbmRlckZuczpbXX07dC5hPWl9XSl9LGUuZXhwb3J0cz1yKCl9LGpGYkM6ZnVuY3Rpb24oZSx0LG4pe24oIkNkeDMiKSxlLmV4cG9ydHM9bigiRmVCbCIpLk9iamVjdC5rZXlzfSwiaktXKyI6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCJrTTJFIiksaT1uKCJxQVJQIiksbz1uKCJkTkRiIik7cihyLlMsIlByb21pc2UiLHt0cnk6ZnVuY3Rpb24oZSl7dmFyIHQ9aS5mKHRoaXMpLG49byhlKTtyZXR1cm4obi5lP3QucmVqZWN0OnQucmVzb2x2ZSkobi52KSx0LnByb21pc2V9fSl9LGptYUM6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITAsdC5kZWZhdWx0PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xLG49YXJndW1lbnRzLmxlbmd0aDt0PG47dCsrKXt2YXIgcj1hcmd1bWVudHNbdF18fHt9O2Zvcih2YXIgaSBpbiByKWlmKHIuaGFzT3duUHJvcGVydHkoaSkpe3ZhciBvPXJbaV07dm9pZCAwIT09byYmKGVbaV09byl9fXJldHVybiBlfX0sandmdjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKCJEZDh3IiksaT1uLm4ociksbz1uKCJwRllnIikscz1uLm4obyksYT0vJVtzZGolXS9nLGw9ZnVuY3Rpb24oKXt9O2Z1bmN0aW9uIHUoKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PUFycmF5KGUpLG49MDtuPGU7bisrKXRbbl09YXJndW1lbnRzW25dO3ZhciByPTEsaT10WzBdLG89dC5sZW5ndGg7aWYoImZ1bmN0aW9uIj09dHlwZW9mIGkpcmV0dXJuIGkuYXBwbHkobnVsbCx0LnNsaWNlKDEpKTtpZigic3RyaW5nIj09dHlwZW9mIGkpe2Zvcih2YXIgcz1TdHJpbmcoaSkucmVwbGFjZShhLGZ1bmN0aW9uKGUpe2lmKCIlJSI9PT1lKXJldHVybiIlIjtpZihyPj1vKXJldHVybiBlO3N3aXRjaChlKXtjYXNlIiVzIjpyZXR1cm4gU3RyaW5nKHRbcisrXSk7Y2FzZSIlZCI6cmV0dXJuIE51bWJlcih0W3IrK10pO2Nhc2UiJWoiOnRyeXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkodFtyKytdKX1jYXRjaChlKXtyZXR1cm4iW0NpcmN1bGFyXSJ9YnJlYWs7ZGVmYXVsdDpyZXR1cm4gZX19KSxsPXRbcl07cjxvO2w9dFsrK3JdKXMrPSIgIitsO3JldHVybiBzfXJldHVybiBpfWZ1bmN0aW9uIGMoZSx0KXtyZXR1cm4gdm9pZCAwPT09ZXx8bnVsbD09PWV8fCghKCJhcnJheSIhPT10fHwhQXJyYXkuaXNBcnJheShlKXx8ZS5sZW5ndGgpfHwhKCFmdW5jdGlvbihlKXtyZXR1cm4ic3RyaW5nIj09PWV8fCJ1cmwiPT09ZXx8ImhleCI9PT1lfHwiZW1haWwiPT09ZXx8InBhdHRlcm4iPT09ZX0odCl8fCJzdHJpbmciIT10eXBlb2YgZXx8ZSkpfWZ1bmN0aW9uIGQoZSx0LG4pe3ZhciByPTAsaT1lLmxlbmd0aDshZnVuY3Rpb24gbyhzKXtpZihzJiZzLmxlbmd0aCluKHMpO2Vsc2V7dmFyIGE9cjtyKz0xLGE8aT90KGVbYV0sbyk6bihbXSl9fShbXSl9ZnVuY3Rpb24gZihlLHQsbixyKXtpZih0LmZpcnN0KXJldHVybiBkKGZ1bmN0aW9uKGUpe3ZhciB0PVtdO3JldHVybiBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe3QucHVzaC5hcHBseSh0LGVbbl0pfSksdH0oZSksbixyKTt2YXIgaT10LmZpcnN0RmllbGRzfHxbXTshMD09PWkmJihpPU9iamVjdC5rZXlzKGUpKTt2YXIgbz1PYmplY3Qua2V5cyhlKSxzPW8ubGVuZ3RoLGE9MCxsPVtdLHU9ZnVuY3Rpb24oZSl7bC5wdXNoLmFwcGx5KGwsZSksKythPT09cyYmcihsKX07by5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciByPWVbdF07LTEhPT1pLmluZGV4T2YodCk/ZChyLG4sdSk6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPVtdLGk9MCxvPWUubGVuZ3RoO2Z1bmN0aW9uIHMoZSl7ci5wdXNoLmFwcGx5KHIsZSksKytpPT09byYmbihyKX1lLmZvckVhY2goZnVuY3Rpb24oZSl7dChlLHMpfSl9KHIsbix1KX0pfWZ1bmN0aW9uIGgoZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Lm1lc3NhZ2U/KHQuZmllbGQ9dC5maWVsZHx8ZS5mdWxsRmllbGQsdCk6e21lc3NhZ2U6dCxmaWVsZDp0LmZpZWxkfHxlLmZ1bGxGaWVsZH19fWZ1bmN0aW9uIHAoZSx0KXtpZih0KWZvcih2YXIgbiBpbiB0KWlmKHQuaGFzT3duUHJvcGVydHkobikpe3ZhciByPXRbbl07Im9iamVjdCI9PT0odm9pZCAwPT09cj8idW5kZWZpbmVkIjpzKCkocikpJiYib2JqZWN0Ij09PXMoKShlW25dKT9lW25dPWkoKSh7fSxlW25dLHIpOmVbbl09cn1yZXR1cm4gZX12YXIgbT1mdW5jdGlvbihlLHQsbixyLGksbyl7IWUucmVxdWlyZWR8fG4uaGFzT3duUHJvcGVydHkoZS5maWVsZCkmJiFjKHQsb3x8ZS50eXBlKXx8ci5wdXNoKHUoaS5tZXNzYWdlcy5yZXF1aXJlZCxlLmZ1bGxGaWVsZCkpfTt2YXIgdj1mdW5jdGlvbihlLHQsbixyLGkpeygvXlxzKyQvLnRlc3QodCl8fCIiPT09dCkmJnIucHVzaCh1KGkubWVzc2FnZXMud2hpdGVzcGFjZSxlLmZ1bGxGaWVsZCkpfSxnPXtlbWFpbDovXigoW148PigpXFtcXVxcLiw7OlxzQCJdKyhcLltePD4oKVxbXF1cXC4sOzpcc0AiXSspKil8KCIuKyIpKUAoKFxbWzAtOV17MSwzfVwuWzAtOV17MSwzfVwuWzAtOV17MSwzfVwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlwtMC05XStcLikrW2EtekEtWl17Mix9KSkkLyx1cmw6bmV3IFJlZ0V4cCgiXig/IW1haWx0bzopKD86KD86aHR0cHxodHRwc3xmdHApOi8vfC8vKSg/OlxcUysoPzo6XFxTKik/QCk/KD86KD86KD86WzEtOV1cXGQ/fDFcXGRcXGR8MlswMV1cXGR8MjJbMC0zXSkoPzpcXC4oPzoxP1xcZHsxLDJ9fDJbMC00XVxcZHwyNVswLTVdKSl7Mn0oPzpcXC4oPzpbMC05XVxcZD98MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC00XSkpfCg/Oig/OlthLXpcXHUwMGExLVxcdWZmZmYwLTldKy0/KSpbYS16XFx1MDBhMS1cXHVmZmZmMC05XSspKD86XFwuKD86W2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0rLT8pKlthLXpcXHUwMGExLVxcdWZmZmYwLTldKykqKD86XFwuKD86W2EtelxcdTAwYTEtXFx1ZmZmZl17Mix9KSkpfGxvY2FsaG9zdCkoPzo6XFxkezIsNX0pPyg/OigvfFxcP3wjKVteXFxzXSopPyQiLCJpIiksaGV4Oi9eIz8oW2EtZjAtOV17Nn18W2EtZjAtOV17M30pJC9pfSx5PXtpbnRlZ2VyOmZ1bmN0aW9uKGUpe3JldHVybiB5Lm51bWJlcihlKSYmcGFyc2VJbnQoZSwxMCk9PT1lfSxmbG9hdDpmdW5jdGlvbihlKXtyZXR1cm4geS5udW1iZXIoZSkmJiF5LmludGVnZXIoZSl9LGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpfSxyZWdleHA6ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIFJlZ0V4cClyZXR1cm4hMDt0cnl7cmV0dXJuISFuZXcgUmVnRXhwKGUpfWNhdGNoKGUpe3JldHVybiExfX0sZGF0ZTpmdW5jdGlvbihlKXtyZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgZS5nZXRUaW1lJiYiZnVuY3Rpb24iPT10eXBlb2YgZS5nZXRNb250aCYmImZ1bmN0aW9uIj09dHlwZW9mIGUuZ2V0WWVhcn0sbnVtYmVyOmZ1bmN0aW9uKGUpe3JldHVybiFpc05hTihlKSYmIm51bWJlciI9PXR5cGVvZiBlfSxvYmplY3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIm9iamVjdCI9PT0odm9pZCAwPT09ZT8idW5kZWZpbmVkIjpzKCkoZSkpJiYheS5hcnJheShlKX0sbWV0aG9kOmZ1bmN0aW9uKGUpe3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBlfSxlbWFpbDpmdW5jdGlvbihlKXtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIGUmJiEhZS5tYXRjaChnLmVtYWlsKSYmZS5sZW5ndGg8MjU1fSx1cmw6ZnVuY3Rpb24oZSl7cmV0dXJuInN0cmluZyI9PXR5cGVvZiBlJiYhIWUubWF0Y2goZy51cmwpfSxoZXg6ZnVuY3Rpb24oZSl7cmV0dXJuInN0cmluZyI9PXR5cGVvZiBlJiYhIWUubWF0Y2goZy5oZXgpfX07dmFyIF89ImVudW0iO3ZhciBiPXtyZXF1aXJlZDptLHdoaXRlc3BhY2U6dix0eXBlOmZ1bmN0aW9uKGUsdCxuLHIsaSl7aWYoZS5yZXF1aXJlZCYmdm9pZCAwPT09dCltKGUsdCxuLHIsaSk7ZWxzZXt2YXIgbz1lLnR5cGU7WyJpbnRlZ2VyIiwiZmxvYXQiLCJhcnJheSIsInJlZ2V4cCIsIm9iamVjdCIsIm1ldGhvZCIsImVtYWlsIiwibnVtYmVyIiwiZGF0ZSIsInVybCIsImhleCJdLmluZGV4T2Yobyk+LTE/eVtvXSh0KXx8ci5wdXNoKHUoaS5tZXNzYWdlcy50eXBlc1tvXSxlLmZ1bGxGaWVsZCxlLnR5cGUpKTpvJiYodm9pZCAwPT09dD8idW5kZWZpbmVkIjpzKCkodCkpIT09ZS50eXBlJiZyLnB1c2godShpLm1lc3NhZ2VzLnR5cGVzW29dLGUuZnVsbEZpZWxkLGUudHlwZSkpfX0scmFuZ2U6ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbz0ibnVtYmVyIj09dHlwZW9mIGUubGVuLHM9Im51bWJlciI9PXR5cGVvZiBlLm1pbixhPSJudW1iZXIiPT10eXBlb2YgZS5tYXgsbD10LGM9bnVsbCxkPSJudW1iZXIiPT10eXBlb2YgdCxmPSJzdHJpbmciPT10eXBlb2YgdCxoPUFycmF5LmlzQXJyYXkodCk7aWYoZD9jPSJudW1iZXIiOmY/Yz0ic3RyaW5nIjpoJiYoYz0iYXJyYXkiKSwhYylyZXR1cm4hMTtoJiYobD10Lmxlbmd0aCksZiYmKGw9dC5yZXBsYWNlKC9bXHVEODAwLVx1REJGRl1bXHVEQzAwLVx1REZGRl0vZywiXyIpLmxlbmd0aCksbz9sIT09ZS5sZW4mJnIucHVzaCh1KGkubWVzc2FnZXNbY10ubGVuLGUuZnVsbEZpZWxkLGUubGVuKSk6cyYmIWEmJmw8ZS5taW4/ci5wdXNoKHUoaS5tZXNzYWdlc1tjXS5taW4sZS5mdWxsRmllbGQsZS5taW4pKTphJiYhcyYmbD5lLm1heD9yLnB1c2godShpLm1lc3NhZ2VzW2NdLm1heCxlLmZ1bGxGaWVsZCxlLm1heCkpOnMmJmEmJihsPGUubWlufHxsPmUubWF4KSYmci5wdXNoKHUoaS5tZXNzYWdlc1tjXS5yYW5nZSxlLmZ1bGxGaWVsZCxlLm1pbixlLm1heCkpfSxlbnVtOmZ1bmN0aW9uKGUsdCxuLHIsaSl7ZVtfXT1BcnJheS5pc0FycmF5KGVbX10pP2VbX106W10sLTE9PT1lW19dLmluZGV4T2YodCkmJnIucHVzaCh1KGkubWVzc2FnZXNbX10sZS5mdWxsRmllbGQsZVtfXS5qb2luKCIsICIpKSl9LHBhdHRlcm46ZnVuY3Rpb24oZSx0LG4scixpKXtlLnBhdHRlcm4mJihlLnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHA/KGUucGF0dGVybi5sYXN0SW5kZXg9MCxlLnBhdHRlcm4udGVzdCh0KXx8ci5wdXNoKHUoaS5tZXNzYWdlcy5wYXR0ZXJuLm1pc21hdGNoLGUuZnVsbEZpZWxkLHQsZS5wYXR0ZXJuKSkpOiJzdHJpbmciPT10eXBlb2YgZS5wYXR0ZXJuJiYobmV3IFJlZ0V4cChlLnBhdHRlcm4pLnRlc3QodCl8fHIucHVzaCh1KGkubWVzc2FnZXMucGF0dGVybi5taXNtYXRjaCxlLmZ1bGxGaWVsZCx0LGUucGF0dGVybikpKSl9fTt2YXIgeD0iZW51bSI7dmFyIEM9ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbz1lLnR5cGUscz1bXTtpZihlLnJlcXVpcmVkfHwhZS5yZXF1aXJlZCYmci5oYXNPd25Qcm9wZXJ0eShlLmZpZWxkKSl7aWYoYyh0LG8pJiYhZS5yZXF1aXJlZClyZXR1cm4gbigpO2IucmVxdWlyZWQoZSx0LHIscyxpLG8pLGModCxvKXx8Yi50eXBlKGUsdCxyLHMsaSl9bihzKX0sdz17c3RyaW5nOmZ1bmN0aW9uKGUsdCxuLHIsaSl7dmFyIG89W107aWYoZS5yZXF1aXJlZHx8IWUucmVxdWlyZWQmJnIuaGFzT3duUHJvcGVydHkoZS5maWVsZCkpe2lmKGModCwic3RyaW5nIikmJiFlLnJlcXVpcmVkKXJldHVybiBuKCk7Yi5yZXF1aXJlZChlLHQscixvLGksInN0cmluZyIpLGModCwic3RyaW5nIil8fChiLnR5cGUoZSx0LHIsbyxpKSxiLnJhbmdlKGUsdCxyLG8saSksYi5wYXR0ZXJuKGUsdCxyLG8saSksITA9PT1lLndoaXRlc3BhY2UmJmIud2hpdGVzcGFjZShlLHQscixvLGkpKX1uKG8pfSxtZXRob2Q6ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbz1bXTtpZihlLnJlcXVpcmVkfHwhZS5yZXF1aXJlZCYmci5oYXNPd25Qcm9wZXJ0eShlLmZpZWxkKSl7aWYoYyh0KSYmIWUucmVxdWlyZWQpcmV0dXJuIG4oKTtiLnJlcXVpcmVkKGUsdCxyLG8saSksdm9pZCAwIT09dCYmYi50eXBlKGUsdCxyLG8saSl9bihvKX0sbnVtYmVyOmZ1bmN0aW9uKGUsdCxuLHIsaSl7dmFyIG89W107aWYoZS5yZXF1aXJlZHx8IWUucmVxdWlyZWQmJnIuaGFzT3duUHJvcGVydHkoZS5maWVsZCkpe2lmKGModCkmJiFlLnJlcXVpcmVkKXJldHVybiBuKCk7Yi5yZXF1aXJlZChlLHQscixvLGkpLHZvaWQgMCE9PXQmJihiLnR5cGUoZSx0LHIsbyxpKSxiLnJhbmdlKGUsdCxyLG8saSkpfW4obyl9LGJvb2xlYW46ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbz1bXTtpZihlLnJlcXVpcmVkfHwhZS5yZXF1aXJlZCYmci5oYXNPd25Qcm9wZXJ0eShlLmZpZWxkKSl7aWYoYyh0KSYmIWUucmVxdWlyZWQpcmV0dXJuIG4oKTtiLnJlcXVpcmVkKGUsdCxyLG8saSksdm9pZCAwIT09dCYmYi50eXBlKGUsdCxyLG8saSl9bihvKX0scmVnZXhwOmZ1bmN0aW9uKGUsdCxuLHIsaSl7dmFyIG89W107aWYoZS5yZXF1aXJlZHx8IWUucmVxdWlyZWQmJnIuaGFzT3duUHJvcGVydHkoZS5maWVsZCkpe2lmKGModCkmJiFlLnJlcXVpcmVkKXJldHVybiBuKCk7Yi5yZXF1aXJlZChlLHQscixvLGkpLGModCl8fGIudHlwZShlLHQscixvLGkpfW4obyl9LGludGVnZXI6ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbz1bXTtpZihlLnJlcXVpcmVkfHwhZS5yZXF1aXJlZCYmci5oYXNPd25Qcm9wZXJ0eShlLmZpZWxkKSl7aWYoYyh0KSYmIWUucmVxdWlyZWQpcmV0dXJuIG4oKTtiLnJlcXVpcmVkKGUsdCxyLG8saSksdm9pZCAwIT09dCYmKGIudHlwZShlLHQscixvLGkpLGIucmFuZ2UoZSx0LHIsbyxpKSl9bihvKX0sZmxvYXQ6ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbz1bXTtpZihlLnJlcXVpcmVkfHwhZS5yZXF1aXJlZCYmci5oYXNPd25Qcm9wZXJ0eShlLmZpZWxkKSl7aWYoYyh0KSYmIWUucmVxdWlyZWQpcmV0dXJuIG4oKTtiLnJlcXVpcmVkKGUsdCxyLG8saSksdm9pZCAwIT09dCYmKGIudHlwZShlLHQscixvLGkpLGIucmFuZ2UoZSx0LHIsbyxpKSl9bihvKX0sYXJyYXk6ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbz1bXTtpZihlLnJlcXVpcmVkfHwhZS5yZXF1aXJlZCYmci5oYXNPd25Qcm9wZXJ0eShlLmZpZWxkKSl7aWYoYyh0LCJhcnJheSIpJiYhZS5yZXF1aXJlZClyZXR1cm4gbigpO2IucmVxdWlyZWQoZSx0LHIsbyxpLCJhcnJheSIpLGModCwiYXJyYXkiKXx8KGIudHlwZShlLHQscixvLGkpLGIucmFuZ2UoZSx0LHIsbyxpKSl9bihvKX0sb2JqZWN0OmZ1bmN0aW9uKGUsdCxuLHIsaSl7dmFyIG89W107aWYoZS5yZXF1aXJlZHx8IWUucmVxdWlyZWQmJnIuaGFzT3duUHJvcGVydHkoZS5maWVsZCkpe2lmKGModCkmJiFlLnJlcXVpcmVkKXJldHVybiBuKCk7Yi5yZXF1aXJlZChlLHQscixvLGkpLHZvaWQgMCE9PXQmJmIudHlwZShlLHQscixvLGkpfW4obyl9LGVudW06ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbz1bXTtpZihlLnJlcXVpcmVkfHwhZS5yZXF1aXJlZCYmci5oYXNPd25Qcm9wZXJ0eShlLmZpZWxkKSl7aWYoYyh0KSYmIWUucmVxdWlyZWQpcmV0dXJuIG4oKTtiLnJlcXVpcmVkKGUsdCxyLG8saSksdCYmYlt4XShlLHQscixvLGkpfW4obyl9LHBhdHRlcm46ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbz1bXTtpZihlLnJlcXVpcmVkfHwhZS5yZXF1aXJlZCYmci5oYXNPd25Qcm9wZXJ0eShlLmZpZWxkKSl7aWYoYyh0LCJzdHJpbmciKSYmIWUucmVxdWlyZWQpcmV0dXJuIG4oKTtiLnJlcXVpcmVkKGUsdCxyLG8saSksYyh0LCJzdHJpbmciKXx8Yi5wYXR0ZXJuKGUsdCxyLG8saSl9bihvKX0sZGF0ZTpmdW5jdGlvbihlLHQsbixyLGkpe3ZhciBvPVtdO2lmKGUucmVxdWlyZWR8fCFlLnJlcXVpcmVkJiZyLmhhc093blByb3BlcnR5KGUuZmllbGQpKXtpZihjKHQpJiYhZS5yZXF1aXJlZClyZXR1cm4gbigpO2lmKGIucmVxdWlyZWQoZSx0LHIsbyxpKSwhYyh0KSl7dmFyIHM9dm9pZCAwO3M9Im51bWJlciI9PXR5cGVvZiB0P25ldyBEYXRlKHQpOnQsYi50eXBlKGUscyxyLG8saSkscyYmYi5yYW5nZShlLHMuZ2V0VGltZSgpLHIsbyxpKX19bihvKX0sdXJsOkMsaGV4OkMsZW1haWw6QyxyZXF1aXJlZDpmdW5jdGlvbihlLHQsbixyLGkpe3ZhciBvPVtdLGE9QXJyYXkuaXNBcnJheSh0KT8iYXJyYXkiOnZvaWQgMD09PXQ/InVuZGVmaW5lZCI6cygpKHQpO2IucmVxdWlyZWQoZSx0LHIsbyxpLGEpLG4obyl9fTtmdW5jdGlvbiBrKCl7cmV0dXJue2RlZmF1bHQ6IlZhbGlkYXRpb24gZXJyb3Igb24gZmllbGQgJXMiLHJlcXVpcmVkOiIlcyBpcyByZXF1aXJlZCIsZW51bToiJXMgbXVzdCBiZSBvbmUgb2YgJXMiLHdoaXRlc3BhY2U6IiVzIGNhbm5vdCBiZSBlbXB0eSIsZGF0ZTp7Zm9ybWF0OiIlcyBkYXRlICVzIGlzIGludmFsaWQgZm9yIGZvcm1hdCAlcyIscGFyc2U6IiVzIGRhdGUgY291bGQgbm90IGJlIHBhcnNlZCwgJXMgaXMgaW52YWxpZCAiLGludmFsaWQ6IiVzIGRhdGUgJXMgaXMgaW52YWxpZCJ9LHR5cGVzOntzdHJpbmc6IiVzIGlzIG5vdCBhICVzIixtZXRob2Q6IiVzIGlzIG5vdCBhICVzIChmdW5jdGlvbikiLGFycmF5OiIlcyBpcyBub3QgYW4gJXMiLG9iamVjdDoiJXMgaXMgbm90IGFuICVzIixudW1iZXI6IiVzIGlzIG5vdCBhICVzIixkYXRlOiIlcyBpcyBub3QgYSAlcyIsYm9vbGVhbjoiJXMgaXMgbm90IGEgJXMiLGludGVnZXI6IiVzIGlzIG5vdCBhbiAlcyIsZmxvYXQ6IiVzIGlzIG5vdCBhICVzIixyZWdleHA6IiVzIGlzIG5vdCBhIHZhbGlkICVzIixlbWFpbDoiJXMgaXMgbm90IGEgdmFsaWQgJXMiLHVybDoiJXMgaXMgbm90IGEgdmFsaWQgJXMiLGhleDoiJXMgaXMgbm90IGEgdmFsaWQgJXMifSxzdHJpbmc6e2xlbjoiJXMgbXVzdCBiZSBleGFjdGx5ICVzIGNoYXJhY3RlcnMiLG1pbjoiJXMgbXVzdCBiZSBhdCBsZWFzdCAlcyBjaGFyYWN0ZXJzIixtYXg6IiVzIGNhbm5vdCBiZSBsb25nZXIgdGhhbiAlcyBjaGFyYWN0ZXJzIixyYW5nZToiJXMgbXVzdCBiZSBiZXR3ZWVuICVzIGFuZCAlcyBjaGFyYWN0ZXJzIn0sbnVtYmVyOntsZW46IiVzIG11c3QgZXF1YWwgJXMiLG1pbjoiJXMgY2Fubm90IGJlIGxlc3MgdGhhbiAlcyIsbWF4OiIlcyBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuICVzIixyYW5nZToiJXMgbXVzdCBiZSBiZXR3ZWVuICVzIGFuZCAlcyJ9LGFycmF5OntsZW46IiVzIG11c3QgYmUgZXhhY3RseSAlcyBpbiBsZW5ndGgiLG1pbjoiJXMgY2Fubm90IGJlIGxlc3MgdGhhbiAlcyBpbiBsZW5ndGgiLG1heDoiJXMgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiAlcyBpbiBsZW5ndGgiLHJhbmdlOiIlcyBtdXN0IGJlIGJldHdlZW4gJXMgYW5kICVzIGluIGxlbmd0aCJ9LHBhdHRlcm46e21pc21hdGNoOiIlcyB2YWx1ZSAlcyBkb2VzIG5vdCBtYXRjaCBwYXR0ZXJuICVzIn0sY2xvbmU6ZnVuY3Rpb24oKXt2YXIgZT1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMpKTtyZXR1cm4gZS5jbG9uZT10aGlzLmNsb25lLGV9fX12YXIgUz1rKCk7ZnVuY3Rpb24gQShlKXt0aGlzLnJ1bGVzPW51bGwsdGhpcy5fbWVzc2FnZXM9Uyx0aGlzLmRlZmluZShlKX1BLnByb3RvdHlwZT17bWVzc2FnZXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJih0aGlzLl9tZXNzYWdlcz1wKGsoKSxlKSksdGhpcy5fbWVzc2FnZXN9LGRlZmluZTpmdW5jdGlvbihlKXtpZighZSl0aHJvdyBuZXcgRXJyb3IoIkNhbm5vdCBjb25maWd1cmUgYSBzY2hlbWEgd2l0aCBubyBydWxlcyIpO2lmKCJvYmplY3QiIT09KHZvaWQgMD09PWU/InVuZGVmaW5lZCI6cygpKGUpKXx8QXJyYXkuaXNBcnJheShlKSl0aHJvdyBuZXcgRXJyb3IoIlJ1bGVzIG11c3QgYmUgYW4gb2JqZWN0Iik7dGhpcy5ydWxlcz17fTt2YXIgdD12b2lkIDAsbj12b2lkIDA7Zm9yKHQgaW4gZSllLmhhc093blByb3BlcnR5KHQpJiYobj1lW3RdLHRoaXMucnVsZXNbdF09QXJyYXkuaXNBcnJheShuKT9uOltuXSl9LHZhbGlkYXRlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30scj1hcmd1bWVudHNbMl0sbz1lLGE9bixjPXI7aWYoImZ1bmN0aW9uIj09dHlwZW9mIGEmJihjPWEsYT17fSksdGhpcy5ydWxlcyYmMCE9PU9iamVjdC5rZXlzKHRoaXMucnVsZXMpLmxlbmd0aCl7aWYoYS5tZXNzYWdlcyl7dmFyIGQ9dGhpcy5tZXNzYWdlcygpO2Q9PT1TJiYoZD1rKCkpLHAoZCxhLm1lc3NhZ2VzKSxhLm1lc3NhZ2VzPWR9ZWxzZSBhLm1lc3NhZ2VzPXRoaXMubWVzc2FnZXMoKTt2YXIgbT12b2lkIDAsdj12b2lkIDAsZz17fTsoYS5rZXlzfHxPYmplY3Qua2V5cyh0aGlzLnJ1bGVzKSkuZm9yRWFjaChmdW5jdGlvbihuKXttPXQucnVsZXNbbl0sdj1vW25dLG0uZm9yRWFjaChmdW5jdGlvbihyKXt2YXIgcz1yOyJmdW5jdGlvbiI9PXR5cGVvZiBzLnRyYW5zZm9ybSYmKG89PT1lJiYobz1pKCkoe30sbykpLHY9b1tuXT1zLnRyYW5zZm9ybSh2KSksKHM9ImZ1bmN0aW9uIj09dHlwZW9mIHM/e3ZhbGlkYXRvcjpzfTppKCkoe30scykpLnZhbGlkYXRvcj10LmdldFZhbGlkYXRpb25NZXRob2Qocykscy5maWVsZD1uLHMuZnVsbEZpZWxkPXMuZnVsbEZpZWxkfHxuLHMudHlwZT10LmdldFR5cGUocykscy52YWxpZGF0b3ImJihnW25dPWdbbl18fFtdLGdbbl0ucHVzaCh7cnVsZTpzLHZhbHVlOnYsc291cmNlOm8sZmllbGQ6bn0pKX0pfSk7dmFyIHk9e307ZihnLGEsZnVuY3Rpb24oZSx0KXt2YXIgbj1lLnJ1bGUscj0hKCJvYmplY3QiIT09bi50eXBlJiYiYXJyYXkiIT09bi50eXBlfHwib2JqZWN0IiE9PXMoKShuLmZpZWxkcykmJiJvYmplY3QiIT09cygpKG4uZGVmYXVsdEZpZWxkKSk7ZnVuY3Rpb24gbyhlLHQpe3JldHVybiBpKCkoe30sdCx7ZnVsbEZpZWxkOm4uZnVsbEZpZWxkKyIuIitlfSl9ZnVuY3Rpb24gYygpe3ZhciBzPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpbXTtpZihBcnJheS5pc0FycmF5KHMpfHwocz1bc10pLHMubGVuZ3RoJiZsKCJhc3luYy12YWxpZGF0b3I6IixzKSxzLmxlbmd0aCYmbi5tZXNzYWdlJiYocz1bXS5jb25jYXQobi5tZXNzYWdlKSkscz1zLm1hcChoKG4pKSxhLmZpcnN0JiZzLmxlbmd0aClyZXR1cm4geVtuLmZpZWxkXT0xLHQocyk7aWYocil7aWYobi5yZXF1aXJlZCYmIWUudmFsdWUpcmV0dXJuIHM9bi5tZXNzYWdlP1tdLmNvbmNhdChuLm1lc3NhZ2UpLm1hcChoKG4pKTphLmVycm9yP1thLmVycm9yKG4sdShhLm1lc3NhZ2VzLnJlcXVpcmVkLG4uZmllbGQpKV06W10sdChzKTt2YXIgYz17fTtpZihuLmRlZmF1bHRGaWVsZClmb3IodmFyIGQgaW4gZS52YWx1ZSllLnZhbHVlLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1uLmRlZmF1bHRGaWVsZCk7Zm9yKHZhciBmIGluIGM9aSgpKHt9LGMsZS5ydWxlLmZpZWxkcykpaWYoYy5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIHA9QXJyYXkuaXNBcnJheShjW2ZdKT9jW2ZdOltjW2ZdXTtjW2ZdPXAubWFwKG8uYmluZChudWxsLGYpKX12YXIgbT1uZXcgQShjKTttLm1lc3NhZ2VzKGEubWVzc2FnZXMpLGUucnVsZS5vcHRpb25zJiYoZS5ydWxlLm9wdGlvbnMubWVzc2FnZXM9YS5tZXNzYWdlcyxlLnJ1bGUub3B0aW9ucy5lcnJvcj1hLmVycm9yKSxtLnZhbGlkYXRlKGUudmFsdWUsZS5ydWxlLm9wdGlvbnN8fGEsZnVuY3Rpb24oZSl7dChlJiZlLmxlbmd0aD9zLmNvbmNhdChlKTplKX0pfWVsc2UgdChzKX1yPXImJihuLnJlcXVpcmVkfHwhbi5yZXF1aXJlZCYmZS52YWx1ZSksbi5maWVsZD1lLmZpZWxkO3ZhciBkPW4udmFsaWRhdG9yKG4sZS52YWx1ZSxjLGUuc291cmNlLGEpO2QmJmQudGhlbiYmZC50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGMoKX0sZnVuY3Rpb24oZSl7cmV0dXJuIGMoZSl9KX0sZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKGUpe3ZhciB0LG49dm9pZCAwLHI9dm9pZCAwLGk9W10sbz17fTtmb3Iobj0wO248ZS5sZW5ndGg7bisrKXQ9ZVtuXSxBcnJheS5pc0FycmF5KHQpP2k9aS5jb25jYXQuYXBwbHkoaSx0KTppLnB1c2godCk7aWYoaS5sZW5ndGgpZm9yKG49MDtuPGkubGVuZ3RoO24rKylvW3I9aVtuXS5maWVsZF09b1tyXXx8W10sb1tyXS5wdXNoKGlbbl0pO2Vsc2UgaT1udWxsLG89bnVsbDtjKGksbyl9KGUpfSl9ZWxzZSBjJiZjKCl9LGdldFR5cGU6ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZS50eXBlJiZlLnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHAmJihlLnR5cGU9InBhdHRlcm4iKSwiZnVuY3Rpb24iIT10eXBlb2YgZS52YWxpZGF0b3ImJmUudHlwZSYmIXcuaGFzT3duUHJvcGVydHkoZS50eXBlKSl0aHJvdyBuZXcgRXJyb3IodSgiVW5rbm93biBydWxlIHR5cGUgJXMiLGUudHlwZSkpO3JldHVybiBlLnR5cGV8fCJzdHJpbmcifSxnZXRWYWxpZGF0aW9uTWV0aG9kOmZ1bmN0aW9uKGUpe2lmKCJmdW5jdGlvbiI9PXR5cGVvZiBlLnZhbGlkYXRvcilyZXR1cm4gZS52YWxpZGF0b3I7dmFyIHQ9T2JqZWN0LmtleXMoZSksbj10LmluZGV4T2YoIm1lc3NhZ2UiKTtyZXR1cm4tMSE9PW4mJnQuc3BsaWNlKG4sMSksMT09PXQubGVuZ3RoJiYicmVxdWlyZWQiPT09dFswXT93LnJlcXVpcmVkOndbdGhpcy5nZXRUeXBlKGUpXXx8ITF9fSxBLnJlZ2lzdGVyPWZ1bmN0aW9uKGUsdCl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKCJDYW5ub3QgcmVnaXN0ZXIgYSB2YWxpZGF0b3IgYnkgdHlwZSwgdmFsaWRhdG9yIGlzIG5vdCBhIGZ1bmN0aW9uIik7d1tlXT10fSxBLm1lc3NhZ2VzPVM7dC5kZWZhdWx0PUF9LGtNMkU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oIjdLdkQiKSxpPW4oIkZlQmwiKSxvPW4oIitaTUoiKSxzPW4oImhKeDgiKSxhPW4oIkQyTDIiKSxsPWZ1bmN0aW9uKGUsdCxuKXt2YXIgdSxjLGQsZj1lJmwuRixoPWUmbC5HLHA9ZSZsLlMsbT1lJmwuUCx2PWUmbC5CLGc9ZSZsLlcseT1oP2k6aVt0XXx8KGlbdF09e30pLF89eS5wcm90b3R5cGUsYj1oP3I6cD9yW3RdOihyW3RdfHx7fSkucHJvdG90eXBlO2Zvcih1IGluIGgmJihuPXQpLG4pKGM9IWYmJmImJnZvaWQgMCE9PWJbdV0pJiZhKHksdSl8fChkPWM/Ylt1XTpuW3VdLHlbdV09aCYmImZ1bmN0aW9uIiE9dHlwZW9mIGJbdV0/blt1XTp2JiZjP28oZCxyKTpnJiZiW3VdPT1kP2Z1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKHQsbixyKXtpZih0aGlzIGluc3RhbmNlb2YgZSl7c3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gbmV3IGU7Y2FzZSAxOnJldHVybiBuZXcgZSh0KTtjYXNlIDI6cmV0dXJuIG5ldyBlKHQsbil9cmV0dXJuIG5ldyBlKHQsbixyKX1yZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3JldHVybiB0LnByb3RvdHlwZT1lLnByb3RvdHlwZSx0fShkKTptJiYiZnVuY3Rpb24iPT10eXBlb2YgZD9vKEZ1bmN0aW9uLmNhbGwsZCk6ZCxtJiYoKHkudmlydHVhbHx8KHkudmlydHVhbD17fSkpW3VdPWQsZSZsLlImJl8mJiFfW3VdJiZzKF8sdSxkKSkpfTtsLkY9MSxsLkc9MixsLlM9NCxsLlA9OCxsLkI9MTYsbC5XPTMyLGwuVT02NCxsLlI9MTI4LGUuZXhwb3J0cz1sfSxrbnVDOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj12b2lkIDA9PT1uO3N3aXRjaCh0Lmxlbmd0aCl7Y2FzZSAwOnJldHVybiByP2UoKTplLmNhbGwobik7Y2FzZSAxOnJldHVybiByP2UodFswXSk6ZS5jYWxsKG4sdFswXSk7Y2FzZSAyOnJldHVybiByP2UodFswXSx0WzFdKTplLmNhbGwobix0WzBdLHRbMV0pO2Nhc2UgMzpyZXR1cm4gcj9lKHRbMF0sdFsxXSx0WzJdKTplLmNhbGwobix0WzBdLHRbMV0sdFsyXSk7Y2FzZSA0OnJldHVybiByP2UodFswXSx0WzFdLHRbMl0sdFszXSk6ZS5jYWxsKG4sdFswXSx0WzFdLHRbMl0sdFszXSl9cmV0dXJuIGUuYXBwbHkobix0KX19LGt4RkI6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuInN0cmluZyIhPXR5cGVvZiBlP2U6KC9eWyciXS4qWyciXSQvLnRlc3QoZSkmJihlPWUuc2xpY2UoMSwtMSkpLC9bIicoKSBcdFxuXS8udGVzdChlKT8nIicrZS5yZXBsYWNlKC8iL2csJ1xcIicpLnJlcGxhY2UoL1xuL2csIlxcbiIpKyciJzplKX19LGxGa2M6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj0hKCJ1bmRlZmluZWQiPT10eXBlb2Ygd2luZG93fHwhd2luZG93LmRvY3VtZW50fHwhd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGk9e2NhblVzZURPTTpyLGNhblVzZVdvcmtlcnM6InVuZGVmaW5lZCIhPXR5cGVvZiBXb3JrZXIsY2FuVXNlRXZlbnRMaXN0ZW5lcnM6ciYmISghd2luZG93LmFkZEV2ZW50TGlzdGVuZXImJiF3aW5kb3cuYXR0YWNoRXZlbnQpLGNhblVzZVZpZXdwb3J0OnImJiEhd2luZG93LnNjcmVlbixpc0luV29ya2VyOiFyfTtlLmV4cG9ydHM9aX0sbE9uSjpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgZSl0aHJvdyBUeXBlRXJyb3IoZSsiIGlzIG5vdCBhIGZ1bmN0aW9uISIpO3JldHVybiBlfX0sbGt0ajpmdW5jdGlvbihlLHQsbil7dmFyIHI9bigiSWJodSIpLGk9bigieG5jOSIpO2UuZXhwb3J0cz1PYmplY3Qua2V5c3x8ZnVuY3Rpb24oZSl7cmV0dXJuIHIoZSxpKX19LG1DbHU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oImtNMkUiKTtyKHIuUytyLkYqIW4oIitFMzkiKSwiT2JqZWN0Iix7ZGVmaW5lUHJvcGVydHk6bigiZXZENSIpLmZ9KX0sbXNYaTpmdW5jdGlvbihlLHQsbil7dmFyIHI9bigiNzdQbCIpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbixpKXt0cnl7cmV0dXJuIGk/dChyKG4pWzBdLG5bMV0pOnQobil9Y2F0Y2godCl7dmFyIG89ZS5yZXR1cm47dGhyb3cgdm9pZCAwIT09byYmcihvLmNhbGwoZSkpLHR9fX0sbXRXTTpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPW4oInRJRk4iKX0sbXRyRDpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiBuKHIpe2lmKHRbcl0pcmV0dXJuIHRbcl0uZXhwb3J0czt2YXIgaT10W3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtyXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyxuKSxpLmw9ITAsaS5leHBvcnRzfXJldHVybiBuLm09ZSxuLmM9dCxuLmQ9ZnVuY3Rpb24oZSx0LHIpe24ubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxuLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIG4uZCh0LCJhIix0KSx0fSxuLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LG4ucD0iL2Rpc3QvIixuKG4ucz0xNTEpfSh7MDpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbixyLGksbyl7dmFyIHMsYT1lPWV8fHt9LGw9dHlwZW9mIGUuZGVmYXVsdDsib2JqZWN0IiE9PWwmJiJmdW5jdGlvbiIhPT1sfHwocz1lLGE9ZS5kZWZhdWx0KTt2YXIgdSxjPSJmdW5jdGlvbiI9PXR5cGVvZiBhP2Eub3B0aW9uczphO2lmKHQmJihjLnJlbmRlcj10LnJlbmRlcixjLnN0YXRpY1JlbmRlckZucz10LnN0YXRpY1JlbmRlckZucyxjLl9jb21waWxlZD0hMCksbiYmKGMuZnVuY3Rpb25hbD0hMCksaSYmKGMuX3Njb3BlSWQ9aSksbz8odT1mdW5jdGlvbihlKXsoZT1lfHx0aGlzLiR2bm9kZSYmdGhpcy4kdm5vZGUuc3NyQ29udGV4dHx8dGhpcy5wYXJlbnQmJnRoaXMucGFyZW50LiR2bm9kZSYmdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpfHwidW5kZWZpbmVkIj09dHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX198fChlPV9fVlVFX1NTUl9DT05URVhUX18pLHImJnIuY2FsbCh0aGlzLGUpLGUmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobyl9LGMuX3NzclJlZ2lzdGVyPXUpOnImJih1PXIpLHUpe3ZhciBkPWMuZnVuY3Rpb25hbCxmPWQ/Yy5yZW5kZXI6Yy5iZWZvcmVDcmVhdGU7ZD8oYy5faW5qZWN0U3R5bGVzPXUsYy5yZW5kZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdS5jYWxsKHQpLGYoZSx0KX0pOmMuYmVmb3JlQ3JlYXRlPWY/W10uY29uY2F0KGYsdSk6W3VdfXJldHVybntlc01vZHVsZTpzLGV4cG9ydHM6YSxvcHRpb25zOmN9fX0sMTUxOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigxNTIpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O28uZGVmYXVsdC5pbnN0YWxsPWZ1bmN0aW9uKGUpe2UuY29tcG9uZW50KG8uZGVmYXVsdC5uYW1lLG8uZGVmYXVsdCl9LHQuZGVmYXVsdD1vLmRlZmF1bHR9LDE1MjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKDE1MyksaT1uLm4ociksbz1uKDE1NCkscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDE1MzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMCx0LmRlZmF1bHQ9e25hbWU6IkVsQnV0dG9uIixpbmplY3Q6e2VsRm9ybTp7ZGVmYXVsdDoiIn0sZWxGb3JtSXRlbTp7ZGVmYXVsdDoiIn19LHByb3BzOnt0eXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OiJkZWZhdWx0In0sc2l6ZTpTdHJpbmcsaWNvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDoiIn0sbmF0aXZlVHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDoiYnV0dG9uIn0sbG9hZGluZzpCb29sZWFuLGRpc2FibGVkOkJvb2xlYW4scGxhaW46Qm9vbGVhbixhdXRvZm9jdXM6Qm9vbGVhbixyb3VuZDpCb29sZWFuLGNpcmNsZTpCb29sZWFufSxjb21wdXRlZDp7X2VsRm9ybUl0ZW1TaXplOmZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMuZWxGb3JtSXRlbXx8e30pLmVsRm9ybUl0ZW1TaXplfSxidXR0b25TaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2l6ZXx8dGhpcy5fZWxGb3JtSXRlbVNpemV8fCh0aGlzLiRFTEVNRU5UfHx7fSkuc2l6ZX0sYnV0dG9uRGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kaXNhYmxlZHx8KHRoaXMuZWxGb3JtfHx7fSkuZGlzYWJsZWR9fSxtZXRob2RzOntoYW5kbGVDbGljazpmdW5jdGlvbihlKXt0aGlzLiRlbWl0KCJjbGljayIsZSl9fX19LDE1NDpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oImJ1dHRvbiIse3N0YXRpY0NsYXNzOiJlbC1idXR0b24iLGNsYXNzOltlLnR5cGU/ImVsLWJ1dHRvbi0tIitlLnR5cGU6IiIsZS5idXR0b25TaXplPyJlbC1idXR0b24tLSIrZS5idXR0b25TaXplOiIiLHsiaXMtZGlzYWJsZWQiOmUuYnV0dG9uRGlzYWJsZWQsImlzLWxvYWRpbmciOmUubG9hZGluZywiaXMtcGxhaW4iOmUucGxhaW4sImlzLXJvdW5kIjplLnJvdW5kLCJpcy1jaXJjbGUiOmUuY2lyY2xlfV0sYXR0cnM6e2Rpc2FibGVkOmUuYnV0dG9uRGlzYWJsZWR8fGUubG9hZGluZyxhdXRvZm9jdXM6ZS5hdXRvZm9jdXMsdHlwZTplLm5hdGl2ZVR5cGV9LG9uOntjbGljazplLmhhbmRsZUNsaWNrfX0sW2UubG9hZGluZz9uKCJpIix7c3RhdGljQ2xhc3M6ImVsLWljb24tbG9hZGluZyJ9KTplLl9lKCksZS5pY29uJiYhZS5sb2FkaW5nP24oImkiLHtjbGFzczplLmljb259KTplLl9lKCksZS4kc2xvdHMuZGVmYXVsdD9uKCJzcGFuIixbZS5fdCgiZGVmYXVsdCIpXSwyKTplLl9lKCldKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn19KX0sbjBUNjpmdW5jdGlvbihlLHQsbil7dmFyIHI9bigiSWJodSIpLGk9bigieG5jOSIpLmNvbmNhdCgibGVuZ3RoIiwicHJvdG90eXBlIik7dC5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzfHxmdW5jdGlvbihlKXtyZXR1cm4gcihlLGkpfX0sbnZicDpmdW5jdGlvbihlLHQpe3ZhciBuPS9eKGF0dHJzfHByb3BzfG9ufG5hdGl2ZU9ufGNsYXNzfHN0eWxlfGhvb2spJC87ZnVuY3Rpb24gcihlLHQpe3JldHVybiBmdW5jdGlvbigpe2UmJmUuYXBwbHkodGhpcyxhcmd1bWVudHMpLHQmJnQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVkdWNlKGZ1bmN0aW9uKGUsdCl7dmFyIGksbyxzLGEsbDtmb3IocyBpbiB0KWlmKGk9ZVtzXSxvPXRbc10saSYmbi50ZXN0KHMpKWlmKCJjbGFzcyI9PT1zJiYoInN0cmluZyI9PXR5cGVvZiBpJiYobD1pLGVbc109aT17fSxpW2xdPSEwKSwic3RyaW5nIj09dHlwZW9mIG8mJihsPW8sdFtzXT1vPXt9LG9bbF09ITApKSwib24iPT09c3x8Im5hdGl2ZU9uIj09PXN8fCJob29rIj09PXMpZm9yKGEgaW4gbylpW2FdPXIoaVthXSxvW2FdKTtlbHNlIGlmKEFycmF5LmlzQXJyYXkoaSkpZVtzXT1pLmNvbmNhdChvKTtlbHNlIGlmKEFycmF5LmlzQXJyYXkobykpZVtzXT1baV0uY29uY2F0KG8pO2Vsc2UgZm9yKGEgaW4gbylpW2FdPW9bYV07ZWxzZSBlW3NdPXRbc107cmV0dXJuIGV9LHt9KX19LG9KbHQ6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCJjR0cyIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0LG4saSxvPXt9O3JldHVybiBlPyhyLmZvckVhY2goZS5zcGxpdCgiXG4iKSxmdW5jdGlvbihlKXtpPWUuaW5kZXhPZigiOiIpLHQ9ci50cmltKGUuc3Vic3RyKDAsaSkpLnRvTG93ZXJDYXNlKCksbj1yLnRyaW0oZS5zdWJzdHIoaSsxKSksdCYmKG9bdF09b1t0XT9vW3RdKyIsICIrbjpuKX0pLG8pOm99fSxvcmJTOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBpPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLG4pLGkubD0hMCxpLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsImEiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPSIvZGlzdC8iLG4obi5zPTI0NCl9KHswOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt2YXIgcyxhPWU9ZXx8e30sbD10eXBlb2YgZS5kZWZhdWx0OyJvYmplY3QiIT09bCYmImZ1bmN0aW9uIiE9PWx8fChzPWUsYT1lLmRlZmF1bHQpO3ZhciB1LGM9ImZ1bmN0aW9uIj09dHlwZW9mIGE/YS5vcHRpb25zOmE7aWYodCYmKGMucmVuZGVyPXQucmVuZGVyLGMuc3RhdGljUmVuZGVyRm5zPXQuc3RhdGljUmVuZGVyRm5zLGMuX2NvbXBpbGVkPSEwKSxuJiYoYy5mdW5jdGlvbmFsPSEwKSxpJiYoYy5fc2NvcGVJZD1pKSxvPyh1PWZ1bmN0aW9uKGUpeyhlPWV8fHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fHx0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCl8fCJ1bmRlZmluZWQiPT10eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfX3x8KGU9X19WVUVfU1NSX0NPTlRFWFRfXyksciYmci5jYWxsKHRoaXMsZSksZSYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChvKX0sYy5fc3NyUmVnaXN0ZXI9dSk6ciYmKHU9ciksdSl7dmFyIGQ9Yy5mdW5jdGlvbmFsLGY9ZD9jLnJlbmRlcjpjLmJlZm9yZUNyZWF0ZTtkPyhjLl9pbmplY3RTdHlsZXM9dSxjLnJlbmRlcj1mdW5jdGlvbihlLHQpe3JldHVybiB1LmNhbGwodCksZihlLHQpfSk6Yy5iZWZvcmVDcmVhdGU9Zj9bXS5jb25jYXQoZix1KTpbdV19cmV0dXJue2VzTW9kdWxlOnMsZXhwb3J0czphLG9wdGlvbnM6Y319fSwyNDQ6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHIsaT1uKDI0NSksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07by5kZWZhdWx0Lmluc3RhbGw9ZnVuY3Rpb24oZSl7ZS5jb21wb25lbnQoby5kZWZhdWx0Lm5hbWUsby5kZWZhdWx0KX0sdC5kZWZhdWx0PW8uZGVmYXVsdH0sMjQ1OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oMjQ2KSxpPW4ubihyKSxvPW4oMCkoaS5hLG51bGwsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1vLmV4cG9ydHN9LDI0NjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMCx0LmRlZmF1bHQ9e25hbWU6IkVsVGFnIixwcm9wczp7dGV4dDpTdHJpbmcsY2xvc2FibGU6Qm9vbGVhbix0eXBlOlN0cmluZyxoaXQ6Qm9vbGVhbixkaXNhYmxlVHJhbnNpdGlvbnM6Qm9vbGVhbixjb2xvcjpTdHJpbmcsc2l6ZTpTdHJpbmd9LG1ldGhvZHM6e2hhbmRsZUNsb3NlOmZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCksdGhpcy4kZW1pdCgiY2xvc2UiLGUpfX0sY29tcHV0ZWQ6e3RhZ1NpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaXplfHwodGhpcy4kRUxFTUVOVHx8e30pLnNpemV9fSxyZW5kZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9ZSgic3BhbiIse2NsYXNzOlsiZWwtdGFnIix0aGlzLnR5cGU/ImVsLXRhZy0tIit0aGlzLnR5cGU6IiIsdGhpcy50YWdTaXplPyJlbC10YWctLSIrdGhpcy50YWdTaXplOiIiLHsiaXMtaGl0Ijp0aGlzLmhpdH1dLHN0eWxlOntiYWNrZ3JvdW5kQ29sb3I6dGhpcy5jb2xvcn19LFt0aGlzLiRzbG90cy5kZWZhdWx0LHRoaXMuY2xvc2FibGUmJmUoImkiLHtjbGFzczoiZWwtdGFnX19jbG9zZSBlbC1pY29uLWNsb3NlIixvbjp7Y2xpY2s6dGhpcy5oYW5kbGVDbG9zZX19LFtdKV0pO3JldHVybiB0aGlzLmRpc2FibGVUcmFuc2l0aW9ucz90OmUoInRyYW5zaXRpb24iLHthdHRyczp7bmFtZToiZWwtem9vbS1pbi1jZW50ZXIifX0sW3RdKX19fX0pfSxwMWI2OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiY0dHMiIpO2UuZXhwb3J0cz1yLmlzU3RhbmRhcmRCcm93c2VyRW52KCk/e3dyaXRlOmZ1bmN0aW9uKGUsdCxuLGksbyxzKXt2YXIgYT1bXTthLnB1c2goZSsiPSIrZW5jb2RlVVJJQ29tcG9uZW50KHQpKSxyLmlzTnVtYmVyKG4pJiZhLnB1c2goImV4cGlyZXM9IituZXcgRGF0ZShuKS50b0dNVFN0cmluZygpKSxyLmlzU3RyaW5nKGkpJiZhLnB1c2goInBhdGg9IitpKSxyLmlzU3RyaW5nKG8pJiZhLnB1c2goImRvbWFpbj0iK28pLCEwPT09cyYmYS5wdXNoKCJzZWN1cmUiKSxkb2N1bWVudC5jb29raWU9YS5qb2luKCI7ICIpfSxyZWFkOmZ1bmN0aW9uKGUpe3ZhciB0PWRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCIoXnw7XFxzKikoIitlKyIpPShbXjtdKikiKSk7cmV0dXJuIHQ/ZGVjb2RlVVJJQ29tcG9uZW50KHRbM10pOm51bGx9LHJlbW92ZTpmdW5jdGlvbihlKXt0aGlzLndyaXRlKGUsIiIsRGF0ZS5ub3coKS04NjRlNSl9fTp7d3JpdGU6ZnVuY3Rpb24oKXt9LHJlYWQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0scmVtb3ZlOmZ1bmN0aW9uKCl7fX19LHBCdEc6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuISghZXx8IWUuX19DQU5DRUxfXyl9fSxwRllnOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByPXMobigiWnppcCIpKSxpPXMobigiNVFWdyIpKSxvPSJmdW5jdGlvbiI9PXR5cGVvZiBpLmRlZmF1bHQmJiJzeW1ib2wiPT10eXBlb2Ygci5kZWZhdWx0P2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBpLmRlZmF1bHQmJmUuY29uc3RydWN0b3I9PT1pLmRlZmF1bHQmJmUhPT1pLmRlZmF1bHQucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiBlfTtmdW5jdGlvbiBzKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX10LmRlZmF1bHQ9ImZ1bmN0aW9uIj09dHlwZW9mIGkuZGVmYXVsdCYmInN5bWJvbCI9PT1vKHIuZGVmYXVsdCk/ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWU/InVuZGVmaW5lZCI6byhlKX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBpLmRlZmF1bHQmJmUuY29uc3RydWN0b3I9PT1pLmRlZmF1bHQmJmUhPT1pLmRlZmF1bHQucHJvdG90eXBlPyJzeW1ib2wiOnZvaWQgMD09PWU/InVuZGVmaW5lZCI6byhlKX19LHB4RzQ6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlLmFwcGx5KG51bGwsdCl9fX0scTRsZTpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBpPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLG4pLGkubD0hMCxpLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsImEiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPSIvZGlzdC8iLG4obi5zPTE3NCl9KHsxNjpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJFS1RWIil9LDE3NDpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcixpPW4oMTc1KSxvPShyPWkpJiZyLl9fZXNNb2R1bGU/cjp7ZGVmYXVsdDpyfTtvLmRlZmF1bHQuaW5zdGFsbD1mdW5jdGlvbihlKXtlLmNvbXBvbmVudChvLmRlZmF1bHQubmFtZSxvLmRlZmF1bHQpfSx0LmRlZmF1bHQ9by5kZWZhdWx0fSwxNzU6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9YShuKDE2KSksaT1hKG4oMjUpKSxvPWEobig5KSkscz1uKDIpO2Z1bmN0aW9uIGEoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBsPTEsdT17ZGVmYXVsdDp7b3JkZXI6IiJ9LHNlbGVjdGlvbjp7d2lkdGg6NDgsbWluV2lkdGg6NDgscmVhbFdpZHRoOjQ4LG9yZGVyOiIiLGNsYXNzTmFtZToiZWwtdGFibGUtY29sdW1uLS1zZWxlY3Rpb24ifSxleHBhbmQ6e3dpZHRoOjQ4LG1pbldpZHRoOjQ4LHJlYWxXaWR0aDo0OCxvcmRlcjoiIn0saW5kZXg6e3dpZHRoOjQ4LG1pbldpZHRoOjQ4LHJlYWxXaWR0aDo0OCxvcmRlcjoiIn19LGM9e3NlbGVjdGlvbjp7cmVuZGVySGVhZGVyOmZ1bmN0aW9uKGUsdCl7dmFyIG49dC5zdG9yZTtyZXR1cm4gZSgiZWwtY2hlY2tib3giLHthdHRyczp7ZGlzYWJsZWQ6bi5zdGF0ZXMuZGF0YSYmMD09PW4uc3RhdGVzLmRhdGEubGVuZ3RoLGluZGV0ZXJtaW5hdGU6bi5zdGF0ZXMuc2VsZWN0aW9uLmxlbmd0aD4wJiYhdGhpcy5pc0FsbFNlbGVjdGVkLHZhbHVlOnRoaXMuaXNBbGxTZWxlY3RlZH0sbmF0aXZlT246e2NsaWNrOnRoaXMudG9nZ2xlQWxsU2VsZWN0aW9ufX0sW10pfSxyZW5kZXJDZWxsOmZ1bmN0aW9uKGUsdCl7dmFyIG49dC5yb3cscj10LmNvbHVtbixpPXQuc3RvcmUsbz10LiRpbmRleDtyZXR1cm4gZSgiZWwtY2hlY2tib3giLHtuYXRpdmVPbjp7Y2xpY2s6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuc3RvcFByb3BhZ2F0aW9uKCl9fSxhdHRyczp7dmFsdWU6aS5pc1NlbGVjdGVkKG4pLGRpc2FibGVkOiEhci5zZWxlY3RhYmxlJiYhci5zZWxlY3RhYmxlLmNhbGwobnVsbCxuLG8pfSxvbjp7aW5wdXQ6ZnVuY3Rpb24oKXtpLmNvbW1pdCgicm93U2VsZWN0ZWRDaGFuZ2VkIixuKX19fSxbXSl9LHNvcnRhYmxlOiExLHJlc2l6YWJsZTohMX0saW5kZXg6e3JlbmRlckhlYWRlcjpmdW5jdGlvbihlLHQpe3JldHVybiB0LmNvbHVtbi5sYWJlbHx8IiMifSxyZW5kZXJDZWxsOmZ1bmN0aW9uKGUsdCl7dmFyIG49dC4kaW5kZXgscj1uKzEsaT10LmNvbHVtbi5pbmRleDtyZXR1cm4ibnVtYmVyIj09dHlwZW9mIGk/cj1uK2k6ImZ1bmN0aW9uIj09dHlwZW9mIGkmJihyPWkobikpLGUoImRpdiIsbnVsbCxbcl0pfSxzb3J0YWJsZTohMX0sZXhwYW5kOntyZW5kZXJIZWFkZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5jb2x1bW4ubGFiZWx8fCIifSxyZW5kZXJDZWxsOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10LnJvdztyZXR1cm4gZSgiZGl2Iix7Y2xhc3M6ImVsLXRhYmxlX19leHBhbmQtaWNvbiAiKyh0LnN0b3JlLnN0YXRlcy5leHBhbmRSb3dzLmluZGV4T2Yocik+LTE/ImVsLXRhYmxlX19leHBhbmQtaWNvbi0tZXhwYW5kZWQiOiIiKSxvbjp7Y2xpY2s6ZnVuY3Rpb24oZSl7cmV0dXJuIG4uaGFuZGxlRXhwYW5kQ2xpY2socixlKX19fSxbZSgiaSIse2NsYXNzOiJlbC1pY29uIGVsLWljb24tYXJyb3ctcmlnaHQifSxbXSldKX0sc29ydGFibGU6ITEscmVzaXphYmxlOiExLGNsYXNzTmFtZToiZWwtdGFibGVfX2V4cGFuZC1jb2x1bW4ifX0sZD1mdW5jdGlvbihlLHQpe3ZhciBuPXQucm93LHI9dC5jb2x1bW4saT10LiRpbmRleCxvPXIucHJvcGVydHksYT1vJiYoMCxzLmdldFByb3BCeVBhdGgpKG4sbykudjtyZXR1cm4gciYmci5mb3JtYXR0ZXI/ci5mb3JtYXR0ZXIobixyLGEsaSk6YX0sZj1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwIT09ZSYmKGU9cGFyc2VJbnQoZSwxMCksaXNOYU4oZSkmJihlPW51bGwpKSxlfSxoPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDAhPT1lJiYoZT1wYXJzZUludChlLDEwKSxpc05hTihlKSYmKGU9ODApKSxlfTt0LmRlZmF1bHQ9e25hbWU6IkVsVGFibGVDb2x1bW4iLHByb3BzOnt0eXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OiJkZWZhdWx0In0sbGFiZWw6U3RyaW5nLGNsYXNzTmFtZTpTdHJpbmcsbGFiZWxDbGFzc05hbWU6U3RyaW5nLHByb3BlcnR5OlN0cmluZyxwcm9wOlN0cmluZyx3aWR0aDp7fSxtaW5XaWR0aDp7fSxyZW5kZXJIZWFkZXI6RnVuY3Rpb24sc29ydGFibGU6e3R5cGU6W1N0cmluZyxCb29sZWFuXSxkZWZhdWx0OiExfSxzb3J0TWV0aG9kOkZ1bmN0aW9uLHNvcnRCeTpbU3RyaW5nLEZ1bmN0aW9uLEFycmF5XSxyZXNpemFibGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjb250ZXh0Ont9LGNvbHVtbktleTpTdHJpbmcsYWxpZ246U3RyaW5nLGhlYWRlckFsaWduOlN0cmluZyxzaG93VG9vbHRpcFdoZW5PdmVyZmxvdzpCb29sZWFuLHNob3dPdmVyZmxvd1Rvb2x0aXA6Qm9vbGVhbixmaXhlZDpbQm9vbGVhbixTdHJpbmddLGZvcm1hdHRlcjpGdW5jdGlvbixzZWxlY3RhYmxlOkZ1bmN0aW9uLHJlc2VydmVTZWxlY3Rpb246Qm9vbGVhbixmaWx0ZXJNZXRob2Q6RnVuY3Rpb24sZmlsdGVyZWRWYWx1ZTpBcnJheSxmaWx0ZXJzOkFycmF5LGZpbHRlclBsYWNlbWVudDpTdHJpbmcsZmlsdGVyTXVsdGlwbGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxpbmRleDpbTnVtYmVyLEZ1bmN0aW9uXSxzb3J0T3JkZXJzOnt0eXBlOkFycmF5LGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm5bImFzY2VuZGluZyIsImRlc2NlbmRpbmciLG51bGxdfSx2YWxpZGF0b3I6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuZXZlcnkoZnVuY3Rpb24oZSl7cmV0dXJuWyJhc2NlbmRpbmciLCJkZXNjZW5kaW5nIixudWxsXS5pbmRleE9mKGUpPi0xfSl9fX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntpc1N1YkNvbHVtbjohMSxjb2x1bW5zOltdfX0sYmVmb3JlQ3JlYXRlOmZ1bmN0aW9uKCl7dGhpcy5yb3c9e30sdGhpcy5jb2x1bW49e30sdGhpcy4kaW5kZXg9MH0sY29tcG9uZW50czp7RWxDaGVja2JveDpyLmRlZmF1bHQsRWxUYWc6aS5kZWZhdWx0fSxjb21wdXRlZDp7b3duZXI6ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy4kcGFyZW50O2UmJiFlLnRhYmxlSWQ7KWU9ZS4kcGFyZW50O3JldHVybiBlfSxjb2x1bW5PclRhYmxlUGFyZW50OmZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuJHBhcmVudDtlJiYhZS50YWJsZUlkJiYhZS5jb2x1bW5JZDspZT1lLiRwYXJlbnQ7cmV0dXJuIGV9fSxjcmVhdGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLmN1c3RvbVJlbmRlcj10aGlzLiRvcHRpb25zLnJlbmRlcix0aGlzLiRvcHRpb25zLnJlbmRlcj1mdW5jdGlvbih0KXtyZXR1cm4gdCgiZGl2IixlLiRzbG90cy5kZWZhdWx0KX07dmFyIHQ9dGhpcy5jb2x1bW5PclRhYmxlUGFyZW50LG49dGhpcy5vd25lcjt0aGlzLmlzU3ViQ29sdW1uPW4hPT10LHRoaXMuY29sdW1uSWQ9KHQudGFibGVJZHx8dC5jb2x1bW5JZCkrIl9jb2x1bW5fIitsKys7dmFyIHI9dGhpcy50eXBlLGk9Zih0aGlzLndpZHRoKSxzPWgodGhpcy5taW5XaWR0aCksYT1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O2Zvcih2YXIgciBpbigwLG8uZGVmYXVsdCkobix1W2V8fCJkZWZhdWx0Il0pLHQpaWYodC5oYXNPd25Qcm9wZXJ0eShyKSl7dmFyIGk9dFtyXTt2b2lkIDAhPT1pJiYobltyXT1pKX1yZXR1cm4gbi5taW5XaWR0aHx8KG4ubWluV2lkdGg9ODApLG4ucmVhbFdpZHRoPXZvaWQgMD09PW4ud2lkdGg/bi5taW5XaWR0aDpuLndpZHRoLG59KHIse2lkOnRoaXMuY29sdW1uSWQsY29sdW1uS2V5OnRoaXMuY29sdW1uS2V5LGxhYmVsOnRoaXMubGFiZWwsY2xhc3NOYW1lOnRoaXMuY2xhc3NOYW1lLGxhYmVsQ2xhc3NOYW1lOnRoaXMubGFiZWxDbGFzc05hbWUscHJvcGVydHk6dGhpcy5wcm9wfHx0aGlzLnByb3BlcnR5LHR5cGU6cixyZW5kZXJDZWxsOm51bGwscmVuZGVySGVhZGVyOnRoaXMucmVuZGVySGVhZGVyLG1pbldpZHRoOnMsd2lkdGg6aSxpc0NvbHVtbkdyb3VwOiExLGNvbnRleHQ6dGhpcy5jb250ZXh0LGFsaWduOnRoaXMuYWxpZ24/ImlzLSIrdGhpcy5hbGlnbjpudWxsLGhlYWRlckFsaWduOnRoaXMuaGVhZGVyQWxpZ24/ImlzLSIrdGhpcy5oZWFkZXJBbGlnbjp0aGlzLmFsaWduPyJpcy0iK3RoaXMuYWxpZ246bnVsbCxzb3J0YWJsZToiIj09PXRoaXMuc29ydGFibGV8fHRoaXMuc29ydGFibGUsc29ydE1ldGhvZDp0aGlzLnNvcnRNZXRob2Qsc29ydEJ5OnRoaXMuc29ydEJ5LHJlc2l6YWJsZTp0aGlzLnJlc2l6YWJsZSxzaG93T3ZlcmZsb3dUb29sdGlwOnRoaXMuc2hvd092ZXJmbG93VG9vbHRpcHx8dGhpcy5zaG93VG9vbHRpcFdoZW5PdmVyZmxvdyxmb3JtYXR0ZXI6dGhpcy5mb3JtYXR0ZXIsc2VsZWN0YWJsZTp0aGlzLnNlbGVjdGFibGUscmVzZXJ2ZVNlbGVjdGlvbjp0aGlzLnJlc2VydmVTZWxlY3Rpb24sZml4ZWQ6IiI9PT10aGlzLmZpeGVkfHx0aGlzLmZpeGVkLGZpbHRlck1ldGhvZDp0aGlzLmZpbHRlck1ldGhvZCxmaWx0ZXJzOnRoaXMuZmlsdGVycyxmaWx0ZXJhYmxlOnRoaXMuZmlsdGVyc3x8dGhpcy5maWx0ZXJNZXRob2QsZmlsdGVyTXVsdGlwbGU6dGhpcy5maWx0ZXJNdWx0aXBsZSxmaWx0ZXJPcGVuZWQ6ITEsZmlsdGVyZWRWYWx1ZTp0aGlzLmZpbHRlcmVkVmFsdWV8fFtdLGZpbHRlclBsYWNlbWVudDp0aGlzLmZpbHRlclBsYWNlbWVudHx8IiIsaW5kZXg6dGhpcy5pbmRleCxzb3J0T3JkZXJzOnRoaXMuc29ydE9yZGVyc30pLHA9Y1tyXXx8e307T2JqZWN0LmtleXMocCkuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1wW2VdO3ZvaWQgMCE9PXQmJigicmVuZGVySGVhZGVyIj09PWUmJigic2VsZWN0aW9uIj09PXImJmFbZV0/Y29uc29sZS53YXJuKCJbRWxlbWVudCBXYXJuXVtUYWJsZUNvbHVtbl1TZWxlY3Rpb24gY29sdW1uIGRvZXNuJ3QgYWxsb3cgdG8gc2V0IHJlbmRlci1oZWFkZXIgZnVuY3Rpb24uIik6dD1hW2VdfHx0KSxhW2VdPSJjbGFzc05hbWUiPT09ZT9hW2VdKyIgIit0OnQpfSksdGhpcy5yZW5kZXJIZWFkZXImJmNvbnNvbGUud2FybigiW0VsZW1lbnQgV2Fybl1bVGFibGVDb2x1bW5dQ29tcGFyaW5nIHRvIHJlbmRlci1oZWFkZXIsIHNjb3BlZC1zbG90IGhlYWRlciBpcyBlYXNpZXIgdG8gdXNlLiBXZSByZWNvbW1lbmQgdXNlcnMgdG8gdXNlIHNjb3BlZC1zbG90IGhlYWRlci4iKSx0aGlzLmNvbHVtbkNvbmZpZz1hO3ZhciBtPWEucmVuZGVyQ2VsbCx2PXRoaXM7aWYoImV4cGFuZCI9PT1yKXJldHVybiBuLnJlbmRlckV4cGFuZGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHYuJHNjb3BlZFNsb3RzLmRlZmF1bHQ/di4kc2NvcGVkU2xvdHMuZGVmYXVsdCh0KTp2LiRzbG90cy5kZWZhdWx0fSx2b2lkKGEucmVuZGVyQ2VsbD1mdW5jdGlvbihlLHQpe3JldHVybiBlKCJkaXYiLHtjbGFzczoiY2VsbCJ9LFttKGUsdCx0aGlzLl9yZW5kZXJQcm94eSldKX0pO2EucmVuZGVyQ2VsbD1mdW5jdGlvbihlLHQpe3JldHVybiB2LiRzY29wZWRTbG90cy5kZWZhdWx0JiYobT1mdW5jdGlvbigpe3JldHVybiB2LiRzY29wZWRTbG90cy5kZWZhdWx0KHQpfSksbXx8KG09ZCksdi5zaG93T3ZlcmZsb3dUb29sdGlwfHx2LnNob3dUb29sdGlwV2hlbk92ZXJmbG93P2UoImRpdiIse2NsYXNzOiJjZWxsIGVsLXRvb2x0aXAiLHN0eWxlOnt3aWR0aDoodC5jb2x1bW4ucmVhbFdpZHRofHx0LmNvbHVtbi53aWR0aCktMSsicHgifX0sW20oZSx0KV0pOmUoImRpdiIse2NsYXNzOiJjZWxsIn0sW20oZSx0KV0pfX0sZGVzdHJveWVkOmZ1bmN0aW9uKCl7aWYodGhpcy4kcGFyZW50KXt2YXIgZT10aGlzLiRwYXJlbnQ7dGhpcy5vd25lci5zdG9yZS5jb21taXQoInJlbW92ZUNvbHVtbiIsdGhpcy5jb2x1bW5Db25maWcsdGhpcy5pc1N1YkNvbHVtbj9lLmNvbHVtbkNvbmZpZzpudWxsKX19LHdhdGNoOntsYWJlbDpmdW5jdGlvbihlKXt0aGlzLmNvbHVtbkNvbmZpZyYmKHRoaXMuY29sdW1uQ29uZmlnLmxhYmVsPWUpfSxwcm9wOmZ1bmN0aW9uKGUpe3RoaXMuY29sdW1uQ29uZmlnJiYodGhpcy5jb2x1bW5Db25maWcucHJvcGVydHk9ZSl9LHByb3BlcnR5OmZ1bmN0aW9uKGUpe3RoaXMuY29sdW1uQ29uZmlnJiYodGhpcy5jb2x1bW5Db25maWcucHJvcGVydHk9ZSl9LGZpbHRlcnM6ZnVuY3Rpb24oZSl7dGhpcy5jb2x1bW5Db25maWcmJih0aGlzLmNvbHVtbkNvbmZpZy5maWx0ZXJzPWUpfSxmaWx0ZXJNdWx0aXBsZTpmdW5jdGlvbihlKXt0aGlzLmNvbHVtbkNvbmZpZyYmKHRoaXMuY29sdW1uQ29uZmlnLmZpbHRlck11bHRpcGxlPWUpfSxhbGlnbjpmdW5jdGlvbihlKXt0aGlzLmNvbHVtbkNvbmZpZyYmKHRoaXMuY29sdW1uQ29uZmlnLmFsaWduPWU/ImlzLSIrZTpudWxsLHRoaXMuaGVhZGVyQWxpZ258fCh0aGlzLmNvbHVtbkNvbmZpZy5oZWFkZXJBbGlnbj1lPyJpcy0iK2U6bnVsbCkpfSxoZWFkZXJBbGlnbjpmdW5jdGlvbihlKXt0aGlzLmNvbHVtbkNvbmZpZyYmKHRoaXMuY29sdW1uQ29uZmlnLmhlYWRlckFsaWduPSJpcy0iKyhlfHx0aGlzLmFsaWduKSl9LHdpZHRoOmZ1bmN0aW9uKGUpe3RoaXMuY29sdW1uQ29uZmlnJiYodGhpcy5jb2x1bW5Db25maWcud2lkdGg9ZihlKSx0aGlzLm93bmVyLnN0b3JlLnNjaGVkdWxlTGF5b3V0KCkpfSxtaW5XaWR0aDpmdW5jdGlvbihlKXt0aGlzLmNvbHVtbkNvbmZpZyYmKHRoaXMuY29sdW1uQ29uZmlnLm1pbldpZHRoPWgoZSksdGhpcy5vd25lci5zdG9yZS5zY2hlZHVsZUxheW91dCgpKX0sZml4ZWQ6ZnVuY3Rpb24oZSl7dGhpcy5jb2x1bW5Db25maWcmJih0aGlzLmNvbHVtbkNvbmZpZy5maXhlZD1lLHRoaXMub3duZXIuc3RvcmUuc2NoZWR1bGVMYXlvdXQoITApKX0sc29ydGFibGU6ZnVuY3Rpb24oZSl7dGhpcy5jb2x1bW5Db25maWcmJih0aGlzLmNvbHVtbkNvbmZpZy5zb3J0YWJsZT1lKX0saW5kZXg6ZnVuY3Rpb24oZSl7dGhpcy5jb2x1bW5Db25maWcmJih0aGlzLmNvbHVtbkNvbmZpZy5pbmRleD1lKX0sZm9ybWF0dGVyOmZ1bmN0aW9uKGUpe3RoaXMuY29sdW1uQ29uZmlnJiYodGhpcy5jb2x1bW5Db25maWcuZm9ybWF0dGVyPWUpfSxjbGFzc05hbWU6ZnVuY3Rpb24oZSl7dGhpcy5jb2x1bW5Db25maWcmJih0aGlzLmNvbHVtbkNvbmZpZy5jbGFzc05hbWU9ZSl9LGxhYmVsQ2xhc3NOYW1lOmZ1bmN0aW9uKGUpe3RoaXMuY29sdW1uQ29uZmlnJiYodGhpcy5jb2x1bW5Db25maWcubGFiZWxDbGFzc05hbWU9ZSl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXMub3duZXIsbj10aGlzLmNvbHVtbk9yVGFibGVQYXJlbnQscj12b2lkIDA7cj10aGlzLmlzU3ViQ29sdW1uP1tdLmluZGV4T2YuY2FsbChuLiRlbC5jaGlsZHJlbix0aGlzLiRlbCk6W10uaW5kZXhPZi5jYWxsKG4uJHJlZnMuaGlkZGVuQ29sdW1ucy5jaGlsZHJlbix0aGlzLiRlbCksdGhpcy4kc2NvcGVkU2xvdHMuaGVhZGVyJiYoInNlbGVjdGlvbiI9PT10aGlzLnR5cGU/Y29uc29sZS53YXJuKCJbRWxlbWVudCBXYXJuXVtUYWJsZUNvbHVtbl1TZWxlY3Rpb24gY29sdW1uIGRvZXNuJ3QgYWxsb3cgdG8gc2V0IHNjb3BlZC1zbG90IGhlYWRlci4iKTp0aGlzLmNvbHVtbkNvbmZpZy5yZW5kZXJIZWFkZXI9ZnVuY3Rpb24odCxuKXtyZXR1cm4gZS4kc2NvcGVkU2xvdHMuaGVhZGVyKG4pfSksdC5zdG9yZS5jb21taXQoImluc2VydENvbHVtbiIsdGhpcy5jb2x1bW5Db25maWcscix0aGlzLmlzU3ViQ29sdW1uP24uY29sdW1uQ29uZmlnOm51bGwpfX19LDI6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigieWxESiIpfSwyNTpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJvcmJTIil9LDk6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiam1hQyIpfX0pfSxxQVJQOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigibE9uSiIpO2UuZXhwb3J0cy5mPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgZnVuY3Rpb24oZSl7dmFyIHQsbjt0aGlzLnByb21pc2U9bmV3IGUoZnVuY3Rpb24oZSxyKXtpZih2b2lkIDAhPT10fHx2b2lkIDAhPT1uKXRocm93IFR5cGVFcnJvcigiQmFkIFByb21pc2UgY29uc3RydWN0b3IiKTt0PWUsbj1yfSksdGhpcy5yZXNvbHZlPXIodCksdGhpcy5yZWplY3Q9cihuKX0oZSl9fSxxUmZJOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ/ZS5yZXBsYWNlKC9cLyskLywiIikrIi8iK3QucmVwbGFjZSgvXlwvKy8sIiIpOmV9fSxxaW82OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCJldkQ1IiksaT1uKCI3N1BsIiksbz1uKCJsa3RqIik7ZS5leHBvcnRzPW4oIitFMzkiKT9PYmplY3QuZGVmaW5lUHJvcGVydGllczpmdW5jdGlvbihlLHQpe2koZSk7Zm9yKHZhciBuLHM9byh0KSxhPXMubGVuZ3RoLGw9MDthPmw7KXIuZihlLG49c1tsKytdLHRbbl0pO3JldHVybiBlfX0scXViWTpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBpPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLG4pLGkubD0hMCxpLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsImEiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPSIvZGlzdC8iLG4obi5zPTYxKX0oezA6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4scixpLG8pe3ZhciBzLGE9ZT1lfHx7fSxsPXR5cGVvZiBlLmRlZmF1bHQ7Im9iamVjdCIhPT1sJiYiZnVuY3Rpb24iIT09bHx8KHM9ZSxhPWUuZGVmYXVsdCk7dmFyIHUsYz0iZnVuY3Rpb24iPT10eXBlb2YgYT9hLm9wdGlvbnM6YTtpZih0JiYoYy5yZW5kZXI9dC5yZW5kZXIsYy5zdGF0aWNSZW5kZXJGbnM9dC5zdGF0aWNSZW5kZXJGbnMsYy5fY29tcGlsZWQ9ITApLG4mJihjLmZ1bmN0aW9uYWw9ITApLGkmJihjLl9zY29wZUlkPWkpLG8/KHU9ZnVuY3Rpb24oZSl7KGU9ZXx8dGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR8fHRoaXMucGFyZW50JiZ0aGlzLnBhcmVudC4kdm5vZGUmJnRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KXx8InVuZGVmaW5lZCI9PXR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9ffHwoZT1fX1ZVRV9TU1JfQ09OVEVYVF9fKSxyJiZyLmNhbGwodGhpcyxlKSxlJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cyYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG8pfSxjLl9zc3JSZWdpc3Rlcj11KTpyJiYodT1yKSx1KXt2YXIgZD1jLmZ1bmN0aW9uYWwsZj1kP2MucmVuZGVyOmMuYmVmb3JlQ3JlYXRlO2Q/KGMuX2luamVjdFN0eWxlcz11LGMucmVuZGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHUuY2FsbCh0KSxmKGUsdCl9KTpjLmJlZm9yZUNyZWF0ZT1mP1tdLmNvbmNhdChmLHUpOlt1XX1yZXR1cm57ZXNNb2R1bGU6cyxleHBvcnRzOmEsb3B0aW9uczpjfX19LDE6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiZlBsbCIpfSwxMzpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCI3SjlzIil9LDYxOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9big2Miksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07by5kZWZhdWx0Lmluc3RhbGw9ZnVuY3Rpb24oZSl7ZS5jb21wb25lbnQoby5kZWZhdWx0Lm5hbWUsby5kZWZhdWx0KX0sdC5kZWZhdWx0PW8uZGVmYXVsdH0sNjI6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9big2MyksaT1uLm4ociksbz1uKDY0KSxzPW4oMCkoaS5hLG8uYSwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PXMuZXhwb3J0c30sNjM6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9cyhuKDEzKSksaT1zKG4oOCkpLG89cyhuKDEpKTtmdW5jdGlvbiBzKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX10LmRlZmF1bHQ9e25hbWU6IkVsRGlhbG9nIixtaXhpbnM6W3IuZGVmYXVsdCxvLmRlZmF1bHQsaS5kZWZhdWx0XSxwcm9wczp7dGl0bGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6IiJ9LG1vZGFsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sbW9kYWxBcHBlbmRUb0JvZHk6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxhcHBlbmRUb0JvZHk6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxsb2NrU2Nyb2xsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sY2xvc2VPbkNsaWNrTW9kYWw6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjbG9zZU9uUHJlc3NFc2NhcGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxzaG93Q2xvc2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSx3aWR0aDpTdHJpbmcsZnVsbHNjcmVlbjpCb29sZWFuLGN1c3RvbUNsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OiIifSx0b3A6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6IjE1dmgifSxiZWZvcmVDbG9zZTpGdW5jdGlvbixjZW50ZXI6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntjbG9zZWQ6ITF9fSx3YXRjaDp7dmlzaWJsZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2U/KHRoaXMuY2xvc2VkPSExLHRoaXMuJGVtaXQoIm9wZW4iKSx0aGlzLiRlbC5hZGRFdmVudExpc3RlbmVyKCJzY3JvbGwiLHRoaXMudXBkYXRlUG9wcGVyKSx0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3QuJHJlZnMuZGlhbG9nLnNjcm9sbFRvcD0wfSksdGhpcy5hcHBlbmRUb0JvZHkmJmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy4kZWwpKToodGhpcy4kZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigic2Nyb2xsIix0aGlzLnVwZGF0ZVBvcHBlciksdGhpcy5jbG9zZWR8fHRoaXMuJGVtaXQoImNsb3NlIikpfX0sY29tcHV0ZWQ6e3N0eWxlOmZ1bmN0aW9uKCl7dmFyIGU9e307cmV0dXJuIHRoaXMuZnVsbHNjcmVlbnx8KGUubWFyZ2luVG9wPXRoaXMudG9wLHRoaXMud2lkdGgmJihlLndpZHRoPXRoaXMud2lkdGgpKSxlfX0sbWV0aG9kczp7Z2V0TWlncmF0aW5nQ29uZmlnOmZ1bmN0aW9uKCl7cmV0dXJue3Byb3BzOntzaXplOiJzaXplIGlzIHJlbW92ZWQuIn19fSxoYW5kbGVXcmFwcGVyQ2xpY2s6ZnVuY3Rpb24oKXt0aGlzLmNsb3NlT25DbGlja01vZGFsJiZ0aGlzLmhhbmRsZUNsb3NlKCl9LGhhbmRsZUNsb3NlOmZ1bmN0aW9uKCl7ImZ1bmN0aW9uIj09dHlwZW9mIHRoaXMuYmVmb3JlQ2xvc2U/dGhpcy5iZWZvcmVDbG9zZSh0aGlzLmhpZGUpOnRoaXMuaGlkZSgpfSxoaWRlOmZ1bmN0aW9uKGUpeyExIT09ZSYmKHRoaXMuJGVtaXQoInVwZGF0ZTp2aXNpYmxlIiwhMSksdGhpcy4kZW1pdCgiY2xvc2UiKSx0aGlzLmNsb3NlZD0hMCl9LHVwZGF0ZVBvcHBlcjpmdW5jdGlvbigpe3RoaXMuYnJvYWRjYXN0KCJFbFNlbGVjdERyb3Bkb3duIiwidXBkYXRlUG9wcGVyIiksdGhpcy5icm9hZGNhc3QoIkVsRHJvcGRvd25NZW51IiwidXBkYXRlUG9wcGVyIil9LGFmdGVyRW50ZXI6ZnVuY3Rpb24oKXt0aGlzLiRlbWl0KCJvcGVuZWQiKX0sYWZ0ZXJMZWF2ZTpmdW5jdGlvbigpe3RoaXMuJGVtaXQoImNsb3NlZCIpfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMudmlzaWJsZSYmKHRoaXMucmVuZGVyZWQ9ITAsdGhpcy5vcGVuKCksdGhpcy5hcHBlbmRUb0JvZHkmJmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy4kZWwpKX0sZGVzdHJveWVkOmZ1bmN0aW9uKCl7dGhpcy5hcHBlbmRUb0JvZHkmJnRoaXMuJGVsJiZ0aGlzLiRlbC5wYXJlbnROb2RlJiZ0aGlzLiRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuJGVsKX19fSw2NDpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oInRyYW5zaXRpb24iLHthdHRyczp7bmFtZToiZGlhbG9nLWZhZGUifSxvbjp7ImFmdGVyLWVudGVyIjplLmFmdGVyRW50ZXIsImFmdGVyLWxlYXZlIjplLmFmdGVyTGVhdmV9fSxbbigiZGl2Iix7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6ZS52aXNpYmxlLGV4cHJlc3Npb246InZpc2libGUifV0sc3RhdGljQ2xhc3M6ImVsLWRpYWxvZ19fd3JhcHBlciIsb246e2NsaWNrOmZ1bmN0aW9uKHQpe2lmKHQudGFyZ2V0IT09dC5jdXJyZW50VGFyZ2V0KXJldHVybiBudWxsO2UuaGFuZGxlV3JhcHBlckNsaWNrKHQpfX19LFtuKCJkaXYiLHtyZWY6ImRpYWxvZyIsc3RhdGljQ2xhc3M6ImVsLWRpYWxvZyIsY2xhc3M6W3siaXMtZnVsbHNjcmVlbiI6ZS5mdWxsc2NyZWVuLCJlbC1kaWFsb2ctLWNlbnRlciI6ZS5jZW50ZXJ9LGUuY3VzdG9tQ2xhc3NdLHN0eWxlOmUuc3R5bGUsYXR0cnM6e3JvbGU6ImRpYWxvZyIsImFyaWEtbW9kYWwiOiJ0cnVlIiwiYXJpYS1sYWJlbCI6ZS50aXRsZXx8ImRpYWxvZyJ9fSxbbigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLWRpYWxvZ19faGVhZGVyIn0sW2UuX3QoInRpdGxlIixbbigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC1kaWFsb2dfX3RpdGxlIn0sW2UuX3YoZS5fcyhlLnRpdGxlKSldKV0pLGUuc2hvd0Nsb3NlP24oImJ1dHRvbiIse3N0YXRpY0NsYXNzOiJlbC1kaWFsb2dfX2hlYWRlcmJ0biIsYXR0cnM6e3R5cGU6ImJ1dHRvbiIsImFyaWEtbGFiZWwiOiJDbG9zZSJ9LG9uOntjbGljazplLmhhbmRsZUNsb3NlfX0sW24oImkiLHtzdGF0aWNDbGFzczoiZWwtZGlhbG9nX19jbG9zZSBlbC1pY29uIGVsLWljb24tY2xvc2UifSldKTplLl9lKCldLDIpLGUucmVuZGVyZWQ/bigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLWRpYWxvZ19fYm9keSJ9LFtlLl90KCJkZWZhdWx0IildLDIpOmUuX2UoKSxlLiRzbG90cy5mb290ZXI/bigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLWRpYWxvZ19fZm9vdGVyIn0sW2UuX3QoImZvb3RlciIpXSwyKTplLl9lKCldKV0pXSl9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9LDg6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiYVc1bCIpfX0pfSxxeUp6OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigiK1pNSiIpLGk9bigia00yRSIpLG89bigic0IzZSIpLHM9bigibXNYaSIpLGE9bigiTWh5eCIpLGw9bigiUVJHNCIpLHU9bigiZkJRMiIpLGM9bigiM2ZzMiIpO2koaS5TK2kuRiohbigiZFkweSIpKGZ1bmN0aW9uKGUpe0FycmF5LmZyb20oZSl9KSwiQXJyYXkiLHtmcm9tOmZ1bmN0aW9uKGUpe3ZhciB0LG4saSxkLGY9byhlKSxoPSJmdW5jdGlvbiI9PXR5cGVvZiB0aGlzP3RoaXM6QXJyYXkscD1hcmd1bWVudHMubGVuZ3RoLG09cD4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsdj12b2lkIDAhPT1tLGc9MCx5PWMoZik7aWYodiYmKG09cihtLHA+Mj9hcmd1bWVudHNbMl06dm9pZCAwLDIpKSx2b2lkIDA9PXl8fGg9PUFycmF5JiZhKHkpKWZvcihuPW5ldyBoKHQ9bChmLmxlbmd0aCkpO3Q+ZztnKyspdShuLGcsdj9tKGZbZ10sZyk6ZltnXSk7ZWxzZSBmb3IoZD15LmNhbGwoZiksbj1uZXcgaDshKGk9ZC5uZXh0KCkpLmRvbmU7ZysrKXUobixnLHY/cyhkLG0sW2kudmFsdWUsZ10sITApOmkudmFsdWUpO3JldHVybiBuLmxlbmd0aD1nLG59fSl9LHJqajA6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPSJ1bmRlZmluZWQiIT10eXBlb2YgZG9jdW1lbnQ7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiBERUJVRyYmREVCVUcmJiFyKXRocm93IG5ldyBFcnJvcigidnVlLXN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50LiBVc2UgeyB0YXJnZXQ6ICdub2RlJyB9IGluIHlvdXIgV2VicGFjayBjb25maWcgdG8gaW5kaWNhdGUgYSBzZXJ2ZXItcmVuZGVyaW5nIGVudmlyb25tZW50LiIpO3ZhciBpPW4oInRUVmsiKSxvPXt9LHM9ciYmKGRvY3VtZW50LmhlYWR8fGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoZWFkIilbMF0pLGE9bnVsbCxsPTAsdT0hMSxjPWZ1bmN0aW9uKCl7fSxkPW51bGwsZj0iZGF0YS12dWUtc3NyLWlkIixoPSJ1bmRlZmluZWQiIT10eXBlb2YgbmF2aWdhdG9yJiYvbXNpZSBbNi05XVxiLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSk7ZnVuY3Rpb24gcChlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIG49ZVt0XSxyPW9bbi5pZF07aWYocil7ci5yZWZzKys7Zm9yKHZhciBpPTA7aTxyLnBhcnRzLmxlbmd0aDtpKyspci5wYXJ0c1tpXShuLnBhcnRzW2ldKTtmb3IoO2k8bi5wYXJ0cy5sZW5ndGg7aSsrKXIucGFydHMucHVzaCh2KG4ucGFydHNbaV0pKTtyLnBhcnRzLmxlbmd0aD5uLnBhcnRzLmxlbmd0aCYmKHIucGFydHMubGVuZ3RoPW4ucGFydHMubGVuZ3RoKX1lbHNle3ZhciBzPVtdO2ZvcihpPTA7aTxuLnBhcnRzLmxlbmd0aDtpKyspcy5wdXNoKHYobi5wYXJ0c1tpXSkpO29bbi5pZF09e2lkOm4uaWQscmVmczoxLHBhcnRzOnN9fX19ZnVuY3Rpb24gbSgpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0eWxlIik7cmV0dXJuIGUudHlwZT0idGV4dC9jc3MiLHMuYXBwZW5kQ2hpbGQoZSksZX1mdW5jdGlvbiB2KGUpe3ZhciB0LG4scj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJzdHlsZVsiK2YrJ349IicrZS5pZCsnIl0nKTtpZihyKXtpZih1KXJldHVybiBjO3IucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKX1pZihoKXt2YXIgaT1sKys7cj1hfHwoYT1tKCkpLHQ9Xy5iaW5kKG51bGwscixpLCExKSxuPV8uYmluZChudWxsLHIsaSwhMCl9ZWxzZSByPW0oKSx0PWZ1bmN0aW9uKGUsdCl7dmFyIG49dC5jc3Mscj10Lm1lZGlhLGk9dC5zb3VyY2VNYXA7ciYmZS5zZXRBdHRyaWJ1dGUoIm1lZGlhIixyKTtkLnNzcklkJiZlLnNldEF0dHJpYnV0ZShmLHQuaWQpO2kmJihuKz0iXG4vKiMgc291cmNlVVJMPSIraS5zb3VyY2VzWzBdKyIgKi8iLG4rPSJcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShpKSkpKSsiICovIik7aWYoZS5zdHlsZVNoZWV0KWUuc3R5bGVTaGVldC5jc3NUZXh0PW47ZWxzZXtmb3IoO2UuZmlyc3RDaGlsZDspZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpO2UuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobikpfX0uYmluZChudWxsLHIpLG49ZnVuY3Rpb24oKXtyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocil9O3JldHVybiB0KGUpLGZ1bmN0aW9uKHIpe2lmKHIpe2lmKHIuY3NzPT09ZS5jc3MmJnIubWVkaWE9PT1lLm1lZGlhJiZyLnNvdXJjZU1hcD09PWUuc291cmNlTWFwKXJldHVybjt0KGU9cil9ZWxzZSBuKCl9fWUuZXhwb3J0cz1mdW5jdGlvbihlLHQsbixyKXt1PW4sZD1yfHx7fTt2YXIgcz1pKGUsdCk7cmV0dXJuIHAocyksZnVuY3Rpb24odCl7Zm9yKHZhciBuPVtdLHI9MDtyPHMubGVuZ3RoO3IrKyl7dmFyIGE9c1tyXTsobD1vW2EuaWRdKS5yZWZzLS0sbi5wdXNoKGwpfXQ/cChzPWkoZSx0KSk6cz1bXTtmb3Iocj0wO3I8bi5sZW5ndGg7cisrKXt2YXIgbDtpZigwPT09KGw9bltyXSkucmVmcyl7Zm9yKHZhciB1PTA7dTxsLnBhcnRzLmxlbmd0aDt1KyspbC5wYXJ0c1t1XSgpO2RlbGV0ZSBvW2wuaWRdfX19fTt2YXIgZyx5PShnPVtdLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGdbZV09dCxnLmZpbHRlcihCb29sZWFuKS5qb2luKCJcbiIpfSk7ZnVuY3Rpb24gXyhlLHQsbixyKXt2YXIgaT1uPyIiOnIuY3NzO2lmKGUuc3R5bGVTaGVldCllLnN0eWxlU2hlZXQuY3NzVGV4dD15KHQsaSk7ZWxzZXt2YXIgbz1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShpKSxzPWUuY2hpbGROb2RlcztzW3RdJiZlLnJlbW92ZUNoaWxkKHNbdF0pLHMubGVuZ3RoP2UuaW5zZXJ0QmVmb3JlKG8sc1t0XSk6ZS5hcHBlbmRDaGlsZChvKX19fSxzM3VlOmZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihyKXtpZih0W3JdKXJldHVybiB0W3JdLmV4cG9ydHM7dmFyIGk9dFtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxyKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCwiYSIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9Ii9kaXN0LyIsbihuLnM9MTMwKX0oezA6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4scixpLG8pe3ZhciBzLGE9ZT1lfHx7fSxsPXR5cGVvZiBlLmRlZmF1bHQ7Im9iamVjdCIhPT1sJiYiZnVuY3Rpb24iIT09bHx8KHM9ZSxhPWUuZGVmYXVsdCk7dmFyIHUsYz0iZnVuY3Rpb24iPT10eXBlb2YgYT9hLm9wdGlvbnM6YTtpZih0JiYoYy5yZW5kZXI9dC5yZW5kZXIsYy5zdGF0aWNSZW5kZXJGbnM9dC5zdGF0aWNSZW5kZXJGbnMsYy5fY29tcGlsZWQ9ITApLG4mJihjLmZ1bmN0aW9uYWw9ITApLGkmJihjLl9zY29wZUlkPWkpLG8/KHU9ZnVuY3Rpb24oZSl7KGU9ZXx8dGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR8fHRoaXMucGFyZW50JiZ0aGlzLnBhcmVudC4kdm5vZGUmJnRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KXx8InVuZGVmaW5lZCI9PXR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9ffHwoZT1fX1ZVRV9TU1JfQ09OVEVYVF9fKSxyJiZyLmNhbGwodGhpcyxlKSxlJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cyYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG8pfSxjLl9zc3JSZWdpc3Rlcj11KTpyJiYodT1yKSx1KXt2YXIgZD1jLmZ1bmN0aW9uYWwsZj1kP2MucmVuZGVyOmMuYmVmb3JlQ3JlYXRlO2Q/KGMuX2luamVjdFN0eWxlcz11LGMucmVuZGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHUuY2FsbCh0KSxmKGUsdCl9KTpjLmJlZm9yZUNyZWF0ZT1mP1tdLmNvbmNhdChmLHUpOlt1XX1yZXR1cm57ZXNNb2R1bGU6cyxleHBvcnRzOmEsb3B0aW9uczpjfX19LDE6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiZlBsbCIpfSwxMzA6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHIsaT1uKDEzMSksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07by5kZWZhdWx0Lmluc3RhbGw9ZnVuY3Rpb24oZSl7ZS5jb21wb25lbnQoby5kZWZhdWx0Lm5hbWUsby5kZWZhdWx0KX0sdC5kZWZhdWx0PW8uZGVmYXVsdH0sMTMxOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oMTMyKSxpPW4ubihyKSxvPW4oMTMzKSxzPW4oMCkoaS5hLG8uYSwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PXMuZXhwb3J0c30sMTMyOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigxKSxvPShyPWkpJiZyLl9fZXNNb2R1bGU/cjp7ZGVmYXVsdDpyfTt0LmRlZmF1bHQ9e25hbWU6IkVsQ2hlY2tib3hHcm91cCIsY29tcG9uZW50TmFtZToiRWxDaGVja2JveEdyb3VwIixtaXhpbnM6W28uZGVmYXVsdF0saW5qZWN0OntlbEZvcm1JdGVtOntkZWZhdWx0OiIifX0scHJvcHM6e3ZhbHVlOnt9LGRpc2FibGVkOkJvb2xlYW4sbWluOk51bWJlcixtYXg6TnVtYmVyLHNpemU6U3RyaW5nLGZpbGw6U3RyaW5nLHRleHRDb2xvcjpTdHJpbmd9LGNvbXB1dGVkOntfZWxGb3JtSXRlbVNpemU6ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5lbEZvcm1JdGVtfHx7fSkuZWxGb3JtSXRlbVNpemV9LGNoZWNrYm94R3JvdXBTaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2l6ZXx8dGhpcy5fZWxGb3JtSXRlbVNpemV8fCh0aGlzLiRFTEVNRU5UfHx7fSkuc2l6ZX19LHdhdGNoOnt2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLmRpc3BhdGNoKCJFbEZvcm1JdGVtIiwiZWwuZm9ybS5jaGFuZ2UiLFtlXSl9fX19LDEzMzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRjcmVhdGVFbGVtZW50O3JldHVybih0aGlzLl9zZWxmLl9jfHxlKSgiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLWNoZWNrYm94LWdyb3VwIixhdHRyczp7cm9sZToiZ3JvdXAiLCJhcmlhLWxhYmVsIjoiY2hlY2tib3gtZ3JvdXAifX0sW3RoaXMuX3QoImRlZmF1bHQiKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9fSl9LHNCM2U6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oIjUyZ0MiKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdChyKGUpKX19LHQ4cWo6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LG4scixpKXtyZXR1cm4gZS5jb25maWc9dCxuJiYoZS5jb2RlPW4pLGUucmVxdWVzdD1yLGUucmVzcG9uc2U9aSxlfX0sdDh4OTpmdW5jdGlvbihlLHQsbil7dmFyIHI9bigiNzdQbCIpLGk9bigibE9uSiIpLG89bigiZFN6ZCIpKCJzcGVjaWVzIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIG4scz1yKGUpLmNvbnN0cnVjdG9yO3JldHVybiB2b2lkIDA9PT1zfHx2b2lkIDA9PShuPXIocylbb10pP3Q6aShuKX19LHRJRk46ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCJjR0cyIiksaT1uKCJKUCt6Iiksbz1uKCJYbVdNIikscz1uKCJLQ0xZIik7ZnVuY3Rpb24gYShlKXt2YXIgdD1uZXcgbyhlKSxuPWkoby5wcm90b3R5cGUucmVxdWVzdCx0KTtyZXR1cm4gci5leHRlbmQobixvLnByb3RvdHlwZSx0KSxyLmV4dGVuZChuLHQpLG59dmFyIGw9YShzKTtsLkF4aW9zPW8sbC5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGEoci5tZXJnZShzLGUpKX0sbC5DYW5jZWw9bigiZFZPUCIpLGwuQ2FuY2VsVG9rZW49bigiY1d4eSIpLGwuaXNDYW5jZWw9bigicEJ0RyIpLGwuYWxsPWZ1bmN0aW9uKGUpe3JldHVybiBQcm9taXNlLmFsbChlKX0sbC5zcHJlYWQ9bigicHhHNCIpLGUuZXhwb3J0cz1sLGUuZXhwb3J0cy5kZWZhdWx0PWx9LCJ0TGErIjpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBpPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLG4pLGkubD0hMCxpLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsImEiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPSIvZGlzdC8iLG4obi5zPTE3Nil9KHswOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt2YXIgcyxhPWU9ZXx8e30sbD10eXBlb2YgZS5kZWZhdWx0OyJvYmplY3QiIT09bCYmImZ1bmN0aW9uIiE9PWx8fChzPWUsYT1lLmRlZmF1bHQpO3ZhciB1LGM9ImZ1bmN0aW9uIj09dHlwZW9mIGE/YS5vcHRpb25zOmE7aWYodCYmKGMucmVuZGVyPXQucmVuZGVyLGMuc3RhdGljUmVuZGVyRm5zPXQuc3RhdGljUmVuZGVyRm5zLGMuX2NvbXBpbGVkPSEwKSxuJiYoYy5mdW5jdGlvbmFsPSEwKSxpJiYoYy5fc2NvcGVJZD1pKSxvPyh1PWZ1bmN0aW9uKGUpeyhlPWV8fHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fHx0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCl8fCJ1bmRlZmluZWQiPT10eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfX3x8KGU9X19WVUVfU1NSX0NPTlRFWFRfXyksciYmci5jYWxsKHRoaXMsZSksZSYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChvKX0sYy5fc3NyUmVnaXN0ZXI9dSk6ciYmKHU9ciksdSl7dmFyIGQ9Yy5mdW5jdGlvbmFsLGY9ZD9jLnJlbmRlcjpjLmJlZm9yZUNyZWF0ZTtkPyhjLl9pbmplY3RTdHlsZXM9dSxjLnJlbmRlcj1mdW5jdGlvbihlLHQpe3JldHVybiB1LmNhbGwodCksZihlLHQpfSk6Yy5iZWZvcmVDcmVhdGU9Zj9bXS5jb25jYXQoZix1KTpbdV19cmV0dXJue2VzTW9kdWxlOnMsZXhwb3J0czphLG9wdGlvbnM6Y319fSwxOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImZQbGwiKX0sMTA6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiSVNZVyIpfSwxMTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMCx0LmV4dHJhY3RUaW1lRm9ybWF0PXQuZXh0cmFjdERhdGVGb3JtYXQ9dC5uZXh0WWVhcj10LnByZXZZZWFyPXQubmV4dE1vbnRoPXQucHJldk1vbnRoPXQuY2hhbmdlWWVhck1vbnRoQW5kQ2xhbXBEYXRlPXQudGltZVdpdGhpblJhbmdlPXQubGltaXRUaW1lUmFuZ2U9dC5jbGVhck1pbGxpc2Vjb25kcz10LmNsZWFyVGltZT10Lm1vZGlmeVdpdGhUaW1lU3RyaW5nPXQubW9kaWZ5VGltZT10Lm1vZGlmeURhdGU9dC5yYW5nZT10LmdldFJhbmdlTWludXRlcz10LmdldFJhbmdlSG91cnM9dC5nZXRXZWVrTnVtYmVyPXQuZ2V0U3RhcnREYXRlT2ZNb250aD10Lm5leHREYXRlPXQucHJldkRhdGU9dC5nZXRGaXJzdERheU9mTW9udGg9dC5nZXREYXlDb3VudE9mWWVhcj10LmdldERheUNvdW50T2ZNb250aD10LnBhcnNlRGF0ZT10LmZvcm1hdERhdGU9dC5pc0RhdGVPYmplY3Q9dC5pc0RhdGU9dC50b0RhdGU9dm9pZCAwO3ZhciByLGk9bigyOSksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn0scz1uKDEyKTt2YXIgYT1bInN1biIsIm1vbiIsInR1ZSIsIndlZCIsInRodSIsImZyaSIsInNhdCJdLGw9WyJqYW4iLCJmZWIiLCJtYXIiLCJhcHIiLCJtYXkiLCJqdW4iLCJqdWwiLCJhdWciLCJzZXAiLCJvY3QiLCJub3YiLCJkZWMiXSx1PWZ1bmN0aW9uKCl7cmV0dXJue2RheU5hbWVzU2hvcnQ6YS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuKDAscy50KSgiZWwuZGF0ZXBpY2tlci53ZWVrcy4iK2UpfSksZGF5TmFtZXM6YS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuKDAscy50KSgiZWwuZGF0ZXBpY2tlci53ZWVrcy4iK2UpfSksbW9udGhOYW1lc1Nob3J0OmwubWFwKGZ1bmN0aW9uKGUpe3JldHVybigwLHMudCkoImVsLmRhdGVwaWNrZXIubW9udGhzLiIrZSl9KSxtb250aE5hbWVzOmwubWFwKGZ1bmN0aW9uKGUsdCl7cmV0dXJuKDAscy50KSgiZWwuZGF0ZXBpY2tlci5tb250aCIrKHQrMSkpfSksYW1QbTpbImFtIiwicG0iXX19LGM9dC50b0RhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGQoZSk/bmV3IERhdGUoZSk6bnVsbH0sZD10LmlzRGF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9PWUmJnZvaWQgMCE9PWUmJighaXNOYU4obmV3IERhdGUoZSkuZ2V0VGltZSgpKSYmIUFycmF5LmlzQXJyYXkoZSkpfSxmPSh0LmlzRGF0ZU9iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIERhdGV9LHQuZm9ybWF0RGF0ZT1mdW5jdGlvbihlLHQpe3JldHVybihlPWMoZSkpP28uZGVmYXVsdC5mb3JtYXQoZSx0fHwieXl5eS1NTS1kZCIsdSgpKToiIn0sdC5wYXJzZURhdGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gby5kZWZhdWx0LnBhcnNlKGUsdHx8Inl5eXktTU0tZGQiLHUoKSl9KSxoPXQuZ2V0RGF5Q291bnRPZk1vbnRoPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIDM9PT10fHw1PT09dHx8OD09PXR8fDEwPT09dD8zMDoxPT09dD9lJTQ9PTAmJmUlMTAwIT0wfHxlJTQwMD09MD8yOToyODozMX0scD0odC5nZXREYXlDb3VudE9mWWVhcj1mdW5jdGlvbihlKXtyZXR1cm4gZSU0MDA9PTB8fGUlMTAwIT0wJiZlJTQ9PTA/MzY2OjM2NX0sdC5nZXRGaXJzdERheU9mTW9udGg9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IERhdGUoZS5nZXRUaW1lKCkpO3JldHVybiB0LnNldERhdGUoMSksdC5nZXREYXkoKX0sdC5wcmV2RGF0ZT1mdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MTtyZXR1cm4gbmV3IERhdGUoZS5nZXRGdWxsWWVhcigpLGUuZ2V0TW9udGgoKSxlLmdldERhdGUoKS10KX0pO3QubmV4dERhdGU9ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjE7cmV0dXJuIG5ldyBEYXRlKGUuZ2V0RnVsbFllYXIoKSxlLmdldE1vbnRoKCksZS5nZXREYXRlKCkrdCl9LHQuZ2V0U3RhcnREYXRlT2ZNb250aD1mdW5jdGlvbihlLHQpe3ZhciBuPW5ldyBEYXRlKGUsdCwxKSxyPW4uZ2V0RGF5KCk7cmV0dXJuIHAobiwwPT09cj83OnIpfSx0LmdldFdlZWtOdW1iZXI9ZnVuY3Rpb24oZSl7aWYoIWQoZSkpcmV0dXJuIG51bGw7dmFyIHQ9bmV3IERhdGUoZS5nZXRUaW1lKCkpO3Quc2V0SG91cnMoMCwwLDAsMCksdC5zZXREYXRlKHQuZ2V0RGF0ZSgpKzMtKHQuZ2V0RGF5KCkrNiklNyk7dmFyIG49bmV3IERhdGUodC5nZXRGdWxsWWVhcigpLDAsNCk7cmV0dXJuIDErTWF0aC5yb3VuZCgoKHQuZ2V0VGltZSgpLW4uZ2V0VGltZSgpKS84NjRlNS0zKyhuLmdldERheSgpKzYpJTcpLzcpfSx0LmdldFJhbmdlSG91cnM9ZnVuY3Rpb24oZSl7dmFyIHQ9W10sbj1bXTtpZigoZXx8W10pLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9ZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUuZ2V0SG91cnMoKX0pO249bi5jb25jYXQoZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49W10scj1lO3I8PXQ7cisrKW4ucHVzaChyKTtyZXR1cm4gbn0odFswXSx0WzFdKSl9KSxuLmxlbmd0aClmb3IodmFyIHI9MDtyPDI0O3IrKyl0W3JdPS0xPT09bi5pbmRleE9mKHIpO2Vsc2UgZm9yKHZhciBpPTA7aTwyNDtpKyspdFtpXT0hMTtyZXR1cm4gdH07ZnVuY3Rpb24gbShlLHQsbixyKXtmb3IodmFyIGk9dDtpPG47aSsrKWVbaV09cn10LmdldFJhbmdlTWludXRlcz1mdW5jdGlvbihlLHQpe3ZhciBuPW5ldyBBcnJheSg2MCk7cmV0dXJuIGUubGVuZ3RoPjA/ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciByPWVbMF0saT1lWzFdLG89ci5nZXRIb3VycygpLHM9ci5nZXRNaW51dGVzKCksYT1pLmdldEhvdXJzKCksbD1pLmdldE1pbnV0ZXMoKTtvPT09dCYmYSE9PXQ/bShuLHMsNjAsITApOm89PT10JiZhPT09dD9tKG4scyxsKzEsITApOm8hPT10JiZhPT09dD9tKG4sMCxsKzEsITApOm88dCYmYT50JiZtKG4sMCw2MCwhMCl9KTptKG4sMCw2MCwhMCksbn0sdC5yYW5nZT1mdW5jdGlvbihlKXtyZXR1cm4gQXJyYXkuYXBwbHkobnVsbCx7bGVuZ3RoOmV9KS5tYXAoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdH0pfTt2YXIgdj10Lm1vZGlmeURhdGU9ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIG5ldyBEYXRlKHQsbixyLGUuZ2V0SG91cnMoKSxlLmdldE1pbnV0ZXMoKSxlLmdldFNlY29uZHMoKSxlLmdldE1pbGxpc2Vjb25kcygpKX0sZz10Lm1vZGlmeVRpbWU9ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIG5ldyBEYXRlKGUuZ2V0RnVsbFllYXIoKSxlLmdldE1vbnRoKCksZS5nZXREYXRlKCksdCxuLHIsZS5nZXRNaWxsaXNlY29uZHMoKSl9LHk9KHQubW9kaWZ5V2l0aFRpbWVTdHJpbmc9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbnVsbCE9ZSYmdD8odD1mKHQsIkhIOm1tOnNzIiksZyhlLHQuZ2V0SG91cnMoKSx0LmdldE1pbnV0ZXMoKSx0LmdldFNlY29uZHMoKSkpOmV9LHQuY2xlYXJUaW1lPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgRGF0ZShlLmdldEZ1bGxZZWFyKCksZS5nZXRNb250aCgpLGUuZ2V0RGF0ZSgpKX0sdC5jbGVhck1pbGxpc2Vjb25kcz1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IERhdGUoZS5nZXRGdWxsWWVhcigpLGUuZ2V0TW9udGgoKSxlLmdldERhdGUoKSxlLmdldEhvdXJzKCksZS5nZXRNaW51dGVzKCksZS5nZXRTZWNvbmRzKCksMCl9LHQubGltaXRUaW1lUmFuZ2U9ZnVuY3Rpb24oZSx0KXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06IkhIOm1tOnNzIjtpZigwPT09dC5sZW5ndGgpcmV0dXJuIGU7dmFyIHI9ZnVuY3Rpb24oZSl7cmV0dXJuIG8uZGVmYXVsdC5wYXJzZShvLmRlZmF1bHQuZm9ybWF0KGUsbiksbil9LGk9cihlKSxzPXQubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLm1hcChyKX0pO2lmKHMuc29tZShmdW5jdGlvbihlKXtyZXR1cm4gaT49ZVswXSYmaTw9ZVsxXX0pKXJldHVybiBlO3ZhciBhPXNbMF1bMF0sbD1zWzBdWzBdO3JldHVybiBzLmZvckVhY2goZnVuY3Rpb24oZSl7YT1uZXcgRGF0ZShNYXRoLm1pbihlWzBdLGEpKSxsPW5ldyBEYXRlKE1hdGgubWF4KGVbMV0sYSkpfSksdihpPGE/YTpsLGUuZ2V0RnVsbFllYXIoKSxlLmdldE1vbnRoKCksZS5nZXREYXRlKCkpfSksXz0odC50aW1lV2l0aGluUmFuZ2U9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB5KGUsdCxuKS5nZXRUaW1lKCk9PT1lLmdldFRpbWUoKX0sdC5jaGFuZ2VZZWFyTW9udGhBbmRDbGFtcERhdGU9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPU1hdGgubWluKGUuZ2V0RGF0ZSgpLGgodCxuKSk7cmV0dXJuIHYoZSx0LG4scil9KTt0LnByZXZNb250aD1mdW5jdGlvbihlKXt2YXIgdD1lLmdldEZ1bGxZZWFyKCksbj1lLmdldE1vbnRoKCk7cmV0dXJuIDA9PT1uP18oZSx0LTEsMTEpOl8oZSx0LG4tMSl9LHQubmV4dE1vbnRoPWZ1bmN0aW9uKGUpe3ZhciB0PWUuZ2V0RnVsbFllYXIoKSxuPWUuZ2V0TW9udGgoKTtyZXR1cm4gMTE9PT1uP18oZSx0KzEsMCk6XyhlLHQsbisxKX0sdC5wcmV2WWVhcj1mdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MSxuPWUuZ2V0RnVsbFllYXIoKSxyPWUuZ2V0TW9udGgoKTtyZXR1cm4gXyhlLG4tdCxyKX0sdC5uZXh0WWVhcj1mdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MSxuPWUuZ2V0RnVsbFllYXIoKSxyPWUuZ2V0TW9udGgoKTtyZXR1cm4gXyhlLG4rdCxyKX0sdC5leHRyYWN0RGF0ZUZvcm1hdD1mdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9cVz9tezEsMn18XFc/WlovZywiIikucmVwbGFjZSgvXFc/aHsxLDJ9fFxXP3N7MSwzfXxcVz9hL2dpLCIiKS50cmltKCl9LHQuZXh0cmFjdFRpbWVGb3JtYXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvXFc/RHsxLDJ9fFxXP0RvfFxXP2R7MSw0fXxcVz9NezEsNH18XFc/eXsyLDR9L2csIiIpLnRyaW0oKX19LDEyOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oInVyVzgiKX0sMTU6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigibXRyRCIpfSwxNzpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJmRUIrIil9LDE3NjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcixpPW4oMTc3KSxvPShyPWkpJiZyLl9fZXNNb2R1bGU/cjp7ZGVmYXVsdDpyfTtvLmRlZmF1bHQuaW5zdGFsbD1mdW5jdGlvbihlKXtlLmNvbXBvbmVudChvLmRlZmF1bHQubmFtZSxvLmRlZmF1bHQpfSx0LmRlZmF1bHQ9by5kZWZhdWx0fSwxNzc6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9cyhuKDI3KSksaT1zKG4oMTc4KSksbz1zKG4oMTg5KSk7ZnVuY3Rpb24gcyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIGE9ZnVuY3Rpb24oZSl7cmV0dXJuImRhdGVyYW5nZSI9PT1lfHwiZGF0ZXRpbWVyYW5nZSI9PT1lP28uZGVmYXVsdDppLmRlZmF1bHR9O3QuZGVmYXVsdD17bWl4aW5zOltyLmRlZmF1bHRdLG5hbWU6IkVsRGF0ZVBpY2tlciIscHJvcHM6e3R5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6ImRhdGUifSx0aW1lQXJyb3dDb250cm9sOkJvb2xlYW59LHdhdGNoOnt0eXBlOmZ1bmN0aW9uKGUpe3RoaXMucGlja2VyPyh0aGlzLnVubW91bnRQaWNrZXIoKSx0aGlzLnBhbmVsPWEoZSksdGhpcy5tb3VudFBpY2tlcigpKTp0aGlzLnBhbmVsPWEoZSl9fSxjcmVhdGVkOmZ1bmN0aW9uKCl7dGhpcy5wYW5lbD1hKHRoaXMudHlwZSl9fX0sMTc4OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oMTc5KSxpPW4ubihyKSxvPW4oMTg4KSxzPW4oMCkoaS5hLG8uYSwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PXMuZXhwb3J0c30sMTc5OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByPW4oMTEpLGk9ZihuKDEwKSksbz1mKG4oNSkpLHM9ZihuKDYpKSxhPWYobigxNSkpLGw9ZihuKDMxKSksdT1mKG4oMTgwKSksYz1mKG4oMTgzKSksZD1mKG4oNDkpKTtmdW5jdGlvbiBmKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX10LmRlZmF1bHQ9e21peGluczpbby5kZWZhdWx0XSxkaXJlY3RpdmVzOntDbGlja291dHNpZGU6aS5kZWZhdWx0fSx3YXRjaDp7c2hvd1RpbWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztlJiZ0aGlzLiRuZXh0VGljayhmdW5jdGlvbihlKXt2YXIgbj10LiRyZWZzLmlucHV0LiRlbDtuJiYodC5waWNrZXJXaWR0aD1uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKzEwKX0pfSx2YWx1ZTpmdW5jdGlvbihlKXsiZGF0ZXMiPT09dGhpcy5zZWxlY3Rpb25Nb2RlJiZ0aGlzLnZhbHVlfHwoKDAsci5pc0RhdGUpKGUpP3RoaXMuZGF0ZT1uZXcgRGF0ZShlKTp0aGlzLmRhdGU9dGhpcy5nZXREZWZhdWx0VmFsdWUoKSl9LGRlZmF1bHRWYWx1ZTpmdW5jdGlvbihlKXsoMCxyLmlzRGF0ZSkodGhpcy52YWx1ZSl8fCh0aGlzLmRhdGU9ZT9uZXcgRGF0ZShlKTpuZXcgRGF0ZSl9LHRpbWVQaWNrZXJWaXNpYmxlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7ZSYmdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXtyZXR1cm4gdC4kcmVmcy50aW1lcGlja2VyLmFkanVzdFNwaW5uZXJzKCl9KX0sc2VsZWN0aW9uTW9kZTpmdW5jdGlvbihlKXsibW9udGgiPT09ZT8ieWVhciI9PT10aGlzLmN1cnJlbnRWaWV3JiYibW9udGgiPT09dGhpcy5jdXJyZW50Vmlld3x8KHRoaXMuY3VycmVudFZpZXc9Im1vbnRoIik6ImRhdGVzIj09PWUmJih0aGlzLmN1cnJlbnRWaWV3PSJkYXRlIil9fSxtZXRob2RzOntwcm94eVRpbWVQaWNrZXJEYXRhUHJvcGVydGllczpmdW5jdGlvbigpe3ZhciBlLHQ9dGhpcyxuPWZ1bmN0aW9uKGUpe3QuJHJlZnMudGltZXBpY2tlci52YWx1ZT1lfSxyPWZ1bmN0aW9uKGUpe3QuJHJlZnMudGltZXBpY2tlci5kYXRlPWV9O3RoaXMuJHdhdGNoKCJ2YWx1ZSIsbiksdGhpcy4kd2F0Y2goImRhdGUiLHIpLGU9dGhpcy50aW1lRm9ybWF0LHQuJHJlZnMudGltZXBpY2tlci5mb3JtYXQ9ZSxuKHRoaXMudmFsdWUpLHIodGhpcy5kYXRlKX0saGFuZGxlQ2xlYXI6ZnVuY3Rpb24oKXt0aGlzLmRhdGU9dGhpcy5nZXREZWZhdWx0VmFsdWUoKSx0aGlzLiRlbWl0KCJwaWNrIixudWxsKX0sZW1pdDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcyxuPWFyZ3VtZW50cy5sZW5ndGgsaT1BcnJheShuPjE/bi0xOjApLG89MTtvPG47bysrKWlbby0xXT1hcmd1bWVudHNbb107aWYoZSlpZihBcnJheS5pc0FycmF5KGUpKXt2YXIgcz1lLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gdC5zaG93VGltZT8oMCxyLmNsZWFyTWlsbGlzZWNvbmRzKShlKTooMCxyLmNsZWFyVGltZSkoZSl9KTt0aGlzLiRlbWl0LmFwcGx5KHRoaXMsWyJwaWNrIixzXS5jb25jYXQoaSkpfWVsc2UgdGhpcy4kZW1pdC5hcHBseSh0aGlzLFsicGljayIsdGhpcy5zaG93VGltZT8oMCxyLmNsZWFyTWlsbGlzZWNvbmRzKShlKTooMCxyLmNsZWFyVGltZSkoZSldLmNvbmNhdChpKSk7ZWxzZSB0aGlzLiRlbWl0LmFwcGx5KHRoaXMsWyJwaWNrIixlXS5jb25jYXQoaSkpO3RoaXMudXNlcklucHV0RGF0ZT1udWxsLHRoaXMudXNlcklucHV0VGltZT1udWxsfSxzaG93TW9udGhQaWNrZXI6ZnVuY3Rpb24oKXt0aGlzLmN1cnJlbnRWaWV3PSJtb250aCJ9LHNob3dZZWFyUGlja2VyOmZ1bmN0aW9uKCl7dGhpcy5jdXJyZW50Vmlldz0ieWVhciJ9LHByZXZNb250aDpmdW5jdGlvbigpe3RoaXMuZGF0ZT0oMCxyLnByZXZNb250aCkodGhpcy5kYXRlKX0sbmV4dE1vbnRoOmZ1bmN0aW9uKCl7dGhpcy5kYXRlPSgwLHIubmV4dE1vbnRoKSh0aGlzLmRhdGUpfSxwcmV2WWVhcjpmdW5jdGlvbigpeyJ5ZWFyIj09PXRoaXMuY3VycmVudFZpZXc/dGhpcy5kYXRlPSgwLHIucHJldlllYXIpKHRoaXMuZGF0ZSwxMCk6dGhpcy5kYXRlPSgwLHIucHJldlllYXIpKHRoaXMuZGF0ZSl9LG5leHRZZWFyOmZ1bmN0aW9uKCl7InllYXIiPT09dGhpcy5jdXJyZW50Vmlldz90aGlzLmRhdGU9KDAsci5uZXh0WWVhcikodGhpcy5kYXRlLDEwKTp0aGlzLmRhdGU9KDAsci5uZXh0WWVhcikodGhpcy5kYXRlKX0saGFuZGxlU2hvcnRjdXRDbGljazpmdW5jdGlvbihlKXtlLm9uQ2xpY2smJmUub25DbGljayh0aGlzKX0saGFuZGxlVGltZVBpY2s6ZnVuY3Rpb24oZSx0LG4pe2lmKCgwLHIuaXNEYXRlKShlKSl7dmFyIGk9dGhpcy52YWx1ZT8oMCxyLm1vZGlmeVRpbWUpKHRoaXMudmFsdWUsZS5nZXRIb3VycygpLGUuZ2V0TWludXRlcygpLGUuZ2V0U2Vjb25kcygpKTooMCxyLm1vZGlmeVdpdGhUaW1lU3RyaW5nKSh0aGlzLmdldERlZmF1bHRWYWx1ZSgpLHRoaXMuZGVmYXVsdFRpbWUpO3RoaXMuZGF0ZT1pLHRoaXMuZW1pdCh0aGlzLmRhdGUsITApfWVsc2UgdGhpcy5lbWl0KGUsITApO258fCh0aGlzLnRpbWVQaWNrZXJWaXNpYmxlPXQpfSxoYW5kbGVUaW1lUGlja0Nsb3NlOmZ1bmN0aW9uKCl7dGhpcy50aW1lUGlja2VyVmlzaWJsZT0hMX0saGFuZGxlTW9udGhQaWNrOmZ1bmN0aW9uKGUpeyJtb250aCI9PT10aGlzLnNlbGVjdGlvbk1vZGU/KHRoaXMuZGF0ZT0oMCxyLm1vZGlmeURhdGUpKHRoaXMuZGF0ZSx0aGlzLnllYXIsZSwxKSx0aGlzLmVtaXQodGhpcy5kYXRlKSk6KHRoaXMuZGF0ZT0oMCxyLmNoYW5nZVllYXJNb250aEFuZENsYW1wRGF0ZSkodGhpcy5kYXRlLHRoaXMueWVhcixlKSx0aGlzLmN1cnJlbnRWaWV3PSJkYXRlIil9LGhhbmRsZURhdGVQaWNrOmZ1bmN0aW9uKGUpeyJkYXkiPT09dGhpcy5zZWxlY3Rpb25Nb2RlPyh0aGlzLmRhdGU9dGhpcy52YWx1ZT8oMCxyLm1vZGlmeURhdGUpKHRoaXMudmFsdWUsZS5nZXRGdWxsWWVhcigpLGUuZ2V0TW9udGgoKSxlLmdldERhdGUoKSk6KDAsci5tb2RpZnlXaXRoVGltZVN0cmluZykoZSx0aGlzLmRlZmF1bHRUaW1lKSx0aGlzLmVtaXQodGhpcy5kYXRlLHRoaXMuc2hvd1RpbWUpKToid2VlayI9PT10aGlzLnNlbGVjdGlvbk1vZGU/dGhpcy5lbWl0KGUuZGF0ZSk6ImRhdGVzIj09PXRoaXMuc2VsZWN0aW9uTW9kZSYmdGhpcy5lbWl0KGUsITApfSxoYW5kbGVZZWFyUGljazpmdW5jdGlvbihlKXsieWVhciI9PT10aGlzLnNlbGVjdGlvbk1vZGU/KHRoaXMuZGF0ZT0oMCxyLm1vZGlmeURhdGUpKHRoaXMuZGF0ZSxlLDAsMSksdGhpcy5lbWl0KHRoaXMuZGF0ZSkpOih0aGlzLmRhdGU9KDAsci5jaGFuZ2VZZWFyTW9udGhBbmRDbGFtcERhdGUpKHRoaXMuZGF0ZSxlLHRoaXMubW9udGgpLHRoaXMuY3VycmVudFZpZXc9Im1vbnRoIil9LGNoYW5nZVRvTm93OmZ1bmN0aW9uKCl7dGhpcy5kaXNhYmxlZERhdGUmJnRoaXMuZGlzYWJsZWREYXRlKG5ldyBEYXRlKXx8KHRoaXMuZGF0ZT1uZXcgRGF0ZSx0aGlzLmVtaXQodGhpcy5kYXRlKSl9LGNvbmZpcm06ZnVuY3Rpb24oKXtpZigiZGF0ZXMiPT09dGhpcy5zZWxlY3Rpb25Nb2RlKXRoaXMuZW1pdCh0aGlzLnZhbHVlKTtlbHNle3ZhciBlPXRoaXMudmFsdWU/dGhpcy52YWx1ZTooMCxyLm1vZGlmeVdpdGhUaW1lU3RyaW5nKSh0aGlzLmdldERlZmF1bHRWYWx1ZSgpLHRoaXMuZGVmYXVsdFRpbWUpO3RoaXMuZGF0ZT1uZXcgRGF0ZShlKSx0aGlzLmVtaXQoZSl9fSxyZXNldFZpZXc6ZnVuY3Rpb24oKXsibW9udGgiPT09dGhpcy5zZWxlY3Rpb25Nb2RlP3RoaXMuY3VycmVudFZpZXc9Im1vbnRoIjoieWVhciI9PT10aGlzLnNlbGVjdGlvbk1vZGU/dGhpcy5jdXJyZW50Vmlldz0ieWVhciI6dGhpcy5jdXJyZW50Vmlldz0iZGF0ZSJ9LGhhbmRsZUVudGVyOmZ1bmN0aW9uKCl7ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCJrZXlkb3duIix0aGlzLmhhbmRsZUtleWRvd24pfSxoYW5kbGVMZWF2ZTpmdW5jdGlvbigpe3RoaXMuJGVtaXQoImRvZGVzdHJveSIpLGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigia2V5ZG93biIsdGhpcy5oYW5kbGVLZXlkb3duKX0saGFuZGxlS2V5ZG93bjpmdW5jdGlvbihlKXt2YXIgdD1lLmtleUNvZGU7dGhpcy52aXNpYmxlJiYhdGhpcy50aW1lUGlja2VyVmlzaWJsZSYmKC0xIT09WzM4LDQwLDM3LDM5XS5pbmRleE9mKHQpJiYodGhpcy5oYW5kbGVLZXlDb250cm9sKHQpLGUuc3RvcFByb3BhZ2F0aW9uKCksZS5wcmV2ZW50RGVmYXVsdCgpKSwxMz09PXQmJm51bGw9PT10aGlzLnVzZXJJbnB1dERhdGUmJm51bGw9PT10aGlzLnVzZXJJbnB1dFRpbWUmJnRoaXMuZW1pdCh0aGlzLmRhdGUsITEpKX0saGFuZGxlS2V5Q29udHJvbDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9e3llYXI6ezM4Oi00LDQwOjQsMzc6LTEsMzk6MSxvZmZzZXQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5zZXRGdWxsWWVhcihlLmdldEZ1bGxZZWFyKCkrdCl9fSxtb250aDp7Mzg6LTQsNDA6NCwzNzotMSwzOToxLG9mZnNldDpmdW5jdGlvbihlLHQpe3JldHVybiBlLnNldE1vbnRoKGUuZ2V0TW9udGgoKSt0KX19LHdlZWs6ezM4Oi0xLDQwOjEsMzc6LTEsMzk6MSxvZmZzZXQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5zZXREYXRlKGUuZ2V0RGF0ZSgpKzcqdCl9fSxkYXk6ezM4Oi03LDQwOjcsMzc6LTEsMzk6MSxvZmZzZXQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5zZXREYXRlKGUuZ2V0RGF0ZSgpK3QpfX19LG49dGhpcy5zZWxlY3Rpb25Nb2RlLHI9dGhpcy5kYXRlLmdldFRpbWUoKSxpPW5ldyBEYXRlKHRoaXMuZGF0ZS5nZXRUaW1lKCkpO01hdGguYWJzKHItaS5nZXRUaW1lKCkpPD0zMTUzNmU2Oyl7dmFyIG89dFtuXTtpZihvLm9mZnNldChpLG9bZV0pLCJmdW5jdGlvbiIhPXR5cGVvZiB0aGlzLmRpc2FibGVkRGF0ZXx8IXRoaXMuZGlzYWJsZWREYXRlKGkpKXt0aGlzLmRhdGU9aSx0aGlzLiRlbWl0KCJwaWNrIixpLCEwKTticmVha319fSxoYW5kbGVWaXNpYmxlVGltZUNoYW5nZTpmdW5jdGlvbihlKXt2YXIgdD0oMCxyLnBhcnNlRGF0ZSkoZSx0aGlzLnRpbWVGb3JtYXQpO3QmJih0aGlzLmRhdGU9KDAsci5tb2RpZnlEYXRlKSh0LHRoaXMueWVhcix0aGlzLm1vbnRoLHRoaXMubW9udGhEYXRlKSx0aGlzLnVzZXJJbnB1dFRpbWU9bnVsbCx0aGlzLiRyZWZzLnRpbWVwaWNrZXIudmFsdWU9dGhpcy5kYXRlLHRoaXMudGltZVBpY2tlclZpc2libGU9ITEsdGhpcy5lbWl0KHRoaXMuZGF0ZSwhMCkpfSxoYW5kbGVWaXNpYmxlRGF0ZUNoYW5nZTpmdW5jdGlvbihlKXt2YXIgdD0oMCxyLnBhcnNlRGF0ZSkoZSx0aGlzLmRhdGVGb3JtYXQpO2lmKHQpe2lmKCJmdW5jdGlvbiI9PXR5cGVvZiB0aGlzLmRpc2FibGVkRGF0ZSYmdGhpcy5kaXNhYmxlZERhdGUodCkpcmV0dXJuO3RoaXMuZGF0ZT0oMCxyLm1vZGlmeVRpbWUpKHQsdGhpcy5kYXRlLmdldEhvdXJzKCksdGhpcy5kYXRlLmdldE1pbnV0ZXMoKSx0aGlzLmRhdGUuZ2V0U2Vjb25kcygpKSx0aGlzLnVzZXJJbnB1dERhdGU9bnVsbCx0aGlzLnJlc2V0VmlldygpLHRoaXMuZW1pdCh0aGlzLmRhdGUsITApfX0saXNWYWxpZFZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlJiYhaXNOYU4oZSkmJigiZnVuY3Rpb24iIT10eXBlb2YgdGhpcy5kaXNhYmxlZERhdGV8fCF0aGlzLmRpc2FibGVkRGF0ZShlKSl9LGdldERlZmF1bHRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRlZmF1bHRWYWx1ZT9uZXcgRGF0ZSh0aGlzLmRlZmF1bHRWYWx1ZSk6bmV3IERhdGV9fSxjb21wb25lbnRzOntUaW1lUGlja2VyOmwuZGVmYXVsdCxZZWFyVGFibGU6dS5kZWZhdWx0LE1vbnRoVGFibGU6Yy5kZWZhdWx0LERhdGVUYWJsZTpkLmRlZmF1bHQsRWxJbnB1dDpzLmRlZmF1bHQsRWxCdXR0b246YS5kZWZhdWx0fSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3BvcHBlckNsYXNzOiIiLGRhdGU6bmV3IERhdGUsdmFsdWU6IiIsZGVmYXVsdFZhbHVlOm51bGwsZGVmYXVsdFRpbWU6bnVsbCxzaG93VGltZTohMSxzZWxlY3Rpb25Nb2RlOiJkYXkiLHNob3J0Y3V0czoiIix2aXNpYmxlOiExLGN1cnJlbnRWaWV3OiJkYXRlIixkaXNhYmxlZERhdGU6IiIsZmlyc3REYXlPZldlZWs6NyxzaG93V2Vla051bWJlcjohMSx0aW1lUGlja2VyVmlzaWJsZTohMSxmb3JtYXQ6IiIsYXJyb3dDb250cm9sOiExLHVzZXJJbnB1dERhdGU6bnVsbCx1c2VySW5wdXRUaW1lOm51bGx9fSxjb21wdXRlZDp7eWVhcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGUuZ2V0RnVsbFllYXIoKX0sbW9udGg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kYXRlLmdldE1vbnRoKCl9LHdlZWs6ZnVuY3Rpb24oKXtyZXR1cm4oMCxyLmdldFdlZWtOdW1iZXIpKHRoaXMuZGF0ZSl9LG1vbnRoRGF0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGUuZ2V0RGF0ZSgpfSxmb290ZXJWaXNpYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2hvd1RpbWV8fCJkYXRlcyI9PT10aGlzLnNlbGVjdGlvbk1vZGV9LHZpc2libGVUaW1lOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPT10aGlzLnVzZXJJbnB1dFRpbWU/dGhpcy51c2VySW5wdXRUaW1lOigwLHIuZm9ybWF0RGF0ZSkodGhpcy52YWx1ZXx8dGhpcy5kZWZhdWx0VmFsdWUsdGhpcy50aW1lRm9ybWF0KX0sdmlzaWJsZURhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PXRoaXMudXNlcklucHV0RGF0ZT90aGlzLnVzZXJJbnB1dERhdGU6KDAsci5mb3JtYXREYXRlKSh0aGlzLnZhbHVlfHx0aGlzLmRlZmF1bHRWYWx1ZSx0aGlzLmRhdGVGb3JtYXQpfSx5ZWFyTGFiZWw6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnQoImVsLmRhdGVwaWNrZXIueWVhciIpO2lmKCJ5ZWFyIj09PXRoaXMuY3VycmVudFZpZXcpe3ZhciB0PTEwKk1hdGguZmxvb3IodGhpcy55ZWFyLzEwKTtyZXR1cm4gZT90KyIgIitlKyIgLSAiKyh0KzkpKyIgIitlOnQrIiAtICIrKHQrOSl9cmV0dXJuIHRoaXMueWVhcisiICIrZX0sdGltZUZvcm1hdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmZvcm1hdD8oMCxyLmV4dHJhY3RUaW1lRm9ybWF0KSh0aGlzLmZvcm1hdCk6IkhIOm1tOnNzIn0sZGF0ZUZvcm1hdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmZvcm1hdD8oMCxyLmV4dHJhY3REYXRlRm9ybWF0KSh0aGlzLmZvcm1hdCk6Inl5eXktTU0tZGQifX19fSwxODA6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigxODEpLGk9bi5uKHIpLG89bigxODIpLHM9bigwKShpLmEsby5hLCExLG51bGwsbnVsbCxudWxsKTt0LmRlZmF1bHQ9cy5leHBvcnRzfSwxODE6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9bigzKSxpPW4oMTEpLG89bigyKTt0LmRlZmF1bHQ9e3Byb3BzOntkaXNhYmxlZERhdGU6e30sdmFsdWU6e30sZGVmYXVsdFZhbHVlOnt2YWxpZGF0b3I6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PT1lfHxlIGluc3RhbmNlb2YgRGF0ZSYmKDAsaS5pc0RhdGUpKGUpfX0sZGF0ZTp7fX0sY29tcHV0ZWQ6e3N0YXJ0WWVhcjpmdW5jdGlvbigpe3JldHVybiAxMCpNYXRoLmZsb29yKHRoaXMuZGF0ZS5nZXRGdWxsWWVhcigpLzEwKX19LG1ldGhvZHM6e2dldENlbGxTdHlsZTpmdW5jdGlvbihlKXt2YXIgdD17fSxuPW5ldyBEYXRlO3JldHVybiB0LmRpc2FibGVkPSJmdW5jdGlvbiI9PXR5cGVvZiB0aGlzLmRpc2FibGVkRGF0ZSYmZnVuY3Rpb24oZSl7dmFyIHQ9KDAsaS5nZXREYXlDb3VudE9mWWVhcikoZSksbj1uZXcgRGF0ZShlLDAsMSk7cmV0dXJuKDAsaS5yYW5nZSkodCkubWFwKGZ1bmN0aW9uKGUpe3JldHVybigwLGkubmV4dERhdGUpKG4sZSl9KX0oZSkuZXZlcnkodGhpcy5kaXNhYmxlZERhdGUpLHQuY3VycmVudD0oMCxvLmFycmF5RmluZEluZGV4KSgoMCxvLmNvZXJjZVRydXRoeVZhbHVlVG9BcnJheSkodGhpcy52YWx1ZSksZnVuY3Rpb24odCl7cmV0dXJuIHQuZ2V0RnVsbFllYXIoKT09PWV9KT49MCx0LnRvZGF5PW4uZ2V0RnVsbFllYXIoKT09PWUsdC5kZWZhdWx0PXRoaXMuZGVmYXVsdFZhbHVlJiZ0aGlzLmRlZmF1bHRWYWx1ZS5nZXRGdWxsWWVhcigpPT09ZSx0fSxoYW5kbGVZZWFyVGFibGVDbGljazpmdW5jdGlvbihlKXt2YXIgdD1lLnRhcmdldDtpZigiQSI9PT10LnRhZ05hbWUpe2lmKCgwLHIuaGFzQ2xhc3MpKHQucGFyZW50Tm9kZSwiZGlzYWJsZWQiKSlyZXR1cm47dmFyIG49dC50ZXh0Q29udGVudHx8dC5pbm5lclRleHQ7dGhpcy4kZW1pdCgicGljayIsTnVtYmVyKG4pKX19fX19LDE4MjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oInRhYmxlIix7c3RhdGljQ2xhc3M6ImVsLXllYXItdGFibGUiLG9uOntjbGljazplLmhhbmRsZVllYXJUYWJsZUNsaWNrfX0sW24oInRib2R5IixbbigidHIiLFtuKCJ0ZCIse3N0YXRpY0NsYXNzOiJhdmFpbGFibGUiLGNsYXNzOmUuZ2V0Q2VsbFN0eWxlKGUuc3RhcnRZZWFyKzApfSxbbigiYSIse3N0YXRpY0NsYXNzOiJjZWxsIn0sW2UuX3YoZS5fcyhlLnN0YXJ0WWVhcikpXSldKSxuKCJ0ZCIse3N0YXRpY0NsYXNzOiJhdmFpbGFibGUiLGNsYXNzOmUuZ2V0Q2VsbFN0eWxlKGUuc3RhcnRZZWFyKzEpfSxbbigiYSIse3N0YXRpY0NsYXNzOiJjZWxsIn0sW2UuX3YoZS5fcyhlLnN0YXJ0WWVhcisxKSldKV0pLG4oInRkIix7c3RhdGljQ2xhc3M6ImF2YWlsYWJsZSIsY2xhc3M6ZS5nZXRDZWxsU3R5bGUoZS5zdGFydFllYXIrMil9LFtuKCJhIix7c3RhdGljQ2xhc3M6ImNlbGwifSxbZS5fdihlLl9zKGUuc3RhcnRZZWFyKzIpKV0pXSksbigidGQiLHtzdGF0aWNDbGFzczoiYXZhaWxhYmxlIixjbGFzczplLmdldENlbGxTdHlsZShlLnN0YXJ0WWVhciszKX0sW24oImEiLHtzdGF0aWNDbGFzczoiY2VsbCJ9LFtlLl92KGUuX3MoZS5zdGFydFllYXIrMykpXSldKV0pLG4oInRyIixbbigidGQiLHtzdGF0aWNDbGFzczoiYXZhaWxhYmxlIixjbGFzczplLmdldENlbGxTdHlsZShlLnN0YXJ0WWVhcis0KX0sW24oImEiLHtzdGF0aWNDbGFzczoiY2VsbCJ9LFtlLl92KGUuX3MoZS5zdGFydFllYXIrNCkpXSldKSxuKCJ0ZCIse3N0YXRpY0NsYXNzOiJhdmFpbGFibGUiLGNsYXNzOmUuZ2V0Q2VsbFN0eWxlKGUuc3RhcnRZZWFyKzUpfSxbbigiYSIse3N0YXRpY0NsYXNzOiJjZWxsIn0sW2UuX3YoZS5fcyhlLnN0YXJ0WWVhcis1KSldKV0pLG4oInRkIix7c3RhdGljQ2xhc3M6ImF2YWlsYWJsZSIsY2xhc3M6ZS5nZXRDZWxsU3R5bGUoZS5zdGFydFllYXIrNil9LFtuKCJhIix7c3RhdGljQ2xhc3M6ImNlbGwifSxbZS5fdihlLl9zKGUuc3RhcnRZZWFyKzYpKV0pXSksbigidGQiLHtzdGF0aWNDbGFzczoiYXZhaWxhYmxlIixjbGFzczplLmdldENlbGxTdHlsZShlLnN0YXJ0WWVhcis3KX0sW24oImEiLHtzdGF0aWNDbGFzczoiY2VsbCJ9LFtlLl92KGUuX3MoZS5zdGFydFllYXIrNykpXSldKV0pLG4oInRyIixbbigidGQiLHtzdGF0aWNDbGFzczoiYXZhaWxhYmxlIixjbGFzczplLmdldENlbGxTdHlsZShlLnN0YXJ0WWVhcis4KX0sW24oImEiLHtzdGF0aWNDbGFzczoiY2VsbCJ9LFtlLl92KGUuX3MoZS5zdGFydFllYXIrOCkpXSldKSxuKCJ0ZCIse3N0YXRpY0NsYXNzOiJhdmFpbGFibGUiLGNsYXNzOmUuZ2V0Q2VsbFN0eWxlKGUuc3RhcnRZZWFyKzkpfSxbbigiYSIse3N0YXRpY0NsYXNzOiJjZWxsIn0sW2UuX3YoZS5fcyhlLnN0YXJ0WWVhcis5KSldKV0pLG4oInRkIiksbigidGQiKV0pXSldKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn0sMTgzOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oMTg0KSxpPW4ubihyKSxvPW4oMTg1KSxzPW4oMCkoaS5hLG8uYSwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PXMuZXhwb3J0c30sMTg0OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9big1KSxvPShyPWkpJiZyLl9fZXNNb2R1bGU/cjp7ZGVmYXVsdDpyfSxzPW4oMTEpLGE9bigzKSxsPW4oMik7dC5kZWZhdWx0PXtwcm9wczp7ZGlzYWJsZWREYXRlOnt9LHZhbHVlOnt9LGRlZmF1bHRWYWx1ZTp7dmFsaWRhdG9yOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZXx8ZSBpbnN0YW5jZW9mIERhdGUmJigwLHMuaXNEYXRlKShlKX19LGRhdGU6e319LG1peGluczpbby5kZWZhdWx0XSxtZXRob2RzOntnZXRDZWxsU3R5bGU6ZnVuY3Rpb24oZSl7dmFyIHQ9e30sbj10aGlzLmRhdGUuZ2V0RnVsbFllYXIoKSxyPW5ldyBEYXRlO3JldHVybiB0LmRpc2FibGVkPSJmdW5jdGlvbiI9PXR5cGVvZiB0aGlzLmRpc2FibGVkRGF0ZSYmZnVuY3Rpb24oZSx0KXt2YXIgbj0oMCxzLmdldERheUNvdW50T2ZNb250aCkoZSx0KSxyPW5ldyBEYXRlKGUsdCwxKTtyZXR1cm4oMCxzLnJhbmdlKShuKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuKDAscy5uZXh0RGF0ZSkocixlKX0pfShuLGUpLmV2ZXJ5KHRoaXMuZGlzYWJsZWREYXRlKSx0LmN1cnJlbnQ9KDAsbC5hcnJheUZpbmRJbmRleCkoKDAsbC5jb2VyY2VUcnV0aHlWYWx1ZVRvQXJyYXkpKHRoaXMudmFsdWUpLGZ1bmN0aW9uKHQpe3JldHVybiB0LmdldEZ1bGxZZWFyKCk9PT1uJiZ0LmdldE1vbnRoKCk9PT1lfSk+PTAsdC50b2RheT1yLmdldEZ1bGxZZWFyKCk9PT1uJiZyLmdldE1vbnRoKCk9PT1lLHQuZGVmYXVsdD10aGlzLmRlZmF1bHRWYWx1ZSYmdGhpcy5kZWZhdWx0VmFsdWUuZ2V0RnVsbFllYXIoKT09PW4mJnRoaXMuZGVmYXVsdFZhbHVlLmdldE1vbnRoKCk9PT1lLHR9LGhhbmRsZU1vbnRoVGFibGVDbGljazpmdW5jdGlvbihlKXt2YXIgdD1lLnRhcmdldDtpZigiQSI9PT10LnRhZ05hbWUmJiEoMCxhLmhhc0NsYXNzKSh0LnBhcmVudE5vZGUsImRpc2FibGVkIikpe3ZhciBuPXQucGFyZW50Tm9kZS5jZWxsSW5kZXgscj00KnQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnJvd0luZGV4K247dGhpcy4kZW1pdCgicGljayIscil9fX19fSwxODU6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKCJ0YWJsZSIse3N0YXRpY0NsYXNzOiJlbC1tb250aC10YWJsZSIsb246e2NsaWNrOmUuaGFuZGxlTW9udGhUYWJsZUNsaWNrfX0sW24oInRib2R5IixbbigidHIiLFtuKCJ0ZCIse2NsYXNzOmUuZ2V0Q2VsbFN0eWxlKDApfSxbbigiYSIse3N0YXRpY0NsYXNzOiJjZWxsIn0sW2UuX3YoZS5fcyhlLnQoImVsLmRhdGVwaWNrZXIubW9udGhzLmphbiIpKSldKV0pLG4oInRkIix7Y2xhc3M6ZS5nZXRDZWxsU3R5bGUoMSl9LFtuKCJhIix7c3RhdGljQ2xhc3M6ImNlbGwifSxbZS5fdihlLl9zKGUudCgiZWwuZGF0ZXBpY2tlci5tb250aHMuZmViIikpKV0pXSksbigidGQiLHtjbGFzczplLmdldENlbGxTdHlsZSgyKX0sW24oImEiLHtzdGF0aWNDbGFzczoiY2VsbCJ9LFtlLl92KGUuX3MoZS50KCJlbC5kYXRlcGlja2VyLm1vbnRocy5tYXIiKSkpXSldKSxuKCJ0ZCIse2NsYXNzOmUuZ2V0Q2VsbFN0eWxlKDMpfSxbbigiYSIse3N0YXRpY0NsYXNzOiJjZWxsIn0sW2UuX3YoZS5fcyhlLnQoImVsLmRhdGVwaWNrZXIubW9udGhzLmFwciIpKSldKV0pXSksbigidHIiLFtuKCJ0ZCIse2NsYXNzOmUuZ2V0Q2VsbFN0eWxlKDQpfSxbbigiYSIse3N0YXRpY0NsYXNzOiJjZWxsIn0sW2UuX3YoZS5fcyhlLnQoImVsLmRhdGVwaWNrZXIubW9udGhzLm1heSIpKSldKV0pLG4oInRkIix7Y2xhc3M6ZS5nZXRDZWxsU3R5bGUoNSl9LFtuKCJhIix7c3RhdGljQ2xhc3M6ImNlbGwifSxbZS5fdihlLl9zKGUudCgiZWwuZGF0ZXBpY2tlci5tb250aHMuanVuIikpKV0pXSksbigidGQiLHtjbGFzczplLmdldENlbGxTdHlsZSg2KX0sW24oImEiLHtzdGF0aWNDbGFzczoiY2VsbCJ9LFtlLl92KGUuX3MoZS50KCJlbC5kYXRlcGlja2VyLm1vbnRocy5qdWwiKSkpXSldKSxuKCJ0ZCIse2NsYXNzOmUuZ2V0Q2VsbFN0eWxlKDcpfSxbbigiYSIse3N0YXRpY0NsYXNzOiJjZWxsIn0sW2UuX3YoZS5fcyhlLnQoImVsLmRhdGVwaWNrZXIubW9udGhzLmF1ZyIpKSldKV0pXSksbigidHIiLFtuKCJ0ZCIse2NsYXNzOmUuZ2V0Q2VsbFN0eWxlKDgpfSxbbigiYSIse3N0YXRpY0NsYXNzOiJjZWxsIn0sW2UuX3YoZS5fcyhlLnQoImVsLmRhdGVwaWNrZXIubW9udGhzLnNlcCIpKSldKV0pLG4oInRkIix7Y2xhc3M6ZS5nZXRDZWxsU3R5bGUoOSl9LFtuKCJhIix7c3RhdGljQ2xhc3M6ImNlbGwifSxbZS5fdihlLl9zKGUudCgiZWwuZGF0ZXBpY2tlci5tb250aHMub2N0IikpKV0pXSksbigidGQiLHtjbGFzczplLmdldENlbGxTdHlsZSgxMCl9LFtuKCJhIix7c3RhdGljQ2xhc3M6ImNlbGwifSxbZS5fdihlLl9zKGUudCgiZWwuZGF0ZXBpY2tlci5tb250aHMubm92IikpKV0pXSksbigidGQiLHtjbGFzczplLmdldENlbGxTdHlsZSgxMSl9LFtuKCJhIix7c3RhdGljQ2xhc3M6ImNlbGwifSxbZS5fdihlLl9zKGUudCgiZWwuZGF0ZXBpY2tlci5tb250aHMuZGVjIikpKV0pXSldKV0pXSl9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9LDE4NjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcixpPW4oMTEpLG89big1KSxzPShyPW8pJiZyLl9fZXNNb2R1bGU/cjp7ZGVmYXVsdDpyfSxhPW4oMik7dmFyIGw9WyJzdW4iLCJtb24iLCJ0dWUiLCJ3ZWQiLCJ0aHUiLCJmcmkiLCJzYXQiXSx1PWZ1bmN0aW9uKGUpe3JldHVybiJudW1iZXIiPT10eXBlb2YgZXx8InN0cmluZyI9PXR5cGVvZiBlPygwLGkuY2xlYXJUaW1lKShuZXcgRGF0ZShlKSkuZ2V0VGltZSgpOmUgaW5zdGFuY2VvZiBEYXRlPygwLGkuY2xlYXJUaW1lKShlKS5nZXRUaW1lKCk6TmFOfTt0LmRlZmF1bHQ9e21peGluczpbcy5kZWZhdWx0XSxwcm9wczp7Zmlyc3REYXlPZldlZWs6e2RlZmF1bHQ6Nyx0eXBlOk51bWJlcix2YWxpZGF0b3I6ZnVuY3Rpb24oZSl7cmV0dXJuIGU+PTEmJmU8PTd9fSx2YWx1ZTp7fSxkZWZhdWx0VmFsdWU6e3ZhbGlkYXRvcjpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09PWV8fCgwLGkuaXNEYXRlKShlKXx8QXJyYXkuaXNBcnJheShlKSYmZS5ldmVyeShpLmlzRGF0ZSl9fSxkYXRlOnt9LHNlbGVjdGlvbk1vZGU6e2RlZmF1bHQ6ImRheSJ9LHNob3dXZWVrTnVtYmVyOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sZGlzYWJsZWREYXRlOnt9LG1pbkRhdGU6e30sbWF4RGF0ZTp7fSxyYW5nZVN0YXRlOntkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJue2VuZERhdGU6bnVsbCxzZWxlY3Rpbmc6ITF9fX19LGNvbXB1dGVkOntvZmZzZXREYXk6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmZpcnN0RGF5T2ZXZWVrO3JldHVybiBlPjM/Ny1lOi1lfSxXRUVLUzpmdW5jdGlvbigpe3ZhciBlPXRoaXMuZmlyc3REYXlPZldlZWs7cmV0dXJuIGwuY29uY2F0KGwpLnNsaWNlKGUsZSs3KX0seWVhcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGUuZ2V0RnVsbFllYXIoKX0sbW9udGg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kYXRlLmdldE1vbnRoKCl9LHN0YXJ0RGF0ZTpmdW5jdGlvbigpe3JldHVybigwLGkuZ2V0U3RhcnREYXRlT2ZNb250aCkodGhpcy55ZWFyLHRoaXMubW9udGgpfSxyb3dzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PW5ldyBEYXRlKHRoaXMueWVhcix0aGlzLm1vbnRoLDEpLG49KDAsaS5nZXRGaXJzdERheU9mTW9udGgpKHQpLHI9KDAsaS5nZXREYXlDb3VudE9mTW9udGgpKHQuZ2V0RnVsbFllYXIoKSx0LmdldE1vbnRoKCkpLG89KDAsaS5nZXREYXlDb3VudE9mTW9udGgpKHQuZ2V0RnVsbFllYXIoKSwwPT09dC5nZXRNb250aCgpPzExOnQuZ2V0TW9udGgoKS0xKTtuPTA9PT1uPzc6bjtmb3IodmFyIHM9dGhpcy5vZmZzZXREYXksbD10aGlzLnRhYmxlUm93cyxjPTEsZD12b2lkIDAsZj10aGlzLnN0YXJ0RGF0ZSxoPXRoaXMuZGlzYWJsZWREYXRlLHA9ImRhdGVzIj09PXRoaXMuc2VsZWN0aW9uTW9kZT8oMCxhLmNvZXJjZVRydXRoeVZhbHVlVG9BcnJheSkodGhpcy52YWx1ZSk6W10sbT11KG5ldyBEYXRlKSx2PTA7djw2O3YrKyl7dmFyIGc9bFt2XTt0aGlzLnNob3dXZWVrTnVtYmVyJiYoZ1swXXx8KGdbMF09e3R5cGU6IndlZWsiLHRleHQ6KDAsaS5nZXRXZWVrTnVtYmVyKSgoMCxpLm5leHREYXRlKShmLDcqdisxKSl9KSk7Zm9yKHZhciB5PWZ1bmN0aW9uKHQpe3ZhciBsPWdbZS5zaG93V2Vla051bWJlcj90KzE6dF07bHx8KGw9e3Jvdzp2LGNvbHVtbjp0LHR5cGU6Im5vcm1hbCIsaW5SYW5nZTohMSxzdGFydDohMSxlbmQ6ITF9KSxsLnR5cGU9Im5vcm1hbCI7dmFyIHk9Nyp2K3QsXz0oMCxpLm5leHREYXRlKShmLHktcykuZ2V0VGltZSgpO2wuaW5SYW5nZT1fPj11KGUubWluRGF0ZSkmJl88PXUoZS5tYXhEYXRlKSxsLnN0YXJ0PWUubWluRGF0ZSYmXz09PXUoZS5taW5EYXRlKSxsLmVuZD1lLm1heERhdGUmJl89PT11KGUubWF4RGF0ZSksXz09PW0mJihsLnR5cGU9InRvZGF5Iiksdj49MCYmdjw9MT90Kzcqdj49bitzPyhsLnRleHQ9YysrLDI9PT1jJiYoZD03KnYrdCkpOihsLnRleHQ9by0obitzLXQlNykrMSs3KnYsbC50eXBlPSJwcmV2LW1vbnRoIik6Yzw9cj8obC50ZXh0PWMrKywyPT09YyYmKGQ9Nyp2K3QpKToobC50ZXh0PWMrKy1yLGwudHlwZT0ibmV4dC1tb250aCIpO3ZhciBiPW5ldyBEYXRlKF8pO2wuZGlzYWJsZWQ9ImZ1bmN0aW9uIj09dHlwZW9mIGgmJmgoYiksbC5zZWxlY3RlZD0oMCxhLmFycmF5RmluZCkocCxmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRUaW1lKCk9PT1iLmdldFRpbWUoKX0pLGUuJHNldChnLGUuc2hvd1dlZWtOdW1iZXI/dCsxOnQsbCl9LF89MDtfPDc7XysrKXkoXyk7aWYoIndlZWsiPT09dGhpcy5zZWxlY3Rpb25Nb2RlKXt2YXIgYj10aGlzLnNob3dXZWVrTnVtYmVyPzE6MCx4PXRoaXMuc2hvd1dlZWtOdW1iZXI/Nzo2LEM9dGhpcy5pc1dlZWtBY3RpdmUoZ1tiKzFdKTtnW2JdLmluUmFuZ2U9QyxnW2JdLnN0YXJ0PUMsZ1t4XS5pblJhbmdlPUMsZ1t4XS5lbmQ9Q319cmV0dXJuIGwuZmlyc3REYXlQb3NpdGlvbj1kLGx9fSx3YXRjaDp7InJhbmdlU3RhdGUuZW5kRGF0ZSI6ZnVuY3Rpb24oZSl7dGhpcy5tYXJrUmFuZ2UodGhpcy5taW5EYXRlLGUpfSxtaW5EYXRlOmZ1bmN0aW9uKGUsdCl7dShlKSE9PXUodCkmJnRoaXMubWFya1JhbmdlKHRoaXMubWluRGF0ZSx0aGlzLm1heERhdGUpfSxtYXhEYXRlOmZ1bmN0aW9uKGUsdCl7dShlKSE9PXUodCkmJnRoaXMubWFya1JhbmdlKHRoaXMubWluRGF0ZSx0aGlzLm1heERhdGUpfX0sZGF0YTpmdW5jdGlvbigpe3JldHVybnt0YWJsZVJvd3M6W1tdLFtdLFtdLFtdLFtdLFtdXSxsYXN0Um93Om51bGwsbGFzdENvbHVtbjpudWxsfX0sbWV0aG9kczp7Y2VsbE1hdGNoZXNEYXRlOmZ1bmN0aW9uKGUsdCl7dmFyIG49bmV3IERhdGUodCk7cmV0dXJuIHRoaXMueWVhcj09PW4uZ2V0RnVsbFllYXIoKSYmdGhpcy5tb250aD09PW4uZ2V0TW9udGgoKSYmTnVtYmVyKGUudGV4dCk9PT1uLmdldERhdGUoKX0sZ2V0Q2VsbENsYXNzZXM6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPXRoaXMuc2VsZWN0aW9uTW9kZSxyPXRoaXMuZGVmYXVsdFZhbHVlP0FycmF5LmlzQXJyYXkodGhpcy5kZWZhdWx0VmFsdWUpP3RoaXMuZGVmYXVsdFZhbHVlOlt0aGlzLmRlZmF1bHRWYWx1ZV06W10saT1bXTtyZXR1cm4ibm9ybWFsIiE9PWUudHlwZSYmInRvZGF5IiE9PWUudHlwZXx8ZS5kaXNhYmxlZD9pLnB1c2goZS50eXBlKTooaS5wdXNoKCJhdmFpbGFibGUiKSwidG9kYXkiPT09ZS50eXBlJiZpLnB1c2goInRvZGF5IikpLCJub3JtYWwiPT09ZS50eXBlJiZyLnNvbWUoZnVuY3Rpb24obil7cmV0dXJuIHQuY2VsbE1hdGNoZXNEYXRlKGUsbil9KSYmaS5wdXNoKCJkZWZhdWx0IiksImRheSIhPT1ufHwibm9ybWFsIiE9PWUudHlwZSYmInRvZGF5IiE9PWUudHlwZXx8IXRoaXMuY2VsbE1hdGNoZXNEYXRlKGUsdGhpcy52YWx1ZSl8fGkucHVzaCgiY3VycmVudCIpLCFlLmluUmFuZ2V8fCJub3JtYWwiIT09ZS50eXBlJiYidG9kYXkiIT09ZS50eXBlJiYid2VlayIhPT10aGlzLnNlbGVjdGlvbk1vZGV8fChpLnB1c2goImluLXJhbmdlIiksZS5zdGFydCYmaS5wdXNoKCJzdGFydC1kYXRlIiksZS5lbmQmJmkucHVzaCgiZW5kLWRhdGUiKSksZS5kaXNhYmxlZCYmaS5wdXNoKCJkaXNhYmxlZCIpLGUuc2VsZWN0ZWQmJmkucHVzaCgic2VsZWN0ZWQiKSxpLmpvaW4oIiAiKX0sZ2V0RGF0ZU9mQ2VsbDpmdW5jdGlvbihlLHQpe3ZhciBuPTcqZSsodC0odGhpcy5zaG93V2Vla051bWJlcj8xOjApKS10aGlzLm9mZnNldERheTtyZXR1cm4oMCxpLm5leHREYXRlKSh0aGlzLnN0YXJ0RGF0ZSxuKX0saXNXZWVrQWN0aXZlOmZ1bmN0aW9uKGUpe2lmKCJ3ZWVrIiE9PXRoaXMuc2VsZWN0aW9uTW9kZSlyZXR1cm4hMTt2YXIgdD1uZXcgRGF0ZSh0aGlzLnllYXIsdGhpcy5tb250aCwxKSxuPXQuZ2V0RnVsbFllYXIoKSxyPXQuZ2V0TW9udGgoKTtyZXR1cm4icHJldi1tb250aCI9PT1lLnR5cGUmJih0LnNldE1vbnRoKDA9PT1yPzExOnItMSksdC5zZXRGdWxsWWVhcigwPT09cj9uLTE6bikpLCJuZXh0LW1vbnRoIj09PWUudHlwZSYmKHQuc2V0TW9udGgoMTE9PT1yPzA6cisxKSx0LnNldEZ1bGxZZWFyKDExPT09cj9uKzE6bikpLHQuc2V0RGF0ZShwYXJzZUludChlLnRleHQsMTApKSxuPT09KCgwLGkuaXNEYXRlKSh0aGlzLnZhbHVlKT90aGlzLnZhbHVlLmdldEZ1bGxZZWFyKCk6bnVsbCkmJigwLGkuZ2V0V2Vla051bWJlcikodCk9PT0oMCxpLmdldFdlZWtOdW1iZXIpKHRoaXMudmFsdWUpfSxtYXJrUmFuZ2U6ZnVuY3Rpb24oZSx0KXtlPXUoZSksdD11KHQpfHxlO3ZhciBuPVtNYXRoLm1pbihlLHQpLE1hdGgubWF4KGUsdCldO2U9blswXSx0PW5bMV07Zm9yKHZhciByPXRoaXMuc3RhcnREYXRlLG89dGhpcy5yb3dzLHM9MCxhPW8ubGVuZ3RoO3M8YTtzKyspZm9yKHZhciBsPW9bc10sYz0wLGQ9bC5sZW5ndGg7YzxkO2MrKylpZighdGhpcy5zaG93V2Vla051bWJlcnx8MCE9PWMpe3ZhciBmPWxbY10saD03KnMrYysodGhpcy5zaG93V2Vla051bWJlcj8tMTowKSxwPSgwLGkubmV4dERhdGUpKHIsaC10aGlzLm9mZnNldERheSkuZ2V0VGltZSgpO2YuaW5SYW5nZT1lJiZwPj1lJiZwPD10LGYuc3RhcnQ9ZSYmcD09PWUsZi5lbmQ9dCYmcD09PXR9fSxoYW5kbGVNb3VzZU1vdmU6ZnVuY3Rpb24oZSl7aWYodGhpcy5yYW5nZVN0YXRlLnNlbGVjdGluZyl7dmFyIHQ9ZS50YXJnZXQ7aWYoIlNQQU4iPT09dC50YWdOYW1lJiYodD10LnBhcmVudE5vZGUucGFyZW50Tm9kZSksIkRJViI9PT10LnRhZ05hbWUmJih0PXQucGFyZW50Tm9kZSksIlREIj09PXQudGFnTmFtZSl7dmFyIG49dC5wYXJlbnROb2RlLnJvd0luZGV4LTEscj10LmNlbGxJbmRleDt0aGlzLnJvd3Nbbl1bcl0uZGlzYWJsZWR8fG49PT10aGlzLmxhc3RSb3cmJnI9PT10aGlzLmxhc3RDb2x1bW58fCh0aGlzLmxhc3RSb3c9bix0aGlzLmxhc3RDb2x1bW49cix0aGlzLiRlbWl0KCJjaGFuZ2VyYW5nZSIse21pbkRhdGU6dGhpcy5taW5EYXRlLG1heERhdGU6dGhpcy5tYXhEYXRlLHJhbmdlU3RhdGU6e3NlbGVjdGluZzohMCxlbmREYXRlOnRoaXMuZ2V0RGF0ZU9mQ2VsbChuLHIpfX0pKX19fSxoYW5kbGVDbGljazpmdW5jdGlvbihlKXt2YXIgdD1lLnRhcmdldDtpZigiU1BBTiI9PT10LnRhZ05hbWUmJih0PXQucGFyZW50Tm9kZS5wYXJlbnROb2RlKSwiRElWIj09PXQudGFnTmFtZSYmKHQ9dC5wYXJlbnROb2RlKSwiVEQiPT09dC50YWdOYW1lKXt2YXIgbj10LnBhcmVudE5vZGUucm93SW5kZXgtMSxyPSJ3ZWVrIj09PXRoaXMuc2VsZWN0aW9uTW9kZT8xOnQuY2VsbEluZGV4LG89dGhpcy5yb3dzW25dW3JdO2lmKCFvLmRpc2FibGVkJiYid2VlayIhPT1vLnR5cGUpe3ZhciBzLGwsdSxjPXRoaXMuZ2V0RGF0ZU9mQ2VsbChuLHIpO2lmKCJyYW5nZSI9PT10aGlzLnNlbGVjdGlvbk1vZGUpdGhpcy5yYW5nZVN0YXRlLnNlbGVjdGluZz8oYz49dGhpcy5taW5EYXRlP3RoaXMuJGVtaXQoInBpY2siLHttaW5EYXRlOnRoaXMubWluRGF0ZSxtYXhEYXRlOmN9KTp0aGlzLiRlbWl0KCJwaWNrIix7bWluRGF0ZTpjLG1heERhdGU6dGhpcy5taW5EYXRlfSksdGhpcy5yYW5nZVN0YXRlLnNlbGVjdGluZz0hMSk6KHRoaXMuJGVtaXQoInBpY2siLHttaW5EYXRlOmMsbWF4RGF0ZTpudWxsfSksdGhpcy5yYW5nZVN0YXRlLnNlbGVjdGluZz0hMCk7ZWxzZSBpZigiZGF5Ij09PXRoaXMuc2VsZWN0aW9uTW9kZSl0aGlzLiRlbWl0KCJwaWNrIixjKTtlbHNlIGlmKCJ3ZWVrIj09PXRoaXMuc2VsZWN0aW9uTW9kZSl7dmFyIGQ9KDAsaS5nZXRXZWVrTnVtYmVyKShjKSxmPWMuZ2V0RnVsbFllYXIoKSsidyIrZDt0aGlzLiRlbWl0KCJwaWNrIix7eWVhcjpjLmdldEZ1bGxZZWFyKCksd2VlazpkLHZhbHVlOmYsZGF0ZTpjfSl9ZWxzZSBpZigiZGF0ZXMiPT09dGhpcy5zZWxlY3Rpb25Nb2RlKXt2YXIgaD10aGlzLnZhbHVlfHxbXSxwPW8uc2VsZWN0ZWQ/KHM9aCwodT0iZnVuY3Rpb24iPT10eXBlb2YobD1mdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRUaW1lKCk9PT1jLmdldFRpbWUoKX0pPygwLGEuYXJyYXlGaW5kSW5kZXgpKHMsbCk6cy5pbmRleE9mKGwpKT49MD9bXS5jb25jYXQocy5zbGljZSgwLHUpLHMuc2xpY2UodSsxKSk6cyk6W10uY29uY2F0KGgsW2NdKTt0aGlzLiRlbWl0KCJwaWNrIixwKX19fX19fX0sMTg3OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbigidGFibGUiLHtzdGF0aWNDbGFzczoiZWwtZGF0ZS10YWJsZSIsY2xhc3M6eyJpcy13ZWVrLW1vZGUiOiJ3ZWVrIj09PWUuc2VsZWN0aW9uTW9kZX0sYXR0cnM6e2NlbGxzcGFjaW5nOiIwIixjZWxscGFkZGluZzoiMCJ9LG9uOntjbGljazplLmhhbmRsZUNsaWNrLG1vdXNlbW92ZTplLmhhbmRsZU1vdXNlTW92ZX19LFtuKCJ0Ym9keSIsW24oInRyIixbZS5zaG93V2Vla051bWJlcj9uKCJ0aCIsW2UuX3YoZS5fcyhlLnQoImVsLmRhdGVwaWNrZXIud2VlayIpKSldKTplLl9lKCksZS5fbChlLldFRUtTLGZ1bmN0aW9uKHQscil7cmV0dXJuIG4oInRoIix7a2V5OnJ9LFtlLl92KGUuX3MoZS50KCJlbC5kYXRlcGlja2VyLndlZWtzLiIrdCkpKV0pfSldLDIpLGUuX2woZS5yb3dzLGZ1bmN0aW9uKHQscil7cmV0dXJuIG4oInRyIix7a2V5OnIsc3RhdGljQ2xhc3M6ImVsLWRhdGUtdGFibGVfX3JvdyIsY2xhc3M6e2N1cnJlbnQ6ZS5pc1dlZWtBY3RpdmUodFsxXSl9fSxlLl9sKHQsZnVuY3Rpb24odCxyKXtyZXR1cm4gbigidGQiLHtrZXk6cixjbGFzczplLmdldENlbGxDbGFzc2VzKHQpfSxbbigiZGl2Iixbbigic3BhbiIsW2UuX3YoIlxuICAgICAgICAgICIrZS5fcyh0LnRleHQpKyJcbiAgICAgICAgIildKV0pXSl9KSl9KV0sMildKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn0sMTg4OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbigidHJhbnNpdGlvbiIse2F0dHJzOntuYW1lOiJlbC16b29tLWluLXRvcCJ9LG9uOnsiYWZ0ZXItZW50ZXIiOmUuaGFuZGxlRW50ZXIsImFmdGVyLWxlYXZlIjplLmhhbmRsZUxlYXZlfX0sW24oImRpdiIse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOmUudmlzaWJsZSxleHByZXNzaW9uOiJ2aXNpYmxlIn1dLHN0YXRpY0NsYXNzOiJlbC1waWNrZXItcGFuZWwgZWwtZGF0ZS1waWNrZXIgZWwtcG9wcGVyIixjbGFzczpbeyJoYXMtc2lkZWJhciI6ZS4kc2xvdHMuc2lkZWJhcnx8ZS5zaG9ydGN1dHMsImhhcy10aW1lIjplLnNob3dUaW1lfSxlLnBvcHBlckNsYXNzXX0sW24oImRpdiIse3N0YXRpY0NsYXNzOiJlbC1waWNrZXItcGFuZWxfX2JvZHktd3JhcHBlciJ9LFtlLl90KCJzaWRlYmFyIiksZS5zaG9ydGN1dHM/bigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLXBpY2tlci1wYW5lbF9fc2lkZWJhciJ9LGUuX2woZS5zaG9ydGN1dHMsZnVuY3Rpb24odCxyKXtyZXR1cm4gbigiYnV0dG9uIix7a2V5OnIsc3RhdGljQ2xhc3M6ImVsLXBpY2tlci1wYW5lbF9fc2hvcnRjdXQiLGF0dHJzOnt0eXBlOiJidXR0b24ifSxvbjp7Y2xpY2s6ZnVuY3Rpb24obil7ZS5oYW5kbGVTaG9ydGN1dENsaWNrKHQpfX19LFtlLl92KGUuX3ModC50ZXh0KSldKX0pKTplLl9lKCksbigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLXBpY2tlci1wYW5lbF9fYm9keSJ9LFtlLnNob3dUaW1lP24oImRpdiIse3N0YXRpY0NsYXNzOiJlbC1kYXRlLXBpY2tlcl9fdGltZS1oZWFkZXIifSxbbigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC1kYXRlLXBpY2tlcl9fZWRpdG9yLXdyYXAifSxbbigiZWwtaW5wdXQiLHthdHRyczp7cGxhY2Vob2xkZXI6ZS50KCJlbC5kYXRlcGlja2VyLnNlbGVjdERhdGUiKSx2YWx1ZTplLnZpc2libGVEYXRlLHNpemU6InNtYWxsIn0sb246e2lucHV0OmZ1bmN0aW9uKHQpe3JldHVybiBlLnVzZXJJbnB1dERhdGU9dH0sY2hhbmdlOmUuaGFuZGxlVmlzaWJsZURhdGVDaGFuZ2V9fSldLDEpLG4oInNwYW4iLHtkaXJlY3RpdmVzOlt7bmFtZToiY2xpY2tvdXRzaWRlIixyYXdOYW1lOiJ2LWNsaWNrb3V0c2lkZSIsdmFsdWU6ZS5oYW5kbGVUaW1lUGlja0Nsb3NlLGV4cHJlc3Npb246ImhhbmRsZVRpbWVQaWNrQ2xvc2UifV0sc3RhdGljQ2xhc3M6ImVsLWRhdGUtcGlja2VyX19lZGl0b3Itd3JhcCJ9LFtuKCJlbC1pbnB1dCIse3JlZjoiaW5wdXQiLGF0dHJzOntwbGFjZWhvbGRlcjplLnQoImVsLmRhdGVwaWNrZXIuc2VsZWN0VGltZSIpLHZhbHVlOmUudmlzaWJsZVRpbWUsc2l6ZToic21hbGwifSxvbjp7Zm9jdXM6ZnVuY3Rpb24odCl7ZS50aW1lUGlja2VyVmlzaWJsZT0hMH0saW5wdXQ6ZnVuY3Rpb24odCl7cmV0dXJuIGUudXNlcklucHV0VGltZT10fSxjaGFuZ2U6ZS5oYW5kbGVWaXNpYmxlVGltZUNoYW5nZX19KSxuKCJ0aW1lLXBpY2tlciIse3JlZjoidGltZXBpY2tlciIsYXR0cnM6eyJ0aW1lLWFycm93LWNvbnRyb2wiOmUuYXJyb3dDb250cm9sLHZpc2libGU6ZS50aW1lUGlja2VyVmlzaWJsZX0sb246e3BpY2s6ZS5oYW5kbGVUaW1lUGljayxtb3VudGVkOmUucHJveHlUaW1lUGlja2VyRGF0YVByb3BlcnRpZXN9fSldLDEpXSk6ZS5fZSgpLG4oImRpdiIse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOiJ0aW1lIiE9PWUuY3VycmVudFZpZXcsZXhwcmVzc2lvbjoiY3VycmVudFZpZXcgIT09ICd0aW1lJyJ9XSxzdGF0aWNDbGFzczoiZWwtZGF0ZS1waWNrZXJfX2hlYWRlciIsY2xhc3M6eyJlbC1kYXRlLXBpY2tlcl9faGVhZGVyLS1ib3JkZXJlZCI6InllYXIiPT09ZS5jdXJyZW50Vmlld3x8Im1vbnRoIj09PWUuY3VycmVudFZpZXd9fSxbbigiYnV0dG9uIix7c3RhdGljQ2xhc3M6ImVsLXBpY2tlci1wYW5lbF9faWNvbi1idG4gZWwtZGF0ZS1waWNrZXJfX3ByZXYtYnRuIGVsLWljb24tZC1hcnJvdy1sZWZ0IixhdHRyczp7dHlwZToiYnV0dG9uIiwiYXJpYS1sYWJlbCI6ZS50KCJlbC5kYXRlcGlja2VyLnByZXZZZWFyIil9LG9uOntjbGljazplLnByZXZZZWFyfX0pLG4oImJ1dHRvbiIse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOiJkYXRlIj09PWUuY3VycmVudFZpZXcsZXhwcmVzc2lvbjoiY3VycmVudFZpZXcgPT09ICdkYXRlJyJ9XSxzdGF0aWNDbGFzczoiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1kYXRlLXBpY2tlcl9fcHJldi1idG4gZWwtaWNvbi1hcnJvdy1sZWZ0IixhdHRyczp7dHlwZToiYnV0dG9uIiwiYXJpYS1sYWJlbCI6ZS50KCJlbC5kYXRlcGlja2VyLnByZXZNb250aCIpfSxvbjp7Y2xpY2s6ZS5wcmV2TW9udGh9fSksbigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC1kYXRlLXBpY2tlcl9faGVhZGVyLWxhYmVsIixhdHRyczp7cm9sZToiYnV0dG9uIn0sb246e2NsaWNrOmUuc2hvd1llYXJQaWNrZXJ9fSxbZS5fdihlLl9zKGUueWVhckxhYmVsKSldKSxuKCJzcGFuIix7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6ImRhdGUiPT09ZS5jdXJyZW50VmlldyxleHByZXNzaW9uOiJjdXJyZW50VmlldyA9PT0gJ2RhdGUnIn1dLHN0YXRpY0NsYXNzOiJlbC1kYXRlLXBpY2tlcl9faGVhZGVyLWxhYmVsIixjbGFzczp7YWN0aXZlOiJtb250aCI9PT1lLmN1cnJlbnRWaWV3fSxhdHRyczp7cm9sZToiYnV0dG9uIn0sb246e2NsaWNrOmUuc2hvd01vbnRoUGlja2VyfX0sW2UuX3YoZS5fcyhlLnQoImVsLmRhdGVwaWNrZXIubW9udGgiKyhlLm1vbnRoKzEpKSkpXSksbigiYnV0dG9uIix7c3RhdGljQ2xhc3M6ImVsLXBpY2tlci1wYW5lbF9faWNvbi1idG4gZWwtZGF0ZS1waWNrZXJfX25leHQtYnRuIGVsLWljb24tZC1hcnJvdy1yaWdodCIsYXR0cnM6e3R5cGU6ImJ1dHRvbiIsImFyaWEtbGFiZWwiOmUudCgiZWwuZGF0ZXBpY2tlci5uZXh0WWVhciIpfSxvbjp7Y2xpY2s6ZS5uZXh0WWVhcn19KSxuKCJidXR0b24iLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZToiZGF0ZSI9PT1lLmN1cnJlbnRWaWV3LGV4cHJlc3Npb246ImN1cnJlbnRWaWV3ID09PSAnZGF0ZScifV0sc3RhdGljQ2xhc3M6ImVsLXBpY2tlci1wYW5lbF9faWNvbi1idG4gZWwtZGF0ZS1waWNrZXJfX25leHQtYnRuIGVsLWljb24tYXJyb3ctcmlnaHQiLGF0dHJzOnt0eXBlOiJidXR0b24iLCJhcmlhLWxhYmVsIjplLnQoImVsLmRhdGVwaWNrZXIubmV4dE1vbnRoIil9LG9uOntjbGljazplLm5leHRNb250aH19KV0pLG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC1waWNrZXItcGFuZWxfX2NvbnRlbnQifSxbbigiZGF0ZS10YWJsZSIse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOiJkYXRlIj09PWUuY3VycmVudFZpZXcsZXhwcmVzc2lvbjoiY3VycmVudFZpZXcgPT09ICdkYXRlJyJ9XSxhdHRyczp7InNlbGVjdGlvbi1tb2RlIjplLnNlbGVjdGlvbk1vZGUsImZpcnN0LWRheS1vZi13ZWVrIjplLmZpcnN0RGF5T2ZXZWVrLHZhbHVlOmUudmFsdWUsImRlZmF1bHQtdmFsdWUiOmUuZGVmYXVsdFZhbHVlP25ldyBEYXRlKGUuZGVmYXVsdFZhbHVlKTpudWxsLGRhdGU6ZS5kYXRlLCJkaXNhYmxlZC1kYXRlIjplLmRpc2FibGVkRGF0ZX0sb246e3BpY2s6ZS5oYW5kbGVEYXRlUGlja319KSxuKCJ5ZWFyLXRhYmxlIix7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6InllYXIiPT09ZS5jdXJyZW50VmlldyxleHByZXNzaW9uOiJjdXJyZW50VmlldyA9PT0gJ3llYXInIn1dLGF0dHJzOnt2YWx1ZTplLnZhbHVlLCJkZWZhdWx0LXZhbHVlIjplLmRlZmF1bHRWYWx1ZT9uZXcgRGF0ZShlLmRlZmF1bHRWYWx1ZSk6bnVsbCxkYXRlOmUuZGF0ZSwiZGlzYWJsZWQtZGF0ZSI6ZS5kaXNhYmxlZERhdGV9LG9uOntwaWNrOmUuaGFuZGxlWWVhclBpY2t9fSksbigibW9udGgtdGFibGUiLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZToibW9udGgiPT09ZS5jdXJyZW50VmlldyxleHByZXNzaW9uOiJjdXJyZW50VmlldyA9PT0gJ21vbnRoJyJ9XSxhdHRyczp7dmFsdWU6ZS52YWx1ZSwiZGVmYXVsdC12YWx1ZSI6ZS5kZWZhdWx0VmFsdWU/bmV3IERhdGUoZS5kZWZhdWx0VmFsdWUpOm51bGwsZGF0ZTplLmRhdGUsImRpc2FibGVkLWRhdGUiOmUuZGlzYWJsZWREYXRlfSxvbjp7cGljazplLmhhbmRsZU1vbnRoUGlja319KV0sMSldKV0sMiksbigiZGl2Iix7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6ZS5mb290ZXJWaXNpYmxlJiYiZGF0ZSI9PT1lLmN1cnJlbnRWaWV3LGV4cHJlc3Npb246ImZvb3RlclZpc2libGUgJiYgY3VycmVudFZpZXcgPT09ICdkYXRlJyJ9XSxzdGF0aWNDbGFzczoiZWwtcGlja2VyLXBhbmVsX19mb290ZXIifSxbbigiZWwtYnV0dG9uIix7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6ImRhdGVzIiE9PWUuc2VsZWN0aW9uTW9kZSxleHByZXNzaW9uOiJzZWxlY3Rpb25Nb2RlICE9PSAnZGF0ZXMnIn1dLHN0YXRpY0NsYXNzOiJlbC1waWNrZXItcGFuZWxfX2xpbmstYnRuIixhdHRyczp7c2l6ZToibWluaSIsdHlwZToidGV4dCJ9LG9uOntjbGljazplLmNoYW5nZVRvTm93fX0sW2UuX3YoIlxuICAgICAgICAiK2UuX3MoZS50KCJlbC5kYXRlcGlja2VyLm5vdyIpKSsiXG4gICAgICAiKV0pLG4oImVsLWJ1dHRvbiIse3N0YXRpY0NsYXNzOiJlbC1waWNrZXItcGFuZWxfX2xpbmstYnRuIixhdHRyczp7cGxhaW46IiIsc2l6ZToibWluaSJ9LG9uOntjbGljazplLmNvbmZpcm19fSxbZS5fdigiXG4gICAgICAgICIrZS5fcyhlLnQoImVsLmRhdGVwaWNrZXIuY29uZmlybSIpKSsiXG4gICAgICAiKV0pXSwxKV0pXSl9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9LDE4OTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKDE5MCksaT1uLm4ociksbz1uKDE5MSkscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDE5MDpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj1uKDExKSxpPWMobigxMCkpLG89YyhuKDUpKSxzPWMobigzMSkpLGE9YyhuKDQ5KSksbD1jKG4oNikpLHU9YyhuKDE1KSk7ZnVuY3Rpb24gYyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIGQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IERhdGUobmV3IERhdGUoZSkuZ2V0VGltZSgpK3QpfSxmPWZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP1tuZXcgRGF0ZShlWzBdKSxuZXcgRGF0ZShlWzFdKV06ZT9bbmV3IERhdGUoZSksZChlLDg2NGU1KV06W25ldyBEYXRlLGQoRGF0ZS5ub3coKSw4NjRlNSldfTt0LmRlZmF1bHQ9e21peGluczpbby5kZWZhdWx0XSxkaXJlY3RpdmVzOntDbGlja291dHNpZGU6aS5kZWZhdWx0fSxjb21wdXRlZDp7YnRuRGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hKHRoaXMubWluRGF0ZSYmdGhpcy5tYXhEYXRlJiYhdGhpcy5zZWxlY3RpbmcmJnRoaXMuaXNWYWxpZFZhbHVlKFt0aGlzLm1pbkRhdGUsdGhpcy5tYXhEYXRlXSkpfSxsZWZ0TGFiZWw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sZWZ0RGF0ZS5nZXRGdWxsWWVhcigpKyIgIit0aGlzLnQoImVsLmRhdGVwaWNrZXIueWVhciIpKyIgIit0aGlzLnQoImVsLmRhdGVwaWNrZXIubW9udGgiKyh0aGlzLmxlZnREYXRlLmdldE1vbnRoKCkrMSkpfSxyaWdodExhYmVsOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmlnaHREYXRlLmdldEZ1bGxZZWFyKCkrIiAiK3RoaXMudCgiZWwuZGF0ZXBpY2tlci55ZWFyIikrIiAiK3RoaXMudCgiZWwuZGF0ZXBpY2tlci5tb250aCIrKHRoaXMucmlnaHREYXRlLmdldE1vbnRoKCkrMSkpfSxsZWZ0WWVhcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxlZnREYXRlLmdldEZ1bGxZZWFyKCl9LGxlZnRNb250aDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxlZnREYXRlLmdldE1vbnRoKCl9LGxlZnRNb250aERhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sZWZ0RGF0ZS5nZXREYXRlKCl9LHJpZ2h0WWVhcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLnJpZ2h0RGF0ZS5nZXRGdWxsWWVhcigpfSxyaWdodE1vbnRoOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmlnaHREYXRlLmdldE1vbnRoKCl9LHJpZ2h0TW9udGhEYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmlnaHREYXRlLmdldERhdGUoKX0sbWluVmlzaWJsZURhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5taW5EYXRlPygwLHIuZm9ybWF0RGF0ZSkodGhpcy5taW5EYXRlLHRoaXMuZGF0ZUZvcm1hdCk6IiJ9LG1heFZpc2libGVEYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWF4RGF0ZXx8dGhpcy5taW5EYXRlPygwLHIuZm9ybWF0RGF0ZSkodGhpcy5tYXhEYXRlfHx0aGlzLm1pbkRhdGUsdGhpcy5kYXRlRm9ybWF0KToiIn0sbWluVmlzaWJsZVRpbWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5taW5EYXRlPygwLHIuZm9ybWF0RGF0ZSkodGhpcy5taW5EYXRlLHRoaXMudGltZUZvcm1hdCk6IiJ9LG1heFZpc2libGVUaW1lOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWF4RGF0ZXx8dGhpcy5taW5EYXRlPygwLHIuZm9ybWF0RGF0ZSkodGhpcy5tYXhEYXRlfHx0aGlzLm1pbkRhdGUsdGhpcy50aW1lRm9ybWF0KToiIn0sdGltZUZvcm1hdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmZvcm1hdD8oMCxyLmV4dHJhY3RUaW1lRm9ybWF0KSh0aGlzLmZvcm1hdCk6IkhIOm1tOnNzIn0sZGF0ZUZvcm1hdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmZvcm1hdD8oMCxyLmV4dHJhY3REYXRlRm9ybWF0KSh0aGlzLmZvcm1hdCk6Inl5eXktTU0tZGQifSxlbmFibGVNb250aEFycm93OmZ1bmN0aW9uKCl7dmFyIGU9KHRoaXMubGVmdE1vbnRoKzEpJTEyLHQ9dGhpcy5sZWZ0TW9udGgrMT49MTI/MTowO3JldHVybiB0aGlzLnVubGlua1BhbmVscyYmbmV3IERhdGUodGhpcy5sZWZ0WWVhcit0LGUpPG5ldyBEYXRlKHRoaXMucmlnaHRZZWFyLHRoaXMucmlnaHRNb250aCl9LGVuYWJsZVllYXJBcnJvdzpmdW5jdGlvbigpe3JldHVybiB0aGlzLnVubGlua1BhbmVscyYmMTIqdGhpcy5yaWdodFllYXIrdGhpcy5yaWdodE1vbnRoLSgxMip0aGlzLmxlZnRZZWFyK3RoaXMubGVmdE1vbnRoKzEpPj0xMn19LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57cG9wcGVyQ2xhc3M6IiIsdmFsdWU6W10sZGVmYXVsdFZhbHVlOm51bGwsZGVmYXVsdFRpbWU6bnVsbCxtaW5EYXRlOiIiLG1heERhdGU6IiIsbGVmdERhdGU6bmV3IERhdGUscmlnaHREYXRlOigwLHIubmV4dE1vbnRoKShuZXcgRGF0ZSkscmFuZ2VTdGF0ZTp7ZW5kRGF0ZTpudWxsLHNlbGVjdGluZzohMSxyb3c6bnVsbCxjb2x1bW46bnVsbH0sc2hvd1RpbWU6ITEsc2hvcnRjdXRzOiIiLHZpc2libGU6IiIsZGlzYWJsZWREYXRlOiIiLGZpcnN0RGF5T2ZXZWVrOjcsbWluVGltZVBpY2tlclZpc2libGU6ITEsbWF4VGltZVBpY2tlclZpc2libGU6ITEsZm9ybWF0OiIiLGFycm93Q29udHJvbDohMSx1bmxpbmtQYW5lbHM6ITF9fSx3YXRjaDp7bWluRGF0ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7aWYodC4kcmVmcy5tYXhUaW1lUGlja2VyJiZ0Lm1heERhdGUmJnQubWF4RGF0ZTx0Lm1pbkRhdGUpe3QuJHJlZnMubWF4VGltZVBpY2tlci5zZWxlY3RhYmxlUmFuZ2U9W1soMCxyLnBhcnNlRGF0ZSkoKDAsci5mb3JtYXREYXRlKSh0Lm1pbkRhdGUsIkhIOm1tOnNzIiksIkhIOm1tOnNzIiksKDAsci5wYXJzZURhdGUpKCIyMzo1OTo1OSIsIkhIOm1tOnNzIildXX19KSxlJiZ0aGlzLiRyZWZzLm1pblRpbWVQaWNrZXImJih0aGlzLiRyZWZzLm1pblRpbWVQaWNrZXIuZGF0ZT1lLHRoaXMuJHJlZnMubWluVGltZVBpY2tlci52YWx1ZT1lKX0sbWF4RGF0ZTpmdW5jdGlvbihlKXtlJiZ0aGlzLiRyZWZzLm1heFRpbWVQaWNrZXImJih0aGlzLiRyZWZzLm1heFRpbWVQaWNrZXIuZGF0ZT1lLHRoaXMuJHJlZnMubWF4VGltZVBpY2tlci52YWx1ZT1lKX0sbWluVGltZVBpY2tlclZpc2libGU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztlJiZ0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3QuJHJlZnMubWluVGltZVBpY2tlci5kYXRlPXQubWluRGF0ZSx0LiRyZWZzLm1pblRpbWVQaWNrZXIudmFsdWU9dC5taW5EYXRlLHQuJHJlZnMubWluVGltZVBpY2tlci5hZGp1c3RTcGlubmVycygpfSl9LG1heFRpbWVQaWNrZXJWaXNpYmxlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7ZSYmdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXt0LiRyZWZzLm1heFRpbWVQaWNrZXIuZGF0ZT10Lm1heERhdGUsdC4kcmVmcy5tYXhUaW1lUGlja2VyLnZhbHVlPXQubWF4RGF0ZSx0LiRyZWZzLm1heFRpbWVQaWNrZXIuYWRqdXN0U3Bpbm5lcnMoKX0pfSx2YWx1ZTpmdW5jdGlvbihlKXtpZihlKXtpZihBcnJheS5pc0FycmF5KGUpKWlmKHRoaXMubWluRGF0ZT0oMCxyLmlzRGF0ZSkoZVswXSk/bmV3IERhdGUoZVswXSk6bnVsbCx0aGlzLm1heERhdGU9KDAsci5pc0RhdGUpKGVbMV0pP25ldyBEYXRlKGVbMV0pOm51bGwsdGhpcy5taW5EYXRlKWlmKHRoaXMubGVmdERhdGU9dGhpcy5taW5EYXRlLHRoaXMudW5saW5rUGFuZWxzJiZ0aGlzLm1heERhdGUpe3ZhciB0PXRoaXMubWluRGF0ZS5nZXRGdWxsWWVhcigpLG49dGhpcy5taW5EYXRlLmdldE1vbnRoKCksaT10aGlzLm1heERhdGUuZ2V0RnVsbFllYXIoKSxvPXRoaXMubWF4RGF0ZS5nZXRNb250aCgpO3RoaXMucmlnaHREYXRlPXQ9PT1pJiZuPT09bz8oMCxyLm5leHRNb250aCkodGhpcy5tYXhEYXRlKTp0aGlzLm1heERhdGV9ZWxzZSB0aGlzLnJpZ2h0RGF0ZT0oMCxyLm5leHRNb250aCkodGhpcy5sZWZ0RGF0ZSk7ZWxzZSB0aGlzLmxlZnREYXRlPWYodGhpcy5kZWZhdWx0VmFsdWUpWzBdLHRoaXMucmlnaHREYXRlPSgwLHIubmV4dE1vbnRoKSh0aGlzLmxlZnREYXRlKX1lbHNlIHRoaXMubWluRGF0ZT1udWxsLHRoaXMubWF4RGF0ZT1udWxsfSxkZWZhdWx0VmFsdWU6ZnVuY3Rpb24oZSl7aWYoIUFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkpe3ZhciB0PWYoZSksbj10WzBdLGk9dFsxXTt0aGlzLmxlZnREYXRlPW4sdGhpcy5yaWdodERhdGU9ZSYmZVsxXSYmdGhpcy51bmxpbmtQYW5lbHM/aTooMCxyLm5leHRNb250aCkodGhpcy5sZWZ0RGF0ZSl9fX0sbWV0aG9kczp7aGFuZGxlQ2xlYXI6ZnVuY3Rpb24oKXt0aGlzLm1pbkRhdGU9bnVsbCx0aGlzLm1heERhdGU9bnVsbCx0aGlzLmxlZnREYXRlPWYodGhpcy5kZWZhdWx0VmFsdWUpWzBdLHRoaXMucmlnaHREYXRlPSgwLHIubmV4dE1vbnRoKSh0aGlzLmxlZnREYXRlKSx0aGlzLiRlbWl0KCJwaWNrIixudWxsKX0saGFuZGxlQ2hhbmdlUmFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5taW5EYXRlPWUubWluRGF0ZSx0aGlzLm1heERhdGU9ZS5tYXhEYXRlLHRoaXMucmFuZ2VTdGF0ZT1lLnJhbmdlU3RhdGV9LGhhbmRsZURhdGVJbnB1dDpmdW5jdGlvbihlLHQpe3ZhciBuPWUudGFyZ2V0LnZhbHVlO2lmKG4ubGVuZ3RoPT09dGhpcy5kYXRlRm9ybWF0Lmxlbmd0aCl7dmFyIGk9KDAsci5wYXJzZURhdGUpKG4sdGhpcy5kYXRlRm9ybWF0KTtpZihpKXtpZigiZnVuY3Rpb24iPT10eXBlb2YgdGhpcy5kaXNhYmxlZERhdGUmJnRoaXMuZGlzYWJsZWREYXRlKG5ldyBEYXRlKGkpKSlyZXR1cm47Im1pbiI9PT10Pyh0aGlzLm1pbkRhdGU9bmV3IERhdGUoaSksdGhpcy5sZWZ0RGF0ZT1uZXcgRGF0ZShpKSx0aGlzLnJpZ2h0RGF0ZT0oMCxyLm5leHRNb250aCkodGhpcy5sZWZ0RGF0ZSkpOih0aGlzLm1heERhdGU9bmV3IERhdGUoaSksdGhpcy5sZWZ0RGF0ZT0oMCxyLnByZXZNb250aCkoaSksdGhpcy5yaWdodERhdGU9bmV3IERhdGUoaSkpfX19LGhhbmRsZURhdGVDaGFuZ2U6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLnRhcmdldC52YWx1ZSxpPSgwLHIucGFyc2VEYXRlKShuLHRoaXMuZGF0ZUZvcm1hdCk7aSYmKCJtaW4iPT09dD8odGhpcy5taW5EYXRlPSgwLHIubW9kaWZ5RGF0ZSkodGhpcy5taW5EYXRlLGkuZ2V0RnVsbFllYXIoKSxpLmdldE1vbnRoKCksaS5nZXREYXRlKCkpLHRoaXMubWluRGF0ZT50aGlzLm1heERhdGUmJih0aGlzLm1heERhdGU9dGhpcy5taW5EYXRlKSk6KHRoaXMubWF4RGF0ZT0oMCxyLm1vZGlmeURhdGUpKHRoaXMubWF4RGF0ZSxpLmdldEZ1bGxZZWFyKCksaS5nZXRNb250aCgpLGkuZ2V0RGF0ZSgpKSx0aGlzLm1heERhdGU8dGhpcy5taW5EYXRlJiYodGhpcy5taW5EYXRlPXRoaXMubWF4RGF0ZSkpKX0saGFuZGxlVGltZUNoYW5nZTpmdW5jdGlvbihlLHQpe3ZhciBuPWUudGFyZ2V0LnZhbHVlLGk9KDAsci5wYXJzZURhdGUpKG4sdGhpcy50aW1lRm9ybWF0KTtpJiYoIm1pbiI9PT10Pyh0aGlzLm1pbkRhdGU9KDAsci5tb2RpZnlUaW1lKSh0aGlzLm1pbkRhdGUsaS5nZXRIb3VycygpLGkuZ2V0TWludXRlcygpLGkuZ2V0U2Vjb25kcygpKSx0aGlzLm1pbkRhdGU+dGhpcy5tYXhEYXRlJiYodGhpcy5tYXhEYXRlPXRoaXMubWluRGF0ZSksdGhpcy4kcmVmcy5taW5UaW1lUGlja2VyLnZhbHVlPXRoaXMubWluRGF0ZSx0aGlzLm1pblRpbWVQaWNrZXJWaXNpYmxlPSExKToodGhpcy5tYXhEYXRlPSgwLHIubW9kaWZ5VGltZSkodGhpcy5tYXhEYXRlLGkuZ2V0SG91cnMoKSxpLmdldE1pbnV0ZXMoKSxpLmdldFNlY29uZHMoKSksdGhpcy5tYXhEYXRlPHRoaXMubWluRGF0ZSYmKHRoaXMubWluRGF0ZT10aGlzLm1heERhdGUpLHRoaXMuJHJlZnMubWF4VGltZVBpY2tlci52YWx1ZT10aGlzLm1pbkRhdGUsdGhpcy5tYXhUaW1lUGlja2VyVmlzaWJsZT0hMSkpfSxoYW5kbGVSYW5nZVBpY2s6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPSEoYXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0pfHxhcmd1bWVudHNbMV0saT10aGlzLmRlZmF1bHRUaW1lfHxbXSxvPSgwLHIubW9kaWZ5V2l0aFRpbWVTdHJpbmcpKGUubWluRGF0ZSxpWzBdKSxzPSgwLHIubW9kaWZ5V2l0aFRpbWVTdHJpbmcpKGUubWF4RGF0ZSxpWzFdKTt0aGlzLm1heERhdGU9PT1zJiZ0aGlzLm1pbkRhdGU9PT1vfHwodGhpcy5vblBpY2smJnRoaXMub25QaWNrKGUpLHRoaXMubWF4RGF0ZT1zLHRoaXMubWluRGF0ZT1vLHNldFRpbWVvdXQoZnVuY3Rpb24oKXt0Lm1heERhdGU9cyx0Lm1pbkRhdGU9b30sMTApLG4mJiF0aGlzLnNob3dUaW1lJiZ0aGlzLmhhbmRsZUNvbmZpcm0oKSl9LGhhbmRsZVNob3J0Y3V0Q2xpY2s6ZnVuY3Rpb24oZSl7ZS5vbkNsaWNrJiZlLm9uQ2xpY2sodGhpcyl9LGhhbmRsZU1pblRpbWVQaWNrOmZ1bmN0aW9uKGUsdCxuKXt0aGlzLm1pbkRhdGU9dGhpcy5taW5EYXRlfHxuZXcgRGF0ZSxlJiYodGhpcy5taW5EYXRlPSgwLHIubW9kaWZ5VGltZSkodGhpcy5taW5EYXRlLGUuZ2V0SG91cnMoKSxlLmdldE1pbnV0ZXMoKSxlLmdldFNlY29uZHMoKSkpLG58fCh0aGlzLm1pblRpbWVQaWNrZXJWaXNpYmxlPXQpLCghdGhpcy5tYXhEYXRlfHx0aGlzLm1heERhdGUmJnRoaXMubWF4RGF0ZS5nZXRUaW1lKCk8dGhpcy5taW5EYXRlLmdldFRpbWUoKSkmJih0aGlzLm1heERhdGU9bmV3IERhdGUodGhpcy5taW5EYXRlKSl9LGhhbmRsZU1pblRpbWVDbG9zZTpmdW5jdGlvbigpe3RoaXMubWluVGltZVBpY2tlclZpc2libGU9ITF9LGhhbmRsZU1heFRpbWVQaWNrOmZ1bmN0aW9uKGUsdCxuKXt0aGlzLm1heERhdGUmJmUmJih0aGlzLm1heERhdGU9KDAsci5tb2RpZnlUaW1lKSh0aGlzLm1heERhdGUsZS5nZXRIb3VycygpLGUuZ2V0TWludXRlcygpLGUuZ2V0U2Vjb25kcygpKSksbnx8KHRoaXMubWF4VGltZVBpY2tlclZpc2libGU9dCksdGhpcy5tYXhEYXRlJiZ0aGlzLm1pbkRhdGUmJnRoaXMubWluRGF0ZS5nZXRUaW1lKCk+dGhpcy5tYXhEYXRlLmdldFRpbWUoKSYmKHRoaXMubWluRGF0ZT1uZXcgRGF0ZSh0aGlzLm1heERhdGUpKX0saGFuZGxlTWF4VGltZUNsb3NlOmZ1bmN0aW9uKCl7dGhpcy5tYXhUaW1lUGlja2VyVmlzaWJsZT0hMX0sbGVmdFByZXZZZWFyOmZ1bmN0aW9uKCl7dGhpcy5sZWZ0RGF0ZT0oMCxyLnByZXZZZWFyKSh0aGlzLmxlZnREYXRlKSx0aGlzLnVubGlua1BhbmVsc3x8KHRoaXMucmlnaHREYXRlPSgwLHIubmV4dE1vbnRoKSh0aGlzLmxlZnREYXRlKSl9LGxlZnRQcmV2TW9udGg6ZnVuY3Rpb24oKXt0aGlzLmxlZnREYXRlPSgwLHIucHJldk1vbnRoKSh0aGlzLmxlZnREYXRlKSx0aGlzLnVubGlua1BhbmVsc3x8KHRoaXMucmlnaHREYXRlPSgwLHIubmV4dE1vbnRoKSh0aGlzLmxlZnREYXRlKSl9LHJpZ2h0TmV4dFllYXI6ZnVuY3Rpb24oKXt0aGlzLnVubGlua1BhbmVscz90aGlzLnJpZ2h0RGF0ZT0oMCxyLm5leHRZZWFyKSh0aGlzLnJpZ2h0RGF0ZSk6KHRoaXMubGVmdERhdGU9KDAsci5uZXh0WWVhcikodGhpcy5sZWZ0RGF0ZSksdGhpcy5yaWdodERhdGU9KDAsci5uZXh0TW9udGgpKHRoaXMubGVmdERhdGUpKX0scmlnaHROZXh0TW9udGg6ZnVuY3Rpb24oKXt0aGlzLnVubGlua1BhbmVscz90aGlzLnJpZ2h0RGF0ZT0oMCxyLm5leHRNb250aCkodGhpcy5yaWdodERhdGUpOih0aGlzLmxlZnREYXRlPSgwLHIubmV4dE1vbnRoKSh0aGlzLmxlZnREYXRlKSx0aGlzLnJpZ2h0RGF0ZT0oMCxyLm5leHRNb250aCkodGhpcy5sZWZ0RGF0ZSkpfSxsZWZ0TmV4dFllYXI6ZnVuY3Rpb24oKXt0aGlzLmxlZnREYXRlPSgwLHIubmV4dFllYXIpKHRoaXMubGVmdERhdGUpfSxsZWZ0TmV4dE1vbnRoOmZ1bmN0aW9uKCl7dGhpcy5sZWZ0RGF0ZT0oMCxyLm5leHRNb250aCkodGhpcy5sZWZ0RGF0ZSl9LHJpZ2h0UHJldlllYXI6ZnVuY3Rpb24oKXt0aGlzLnJpZ2h0RGF0ZT0oMCxyLnByZXZZZWFyKSh0aGlzLnJpZ2h0RGF0ZSl9LHJpZ2h0UHJldk1vbnRoOmZ1bmN0aW9uKCl7dGhpcy5yaWdodERhdGU9KDAsci5wcmV2TW9udGgpKHRoaXMucmlnaHREYXRlKX0saGFuZGxlQ29uZmlybTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdJiZhcmd1bWVudHNbMF07dGhpcy5pc1ZhbGlkVmFsdWUoW3RoaXMubWluRGF0ZSx0aGlzLm1heERhdGVdKSYmdGhpcy4kZW1pdCgicGljayIsW3RoaXMubWluRGF0ZSx0aGlzLm1heERhdGVdLGUpfSxpc1ZhbGlkVmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSkmJmUmJmVbMF0mJmVbMV0mJigwLHIuaXNEYXRlKShlWzBdKSYmKDAsci5pc0RhdGUpKGVbMV0pJiZlWzBdLmdldFRpbWUoKTw9ZVsxXS5nZXRUaW1lKCkmJigiZnVuY3Rpb24iIT10eXBlb2YgdGhpcy5kaXNhYmxlZERhdGV8fCF0aGlzLmRpc2FibGVkRGF0ZShlWzBdKSYmIXRoaXMuZGlzYWJsZWREYXRlKGVbMV0pKX0scmVzZXRWaWV3OmZ1bmN0aW9uKCl7dGhpcy5taW5EYXRlPXRoaXMudmFsdWUmJigwLHIuaXNEYXRlKSh0aGlzLnZhbHVlWzBdKT9uZXcgRGF0ZSh0aGlzLnZhbHVlWzBdKTpudWxsLHRoaXMubWF4RGF0ZT10aGlzLnZhbHVlJiYoMCxyLmlzRGF0ZSkodGhpcy52YWx1ZVswXSk/bmV3IERhdGUodGhpcy52YWx1ZVsxXSk6bnVsbH19LGNvbXBvbmVudHM6e1RpbWVQaWNrZXI6cy5kZWZhdWx0LERhdGVUYWJsZTphLmRlZmF1bHQsRWxJbnB1dDpsLmRlZmF1bHQsRWxCdXR0b246dS5kZWZhdWx0fX19LDE5MTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oInRyYW5zaXRpb24iLHthdHRyczp7bmFtZToiZWwtem9vbS1pbi10b3AifSxvbjp7ImFmdGVyLWxlYXZlIjpmdW5jdGlvbih0KXtlLiRlbWl0KCJkb2Rlc3Ryb3kiKX19fSxbbigiZGl2Iix7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6ZS52aXNpYmxlLGV4cHJlc3Npb246InZpc2libGUifV0sc3RhdGljQ2xhc3M6ImVsLXBpY2tlci1wYW5lbCBlbC1kYXRlLXJhbmdlLXBpY2tlciBlbC1wb3BwZXIiLGNsYXNzOlt7Imhhcy1zaWRlYmFyIjplLiRzbG90cy5zaWRlYmFyfHxlLnNob3J0Y3V0cywiaGFzLXRpbWUiOmUuc2hvd1RpbWV9LGUucG9wcGVyQ2xhc3NdfSxbbigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLXBpY2tlci1wYW5lbF9fYm9keS13cmFwcGVyIn0sW2UuX3QoInNpZGViYXIiKSxlLnNob3J0Y3V0cz9uKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtcGlja2VyLXBhbmVsX19zaWRlYmFyIn0sZS5fbChlLnNob3J0Y3V0cyxmdW5jdGlvbih0LHIpe3JldHVybiBuKCJidXR0b24iLHtrZXk6cixzdGF0aWNDbGFzczoiZWwtcGlja2VyLXBhbmVsX19zaG9ydGN1dCIsYXR0cnM6e3R5cGU6ImJ1dHRvbiJ9LG9uOntjbGljazpmdW5jdGlvbihuKXtlLmhhbmRsZVNob3J0Y3V0Q2xpY2sodCl9fX0sW2UuX3YoZS5fcyh0LnRleHQpKV0pfSkpOmUuX2UoKSxuKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtcGlja2VyLXBhbmVsX19ib2R5In0sW2Uuc2hvd1RpbWU/bigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLWRhdGUtcmFuZ2UtcGlja2VyX190aW1lLWhlYWRlciJ9LFtuKCJzcGFuIix7c3RhdGljQ2xhc3M6ImVsLWRhdGUtcmFuZ2UtcGlja2VyX19lZGl0b3JzLXdyYXAifSxbbigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC1kYXRlLXJhbmdlLXBpY2tlcl9fdGltZS1waWNrZXItd3JhcCJ9LFtuKCJlbC1pbnB1dCIse3JlZjoibWluSW5wdXQiLHN0YXRpY0NsYXNzOiJlbC1kYXRlLXJhbmdlLXBpY2tlcl9fZWRpdG9yIixhdHRyczp7c2l6ZToic21hbGwiLGRpc2FibGVkOmUucmFuZ2VTdGF0ZS5zZWxlY3RpbmcscGxhY2Vob2xkZXI6ZS50KCJlbC5kYXRlcGlja2VyLnN0YXJ0RGF0ZSIpLHZhbHVlOmUubWluVmlzaWJsZURhdGV9LG5hdGl2ZU9uOntpbnB1dDpmdW5jdGlvbih0KXtlLmhhbmRsZURhdGVJbnB1dCh0LCJtaW4iKX0sY2hhbmdlOmZ1bmN0aW9uKHQpe2UuaGFuZGxlRGF0ZUNoYW5nZSh0LCJtaW4iKX19fSldLDEpLG4oInNwYW4iLHtkaXJlY3RpdmVzOlt7bmFtZToiY2xpY2tvdXRzaWRlIixyYXdOYW1lOiJ2LWNsaWNrb3V0c2lkZSIsdmFsdWU6ZS5oYW5kbGVNaW5UaW1lQ2xvc2UsZXhwcmVzc2lvbjoiaGFuZGxlTWluVGltZUNsb3NlIn1dLHN0YXRpY0NsYXNzOiJlbC1kYXRlLXJhbmdlLXBpY2tlcl9fdGltZS1waWNrZXItd3JhcCJ9LFtuKCJlbC1pbnB1dCIse3N0YXRpY0NsYXNzOiJlbC1kYXRlLXJhbmdlLXBpY2tlcl9fZWRpdG9yIixhdHRyczp7c2l6ZToic21hbGwiLGRpc2FibGVkOmUucmFuZ2VTdGF0ZS5zZWxlY3RpbmcscGxhY2Vob2xkZXI6ZS50KCJlbC5kYXRlcGlja2VyLnN0YXJ0VGltZSIpLHZhbHVlOmUubWluVmlzaWJsZVRpbWV9LG9uOntmb2N1czpmdW5jdGlvbih0KXtlLm1pblRpbWVQaWNrZXJWaXNpYmxlPSEwfX0sbmF0aXZlT246e2NoYW5nZTpmdW5jdGlvbih0KXtlLmhhbmRsZVRpbWVDaGFuZ2UodCwibWluIil9fX0pLG4oInRpbWUtcGlja2VyIix7cmVmOiJtaW5UaW1lUGlja2VyIixhdHRyczp7InRpbWUtYXJyb3ctY29udHJvbCI6ZS5hcnJvd0NvbnRyb2wsdmlzaWJsZTplLm1pblRpbWVQaWNrZXJWaXNpYmxlfSxvbjp7cGljazplLmhhbmRsZU1pblRpbWVQaWNrLG1vdW50ZWQ6ZnVuY3Rpb24odCl7ZS4kcmVmcy5taW5UaW1lUGlja2VyLmZvcm1hdD1lLnRpbWVGb3JtYXR9fX0pXSwxKV0pLG4oInNwYW4iLHtzdGF0aWNDbGFzczoiZWwtaWNvbi1hcnJvdy1yaWdodCJ9KSxuKCJzcGFuIix7c3RhdGljQ2xhc3M6ImVsLWRhdGUtcmFuZ2UtcGlja2VyX19lZGl0b3JzLXdyYXAgaXMtcmlnaHQifSxbbigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC1kYXRlLXJhbmdlLXBpY2tlcl9fdGltZS1waWNrZXItd3JhcCJ9LFtuKCJlbC1pbnB1dCIse3N0YXRpY0NsYXNzOiJlbC1kYXRlLXJhbmdlLXBpY2tlcl9fZWRpdG9yIixhdHRyczp7c2l6ZToic21hbGwiLGRpc2FibGVkOmUucmFuZ2VTdGF0ZS5zZWxlY3RpbmcscGxhY2Vob2xkZXI6ZS50KCJlbC5kYXRlcGlja2VyLmVuZERhdGUiKSx2YWx1ZTplLm1heFZpc2libGVEYXRlLHJlYWRvbmx5OiFlLm1pbkRhdGV9LG5hdGl2ZU9uOntpbnB1dDpmdW5jdGlvbih0KXtlLmhhbmRsZURhdGVJbnB1dCh0LCJtYXgiKX0sY2hhbmdlOmZ1bmN0aW9uKHQpe2UuaGFuZGxlRGF0ZUNoYW5nZSh0LCJtYXgiKX19fSldLDEpLG4oInNwYW4iLHtkaXJlY3RpdmVzOlt7bmFtZToiY2xpY2tvdXRzaWRlIixyYXdOYW1lOiJ2LWNsaWNrb3V0c2lkZSIsdmFsdWU6ZS5oYW5kbGVNYXhUaW1lQ2xvc2UsZXhwcmVzc2lvbjoiaGFuZGxlTWF4VGltZUNsb3NlIn1dLHN0YXRpY0NsYXNzOiJlbC1kYXRlLXJhbmdlLXBpY2tlcl9fdGltZS1waWNrZXItd3JhcCJ9LFtuKCJlbC1pbnB1dCIse3JlZjoibWF4SW5wdXQiLHN0YXRpY0NsYXNzOiJlbC1kYXRlLXJhbmdlLXBpY2tlcl9fZWRpdG9yIixhdHRyczp7c2l6ZToic21hbGwiLGRpc2FibGVkOmUucmFuZ2VTdGF0ZS5zZWxlY3RpbmcscGxhY2Vob2xkZXI6ZS50KCJlbC5kYXRlcGlja2VyLmVuZFRpbWUiKSx2YWx1ZTplLm1heFZpc2libGVUaW1lLHJlYWRvbmx5OiFlLm1pbkRhdGV9LG9uOntmb2N1czpmdW5jdGlvbih0KXtlLm1pbkRhdGUmJihlLm1heFRpbWVQaWNrZXJWaXNpYmxlPSEwKX19LG5hdGl2ZU9uOntjaGFuZ2U6ZnVuY3Rpb24odCl7ZS5oYW5kbGVUaW1lQ2hhbmdlKHQsIm1heCIpfX19KSxuKCJ0aW1lLXBpY2tlciIse3JlZjoibWF4VGltZVBpY2tlciIsYXR0cnM6eyJ0aW1lLWFycm93LWNvbnRyb2wiOmUuYXJyb3dDb250cm9sLHZpc2libGU6ZS5tYXhUaW1lUGlja2VyVmlzaWJsZX0sb246e3BpY2s6ZS5oYW5kbGVNYXhUaW1lUGljayxtb3VudGVkOmZ1bmN0aW9uKHQpe2UuJHJlZnMubWF4VGltZVBpY2tlci5mb3JtYXQ9ZS50aW1lRm9ybWF0fX19KV0sMSldKV0pOmUuX2UoKSxuKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtcGlja2VyLXBhbmVsX19jb250ZW50IGVsLWRhdGUtcmFuZ2UtcGlja2VyX19jb250ZW50IGlzLWxlZnQifSxbbigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLWRhdGUtcmFuZ2UtcGlja2VyX19oZWFkZXIifSxbbigiYnV0dG9uIix7c3RhdGljQ2xhc3M6ImVsLXBpY2tlci1wYW5lbF9faWNvbi1idG4gZWwtaWNvbi1kLWFycm93LWxlZnQiLGF0dHJzOnt0eXBlOiJidXR0b24ifSxvbjp7Y2xpY2s6ZS5sZWZ0UHJldlllYXJ9fSksbigiYnV0dG9uIix7c3RhdGljQ2xhc3M6ImVsLXBpY2tlci1wYW5lbF9faWNvbi1idG4gZWwtaWNvbi1hcnJvdy1sZWZ0IixhdHRyczp7dHlwZToiYnV0dG9uIn0sb246e2NsaWNrOmUubGVmdFByZXZNb250aH19KSxlLnVubGlua1BhbmVscz9uKCJidXR0b24iLHtzdGF0aWNDbGFzczoiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1pY29uLWQtYXJyb3ctcmlnaHQiLGNsYXNzOnsiaXMtZGlzYWJsZWQiOiFlLmVuYWJsZVllYXJBcnJvd30sYXR0cnM6e3R5cGU6ImJ1dHRvbiIsZGlzYWJsZWQ6IWUuZW5hYmxlWWVhckFycm93fSxvbjp7Y2xpY2s6ZS5sZWZ0TmV4dFllYXJ9fSk6ZS5fZSgpLGUudW5saW5rUGFuZWxzP24oImJ1dHRvbiIse3N0YXRpY0NsYXNzOiJlbC1waWNrZXItcGFuZWxfX2ljb24tYnRuIGVsLWljb24tYXJyb3ctcmlnaHQiLGNsYXNzOnsiaXMtZGlzYWJsZWQiOiFlLmVuYWJsZU1vbnRoQXJyb3d9LGF0dHJzOnt0eXBlOiJidXR0b24iLGRpc2FibGVkOiFlLmVuYWJsZU1vbnRoQXJyb3d9LG9uOntjbGljazplLmxlZnROZXh0TW9udGh9fSk6ZS5fZSgpLG4oImRpdiIsW2UuX3YoZS5fcyhlLmxlZnRMYWJlbCkpXSldKSxuKCJkYXRlLXRhYmxlIix7YXR0cnM6eyJzZWxlY3Rpb24tbW9kZSI6InJhbmdlIixkYXRlOmUubGVmdERhdGUsImRlZmF1bHQtdmFsdWUiOmUuZGVmYXVsdFZhbHVlLCJtaW4tZGF0ZSI6ZS5taW5EYXRlLCJtYXgtZGF0ZSI6ZS5tYXhEYXRlLCJyYW5nZS1zdGF0ZSI6ZS5yYW5nZVN0YXRlLCJkaXNhYmxlZC1kYXRlIjplLmRpc2FibGVkRGF0ZSwiZmlyc3QtZGF5LW9mLXdlZWsiOmUuZmlyc3REYXlPZldlZWt9LG9uOntjaGFuZ2VyYW5nZTplLmhhbmRsZUNoYW5nZVJhbmdlLHBpY2s6ZS5oYW5kbGVSYW5nZVBpY2t9fSldLDEpLG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC1waWNrZXItcGFuZWxfX2NvbnRlbnQgZWwtZGF0ZS1yYW5nZS1waWNrZXJfX2NvbnRlbnQgaXMtcmlnaHQifSxbbigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLWRhdGUtcmFuZ2UtcGlja2VyX19oZWFkZXIifSxbZS51bmxpbmtQYW5lbHM/bigiYnV0dG9uIix7c3RhdGljQ2xhc3M6ImVsLXBpY2tlci1wYW5lbF9faWNvbi1idG4gZWwtaWNvbi1kLWFycm93LWxlZnQiLGNsYXNzOnsiaXMtZGlzYWJsZWQiOiFlLmVuYWJsZVllYXJBcnJvd30sYXR0cnM6e3R5cGU6ImJ1dHRvbiIsZGlzYWJsZWQ6IWUuZW5hYmxlWWVhckFycm93fSxvbjp7Y2xpY2s6ZS5yaWdodFByZXZZZWFyfX0pOmUuX2UoKSxlLnVubGlua1BhbmVscz9uKCJidXR0b24iLHtzdGF0aWNDbGFzczoiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1pY29uLWFycm93LWxlZnQiLGNsYXNzOnsiaXMtZGlzYWJsZWQiOiFlLmVuYWJsZU1vbnRoQXJyb3d9LGF0dHJzOnt0eXBlOiJidXR0b24iLGRpc2FibGVkOiFlLmVuYWJsZU1vbnRoQXJyb3d9LG9uOntjbGljazplLnJpZ2h0UHJldk1vbnRofX0pOmUuX2UoKSxuKCJidXR0b24iLHtzdGF0aWNDbGFzczoiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1pY29uLWQtYXJyb3ctcmlnaHQiLGF0dHJzOnt0eXBlOiJidXR0b24ifSxvbjp7Y2xpY2s6ZS5yaWdodE5leHRZZWFyfX0pLG4oImJ1dHRvbiIse3N0YXRpY0NsYXNzOiJlbC1waWNrZXItcGFuZWxfX2ljb24tYnRuIGVsLWljb24tYXJyb3ctcmlnaHQiLGF0dHJzOnt0eXBlOiJidXR0b24ifSxvbjp7Y2xpY2s6ZS5yaWdodE5leHRNb250aH19KSxuKCJkaXYiLFtlLl92KGUuX3MoZS5yaWdodExhYmVsKSldKV0pLG4oImRhdGUtdGFibGUiLHthdHRyczp7InNlbGVjdGlvbi1tb2RlIjoicmFuZ2UiLGRhdGU6ZS5yaWdodERhdGUsImRlZmF1bHQtdmFsdWUiOmUuZGVmYXVsdFZhbHVlLCJtaW4tZGF0ZSI6ZS5taW5EYXRlLCJtYXgtZGF0ZSI6ZS5tYXhEYXRlLCJyYW5nZS1zdGF0ZSI6ZS5yYW5nZVN0YXRlLCJkaXNhYmxlZC1kYXRlIjplLmRpc2FibGVkRGF0ZSwiZmlyc3QtZGF5LW9mLXdlZWsiOmUuZmlyc3REYXlPZldlZWt9LG9uOntjaGFuZ2VyYW5nZTplLmhhbmRsZUNoYW5nZVJhbmdlLHBpY2s6ZS5oYW5kbGVSYW5nZVBpY2t9fSldLDEpXSldLDIpLGUuc2hvd1RpbWU/bigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLXBpY2tlci1wYW5lbF9fZm9vdGVyIn0sW24oImVsLWJ1dHRvbiIse3N0YXRpY0NsYXNzOiJlbC1waWNrZXItcGFuZWxfX2xpbmstYnRuIixhdHRyczp7c2l6ZToibWluaSIsdHlwZToidGV4dCJ9LG9uOntjbGljazplLmhhbmRsZUNsZWFyfX0sW2UuX3YoIlxuICAgICAgICAiK2UuX3MoZS50KCJlbC5kYXRlcGlja2VyLmNsZWFyIikpKyJcbiAgICAgICIpXSksbigiZWwtYnV0dG9uIix7c3RhdGljQ2xhc3M6ImVsLXBpY2tlci1wYW5lbF9fbGluay1idG4iLGF0dHJzOntwbGFpbjoiIixzaXplOiJtaW5pIixkaXNhYmxlZDplLmJ0bkRpc2FibGVkfSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVDb25maXJtKCExKX19fSxbZS5fdigiXG4gICAgICAgICIrZS5fcyhlLnQoImVsLmRhdGVwaWNrZXIuY29uZmlybSIpKSsiXG4gICAgICAiKV0pXSwxKTplLl9lKCldKV0pfSxzdGF0aWNSZW5kZXJGbnM6W119O3QuYT1yfSwyOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oInlsREoiKX0sMjQ6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9bigzKTt0LmRlZmF1bHQ9e2JpbmQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPW51bGwsbz12b2lkIDAscz1mdW5jdGlvbigpe3JldHVybiBuLmNvbnRleHRbdC5leHByZXNzaW9uXS5hcHBseSgpfSxhPWZ1bmN0aW9uKCl7bmV3IERhdGUtbzwxMDAmJnMoKSxjbGVhckludGVydmFsKGkpLGk9bnVsbH07KDAsci5vbikoZSwibW91c2Vkb3duIixmdW5jdGlvbihlKXswPT09ZS5idXR0b24mJihvPW5ldyBEYXRlLCgwLHIub25jZSkoZG9jdW1lbnQsIm1vdXNldXAiLGEpLGNsZWFySW50ZXJ2YWwoaSksaT1zZXRJbnRlcnZhbChzLDEwMCkpfSl9fX0sMjc6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigyOCksaT1uLm4ociksbz1uKDMwKSxzPW4oMCkoaS5hLG8uYSwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PXMuZXhwb3J0c30sMjg6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9YyhuKDQpKSxpPWMobigxMCkpLG89bigxMSkscz1jKG4oNykpLGE9YyhuKDEpKSxsPWMobig2KSksdT1jKG4oOSkpO2Z1bmN0aW9uIGMoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBkPXtwcm9wczp7YXBwZW5kVG9Cb2R5OnMuZGVmYXVsdC5wcm9wcy5hcHBlbmRUb0JvZHksb2Zmc2V0OnMuZGVmYXVsdC5wcm9wcy5vZmZzZXQsYm91bmRhcmllc1BhZGRpbmc6cy5kZWZhdWx0LnByb3BzLmJvdW5kYXJpZXNQYWRkaW5nLGFycm93T2Zmc2V0OnMuZGVmYXVsdC5wcm9wcy5hcnJvd09mZnNldH0sbWV0aG9kczpzLmRlZmF1bHQubWV0aG9kcyxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJuKDAsdS5kZWZhdWx0KSh7dmlzaWJsZUFycm93OiEwfSxzLmRlZmF1bHQuZGF0YSl9LGJlZm9yZURlc3Ryb3k6cy5kZWZhdWx0LmJlZm9yZURlc3Ryb3l9LGY9e2RhdGU6Inl5eXktTU0tZGQiLG1vbnRoOiJ5eXl5LU1NIixkYXRldGltZToieXl5eS1NTS1kZCBISDptbTpzcyIsdGltZToiSEg6bW06c3MiLHdlZWs6Inl5eXl3V1ciLHRpbWVyYW5nZToiSEg6bW06c3MiLGRhdGVyYW5nZToieXl5eS1NTS1kZCIsZGF0ZXRpbWVyYW5nZToieXl5eS1NTS1kZCBISDptbTpzcyIseWVhcjoieXl5eSJ9LGg9WyJkYXRlIiwiZGF0ZXRpbWUiLCJ0aW1lIiwidGltZS1zZWxlY3QiLCJ3ZWVrIiwibW9udGgiLCJ5ZWFyIiwiZGF0ZXJhbmdlIiwidGltZXJhbmdlIiwiZGF0ZXRpbWVyYW5nZSIsImRhdGVzIl0scD1mdW5jdGlvbihlLHQpe3JldHVybiJ0aW1lc3RhbXAiPT09dD9lLmdldFRpbWUoKTooMCxvLmZvcm1hdERhdGUpKGUsdCl9LG09ZnVuY3Rpb24oZSx0KXtyZXR1cm4idGltZXN0YW1wIj09PXQ/bmV3IERhdGUoTnVtYmVyKGUpKTooMCxvLnBhcnNlRGF0ZSkoZSx0KX0sdj1mdW5jdGlvbihlLHQpe2lmKEFycmF5LmlzQXJyYXkoZSkmJjI9PT1lLmxlbmd0aCl7dmFyIG49ZVswXSxyPWVbMV07aWYobiYmcilyZXR1cm5bcChuLHQpLHAocix0KV19cmV0dXJuIiJ9LGc9ZnVuY3Rpb24oZSx0LG4pe2lmKEFycmF5LmlzQXJyYXkoZSl8fChlPWUuc3BsaXQobikpLDI9PT1lLmxlbmd0aCl7dmFyIHI9ZVswXSxpPWVbMV07cmV0dXJuW20ocix0KSxtKGksdCldfXJldHVybltdfSx5PXtkZWZhdWx0Ontmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/IiIrZToiIn0scGFyc2VyOmZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lfHwiIj09PWU/bnVsbDplfX0sd2Vlazp7Zm9ybWF0dGVyOmZ1bmN0aW9uKGUsdCl7dmFyIG49KDAsby5nZXRXZWVrTnVtYmVyKShlKSxyPWUuZ2V0TW9udGgoKSxpPW5ldyBEYXRlKGUpOzE9PT1uJiYxMT09PXImJihpLnNldEhvdXJzKDAsMCwwLDApLGkuc2V0RGF0ZShpLmdldERhdGUoKSszLShpLmdldERheSgpKzYpJTcpKTt2YXIgcz0oMCxvLmZvcm1hdERhdGUpKGksdCk7cmV0dXJuIHM9L1dXLy50ZXN0KHMpP3MucmVwbGFjZSgvV1cvLG48MTA/IjAiK246bik6cy5yZXBsYWNlKC9XLyxuKX0scGFyc2VyOmZ1bmN0aW9uKGUpe3ZhciB0PShlfHwiIikuc3BsaXQoInciKTtpZigyPT09dC5sZW5ndGgpe3ZhciBuPU51bWJlcih0WzBdKSxyPU51bWJlcih0WzFdKTtpZighaXNOYU4obikmJiFpc05hTihyKSYmcjw1NClyZXR1cm4gZX1yZXR1cm4gbnVsbH19LGRhdGU6e2Zvcm1hdHRlcjpwLHBhcnNlcjptfSxkYXRldGltZTp7Zm9ybWF0dGVyOnAscGFyc2VyOm19LGRhdGVyYW5nZTp7Zm9ybWF0dGVyOnYscGFyc2VyOmd9LGRhdGV0aW1lcmFuZ2U6e2Zvcm1hdHRlcjp2LHBhcnNlcjpnfSx0aW1lcmFuZ2U6e2Zvcm1hdHRlcjp2LHBhcnNlcjpnfSx0aW1lOntmb3JtYXR0ZXI6cCxwYXJzZXI6bX0sbW9udGg6e2Zvcm1hdHRlcjpwLHBhcnNlcjptfSx5ZWFyOntmb3JtYXR0ZXI6cCxwYXJzZXI6bX0sbnVtYmVyOntmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/IiIrZToiIn0scGFyc2VyOmZ1bmN0aW9uKGUpe3ZhciB0PU51bWJlcihlKTtyZXR1cm4gaXNOYU4oZSk/bnVsbDp0fX0sZGF0ZXM6e2Zvcm1hdHRlcjpmdW5jdGlvbihlLHQpe3JldHVybiBlLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gcChlLHQpfSl9LHBhcnNlcjpmdW5jdGlvbihlLHQpe3JldHVybigic3RyaW5nIj09dHlwZW9mIGU/ZS5zcGxpdCgiLCAiKTplKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBEYXRlP2U6bShlLHQpfSl9fX0sXz17bGVmdDoiYm90dG9tLXN0YXJ0IixjZW50ZXI6ImJvdHRvbSIscmlnaHQ6ImJvdHRvbS1lbmQifSxiPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106Ii0iO3JldHVybiBlPygwLCh5W25dfHx5LmRlZmF1bHQpLnBhcnNlcikoZSx0fHxmW25dLHIpOm51bGx9LHg9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBlPygwLCh5W25dfHx5LmRlZmF1bHQpLmZvcm1hdHRlcikoZSx0fHxmW25dKTpudWxsfSxDPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZnVuY3Rpb24oZSx0KXt2YXIgbj1lIGluc3RhbmNlb2YgRGF0ZSxyPXQgaW5zdGFuY2VvZiBEYXRlO3JldHVybiBuJiZyP2UuZ2V0VGltZSgpPT09dC5nZXRUaW1lKCk6IW4mJiFyJiZlPT09dH0scj1lIGluc3RhbmNlb2YgQXJyYXksaT10IGluc3RhbmNlb2YgQXJyYXk7cmV0dXJuIHImJmk/ZS5sZW5ndGg9PT10Lmxlbmd0aCYmZS5ldmVyeShmdW5jdGlvbihlLHIpe3JldHVybiBuKGUsdFtyXSl9KTohciYmIWkmJm4oZSx0KX0sdz1mdW5jdGlvbihlKXtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIGV8fGUgaW5zdGFuY2VvZiBTdHJpbmd9LGs9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PT1lfHx2b2lkIDA9PT1lfHx3KGUpfHxBcnJheS5pc0FycmF5KGUpJiYyPT09ZS5sZW5ndGgmJmUuZXZlcnkodyl9O3QuZGVmYXVsdD17bWl4aW5zOlthLmRlZmF1bHQsZF0saW5qZWN0OntlbEZvcm06e2RlZmF1bHQ6IiJ9LGVsRm9ybUl0ZW06e2RlZmF1bHQ6IiJ9fSxwcm9wczp7c2l6ZTpTdHJpbmcsZm9ybWF0OlN0cmluZyx2YWx1ZUZvcm1hdDpTdHJpbmcscmVhZG9ubHk6Qm9vbGVhbixwbGFjZWhvbGRlcjpTdHJpbmcsc3RhcnRQbGFjZWhvbGRlcjpTdHJpbmcsZW5kUGxhY2Vob2xkZXI6U3RyaW5nLHByZWZpeEljb246U3RyaW5nLGNsZWFySWNvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDoiZWwtaWNvbi1jaXJjbGUtY2xvc2UifSxuYW1lOntkZWZhdWx0OiIiLHZhbGlkYXRvcjprfSxkaXNhYmxlZDpCb29sZWFuLGNsZWFyYWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGlkOntkZWZhdWx0OiIiLHZhbGlkYXRvcjprfSxwb3BwZXJDbGFzczpTdHJpbmcsZWRpdGFibGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxhbGlnbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDoibGVmdCJ9LHZhbHVlOnt9LGRlZmF1bHRWYWx1ZTp7fSxkZWZhdWx0VGltZTp7fSxyYW5nZVNlcGFyYXRvcjp7ZGVmYXVsdDoiLSJ9LHBpY2tlck9wdGlvbnM6e30sdW5saW5rUGFuZWxzOkJvb2xlYW59LGNvbXBvbmVudHM6e0VsSW5wdXQ6bC5kZWZhdWx0fSxkaXJlY3RpdmVzOntDbGlja291dHNpZGU6aS5kZWZhdWx0fSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3BpY2tlclZpc2libGU6ITEsc2hvd0Nsb3NlOiExLHVzZXJJbnB1dDpudWxsLHZhbHVlT25PcGVuOm51bGwsdW53YXRjaFBpY2tlck9wdGlvbnM6bnVsbH19LHdhdGNoOntwaWNrZXJWaXNpYmxlOmZ1bmN0aW9uKGUpe3RoaXMucmVhZG9ubHl8fHRoaXMucGlja2VyRGlzYWJsZWR8fChlPyh0aGlzLnNob3dQaWNrZXIoKSx0aGlzLnZhbHVlT25PcGVuPUFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSk/W10uY29uY2F0KHRoaXMudmFsdWUpOnRoaXMudmFsdWUpOih0aGlzLmhpZGVQaWNrZXIoKSx0aGlzLmVtaXRDaGFuZ2UodGhpcy52YWx1ZSksdGhpcy51c2VySW5wdXQ9bnVsbCx0aGlzLmRpc3BhdGNoKCJFbEZvcm1JdGVtIiwiZWwuZm9ybS5ibHVyIiksdGhpcy4kZW1pdCgiYmx1ciIsdGhpcyksdGhpcy5ibHVyKCkpKX0scGFyc2VkVmFsdWU6e2ltbWVkaWF0ZTohMCxoYW5kbGVyOmZ1bmN0aW9uKGUpe3RoaXMucGlja2VyJiYodGhpcy5waWNrZXIudmFsdWU9ZSl9fSxkZWZhdWx0VmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5waWNrZXImJih0aGlzLnBpY2tlci5kZWZhdWx0VmFsdWU9ZSl9LHZhbHVlOmZ1bmN0aW9uKGUsdCl7QyhlLHQpfHx0aGlzLnBpY2tlclZpc2libGV8fHRoaXMuZGlzcGF0Y2goIkVsRm9ybUl0ZW0iLCJlbC5mb3JtLmNoYW5nZSIsZSl9fSxjb21wdXRlZDp7cmFuZ2VkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudHlwZS5pbmRleE9mKCJyYW5nZSIpPi0xfSxyZWZlcmVuY2U6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRyZWZzLnJlZmVyZW5jZTtyZXR1cm4gZS4kZWx8fGV9LHJlZklucHV0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVmZXJlbmNlP1tdLnNsaWNlLmNhbGwodGhpcy5yZWZlcmVuY2UucXVlcnlTZWxlY3RvckFsbCgiaW5wdXQiKSk6W119LHZhbHVlSXNFbXB0eTpmdW5jdGlvbigpe3ZhciBlPXRoaXMudmFsdWU7aWYoQXJyYXkuaXNBcnJheShlKSl7Zm9yKHZhciB0PTAsbj1lLmxlbmd0aDt0PG47dCsrKWlmKGVbdF0pcmV0dXJuITF9ZWxzZSBpZihlKXJldHVybiExO3JldHVybiEwfSx0cmlnZ2VyQ2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcmVmaXhJY29ufHwoLTEhPT10aGlzLnR5cGUuaW5kZXhPZigidGltZSIpPyJlbC1pY29uLXRpbWUiOiJlbC1pY29uLWRhdGUiKX0sc2VsZWN0aW9uTW9kZTpmdW5jdGlvbigpe3JldHVybiJ3ZWVrIj09PXRoaXMudHlwZT8id2VlayI6Im1vbnRoIj09PXRoaXMudHlwZT8ibW9udGgiOiJ5ZWFyIj09PXRoaXMudHlwZT8ieWVhciI6ImRhdGVzIj09PXRoaXMudHlwZT8iZGF0ZXMiOiJkYXkifSxoYXZlVHJpZ2dlcjpmdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT10aGlzLnNob3dUcmlnZ2VyP3RoaXMuc2hvd1RyaWdnZXI6LTEhPT1oLmluZGV4T2YodGhpcy50eXBlKX0sZGlzcGxheVZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9eCh0aGlzLnBhcnNlZFZhbHVlLHRoaXMuZm9ybWF0LHRoaXMudHlwZSx0aGlzLnJhbmdlU2VwYXJhdG9yKTtyZXR1cm4gQXJyYXkuaXNBcnJheSh0aGlzLnVzZXJJbnB1dCk/W3RoaXMudXNlcklucHV0WzBdfHxlJiZlWzBdfHwiIix0aGlzLnVzZXJJbnB1dFsxXXx8ZSYmZVsxXXx8IiJdOm51bGwhPT10aGlzLnVzZXJJbnB1dD90aGlzLnVzZXJJbnB1dDplPyJkYXRlcyI9PT10aGlzLnR5cGU/ZS5qb2luKCIsICIpOmU6IiJ9LHBhcnNlZFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWU/InRpbWUtc2VsZWN0Ij09PXRoaXMudHlwZT90aGlzLnZhbHVlOigwLG8uaXNEYXRlT2JqZWN0KSh0aGlzLnZhbHVlKXx8QXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSYmdGhpcy52YWx1ZS5ldmVyeShvLmlzRGF0ZU9iamVjdCk/dGhpcy52YWx1ZTp0aGlzLnZhbHVlRm9ybWF0P2IodGhpcy52YWx1ZSx0aGlzLnZhbHVlRm9ybWF0LHRoaXMudHlwZSx0aGlzLnJhbmdlU2VwYXJhdG9yKXx8dGhpcy52YWx1ZTpBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpP3RoaXMudmFsdWUubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBuZXcgRGF0ZShlKX0pOm5ldyBEYXRlKHRoaXMudmFsdWUpOnRoaXMudmFsdWV9LF9lbEZvcm1JdGVtU2l6ZTpmdW5jdGlvbigpe3JldHVybih0aGlzLmVsRm9ybUl0ZW18fHt9KS5lbEZvcm1JdGVtU2l6ZX0scGlja2VyU2l6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNpemV8fHRoaXMuX2VsRm9ybUl0ZW1TaXplfHwodGhpcy4kRUxFTUVOVHx8e30pLnNpemV9LHBpY2tlckRpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGlzYWJsZWR8fCh0aGlzLmVsRm9ybXx8e30pLmRpc2FibGVkfSxmaXJzdElucHV0SWQ6ZnVuY3Rpb24oKXt2YXIgZT17fSx0PXZvaWQgMDtyZXR1cm4odD10aGlzLnJhbmdlZD90aGlzLmlkJiZ0aGlzLmlkWzBdOnRoaXMuaWQpJiYoZS5pZD10KSxlfSxzZWNvbmRJbnB1dElkOmZ1bmN0aW9uKCl7dmFyIGU9e30sdD12b2lkIDA7cmV0dXJuIHRoaXMucmFuZ2VkJiYodD10aGlzLmlkJiZ0aGlzLmlkWzFdKSx0JiYoZS5pZD10KSxlfX0sY3JlYXRlZDpmdW5jdGlvbigpe3RoaXMucG9wcGVyT3B0aW9ucz17Ym91bmRhcmllc1BhZGRpbmc6MCxncHVBY2NlbGVyYXRpb246ITF9LHRoaXMucGxhY2VtZW50PV9bdGhpcy5hbGlnbl18fF8ubGVmdCx0aGlzLiRvbigiZmllbGRSZXNldCIsdGhpcy5oYW5kbGVGaWVsZFJlc2V0KX0sbWV0aG9kczp7Zm9jdXM6ZnVuY3Rpb24oKXt0aGlzLnJhbmdlZD90aGlzLmhhbmRsZUZvY3VzKCk6dGhpcy4kcmVmcy5yZWZlcmVuY2UuZm9jdXMoKX0sYmx1cjpmdW5jdGlvbigpe3RoaXMucmVmSW5wdXQuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5ibHVyKCl9KX0scGFyc2VWYWx1ZTpmdW5jdGlvbihlKXt2YXIgdD0oMCxvLmlzRGF0ZU9iamVjdCkoZSl8fEFycmF5LmlzQXJyYXkoZSkmJmUuZXZlcnkoby5pc0RhdGVPYmplY3QpO3JldHVybiB0aGlzLnZhbHVlRm9ybWF0JiYhdCYmYihlLHRoaXMudmFsdWVGb3JtYXQsdGhpcy50eXBlLHRoaXMucmFuZ2VTZXBhcmF0b3IpfHxlfSxmb3JtYXRUb1ZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PSgwLG8uaXNEYXRlT2JqZWN0KShlKXx8QXJyYXkuaXNBcnJheShlKSYmZS5ldmVyeShvLmlzRGF0ZU9iamVjdCk7cmV0dXJuIHRoaXMudmFsdWVGb3JtYXQmJnQ/eChlLHRoaXMudmFsdWVGb3JtYXQsdGhpcy50eXBlLHRoaXMucmFuZ2VTZXBhcmF0b3IpOmV9LHBhcnNlU3RyaW5nOmZ1bmN0aW9uKGUpe3ZhciB0PUFycmF5LmlzQXJyYXkoZSk/dGhpcy50eXBlOnRoaXMudHlwZS5yZXBsYWNlKCJyYW5nZSIsIiIpO3JldHVybiBiKGUsdGhpcy5mb3JtYXQsdCl9LGZvcm1hdFRvU3RyaW5nOmZ1bmN0aW9uKGUpe3ZhciB0PUFycmF5LmlzQXJyYXkoZSk/dGhpcy50eXBlOnRoaXMudHlwZS5yZXBsYWNlKCJyYW5nZSIsIiIpO3JldHVybiB4KGUsdGhpcy5mb3JtYXQsdCl9LGhhbmRsZU1vdXNlRW50ZXI6ZnVuY3Rpb24oKXt0aGlzLnJlYWRvbmx5fHx0aGlzLnBpY2tlckRpc2FibGVkfHwhdGhpcy52YWx1ZUlzRW1wdHkmJnRoaXMuY2xlYXJhYmxlJiYodGhpcy5zaG93Q2xvc2U9ITApfSxoYW5kbGVDaGFuZ2U6ZnVuY3Rpb24oKXtpZih0aGlzLnVzZXJJbnB1dCl7dmFyIGU9dGhpcy5wYXJzZVN0cmluZyh0aGlzLmRpc3BsYXlWYWx1ZSk7ZSYmKHRoaXMucGlja2VyLnZhbHVlPWUsdGhpcy5pc1ZhbGlkVmFsdWUoZSkmJih0aGlzLmVtaXRJbnB1dChlKSx0aGlzLnVzZXJJbnB1dD1udWxsKSl9IiI9PT10aGlzLnVzZXJJbnB1dCYmKHRoaXMuZW1pdElucHV0KG51bGwpLHRoaXMuZW1pdENoYW5nZShudWxsKSx0aGlzLnVzZXJJbnB1dD1udWxsKX0saGFuZGxlU3RhcnRJbnB1dDpmdW5jdGlvbihlKXt0aGlzLnVzZXJJbnB1dD90aGlzLnVzZXJJbnB1dD1bZS50YXJnZXQudmFsdWUsdGhpcy51c2VySW5wdXRbMV1dOnRoaXMudXNlcklucHV0PVtlLnRhcmdldC52YWx1ZSxudWxsXX0saGFuZGxlRW5kSW5wdXQ6ZnVuY3Rpb24oZSl7dGhpcy51c2VySW5wdXQ/dGhpcy51c2VySW5wdXQ9W3RoaXMudXNlcklucHV0WzBdLGUudGFyZ2V0LnZhbHVlXTp0aGlzLnVzZXJJbnB1dD1bbnVsbCxlLnRhcmdldC52YWx1ZV19LGhhbmRsZVN0YXJ0Q2hhbmdlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMucGFyc2VTdHJpbmcodGhpcy51c2VySW5wdXQmJnRoaXMudXNlcklucHV0WzBdKTtpZih0KXt0aGlzLnVzZXJJbnB1dD1bdGhpcy5mb3JtYXRUb1N0cmluZyh0KSx0aGlzLmRpc3BsYXlWYWx1ZVsxXV07dmFyIG49W3QsdGhpcy5waWNrZXIudmFsdWUmJnRoaXMucGlja2VyLnZhbHVlWzFdXTt0aGlzLnBpY2tlci52YWx1ZT1uLHRoaXMuaXNWYWxpZFZhbHVlKG4pJiYodGhpcy5lbWl0SW5wdXQobiksdGhpcy51c2VySW5wdXQ9bnVsbCl9fSxoYW5kbGVFbmRDaGFuZ2U6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5wYXJzZVN0cmluZyh0aGlzLnVzZXJJbnB1dCYmdGhpcy51c2VySW5wdXRbMV0pO2lmKHQpe3RoaXMudXNlcklucHV0PVt0aGlzLmRpc3BsYXlWYWx1ZVswXSx0aGlzLmZvcm1hdFRvU3RyaW5nKHQpXTt2YXIgbj1bdGhpcy5waWNrZXIudmFsdWUmJnRoaXMucGlja2VyLnZhbHVlWzBdLHRdO3RoaXMucGlja2VyLnZhbHVlPW4sdGhpcy5pc1ZhbGlkVmFsdWUobikmJih0aGlzLmVtaXRJbnB1dChuKSx0aGlzLnVzZXJJbnB1dD1udWxsKX19LGhhbmRsZUNsaWNrSWNvbjpmdW5jdGlvbihlKXt0aGlzLnJlYWRvbmx5fHx0aGlzLnBpY2tlckRpc2FibGVkfHwodGhpcy5zaG93Q2xvc2U/KHRoaXMudmFsdWVPbk9wZW49dGhpcy52YWx1ZSxlLnN0b3BQcm9wYWdhdGlvbigpLHRoaXMuZW1pdElucHV0KG51bGwpLHRoaXMuZW1pdENoYW5nZShudWxsKSx0aGlzLnNob3dDbG9zZT0hMSx0aGlzLnBpY2tlciYmImZ1bmN0aW9uIj09dHlwZW9mIHRoaXMucGlja2VyLmhhbmRsZUNsZWFyJiZ0aGlzLnBpY2tlci5oYW5kbGVDbGVhcigpKTp0aGlzLnBpY2tlclZpc2libGU9IXRoaXMucGlja2VyVmlzaWJsZSl9LGhhbmRsZUNsb3NlOmZ1bmN0aW9uKCl7aWYodGhpcy5waWNrZXJWaXNpYmxlJiYodGhpcy5waWNrZXJWaXNpYmxlPSExLCJkYXRlcyI9PT10aGlzLnR5cGUpKXt2YXIgZT1iKHRoaXMudmFsdWVPbk9wZW4sdGhpcy52YWx1ZUZvcm1hdCx0aGlzLnR5cGUsdGhpcy5yYW5nZVNlcGFyYXRvcil8fHRoaXMudmFsdWVPbk9wZW47dGhpcy5lbWl0SW5wdXQoZSl9fSxoYW5kbGVGaWVsZFJlc2V0OmZ1bmN0aW9uKGUpe3RoaXMudXNlcklucHV0PSIiPT09ZT9udWxsOmV9LGhhbmRsZUZvY3VzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy50eXBlOy0xPT09aC5pbmRleE9mKGUpfHx0aGlzLnBpY2tlclZpc2libGV8fCh0aGlzLnBpY2tlclZpc2libGU9ITApLHRoaXMuJGVtaXQoImZvY3VzIix0aGlzKX0saGFuZGxlS2V5ZG93bjpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49ZS5rZXlDb2RlO3JldHVybiAyNz09PW4/KHRoaXMucGlja2VyVmlzaWJsZT0hMSx2b2lkIGUuc3RvcFByb3BhZ2F0aW9uKCkpOjkhPT1uPzEzPT09bj8oKCIiPT09dGhpcy51c2VySW5wdXR8fHRoaXMuaXNWYWxpZFZhbHVlKHRoaXMucGFyc2VTdHJpbmcodGhpcy5kaXNwbGF5VmFsdWUpKSkmJih0aGlzLmhhbmRsZUNoYW5nZSgpLHRoaXMucGlja2VyVmlzaWJsZT10aGlzLnBpY2tlci52aXNpYmxlPSExLHRoaXMuYmx1cigpKSx2b2lkIGUuc3RvcFByb3BhZ2F0aW9uKCkpOnZvaWQodGhpcy51c2VySW5wdXQ/ZS5zdG9wUHJvcGFnYXRpb24oKTp0aGlzLnBpY2tlciYmdGhpcy5waWNrZXIuaGFuZGxlS2V5ZG93biYmdGhpcy5waWNrZXIuaGFuZGxlS2V5ZG93bihlKSk6dm9pZCh0aGlzLnJhbmdlZD9zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7LTE9PT10LnJlZklucHV0LmluZGV4T2YoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkmJih0LnBpY2tlclZpc2libGU9ITEsdC5ibHVyKCksZS5zdG9wUHJvcGFnYXRpb24oKSl9LDApOih0aGlzLmhhbmRsZUNoYW5nZSgpLHRoaXMucGlja2VyVmlzaWJsZT10aGlzLnBpY2tlci52aXNpYmxlPSExLHRoaXMuYmx1cigpLGUuc3RvcFByb3BhZ2F0aW9uKCkpKX0saGFuZGxlUmFuZ2VDbGljazpmdW5jdGlvbigpe3ZhciBlPXRoaXMudHlwZTstMT09PWguaW5kZXhPZihlKXx8dGhpcy5waWNrZXJWaXNpYmxlfHwodGhpcy5waWNrZXJWaXNpYmxlPSEwKSx0aGlzLiRlbWl0KCJmb2N1cyIsdGhpcyl9LGhpZGVQaWNrZXI6ZnVuY3Rpb24oKXt0aGlzLnBpY2tlciYmKHRoaXMucGlja2VyLnJlc2V0VmlldyYmdGhpcy5waWNrZXIucmVzZXRWaWV3KCksdGhpcy5waWNrZXJWaXNpYmxlPXRoaXMucGlja2VyLnZpc2libGU9ITEsdGhpcy5kZXN0cm95UG9wcGVyKCkpfSxzaG93UGlja2VyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiRpc1NlcnZlcnx8KHRoaXMucGlja2VyfHx0aGlzLm1vdW50UGlja2VyKCksdGhpcy5waWNrZXJWaXNpYmxlPXRoaXMucGlja2VyLnZpc2libGU9ITAsdGhpcy51cGRhdGVQb3BwZXIoKSx0aGlzLnBpY2tlci52YWx1ZT10aGlzLnBhcnNlZFZhbHVlLHRoaXMucGlja2VyLnJlc2V0VmlldyYmdGhpcy5waWNrZXIucmVzZXRWaWV3KCksdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXtlLnBpY2tlci5hZGp1c3RTcGlubmVycyYmZS5waWNrZXIuYWRqdXN0U3Bpbm5lcnMoKX0pKX0sbW91bnRQaWNrZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMucGlja2VyPW5ldyByLmRlZmF1bHQodGhpcy5wYW5lbCkuJG1vdW50KCksdGhpcy5waWNrZXIuZGVmYXVsdFZhbHVlPXRoaXMuZGVmYXVsdFZhbHVlLHRoaXMucGlja2VyLmRlZmF1bHRUaW1lPXRoaXMuZGVmYXVsdFRpbWUsdGhpcy5waWNrZXIucG9wcGVyQ2xhc3M9dGhpcy5wb3BwZXJDbGFzcyx0aGlzLnBvcHBlckVsbT10aGlzLnBpY2tlci4kZWwsdGhpcy5waWNrZXIud2lkdGg9dGhpcy5yZWZlcmVuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgsdGhpcy5waWNrZXIuc2hvd1RpbWU9ImRhdGV0aW1lIj09PXRoaXMudHlwZXx8ImRhdGV0aW1lcmFuZ2UiPT09dGhpcy50eXBlLHRoaXMucGlja2VyLnNlbGVjdGlvbk1vZGU9dGhpcy5zZWxlY3Rpb25Nb2RlLHRoaXMucGlja2VyLnVubGlua1BhbmVscz10aGlzLnVubGlua1BhbmVscyx0aGlzLnBpY2tlci5hcnJvd0NvbnRyb2w9dGhpcy5hcnJvd0NvbnRyb2x8fHRoaXMudGltZUFycm93Q29udHJvbHx8ITEsdGhpcy4kd2F0Y2goImZvcm1hdCIsZnVuY3Rpb24odCl7ZS5waWNrZXIuZm9ybWF0PXR9KTt2YXIgdD1mdW5jdGlvbigpe3ZhciB0LG4scixpPWUucGlja2VyT3B0aW9ucztmb3IodmFyIG8gaW4gaSYmaS5zZWxlY3RhYmxlUmFuZ2UmJih0PWkuc2VsZWN0YWJsZVJhbmdlLG49eS5kYXRldGltZXJhbmdlLnBhcnNlcixyPWYudGltZXJhbmdlLHQ9QXJyYXkuaXNBcnJheSh0KT90Olt0XSxlLnBpY2tlci5zZWxlY3RhYmxlUmFuZ2U9dC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIG4odCxyLGUucmFuZ2VTZXBhcmF0b3IpfSkpLGkpaS5oYXNPd25Qcm9wZXJ0eShvKSYmInNlbGVjdGFibGVSYW5nZSIhPT1vJiYoZS5waWNrZXJbb109aVtvXSk7ZS5mb3JtYXQmJihlLnBpY2tlci5mb3JtYXQ9ZS5mb3JtYXQpfTt0KCksdGhpcy51bndhdGNoUGlja2VyT3B0aW9ucz10aGlzLiR3YXRjaCgicGlja2VyT3B0aW9ucyIsZnVuY3Rpb24oKXtyZXR1cm4gdCgpfSx7ZGVlcDohMH0pLHRoaXMuJGVsLmFwcGVuZENoaWxkKHRoaXMucGlja2VyLiRlbCksdGhpcy5waWNrZXIucmVzZXRWaWV3JiZ0aGlzLnBpY2tlci5yZXNldFZpZXcoKSx0aGlzLnBpY2tlci4kb24oImRvZGVzdHJveSIsdGhpcy5kb0Rlc3Ryb3kpLHRoaXMucGlja2VyLiRvbigicGljayIsZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06IiIsbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdO2UudXNlcklucHV0PW51bGwsZS5waWNrZXJWaXNpYmxlPWUucGlja2VyLnZpc2libGU9bixlLmVtaXRJbnB1dCh0KSxlLnBpY2tlci5yZXNldFZpZXcmJmUucGlja2VyLnJlc2V0VmlldygpfSksdGhpcy5waWNrZXIuJG9uKCJzZWxlY3QtcmFuZ2UiLGZ1bmN0aW9uKHQsbixyKXswIT09ZS5yZWZJbnB1dC5sZW5ndGgmJihyJiYibWluIiE9PXI/Im1heCI9PT1yJiYoZS5yZWZJbnB1dFsxXS5zZXRTZWxlY3Rpb25SYW5nZSh0LG4pLGUucmVmSW5wdXRbMV0uZm9jdXMoKSk6KGUucmVmSW5wdXRbMF0uc2V0U2VsZWN0aW9uUmFuZ2UodCxuKSxlLnJlZklucHV0WzBdLmZvY3VzKCkpKX0pfSx1bm1vdW50UGlja2VyOmZ1bmN0aW9uKCl7dGhpcy5waWNrZXImJih0aGlzLnBpY2tlci4kZGVzdHJveSgpLHRoaXMucGlja2VyLiRvZmYoKSwiZnVuY3Rpb24iPT10eXBlb2YgdGhpcy51bndhdGNoUGlja2VyT3B0aW9ucyYmdGhpcy51bndhdGNoUGlja2VyT3B0aW9ucygpLHRoaXMucGlja2VyLiRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGlja2VyLiRlbCkpfSxlbWl0Q2hhbmdlOmZ1bmN0aW9uKGUpe0MoZSx0aGlzLnZhbHVlT25PcGVuKXx8KHRoaXMuJGVtaXQoImNoYW5nZSIsZSksdGhpcy5kaXNwYXRjaCgiRWxGb3JtSXRlbSIsImVsLmZvcm0uY2hhbmdlIixlKSx0aGlzLnZhbHVlT25PcGVuPWUpfSxlbWl0SW5wdXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5mb3JtYXRUb1ZhbHVlKGUpO0ModGhpcy52YWx1ZSx0KXx8dGhpcy4kZW1pdCgiaW5wdXQiLHQpfSxpc1ZhbGlkVmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucGlja2VyfHx0aGlzLm1vdW50UGlja2VyKCksIXRoaXMucGlja2VyLmlzVmFsaWRWYWx1ZXx8ZSYmdGhpcy5waWNrZXIuaXNWYWxpZFZhbHVlKGUpfX19fSwyOTpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJlTmZhIil9LDM6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiMmt2QSIpfSwzMDpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIGUucmFuZ2VkP24oImRpdiIse2RpcmVjdGl2ZXM6W3tuYW1lOiJjbGlja291dHNpZGUiLHJhd05hbWU6InYtY2xpY2tvdXRzaWRlIix2YWx1ZTplLmhhbmRsZUNsb3NlLGV4cHJlc3Npb246ImhhbmRsZUNsb3NlIn1dLHJlZjoicmVmZXJlbmNlIixzdGF0aWNDbGFzczoiZWwtZGF0ZS1lZGl0b3IgZWwtcmFuZ2UtZWRpdG9yIGVsLWlucHV0X19pbm5lciIsY2xhc3M6WyJlbC1kYXRlLWVkaXRvci0tIitlLnR5cGUsZS5waWNrZXJTaXplPyJlbC1yYW5nZS1lZGl0b3ItLSIrZS5waWNrZXJTaXplOiIiLGUucGlja2VyRGlzYWJsZWQ/ImlzLWRpc2FibGVkIjoiIixlLnBpY2tlclZpc2libGU/ImlzLWFjdGl2ZSI6IiJdLG9uOntjbGljazplLmhhbmRsZVJhbmdlQ2xpY2ssbW91c2VlbnRlcjplLmhhbmRsZU1vdXNlRW50ZXIsbW91c2VsZWF2ZTpmdW5jdGlvbih0KXtlLnNob3dDbG9zZT0hMX0sa2V5ZG93bjplLmhhbmRsZUtleWRvd259fSxbbigiaSIse2NsYXNzOlsiZWwtaW5wdXRfX2ljb24iLCJlbC1yYW5nZV9faWNvbiIsZS50cmlnZ2VyQ2xhc3NdfSksbigiaW5wdXQiLGUuX2Ioe3N0YXRpY0NsYXNzOiJlbC1yYW5nZS1pbnB1dCIsYXR0cnM6e2F1dG9jb21wbGV0ZToib2ZmIixwbGFjZWhvbGRlcjplLnN0YXJ0UGxhY2Vob2xkZXIsZGlzYWJsZWQ6ZS5waWNrZXJEaXNhYmxlZCxyZWFkb25seTohZS5lZGl0YWJsZXx8ZS5yZWFkb25seSxuYW1lOmUubmFtZSYmZS5uYW1lWzBdfSxkb21Qcm9wczp7dmFsdWU6ZS5kaXNwbGF5VmFsdWUmJmUuZGlzcGxheVZhbHVlWzBdfSxvbjp7aW5wdXQ6ZS5oYW5kbGVTdGFydElucHV0LGNoYW5nZTplLmhhbmRsZVN0YXJ0Q2hhbmdlLGZvY3VzOmUuaGFuZGxlRm9jdXN9fSwiaW5wdXQiLGUuZmlyc3RJbnB1dElkLCExKSksZS5fdCgicmFuZ2Utc2VwYXJhdG9yIixbbigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC1yYW5nZS1zZXBhcmF0b3IifSxbZS5fdihlLl9zKGUucmFuZ2VTZXBhcmF0b3IpKV0pXSksbigiaW5wdXQiLGUuX2Ioe3N0YXRpY0NsYXNzOiJlbC1yYW5nZS1pbnB1dCIsYXR0cnM6e2F1dG9jb21wbGV0ZToib2ZmIixwbGFjZWhvbGRlcjplLmVuZFBsYWNlaG9sZGVyLGRpc2FibGVkOmUucGlja2VyRGlzYWJsZWQscmVhZG9ubHk6IWUuZWRpdGFibGV8fGUucmVhZG9ubHksbmFtZTplLm5hbWUmJmUubmFtZVsxXX0sZG9tUHJvcHM6e3ZhbHVlOmUuZGlzcGxheVZhbHVlJiZlLmRpc3BsYXlWYWx1ZVsxXX0sb246e2lucHV0OmUuaGFuZGxlRW5kSW5wdXQsY2hhbmdlOmUuaGFuZGxlRW5kQ2hhbmdlLGZvY3VzOmUuaGFuZGxlRm9jdXN9fSwiaW5wdXQiLGUuc2Vjb25kSW5wdXRJZCwhMSkpLGUuaGF2ZVRyaWdnZXI/bigiaSIse3N0YXRpY0NsYXNzOiJlbC1pbnB1dF9faWNvbiBlbC1yYW5nZV9fY2xvc2UtaWNvbiIsY2xhc3M6W2Uuc2hvd0Nsb3NlPyIiK2UuY2xlYXJJY29uOiIiXSxvbjp7Y2xpY2s6ZS5oYW5kbGVDbGlja0ljb259fSk6ZS5fZSgpXSwyKTpuKCJlbC1pbnB1dCIsZS5fYih7ZGlyZWN0aXZlczpbe25hbWU6ImNsaWNrb3V0c2lkZSIscmF3TmFtZToidi1jbGlja291dHNpZGUiLHZhbHVlOmUuaGFuZGxlQ2xvc2UsZXhwcmVzc2lvbjoiaGFuZGxlQ2xvc2UifV0scmVmOiJyZWZlcmVuY2UiLHN0YXRpY0NsYXNzOiJlbC1kYXRlLWVkaXRvciIsY2xhc3M6ImVsLWRhdGUtZWRpdG9yLS0iK2UudHlwZSxhdHRyczp7cmVhZG9ubHk6IWUuZWRpdGFibGV8fGUucmVhZG9ubHl8fCJkYXRlcyI9PT1lLnR5cGUsZGlzYWJsZWQ6ZS5waWNrZXJEaXNhYmxlZCxzaXplOmUucGlja2VyU2l6ZSxuYW1lOmUubmFtZSxwbGFjZWhvbGRlcjplLnBsYWNlaG9sZGVyLHZhbHVlOmUuZGlzcGxheVZhbHVlLHZhbGlkYXRlRXZlbnQ6ITF9LG9uOntmb2N1czplLmhhbmRsZUZvY3VzLGlucHV0OmZ1bmN0aW9uKHQpe3JldHVybiBlLnVzZXJJbnB1dD10fSxjaGFuZ2U6ZS5oYW5kbGVDaGFuZ2V9LG5hdGl2ZU9uOntrZXlkb3duOmZ1bmN0aW9uKHQpe2UuaGFuZGxlS2V5ZG93bih0KX0sbW91c2VlbnRlcjpmdW5jdGlvbih0KXtlLmhhbmRsZU1vdXNlRW50ZXIodCl9LG1vdXNlbGVhdmU6ZnVuY3Rpb24odCl7ZS5zaG93Q2xvc2U9ITF9fX0sImVsLWlucHV0IixlLmZpcnN0SW5wdXRJZCwhMSksW24oImkiLHtzdGF0aWNDbGFzczoiZWwtaW5wdXRfX2ljb24iLGNsYXNzOmUudHJpZ2dlckNsYXNzLGF0dHJzOntzbG90OiJwcmVmaXgifSxvbjp7Y2xpY2s6ZS5oYW5kbGVGb2N1c30sc2xvdDoicHJlZml4In0pLGUuaGF2ZVRyaWdnZXI/bigiaSIse3N0YXRpY0NsYXNzOiJlbC1pbnB1dF9faWNvbiIsY2xhc3M6W2Uuc2hvd0Nsb3NlPyIiK2UuY2xlYXJJY29uOiIiXSxhdHRyczp7c2xvdDoic3VmZml4In0sb246e2NsaWNrOmUuaGFuZGxlQ2xpY2tJY29ufSxzbG90OiJzdWZmaXgifSk6ZS5fZSgpXSl9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9LDMxOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oNDEpLGk9bi5uKHIpLG89big0NCkscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDMyOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oNDIpLGk9bi5uKHIpLG89big0Mykscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDQ6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiNyt1VyIpfSw0MTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj1uKDExKSxpPXMobig1KSksbz1zKG4oMzIpKTtmdW5jdGlvbiBzKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX10LmRlZmF1bHQ9e21peGluczpbaS5kZWZhdWx0XSxjb21wb25lbnRzOntUaW1lU3Bpbm5lcjpvLmRlZmF1bHR9LHByb3BzOnt2aXNpYmxlOkJvb2xlYW4sdGltZUFycm93Q29udHJvbDpCb29sZWFufSx3YXRjaDp7dmlzaWJsZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2U/KHRoaXMub2xkVmFsdWU9dGhpcy52YWx1ZSx0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3JldHVybiB0LiRyZWZzLnNwaW5uZXIuZW1pdFNlbGVjdFJhbmdlKCJob3VycyIpfSkpOnRoaXMubmVlZEluaXRBZGp1c3Q9ITB9LHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj12b2lkIDA7ZSBpbnN0YW5jZW9mIERhdGU/bj0oMCxyLmxpbWl0VGltZVJhbmdlKShlLHRoaXMuc2VsZWN0YWJsZVJhbmdlLHRoaXMuZm9ybWF0KTplfHwobj10aGlzLmRlZmF1bHRWYWx1ZT9uZXcgRGF0ZSh0aGlzLmRlZmF1bHRWYWx1ZSk6bmV3IERhdGUpLHRoaXMuZGF0ZT1uLHRoaXMudmlzaWJsZSYmdGhpcy5uZWVkSW5pdEFkanVzdCYmKHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKGUpe3JldHVybiB0LmFkanVzdFNwaW5uZXJzKCl9KSx0aGlzLm5lZWRJbml0QWRqdXN0PSExKX0sc2VsZWN0YWJsZVJhbmdlOmZ1bmN0aW9uKGUpe3RoaXMuJHJlZnMuc3Bpbm5lci5zZWxlY3RhYmxlUmFuZ2U9ZX0sZGVmYXVsdFZhbHVlOmZ1bmN0aW9uKGUpeygwLHIuaXNEYXRlKSh0aGlzLnZhbHVlKXx8KHRoaXMuZGF0ZT1lP25ldyBEYXRlKGUpOm5ldyBEYXRlKX19LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57cG9wcGVyQ2xhc3M6IiIsZm9ybWF0OiJISDptbTpzcyIsdmFsdWU6IiIsZGVmYXVsdFZhbHVlOm51bGwsZGF0ZTpuZXcgRGF0ZSxvbGRWYWx1ZTpuZXcgRGF0ZSxzZWxlY3RhYmxlUmFuZ2U6W10sc2VsZWN0aW9uUmFuZ2U6WzAsMl0sZGlzYWJsZWQ6ITEsYXJyb3dDb250cm9sOiExLG5lZWRJbml0QWRqdXN0OiEwfX0sY29tcHV0ZWQ6e3Nob3dTZWNvbmRzOmZ1bmN0aW9uKCl7cmV0dXJuLTEhPT0odGhpcy5mb3JtYXR8fCIiKS5pbmRleE9mKCJzcyIpfSx1c2VBcnJvdzpmdW5jdGlvbigpe3JldHVybiB0aGlzLmFycm93Q29udHJvbHx8dGhpcy50aW1lQXJyb3dDb250cm9sfHwhMX0sYW1QbU1vZGU6ZnVuY3Rpb24oKXtyZXR1cm4tMSE9PSh0aGlzLmZvcm1hdHx8IiIpLmluZGV4T2YoIkEiKT8iQSI6LTEhPT0odGhpcy5mb3JtYXR8fCIiKS5pbmRleE9mKCJhIik/ImEiOiIifX0sbWV0aG9kczp7aGFuZGxlQ2FuY2VsOmZ1bmN0aW9uKCl7dGhpcy4kZW1pdCgicGljayIsdGhpcy5vbGRWYWx1ZSwhMSl9LGhhbmRsZUNoYW5nZTpmdW5jdGlvbihlKXt0aGlzLnZpc2libGUmJih0aGlzLmRhdGU9KDAsci5jbGVhck1pbGxpc2Vjb25kcykoZSksdGhpcy5pc1ZhbGlkVmFsdWUodGhpcy5kYXRlKSYmdGhpcy4kZW1pdCgicGljayIsdGhpcy5kYXRlLCEwKSl9LHNldFNlbGVjdGlvblJhbmdlOmZ1bmN0aW9uKGUsdCl7dGhpcy4kZW1pdCgic2VsZWN0LXJhbmdlIixlLHQpLHRoaXMuc2VsZWN0aW9uUmFuZ2U9W2UsdF19LGhhbmRsZUNvbmZpcm06ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSYmYXJndW1lbnRzWzBdLHQ9YXJndW1lbnRzWzFdO2lmKCF0KXt2YXIgbj0oMCxyLmNsZWFyTWlsbGlzZWNvbmRzKSgoMCxyLmxpbWl0VGltZVJhbmdlKSh0aGlzLmRhdGUsdGhpcy5zZWxlY3RhYmxlUmFuZ2UsdGhpcy5mb3JtYXQpKTt0aGlzLiRlbWl0KCJwaWNrIixuLGUsdCl9fSxoYW5kbGVLZXlkb3duOmZ1bmN0aW9uKGUpe3ZhciB0PWUua2V5Q29kZSxuPXszODotMSw0MDoxLDM3Oi0xLDM5OjF9O2lmKDM3PT09dHx8Mzk9PT10KXt2YXIgcj1uW3RdO3JldHVybiB0aGlzLmNoYW5nZVNlbGVjdGlvblJhbmdlKHIpLHZvaWQgZS5wcmV2ZW50RGVmYXVsdCgpfWlmKDM4PT09dHx8NDA9PT10KXt2YXIgaT1uW3RdO3JldHVybiB0aGlzLiRyZWZzLnNwaW5uZXIuc2Nyb2xsRG93bihpKSx2b2lkIGUucHJldmVudERlZmF1bHQoKX19LGlzVmFsaWRWYWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4oMCxyLnRpbWVXaXRoaW5SYW5nZSkoZSx0aGlzLnNlbGVjdGFibGVSYW5nZSx0aGlzLmZvcm1hdCl9LGFkanVzdFNwaW5uZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJHJlZnMuc3Bpbm5lci5hZGp1c3RTcGlubmVycygpfSxjaGFuZ2VTZWxlY3Rpb25SYW5nZTpmdW5jdGlvbihlKXt2YXIgdD1bMCwzXS5jb25jYXQodGhpcy5zaG93U2Vjb25kcz9bNl06W10pLG49WyJob3VycyIsIm1pbnV0ZXMiXS5jb25jYXQodGhpcy5zaG93U2Vjb25kcz9bInNlY29uZHMiXTpbXSkscj0odC5pbmRleE9mKHRoaXMuc2VsZWN0aW9uUmFuZ2VbMF0pK2UrdC5sZW5ndGgpJXQubGVuZ3RoO3RoaXMuJHJlZnMuc3Bpbm5lci5lbWl0U2VsZWN0UmFuZ2UobltyXSl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpe3JldHVybiBlLmhhbmRsZUNvbmZpcm0oITAsITApfSksdGhpcy4kZW1pdCgibW91bnRlZCIpfX19LDQyOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByPW4oMTEpLGk9cyhuKDE3KSksbz1zKG4oMjQpKTtmdW5jdGlvbiBzKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX10LmRlZmF1bHQ9e2NvbXBvbmVudHM6e0VsU2Nyb2xsYmFyOmkuZGVmYXVsdH0sZGlyZWN0aXZlczp7cmVwZWF0Q2xpY2s6by5kZWZhdWx0fSxwcm9wczp7ZGF0ZTp7fSxkZWZhdWx0VmFsdWU6e30sc2hvd1NlY29uZHM6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxhcnJvd0NvbnRyb2w6Qm9vbGVhbixhbVBtTW9kZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDoiIn19LGNvbXB1dGVkOntob3VyczpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGUuZ2V0SG91cnMoKX0sbWludXRlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGUuZ2V0TWludXRlcygpfSxzZWNvbmRzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGF0ZS5nZXRTZWNvbmRzKCl9LGhvdXJzTGlzdDpmdW5jdGlvbigpe3JldHVybigwLHIuZ2V0UmFuZ2VIb3VycykodGhpcy5zZWxlY3RhYmxlUmFuZ2UpfSxtaW51dGVzTGlzdDpmdW5jdGlvbigpe3JldHVybigwLHIuZ2V0UmFuZ2VNaW51dGVzKSh0aGlzLnNlbGVjdGFibGVSYW5nZSx0aGlzLmhvdXJzKX0sYXJyb3dIb3VyTGlzdDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuaG91cnM7cmV0dXJuW2U+MD9lLTE6dm9pZCAwLGUsZTwyMz9lKzE6dm9pZCAwXX0sYXJyb3dNaW51dGVMaXN0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5taW51dGVzO3JldHVybltlPjA/ZS0xOnZvaWQgMCxlLGU8NTk/ZSsxOnZvaWQgMF19LGFycm93U2Vjb25kTGlzdDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuc2Vjb25kcztyZXR1cm5bZT4wP2UtMTp2b2lkIDAsZSxlPDU5P2UrMTp2b2lkIDBdfX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntzZWxlY3RhYmxlUmFuZ2U6W10sY3VycmVudFNjcm9sbGJhcjpudWxsfX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXshZS5hcnJvd0NvbnRyb2wmJmUuYmluZFNjcm9sbEV2ZW50KCl9KX0sbWV0aG9kczp7aW5jcmVhc2U6ZnVuY3Rpb24oKXt0aGlzLnNjcm9sbERvd24oMSl9LGRlY3JlYXNlOmZ1bmN0aW9uKCl7dGhpcy5zY3JvbGxEb3duKC0xKX0sbW9kaWZ5RGF0ZUZpZWxkOmZ1bmN0aW9uKGUsdCl7c3dpdGNoKGUpe2Nhc2UiaG91cnMiOnRoaXMuJGVtaXQoImNoYW5nZSIsKDAsci5tb2RpZnlUaW1lKSh0aGlzLmRhdGUsdCx0aGlzLm1pbnV0ZXMsdGhpcy5zZWNvbmRzKSk7YnJlYWs7Y2FzZSJtaW51dGVzIjp0aGlzLiRlbWl0KCJjaGFuZ2UiLCgwLHIubW9kaWZ5VGltZSkodGhpcy5kYXRlLHRoaXMuaG91cnMsdCx0aGlzLnNlY29uZHMpKTticmVhaztjYXNlInNlY29uZHMiOnRoaXMuJGVtaXQoImNoYW5nZSIsKDAsci5tb2RpZnlUaW1lKSh0aGlzLmRhdGUsdGhpcy5ob3Vycyx0aGlzLm1pbnV0ZXMsdCkpfX0saGFuZGxlQ2xpY2s6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LnZhbHVlO3QuZGlzYWJsZWR8fCh0aGlzLm1vZGlmeURhdGVGaWVsZChlLG4pLHRoaXMuZW1pdFNlbGVjdFJhbmdlKGUpLHRoaXMuYWRqdXN0U3Bpbm5lcihlLG4pKX0sZW1pdFNlbGVjdFJhbmdlOmZ1bmN0aW9uKGUpeyJob3VycyI9PT1lP3RoaXMuJGVtaXQoInNlbGVjdC1yYW5nZSIsMCwyKToibWludXRlcyI9PT1lP3RoaXMuJGVtaXQoInNlbGVjdC1yYW5nZSIsMyw1KToic2Vjb25kcyI9PT1lJiZ0aGlzLiRlbWl0KCJzZWxlY3QtcmFuZ2UiLDYsOCksdGhpcy5jdXJyZW50U2Nyb2xsYmFyPWV9LGJpbmRTY3JvbGxFdmVudDpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1mdW5jdGlvbih0KXtlLiRyZWZzW3RdLndyYXAub25zY3JvbGw9ZnVuY3Rpb24obil7ZS5oYW5kbGVTY3JvbGwodCxuKX19O3QoImhvdXJzIiksdCgibWludXRlcyIpLHQoInNlY29uZHMiKX0saGFuZGxlU2Nyb2xsOmZ1bmN0aW9uKGUpe3ZhciB0PU1hdGgubWluKE1hdGguZmxvb3IoKHRoaXMuJHJlZnNbZV0ud3JhcC5zY3JvbGxUb3AtKC41KnRoaXMuc2Nyb2xsQmFySGVpZ2h0KGUpLTEwKS90aGlzLnR5cGVJdGVtSGVpZ2h0KGUpKzMpL3RoaXMudHlwZUl0ZW1IZWlnaHQoZSkpLCJob3VycyI9PT1lPzIzOjU5KTt0aGlzLm1vZGlmeURhdGVGaWVsZChlLHQpfSxhZGp1c3RTcGlubmVyczpmdW5jdGlvbigpe3RoaXMuYWRqdXN0U3Bpbm5lcigiaG91cnMiLHRoaXMuaG91cnMpLHRoaXMuYWRqdXN0U3Bpbm5lcigibWludXRlcyIsdGhpcy5taW51dGVzKSx0aGlzLmFkanVzdFNwaW5uZXIoInNlY29uZHMiLHRoaXMuc2Vjb25kcyl9LGFkanVzdEN1cnJlbnRTcGlubmVyOmZ1bmN0aW9uKGUpe3RoaXMuYWRqdXN0U3Bpbm5lcihlLHRoaXNbZV0pfSxhZGp1c3RTcGlubmVyOmZ1bmN0aW9uKGUsdCl7aWYoIXRoaXMuYXJyb3dDb250cm9sKXt2YXIgbj10aGlzLiRyZWZzW2VdLndyYXA7biYmKG4uc2Nyb2xsVG9wPU1hdGgubWF4KDAsdCp0aGlzLnR5cGVJdGVtSGVpZ2h0KGUpKSl9fSxzY3JvbGxEb3duOmZ1bmN0aW9uKGUpe3RoaXMuY3VycmVudFNjcm9sbGJhcnx8dGhpcy5lbWl0U2VsZWN0UmFuZ2UoImhvdXJzIik7dmFyIHQ9dGhpcy5jdXJyZW50U2Nyb2xsYmFyLG49dGhpcy5ob3Vyc0xpc3Qscj10aGlzW3RdO2lmKCJob3VycyI9PT10aGlzLmN1cnJlbnRTY3JvbGxiYXIpe3ZhciBpPU1hdGguYWJzKGUpO2U9ZT4wPzE6LTE7Zm9yKHZhciBvPW4ubGVuZ3RoO28tLSYmaTspbltyPShyK2Urbi5sZW5ndGgpJW4ubGVuZ3RoXXx8aS0tO2lmKG5bcl0pcmV0dXJufWVsc2Ugcj0ocitlKzYwKSU2MDt0aGlzLm1vZGlmeURhdGVGaWVsZCh0LHIpLHRoaXMuYWRqdXN0U3Bpbm5lcih0LHIpfSxhbVBtOmZ1bmN0aW9uKGUpe2lmKCEoImEiPT09dGhpcy5hbVBtTW9kZS50b0xvd2VyQ2FzZSgpKSlyZXR1cm4iIjt2YXIgdD0iQSI9PT10aGlzLmFtUG1Nb2RlLG49ZTwxMj8iIGFtIjoiIHBtIjtyZXR1cm4gdCYmKG49bi50b1VwcGVyQ2FzZSgpKSxufSx0eXBlSXRlbUhlaWdodDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy4kcmVmc1tlXS4kZWwucXVlcnlTZWxlY3RvcigibGkiKS5vZmZzZXRIZWlnaHR9LHNjcm9sbEJhckhlaWdodDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy4kcmVmc1tlXS4kZWwub2Zmc2V0SGVpZ2h0fX19fSw0MzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC10aW1lLXNwaW5uZXIiLGNsYXNzOnsiaGFzLXNlY29uZHMiOmUuc2hvd1NlY29uZHN9fSxbZS5hcnJvd0NvbnRyb2w/ZS5fZSgpOltuKCJlbC1zY3JvbGxiYXIiLHtyZWY6ImhvdXJzIixzdGF0aWNDbGFzczoiZWwtdGltZS1zcGlubmVyX193cmFwcGVyIixhdHRyczp7IndyYXAtc3R5bGUiOiJtYXgtaGVpZ2h0OiBpbmhlcml0OyIsInZpZXctY2xhc3MiOiJlbC10aW1lLXNwaW5uZXJfX2xpc3QiLG5vcmVzaXplOiIiLHRhZzoidWwifSxuYXRpdmVPbjp7bW91c2VlbnRlcjpmdW5jdGlvbih0KXtlLmVtaXRTZWxlY3RSYW5nZSgiaG91cnMiKX0sbW91c2Vtb3ZlOmZ1bmN0aW9uKHQpe2UuYWRqdXN0Q3VycmVudFNwaW5uZXIoImhvdXJzIil9fX0sZS5fbChlLmhvdXJzTGlzdCxmdW5jdGlvbih0LHIpe3JldHVybiBuKCJsaSIse3N0YXRpY0NsYXNzOiJlbC10aW1lLXNwaW5uZXJfX2l0ZW0iLGNsYXNzOnthY3RpdmU6cj09PWUuaG91cnMsZGlzYWJsZWQ6dH0sb246e2NsaWNrOmZ1bmN0aW9uKG4pe2UuaGFuZGxlQ2xpY2soImhvdXJzIix7dmFsdWU6cixkaXNhYmxlZDp0fSl9fX0sW2UuX3YoZS5fcygoIjAiKyhlLmFtUG1Nb2RlP3IlMTJ8fDEyOnIpKS5zbGljZSgtMikpK2UuX3MoZS5hbVBtKHIpKSldKX0pKSxuKCJlbC1zY3JvbGxiYXIiLHtyZWY6Im1pbnV0ZXMiLHN0YXRpY0NsYXNzOiJlbC10aW1lLXNwaW5uZXJfX3dyYXBwZXIiLGF0dHJzOnsid3JhcC1zdHlsZSI6Im1heC1oZWlnaHQ6IGluaGVyaXQ7Iiwidmlldy1jbGFzcyI6ImVsLXRpbWUtc3Bpbm5lcl9fbGlzdCIsbm9yZXNpemU6IiIsdGFnOiJ1bCJ9LG5hdGl2ZU9uOnttb3VzZWVudGVyOmZ1bmN0aW9uKHQpe2UuZW1pdFNlbGVjdFJhbmdlKCJtaW51dGVzIil9LG1vdXNlbW92ZTpmdW5jdGlvbih0KXtlLmFkanVzdEN1cnJlbnRTcGlubmVyKCJtaW51dGVzIil9fX0sZS5fbChlLm1pbnV0ZXNMaXN0LGZ1bmN0aW9uKHQscil7cmV0dXJuIG4oImxpIix7c3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9faXRlbSIsY2xhc3M6e2FjdGl2ZTpyPT09ZS5taW51dGVzLGRpc2FibGVkOiF0fSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVDbGljaygibWludXRlcyIse3ZhbHVlOnIsZGlzYWJsZWQ6ITF9KX19fSxbZS5fdihlLl9zKCgiMCIrcikuc2xpY2UoLTIpKSldKX0pKSxuKCJlbC1zY3JvbGxiYXIiLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTplLnNob3dTZWNvbmRzLGV4cHJlc3Npb246InNob3dTZWNvbmRzIn1dLHJlZjoic2Vjb25kcyIsc3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9fd3JhcHBlciIsYXR0cnM6eyJ3cmFwLXN0eWxlIjoibWF4LWhlaWdodDogaW5oZXJpdDsiLCJ2aWV3LWNsYXNzIjoiZWwtdGltZS1zcGlubmVyX19saXN0Iixub3Jlc2l6ZToiIix0YWc6InVsIn0sbmF0aXZlT246e21vdXNlZW50ZXI6ZnVuY3Rpb24odCl7ZS5lbWl0U2VsZWN0UmFuZ2UoInNlY29uZHMiKX0sbW91c2Vtb3ZlOmZ1bmN0aW9uKHQpe2UuYWRqdXN0Q3VycmVudFNwaW5uZXIoInNlY29uZHMiKX19fSxlLl9sKDYwLGZ1bmN0aW9uKHQscil7cmV0dXJuIG4oImxpIix7a2V5OnIsc3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9faXRlbSIsY2xhc3M6e2FjdGl2ZTpyPT09ZS5zZWNvbmRzfSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVDbGljaygic2Vjb25kcyIse3ZhbHVlOnIsZGlzYWJsZWQ6ITF9KX19fSxbZS5fdihlLl9zKCgiMCIrcikuc2xpY2UoLTIpKSldKX0pKV0sZS5hcnJvd0NvbnRyb2w/W24oImRpdiIse3N0YXRpY0NsYXNzOiJlbC10aW1lLXNwaW5uZXJfX3dyYXBwZXIgaXMtYXJyb3ciLG9uOnttb3VzZWVudGVyOmZ1bmN0aW9uKHQpe2UuZW1pdFNlbGVjdFJhbmdlKCJob3VycyIpfX19LFtuKCJpIix7ZGlyZWN0aXZlczpbe25hbWU6InJlcGVhdC1jbGljayIscmF3TmFtZToidi1yZXBlYXQtY2xpY2siLHZhbHVlOmUuZGVjcmVhc2UsZXhwcmVzc2lvbjoiZGVjcmVhc2UifV0sc3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9fYXJyb3cgZWwtaWNvbi1hcnJvdy11cCJ9KSxuKCJpIix7ZGlyZWN0aXZlczpbe25hbWU6InJlcGVhdC1jbGljayIscmF3TmFtZToidi1yZXBlYXQtY2xpY2siLHZhbHVlOmUuaW5jcmVhc2UsZXhwcmVzc2lvbjoiaW5jcmVhc2UifV0sc3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9fYXJyb3cgZWwtaWNvbi1hcnJvdy1kb3duIn0pLG4oInVsIix7cmVmOiJob3VycyIsc3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9fbGlzdCJ9LGUuX2woZS5hcnJvd0hvdXJMaXN0LGZ1bmN0aW9uKHQscil7cmV0dXJuIG4oImxpIix7a2V5OnIsc3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9faXRlbSIsY2xhc3M6e2FjdGl2ZTp0PT09ZS5ob3VycyxkaXNhYmxlZDplLmhvdXJzTGlzdFt0XX19LFtlLl92KGUuX3Modm9pZCAwPT09dD8iIjooIjAiKyhlLmFtUG1Nb2RlP3QlMTJ8fDEyOnQpKS5zbGljZSgtMikrZS5hbVBtKHQpKSldKX0pKV0pLG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC10aW1lLXNwaW5uZXJfX3dyYXBwZXIgaXMtYXJyb3ciLG9uOnttb3VzZWVudGVyOmZ1bmN0aW9uKHQpe2UuZW1pdFNlbGVjdFJhbmdlKCJtaW51dGVzIil9fX0sW24oImkiLHtkaXJlY3RpdmVzOlt7bmFtZToicmVwZWF0LWNsaWNrIixyYXdOYW1lOiJ2LXJlcGVhdC1jbGljayIsdmFsdWU6ZS5kZWNyZWFzZSxleHByZXNzaW9uOiJkZWNyZWFzZSJ9XSxzdGF0aWNDbGFzczoiZWwtdGltZS1zcGlubmVyX19hcnJvdyBlbC1pY29uLWFycm93LXVwIn0pLG4oImkiLHtkaXJlY3RpdmVzOlt7bmFtZToicmVwZWF0LWNsaWNrIixyYXdOYW1lOiJ2LXJlcGVhdC1jbGljayIsdmFsdWU6ZS5pbmNyZWFzZSxleHByZXNzaW9uOiJpbmNyZWFzZSJ9XSxzdGF0aWNDbGFzczoiZWwtdGltZS1zcGlubmVyX19hcnJvdyBlbC1pY29uLWFycm93LWRvd24ifSksbigidWwiLHtyZWY6Im1pbnV0ZXMiLHN0YXRpY0NsYXNzOiJlbC10aW1lLXNwaW5uZXJfX2xpc3QifSxlLl9sKGUuYXJyb3dNaW51dGVMaXN0LGZ1bmN0aW9uKHQscil7cmV0dXJuIG4oImxpIix7a2V5OnIsc3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9faXRlbSIsY2xhc3M6e2FjdGl2ZTp0PT09ZS5taW51dGVzfX0sW2UuX3YoIlxuICAgICAgICAgICIrZS5fcyh2b2lkIDA9PT10PyIiOigiMCIrdCkuc2xpY2UoLTIpKSsiXG4gICAgICAgICIpXSl9KSldKSxlLnNob3dTZWNvbmRzP24oImRpdiIse3N0YXRpY0NsYXNzOiJlbC10aW1lLXNwaW5uZXJfX3dyYXBwZXIgaXMtYXJyb3ciLG9uOnttb3VzZWVudGVyOmZ1bmN0aW9uKHQpe2UuZW1pdFNlbGVjdFJhbmdlKCJzZWNvbmRzIil9fX0sW24oImkiLHtkaXJlY3RpdmVzOlt7bmFtZToicmVwZWF0LWNsaWNrIixyYXdOYW1lOiJ2LXJlcGVhdC1jbGljayIsdmFsdWU6ZS5kZWNyZWFzZSxleHByZXNzaW9uOiJkZWNyZWFzZSJ9XSxzdGF0aWNDbGFzczoiZWwtdGltZS1zcGlubmVyX19hcnJvdyBlbC1pY29uLWFycm93LXVwIn0pLG4oImkiLHtkaXJlY3RpdmVzOlt7bmFtZToicmVwZWF0LWNsaWNrIixyYXdOYW1lOiJ2LXJlcGVhdC1jbGljayIsdmFsdWU6ZS5pbmNyZWFzZSxleHByZXNzaW9uOiJpbmNyZWFzZSJ9XSxzdGF0aWNDbGFzczoiZWwtdGltZS1zcGlubmVyX19hcnJvdyBlbC1pY29uLWFycm93LWRvd24ifSksbigidWwiLHtyZWY6InNlY29uZHMiLHN0YXRpY0NsYXNzOiJlbC10aW1lLXNwaW5uZXJfX2xpc3QifSxlLl9sKGUuYXJyb3dTZWNvbmRMaXN0LGZ1bmN0aW9uKHQscil7cmV0dXJuIG4oImxpIix7a2V5OnIsc3RhdGljQ2xhc3M6ImVsLXRpbWUtc3Bpbm5lcl9faXRlbSIsY2xhc3M6e2FjdGl2ZTp0PT09ZS5zZWNvbmRzfX0sW2UuX3YoIlxuICAgICAgICAgICIrZS5fcyh2b2lkIDA9PT10PyIiOigiMCIrdCkuc2xpY2UoLTIpKSsiXG4gICAgICAgICIpXSl9KSldKTplLl9lKCldOmUuX2UoKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9LDQ0OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbigidHJhbnNpdGlvbiIse2F0dHJzOntuYW1lOiJlbC16b29tLWluLXRvcCJ9LG9uOnsiYWZ0ZXItbGVhdmUiOmZ1bmN0aW9uKHQpe2UuJGVtaXQoImRvZGVzdHJveSIpfX19LFtuKCJkaXYiLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTplLnZpc2libGUsZXhwcmVzc2lvbjoidmlzaWJsZSJ9XSxzdGF0aWNDbGFzczoiZWwtdGltZS1wYW5lbCBlbC1wb3BwZXIiLGNsYXNzOmUucG9wcGVyQ2xhc3N9LFtuKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtdGltZS1wYW5lbF9fY29udGVudCIsY2xhc3M6eyJoYXMtc2Vjb25kcyI6ZS5zaG93U2Vjb25kc319LFtuKCJ0aW1lLXNwaW5uZXIiLHtyZWY6InNwaW5uZXIiLGF0dHJzOnsiYXJyb3ctY29udHJvbCI6ZS51c2VBcnJvdywic2hvdy1zZWNvbmRzIjplLnNob3dTZWNvbmRzLCJhbS1wbS1tb2RlIjplLmFtUG1Nb2RlLGRhdGU6ZS5kYXRlfSxvbjp7Y2hhbmdlOmUuaGFuZGxlQ2hhbmdlLCJzZWxlY3QtcmFuZ2UiOmUuc2V0U2VsZWN0aW9uUmFuZ2V9fSldLDEpLG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC10aW1lLXBhbmVsX19mb290ZXIifSxbbigiYnV0dG9uIix7c3RhdGljQ2xhc3M6ImVsLXRpbWUtcGFuZWxfX2J0biBjYW5jZWwiLGF0dHJzOnt0eXBlOiJidXR0b24ifSxvbjp7Y2xpY2s6ZS5oYW5kbGVDYW5jZWx9fSxbZS5fdihlLl9zKGUudCgiZWwuZGF0ZXBpY2tlci5jYW5jZWwiKSkpXSksbigiYnV0dG9uIix7c3RhdGljQ2xhc3M6ImVsLXRpbWUtcGFuZWxfX2J0biIsY2xhc3M6e2NvbmZpcm06IWUuZGlzYWJsZWR9LGF0dHJzOnt0eXBlOiJidXR0b24ifSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVDb25maXJtKCl9fX0sW2UuX3YoZS5fcyhlLnQoImVsLmRhdGVwaWNrZXIuY29uZmlybSIpKSldKV0pXSldKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn0sNDk6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigxODYpLGk9bi5uKHIpLG89bigxODcpLHM9bigwKShpLmEsby5hLCExLG51bGwsbnVsbCxudWxsKTt0LmRlZmF1bHQ9cy5leHBvcnRzfSw1OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oInkrN3giKX0sNjpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCJISk14Iil9LDc6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiZkt4MyIpfSw5OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImptYUMiKX19KX0sdFRWazpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1bXSxyPXt9LGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG89dFtpXSxzPW9bMF0sYT17aWQ6ZSsiOiIraSxjc3M6b1sxXSxtZWRpYTpvWzJdLHNvdXJjZU1hcDpvWzNdfTtyW3NdP3Jbc10ucGFydHMucHVzaChhKTpuLnB1c2gocltzXT17aWQ6cyxwYXJ0czpbYV19KX1yZXR1cm4gbn19LHRoSnU6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj0iQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0iO2Z1bmN0aW9uIGkoKXt0aGlzLm1lc3NhZ2U9IlN0cmluZyBjb250YWlucyBhbiBpbnZhbGlkIGNoYXJhY3RlciJ9aS5wcm90b3R5cGU9bmV3IEVycm9yLGkucHJvdG90eXBlLmNvZGU9NSxpLnByb3RvdHlwZS5uYW1lPSJJbnZhbGlkQ2hhcmFjdGVyRXJyb3IiLGUuZXhwb3J0cz1mdW5jdGlvbihlKXtmb3IodmFyIHQsbixvPVN0cmluZyhlKSxzPSIiLGE9MCxsPXI7by5jaGFyQXQoMHxhKXx8KGw9Ij0iLGElMSk7cys9bC5jaGFyQXQoNjMmdD4+OC1hJTEqOCkpe2lmKChuPW8uY2hhckNvZGVBdChhKz0uNzUpKT4yNTUpdGhyb3cgbmV3IGk7dD10PDw4fG59cmV0dXJuIHN9fSx1WTFhOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG89MDtyZXR1cm4iYm9vbGVhbiIhPXR5cGVvZiB0JiYocj1uLG49dCx0PXZvaWQgMCksZnVuY3Rpb24oKXt2YXIgcz10aGlzLGE9TnVtYmVyKG5ldyBEYXRlKS1vLGw9YXJndW1lbnRzO2Z1bmN0aW9uIHUoKXtvPU51bWJlcihuZXcgRGF0ZSksbi5hcHBseShzLGwpfXImJiFpJiZ1KCksaSYmY2xlYXJUaW1lb3V0KGkpLHZvaWQgMD09PXImJmE+ZT91KCk6ITAhPT10JiYoaT1zZXRUaW1lb3V0KHI/ZnVuY3Rpb24oKXtpPXZvaWQgMH06dSx2b2lkIDA9PT1yP2UtYTplKSl9fX0sdXFVbzpmdW5jdGlvbihlLHQsbil7dmFyIHI9bigia00yRSIpLGk9bigiRmVCbCIpLG89bigiUzgybCIpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciBuPShpLk9iamVjdHx8e30pW2VdfHxPYmplY3RbZV0scz17fTtzW2VdPXQobikscihyLlMrci5GKm8oZnVuY3Rpb24oKXtuKDEpfSksIk9iamVjdCIscyl9fSx1clc4OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwLHQuaTE4bj10LnVzZT10LnQ9dm9pZCAwO3ZhciByPXMobigiVmkzVCIpKSxpPXMobigiNyt1VyIpKSxvPXMobigiaTNyWCIpKTtmdW5jdGlvbiBzKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgYT0oMCxzKG4oIlN2bkYiKSkuZGVmYXVsdCkoaS5kZWZhdWx0KSxsPXIuZGVmYXVsdCx1PSExLGM9ZnVuY3Rpb24oKXt2YXIgZT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpc3x8aS5kZWZhdWx0KS4kdDtpZigiZnVuY3Rpb24iPT10eXBlb2YgZSYmaS5kZWZhdWx0LmxvY2FsZSlyZXR1cm4gdXx8KHU9ITAsaS5kZWZhdWx0LmxvY2FsZShpLmRlZmF1bHQuY29uZmlnLmxhbmcsKDAsby5kZWZhdWx0KShsLGkuZGVmYXVsdC5sb2NhbGUoaS5kZWZhdWx0LmNvbmZpZy5sYW5nKXx8e30se2Nsb25lOiEwfSkpKSxlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZD10LnQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj1jLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihudWxsIT09biYmdm9pZCAwIT09bilyZXR1cm4gbjtmb3IodmFyIHI9ZS5zcGxpdCgiLiIpLGk9bCxvPTAscz1yLmxlbmd0aDtvPHM7bysrKXtpZihuPWlbcltvXV0sbz09PXMtMSlyZXR1cm4gYShuLHQpO2lmKCFuKXJldHVybiIiO2k9bn1yZXR1cm4iIn0sZj10LnVzZT1mdW5jdGlvbihlKXtsPWV8fGx9LGg9dC5pMThuPWZ1bmN0aW9uKGUpe2M9ZXx8Y307dC5kZWZhdWx0PXt1c2U6Zix0OmQsaTE4bjpofX0sInZGYy8iOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCJUY1E3IiksaT1uKCJRUkc0Iiksbz1uKCJma0IyIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LG4scyl7dmFyIGEsbD1yKHQpLHU9aShsLmxlbmd0aCksYz1vKHMsdSk7aWYoZSYmbiE9bil7Zm9yKDt1PmM7KWlmKChhPWxbYysrXSkhPWEpcmV0dXJuITB9ZWxzZSBmb3IoO3U+YztjKyspaWYoKGV8fGMgaW4gbCkmJmxbY109PT1uKXJldHVybiBlfHxjfHwwO3JldHVybiFlJiYtMX19fSwidklCLyI6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCJPNGc4IiksaT1uKCJrTTJFIiksbz1uKCI4ODAvIikscz1uKCJoSng4IiksYT1uKCIvYlFwIiksbD1uKCI5NFZRIiksdT1uKCJlNm4wIiksYz1uKCJQenhLIiksZD1uKCJkU3pkIikoIml0ZXJhdG9yIiksZj0hKFtdLmtleXMmJiJuZXh0ImluW10ua2V5cygpKSxoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbixwLG0sdixnKXtsKG4sdCxwKTt2YXIgeSxfLGIseD1mdW5jdGlvbihlKXtpZighZiYmZSBpbiBTKXJldHVybiBTW2VdO3N3aXRjaChlKXtjYXNlImtleXMiOmNhc2UidmFsdWVzIjpyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG4odGhpcyxlKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBuKHRoaXMsZSl9fSxDPXQrIiBJdGVyYXRvciIsdz0idmFsdWVzIj09bSxrPSExLFM9ZS5wcm90b3R5cGUsQT1TW2RdfHxTWyJAQGl0ZXJhdG9yIl18fG0mJlNbbV0sRT1BfHx4KG0pLE09bT93P3goImVudHJpZXMiKTpFOnZvaWQgMCxPPSJBcnJheSI9PXQmJlMuZW50cmllc3x8QTtpZihPJiYoYj1jKE8uY2FsbChuZXcgZSkpKSE9PU9iamVjdC5wcm90b3R5cGUmJmIubmV4dCYmKHUoYixDLCEwKSxyfHwiZnVuY3Rpb24iPT10eXBlb2YgYltkXXx8cyhiLGQsaCkpLHcmJkEmJiJ2YWx1ZXMiIT09QS5uYW1lJiYoaz0hMCxFPWZ1bmN0aW9uKCl7cmV0dXJuIEEuY2FsbCh0aGlzKX0pLHImJiFnfHwhZiYmIWsmJlNbZF18fHMoUyxkLEUpLGFbdF09RSxhW0NdPWgsbSlpZih5PXt2YWx1ZXM6dz9FOngoInZhbHVlcyIpLGtleXM6dj9FOngoImtleXMiKSxlbnRyaWVzOk19LGcpZm9yKF8gaW4geSlfIGluIFN8fG8oUyxfLHlbX10pO2Vsc2UgaShpLlAraS5GKihmfHxrKSx0LHkpO3JldHVybiB5fX0sdnF3bDpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBpPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLG4pLGkubD0hMCxpLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsImEiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPSIvZGlzdC8iLG4obi5zPTIyMyl9KHswOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt2YXIgcyxhPWU9ZXx8e30sbD10eXBlb2YgZS5kZWZhdWx0OyJvYmplY3QiIT09bCYmImZ1bmN0aW9uIiE9PWx8fChzPWUsYT1lLmRlZmF1bHQpO3ZhciB1LGM9ImZ1bmN0aW9uIj09dHlwZW9mIGE/YS5vcHRpb25zOmE7aWYodCYmKGMucmVuZGVyPXQucmVuZGVyLGMuc3RhdGljUmVuZGVyRm5zPXQuc3RhdGljUmVuZGVyRm5zLGMuX2NvbXBpbGVkPSEwKSxuJiYoYy5mdW5jdGlvbmFsPSEwKSxpJiYoYy5fc2NvcGVJZD1pKSxvPyh1PWZ1bmN0aW9uKGUpeyhlPWV8fHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fHx0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCl8fCJ1bmRlZmluZWQiPT10eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfX3x8KGU9X19WVUVfU1NSX0NPTlRFWFRfXyksciYmci5jYWxsKHRoaXMsZSksZSYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChvKX0sYy5fc3NyUmVnaXN0ZXI9dSk6ciYmKHU9ciksdSl7dmFyIGQ9Yy5mdW5jdGlvbmFsLGY9ZD9jLnJlbmRlcjpjLmJlZm9yZUNyZWF0ZTtkPyhjLl9pbmplY3RTdHlsZXM9dSxjLnJlbmRlcj1mdW5jdGlvbihlLHQpe3JldHVybiB1LmNhbGwodCksZihlLHQpfSk6Yy5iZWZvcmVDcmVhdGU9Zj9bXS5jb25jYXQoZix1KTpbdV19cmV0dXJue2VzTW9kdWxlOnMsZXhwb3J0czphLG9wdGlvbnM6Y319fSwyMjM6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHIsaT1uKDIyNCksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07by5kZWZhdWx0Lmluc3RhbGw9ZnVuY3Rpb24oZSl7ZS5jb21wb25lbnQoby5kZWZhdWx0Lm5hbWUsby5kZWZhdWx0KX0sdC5kZWZhdWx0PW8uZGVmYXVsdH0sMjI0OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oMjI1KSxpPW4ubihyKSxvPW4oMjI2KSxzPW4oMCkoaS5hLG8uYSwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PXMuZXhwb3J0c30sMjI1OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9big5KSxvPShyPWkpJiZyLl9fZXNNb2R1bGU/cjp7ZGVmYXVsdDpyfTt0LmRlZmF1bHQ9e25hbWU6IkVsRm9ybSIsY29tcG9uZW50TmFtZToiRWxGb3JtIixwcm92aWRlOmZ1bmN0aW9uKCl7cmV0dXJue2VsRm9ybTp0aGlzfX0scHJvcHM6e21vZGVsOk9iamVjdCxydWxlczpPYmplY3QsbGFiZWxQb3NpdGlvbjpTdHJpbmcsbGFiZWxXaWR0aDpTdHJpbmcsbGFiZWxTdWZmaXg6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6IiJ9LGlubGluZTpCb29sZWFuLGlubGluZU1lc3NhZ2U6Qm9vbGVhbixzdGF0dXNJY29uOkJvb2xlYW4sc2hvd01lc3NhZ2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxzaXplOlN0cmluZyxkaXNhYmxlZDpCb29sZWFuLHZhbGlkYXRlT25SdWxlQ2hhbmdlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0saGlkZVJlcXVpcmVkQXN0ZXJpc2s6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sd2F0Y2g6e3J1bGVzOmZ1bmN0aW9uKCl7dGhpcy52YWxpZGF0ZU9uUnVsZUNoYW5nZSYmdGhpcy52YWxpZGF0ZShmdW5jdGlvbigpe30pfX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntmaWVsZHM6W119fSxjcmVhdGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiRvbigiZWwuZm9ybS5hZGRGaWVsZCIsZnVuY3Rpb24odCl7dCYmZS5maWVsZHMucHVzaCh0KX0pLHRoaXMuJG9uKCJlbC5mb3JtLnJlbW92ZUZpZWxkIixmdW5jdGlvbih0KXt0LnByb3AmJmUuZmllbGRzLnNwbGljZShlLmZpZWxkcy5pbmRleE9mKHQpLDEpfSl9LG1ldGhvZHM6e3Jlc2V0RmllbGRzOmZ1bmN0aW9uKCl7dGhpcy5tb2RlbD90aGlzLmZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UucmVzZXRGaWVsZCgpfSk6Y29uc29sZS53YXJuKCJbRWxlbWVudCBXYXJuXVtGb3JtXW1vZGVsIGlzIHJlcXVpcmVkIGZvciByZXNldEZpZWxkcyB0byB3b3JrLiIpfSxjbGVhclZhbGlkYXRlOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOltdOyhlLmxlbmd0aD8ic3RyaW5nIj09dHlwZW9mIGU/dGhpcy5maWVsZHMuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiBlPT09dC5wcm9wfSk6dGhpcy5maWVsZHMuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiBlLmluZGV4T2YodC5wcm9wKT4tMX0pOnRoaXMuZmllbGRzKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UuY2xlYXJWYWxpZGF0ZSgpfSl9LHZhbGlkYXRlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aWYodGhpcy5tb2RlbCl7dmFyIG49dm9pZCAwOyJmdW5jdGlvbiIhPXR5cGVvZiBlJiZ3aW5kb3cuUHJvbWlzZSYmKG49bmV3IHdpbmRvdy5Qcm9taXNlKGZ1bmN0aW9uKHQsbil7ZT1mdW5jdGlvbihlKXtlP3QoZSk6bihlKX19KSk7dmFyIHI9ITAsaT0wOzA9PT10aGlzLmZpZWxkcy5sZW5ndGgmJmUmJmUoITApO3ZhciBzPXt9O3JldHVybiB0aGlzLmZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKG4pe24udmFsaWRhdGUoIiIsZnVuY3Rpb24obixhKXtuJiYocj0hMSkscz0oMCxvLmRlZmF1bHQpKHt9LHMsYSksImZ1bmN0aW9uIj09dHlwZW9mIGUmJisraT09PXQuZmllbGRzLmxlbmd0aCYmZShyLHMpfSl9KSxufHx2b2lkIDB9Y29uc29sZS53YXJuKCJbRWxlbWVudCBXYXJuXVtGb3JtXW1vZGVsIGlzIHJlcXVpcmVkIGZvciB2YWxpZGF0ZSB0byB3b3JrISIpfSx2YWxpZGF0ZUZpZWxkOmZ1bmN0aW9uKGUsdCl7ZT1bXS5jb25jYXQoZSk7dmFyIG49dGhpcy5maWVsZHMuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybi0xIT09ZS5pbmRleE9mKHQucHJvcCl9KTtuLmxlbmd0aD9uLmZvckVhY2goZnVuY3Rpb24oZSl7ZS52YWxpZGF0ZSgiIix0KX0pOmNvbmZpcm0ud2FybigiW0VsZW1lbnQgV2Fybl1wbGVhc2UgcGFzcyBjb3JyZWN0IHByb3BzISIpfX19fSwyMjY6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kY3JlYXRlRWxlbWVudDtyZXR1cm4odGhpcy5fc2VsZi5fY3x8ZSkoImZvcm0iLHtzdGF0aWNDbGFzczoiZWwtZm9ybSIsY2xhc3M6W3RoaXMubGFiZWxQb3NpdGlvbj8iZWwtZm9ybS0tbGFiZWwtIit0aGlzLmxhYmVsUG9zaXRpb246IiIseyJlbC1mb3JtLS1pbmxpbmUiOnRoaXMuaW5saW5lfV19LFt0aGlzLl90KCJkZWZhdWx0IildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119O3QuYT1yfSw5OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImptYUMiKX19KX0sd09oeDpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBpPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLG4pLGkubD0hMCxpLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsImEiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPSIvZGlzdC8iLG4obi5zPTI4Nil9KHswOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt2YXIgcyxhPWU9ZXx8e30sbD10eXBlb2YgZS5kZWZhdWx0OyJvYmplY3QiIT09bCYmImZ1bmN0aW9uIiE9PWx8fChzPWUsYT1lLmRlZmF1bHQpO3ZhciB1LGM9ImZ1bmN0aW9uIj09dHlwZW9mIGE/YS5vcHRpb25zOmE7aWYodCYmKGMucmVuZGVyPXQucmVuZGVyLGMuc3RhdGljUmVuZGVyRm5zPXQuc3RhdGljUmVuZGVyRm5zLGMuX2NvbXBpbGVkPSEwKSxuJiYoYy5mdW5jdGlvbmFsPSEwKSxpJiYoYy5fc2NvcGVJZD1pKSxvPyh1PWZ1bmN0aW9uKGUpeyhlPWV8fHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fHx0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCl8fCJ1bmRlZmluZWQiPT10eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfX3x8KGU9X19WVUVfU1NSX0NPTlRFWFRfXyksciYmci5jYWxsKHRoaXMsZSksZSYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChvKX0sYy5fc3NyUmVnaXN0ZXI9dSk6ciYmKHU9ciksdSl7dmFyIGQ9Yy5mdW5jdGlvbmFsLGY9ZD9jLnJlbmRlcjpjLmJlZm9yZUNyZWF0ZTtkPyhjLl9pbmplY3RTdHlsZXM9dSxjLnJlbmRlcj1mdW5jdGlvbihlLHQpe3JldHVybiB1LmNhbGwodCksZihlLHQpfSk6Yy5iZWZvcmVDcmVhdGU9Zj9bXS5jb25jYXQoZix1KTpbdV19cmV0dXJue2VzTW9kdWxlOnMsZXhwb3J0czphLG9wdGlvbnM6Y319fSwyODY6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHIsaT1uKDI4Nyksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07by5kZWZhdWx0Lmluc3RhbGw9ZnVuY3Rpb24oZSl7ZS5jb21wb25lbnQoby5kZWZhdWx0Lm5hbWUsby5kZWZhdWx0KX0sdC5kZWZhdWx0PW8uZGVmYXVsdH0sMjg3OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oMjg4KSxpPW4ubihyKSxvPW4oMCkoaS5hLG51bGwsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1vLmV4cG9ydHN9LDI4ODpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj1hKG4oMjg5KSksaT1hKG4oMjkyKSksbz1hKG4oNTIpKSxzPWEobig4KSk7ZnVuY3Rpb24gYShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gbCgpe310LmRlZmF1bHQ9e25hbWU6IkVsVXBsb2FkIixtaXhpbnM6W3MuZGVmYXVsdF0sY29tcG9uZW50czp7RWxQcm9ncmVzczpvLmRlZmF1bHQsVXBsb2FkTGlzdDpyLmRlZmF1bHQsVXBsb2FkOmkuZGVmYXVsdH0scHJvdmlkZTpmdW5jdGlvbigpe3JldHVybnt1cGxvYWRlcjp0aGlzfX0saW5qZWN0OntlbEZvcm06e2RlZmF1bHQ6IiJ9fSxwcm9wczp7YWN0aW9uOnt0eXBlOlN0cmluZyxyZXF1aXJlZDohMH0saGVhZGVyczp7dHlwZTpPYmplY3QsZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybnt9fX0sZGF0YTpPYmplY3QsbXVsdGlwbGU6Qm9vbGVhbixuYW1lOnt0eXBlOlN0cmluZyxkZWZhdWx0OiJmaWxlIn0sZHJhZzpCb29sZWFuLGRyYWdnZXI6Qm9vbGVhbix3aXRoQ3JlZGVudGlhbHM6Qm9vbGVhbixzaG93RmlsZUxpc3Q6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxhY2NlcHQ6U3RyaW5nLHR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6InNlbGVjdCJ9LGJlZm9yZVVwbG9hZDpGdW5jdGlvbixiZWZvcmVSZW1vdmU6RnVuY3Rpb24sb25SZW1vdmU6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpsfSxvbkNoYW5nZTp7dHlwZTpGdW5jdGlvbixkZWZhdWx0Omx9LG9uUHJldmlldzp7dHlwZTpGdW5jdGlvbn0sb25TdWNjZXNzOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6bH0sb25Qcm9ncmVzczp7dHlwZTpGdW5jdGlvbixkZWZhdWx0Omx9LG9uRXJyb3I6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpsfSxmaWxlTGlzdDp7dHlwZTpBcnJheSxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuW119fSxhdXRvVXBsb2FkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sbGlzdFR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6InRleHQifSxodHRwUmVxdWVzdDpGdW5jdGlvbixkaXNhYmxlZDpCb29sZWFuLGxpbWl0Ok51bWJlcixvbkV4Y2VlZDp7dHlwZTpGdW5jdGlvbixkZWZhdWx0Omx9fSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3VwbG9hZEZpbGVzOltdLGRyYWdPdmVyOiExLGRyYWdpbmc6ITEsdGVtcEluZGV4OjF9fSxjb21wdXRlZDp7dXBsb2FkRGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kaXNhYmxlZHx8KHRoaXMuZWxGb3JtfHx7fSkuZGlzYWJsZWR9fSx3YXRjaDp7ZmlsZUxpc3Q6e2ltbWVkaWF0ZTohMCxoYW5kbGVyOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy51cGxvYWRGaWxlcz1lLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS51aWQ9ZS51aWR8fERhdGUubm93KCkrdC50ZW1wSW5kZXgrKyxlLnN0YXR1cz1lLnN0YXR1c3x8InN1Y2Nlc3MiLGV9KX19fSxtZXRob2RzOntoYW5kbGVTdGFydDpmdW5jdGlvbihlKXtlLnVpZD1EYXRlLm5vdygpK3RoaXMudGVtcEluZGV4Kys7dmFyIHQ9e3N0YXR1czoicmVhZHkiLG5hbWU6ZS5uYW1lLHNpemU6ZS5zaXplLHBlcmNlbnRhZ2U6MCx1aWQ6ZS51aWQscmF3OmV9O2lmKCJwaWN0dXJlLWNhcmQiPT09dGhpcy5saXN0VHlwZXx8InBpY3R1cmUiPT09dGhpcy5saXN0VHlwZSl0cnl7dC51cmw9VVJMLmNyZWF0ZU9iamVjdFVSTChlKX1jYXRjaChlKXtyZXR1cm4gdm9pZCBjb25zb2xlLmVycm9yKCJbRWxlbWVudCBFcnJvcl1bVXBsb2FkXSIsZSl9dGhpcy51cGxvYWRGaWxlcy5wdXNoKHQpLHRoaXMub25DaGFuZ2UodCx0aGlzLnVwbG9hZEZpbGVzKX0saGFuZGxlUHJvZ3Jlc3M6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLmdldEZpbGUodCk7dGhpcy5vblByb2dyZXNzKGUsbix0aGlzLnVwbG9hZEZpbGVzKSxuLnN0YXR1cz0idXBsb2FkaW5nIixuLnBlcmNlbnRhZ2U9ZS5wZXJjZW50fHwwfSxoYW5kbGVTdWNjZXNzOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5nZXRGaWxlKHQpO24mJihuLnN0YXR1cz0ic3VjY2VzcyIsbi5yZXNwb25zZT1lLHRoaXMub25TdWNjZXNzKGUsbix0aGlzLnVwbG9hZEZpbGVzKSx0aGlzLm9uQ2hhbmdlKG4sdGhpcy51cGxvYWRGaWxlcykpfSxoYW5kbGVFcnJvcjpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuZ2V0RmlsZSh0KSxyPXRoaXMudXBsb2FkRmlsZXM7bi5zdGF0dXM9ImZhaWwiLHIuc3BsaWNlKHIuaW5kZXhPZihuKSwxKSx0aGlzLm9uRXJyb3IoZSxuLHRoaXMudXBsb2FkRmlsZXMpLHRoaXMub25DaGFuZ2Uobix0aGlzLnVwbG9hZEZpbGVzKX0saGFuZGxlUmVtb3ZlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpczt0JiYoZT10aGlzLmdldEZpbGUodCkpO3ZhciByPWZ1bmN0aW9uKCl7bi5hYm9ydChlKTt2YXIgdD1uLnVwbG9hZEZpbGVzO3Quc3BsaWNlKHQuaW5kZXhPZihlKSwxKSxuLm9uUmVtb3ZlKGUsdCl9O2lmKHRoaXMuYmVmb3JlUmVtb3ZlKXtpZigiZnVuY3Rpb24iPT10eXBlb2YgdGhpcy5iZWZvcmVSZW1vdmUpe3ZhciBpPXRoaXMuYmVmb3JlUmVtb3ZlKGUsdGhpcy51cGxvYWRGaWxlcyk7aSYmaS50aGVuP2kudGhlbihmdW5jdGlvbigpe3IoKX0sbCk6ITEhPT1pJiZyKCl9fWVsc2UgcigpfSxnZXRGaWxlOmZ1bmN0aW9uKGUpe3ZhciB0PXZvaWQgMDtyZXR1cm4gdGhpcy51cGxvYWRGaWxlcy5ldmVyeShmdW5jdGlvbihuKXtyZXR1cm4hKHQ9ZS51aWQ9PT1uLnVpZD9uOm51bGwpfSksdH0sYWJvcnQ6ZnVuY3Rpb24oZSl7dGhpcy4kcmVmc1sidXBsb2FkLWlubmVyIl0uYWJvcnQoZSl9LGNsZWFyRmlsZXM6ZnVuY3Rpb24oKXt0aGlzLnVwbG9hZEZpbGVzPVtdfSxzdWJtaXQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMudXBsb2FkRmlsZXMuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiJyZWFkeSI9PT1lLnN0YXR1c30pLmZvckVhY2goZnVuY3Rpb24odCl7ZS4kcmVmc1sidXBsb2FkLWlubmVyIl0udXBsb2FkKHQucmF3KX0pfSxnZXRNaWdyYXRpbmdDb25maWc6ZnVuY3Rpb24oKXtyZXR1cm57cHJvcHM6eyJkZWZhdWx0LWZpbGUtbGlzdCI6ImRlZmF1bHQtZmlsZS1saXN0IGlzIHJlbmFtZWQgdG8gZmlsZS1saXN0LiIsInNob3ctdXBsb2FkLWxpc3QiOiJzaG93LXVwbG9hZC1saXN0IGlzIHJlbmFtZWQgdG8gc2hvdy1maWxlLWxpc3QuIiwidGh1bWJuYWlsLW1vZGUiOiJ0aHVtYm5haWwtbW9kZSBoYXMgYmVlbiBkZXByZWNhdGVkLCB5b3UgY2FuIGltcGxlbWVudCB0aGUgc2FtZSBlZmZlY3QgYWNjb3JkaW5nIHRvIHRoaXMgY2FzZTogaHR0cDovL2VsZW1lbnQuZWxlbWUuaW8vIy96aC1DTi9jb21wb25lbnQvdXBsb2FkI3lvbmctaHUtdG91LXhpYW5nLXNoYW5nLWNodWFuIn19fX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMudXBsb2FkRmlsZXMuZm9yRWFjaChmdW5jdGlvbihlKXtlLnVybCYmMD09PWUudXJsLmluZGV4T2YoImJsb2I6IikmJlVSTC5yZXZva2VPYmplY3RVUkwoZS51cmwpfSl9LHJlbmRlcjpmdW5jdGlvbihlKXt2YXIgdD12b2lkIDA7dGhpcy5zaG93RmlsZUxpc3QmJih0PWUoci5kZWZhdWx0LHthdHRyczp7ZGlzYWJsZWQ6dGhpcy51cGxvYWREaXNhYmxlZCxsaXN0VHlwZTp0aGlzLmxpc3RUeXBlLGZpbGVzOnRoaXMudXBsb2FkRmlsZXMsaGFuZGxlUHJldmlldzp0aGlzLm9uUHJldmlld30sb246e3JlbW92ZTp0aGlzLmhhbmRsZVJlbW92ZX19LFtdKSk7dmFyIG49ZSgidXBsb2FkIix7cHJvcHM6e3R5cGU6dGhpcy50eXBlLGRyYWc6dGhpcy5kcmFnLGFjdGlvbjp0aGlzLmFjdGlvbixtdWx0aXBsZTp0aGlzLm11bHRpcGxlLCJiZWZvcmUtdXBsb2FkIjp0aGlzLmJlZm9yZVVwbG9hZCwid2l0aC1jcmVkZW50aWFscyI6dGhpcy53aXRoQ3JlZGVudGlhbHMsaGVhZGVyczp0aGlzLmhlYWRlcnMsbmFtZTp0aGlzLm5hbWUsZGF0YTp0aGlzLmRhdGEsYWNjZXB0OnRoaXMuYWNjZXB0LGZpbGVMaXN0OnRoaXMudXBsb2FkRmlsZXMsYXV0b1VwbG9hZDp0aGlzLmF1dG9VcGxvYWQsbGlzdFR5cGU6dGhpcy5saXN0VHlwZSxkaXNhYmxlZDp0aGlzLnVwbG9hZERpc2FibGVkLGxpbWl0OnRoaXMubGltaXQsIm9uLWV4Y2VlZCI6dGhpcy5vbkV4Y2VlZCwib24tc3RhcnQiOnRoaXMuaGFuZGxlU3RhcnQsIm9uLXByb2dyZXNzIjp0aGlzLmhhbmRsZVByb2dyZXNzLCJvbi1zdWNjZXNzIjp0aGlzLmhhbmRsZVN1Y2Nlc3MsIm9uLWVycm9yIjp0aGlzLmhhbmRsZUVycm9yLCJvbi1wcmV2aWV3Ijp0aGlzLm9uUHJldmlldywib24tcmVtb3ZlIjp0aGlzLmhhbmRsZVJlbW92ZSwiaHR0cC1yZXF1ZXN0Ijp0aGlzLmh0dHBSZXF1ZXN0fSxyZWY6InVwbG9hZC1pbm5lciJ9LFt0aGlzLiRzbG90cy50cmlnZ2VyfHx0aGlzLiRzbG90cy5kZWZhdWx0XSk7cmV0dXJuIGUoImRpdiIsbnVsbCxbInBpY3R1cmUtY2FyZCI9PT10aGlzLmxpc3RUeXBlP3Q6IiIsdGhpcy4kc2xvdHMudHJpZ2dlcj9bbix0aGlzLiRzbG90cy5kZWZhdWx0XTpuLHRoaXMuJHNsb3RzLnRpcCwicGljdHVyZS1jYXJkIiE9PXRoaXMubGlzdFR5cGU/dDoiIl0pfX19LDI4OTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1uKDI5MCksaT1uLm4ociksbz1uKDI5MSkscz1uKDApKGkuYSxvLmEsITEsbnVsbCxudWxsLG51bGwpO3QuZGVmYXVsdD1zLmV4cG9ydHN9LDI5MDpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj1vKG4oNSkpLGk9byhuKDUyKSk7ZnVuY3Rpb24gbyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dC5kZWZhdWx0PXtuYW1lOiJFbFVwbG9hZExpc3QiLG1peGluczpbci5kZWZhdWx0XSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2ZvY3VzaW5nOiExfX0sY29tcG9uZW50czp7RWxQcm9ncmVzczppLmRlZmF1bHR9LHByb3BzOntmaWxlczp7dHlwZTpBcnJheSxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuW119fSxkaXNhYmxlZDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGhhbmRsZVByZXZpZXc6RnVuY3Rpb24sbGlzdFR5cGU6U3RyaW5nfSxtZXRob2RzOntwYXJzZVBlcmNlbnRhZ2U6ZnVuY3Rpb24oZSl7cmV0dXJuIHBhcnNlSW50KGUsMTApfSxoYW5kbGVDbGljazpmdW5jdGlvbihlKXt0aGlzLmhhbmRsZVByZXZpZXcmJnRoaXMuaGFuZGxlUHJldmlldyhlKX19fX0sMjkxOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG49ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbigidHJhbnNpdGlvbi1ncm91cCIse2NsYXNzOlsiZWwtdXBsb2FkLWxpc3QiLCJlbC11cGxvYWQtbGlzdC0tIitlLmxpc3RUeXBlLHsiaXMtZGlzYWJsZWQiOmUuZGlzYWJsZWR9XSxhdHRyczp7dGFnOiJ1bCIsbmFtZToiZWwtbGlzdCJ9fSxlLl9sKGUuZmlsZXMsZnVuY3Rpb24odCl7cmV0dXJuIG4oImxpIix7a2V5OnQudWlkLGNsYXNzOlsiZWwtdXBsb2FkLWxpc3RfX2l0ZW0iLCJpcy0iK3Quc3RhdHVzLGUuZm9jdXNpbmc/ImZvY3VzaW5nIjoiIl0sYXR0cnM6e3RhYmluZGV4OiIwIn0sb246e2tleWRvd246ZnVuY3Rpb24obil7aWYoISgiYnV0dG9uImluIG4pJiZlLl9rKG4ua2V5Q29kZSwiZGVsZXRlIixbOCw0Nl0sbi5rZXkpKXJldHVybiBudWxsOyFlLmRpc2FibGVkJiZlLiRlbWl0KCJyZW1vdmUiLHQpfSxmb2N1czpmdW5jdGlvbih0KXtlLmZvY3VzaW5nPSEwfSxibHVyOmZ1bmN0aW9uKHQpe2UuZm9jdXNpbmc9ITF9LGNsaWNrOmZ1bmN0aW9uKHQpe2UuZm9jdXNpbmc9ITF9fX0sWyJ1cGxvYWRpbmciIT09dC5zdGF0dXMmJlsicGljdHVyZS1jYXJkIiwicGljdHVyZSJdLmluZGV4T2YoZS5saXN0VHlwZSk+LTE/bigiaW1nIix7c3RhdGljQ2xhc3M6ImVsLXVwbG9hZC1saXN0X19pdGVtLXRodW1ibmFpbCIsYXR0cnM6e3NyYzp0LnVybCxhbHQ6IiJ9fSk6ZS5fZSgpLG4oImEiLHtzdGF0aWNDbGFzczoiZWwtdXBsb2FkLWxpc3RfX2l0ZW0tbmFtZSIsb246e2NsaWNrOmZ1bmN0aW9uKG4pe2UuaGFuZGxlQ2xpY2sodCl9fX0sW24oImkiLHtzdGF0aWNDbGFzczoiZWwtaWNvbi1kb2N1bWVudCJ9KSxlLl92KGUuX3ModC5uYW1lKSsiXG4gICAgIildKSxuKCJsYWJlbCIse3N0YXRpY0NsYXNzOiJlbC11cGxvYWQtbGlzdF9faXRlbS1zdGF0dXMtbGFiZWwifSxbbigiaSIse2NsYXNzOnsiZWwtaWNvbi11cGxvYWQtc3VjY2VzcyI6ITAsImVsLWljb24tY2lyY2xlLWNoZWNrIjoidGV4dCI9PT1lLmxpc3RUeXBlLCJlbC1pY29uLWNoZWNrIjpbInBpY3R1cmUtY2FyZCIsInBpY3R1cmUiXS5pbmRleE9mKGUubGlzdFR5cGUpPi0xfX0pXSksZS5kaXNhYmxlZD9lLl9lKCk6bigiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLWNsb3NlIixvbjp7Y2xpY2s6ZnVuY3Rpb24obil7ZS4kZW1pdCgicmVtb3ZlIix0KX19fSksZS5kaXNhYmxlZD9lLl9lKCk6bigiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLWNsb3NlLXRpcCJ9LFtlLl92KGUuX3MoZS50KCJlbC51cGxvYWQuZGVsZXRlVGlwIikpKV0pLCJ1cGxvYWRpbmciPT09dC5zdGF0dXM/bigiZWwtcHJvZ3Jlc3MiLHthdHRyczp7dHlwZToicGljdHVyZS1jYXJkIj09PWUubGlzdFR5cGU/ImNpcmNsZSI6ImxpbmUiLCJzdHJva2Utd2lkdGgiOiJwaWN0dXJlLWNhcmQiPT09ZS5saXN0VHlwZT82OjIscGVyY2VudGFnZTplLnBhcnNlUGVyY2VudGFnZSh0LnBlcmNlbnRhZ2UpfX0pOmUuX2UoKSwicGljdHVyZS1jYXJkIj09PWUubGlzdFR5cGU/bigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC11cGxvYWQtbGlzdF9faXRlbS1hY3Rpb25zIn0sW2UuaGFuZGxlUHJldmlldyYmInBpY3R1cmUtY2FyZCI9PT1lLmxpc3RUeXBlP24oInNwYW4iLHtzdGF0aWNDbGFzczoiZWwtdXBsb2FkLWxpc3RfX2l0ZW0tcHJldmlldyIsb246e2NsaWNrOmZ1bmN0aW9uKG4pe2UuaGFuZGxlUHJldmlldyh0KX19fSxbbigiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXpvb20taW4ifSldKTplLl9lKCksZS5kaXNhYmxlZD9lLl9lKCk6bigic3BhbiIse3N0YXRpY0NsYXNzOiJlbC11cGxvYWQtbGlzdF9faXRlbS1kZWxldGUiLG9uOntjbGljazpmdW5jdGlvbihuKXtlLiRlbWl0KCJyZW1vdmUiLHQpfX19LFtuKCJpIix7c3RhdGljQ2xhc3M6ImVsLWljb24tZGVsZXRlIn0pXSldKTplLl9lKCldLDEpfSkpfSxzdGF0aWNSZW5kZXJGbnM6W119O3QuYT1yfSwyOTI6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigyOTMpLGk9bi5uKHIpLG89bigwKShpLmEsbnVsbCwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PW8uZXhwb3J0c30sMjkzOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByPXMobig0NSkpLGk9cyhuKDI5NCkpLG89cyhuKDI5NSkpO2Z1bmN0aW9uIHMoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXQuZGVmYXVsdD17aW5qZWN0OlsidXBsb2FkZXIiXSxjb21wb25lbnRzOntVcGxvYWREcmFnZ2VyOm8uZGVmYXVsdH0scHJvcHM6e3R5cGU6U3RyaW5nLGFjdGlvbjp7dHlwZTpTdHJpbmcscmVxdWlyZWQ6ITB9LG5hbWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6ImZpbGUifSxkYXRhOk9iamVjdCxoZWFkZXJzOk9iamVjdCx3aXRoQ3JlZGVudGlhbHM6Qm9vbGVhbixtdWx0aXBsZTpCb29sZWFuLGFjY2VwdDpTdHJpbmcsb25TdGFydDpGdW5jdGlvbixvblByb2dyZXNzOkZ1bmN0aW9uLG9uU3VjY2VzczpGdW5jdGlvbixvbkVycm9yOkZ1bmN0aW9uLGJlZm9yZVVwbG9hZDpGdW5jdGlvbixkcmFnOkJvb2xlYW4sb25QcmV2aWV3Ont0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6ZnVuY3Rpb24oKXt9fSxvblJlbW92ZTp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OmZ1bmN0aW9uKCl7fX0sZmlsZUxpc3Q6QXJyYXksYXV0b1VwbG9hZDpCb29sZWFuLGxpc3RUeXBlOlN0cmluZyxodHRwUmVxdWVzdDp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OmkuZGVmYXVsdH0sZGlzYWJsZWQ6Qm9vbGVhbixsaW1pdDpOdW1iZXIsb25FeGNlZWQ6RnVuY3Rpb259LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57bW91c2VvdmVyOiExLHJlcXM6e319fSxtZXRob2RzOntpc0ltYWdlOmZ1bmN0aW9uKGUpe3JldHVybi0xIT09ZS5pbmRleE9mKCJpbWFnZSIpfSxoYW5kbGVDaGFuZ2U6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQuZmlsZXM7dCYmdGhpcy51cGxvYWRGaWxlcyh0KX0sdXBsb2FkRmlsZXM6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZih0aGlzLmxpbWl0JiZ0aGlzLmZpbGVMaXN0Lmxlbmd0aCtlLmxlbmd0aD50aGlzLmxpbWl0KXRoaXMub25FeGNlZWQmJnRoaXMub25FeGNlZWQoZSx0aGlzLmZpbGVMaXN0KTtlbHNle3ZhciBuPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpO3RoaXMubXVsdGlwbGV8fChuPW4uc2xpY2UoMCwxKSksMCE9PW4ubGVuZ3RoJiZuLmZvckVhY2goZnVuY3Rpb24oZSl7dC5vblN0YXJ0KGUpLHQuYXV0b1VwbG9hZCYmdC51cGxvYWQoZSl9KX19LHVwbG9hZDpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKHRoaXMuJHJlZnMuaW5wdXQudmFsdWU9bnVsbCwhdGhpcy5iZWZvcmVVcGxvYWQpcmV0dXJuIHRoaXMucG9zdChlKTt2YXIgbj10aGlzLmJlZm9yZVVwbG9hZChlKTtuJiZuLnRoZW4/bi50aGVuKGZ1bmN0aW9uKG4pe3ZhciByPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuKTtpZigiW29iamVjdCBGaWxlXSI9PT1yfHwiW29iamVjdCBCbG9iXSI9PT1yKXtmb3IodmFyIGkgaW4iW29iamVjdCBCbG9iXSI9PT1yJiYobj1uZXcgRmlsZShbbl0sZS5uYW1lLHt0eXBlOmUudHlwZX0pKSxlKWUuaGFzT3duUHJvcGVydHkoaSkmJihuW2ldPWVbaV0pO3QucG9zdChuKX1lbHNlIHQucG9zdChlKX0sZnVuY3Rpb24oKXt0Lm9uUmVtb3ZlKG51bGwsZSl9KTohMSE9PW4/dGhpcy5wb3N0KGUpOnRoaXMub25SZW1vdmUobnVsbCxlKX0sYWJvcnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5yZXFzO2lmKGUpe3ZhciBuPWU7ZS51aWQmJihuPWUudWlkKSx0W25dJiZ0W25dLmFib3J0KCl9ZWxzZSBPYmplY3Qua2V5cyh0KS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3RbZV0mJnRbZV0uYWJvcnQoKSxkZWxldGUgdFtlXX0pfSxwb3N0OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1lLnVpZCxyPXtoZWFkZXJzOnRoaXMuaGVhZGVycyx3aXRoQ3JlZGVudGlhbHM6dGhpcy53aXRoQ3JlZGVudGlhbHMsZmlsZTplLGRhdGE6dGhpcy5kYXRhLGZpbGVuYW1lOnRoaXMubmFtZSxhY3Rpb246dGhpcy5hY3Rpb24sb25Qcm9ncmVzczpmdW5jdGlvbihuKXt0Lm9uUHJvZ3Jlc3MobixlKX0sb25TdWNjZXNzOmZ1bmN0aW9uKHIpe3Qub25TdWNjZXNzKHIsZSksZGVsZXRlIHQucmVxc1tuXX0sb25FcnJvcjpmdW5jdGlvbihyKXt0Lm9uRXJyb3IocixlKSxkZWxldGUgdC5yZXFzW25dfX0saT10aGlzLmh0dHBSZXF1ZXN0KHIpO3RoaXMucmVxc1tuXT1pLGkmJmkudGhlbiYmaS50aGVuKHIub25TdWNjZXNzLHIub25FcnJvcil9LGhhbmRsZUNsaWNrOmZ1bmN0aW9uKCl7dGhpcy5kaXNhYmxlZHx8KHRoaXMuJHJlZnMuaW5wdXQudmFsdWU9bnVsbCx0aGlzLiRyZWZzLmlucHV0LmNsaWNrKCkpfSxoYW5kbGVLZXlkb3duOmZ1bmN0aW9uKGUpe2UudGFyZ2V0PT09ZS5jdXJyZW50VGFyZ2V0JiYoMTMhPT1lLmtleUNvZGUmJjMyIT09ZS5rZXlDb2RlfHx0aGlzLmhhbmRsZUNsaWNrKCkpfX0scmVuZGVyOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuaGFuZGxlQ2xpY2ssbj10aGlzLmRyYWcsaT10aGlzLm5hbWUsbz10aGlzLmhhbmRsZUNoYW5nZSxzPXRoaXMubXVsdGlwbGUsYT10aGlzLmFjY2VwdCxsPXRoaXMubGlzdFR5cGUsdT10aGlzLnVwbG9hZEZpbGVzLGM9dGhpcy5kaXNhYmxlZCxkPXtjbGFzczp7ImVsLXVwbG9hZCI6ITB9LG9uOntjbGljazp0LGtleWRvd246dGhpcy5oYW5kbGVLZXlkb3dufX07cmV0dXJuIGQuY2xhc3NbImVsLXVwbG9hZC0tIitsXT0hMCxlKCJkaXYiLCgwLHIuZGVmYXVsdCkoW2Qse2F0dHJzOnt0YWJpbmRleDoiMCJ9fV0pLFtuP2UoInVwbG9hZC1kcmFnZ2VyIix7YXR0cnM6e2Rpc2FibGVkOmN9LG9uOntmaWxlOnV9fSxbdGhpcy4kc2xvdHMuZGVmYXVsdF0pOnRoaXMuJHNsb3RzLmRlZmF1bHQsZSgiaW5wdXQiLHtjbGFzczoiZWwtdXBsb2FkX19pbnB1dCIsYXR0cnM6e3R5cGU6ImZpbGUiLG5hbWU6aSxtdWx0aXBsZTpzLGFjY2VwdDphfSxyZWY6ImlucHV0Iixvbjp7Y2hhbmdlOm99fSxbXSldKX19fSwyOTQ6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITAsdC5kZWZhdWx0PWZ1bmN0aW9uKGUpe2lmKCJ1bmRlZmluZWQiPT10eXBlb2YgWE1MSHR0cFJlcXVlc3QpcmV0dXJuO3ZhciB0PW5ldyBYTUxIdHRwUmVxdWVzdCxuPWUuYWN0aW9uO3QudXBsb2FkJiYodC51cGxvYWQub25wcm9ncmVzcz1mdW5jdGlvbih0KXt0LnRvdGFsPjAmJih0LnBlcmNlbnQ9dC5sb2FkZWQvdC50b3RhbCoxMDApLGUub25Qcm9ncmVzcyh0KX0pO3ZhciByPW5ldyBGb3JtRGF0YTtlLmRhdGEmJk9iamVjdC5rZXlzKGUuZGF0YSkuZm9yRWFjaChmdW5jdGlvbih0KXtyLmFwcGVuZCh0LGUuZGF0YVt0XSl9KTtyLmFwcGVuZChlLmZpbGVuYW1lLGUuZmlsZSxlLmZpbGUubmFtZSksdC5vbmVycm9yPWZ1bmN0aW9uKHQpe2Uub25FcnJvcih0KX0sdC5vbmxvYWQ9ZnVuY3Rpb24oKXtpZih0LnN0YXR1czwyMDB8fHQuc3RhdHVzPj0zMDApcmV0dXJuIGUub25FcnJvcihmdW5jdGlvbihlLHQsbil7dmFyIHI9dm9pZCAwO3I9bi5yZXNwb25zZT8iIisobi5yZXNwb25zZS5lcnJvcnx8bi5yZXNwb25zZSk6bi5yZXNwb25zZVRleHQ/IiIrbi5yZXNwb25zZVRleHQ6ImZhaWwgdG8gcG9zdCAiK2UrIiAiK24uc3RhdHVzO3ZhciBpPW5ldyBFcnJvcihyKTtyZXR1cm4gaS5zdGF0dXM9bi5zdGF0dXMsaS5tZXRob2Q9InBvc3QiLGkudXJsPWUsaX0obiwwLHQpKTtlLm9uU3VjY2VzcyhmdW5jdGlvbihlKXt2YXIgdD1lLnJlc3BvbnNlVGV4dHx8ZS5yZXNwb25zZTtpZighdClyZXR1cm4gdDt0cnl7cmV0dXJuIEpTT04ucGFyc2UodCl9Y2F0Y2goZSl7cmV0dXJuIHR9fSh0KSl9LHQub3BlbigicG9zdCIsbiwhMCksZS53aXRoQ3JlZGVudGlhbHMmJiJ3aXRoQ3JlZGVudGlhbHMiaW4gdCYmKHQud2l0aENyZWRlbnRpYWxzPSEwKTt2YXIgaT1lLmhlYWRlcnN8fHt9O2Zvcih2YXIgbyBpbiBpKWkuaGFzT3duUHJvcGVydHkobykmJm51bGwhPT1pW29dJiZ0LnNldFJlcXVlc3RIZWFkZXIobyxpW29dKTtyZXR1cm4gdC5zZW5kKHIpLHR9fSwyOTU6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigyOTYpLGk9bi5uKHIpLG89bigyOTcpLHM9bigwKShpLmEsby5hLCExLG51bGwsbnVsbCxudWxsKTt0LmRlZmF1bHQ9cy5leHBvcnRzfSwyOTY6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITAsdC5kZWZhdWx0PXtuYW1lOiJFbFVwbG9hZERyYWciLHByb3BzOntkaXNhYmxlZDpCb29sZWFufSxpbmplY3Q6e3VwbG9hZGVyOntkZWZhdWx0OiIifX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntkcmFnb3ZlcjohMX19LG1ldGhvZHM6e29uRHJhZ292ZXI6ZnVuY3Rpb24oKXt0aGlzLmRpc2FibGVkfHwodGhpcy5kcmFnb3Zlcj0hMCl9LG9uRHJvcDpmdW5jdGlvbihlKXtpZighdGhpcy5kaXNhYmxlZCYmdGhpcy51cGxvYWRlcil7dmFyIHQ9dGhpcy51cGxvYWRlci5hY2NlcHQ7dGhpcy5kcmFnb3Zlcj0hMSx0P3RoaXMuJGVtaXQoImZpbGUiLFtdLnNsaWNlLmNhbGwoZS5kYXRhVHJhbnNmZXIuZmlsZXMpLmZpbHRlcihmdW5jdGlvbihlKXt2YXIgbj1lLnR5cGUscj1lLm5hbWUsaT1yLmluZGV4T2YoIi4iKT4tMT8iLiIrci5zcGxpdCgiLiIpLnBvcCgpOiIiLG89bi5yZXBsYWNlKC9cLy4qJC8sIiIpO3JldHVybiB0LnNwbGl0KCIsIikubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLnRyaW0oKX0pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZX0pLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuL1wuLiskLy50ZXN0KGUpP2k9PT1lOi9cL1wqJC8udGVzdChlKT9vPT09ZS5yZXBsYWNlKC9cL1wqJC8sIiIpOiEhL15bXlwvXStcL1teXC9dKyQvLnRlc3QoZSkmJm49PT1lfSl9KSk6dGhpcy4kZW1pdCgiZmlsZSIsZS5kYXRhVHJhbnNmZXIuZmlsZXMpfX19fX0sMjk3OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50O3JldHVybihlLl9zZWxmLl9jfHx0KSgiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLXVwbG9hZC1kcmFnZ2VyIixjbGFzczp7ImlzLWRyYWdvdmVyIjplLmRyYWdvdmVyfSxvbjp7ZHJvcDpmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksZS5vbkRyb3AodCl9LGRyYWdvdmVyOmZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSxlLm9uRHJhZ292ZXIodCl9LGRyYWdsZWF2ZTpmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksZS5kcmFnb3Zlcj0hMX19fSxbZS5fdCgiZGVmYXVsdCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn0sNDU6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigibnZicCIpfSw1OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oInkrN3giKX0sNTI6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiR2VnUCIpfSw4OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImFXNWwiKX19KX0sd29PZjpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPXtkZWZhdWx0Om4oIlYzdEEiKSxfX2VzTW9kdWxlOiEwfX0sd3hiazpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBpPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLG4pLGkubD0hMCxpLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsImEiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPSIvZGlzdC8iLG4obi5zPTEzNCl9KHswOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt2YXIgcyxhPWU9ZXx8e30sbD10eXBlb2YgZS5kZWZhdWx0OyJvYmplY3QiIT09bCYmImZ1bmN0aW9uIiE9PWx8fChzPWUsYT1lLmRlZmF1bHQpO3ZhciB1LGM9ImZ1bmN0aW9uIj09dHlwZW9mIGE/YS5vcHRpb25zOmE7aWYodCYmKGMucmVuZGVyPXQucmVuZGVyLGMuc3RhdGljUmVuZGVyRm5zPXQuc3RhdGljUmVuZGVyRm5zLGMuX2NvbXBpbGVkPSEwKSxuJiYoYy5mdW5jdGlvbmFsPSEwKSxpJiYoYy5fc2NvcGVJZD1pKSxvPyh1PWZ1bmN0aW9uKGUpeyhlPWV8fHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fHx0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCl8fCJ1bmRlZmluZWQiPT10eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfX3x8KGU9X19WVUVfU1NSX0NPTlRFWFRfXyksciYmci5jYWxsKHRoaXMsZSksZSYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChvKX0sYy5fc3NyUmVnaXN0ZXI9dSk6ciYmKHU9ciksdSl7dmFyIGQ9Yy5mdW5jdGlvbmFsLGY9ZD9jLnJlbmRlcjpjLmJlZm9yZUNyZWF0ZTtkPyhjLl9pbmplY3RTdHlsZXM9dSxjLnJlbmRlcj1mdW5jdGlvbihlLHQpe3JldHVybiB1LmNhbGwodCksZihlLHQpfSk6Yy5iZWZvcmVDcmVhdGU9Zj9bXS5jb25jYXQoZix1KTpbdV19cmV0dXJue2VzTW9kdWxlOnMsZXhwb3J0czphLG9wdGlvbnM6Y319fSwxMzQ6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHIsaT1uKDEzNSksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07by5kZWZhdWx0Lmluc3RhbGw9ZnVuY3Rpb24oZSl7ZS5jb21wb25lbnQoby5kZWZhdWx0Lm5hbWUsby5kZWZhdWx0KX0sdC5kZWZhdWx0PW8uZGVmYXVsdH0sMTM1OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oMTM2KSxpPW4ubihyKSxvPW4oMTM3KSxzPW4oMCkoaS5hLG8uYSwhMSxudWxsLG51bGwsbnVsbCk7dC5kZWZhdWx0PXMuZXhwb3J0c30sMTM2OmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByPW8obigxOSkpLGk9byhuKDgpKTtmdW5jdGlvbiBvKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX10LmRlZmF1bHQ9e25hbWU6IkVsU3dpdGNoIixtaXhpbnM6WygwLHIuZGVmYXVsdCkoImlucHV0IiksaS5kZWZhdWx0XSxpbmplY3Q6e2VsRm9ybTp7ZGVmYXVsdDoiIn19LHByb3BzOnt2YWx1ZTp7dHlwZTpbQm9vbGVhbixTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OiExfSxkaXNhYmxlZDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHdpZHRoOnt0eXBlOk51bWJlcixkZWZhdWx0OjQwfSxhY3RpdmVJY29uQ2xhc3M6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6IiJ9LGluYWN0aXZlSWNvbkNsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OiIifSxhY3RpdmVUZXh0OlN0cmluZyxpbmFjdGl2ZVRleHQ6U3RyaW5nLGFjdGl2ZUNvbG9yOnt0eXBlOlN0cmluZyxkZWZhdWx0OiIifSxpbmFjdGl2ZUNvbG9yOnt0eXBlOlN0cmluZyxkZWZhdWx0OiIifSxhY3RpdmVWYWx1ZTp7dHlwZTpbQm9vbGVhbixTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OiEwfSxpbmFjdGl2ZVZhbHVlOnt0eXBlOltCb29sZWFuLFN0cmluZyxOdW1iZXJdLGRlZmF1bHQ6ITF9LG5hbWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6IiJ9LGlkOlN0cmluZ30sZGF0YTpmdW5jdGlvbigpe3JldHVybntjb3JlV2lkdGg6dGhpcy53aWR0aH19LGNyZWF0ZWQ6ZnVuY3Rpb24oKXt+W3RoaXMuYWN0aXZlVmFsdWUsdGhpcy5pbmFjdGl2ZVZhbHVlXS5pbmRleE9mKHRoaXMudmFsdWUpfHx0aGlzLiRlbWl0KCJpbnB1dCIsdGhpcy5pbmFjdGl2ZVZhbHVlKX0sY29tcHV0ZWQ6e2NoZWNrZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZT09PXRoaXMuYWN0aXZlVmFsdWV9LHN3aXRjaERpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGlzYWJsZWR8fCh0aGlzLmVsRm9ybXx8e30pLmRpc2FibGVkfX0sd2F0Y2g6e2NoZWNrZWQ6ZnVuY3Rpb24oKXt0aGlzLiRyZWZzLmlucHV0LmNoZWNrZWQ9dGhpcy5jaGVja2VkLCh0aGlzLmFjdGl2ZUNvbG9yfHx0aGlzLmluYWN0aXZlQ29sb3IpJiZ0aGlzLnNldEJhY2tncm91bmRDb2xvcigpfX0sbWV0aG9kczp7aGFuZGxlQ2hhbmdlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy4kZW1pdCgiaW5wdXQiLHRoaXMuY2hlY2tlZD90aGlzLmluYWN0aXZlVmFsdWU6dGhpcy5hY3RpdmVWYWx1ZSksdGhpcy4kZW1pdCgiY2hhbmdlIix0aGlzLmNoZWNrZWQ/dGhpcy5pbmFjdGl2ZVZhbHVlOnRoaXMuYWN0aXZlVmFsdWUpLHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7dC4kcmVmcy5pbnB1dC5jaGVja2VkPXQuY2hlY2tlZH0pfSxzZXRCYWNrZ3JvdW5kQ29sb3I6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNoZWNrZWQ/dGhpcy5hY3RpdmVDb2xvcjp0aGlzLmluYWN0aXZlQ29sb3I7dGhpcy4kcmVmcy5jb3JlLnN0eWxlLmJvcmRlckNvbG9yPWUsdGhpcy4kcmVmcy5jb3JlLnN0eWxlLmJhY2tncm91bmRDb2xvcj1lfSxzd2l0Y2hWYWx1ZTpmdW5jdGlvbigpeyF0aGlzLnN3aXRjaERpc2FibGVkJiZ0aGlzLmhhbmRsZUNoYW5nZSgpfSxnZXRNaWdyYXRpbmdDb25maWc6ZnVuY3Rpb24oKXtyZXR1cm57cHJvcHM6eyJvbi1jb2xvciI6Im9uLWNvbG9yIGlzIHJlbmFtZWQgdG8gYWN0aXZlLWNvbG9yLiIsIm9mZi1jb2xvciI6Im9mZi1jb2xvciBpcyByZW5hbWVkIHRvIGluYWN0aXZlLWNvbG9yLiIsIm9uLXRleHQiOiJvbi10ZXh0IGlzIHJlbmFtZWQgdG8gYWN0aXZlLXRleHQuIiwib2ZmLXRleHQiOiJvZmYtdGV4dCBpcyByZW5hbWVkIHRvIGluYWN0aXZlLXRleHQuIiwib24tdmFsdWUiOiJvbi12YWx1ZSBpcyByZW5hbWVkIHRvIGFjdGl2ZS12YWx1ZS4iLCJvZmYtdmFsdWUiOiJvZmYtdmFsdWUgaXMgcmVuYW1lZCB0byBpbmFjdGl2ZS12YWx1ZS4iLCJvbi1pY29uLWNsYXNzIjoib24taWNvbi1jbGFzcyBpcyByZW5hbWVkIHRvIGFjdGl2ZS1pY29uLWNsYXNzLiIsIm9mZi1pY29uLWNsYXNzIjoib2ZmLWljb24tY2xhc3MgaXMgcmVuYW1lZCB0byBpbmFjdGl2ZS1pY29uLWNsYXNzLiJ9fX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLmNvcmVXaWR0aD10aGlzLndpZHRofHw0MCwodGhpcy5hY3RpdmVDb2xvcnx8dGhpcy5pbmFjdGl2ZUNvbG9yKSYmdGhpcy5zZXRCYWNrZ3JvdW5kQ29sb3IoKSx0aGlzLiRyZWZzLmlucHV0LmNoZWNrZWQ9dGhpcy5jaGVja2VkfX19LDEzNzpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS4kY3JlYXRlRWxlbWVudCxuPWUuX3NlbGYuX2N8fHQ7cmV0dXJuIG4oImRpdiIse3N0YXRpY0NsYXNzOiJlbC1zd2l0Y2giLGNsYXNzOnsiaXMtZGlzYWJsZWQiOmUuc3dpdGNoRGlzYWJsZWQsImlzLWNoZWNrZWQiOmUuY2hlY2tlZH0sYXR0cnM6e3JvbGU6InN3aXRjaCIsImFyaWEtY2hlY2tlZCI6ZS5jaGVja2VkLCJhcmlhLWRpc2FibGVkIjplLnN3aXRjaERpc2FibGVkfSxvbjp7Y2xpY2s6ZS5zd2l0Y2hWYWx1ZX19LFtuKCJpbnB1dCIse3JlZjoiaW5wdXQiLHN0YXRpY0NsYXNzOiJlbC1zd2l0Y2hfX2lucHV0IixhdHRyczp7dHlwZToiY2hlY2tib3giLGlkOmUuaWQsbmFtZTplLm5hbWUsInRydWUtdmFsdWUiOmUuYWN0aXZlVmFsdWUsImZhbHNlLXZhbHVlIjplLmluYWN0aXZlVmFsdWUsZGlzYWJsZWQ6ZS5zd2l0Y2hEaXNhYmxlZH0sb246e2NoYW5nZTplLmhhbmRsZUNoYW5nZSxrZXlkb3duOmZ1bmN0aW9uKHQpe2lmKCEoImJ1dHRvbiJpbiB0KSYmZS5fayh0LmtleUNvZGUsImVudGVyIiwxMyx0LmtleSkpcmV0dXJuIG51bGw7ZS5zd2l0Y2hWYWx1ZSh0KX19fSksZS5pbmFjdGl2ZUljb25DbGFzc3x8ZS5pbmFjdGl2ZVRleHQ/bigic3BhbiIse2NsYXNzOlsiZWwtc3dpdGNoX19sYWJlbCIsImVsLXN3aXRjaF9fbGFiZWwtLWxlZnQiLGUuY2hlY2tlZD8iIjoiaXMtYWN0aXZlIl19LFtlLmluYWN0aXZlSWNvbkNsYXNzP24oImkiLHtjbGFzczpbZS5pbmFjdGl2ZUljb25DbGFzc119KTplLl9lKCksIWUuaW5hY3RpdmVJY29uQ2xhc3MmJmUuaW5hY3RpdmVUZXh0P24oInNwYW4iLHthdHRyczp7ImFyaWEtaGlkZGVuIjplLmNoZWNrZWR9fSxbZS5fdihlLl9zKGUuaW5hY3RpdmVUZXh0KSldKTplLl9lKCldKTplLl9lKCksbigic3BhbiIse3JlZjoiY29yZSIsc3RhdGljQ2xhc3M6ImVsLXN3aXRjaF9fY29yZSIsc3R5bGU6e3dpZHRoOmUuY29yZVdpZHRoKyJweCJ9fSksZS5hY3RpdmVJY29uQ2xhc3N8fGUuYWN0aXZlVGV4dD9uKCJzcGFuIix7Y2xhc3M6WyJlbC1zd2l0Y2hfX2xhYmVsIiwiZWwtc3dpdGNoX19sYWJlbC0tcmlnaHQiLGUuY2hlY2tlZD8iaXMtYWN0aXZlIjoiIl19LFtlLmFjdGl2ZUljb25DbGFzcz9uKCJpIix7Y2xhc3M6W2UuYWN0aXZlSWNvbkNsYXNzXX0pOmUuX2UoKSwhZS5hY3RpdmVJY29uQ2xhc3MmJmUuYWN0aXZlVGV4dD9uKCJzcGFuIix7YXR0cnM6eyJhcmlhLWhpZGRlbiI6IWUuY2hlY2tlZH19LFtlLl92KGUuX3MoZS5hY3RpdmVUZXh0KSldKTplLl9lKCldKTplLl9lKCldKX0sc3RhdGljUmVuZGVyRm5zOltdfTt0LmE9cn0sMTk6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiMW9aZSIpfSw4OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImFXNWwiKX19KX0seEdrbjpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oIjRtY3UiKSxpPW4oIkVHWmkiKSxvPW4oIi9iUXAiKSxzPW4oIlRjUTciKTtlLmV4cG9ydHM9bigidklCLyIpKEFycmF5LCJBcnJheSIsZnVuY3Rpb24oZSx0KXt0aGlzLl90PXMoZSksdGhpcy5faT0wLHRoaXMuX2s9dH0sZnVuY3Rpb24oKXt2YXIgZT10aGlzLl90LHQ9dGhpcy5fayxuPXRoaXMuX2krKztyZXR1cm4hZXx8bj49ZS5sZW5ndGg/KHRoaXMuX3Q9dm9pZCAwLGkoMSkpOmkoMCwia2V5cyI9PXQ/bjoidmFsdWVzIj09dD9lW25dOltuLGVbbl1dKX0sInZhbHVlcyIpLG8uQXJndW1lbnRzPW8uQXJyYXkscigia2V5cyIpLHIoInZhbHVlcyIpLHIoImVudHJpZXMiKX0sInhIL2oiOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKCJoSng4Iik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIGkgaW4gdCluJiZlW2ldP2VbaV09dFtpXTpyKGUsaSx0W2ldKTtyZXR1cm4gZX19LHhMdFI6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCJjR0cyIiksaT1uKCJUTlYxIiksbz1uKCJwQnRHIikscz1uKCJLQ0xZIik7ZnVuY3Rpb24gYShlKXtlLmNhbmNlbFRva2VuJiZlLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSksZS5oZWFkZXJzPWUuaGVhZGVyc3x8e30sZS5kYXRhPWkoZS5kYXRhLGUuaGVhZGVycyxlLnRyYW5zZm9ybVJlcXVlc3QpLGUuaGVhZGVycz1yLm1lcmdlKGUuaGVhZGVycy5jb21tb258fHt9LGUuaGVhZGVyc1tlLm1ldGhvZF18fHt9LGUuaGVhZGVyc3x8e30pLHIuZm9yRWFjaChbImRlbGV0ZSIsImdldCIsImhlYWQiLCJwb3N0IiwicHV0IiwicGF0Y2giLCJjb21tb24iXSxmdW5jdGlvbih0KXtkZWxldGUgZS5oZWFkZXJzW3RdfSksKGUuYWRhcHRlcnx8cy5hZGFwdGVyKShlKS50aGVuKGZ1bmN0aW9uKHQpe3JldHVybiBhKGUpLHQuZGF0YT1pKHQuZGF0YSx0LmhlYWRlcnMsZS50cmFuc2Zvcm1SZXNwb25zZSksdH0sZnVuY3Rpb24odCl7cmV0dXJuIG8odCl8fChhKGUpLHQmJnQucmVzcG9uc2UmJih0LnJlc3BvbnNlLmRhdGE9aSh0LnJlc3BvbnNlLmRhdGEsdC5yZXNwb25zZS5oZWFkZXJzLGUudHJhbnNmb3JtUmVzcG9uc2UpKSksUHJvbWlzZS5yZWplY3QodCl9KX19LHhuYzk6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ImNvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZiIuc3BsaXQoIiwiKX0sInkrN3giOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByPW4oInVyVzgiKTt0LmRlZmF1bHQ9e21ldGhvZHM6e3Q6ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PUFycmF5KGUpLG49MDtuPGU7bisrKXRbbl09YXJndW1lbnRzW25dO3JldHVybiByLnQuYXBwbHkodGhpcyx0KX19fX0seWc2azpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBpPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLG4pLGkubD0hMCxpLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsImEiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPSIvZGlzdC8iLG4obi5zPTI2MCl9KHswOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt2YXIgcyxhPWU9ZXx8e30sbD10eXBlb2YgZS5kZWZhdWx0OyJvYmplY3QiIT09bCYmImZ1bmN0aW9uIiE9PWx8fChzPWUsYT1lLmRlZmF1bHQpO3ZhciB1LGM9ImZ1bmN0aW9uIj09dHlwZW9mIGE/YS5vcHRpb25zOmE7aWYodCYmKGMucmVuZGVyPXQucmVuZGVyLGMuc3RhdGljUmVuZGVyRm5zPXQuc3RhdGljUmVuZGVyRm5zLGMuX2NvbXBpbGVkPSEwKSxuJiYoYy5mdW5jdGlvbmFsPSEwKSxpJiYoYy5fc2NvcGVJZD1pKSxvPyh1PWZ1bmN0aW9uKGUpeyhlPWV8fHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fHx0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuJHZub2RlJiZ0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCl8fCJ1bmRlZmluZWQiPT10eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfX3x8KGU9X19WVUVfU1NSX0NPTlRFWFRfXyksciYmci5jYWxsKHRoaXMsZSksZSYmZS5fcmVnaXN0ZXJlZENvbXBvbmVudHMmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChvKX0sYy5fc3NyUmVnaXN0ZXI9dSk6ciYmKHU9ciksdSl7dmFyIGQ9Yy5mdW5jdGlvbmFsLGY9ZD9jLnJlbmRlcjpjLmJlZm9yZUNyZWF0ZTtkPyhjLl9pbmplY3RTdHlsZXM9dSxjLnJlbmRlcj1mdW5jdGlvbihlLHQpe3JldHVybiB1LmNhbGwodCksZihlLHQpfSk6Yy5iZWZvcmVDcmVhdGU9Zj9bXS5jb25jYXQoZix1KTpbdV19cmV0dXJue2VzTW9kdWxlOnMsZXhwb3J0czphLG9wdGlvbnM6Y319fSwxMzpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1uKCI3SjlzIil9LDIwOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPW4oImZVcVciKX0sMjYwOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciByLGk9bigyNjEpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O3QuZGVmYXVsdD1vLmRlZmF1bHR9LDI2MTpmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgcj1hKG4oNCkpLGk9YShuKDI2MikpLG89bigxMykscz1uKDIwKTtmdW5jdGlvbiBhKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgbD1yLmRlZmF1bHQuZXh0ZW5kKGkuZGVmYXVsdCksdT12b2lkIDAsYz1bXSxkPTEsZj1mdW5jdGlvbiBlKHQpe2lmKCFyLmRlZmF1bHQucHJvdG90eXBlLiRpc1NlcnZlcil7dmFyIG49KHQ9dHx8e30pLm9uQ2xvc2UsaT0ibm90aWZpY2F0aW9uXyIrZCsrLGE9dC5wb3NpdGlvbnx8InRvcC1yaWdodCI7dC5vbkNsb3NlPWZ1bmN0aW9uKCl7ZS5jbG9zZShpLG4pfSx1PW5ldyBsKHtkYXRhOnR9KSwoMCxzLmlzVk5vZGUpKHQubWVzc2FnZSkmJih1LiRzbG90cy5kZWZhdWx0PVt0Lm1lc3NhZ2VdLHQubWVzc2FnZT0iUkVQTEFDRURfQllfVk5PREUiKSx1LmlkPWksdS4kbW91bnQoKSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHUuJGVsKSx1LnZpc2libGU9ITAsdS5kb209dS4kZWwsdS5kb20uc3R5bGUuekluZGV4PW8uUG9wdXBNYW5hZ2VyLm5leHRaSW5kZXgoKTt2YXIgZj10Lm9mZnNldHx8MDtyZXR1cm4gYy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUucG9zaXRpb249PT1hfSkuZm9yRWFjaChmdW5jdGlvbihlKXtmKz1lLiRlbC5vZmZzZXRIZWlnaHQrMTZ9KSxmKz0xNix1LnZlcnRpY2FsT2Zmc2V0PWYsYy5wdXNoKHUpLHV9fTtbInN1Y2Nlc3MiLCJ3YXJuaW5nIiwiaW5mbyIsImVycm9yIl0uZm9yRWFjaChmdW5jdGlvbihlKXtmW2VdPWZ1bmN0aW9uKHQpe3JldHVybigic3RyaW5nIj09dHlwZW9mIHR8fCgwLHMuaXNWTm9kZSkodCkpJiYodD17bWVzc2FnZTp0fSksdC50eXBlPWUsZih0KX19KSxmLmNsb3NlPWZ1bmN0aW9uKGUsdCl7dmFyIG49LTEscj1jLmxlbmd0aCxpPWMuZmlsdGVyKGZ1bmN0aW9uKHQscil7cmV0dXJuIHQuaWQ9PT1lJiYobj1yLCEwKX0pWzBdO2lmKGkmJigiZnVuY3Rpb24iPT10eXBlb2YgdCYmdChpKSxjLnNwbGljZShuLDEpLCEocjw9MSkpKWZvcih2YXIgbz1pLnBvc2l0aW9uLHM9aS5kb20ub2Zmc2V0SGVpZ2h0LGE9bjthPHItMTthKyspY1thXS5wb3NpdGlvbj09PW8mJihjW2FdLmRvbS5zdHlsZVtpLnZlcnRpY2FsUHJvcGVydHldPXBhcnNlSW50KGNbYV0uZG9tLnN0eWxlW2kudmVydGljYWxQcm9wZXJ0eV0sMTApLXMtMTYrInB4Iil9LGYuY2xvc2VBbGw9ZnVuY3Rpb24oKXtmb3IodmFyIGU9Yy5sZW5ndGgtMTtlPj0wO2UtLSljW2VdLmNsb3NlKCl9LHQuZGVmYXVsdD1mfSwyNjI6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigyNjMpLGk9bi5uKHIpLG89bigyNjQpLHM9bigwKShpLmEsby5hLCExLG51bGwsbnVsbCxudWxsKTt0LmRlZmF1bHQ9cy5leHBvcnRzfSwyNjM6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITA7dmFyIHI9e3N1Y2Nlc3M6InN1Y2Nlc3MiLGluZm86ImluZm8iLHdhcm5pbmc6Indhcm5pbmciLGVycm9yOiJlcnJvciJ9O3QuZGVmYXVsdD17ZGF0YTpmdW5jdGlvbigpe3JldHVybnt2aXNpYmxlOiExLHRpdGxlOiIiLG1lc3NhZ2U6IiIsZHVyYXRpb246NDUwMCx0eXBlOiIiLHNob3dDbG9zZTohMCxjdXN0b21DbGFzczoiIixpY29uQ2xhc3M6IiIsb25DbG9zZTpudWxsLG9uQ2xpY2s6bnVsbCxjbG9zZWQ6ITEsdmVydGljYWxPZmZzZXQ6MCx0aW1lcjpudWxsLGRhbmdlcm91c2x5VXNlSFRNTFN0cmluZzohMSxwb3NpdGlvbjoidG9wLXJpZ2h0In19LGNvbXB1dGVkOnt0eXBlQ2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50eXBlJiZyW3RoaXMudHlwZV0/ImVsLWljb24tIityW3RoaXMudHlwZV06IiJ9LGhvcml6b250YWxDbGFzczpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBvc2l0aW9uLmluZGV4T2YoInJpZ2h0Iik+LTE/InJpZ2h0IjoibGVmdCJ9LHZlcnRpY2FsUHJvcGVydHk6ZnVuY3Rpb24oKXtyZXR1cm4vXnRvcC0vLnRlc3QodGhpcy5wb3NpdGlvbik/InRvcCI6ImJvdHRvbSJ9LHBvc2l0aW9uU3R5bGU6ZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4oZT17fSlbdGhpcy52ZXJ0aWNhbFByb3BlcnR5XT10aGlzLnZlcnRpY2FsT2Zmc2V0KyJweCIsZX19LHdhdGNoOntjbG9zZWQ6ZnVuY3Rpb24oZSl7ZSYmKHRoaXMudmlzaWJsZT0hMSx0aGlzLiRlbC5hZGRFdmVudExpc3RlbmVyKCJ0cmFuc2l0aW9uZW5kIix0aGlzLmRlc3Ryb3lFbGVtZW50KSl9fSxtZXRob2RzOntkZXN0cm95RWxlbWVudDpmdW5jdGlvbigpe3RoaXMuJGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoInRyYW5zaXRpb25lbmQiLHRoaXMuZGVzdHJveUVsZW1lbnQpLHRoaXMuJGRlc3Ryb3koITApLHRoaXMuJGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy4kZWwpfSxjbGljazpmdW5jdGlvbigpeyJmdW5jdGlvbiI9PXR5cGVvZiB0aGlzLm9uQ2xpY2smJnRoaXMub25DbGljaygpfSxjbG9zZTpmdW5jdGlvbigpe3RoaXMuY2xvc2VkPSEwLCJmdW5jdGlvbiI9PXR5cGVvZiB0aGlzLm9uQ2xvc2UmJnRoaXMub25DbG9zZSgpfSxjbGVhclRpbWVyOmZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHRoaXMudGltZXIpfSxzdGFydFRpbWVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLmR1cmF0aW9uPjAmJih0aGlzLnRpbWVyPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtlLmNsb3NlZHx8ZS5jbG9zZSgpfSx0aGlzLmR1cmF0aW9uKSl9LGtleWRvd246ZnVuY3Rpb24oZSl7NDY9PT1lLmtleUNvZGV8fDg9PT1lLmtleUNvZGU/dGhpcy5jbGVhclRpbWVyKCk6Mjc9PT1lLmtleUNvZGU/dGhpcy5jbG9zZWR8fHRoaXMuY2xvc2UoKTp0aGlzLnN0YXJ0VGltZXIoKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuZHVyYXRpb24+MCYmKHRoaXMudGltZXI9c2V0VGltZW91dChmdW5jdGlvbigpe2UuY2xvc2VkfHxlLmNsb3NlKCl9LHRoaXMuZHVyYXRpb24pKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJrZXlkb3duIix0aGlzLmtleWRvd24pfSxiZWZvcmVEZXN0cm95OmZ1bmN0aW9uKCl7ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigia2V5ZG93biIsdGhpcy5rZXlkb3duKX19fSwyNjQ6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQsbj1lLl9zZWxmLl9jfHx0O3JldHVybiBuKCJ0cmFuc2l0aW9uIix7YXR0cnM6e25hbWU6ImVsLW5vdGlmaWNhdGlvbi1mYWRlIn19LFtuKCJkaXYiLHtkaXJlY3RpdmVzOlt7bmFtZToic2hvdyIscmF3TmFtZToidi1zaG93Iix2YWx1ZTplLnZpc2libGUsZXhwcmVzc2lvbjoidmlzaWJsZSJ9XSxjbGFzczpbImVsLW5vdGlmaWNhdGlvbiIsZS5jdXN0b21DbGFzcyxlLmhvcml6b250YWxDbGFzc10sc3R5bGU6ZS5wb3NpdGlvblN0eWxlLGF0dHJzOntyb2xlOiJhbGVydCJ9LG9uOnttb3VzZWVudGVyOmZ1bmN0aW9uKHQpe2UuY2xlYXJUaW1lcigpfSxtb3VzZWxlYXZlOmZ1bmN0aW9uKHQpe2Uuc3RhcnRUaW1lcigpfSxjbGljazplLmNsaWNrfX0sW2UudHlwZXx8ZS5pY29uQ2xhc3M/bigiaSIse3N0YXRpY0NsYXNzOiJlbC1ub3RpZmljYXRpb25fX2ljb24iLGNsYXNzOltlLnR5cGVDbGFzcyxlLmljb25DbGFzc119KTplLl9lKCksbigiZGl2Iix7c3RhdGljQ2xhc3M6ImVsLW5vdGlmaWNhdGlvbl9fZ3JvdXAiLGNsYXNzOnsiaXMtd2l0aC1pY29uIjplLnR5cGVDbGFzc3x8ZS5pY29uQ2xhc3N9fSxbbigiaDIiLHtzdGF0aWNDbGFzczoiZWwtbm90aWZpY2F0aW9uX190aXRsZSIsZG9tUHJvcHM6e3RleHRDb250ZW50OmUuX3MoZS50aXRsZSl9fSksbigiZGl2Iix7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6ZS5tZXNzYWdlLGV4cHJlc3Npb246Im1lc3NhZ2UifV0sc3RhdGljQ2xhc3M6ImVsLW5vdGlmaWNhdGlvbl9fY29udGVudCJ9LFtlLl90KCJkZWZhdWx0IixbZS5kYW5nZXJvdXNseVVzZUhUTUxTdHJpbmc/bigicCIse2RvbVByb3BzOntpbm5lckhUTUw6ZS5fcyhlLm1lc3NhZ2UpfX0pOm4oInAiLFtlLl92KGUuX3MoZS5tZXNzYWdlKSldKV0pXSwyKSxlLnNob3dDbG9zZT9uKCJkaXYiLHtzdGF0aWNDbGFzczoiZWwtbm90aWZpY2F0aW9uX19jbG9zZUJ0biBlbC1pY29uLWNsb3NlIixvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7dC5zdG9wUHJvcGFnYXRpb24oKSxlLmNsb3NlKHQpfX19KTplLl9lKCldKV0pXSl9LHN0YXRpY1JlbmRlckZuczpbXX07dC5hPXJ9LDQ6ZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9bigiNyt1VyIpfX0pfSx5bERKOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwLHQuaXNFZGdlPXQuaXNJRT10LmNvZXJjZVRydXRoeVZhbHVlVG9BcnJheT10LmFycmF5RmluZD10LmFycmF5RmluZEluZGV4PXQuZXNjYXBlUmVnZXhwU3RyaW5nPXQudmFsdWVFcXVhbHM9dC5nZW5lcmF0ZUlkPXQuZ2V0VmFsdWVCeVBhdGg9dm9pZCAwLHQubm9vcD1mdW5jdGlvbigpe30sdC5oYXNPd249ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcy5jYWxsKGUsdCl9LHQudG9PYmplY3Q9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXt9LG49MDtuPGUubGVuZ3RoO24rKyllW25dJiZhKHQsZVtuXSk7cmV0dXJuIHR9LHQuZ2V0UHJvcEJ5UGF0aD1mdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPWUsaT0odD0odD10LnJlcGxhY2UoL1xbKFx3KylcXS9nLCIuJDEiKSkucmVwbGFjZSgvXlwuLywiIikpLnNwbGl0KCIuIiksbz0wLHM9aS5sZW5ndGg7bzxzLTEmJihyfHxuKTsrK28pe3ZhciBhPWlbb107aWYoIShhIGluIHIpKXtpZihuKXRocm93IG5ldyBFcnJvcigicGxlYXNlIHRyYW5zZmVyIGEgdmFsaWQgcHJvcCBwYXRoIHRvIGZvcm0gaXRlbSEiKTticmVha31yPXJbYV19cmV0dXJue286cixrOmlbb10sdjpyP3JbaVtvXV06bnVsbH19O3ZhciByLGk9bigiNyt1VyIpLG89KHI9aSkmJnIuX19lc01vZHVsZT9yOntkZWZhdWx0OnJ9O3ZhciBzPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24gYShlLHQpe2Zvcih2YXIgbiBpbiB0KWVbbl09dFtuXTtyZXR1cm4gZX10LmdldFZhbHVlQnlQYXRoPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPSh0PXR8fCIiKS5zcGxpdCgiLiIpLHI9ZSxpPW51bGwsbz0wLHM9bi5sZW5ndGg7bzxzO28rKyl7dmFyIGE9bltvXTtpZighcilicmVhaztpZihvPT09cy0xKXtpPXJbYV07YnJlYWt9cj1yW2FdfXJldHVybiBpfTt0LmdlbmVyYXRlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5mbG9vcigxZTQqTWF0aC5yYW5kb20oKSl9LHQudmFsdWVFcXVhbHM9ZnVuY3Rpb24oZSx0KXtpZihlPT09dClyZXR1cm4hMDtpZighKGUgaW5zdGFuY2VvZiBBcnJheSkpcmV0dXJuITE7aWYoISh0IGluc3RhbmNlb2YgQXJyYXkpKXJldHVybiExO2lmKGUubGVuZ3RoIT09dC5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciBuPTA7biE9PWUubGVuZ3RoOysrbilpZihlW25dIT09dFtuXSlyZXR1cm4hMTtyZXR1cm4hMH0sdC5lc2NhcGVSZWdleHBTdHJpbmc9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06IiI7cmV0dXJuIFN0cmluZyhlKS5yZXBsYWNlKC9bfFxce30oKVtcXV4kKyo/Ll0vZywiXFwkJiIpfTt2YXIgbD10LmFycmF5RmluZEluZGV4PWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTA7biE9PWUubGVuZ3RoOysrbilpZih0KGVbbl0pKXJldHVybiBuO3JldHVybi0xfTt0LmFycmF5RmluZD1mdW5jdGlvbihlLHQpe3ZhciBuPWwoZSx0KTtyZXR1cm4tMSE9PW4/ZVtuXTp2b2lkIDB9LHQuY29lcmNlVHJ1dGh5VmFsdWVUb0FycmF5PWZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP2U6ZT9bZV06W119LHQuaXNJRT1mdW5jdGlvbigpe3JldHVybiFvLmRlZmF1bHQucHJvdG90eXBlLiRpc1NlcnZlciYmIWlzTmFOKE51bWJlcihkb2N1bWVudC5kb2N1bWVudE1vZGUpKX0sdC5pc0VkZ2U9ZnVuY3Rpb24oKXtyZXR1cm4hby5kZWZhdWx0LnByb3RvdHlwZS4kaXNTZXJ2ZXImJm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZigiRWRnZSIpPi0xfX0sInorZ2QiOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGZ1bmN0aW9uKGUpe3ZhciBuPWZ1bmN0aW9uKCl7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiBNYXApcmV0dXJuIE1hcDtmdW5jdGlvbiBlKGUsdCl7dmFyIG49LTE7cmV0dXJuIGUuc29tZShmdW5jdGlvbihlLHIpe3JldHVybiBlWzBdPT09dCYmKG49ciwhMCl9KSxufXJldHVybiBmdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt0aGlzLl9fZW50cmllc19fPVtdfXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsInNpemUiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fX2VudHJpZXNfXy5sZW5ndGh9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKHQpe3ZhciBuPWUodGhpcy5fX2VudHJpZXNfXyx0KSxyPXRoaXMuX19lbnRyaWVzX19bbl07cmV0dXJuIHImJnJbMV19LHQucHJvdG90eXBlLnNldD1mdW5jdGlvbih0LG4pe3ZhciByPWUodGhpcy5fX2VudHJpZXNfXyx0KTt+cj90aGlzLl9fZW50cmllc19fW3JdWzFdPW46dGhpcy5fX2VudHJpZXNfXy5wdXNoKFt0LG5dKX0sdC5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKHQpe3ZhciBuPXRoaXMuX19lbnRyaWVzX18scj1lKG4sdCk7fnImJm4uc3BsaWNlKHIsMSl9LHQucHJvdG90eXBlLmhhcz1mdW5jdGlvbih0KXtyZXR1cm4hIX5lKHRoaXMuX19lbnRyaWVzX18sdCl9LHQucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5fX2VudHJpZXNfXy5zcGxpY2UoMCl9LHQucHJvdG90eXBlLmZvckVhY2g9ZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT10JiYodD1udWxsKTtmb3IodmFyIG49MCxyPXRoaXMuX19lbnRyaWVzX187bjxyLmxlbmd0aDtuKyspe3ZhciBpPXJbbl07ZS5jYWxsKHQsaVsxXSxpWzBdKX19LHR9KCl9KCkscj0idW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdyYmInVuZGVmaW5lZCIhPXR5cGVvZiBkb2N1bWVudCYmd2luZG93LmRvY3VtZW50PT09ZG9jdW1lbnQsaT12b2lkIDAhPT1lJiZlLk1hdGg9PT1NYXRoP2U6InVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmJiZzZWxmLk1hdGg9PT1NYXRoP3NlbGY6InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5NYXRoPT09TWF0aD93aW5kb3c6RnVuY3Rpb24oInJldHVybiB0aGlzIikoKSxvPSJmdW5jdGlvbiI9PXR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU/cmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQoaSk6ZnVuY3Rpb24oZSl7cmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gZShEYXRlLm5vdygpKX0sMWUzLzYwKX0scz0yO3ZhciBhPTIwLGw9WyJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJ3aWR0aCIsImhlaWdodCIsInNpemUiLCJ3ZWlnaHQiXSx1PSJ1bmRlZmluZWQiIT10eXBlb2YgTXV0YXRpb25PYnNlcnZlcixjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3RoaXMuY29ubmVjdGVkXz0hMSx0aGlzLm11dGF0aW9uRXZlbnRzQWRkZWRfPSExLHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfPW51bGwsdGhpcy5vYnNlcnZlcnNfPVtdLHRoaXMub25UcmFuc2l0aW9uRW5kXz10aGlzLm9uVHJhbnNpdGlvbkVuZF8uYmluZCh0aGlzKSx0aGlzLnJlZnJlc2g9ZnVuY3Rpb24oZSx0KXt2YXIgbj0hMSxyPSExLGk9MDtmdW5jdGlvbiBhKCl7biYmKG49ITEsZSgpKSxyJiZ1KCl9ZnVuY3Rpb24gbCgpe28oYSl9ZnVuY3Rpb24gdSgpe3ZhciBlPURhdGUubm93KCk7aWYobil7aWYoZS1pPHMpcmV0dXJuO3I9ITB9ZWxzZSBuPSEwLHI9ITEsc2V0VGltZW91dChsLHQpO2k9ZX1yZXR1cm4gdX0odGhpcy5yZWZyZXNoLmJpbmQodGhpcyksYSl9cmV0dXJuIGUucHJvdG90eXBlLmFkZE9ic2VydmVyPWZ1bmN0aW9uKGUpe350aGlzLm9ic2VydmVyc18uaW5kZXhPZihlKXx8dGhpcy5vYnNlcnZlcnNfLnB1c2goZSksdGhpcy5jb25uZWN0ZWRffHx0aGlzLmNvbm5lY3RfKCl9LGUucHJvdG90eXBlLnJlbW92ZU9ic2VydmVyPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMub2JzZXJ2ZXJzXyxuPXQuaW5kZXhPZihlKTt+biYmdC5zcGxpY2UobiwxKSwhdC5sZW5ndGgmJnRoaXMuY29ubmVjdGVkXyYmdGhpcy5kaXNjb25uZWN0XygpfSxlLnByb3RvdHlwZS5yZWZyZXNoPWZ1bmN0aW9uKCl7dGhpcy51cGRhdGVPYnNlcnZlcnNfKCkmJnRoaXMucmVmcmVzaCgpfSxlLnByb3RvdHlwZS51cGRhdGVPYnNlcnZlcnNfPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vYnNlcnZlcnNfLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5nYXRoZXJBY3RpdmUoKSxlLmhhc0FjdGl2ZSgpfSk7cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5icm9hZGNhc3RBY3RpdmUoKX0pLGUubGVuZ3RoPjB9LGUucHJvdG90eXBlLmNvbm5lY3RfPWZ1bmN0aW9uKCl7ciYmIXRoaXMuY29ubmVjdGVkXyYmKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoInRyYW5zaXRpb25lbmQiLHRoaXMub25UcmFuc2l0aW9uRW5kXyksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoInJlc2l6ZSIsdGhpcy5yZWZyZXNoKSx1Pyh0aGlzLm11dGF0aW9uc09ic2VydmVyXz1uZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLnJlZnJlc2gpLHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfLm9ic2VydmUoZG9jdW1lbnQse2F0dHJpYnV0ZXM6ITAsY2hpbGRMaXN0OiEwLGNoYXJhY3RlckRhdGE6ITAsc3VidHJlZTohMH0pKTooZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NU3VidHJlZU1vZGlmaWVkIix0aGlzLnJlZnJlc2gpLHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF89ITApLHRoaXMuY29ubmVjdGVkXz0hMCl9LGUucHJvdG90eXBlLmRpc2Nvbm5lY3RfPWZ1bmN0aW9uKCl7ciYmdGhpcy5jb25uZWN0ZWRfJiYoZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigidHJhbnNpdGlvbmVuZCIsdGhpcy5vblRyYW5zaXRpb25FbmRfKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigicmVzaXplIix0aGlzLnJlZnJlc2gpLHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfJiZ0aGlzLm11dGF0aW9uc09ic2VydmVyXy5kaXNjb25uZWN0KCksdGhpcy5tdXRhdGlvbkV2ZW50c0FkZGVkXyYmZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigiRE9NU3VidHJlZU1vZGlmaWVkIix0aGlzLnJlZnJlc2gpLHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfPW51bGwsdGhpcy5tdXRhdGlvbkV2ZW50c0FkZGVkXz0hMSx0aGlzLmNvbm5lY3RlZF89ITEpfSxlLnByb3RvdHlwZS5vblRyYW5zaXRpb25FbmRfPWZ1bmN0aW9uKGUpe3ZhciB0PWUucHJvcGVydHlOYW1lLG49dm9pZCAwPT09dD8iIjp0O2wuc29tZShmdW5jdGlvbihlKXtyZXR1cm4hIX5uLmluZGV4T2YoZSl9KSYmdGhpcy5yZWZyZXNoKCl9LGUuZ2V0SW5zdGFuY2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbnN0YW5jZV98fCh0aGlzLmluc3RhbmNlXz1uZXcgZSksdGhpcy5pbnN0YW5jZV99LGUuaW5zdGFuY2VfPW51bGwsZX0oKSxkPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTAscj1PYmplY3Qua2V5cyh0KTtuPHIubGVuZ3RoO24rKyl7dmFyIGk9cltuXTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxpLHt2YWx1ZTp0W2ldLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITEsY29uZmlndXJhYmxlOiEwfSl9cmV0dXJuIGV9LGY9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUub3duZXJEb2N1bWVudCYmZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHxpfSxoPV8oMCwwLDAsMCk7ZnVuY3Rpb24gcChlKXtyZXR1cm4gcGFyc2VGbG9hdChlKXx8MH1mdW5jdGlvbiBtKGUpe2Zvcih2YXIgdD1bXSxuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKyl0W24tMV09YXJndW1lbnRzW25dO3JldHVybiB0LnJlZHVjZShmdW5jdGlvbih0LG4pe3JldHVybiB0K3AoZVsiYm9yZGVyLSIrbisiLXdpZHRoIl0pfSwwKX1mdW5jdGlvbiB2KGUpe3ZhciB0PWUuY2xpZW50V2lkdGgsbj1lLmNsaWVudEhlaWdodDtpZighdCYmIW4pcmV0dXJuIGg7dmFyIHI9ZihlKS5nZXRDb21wdXRlZFN0eWxlKGUpLGk9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXt9LG49MCxyPVsidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0Il07bjxyLmxlbmd0aDtuKyspe3ZhciBpPXJbbl0sbz1lWyJwYWRkaW5nLSIraV07dFtpXT1wKG8pfXJldHVybiB0fShyKSxvPWkubGVmdCtpLnJpZ2h0LHM9aS50b3AraS5ib3R0b20sYT1wKHIud2lkdGgpLGw9cChyLmhlaWdodCk7aWYoImJvcmRlci1ib3giPT09ci5ib3hTaXppbmcmJihNYXRoLnJvdW5kKGErbykhPT10JiYoYS09bShyLCJsZWZ0IiwicmlnaHQiKStvKSxNYXRoLnJvdW5kKGwrcykhPT1uJiYobC09bShyLCJ0b3AiLCJib3R0b20iKStzKSksIWZ1bmN0aW9uKGUpe3JldHVybiBlPT09ZihlKS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnR9KGUpKXt2YXIgdT1NYXRoLnJvdW5kKGErbyktdCxjPU1hdGgucm91bmQobCtzKS1uOzEhPT1NYXRoLmFicyh1KSYmKGEtPXUpLDEhPT1NYXRoLmFicyhjKSYmKGwtPWMpfXJldHVybiBfKGkubGVmdCxpLnRvcCxhLGwpfXZhciBnPSJ1bmRlZmluZWQiIT10eXBlb2YgU1ZHR3JhcGhpY3NFbGVtZW50P2Z1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgZihlKS5TVkdHcmFwaGljc0VsZW1lbnR9OmZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgZihlKS5TVkdFbGVtZW50JiYiZnVuY3Rpb24iPT10eXBlb2YgZS5nZXRCQm94fTtmdW5jdGlvbiB5KGUpe3JldHVybiByP2coZSk/ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5nZXRCQm94KCk7cmV0dXJuIF8oMCwwLHQud2lkdGgsdC5oZWlnaHQpfShlKTp2KGUpOmh9ZnVuY3Rpb24gXyhlLHQsbixyKXtyZXR1cm57eDplLHk6dCx3aWR0aDpuLGhlaWdodDpyfX12YXIgYj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5icm9hZGNhc3RXaWR0aD0wLHRoaXMuYnJvYWRjYXN0SGVpZ2h0PTAsdGhpcy5jb250ZW50UmVjdF89XygwLDAsMCwwKSx0aGlzLnRhcmdldD1lfXJldHVybiBlLnByb3RvdHlwZS5pc0FjdGl2ZT1mdW5jdGlvbigpe3ZhciBlPXkodGhpcy50YXJnZXQpO3JldHVybiB0aGlzLmNvbnRlbnRSZWN0Xz1lLGUud2lkdGghPT10aGlzLmJyb2FkY2FzdFdpZHRofHxlLmhlaWdodCE9PXRoaXMuYnJvYWRjYXN0SGVpZ2h0fSxlLnByb3RvdHlwZS5icm9hZGNhc3RSZWN0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jb250ZW50UmVjdF87cmV0dXJuIHRoaXMuYnJvYWRjYXN0V2lkdGg9ZS53aWR0aCx0aGlzLmJyb2FkY2FzdEhlaWdodD1lLmhlaWdodCxlfSxlfSgpLHg9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXt2YXIgbixyLGksbyxzLGEsbCx1PShyPShuPXQpLngsaT1uLnksbz1uLndpZHRoLHM9bi5oZWlnaHQsYT0idW5kZWZpbmVkIiE9dHlwZW9mIERPTVJlY3RSZWFkT25seT9ET01SZWN0UmVhZE9ubHk6T2JqZWN0LGw9T2JqZWN0LmNyZWF0ZShhLnByb3RvdHlwZSksZChsLHt4OnIseTppLHdpZHRoOm8saGVpZ2h0OnMsdG9wOmkscmlnaHQ6citvLGJvdHRvbTpzK2ksbGVmdDpyfSksbCk7ZCh0aGlzLHt0YXJnZXQ6ZSxjb250ZW50UmVjdDp1fSl9fSgpLEM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCxyKXtpZih0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc189W10sdGhpcy5vYnNlcnZhdGlvbnNfPW5ldyBuLCJmdW5jdGlvbiIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoIlRoZSBjYWxsYmFjayBwcm92aWRlZCBhcyBwYXJhbWV0ZXIgMSBpcyBub3QgYSBmdW5jdGlvbi4iKTt0aGlzLmNhbGxiYWNrXz1lLHRoaXMuY29udHJvbGxlcl89dCx0aGlzLmNhbGxiYWNrQ3R4Xz1yfXJldHVybiBlLnByb3RvdHlwZS5vYnNlcnZlPWZ1bmN0aW9uKGUpe2lmKCFhcmd1bWVudHMubGVuZ3RoKXRocm93IG5ldyBUeXBlRXJyb3IoIjEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC4iKTtpZigidW5kZWZpbmVkIiE9dHlwZW9mIEVsZW1lbnQmJkVsZW1lbnQgaW5zdGFuY2VvZiBPYmplY3Qpe2lmKCEoZSBpbnN0YW5jZW9mIGYoZSkuRWxlbWVudCkpdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyYW1ldGVyIDEgaXMgbm90IG9mIHR5cGUgIkVsZW1lbnQiLicpO3ZhciB0PXRoaXMub2JzZXJ2YXRpb25zXzt0LmhhcyhlKXx8KHQuc2V0KGUsbmV3IGIoZSkpLHRoaXMuY29udHJvbGxlcl8uYWRkT2JzZXJ2ZXIodGhpcyksdGhpcy5jb250cm9sbGVyXy5yZWZyZXNoKCkpfX0sZS5wcm90b3R5cGUudW5vYnNlcnZlPWZ1bmN0aW9uKGUpe2lmKCFhcmd1bWVudHMubGVuZ3RoKXRocm93IG5ldyBUeXBlRXJyb3IoIjEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC4iKTtpZigidW5kZWZpbmVkIiE9dHlwZW9mIEVsZW1lbnQmJkVsZW1lbnQgaW5zdGFuY2VvZiBPYmplY3Qpe2lmKCEoZSBpbnN0YW5jZW9mIGYoZSkuRWxlbWVudCkpdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyYW1ldGVyIDEgaXMgbm90IG9mIHR5cGUgIkVsZW1lbnQiLicpO3ZhciB0PXRoaXMub2JzZXJ2YXRpb25zXzt0LmhhcyhlKSYmKHQuZGVsZXRlKGUpLHQuc2l6ZXx8dGhpcy5jb250cm9sbGVyXy5yZW1vdmVPYnNlcnZlcih0aGlzKSl9fSxlLnByb3RvdHlwZS5kaXNjb25uZWN0PWZ1bmN0aW9uKCl7dGhpcy5jbGVhckFjdGl2ZSgpLHRoaXMub2JzZXJ2YXRpb25zXy5jbGVhcigpLHRoaXMuY29udHJvbGxlcl8ucmVtb3ZlT2JzZXJ2ZXIodGhpcyl9LGUucHJvdG90eXBlLmdhdGhlckFjdGl2ZT1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5jbGVhckFjdGl2ZSgpLHRoaXMub2JzZXJ2YXRpb25zXy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QuaXNBY3RpdmUoKSYmZS5hY3RpdmVPYnNlcnZhdGlvbnNfLnB1c2godCl9KX0sZS5wcm90b3R5cGUuYnJvYWRjYXN0QWN0aXZlPWZ1bmN0aW9uKCl7aWYodGhpcy5oYXNBY3RpdmUoKSl7dmFyIGU9dGhpcy5jYWxsYmFja0N0eF8sdD10aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBuZXcgeChlLnRhcmdldCxlLmJyb2FkY2FzdFJlY3QoKSl9KTt0aGlzLmNhbGxiYWNrXy5jYWxsKGUsdCxlKSx0aGlzLmNsZWFyQWN0aXZlKCl9fSxlLnByb3RvdHlwZS5jbGVhckFjdGl2ZT1mdW5jdGlvbigpe3RoaXMuYWN0aXZlT2JzZXJ2YXRpb25zXy5zcGxpY2UoMCl9LGUucHJvdG90eXBlLmhhc0FjdGl2ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ubGVuZ3RoPjB9LGV9KCksdz0idW5kZWZpbmVkIiE9dHlwZW9mIFdlYWtNYXA/bmV3IFdlYWtNYXA6bmV3IG4saz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBlKHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbi4iKTtpZighYXJndW1lbnRzLmxlbmd0aCl0aHJvdyBuZXcgVHlwZUVycm9yKCIxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuIik7dmFyIG49Yy5nZXRJbnN0YW5jZSgpLHI9bmV3IEModCxuLHRoaXMpO3cuc2V0KHRoaXMscil9fSgpO1sib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsImRpc2Nvbm5lY3QiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2sucHJvdG90eXBlW2VdPWZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuKHQ9dy5nZXQodGhpcykpW2VdLmFwcGx5KHQsYXJndW1lbnRzKX19KTt2YXIgUz12b2lkIDAhPT1pLlJlc2l6ZU9ic2VydmVyP2kuUmVzaXplT2JzZXJ2ZXI6azt0LmRlZmF1bHQ9U30uY2FsbCh0LG4oIkR1UjIiKSl9LHpRUjk6ZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKCJoNjV0IikoITApO24oInZJQi8iKShTdHJpbmcsIlN0cmluZyIsZnVuY3Rpb24oZSl7dGhpcy5fdD1TdHJpbmcoZSksdGhpcy5faT0wfSxmdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5fdCxuPXRoaXMuX2k7cmV0dXJuIG4+PXQubGVuZ3RoP3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06KGU9cih0LG4pLHRoaXMuX2krPWUubGVuZ3RoLHt2YWx1ZTplLGRvbmU6ITF9KX0pfSx6VENpOmZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwLHQuZGVmYXVsdD1mdW5jdGlvbihlLHQpe2lmKG8uZGVmYXVsdC5wcm90b3R5cGUuJGlzU2VydmVyKXJldHVybjtpZighdClyZXR1cm4gdm9pZChlLnNjcm9sbFRvcD0wKTt2YXIgbj1bXSxyPXQub2Zmc2V0UGFyZW50O2Zvcig7ciYmZSE9PXImJmUuY29udGFpbnMocik7KW4ucHVzaChyKSxyPXIub2Zmc2V0UGFyZW50O3ZhciBpPXQub2Zmc2V0VG9wK24ucmVkdWNlKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUrdC5vZmZzZXRUb3B9LDApLHM9aSt0Lm9mZnNldEhlaWdodCxhPWUuc2Nyb2xsVG9wLGw9YStlLmNsaWVudEhlaWdodDtpPGE/ZS5zY3JvbGxUb3A9aTpzPmwmJihlLnNjcm9sbFRvcD1zLWUuY2xpZW50SGVpZ2h0KX07dmFyIHIsaT1uKCI3K3VXIiksbz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn19fSk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlbmRvci41YjY1ZWZmMGRmNzBiYmI1ZGVmMy5qcy5tYXA=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="3124171" offset="0" length="16384" />
          <PacketInfo time="3124187" offset="16384" length="7873" />
          <PacketInfo time="3124796" offset="24257" length="5840" />
          <PacketInfo time="3125109" offset="30097" length="1460" />
          <PacketInfo time="3125203" offset="31557" length="1460" />
          <PacketInfo time="3125218" offset="33017" length="8760" />
          <PacketInfo time="3125250" offset="41777" length="4380" />
          <PacketInfo time="3125250" offset="46157" length="5840" />
          <PacketInfo time="3125296" offset="51997" length="1460" />
          <PacketInfo time="3125296" offset="53457" length="2920" />
          <PacketInfo time="3125593" offset="56377" length="2920" />
          <PacketInfo time="3125640" offset="59297" length="16384" />
          <PacketInfo time="3125640" offset="75681" length="8436" />
          <PacketInfo time="3125687" offset="84117" length="2920" />
          <PacketInfo time="3125750" offset="87037" length="8760" />
          <PacketInfo time="3125765" offset="95797" length="1460" />
          <PacketInfo time="3125796" offset="97257" length="1460" />
          <PacketInfo time="3125796" offset="98717" length="2920" />
          <PacketInfo time="3125828" offset="101637" length="1460" />
          <PacketInfo time="3125828" offset="103097" length="2920" />
          <PacketInfo time="3125859" offset="106017" length="1460" />
          <PacketInfo time="3125859" offset="107477" length="2920" />
          <PacketInfo time="3125890" offset="110397" length="1460" />
          <PacketInfo time="3125968" offset="111857" length="7300" />
          <PacketInfo time="3125968" offset="119157" length="5840" />
          <PacketInfo time="3126000" offset="124997" length="1460" />
          <PacketInfo time="3126000" offset="126457" length="4380" />
          <PacketInfo time="3126031" offset="130837" length="2920" />
          <PacketInfo time="3126031" offset="133757" length="2920" />
          <PacketInfo time="3126046" offset="136677" length="1460" />
          <PacketInfo time="3126062" offset="138137" length="7300" />
          <PacketInfo time="3126140" offset="145437" length="16384" />
          <PacketInfo time="3126156" offset="161821" length="16384" />
          <PacketInfo time="3126171" offset="178205" length="2272" />
          <PacketInfo time="3126171" offset="180477" length="1460" />
          <PacketInfo time="3126187" offset="181937" length="10220" />
          <PacketInfo time="3126265" offset="192157" length="16384" />
          <PacketInfo time="3126281" offset="208541" length="16384" />
          <PacketInfo time="3126296" offset="224925" length="16384" />
          <PacketInfo time="3126296" offset="241309" length="488" />
          <PacketInfo time="3126296" offset="241797" length="2920" />
          <PacketInfo time="3126312" offset="244717" length="11680" />
          <PacketInfo time="3126328" offset="256397" length="11680" />
          <PacketInfo time="3126328" offset="268077" length="2920" />
          <PacketInfo time="3126406" offset="270997" length="5840" />
          <PacketInfo time="3126453" offset="276837" length="14600" />
          <PacketInfo time="3126484" offset="291437" length="1460" />
          <PacketInfo time="3126484" offset="292897" length="14600" />
          <PacketInfo time="3126531" offset="307497" length="5840" />
          <PacketInfo time="3126609" offset="313337" length="16384" />
          <PacketInfo time="3126625" offset="329721" length="14276" />
          <PacketInfo time="3126625" offset="343997" length="2920" />
          <PacketInfo time="3126656" offset="346917" length="1460" />
          <PacketInfo time="3126671" offset="348377" length="7300" />
          <PacketInfo time="3126671" offset="355677" length="2920" />
          <PacketInfo time="3126703" offset="358597" length="1460" />
          <PacketInfo time="3126703" offset="360057" length="4380" />
          <PacketInfo time="3126796" offset="364437" length="16384" />
          <PacketInfo time="3126812" offset="380821" length="15736" />
          <PacketInfo time="3126828" offset="396557" length="1460" />
          <PacketInfo time="3126828" offset="398017" length="7300" />
          <PacketInfo time="3126843" offset="405317" length="5840" />
          <PacketInfo time="3126859" offset="411157" length="2920" />
          <PacketInfo time="3126875" offset="414077" length="1460" />
          <PacketInfo time="3126875" offset="415537" length="5840" />
          <PacketInfo time="3126953" offset="421377" length="16384" />
          <PacketInfo time="3126968" offset="437761" length="16384" />
          <PacketInfo time="3126968" offset="454145" length="3732" />
          <PacketInfo time="3126984" offset="457877" length="5840" />
          <PacketInfo time="3127015" offset="463717" length="2920" />
          <PacketInfo time="3127031" offset="466637" length="16060" />
          <PacketInfo time="3127046" offset="482697" length="1460" />
          <PacketInfo time="3127062" offset="484157" length="10220" />
          <PacketInfo time="3127078" offset="494377" length="11680" />
          <PacketInfo time="3127156" offset="506057" length="16384" />
          <PacketInfo time="3127156" offset="522441" length="16384" />
          <PacketInfo time="3127171" offset="538825" length="812" />
          <PacketInfo time="3127171" offset="539637" length="11680" />
          <PacketInfo time="3127187" offset="551317" length="14600" />
          <PacketInfo time="3127218" offset="565917" length="2920" />
          <PacketInfo time="3127218" offset="568837" length="4380" />
          <PacketInfo time="3127359" offset="573217" length="16384" />
          <PacketInfo time="3127359" offset="589601" length="16384" />
          <PacketInfo time="3127375" offset="605985" length="16384" />
          <PacketInfo time="3127375" offset="622369" length="488" />
          <PacketInfo time="3127390" offset="622857" length="8760" />
          <PacketInfo time="3127421" offset="631617" length="7300" />
          <PacketInfo time="3127546" offset="638917" length="16384" />
          <PacketInfo time="3127546" offset="655301" length="9896" />
          <PacketInfo time="3127562" offset="665197" length="5840" />
          <PacketInfo time="3127578" offset="671037" length="2920" />
          <PacketInfo time="3127578" offset="673957" length="5840" />
          <PacketInfo time="3127609" offset="679797" length="4119" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="10222" hostname="gtx-admin.t.dacube.cn" path="/static/js/app.8cc661d86ca6fd5eb4b6.js" url="http://gtx-admin.t.dacube.cn/static/js/app.8cc661d86ca6fd5eb4b6.js" ip="139.9.5.231" port="80" connectionId="81" origin="HTML" frame="1" startTime="3124015" endTime="3124187">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3R4LWFkbWluLnQuZGFjdWJlLmNu</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovL2d0eC1hZG1pbi50LmRhY3ViZS5jbi8=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zdGF0aWMvanMvYXBwLjhjYzY2MWQ4NmNhNmZkNWViNGI2LmpzIEhUVFAvMS4xDQpIb3N0OiBndHgtYWRtaW4udC5kYWN1YmUuY24NCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNTYuMC4yOTI0LjkwIFNhZmFyaS81MzcuMzYgMjM0NUV4cGxvcmVyLzkuNi4wLjE4NjI3DQpBY2NlcHQ6ICovKg0KUmVmZXJlcjogaHR0cDovL2d0eC1hZG1pbi50LmRhY3ViZS5jbi8NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0LUxhbmd1YWdlOiB6aC1DTix6aDtxPTAuOA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Server" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bmdpbngvMS4xMi4y</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAxMCBBcHIgMjAxOSAwOToyMzo1OSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTA4OTQzNQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxMSBNYXIgMjAxOSAwMzoyNzoxOSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IjVjODVkNTk3LTEwOWY5YiI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IG5naW54LzEuMTIuMg0KRGF0ZTogV2VkLCAxMCBBcHIgMjAxOSAwOToyMzo1OSBHTVQNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KQ29udGVudC1MZW5ndGg6IDEwODk0MzUNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCkxhc3QtTW9kaWZpZWQ6IE1vbiwgMTEgTWFyIDIwMTkgMDM6Mjc6MTkgR01UDQpFVGFnOiAiNWM4NWQ1OTctMTA5ZjliIg0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>d2VicGFja0pzb25wKFsxXSx7IitCVGkiOmZ1bmN0aW9uKGUsbil7fSwiK1JkYiI6ZnVuY3Rpb24oZSxuKXt9LCIvSTRVIjpmdW5jdGlvbihlLG4pe30sIi9SWW8iOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4ubG8tY29udGFpbmVyW2RhdGEtdi04YTU0ZTY3OF0ge1xuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgZGlzcGxheTogZmxleDtcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcbiAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XG4gICAgICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuLmxvLWNvbnRhaW5lciBkaXZbZGF0YS12LThhNTRlNjc4XSB7XG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuLmxvLWNvbnRhaW5lciAubG8taGVhZGVyW2RhdGEtdi04YTU0ZTY3OF0ge1xuICBoZWlnaHQ6IDcwcHg7XG59XG4ubG8tY29udGFpbmVyIC5sby1jb250ZW50W2RhdGEtdi04YTU0ZTY3OF0ge1xuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDcwcHgpO1xuICAtd2Via2l0LWJveC1mbGV4OiAxO1xuICAgICAgLW1zLWZsZXg6IDE7XG4gICAgICAgICAgZmxleDogMTtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG4ubG8tY29udGVudFtkYXRhLXYtOGE1NGU2NzhdIHtcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICBkaXNwbGF5OiBmbGV4O1xufVxuLmxvLWNvbnRlbnQgLmxvLXRyZWVbZGF0YS12LThhNTRlNjc4XSB7XG4gIHdpZHRoOiAyNTVweDtcbiAgbWluLXdpZHRoOiAyNTVweDtcbn1cbi5sby1jb250ZW50IC5sby1tYWluW2RhdGEtdi04YTU0ZTY3OF0ge1xuICAtd2Via2l0LWJveC1mbGV4OiAxO1xuICAgICAgLW1zLWZsZXg6IDE7XG4gICAgICAgICAgZmxleDogMTtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy92aWV3cy9zcmMvdmlld3MvbGF5b3V0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUE0QkE7RUFDQSxhQUFBO0VBQ0EscUJBQUE7RUFBQSxxQkFBQTtFQUFBLGNBQUE7RUFDQSw2QkFBQTtFQUFBLDhCQUFBO01BQUEsMkJBQUE7VUFBQSx1QkFBQTtDQUNBO0FBRUE7RUFDQSwrQkFBQTtVQUFBLHVCQUFBO0NBQ0E7QUFFQTtFQUNBLGFBQUE7Q0FDQTtBQUVBO0VBQ0EsMEJBQUE7RUFDQSxvQkFBQTtNQUFBLFlBQUE7VUFBQSxRQUFBO0VBQ0EsZUFBQTtDQUNBO0FBRUE7RUFDQSxxQkFBQTtFQUFBLHFCQUFBO0VBQUEsY0FBQTtDQUNBO0FBRUE7RUFDQSxhQUFBO0VBQ0EsaUJBQUE7Q0FDQTtBQUVBO0VBQ0Esb0JBQUE7TUFBQSxZQUFBO1VBQUEsUUFBQTtFQUNBLGVBQUE7Q0FDQSIsZmlsZToibGF5b3V0LnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9ImxvLWNvbnRhaW5lciI+XG4gICAgPGRpdiBjbGFzcz0ibG8taGVhZGVyIj5cbiAgICAgIDxsYXlvdXQtaGVhZGVyIC8+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz0ibG8tY29udGVudCI+XG4gICAgICA8ZGl2IGNsYXNzPSJsby10cmVlIj5cbiAgICAgICAgPHJvdXRlci10cmVlIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9ImxvLW1haW4iPlxuICAgICAgICA8cm91dGVyLXZpZXcvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBMYXlvdXRIZWFkZXIgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2xheW91dEhlYWRlclwnXG5pbXBvcnQgUm91dGVyVHJlZSBmcm9tIFwnQC9jb21wb25lbnRzL2NvbW1vbnMvcm91dGVyVHJlZVwnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBMYXlvdXRIZWFkZXIsXG4gICAgUm91dGVyVHJlZVxuICB9XG59XG48XC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4gIC5sby1jb250YWluZXIge1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIH1cblxuICAubG8tY29udGFpbmVyIGRpdiB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuICBcbiAgLmxvLWNvbnRhaW5lciAubG8taGVhZGVyIHtcbiAgICBoZWlnaHQ6IDcwcHg7XG4gIH1cblxuICAubG8tY29udGFpbmVyIC5sby1jb250ZW50IHtcbiAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDcwcHgpO1xuICAgIGZsZXg6IDE7XG4gICAgb3ZlcmZsb3c6IGF1dG87XG4gIH1cblxuICAubG8tY29udGVudCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgfVxuXG4gIC5sby1jb250ZW50IC5sby10cmVlIHtcbiAgICB3aWR0aDogMjU1cHg7XG4gICAgbWluLXdpZHRoOiAyNTVweDtcbiAgfVxuXG4gIC5sby1jb250ZW50IC5sby1tYWluIHtcbiAgICBmbGV4OiAxO1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICB9XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sIi9kQksiOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4ucm9sZS1tYW5hZ2UgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgd2lkdGg6IDYwJTtcbn1cbi5yb2xlLW1hbmFnZSAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICB3aWR0aDogMjUlO1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VSb2xlL3NyYy9jb21wb25lbnRzL21hbmFnZVJvbGUvcm9sZU1hbmFnZS52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBeVJBO0VBQ0EsV0FBQTtDQUNBO0FBQ0E7RUFDQSxXQUFBO0NBQ0EiLGZpbGU6InJvbGVNYW5hZ2UudnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0icm9sZS1tYW5hZ2UiPlxuICAgIDxkaXY+XG4gICAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICAgIHRpdGxlLW5hbWU9IuinkuiJsueuoeeQhiJcbiAgICAgICAgY2xhc3M9ImNpY2xlLWNvbnRyb2xsZXIiXG4gICAgICAvPlxuICAgICAgPGRpdiBjbGFzcz0ic2VhcmNoLWZvcm0tY29udGFpbmVyIj5cbiAgICAgICAgPGVsLWZvcm1cbiAgICAgICAgICA6aW5saW5lPSJ0cnVlIlxuICAgICAgICAgIDptb2RlbD0icm9sZUZvcm0iXG4gICAgICAgICAgY2xhc3M9ImRlbW8tZm9ybS1pbmxpbmUiPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuinkuiJsuWQjeensCI+XG4gICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgdi1tb2RlbD0icm9sZUZvcm0ubmFtZSJcbiAgICAgICAgICAgICAgY2xlYXJhYmxlLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i5byA5aeL5pe26Ze0Ij5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9InJvbGVGb3JtLnN0YXJ0RGF0ZSB8IEZvcm1hdERhdGUoXCd5eXl5LU1NLWRkIGhoOm1tXCcpIlxuICAgICAgICAgICAgICB2LW1vZGVsPSJyb2xlRm9ybS5zdGFydERhdGUiXG4gICAgICAgICAgICAgIHR5cGU9ImRhdGV0aW1lIlxuICAgICAgICAgICAgICBmb3JtYXQ9Inl5eXktTU0tZGQgSEg6bW0iXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLpgInmi6nml6XmnJ8iXG4gICAgICAgICAgICAgIEBjaGFuZ2U9ImdldFJvbGVMaXN0Ii8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9Iue7k+adn+aXtumXtCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPSJyb2xlRm9ybS5lbmREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9InJvbGVGb3JtLmVuZERhdGUiXG4gICAgICAgICAgICAgIHR5cGU9ImRhdGV0aW1lIlxuICAgICAgICAgICAgICBmb3JtYXQ9Inl5eXktTU0tZGQgSEg6bW0iXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLpgInmi6nml6XmnJ8iXG4gICAgICAgICAgICAgIEBjaGFuZ2U9ImdldFJvbGVMaXN0Ii8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICAgIEBjbGljaz0iZ2V0Um9sZUxpc3QiPlxuICAgICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICA8L2VsLWJ1dHRvbj5cbiAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgICAgQGNsaWNrPSJhZGRSb2xlIj5cbiAgICAgICAgICAgIOa3u+WKoFxuICAgICAgICAgICAgPGkgY2xhc3M9ImVsLWljb24tcGx1cyBlbC1pY29uLS1yaWdodCIvPlxuICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICAgIDxlbC1kaWFsb2dcbiAgICAgICAgICAgIDp2aXNpYmxlLnN5bmM9ImRpYWxvZ1Zpc2libGUiXG4gICAgICAgICAgICB0aXRsZT0i5Yib5bu66KeS6ImyIlxuICAgICAgICAgICAgd2lkdGg9IjYwJSJcbiAgICAgICAgICAgIEBjbG9zZT0iY2xvc2VEaWFsb2ciPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICA6aXM9ImNvbXBvbmVudE5hbWUiXG4gICAgICAgICAgICAgIDpyb2xlaWQ9InJvbGVpZCJcbiAgICAgICAgICAgICAgQGNsb3NlRGlhbG9nPSJjbG9zZURpYWxvZyIvPlxuICAgICAgICAgIDwvZWwtZGlhbG9nPlxuICAgICAgICA8L2VsLWZvcm0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1saXN0Ij5cbiAgICAgIDxlbC10YWJsZVxuICAgICAgICByZWY9ImNoYW5uZWxUYWJsZSJcbiAgICAgICAgOmRhdGE9InRhYmxlRGF0YSJcbiAgICAgICAgc3RyaXBlXG4gICAgICAgIGNsYXNzPSJ3aG9sZS10YWJsZSJcbiAgICAgICAgbWluLWhlaWdodD0iNDAwIj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIHRhYmxlSGVhZGVyIlxuICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgIDpwcm9wPSJpdGVtLnByb3AiXG4gICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIlxuICAgICAgICAgIDp3aWR0aD0iaXRlbS53aWR0aCJcbiAgICAgICAgICA6Zm9ybWF0dGVyPSJpdGVtLmZvcm1hdHRlciJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIHNob3ctb3ZlcmZsb3ctdG9vbHRpcFxuICAgICAgICAvPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgZml4ZWQ9InJpZ2h0IlxuICAgICAgICAgIGxhYmVsPSLmk43kvZwiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICB3aWR0aD0iMjAwIj5cbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgY2xhc3M9InVzZXIgcmVzZXQtcGFzc3dvcmQiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJkZXRhaWxSb2xlKHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIOafpeeci1xuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgY2xhc3M9InVzZXIgZWRpdCJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImhhbmRsZUVkaXQoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg57yW6L6RXG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjbGFzcz0idXNlciBkZWxldGUiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVEZWxldGUoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg5Yig6ZmkXG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgIDwvZWwtdGFibGU+XG4gICAgICA8ZGl2IGNsYXNzPSJwYWdpbmF0aW9uIj5cbiAgICAgICAgPGVsLXBhZ2luYXRpb25cbiAgICAgICAgICA6dG90YWw9InRvdGFsIlxuICAgICAgICAgIDpwYWdlLXNpemVzPSJbMTAsIDIwLCAzMCwgNDBdIlxuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICBsYXlvdXQ9InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPSJoYW5kbGVTaXplQ2hhbmdlIlxuICAgICAgICAgIEBjdXJyZW50LWNoYW5nZT0iaGFuZGxlQ3VycmVudENoYW5nZSIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlXCdcbmltcG9ydCBBZGRSb2xlIGZyb20gXCdAL2NvbXBvbmVudHMvbWFuYWdlUm9sZS9hZGRSb2xlXCdcbmltcG9ydCBFZGl0Um9sZSBmcm9tIFwnQC9jb21wb25lbnRzL21hbmFnZVJvbGUvZWRpdFJvbGVcJ1xuaW1wb3J0IERldGFpbFJvbGUgZnJvbSBcJ0AvY29tcG9uZW50cy9tYW5hZ2VSb2xlL2RldGFpbFJvbGVcJ1xuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tIFwnQC9hcGkvc3lzdGVtVXNlcnNBcGlcJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQ2lyY2xlVGl0bGUsXG4gICAgQWRkUm9sZSxcbiAgICBFZGl0Um9sZSxcbiAgICBEZXRhaWxSb2xlXG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICByb2xlRm9ybToge1xuICAgICAgICBuYW1lOiBcJ1wnLFxuICAgICAgICBzdGFydERhdGU6IFwnXCcsXG4gICAgICAgIGVuZERhdGU6IFwnXCdcbiAgICAgIH0sXG4gICAgICBkaWFsb2dWaXNpYmxlOiBmYWxzZSxcbiAgICAgIGNvbXBvbmVudE5hbWU6IFwnQWRkUm9sZVwnLFxuICAgICAgdGFibGVIZWFkZXI6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnbmFtZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+inkuiJsuWQjeensFwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2NyZWF0ZXRpbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfliJvlu7rml7bpl7RcJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10oY2VsbFZhbHVlLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICB0YWJsZURhdGE6IFtdLFxuICAgICAgcGFnZU5vOiAxLFxuICAgICAgcGFnZVNpemU6IDEwLFxuICAgICAgdG90YWw6IDAsXG4gICAgICByb2xlaWQ6IFwnXCdcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgXCdyb2xlRm9ybS5uYW1lXCcgKHZhbCkge1xuICAgICAgdGhpcy5nZXRSb2xlTGlzdCgpXG4gICAgfVxuICB9LFxuICBtb3VudGVkICgpIHtcbiAgICB0aGlzLmdldFJvdXRlclBhcmFtKClcbiAgICAvKiog6I635Y+W6aKR6YGT5YiX6KGoICoqL1xuICAgIHRoaXMuZ2V0Um9sZUxpc3QoKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZ2V0Um91dGVyUGFyYW0gKCkge1xuICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy4kcm91dGUucXVlcnlcbiAgICAgIGlmIChxdWVyeS5wYWdlTm8pIHtcbiAgICAgICAgdGhpcy5wYWdlTm8gPSBwYXJzZUludChxdWVyeS5wYWdlTm8pXG4gICAgICB9XG4gICAgfSxcbiAgICBjbG9zZURpYWxvZyAoKSB7XG4gICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSBmYWxzZVxuICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gXCdcJ1xuICAgICAgdGhpcy5nZXRSb2xlTGlzdCgpXG4gICAgfSxcbiAgICBnZXRSb2xlTGlzdCAoKSB7XG4gICAgICB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdzd2FwVGltZVwnXSh0aGlzLnJvbGVGb3JtKVxuICAgICAgbGV0IHRpbWVTdGFydCA9IHRoaXMucm9sZUZvcm0uc3RhcnREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5yb2xlRm9ybS5zdGFydERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIGxldCB0aW1lRW5kID0gdGhpcy5yb2xlRm9ybS5lbmREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5yb2xlRm9ybS5lbmREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBBY3Rpb25zLmdldFJvbGVMaXN0KHtcbiAgICAgICAgXCdwYWdlTm9cJzogdGhpcy5wYWdlTm8sXG4gICAgICAgIFwncGFnZVNpemVcJzogdGhpcy5wYWdlU2l6ZSxcbiAgICAgICAgXCduYW1lXCc6IHRoaXMucm9sZUZvcm0ubmFtZSxcbiAgICAgICAgXCd0aW1lU3RhcnRcJzogdGltZVN0YXJ0LFxuICAgICAgICBcJ3RpbWVFbmRcJzogdGltZUVuZFxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGxpc3REYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy50YWJsZURhdGEgPSBsaXN0RGF0YS5saXN0XG4gICAgICAgICAgdGhpcy50b3RhbCA9IGxpc3REYXRhLnRvdGFsXG4gICAgICAgICAgdGhpcy5wYWdlTm8gPSBsaXN0RGF0YS5wYWdlTnVtXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBoYW5kbGVTaXplQ2hhbmdlIChwYWdlU2l6ZSkge1xuICAgICAgdGhpcy5wYWdlU2l6ZSA9IHBhZ2VTaXplXG4gICAgICB0aGlzLmdldFJvbGVMaXN0KClcbiAgICB9LFxuICAgIGhhbmRsZUN1cnJlbnRDaGFuZ2UgKHBhZ2VJbmRleCkge1xuICAgICAgdGhpcy5wYWdlTm8gPSBwYWdlSW5kZXhcbiAgICAgIHRoaXMuZ2V0Um9sZUxpc3QoKVxuICAgIH0sXG4gICAgLyoqIOafpeeci+inkuiJsuadg+mZkCAqKi9cbiAgICBkZXRhaWxSb2xlIChyb3cpIHtcbiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IHRydWVcbiAgICAgIHRoaXMuY29tcG9uZW50TmFtZSA9IFwnRGV0YWlsUm9sZVwnXG4gICAgICB0aGlzLnJvbGVpZCA9IHJvdy5yb2xlaWRcbiAgICB9LFxuICAgIC8qKiDnvJbovpHml7bojrflj5bljZXlhYPmoLzmlbDmja4gKiovXG4gICAgaGFuZGxlRWRpdDogZnVuY3Rpb24gKHJvdykge1xuICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gXCdFZGl0Um9sZVwnXG4gICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSB0cnVlXG4gICAgICB0aGlzLnJvbGVpZCA9IHJvdy5yb2xlaWRcbiAgICAgIC8vIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCdyb2xlaWRcJywgcm93LnJvbGVpZClcbiAgICAgIC8vIHRoaXMuJHJvdXRlci5wdXNoKHtwYXRoOiBcJy9tYW5hZ2VDaGFubmVsL2VkaXRcJywgcXVlcnk6IHtcJ3BhZ2VOb1wnOiB0aGlzLnBhZ2VOb319KVxuICAgIH0sXG4gICAgYWRkUm9sZSAoKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ0FkZFJvbGVcJ1xuICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gdHJ1ZVxuICAgIH0sXG4gICAgLyoqIOWIoOmZpOinkuiJsiAqKi9cbiAgICBoYW5kbGVEZWxldGUgKHJvdykge1xuICAgICAgdGhpcy4kY29uZmlybShcJ+aYr+WQpuWIoOmZpCJcJyArIHJvdy5uYW1lICsgXCciP1wnLCBcJ+aPkOekulwnLCB7XG4gICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcJ+ehruWumlwnLFxuICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcJ+WPlua2iFwnLFxuICAgICAgICB0eXBlOiBcJ3dhcm5pbmdcJ1xuICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgIEFjdGlvbnMuZGVsZXRlUm9sZSh7XG4gICAgICAgICAgXCdyb2xlXCc6IHtcbiAgICAgICAgICAgIFwncm9sZWlkXCc6IHJvdy5yb2xlaWRcbiAgICAgICAgICB9XG4gICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogXCfliKDpmaTmiJDlip8hXCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZ2V0Um9sZUxpc3QoKVxuICAgICAgICB9KVxuICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5wYWdpbmF0aW9ue1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gIH1cbiAgLnVzZXJ7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiAzMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gICAgYm9yZGVyLXJhZGl1czogMjBweDtcbiAgICBmb250LXNpemU6IDEzcHg7XG4gICAgcGFkZGluZzogMXB4IDVweCAycHggNXB4O1xuICAgIGNvbG9yOiByZ2JhKDE4MSwgMTg0LCAyMTcsIDEpO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuICAuZWRpdHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMTg4M0ZGO1xuICAgIGNvbG9yOiMxODgzRkY7XG4gIH1cbiAgLnJlc2V0LXBhc3N3b3Jke1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM2OTRFRkY7XG4gICAgY29sb3I6IzY5NEVGRjtcbiAgfVxuICAuZGVsZXRle1xuICAgIGJvcmRlcjoxcHggc29saWQgI0YwMDgwODtcbiAgICBjb2xvcjogI0YwMDgwODtcbiAgfVxuPC9zdHlsZT5cbjxzdHlsZT5cbiAgLnJvbGUtbWFuYWdlIC5lbC1mb3JtLS1pbmxpbmUgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gICAgd2lkdGg6IDYwJTtcbiAgfVxuICAucm9sZS1tYW5hZ2UgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtIHtcbiAgICB3aWR0aDogMjUlO1xuICB9XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sIi9zREEiOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uY2ljbGUtY29udHJvbGxlcltkYXRhLXYtOWVmNGNlMmNdIHtcbiAgbWFyZ2luLXRvcDogNCU7XG59XG4uY3JlYXRlIC5zb3J0IHNwYW5bZGF0YS12LTllZjRjZTJjXXtcbiAgY29sb3I6ICM5MDkwOTA7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZVNsaWRlL3NyYy9jb21wb25lbnRzL21hbmFnZVNsaWRlL3NsaWRlQ3JlYXRlLnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUF5U0E7RUFDQSxlQUFBO0NBQ0E7QUFDQTtFQUNBLGVBQUE7Q0FDQSIsZmlsZToic2xpZGVDcmVhdGUudnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0ic2xpZGUgY3JlYXRlIj5cbiAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICB0aXRsZS1uYW1lPSLova7mkq3lm77nvJbovpEiXG4gICAgICBjbGFzcz0iY2ljbGUtY29udHJvbGxlciJcbiAgICAvPlxuICAgIDxlbC1mb3JtXG4gICAgICByZWY9InJ1bGVGb3JtIlxuICAgICAgOm1vZGVsPSJydWxlRm9ybSJcbiAgICAgIDpydWxlcz0icnVsZXMiXG4gICAgICBsYWJlbC13aWR0aD0iMTAwcHgiXG4gICAgICBjbGFzcz0icnVsZS1mb3JtIj5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9Iui9ruaSreWbvuagh+mimCJcbiAgICAgICAgcHJvcD0iY2hhcnRfbmFtZSI+XG4gICAgICAgIDxlbC1pbnB1dCB2LW1vZGVsLnRyaW09InJ1bGVGb3JtLmNoYXJ0X25hbWUiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgbGFiZWw9IuS4iuS8oOWbvueJhyJcbiAgICAgICAgcHJvcD0iaWNvbiI+XG4gICAgICAgIDxlbC11cGxvYWRcbiAgICAgICAgICA6YWN0aW9uPSJnZXRVcGxvYWRVcmwiXG4gICAgICAgICAgOmhlYWRlcnM9InVwbG9hZEhlYWRlcnMiXG4gICAgICAgICAgOnNob3ctZmlsZS1saXN0PSJmYWxzZSJcbiAgICAgICAgICA6b24tc3VjY2Vzcz0iaGFuZGxlUGNBdmF0YXJTdWNjZXNzIlxuICAgICAgICAgIDpiZWZvcmUtdXBsb2FkPSJiZWZvcmVBdmF0YXJVcGxvYWQiXG4gICAgICAgICAgY2xhc3M9ImF2YXRhci11cGxvYWRlciI+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgdi1pZj0icnVsZUZvcm0uaWNvbiJcbiAgICAgICAgICAgIDpzcmM9InJ1bGVGb3JtLmljb24iXG4gICAgICAgICAgICBjbGFzcz0iYXZhdGFyIj5cbiAgICAgICAgICA8aVxuICAgICAgICAgICAgdi1lbHNlXG4gICAgICAgICAgICBjbGFzcz0iZWwtaWNvbi1wbHVzIGF2YXRhci11cGxvYWRlci1pY29uIi8+XG4gICAgICAgIDwvZWwtdXBsb2FkPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLlhbPogZTlhoXlrrkiXG4gICAgICAgIHByb3A9InJlbGF0aXZlQ29udGVudCI+XG4gICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgIHYtbW9kZWw9InJ1bGVGb3JtLnJlbGF0aXZlQ29udGVudCJcbiAgICAgICAgICBkaXNhYmxlZFxuICAgICAgICAgIHN0eWxlPSJ3aWR0aDogODclIi8+XG4gICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTElO21hcmdpbi1sZWZ0OiAxJSJcbiAgICAgICAgICBAY2xpY2s9ImRpYWxvZ1Zpc2libGUgPSB0cnVlIj7mt7vliqA8L2VsLWJ1dHRvbj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWRpYWxvZ1xuICAgICAgICA6dmlzaWJsZS5zeW5jPSJkaWFsb2dWaXNpYmxlIlxuICAgICAgICB0aXRsZT0i6YCJ5oup5YWz6IGU5YaF5a65IlxuICAgICAgICB3aWR0aD0iNzAlIj5cbiAgICAgICAgPGVsLXJhZGlvLWdyb3VwXG4gICAgICAgICAgdi1tb2RlbD0icmFkaW8iXG4gICAgICAgICAgdGV4dC1jb2xvcj0iI2ZmZmZmZiJcbiAgICAgICAgICBmaWxsPSIjNjk0RUZGIlxuICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgIEBjaGFuZ2U9ImhhbmRsZU9wZXJhdGlvbkNsaWNrKHJhZGlvKSI+XG4gICAgICAgICAgPGVsLXJhZGlvLWJ1dHRvbiBsYWJlbD0i56i/5Lu2Ii8+XG4gICAgICAgICAgPGVsLXJhZGlvLWJ1dHRvbiBsYWJlbD0i5LiT6aKYIi8+XG4gICAgICAgIDwvZWwtcmFkaW8tZ3JvdXA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICA6aXM9ImNvbXBvbmVudE5hbWUiXG4gICAgICAgICAgQHNlbGVjdGVkLXJvdz0ic2VsZWN0ZWRSb3ciLz5cbiAgICAgIDwvZWwtZGlhbG9nPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5b2S5bGe6aKR6YGTIlxuICAgICAgICBwcm9wPSJjaGFubmVsaWQiPlxuICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgdi1tb2RlbD0icnVsZUZvcm0uY2hhbm5lbGlkIlxuICAgICAgICAgIGZpbHRlcmFibGVcbiAgICAgICAgICBjbGVhcmFibGVcbiAgICAgICAgICBwbGFjZWhvbGRlcj0iIj5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBjaGFubmVsVHlwZUxpc3QiXG4gICAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSJcbiAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5pyJ5pWI5pyfIlxuICAgICAgICBjbGFzcz0iaW5kYXRlIlxuICAgICAgICByZXF1aXJlZD5cbiAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgdi1tb2RlbD0icnVsZUZvcm0uaW5kYXRlIlxuICAgICAgICAgIDpjbGVhcmFibGU9ImZhbHNlIlxuICAgICAgICAgIHN0eWxlPSJ3aWR0aDoxMDAlIlxuICAgICAgICAgIHR5cGU9ImRhdGV0aW1lcmFuZ2UiXG4gICAgICAgICAgcmFuZ2Utc2VwYXJhdG9yPSLoh7MiXG4gICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgIHN0YXJ0LXBsYWNlaG9sZGVyPSLlvIDlp4vml6XmnJ8iXG4gICAgICAgICAgZW5kLXBsYWNlaG9sZGVyPSLnu5PmnZ/ml6XmnJ8iLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i54q25oCB6YCJ5oupIlxuICAgICAgICBwcm9wPSJzdGF0ZSI+XG4gICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICB2LW1vZGVsPSJydWxlRm9ybS5zdGF0ZSJcbiAgICAgICAgICBwbGFjZWhvbGRlcj0i6K+36YCJ5oupIj5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICA6dmFsdWU9IjEiXG4gICAgICAgICAgICBsYWJlbD0i5ZCv55SoIi8+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgOnZhbHVlPSIwIlxuICAgICAgICAgICAgbGFiZWw9IuWBnOeUqCIvPlxuICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5o6S5bqPIlxuICAgICAgICBwcm9wPSJzb3J0IlxuICAgICAgICBjbGFzcz0ic29ydCJcbiAgICAgICAgcmVxdWlyZWQ+XG4gICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgIHYtbW9kZWwubnVtYmVyPSJydWxlRm9ybS5zb3J0IlxuICAgICAgICAgIHN0eWxlPSJ3aWR0aDogNzUlIi8+XG4gICAgICAgIDxzcGFuPuaPkOekuu+8muaVsOWtl+i2iuWwj+i2iuW+gOWJjTwvc3Bhbj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbT5cbiAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgQGNsaWNrPSJzdWJtaXRGb3JtKFwncnVsZUZvcm1cJykiPuaPkOS6pDwvZWwtYnV0dG9uPlxuICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9tYW5hZ2VTbGlkZS9saXN0Ij5cbiAgICAgICAgICA8ZWwtYnV0dG9uPuWPlua2iDwvZWwtYnV0dG9uPlxuICAgICAgICA8L3JvdXRlci1saW5rPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgPC9lbC1mb3JtPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IENpcmNsZVRpdGxlIGZyb20gXCdAL2NvbXBvbmVudHMvY29tbW9ucy9jaXJjbGVUaXRsZVwnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9zbGlkZUFwaVwnXG5pbXBvcnQgQWRkVG9waWMgZnJvbSBcJy4vYWRkVG9waWNcJ1xuaW1wb3J0IEFkZE1hbnVzY3JpcHQgZnJvbSBcJy4vYWRkTWFudXNjcmlwdFwnXG5pbXBvcnQgdXBsb2FkSGVhZGVycyBmcm9tIFwnQC9taXhpbnNcJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQ2lyY2xlVGl0bGUsXG4gICAgQWRkTWFudXNjcmlwdCxcbiAgICBBZGRUb3BpY1xuICB9LFxuXG4gIG1peGluczogW3VwbG9hZEhlYWRlcnNdLFxuICBcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJ1bGVGb3JtOiB7XG4gICAgICAgIGNoYXJ0X25hbWU6IFwnXCcsXG4gICAgICAgIGljb246IFwnXCcsXG4gICAgICAgIGltYWdlVXJsOiBcJ1wnLFxuICAgICAgICBpbmRhdGU6IFtuZXcgRGF0ZSgpLCBuZXcgRGF0ZSgpXSxcbiAgICAgICAgc29ydDogXCdcJyxcbiAgICAgICAgY2hhbm5lbGlkOiBcJ1wnLFxuICAgICAgICByZWxhdGl2ZUNvbnRlbnQ6IFwnXCcsXG4gICAgICAgIHN0YXRlOiAwXG4gICAgICB9LFxuICAgICAgcmFkaW86IFwn56i/5Lu2XCcsXG4gICAgICBpc0Nob29zZURhdGU6IGZhbHNlLFxuICAgICAgZGlhbG9nVmlzaWJsZTogZmFsc2UsXG4gICAgICBjb21wb25lbnROYW1lOiBcJ0FkZE1hbnVzY3JpcHRcJyxcbiAgICAgIHJ1bGVzOiB7XG4gICAgICAgIGNoYXJ0X25hbWU6IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+i+k+WFpei9ruaSreWbvuagh+mimFwnLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9LFxuICAgICAgICAgIHsgbWluOiAwLCBtYXg6IDY0LCBtZXNzYWdlOiBcJ+agh+mimOmZkOWumjY05Liq5a2X56ym5YaFXCcsIHRyaWdnZXI6IFwnY2hhbmdlXCcgfVxuICAgICAgICBdLFxuICAgICAgICBjaGFubmVsaWQ6IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+mAieaLqeW9kuWxnumikemBk1wnLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9XG4gICAgICAgIF0sXG4gICAgICAgIHNvcnQ6IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+i+k+WFpeaOkuW6j1wnLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9LFxuICAgICAgICAgIHsgdHlwZTogXCdudW1iZXJcJywgbWVzc2FnZTogXCfmjpLluo/lv4XpobvkuLrmlbDlrZdcJyB9XG4gICAgICAgIF0sXG4gICAgICAgIGljb246IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+S4iuS8oOWbvueJh1wnLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9XG4gICAgICAgIF0sXG4gICAgICAgIHJlbGF0aXZlQ29udGVudDogeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogXCfor7fpgInmi6nlhbPogZTlhoXlrrlcJywgdHJpZ2dlcjogXCdibHVyXCcgfVxuICAgICAgfSxcbiAgICAgIGNoYXJ0aWQ6IFwnXCcsXG4gICAgICBjaGFubmVsVHlwZUxpc3Q6IFtdLFxuICAgICAganVtcF90eXBlOiAwLCAvLyDlhbPogZTnmoTmmK/nqL/ku7bov5jmmK/kuJPpophcbiAgICAgIGFydGljbGVpZDogXCdcJyxcbiAgICAgIHNwZWNpYWxpZDogXCdcJyxcbiAgICAgIGp1bXBfdXJsOiBcJ1wnXG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGdldFVwbG9hZFVybCAoKSB7XG4gICAgICByZXR1cm4gQWN0aW9ucy51cGxvYWRQaWN0dXJlKClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuZ2V0TGlzdFVzYWJsZUNoYW5uZWwoKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLyoqIOmAieaLqeeov+S7tu+8jOmAieaLqeS4k+mimCAqKi9cbiAgICBoYW5kbGVPcGVyYXRpb25DbGljayAocmFkaW8pIHtcbiAgICAgIGlmIChyYWRpbykge1xuICAgICAgICBzd2l0Y2ggKHJhZGlvKSB7XG4gICAgICAgICAgY2FzZSBcJ+eov+S7tlwnOlxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gXCdBZGRNYW51c2NyaXB0XCdcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBcJ+S4k+mimFwnOlxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gXCdBZGRUb3BpY1wnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHN1Ym1pdEZvcm0gKGZvcm1OYW1lKSB7XG4gICAgICB0aGlzLiRyZWZzW2Zvcm1OYW1lXS52YWxpZGF0ZSgodmFsaWQpID0+IHtcbiAgICAgICAgaWYgKHZhbGlkKSB7XG4gICAgICAgICAgQWN0aW9ucy5hZGRTbGlkZSh7XG4gICAgICAgICAgICBcJ3JvdGF0aW9uQ2hhcnRcJzoge1xuICAgICAgICAgICAgICBcJ2NoYXJ0X25hbWVcJzogdGhpcy5ydWxlRm9ybS5jaGFydF9uYW1lLFxuICAgICAgICAgICAgICBcJ2NoYXJ0X2hlYWRfdXJsXCc6IHRoaXMucnVsZUZvcm0uaWNvbixcbiAgICAgICAgICAgICAgXCdqdW1wX3R5cGVcJzogdGhpcy5qdW1wX3R5cGUsXG4gICAgICAgICAgICAgIFwnYXJ0aWNsZWlkXCc6IHRoaXMuYXJ0aWNsZWlkLFxuICAgICAgICAgICAgICBcJ3NwZWNpYWxpZFwnOiB0aGlzLnNwZWNpYWxpZCxcbiAgICAgICAgICAgICAgXCdjaGFubmVsaWRcJzogdGhpcy5ydWxlRm9ybS5jaGFubmVsaWQsXG4gICAgICAgICAgICAgIFwnZXhwaXJ5X2RhdGVfc3RhcnRcJzogbmV3IERhdGUodGhpcy5ydWxlRm9ybS5pbmRhdGVbMF0pLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgXCdleHBpcnlfZGF0ZV9lbmRcJzogbmV3IERhdGUodGhpcy5ydWxlRm9ybS5pbmRhdGVbMV0pLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgXCdzb3J0XCc6IHRoaXMucnVsZUZvcm0uc29ydCxcbiAgICAgICAgICAgICAgXCdzdGF0ZVwnOiB0aGlzLnJ1bGVGb3JtLnN0YXRlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHtwYXRoOiBcJy9tYW5hZ2VTbGlkZS9saXN0XCd9KVxuICAgICAgICAgICAgICB0aGlzLiRub3RpZnkoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcJ+mAmuefpVwnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwn5re75Yqg5oiQ5YqfXCcsXG4gICAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCdcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwnZXJyb3Igc3VibWl0ISFcJylcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGhhbmRsZVBjQXZhdGFyU3VjY2VzcyAocmVzLCBmaWxlKSB7XG4gICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICBsZXQgaW1hZ2VVcmwgPSByZXMucmVzdWx0XG4gICAgICAgIHRoaXMucnVsZUZvcm0uaWNvbiA9IGltYWdlVXJsXG4gICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVBdmF0YXJVcGxvYWQgKGZpbGUpIHtcbiAgICAgIGxldCBpbWFnZU9iaiA9IHtcbiAgICAgICAgXCdpbWFnZS9qcGVnXCc6IHRydWUsXG4gICAgICAgIFwnaW1hZ2UvcG5nXCc6IHRydWUsXG4gICAgICAgIFwnaW1hZ2UvanBnXCc6IHRydWVcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlzSW1hZ2UgPSBmaWxlLnR5cGUgaW4gaW1hZ2VPYmpcbiAgICAgIGNvbnN0IGlzTHQyTSA9IGZpbGUuc2l6ZSAvIDEwMjQgLyAxMDI0IDwgMlxuICAgICAgaWYgKCFpc0ltYWdlKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoXCfkuIrkvKDlm77niYflj6rog73mmK8gSlBHIOagvOW8jyFcJylcbiAgICAgIH1cbiAgICAgIGlmICghaXNMdDJNKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoXCfkuIrkvKDlm77niYflpKflsI/kuI3og73otoXov4cgMk1CIVwnKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlzSW1hZ2UgJiYgaXNMdDJNXG4gICAgfSxcbiAgICAvKiog6I635Y+W6aKR6YGT57G75YirICoqL1xuICAgIGdldExpc3RVc2FibGVDaGFubmVsICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0TGlzdFVzYWJsZUNoYW5uZWwoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YVxuICAgICAgICBpZiAoZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gZGF0YS5yZXN1bHRcbiAgICAgICAgICByZXN1bHQuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICAgICAgbGV0IG5ld0l0ZW0gPSB7fVxuICAgICAgICAgICAgbmV3SXRlbS5sYWJlbCA9IGl0ZW0uY2hhbm5lbF9uYW1lXG4gICAgICAgICAgICBuZXdJdGVtLnZhbHVlID0gaXRlbS5jaGFubmVsaWRcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbFR5cGVMaXN0LnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOiOt+WPlui9ruaSreWbvumFjee9rueahOeov+S7tuaIluS4k+mimOS/oeaBryAqKi9cbiAgICBzZWxlY3RlZFJvdyAocm93KSB7XG4gICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSBmYWxzZVxuICAgICAgaWYgKHJvdy5hcnRpY2xlaWQpIHtcbiAgICAgICAgdGhpcy5ydWxlRm9ybS5yZWxhdGl2ZUNvbnRlbnQgPSBcJ+eov+S7ti1cJyArIHJvdy50aXRsZVxuICAgICAgICB0aGlzLmp1bXBfdHlwZSA9IDFcbiAgICAgICAgdGhpcy5hcnRpY2xlaWQgPSByb3cuYXJ0aWNsZWlkXG4gICAgICAgIHRoaXMuc3BlY2lhbGlkID0gXCdcJ1xuICAgICAgICB0aGlzLmp1bXBfdXJsID0gcm93LmFydGljbGVfdXJsXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJ1bGVGb3JtLnJlbGF0aXZlQ29udGVudCA9IFwn5LiT6aKYLVwnICsgcm93LnNwZWNpYWxfbmFtZVxuICAgICAgICB0aGlzLmp1bXBfdHlwZSA9IDJcbiAgICAgICAgdGhpcy5hcnRpY2xlaWQgPSBcJ1wnXG4gICAgICAgIHRoaXMuc3BlY2lhbGlkID0gcm93LnNwZWNpYWxpZFxuICAgICAgICB0aGlzLmp1bXBfdXJsID0gXCdcJ1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLmNpY2xlLWNvbnRyb2xsZXIge1xuICAgIG1hcmdpbi10b3A6IDQlO1xuICB9XG4gIC5jcmVhdGUgLnNvcnQgc3BhbntcbiAgICBjb2xvcjogIzkwOTA5MDtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LCIvdUJpIjpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLnBhZ2luYXRpb25bZGF0YS12LTcwMjMxYmI3XXtcbiAgLXdlYmtpdC1ib3gtcGFjazoganVzdGlmeTtcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VMb2cvc3JjL2NvbXBvbmVudHMvbWFuYWdlTG9nL2xvZ1N0YXRpc3RpY3MudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQXNRQTtFQUNBLDBCQUFBO01BQUEsdUJBQUE7VUFBQSwrQkFBQTtDQUNBIixmaWxlOiJsb2dTdGF0aXN0aWNzLnZ1ZSIsc291cmNlc0NvbnRlbnQ6WyI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJsb2ctc3RhdGlzdGljc1wiPlxuICAgIDxkaXY+XG4gICAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICAgIHRpdGxlLW5hbWU9XCLml6Xlv5fnu5/orqHnrqHnkIZcIlxuICAgICAgICBjbGFzcz1cImNpY2xlLWNvbnRyb2xsZXJcIlxuICAgICAgLz5cbiAgICAgIDxkaXYgY2xhc3M9XCJzZWFyY2gtZm9ybS1jb250YWluZXJcIj5cbiAgICAgICAgPGVsLWZvcm1cbiAgICAgICAgICA6aW5saW5lPVwidHJ1ZVwiXG4gICAgICAgICAgOm1vZGVsPVwicnVsZUZvcm1cIlxuICAgICAgICAgIGNsYXNzPVwiZGVtby1mb3JtLWlubGluZVwiPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCLmk43kvZzkurrlkZhcIj5cbiAgICAgICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgICAgICB2LW1vZGVsPVwicnVsZUZvcm0udXNlcm5hbWVcIlxuICAgICAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCLmk43kvZzkuovku7ZcIj5cbiAgICAgICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgICAgICB2LW1vZGVsPVwicnVsZUZvcm0ub3BlcmF0aW9uQ29udGVudFwiXG4gICAgICAgICAgICAgIGNsZWFyYWJsZS8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9XCLmk43kvZzlvIDlp4vml6XmnJ9cIj5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9XCJydWxlRm9ybS5zdGFydERhdGUgfCBGb3JtYXREYXRlKCd5eXl5LU1NLWRkIGhoOm1tJylcIlxuICAgICAgICAgICAgICB2LW1vZGVsPVwicnVsZUZvcm0uc3RhcnREYXRlXCJcbiAgICAgICAgICAgICAgdHlwZT1cImRhdGV0aW1lXCJcbiAgICAgICAgICAgICAgZm9ybWF0PVwieXl5eS1NTS1kZCBISDptbVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi6YCJ5oup5pel5pyfXCJcbiAgICAgICAgICAgICAgQGNoYW5nZT1cImdldExvZ0xpc3RcIi8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgc3R5bGU9XCJtYXJnaW4tbGVmdDogLTI4cHg7XCJcbiAgICAgICAgICAgIGxhYmVsPVwi5pON5L2c57uT5p2f5pel5pyfXCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPVwicnVsZUZvcm0uZW5kRGF0ZSB8IEZvcm1hdERhdGUoJ3l5eXktTU0tZGQgaGg6bW0nKVwiXG4gICAgICAgICAgICAgIHYtbW9kZWw9XCJydWxlRm9ybS5lbmREYXRlXCJcbiAgICAgICAgICAgICAgdHlwZT1cImRhdGV0aW1lXCJcbiAgICAgICAgICAgICAgZm9ybWF0PVwieXl5eS1NTS1kZCBISDptbVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi6YCJ5oup5pel5pyfXCJcbiAgICAgICAgICAgICAgQGNoYW5nZT1cImdldExvZ0xpc3RcIi8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgc3R5bGU9XCJtYXJnaW4tbGVmdDogOThweDtcIlxuICAgICAgICAgICAgQGNsaWNrPVwiZ2V0TG9nTGlzdFwiPlxuICAgICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgICA8aSBjbGFzcz1cImVsLWljb24tc2VhcmNoIGVsLWljb24tLXJpZ2h0XCIvPlxuICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICA8L2VsLWZvcm0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwidGFibGUtbGlzdFwiPlxuICAgICAgPGVsLXRhYmxlXG4gICAgICAgIHJlZj1cImNoYW5uZWxUYWJsZVwiXG4gICAgICAgIDpkYXRhPVwidGFibGVEYXRhXCJcbiAgICAgICAgc3RyaXBlXG4gICAgICAgIGNsYXNzPVwid2hvbGUtdGFibGVcIlxuICAgICAgICBtaW4taGVpZ2h0PVwiNDAwXCI+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICB2LWZvcj1cIihpdGVtLCBpbmRleCkgaW4gdGFibGVIZWFkZXJcIlxuICAgICAgICAgIDprZXk9XCJpbmRleFwiXG4gICAgICAgICAgOnByb3A9XCJpdGVtLnByb3BcIlxuICAgICAgICAgIDpsYWJlbD1cIml0ZW0ubGFiZWxcIlxuICAgICAgICAgIDp3aWR0aD1cIml0ZW0ud2lkdGhcIlxuICAgICAgICAgIDpmb3JtYXR0ZXI9XCJpdGVtLmZvcm1hdHRlclwiXG4gICAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICAgIHNob3ctb3ZlcmZsb3ctdG9vbHRpcFxuICAgICAgICAvPlxuICAgICAgPC9lbC10YWJsZT5cbiAgICAgIDxkaXYgY2xhc3M9XCJwYWdpbmF0aW9uXCI+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgICAgdi1tb2RlbD1cImJhdGNoUHJvY2Vzc1wiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIua4hemZpOaXpeW/l1wiXG4gICAgICAgICAgICBAY2hhbmdlPVwiY2xlYXJMb2dcIj5cbiAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgdi1mb3I9XCJpdGVtIGluIHByb2Nlc3NMaXN0XCJcbiAgICAgICAgICAgICAgOmtleT1cIml0ZW0udmFsdWVcIlxuICAgICAgICAgICAgICA6bGFiZWw9XCJpdGVtLmxhYmVsXCJcbiAgICAgICAgICAgICAgOnZhbHVlPVwiaXRlbS52YWx1ZVwiXG4gICAgICAgICAgICAgIDpkaXNhYmxlZD1cIml0ZW0uZGlzYWJsZWRcIi8+XG4gICAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZWwtcGFnaW5hdGlvblxuICAgICAgICAgIDp0b3RhbD1cInRvdGFsXCJcbiAgICAgICAgICA6cGFnZS1zaXplcz1cIlsxMCwgMjAsIDMwLCA0MF1cIlxuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICBsYXlvdXQ9XCJ0b3RhbCwgc2l6ZXMsIHByZXYsIHBhZ2VyLCBuZXh0XCJcbiAgICAgICAgICBAc2l6ZS1jaGFuZ2U9XCJoYW5kbGVTaXplQ2hhbmdlXCJcbiAgICAgICAgICBAY3VycmVudC1jaGFuZ2U9XCJoYW5kbGVDdXJyZW50Q2hhbmdlXCIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSAnQC9jb21wb25lbnRzL2NvbW1vbnMvY2lyY2xlVGl0bGUnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gJ0AvYXBpL2xvZ0FwaSdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlXG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBydWxlRm9ybToge1xuICAgICAgICB1c2VybmFtZTogJycsXG4gICAgICAgIG9wZXJhdGlvbkNvbnRlbnQ6ICcnLFxuICAgICAgICBzdGFydERhdGU6ICcnLFxuICAgICAgICBlbmREYXRlOiAnJ1xuICAgICAgfSxcbiAgICAgIHRhYmxlSGVhZGVyOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiAnbG9naWQnLFxuICAgICAgICAgIGxhYmVsOiAn5pel5b+X57yW5Y+3JyxcbiAgICAgICAgICB3aWR0aDogMTgwXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiAndXNlcm5hbWUnLFxuICAgICAgICAgIGxhYmVsOiAn5pON5L2c5Lq65ZGYJyxcbiAgICAgICAgICB3aWR0aDogMTIwXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiAnY3JlYXRldGltZScsXG4gICAgICAgICAgbGFiZWw6ICfmk43kvZzml6XmnJ8nLFxuICAgICAgICAgIHdpZHRoOiAxNDAsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbJ0Zvcm1hdERhdGUnXShjZWxsVmFsdWUsICd5eXl5LU1NLWRkIGhoOm1tJylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiAnaXBBZGRyZXNzJyxcbiAgICAgICAgICBsYWJlbDogJ0lQ5Zyw5Z2AJyxcbiAgICAgICAgICB3aWR0aDogMTgwXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiAnb3BlcmF0aW9uQ29udGVudCcsXG4gICAgICAgICAgbGFiZWw6ICfmk43kvZzkuovku7YnXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICB0YWJsZURhdGE6IFtdLFxuICAgICAgcGFnZU5vOiAxLFxuICAgICAgcGFnZVNpemU6IDEwLFxuICAgICAgdG90YWw6IDAsXG4gICAgICBiYXRjaFByb2Nlc3M6ICcnLFxuICAgICAgcHJvY2Vzc0xpc3Q6IFtcbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlOiAnd2VlaycsXG4gICAgICAgICAgbGFiZWw6ICfkuIDlkajkuYvliY0nXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ21vbnRoJyxcbiAgICAgICAgICBsYWJlbDogJ+S4gOS4quaciOS5i+WJjSdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnaGFsZlllYXInLFxuICAgICAgICAgIGxhYmVsOiAn5Y2K5bm05LmL5YmNJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICd5ZWFyJyxcbiAgICAgICAgICBsYWJlbDogJ+S4gOW5tOS5i+WJjSdcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICAncnVsZUZvcm0udXNlcm5hbWUnICh2YWwpIHtcbiAgICAgIHRoaXMuZ2V0TG9nTGlzdCgpXG4gICAgfSxcbiAgICAncnVsZUZvcm0ub3BlcmF0aW9uQ29udGVudCcgKHZhbCkge1xuICAgICAgdGhpcy5nZXRMb2dMaXN0KClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIC8qKiDojrflj5bml6Xlv5fliJfooaggKiovXG4gICAgdGhpcy5nZXRMb2dMaXN0KClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldExvZ0xpc3QgKCkge1xuICAgICAgdGhpcy4kb3B0aW9ucy5maWx0ZXJzWydzd2FwVGltZSddKHRoaXMucnVsZUZvcm0pXG4gICAgICBsZXQgdGltZVN0YXJ0ID0gdGhpcy5ydWxlRm9ybS5zdGFydERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLnJ1bGVGb3JtLnN0YXJ0RGF0ZSkuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgbGV0IHRpbWVFbmQgPSB0aGlzLnJ1bGVGb3JtLmVuZERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLnJ1bGVGb3JtLmVuZERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIGxldCBvcHRpb24gPSB7XG4gICAgICAgICdwYWdlTm8nOiB0aGlzLnBhZ2VObyxcbiAgICAgICAgJ3BhZ2VTaXplJzogdGhpcy5wYWdlU2l6ZSxcbiAgICAgICAgJ3VzZXJuYW1lJzogdGhpcy5ydWxlRm9ybS51c2VybmFtZSxcbiAgICAgICAgJ29wZXJhdGlvbkNvbnRlbnQnOiB0aGlzLnJ1bGVGb3JtLm9wZXJhdGlvbkNvbnRlbnQsXG4gICAgICAgICd0aW1lU3RhcnQnOiB0aW1lU3RhcnQsXG4gICAgICAgICd0aW1lRW5kJzogdGltZUVuZFxuICAgICAgfVxuICAgICAgQWN0aW9ucy5nZXRMb2dMaXN0KG9wdGlvbikudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGxpc3REYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy50YWJsZURhdGEgPSBsaXN0RGF0YS5saXN0XG4gICAgICAgICAgdGhpcy50b3RhbCA9IGxpc3REYXRhLnRvdGFsXG4gICAgICAgICAgdGhpcy5wYWdlTm8gPSBsaXN0RGF0YS5wYWdlTnVtXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBoYW5kbGVTaXplQ2hhbmdlIChwYWdlU2l6ZSkge1xuICAgICAgdGhpcy5wYWdlU2l6ZSA9IHBhZ2VTaXplXG4gICAgICB0aGlzLmdldExvZ0xpc3QoKVxuICAgIH0sXG4gICAgaGFuZGxlQ3VycmVudENoYW5nZSAocGFnZUluZGV4KSB7XG4gICAgICB0aGlzLnBhZ2VObyA9IHBhZ2VJbmRleFxuICAgICAgdGhpcy5nZXRMb2dMaXN0KClcbiAgICB9LFxuICAgIGNsZWFyTG9nICh2YWwpIHtcbiAgICAgIHRoaXMuJGNvbmZpcm0oJ+aYr+WQpua4hemZpOaXpeW/lz8nLCAn5o+Q56S6Jywge1xuICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+ehruWumicsXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognLFxuICAgICAgICB0eXBlOiAnd2FybmluZydcbiAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICBzd2l0Y2ggKHZhbCkge1xuICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgdGhpcy5kZWxldGVMb2coe1xuICAgICAgICAgICAgICAnZGF5cyc6IDcsXG4gICAgICAgICAgICAgICdtb250aHMnOiBudWxsLFxuICAgICAgICAgICAgICAneWVhcnMnOiBudWxsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZUxvZyh7XG4gICAgICAgICAgICAgICdkYXlzJzogbnVsbCxcbiAgICAgICAgICAgICAgJ21vbnRocyc6IDEsXG4gICAgICAgICAgICAgICd5ZWFycyc6IG51bGxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ2hhbGZZZWFyJzpcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlTG9nKHtcbiAgICAgICAgICAgICAgJ2RheXMnOiBudWxsLFxuICAgICAgICAgICAgICAnbW9udGhzJzogNixcbiAgICAgICAgICAgICAgJ3llYXJzJzogbnVsbFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZUxvZyh7XG4gICAgICAgICAgICAgICdkYXlzJzogbnVsbCxcbiAgICAgICAgICAgICAgJ21vbnRocyc6IG51bGwsXG4gICAgICAgICAgICAgICd5ZWFycyc6IDFcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICB9KVxuICAgIH0sXG4gICAgZGVsZXRlTG9nIChvYmopIHtcbiAgICAgIEFjdGlvbnMuZGVsZXRlTG9nKFxuICAgICAgICBvYmpcbiAgICAgICkudGhlbihyZXMgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgdGhpcy4kbm90aWZ5KHtcbiAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgIHRpdGxlOiAn5o+Q56S6JyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICfmuIXpmaTmiJDlip8hJ1xuICAgICAgICAgIH0pXG4gICAgICAgICAgdGhpcy5nZXRMb2dMaXN0KClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5wYWdpbmF0aW9ue1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgfVxuPC9zdHlsZT5cbjxzdHlsZT5cbiAgLmxvZy1zdGF0aXN0aWNzIC5lbC1mb3JtLS1pbmxpbmUgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gICAgd2lkdGg6IDYwJTtcbiAgfVxuICAubG9nLXN0YXRpc3RpY3MgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtIHtcbiAgICB3aWR0aDogMzElO1xuICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgfVxuICAucGFnaW5hdGlvbiAuZWwtc2VsZWN0e1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICB9XG48L3N0eWxlPlxuIl0sc291cmNlUm9vdDoiIn1dKX0sMDpmdW5jdGlvbihlLG4sdCl7dCgiTkhuciIpLHQoIjB2VDgiKSxlLmV4cG9ydHM9dCgick16ZCIpfSwiMG00QiI6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoImwyclUiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiMzI0ZDc1NGIiLGEsITEse30pfSwiMHZUOCI6ZnVuY3Rpb24oZSxuKXt9LCIxbUFyIjpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuYnRuLWNvbnRhaW5lciAuZWwtYnV0dG9ue1xuICBwYWRkaW5nOiAxMnB4IDEwcHg7XG59XG4uc2VhcmNoLWZvcm0tY29udGFpbmVyIC5idG4tY29udGFpbmVyIC5lbC1pY29uLS1yaWdodHtcbiAgbWFyZ2luOiAwO1xufVxuLmN1c3RvbS1kaWFsb2cgLmVsLWRpYWxvZ19faGVhZGVye1xuICAvKnBhZGRpbmc6IDA7Ki9cbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMTkyLDE5MCwyNTUsMSk7XG59XG4uZWwtdG9vbHRpcF9fcG9wcGVye1xuICBtYXgtd2lkdGg6IDMwMHB4O1xufVxuLmNvb21tZW50LWxpc3QgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgd2lkdGg6IDY1JTtcbn1cbi5jb29tbWVudC1saXN0IC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmVsLWZvcm0taXRlbSB7XG4gIHdpZHRoOiAyMyU7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZUNvbW1lbnQvc3JjL2NvbXBvbmVudHMvbWFuYWdlQ29tbWVudC9jb21tZW50TGlzdC52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBOHdCQTtFQUNBLG1CQUFBO0NBQ0E7QUFDQTtFQUNBLFVBQUE7Q0FDQTtBQUNBO0VBQ0EsZUFBQTtFQUNBLDZDQUFBO0NBQ0E7QUFDQTtFQUNBLGlCQUFBO0NBQ0E7QUFDQTtFQUNBLFdBQUE7Q0FDQTtBQUNBO0VBQ0EsV0FBQTtDQUNBIixmaWxlOiJjb21tZW50TGlzdC52dWUiLHNvdXJjZXNDb250ZW50OlsiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiY29vbW1lbnQtbGlzdFwiPlxuICAgIDxkaXY+XG4gICAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICAgIHRpdGxlLW5hbWU9XCLor4TorrrnrqHnkIZcIlxuICAgICAgICBjbGFzcz1cImNpY2xlLWNvbnRyb2xsZXJcIlxuICAgICAgLz5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb21tZW50LXRvcC1pbmZvXCI+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICA6Y2xhc3M9XCJbJ2NvbW1lbnQtaW5mby1pdGVtJywgY291bnRBdWRpdFdhaXQgPyAnY29tbWVudC1hY3RpdmUtYmcnOiAnJ11cIlxuICAgICAgICAgIEBjbGljaz1cImNoYW5nZUNvbW1lbnQoJ2NvdW50QXVkaXRXYWl0JylcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiYm94XCI+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICA6Y2xhc3M9XCJbJ2NvbW1lbnQtaWNvbi1jb250YWluZXInLCBjb3VudEF1ZGl0V2FpdCA/ICdpY29uLWNvbnRhaW5lci1iZyc6ICdjb21tZW50LXNlYy1iZyddXCI+XG4gICAgICAgICAgICAgIDxpXG4gICAgICAgICAgICAgICAgOnN0eWxlPVwieydjb2xvcic6IGNvdW50QXVkaXRXYWl0ID8gJyM2OTRFRkYnOiAnJ31cIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwiaWNvbmZvbnQgaWNvbi1kYWlzaGVuaGVcIi8+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNvbW1lbnQtZGF0YVwiPlxuICAgICAgICAgICAgICA8c3BhbiA6c3R5bGU9XCJ7J2NvbG9yJzogY291bnRBdWRpdFdhaXQgPyAnd2hpdGUnOiAncmdiYSg3MSw3MSw3MSwxKSd9XCI+e3sgY291bnRBdWRpdFdhaXROdW0gfX08L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuIDpzdHlsZT1cInsnY29sb3InOiBjb3VudEF1ZGl0V2FpdCA/ICd3aGl0ZSc6ICdyZ2JhKDcxLDcxLDcxLDEpJ31cIj7lvoXlrqHmoLg8L3NwYW4+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgOmNsYXNzPVwiWydjb21tZW50LWluZm8taXRlbScsIGNvdW50QXVkaXRQYXNzID8gJ2NvbW1lbnQtYWN0aXZlLWJnJzogJyddXCJcbiAgICAgICAgICBAY2xpY2s9XCJjaGFuZ2VDb21tZW50KCdjb3VudEF1ZGl0UGFzcycpXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJveFwiPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgOmNsYXNzPVwiWydjb21tZW50LWljb24tY29udGFpbmVyJywgY291bnRBdWRpdFBhc3MgPyAnaWNvbi1jb250YWluZXItYmcnOiAnY29tbWVudC10aHItYmcnXVwiPlxuICAgICAgICAgICAgICA8aVxuICAgICAgICAgICAgICAgIDpzdHlsZT1cInsnY29sb3InOiBjb3VudEF1ZGl0UGFzcyA/ICcjNjk0RUZGJzogJyd9XCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImljb25mb250IGljb24tYXVkaXRcIi8+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNvbW1lbnQtZGF0YVwiPlxuICAgICAgICAgICAgICA8c3BhbiA6c3R5bGU9XCJ7J2NvbG9yJzogY291bnRBdWRpdFBhc3MgPyAnd2hpdGUnOiAncmdiYSg3MSw3MSw3MSwxKSd9XCI+e3sgY291bnRBdWRpdFBhc3NOdW0gfX08L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuIDpzdHlsZT1cInsnY29sb3InOiBjb3VudEF1ZGl0UGFzcyA/ICd3aGl0ZSc6ICdyZ2JhKDcxLDcxLDcxLDEpJ31cIj7lt7LpgJrov4c8L3NwYW4+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgOmNsYXNzPVwiWydjb21tZW50LWluZm8taXRlbScsIGNvdW50QXVkaXROb3RQYXNzID8gJ2NvbW1lbnQtYWN0aXZlLWJnJzogJyddXCJcbiAgICAgICAgICBAY2xpY2s9XCJjaGFuZ2VDb21tZW50KCdjb3VudEF1ZGl0Tm90UGFzcycpXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJveFwiPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgOmNsYXNzPVwiWydjb21tZW50LWljb24tY29udGFpbmVyJywgY291bnRBdWRpdE5vdFBhc3MgPyAnaWNvbi1jb250YWluZXItYmcnOiAnY29tbWVudC1mb3VyLWJnJ11cIj5cbiAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICA6c3R5bGU9XCJ7J2NvbG9yJzogY291bnRBdWRpdE5vdFBhc3MgPyAnIzY5NEVGRic6ICcnfVwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJpY29uZm9udCBpY29uLXlpc2hhbmNodVwiLz5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY29tbWVudC1kYXRhXCI+XG4gICAgICAgICAgICAgIDxzcGFuIDpzdHlsZT1cInsnY29sb3InOiBjb3VudEF1ZGl0Tm90UGFzcyA/ICd3aGl0ZSc6ICdyZ2JhKDcxLDcxLDcxLDEpJ31cIj57eyBjb3VudEF1ZGl0Tm90UGFzc051bSB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4gOnN0eWxlPVwieydjb2xvcic6IGNvdW50QXVkaXROb3RQYXNzID8gJ3doaXRlJzogJ3JnYmEoNzEsNzEsNzEsMSknfVwiPuacqumAmui/hzwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICA6Y2xhc3M9XCJbJ2NvbW1lbnQtaW5mby1pdGVtJywgY291bnRBdWRpdCA/ICdjb21tZW50LWFjdGl2ZS1iZyc6ICcnXVwiXG4gICAgICAgICAgQGNsaWNrPVwiY2hhbmdlQ29tbWVudCgnY291bnRBdWRpdCcpXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJveFwiPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgOmNsYXNzPVwiWydjb21tZW50LWljb24tY29udGFpbmVyJywgY291bnRBdWRpdCA/ICdpY29uLWNvbnRhaW5lci1iZyc6ICdjb21tZW50LWZpcnN0LWJnJ11cIj5cbiAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICA6c3R5bGU9XCJ7J2NvbG9yJzogY291bnRBdWRpdCA/ICcjNjk0RUZGJzogJyd9XCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImljb25mb250IGljb24tc3F1YXJlLXNvbGlkXCIvPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjb21tZW50LWRhdGFcIj5cbiAgICAgICAgICAgICAgPHNwYW4gOnN0eWxlPVwieydjb2xvcic6IGNvdW50QXVkaXQgPyAnd2hpdGUnOiAncmdiYSg3MSw3MSw3MSwxKSd9XCI+e3sgY291bnRBdWRpdE51bSB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4gOnN0eWxlPVwieydjb2xvcic6IGNvdW50QXVkaXQgPyAnd2hpdGUnOiAncmdiYSg3MSw3MSw3MSwxKSd9XCI+5YWo6YOoPC9zcGFuPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInNlYXJjaC1mb3JtLWNvbnRhaW5lclwiPlxuICAgICAgICA8ZWwtZm9ybVxuICAgICAgICAgIDppbmxpbmU9XCJ0cnVlXCJcbiAgICAgICAgICA6bW9kZWw9XCJjb21tZW50XCJcbiAgICAgICAgICBjbGFzcz1cImRlbW8tZm9ybS1pbmxpbmVcIj5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPVwi55So5oi35ZCNXCI+XG4gICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgdi1tb2RlbD1cImNvbW1lbnQudXNlcl9uaWNrbmFtZVwiXG4gICAgICAgICAgICAgIGNsZWFyYWJsZS8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cIuazqOWGjOaJi+aculwiPlxuICAgICAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgICAgIHYtbW9kZWw9XCJjb21tZW50LnVzZXJfcGhvbmVcIlxuICAgICAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCLmoIfpophcIj5cbiAgICAgICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgICAgICB2LW1vZGVsPVwiY29tbWVudC50aXRsZVwiXG4gICAgICAgICAgICAgIGNsZWFyYWJsZS8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9XCLmqKHlnZdcIlxuICAgICAgICAgICAgY2xhc3M9XCJzZWFyY2gtbGVmdFwiPlxuICAgICAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgICAgICB2LW1vZGVsPVwiY29tbWVudC50eXBlXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJcIlxuICAgICAgICAgICAgICBAY2hhbmdlPVwiZ2V0Q29tbWVudExpc3RcIj5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIHZhbHVlPVwiXCJcbiAgICAgICAgICAgICAgICBsYWJlbD1cIuWFqOmDqFwiLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT1cIjFcIlxuICAgICAgICAgICAgICAgIGxhYmVsPVwi6LWE6K6vXCIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPVwiMlwiXG4gICAgICAgICAgICAgICAgbGFiZWw9XCLngrnmkq1cIi8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9XCIzXCJcbiAgICAgICAgICAgICAgICBsYWJlbD1cIuebtOaSrVwiLz5cbiAgICAgICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPVwi6K+E6K665pe26Ze0XCJcbiAgICAgICAgICAgIHN0eWxlPVwicG9zaXRpb246IHJlbGF0aXZlO2xlZnQ6IC0xNXB4O1wiPlxuICAgICAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgICAgIDp0aXRsZT1cImNvbW1lbnQuc3RhcnREYXRlIHwgRm9ybWF0RGF0ZSgneXl5eS1NTS1kZCBoaDptbScpXCJcbiAgICAgICAgICAgICAgdi1tb2RlbD1cImNvbW1lbnQuc3RhcnREYXRlXCJcbiAgICAgICAgICAgICAgdHlwZT1cImRhdGV0aW1lXCJcbiAgICAgICAgICAgICAgZm9ybWF0PVwieXl5eS1NTS1kZCBISDptbVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi6YCJ5oup5pe26Ze0XCJcbiAgICAgICAgICAgICAgQGNoYW5nZT1cImdldENvbW1lbnRMaXN0XCIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPVwi57uT5p2f5pe26Ze0XCJcbiAgICAgICAgICAgIGNsYXNzPVwiZGF0ZS1sZWZ0XCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPVwiY29tbWVudC5lbmREYXRlIHwgRm9ybWF0RGF0ZSgneXl5eS1NTS1kZCBoaDptbScpXCJcbiAgICAgICAgICAgICAgdi1tb2RlbD1cImNvbW1lbnQuZW5kRGF0ZVwiXG4gICAgICAgICAgICAgIHR5cGU9XCJkYXRldGltZVwiXG4gICAgICAgICAgICAgIGZvcm1hdD1cInl5eXktTU0tZGQgSEg6bW1cIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIumAieaLqeaXtumXtFwiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9XCJnZXRDb21tZW50TGlzdFwiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICBzdHlsZT1cIm1hcmdpbi1sZWZ0OiAxMnB4XCJcbiAgICAgICAgICAgIEBjbGljaz1cImdldENvbW1lbnRMaXN0XCI+XG4gICAgICAgICAgICDmn6Xor6JcbiAgICAgICAgICAgIDxpIGNsYXNzPVwiZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHRcIi8+XG4gICAgICAgICAgPC9lbC1idXR0b24+XG4gICAgICAgIDwvZWwtZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ0YWJsZS1saXN0XCI+XG4gICAgICA8ZWwtdGFibGVcbiAgICAgICAgcmVmPVwiY2hhbm5lbFRhYmxlXCJcbiAgICAgICAgOmRhdGE9XCJ0YWJsZURhdGFcIlxuICAgICAgICBzdHJpcGVcbiAgICAgICAgY2xhc3M9XCJ3aG9sZS10YWJsZVwiXG4gICAgICAgIG1pbi1oZWlnaHQ9XCI0MDBcIlxuICAgICAgICBAc2VsZWN0LWFsbD1cInNlbGVjdEFsbFwiXG4gICAgICAgIEBzZWxlY3Rpb24tY2hhbmdlPVwic2VsZWN0aW9uQ2hhbmdlXCI+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICB0eXBlPVwic2VsZWN0aW9uXCJcbiAgICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgICAgd2lkdGg9XCI1NVwiLz5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIHYtZm9yPVwiKGl0ZW0sIGluZGV4KSBpbiB0YWJsZUhlYWRlclwiXG4gICAgICAgICAgOmtleT1cImluZGV4XCJcbiAgICAgICAgICA6cHJvcD1cIml0ZW0ucHJvcFwiXG4gICAgICAgICAgOmxhYmVsPVwiaXRlbS5sYWJlbFwiXG4gICAgICAgICAgOndpZHRoPVwiaXRlbS53aWR0aFwiXG4gICAgICAgICAgOmZvcm1hdHRlcj1cIml0ZW0uZm9ybWF0dGVyXCJcbiAgICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgICAgZml4ZWRcbiAgICAgICAgICBzaG93LW92ZXJmbG93LXRvb2x0aXBcbiAgICAgICAgLz5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGxhYmVsPVwi572u6aG254q25oCBXCJcbiAgICAgICAgICBhbGlnbj1cImNlbnRlclwiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPVwic2NvcGVcIj5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIHYtaWY9XCIhc2NvcGUucm93LnRvcFwiXG4gICAgICAgICAgICAgIGNsYXNzPVwiaXRlbVwiXG4gICAgICAgICAgICAgIGVmZmVjdD1cImRhcmtcIlxuICAgICAgICAgICAgICBjb250ZW50PVwi54K55Ye7572u6aG2XCJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PVwidG9wXCI+XG4gICAgICAgICAgICAgIDxlbC10YWdcbiAgICAgICAgICAgICAgICBzaXplPVwibWluaVwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJzZXRQb2ludGVyXCJcbiAgICAgICAgICAgICAgICBzdHlsZT1cIndpZHRoOjYwcHg7XCJcbiAgICAgICAgICAgICAgICBAY2xpY2submF0aXZlPVwic2V0TWFudVVuVG9wKHNjb3BlLnJvdylcIj5cbiAgICAgICAgICAgICAgICDnva7pobZcbiAgICAgICAgICAgICAgPC9lbC10YWc+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICB2LWVsc2VcbiAgICAgICAgICAgICAgY2xhc3M9XCJpdGVtXCJcbiAgICAgICAgICAgICAgZWZmZWN0PVwiZGFya1wiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9XCLngrnlh7vlj5bmtojnva7pobZcIlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9XCJ0b3BcIj5cbiAgICAgICAgICAgICAgPGVsLXRhZ1xuICAgICAgICAgICAgICAgIHNpemU9XCJtaW5pXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cInNldFBvaW50ZXJcIlxuICAgICAgICAgICAgICAgIHN0eWxlPVwid2lkdGg6NjBweDtjb2xvcjojNjk0ZWZmXCJcbiAgICAgICAgICAgICAgICBAY2xpY2submF0aXZlPVwic2V0TWFudVRvcChzY29wZS5yb3cpXCI+XG4gICAgICAgICAgICAgICAg5Y+W5raI572u6aG2XG4gICAgICAgICAgICAgIDwvZWwtdGFnPlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgbGFiZWw9XCLmk43kvZxcIlxuICAgICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgICB3aWR0aD1cIjM1MFwiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPVwic2NvcGVcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWFudS1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjbGFzcz1cIm1hbnUgZGVsZXRlLWFjdGl2ZVwiXG4gICAgICAgICAgICAgICAgQGNsaWNrPVwiYXVkaXQoc2NvcGUucm93KVwiPlxuICAgICAgICAgICAgICAgIHt7IHNjb3BlLnJvdy5hdWRpdCA9PT0gMCA/ICflrqHmoLgnOiAn5bey5a6h5qC4JyB9fVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgOmNsYXNzPVwiWydtYW51JywgJ2RlbGV0ZS1hY3RpdmUnXVwiXG4gICAgICAgICAgICAgICAgQGNsaWNrPVwiZGVsZXRlQ29tbWVudHMoc2NvcGUucm93KVwiPlxuICAgICAgICAgICAgICAgIOWIoOmZpFxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgOmNsYXNzPVwiWydtYW51JywgJ2RlbGV0ZS1hY3RpdmUnXVwiXG4gICAgICAgICAgICAgICAgQGNsaWNrPVwiZm9yYmlkZGVuVXNlcihzY29wZS5yb3cpXCI+XG4gICAgICAgICAgICAgICAge3sgc2NvcGUucm93LnVzZXJfZm9yYmlkZGVuID8gJ+WPlua2iOemgeiogCc6ICfnpoHoqIAnIH19XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjbGFzcz1cIm1hbnUgY29tbWVudC1kZXRhaWxcIlxuICAgICAgICAgICAgICAgIEBjbGljaz1cImxvb2tDb21tZW50KHNjb3BlLnJvdylcIj5cbiAgICAgICAgICAgICAgICDor4Torrrmn6XnnItcbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzPVwibWFudSBjb21tZW50LWRldGFpbFwiXG4gICAgICAgICAgICAgICAgQGNsaWNrPVwiYXVkaXRfb3BpbmlvbihzY29wZS5yb3cpXCI+XG4gICAgICAgICAgICAgICAg5a6h5qC45oSP6KeBXG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgIDwvZWwtdGFibGU+XG4gICAgICA8ZGl2IGNsYXNzPVwicGFnaW5hdGlvblwiPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxlbC1jaGVja2JveFxuICAgICAgICAgICAgdi1tb2RlbD1cInNlbGZTZWxlY3RBbGxcIlxuICAgICAgICAgICAgQGNoYW5nZT1cInRvZ2dsZUFsbFNlbGVjdGlvblwiPlxuICAgICAgICAgICAg5YWo6YCJXG4gICAgICAgICAgPC9lbC1jaGVja2JveD5cbiAgICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgICB2LW1vZGVsPVwiYmF0Y2hQcm9jZXNzXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi6K+36YCJ5oupXCI+XG4gICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgIHYtZm9yPVwiaXRlbSBpbiBwcm9jZXNzTGlzdFwiXG4gICAgICAgICAgICAgIDprZXk9XCJpdGVtLnZhbHVlXCJcbiAgICAgICAgICAgICAgOmxhYmVsPVwiaXRlbS5sYWJlbFwiXG4gICAgICAgICAgICAgIDp2YWx1ZT1cIml0ZW0udmFsdWVcIlxuICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XCJpdGVtLmRpc2FibGVkXCIvPlxuICAgICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgIEBjbGljaz1cImRlbGV0ZU1hbnlDb21tZW50XCI+56Gu5a6aPC9lbC1idXR0b24+XG4gICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgdi1zaG93PVwiMSA9PT0gMlwiXG4gICAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiPuWvvOWHuuaVsOaNrjwvZWwtYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGVsLXBhZ2luYXRpb25cbiAgICAgICAgICA6dG90YWw9XCJ0b3RhbFwiXG4gICAgICAgICAgOnBhZ2Utc2l6ZXM9XCJbMTAsIDIwLCAzMCwgNDBdXCJcbiAgICAgICAgICBiYWNrZ3JvdW5kXG4gICAgICAgICAgbGF5b3V0PVwidG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dFwiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPVwiaGFuZGxlU2l6ZUNoYW5nZVwiXG4gICAgICAgICAgQGN1cnJlbnQtY2hhbmdlPVwiaGFuZGxlQ3VycmVudENoYW5nZVwiLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxlbC1kaWFsb2dcbiAgICAgIDp2aXNpYmxlLnN5bmM9XCJkaWFsb2dWaXNpYmxlXCJcbiAgICAgIGN1c3RvbS1jbGFzcz1cImN1c3RvbS1kaWFsb2dcIlxuICAgICAgdGl0bGU9XCLlrqHmoLhcIlxuICAgICAgd2lkdGg9XCIzMCVcIlxuICAgICAgQGNsb3NlPVwiY2xvc2VEaWFsb2dcIj5cbiAgICAgIDxkaXZcbiAgICAgICAgOmlzPVwiY29tcG9uZW50TmFtZVwiXG4gICAgICAgIDpjb21tZW50aWQ9XCJjb21tZW50aWRcIlxuICAgICAgICBAY2xvc2UtZGlhbG9nPVwiY2xvc2VEaWFsb2dcIi8+XG4gICAgPC9lbC1kaWFsb2c+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSAnQC9jb21wb25lbnRzL2NvbW1vbnMvY2lyY2xlVGl0bGUnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gJ0AvYXBpL2NvbW1lbnRBcGknXG5pbXBvcnQgQXVkaXQgZnJvbSAnLi9hdWRpdCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlLFxuICAgIEF1ZGl0XG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb21tZW50OiB7XG4gICAgICAgIHVzZXJfbmlja25hbWU6ICcnLFxuICAgICAgICB0eXBlOiAnJyxcbiAgICAgICAgdXNlcl9waG9uZTogJycsXG4gICAgICAgIHN0YXJ0RGF0ZTogJycsXG4gICAgICAgIGVuZERhdGU6ICcnLFxuICAgICAgICB0aXRsZTogJydcbiAgICAgIH0sXG4gICAgICBjbGlja0NlbGxJbmRleDogLTEsXG4gICAgICB0YWJsZUhlYWRlcjogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogJ3VzZXJfcGhvbmUnLFxuICAgICAgICAgIGxhYmVsOiAn55So5oi35L+h5oGvJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxkaXY+PHA+55So5oi35ZCNOntyb3cudXNlcl9uaWNrbmFtZX08L3A+PHA+55S16K+dOntjZWxsVmFsdWV9PC9wPjwvZGl2PlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6ICd0aXRsZScsXG4gICAgICAgICAgbGFiZWw6ICfmupDlhoXlrrknLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgbW9kdWxlID0gJydcbiAgICAgICAgICAgIGlmIChyb3cudHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgICBtb2R1bGUgPSAn6LWE6K6vJ1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyb3cudHlwZSA9PT0gMikge1xuICAgICAgICAgICAgICBtb2R1bGUgPSAn54K55pKtJ1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbW9kdWxlID0gJ+ebtOaSrSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiA8ZGl2PjxwPuaooeWdlzp7bW9kdWxlfTwvcD48cD7moIfpopg6e2NlbGxWYWx1ZX08L3A+PC9kaXY+XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogJ2NvbW1lbnRfY29udGVudCcsXG4gICAgICAgICAgbGFiZWw6ICfor4Tku7flhoXlrrknXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiAnY3JlYXRldGltZScsXG4gICAgICAgICAgbGFiZWw6ICfor4Torrrml6XmnJ8nLFxuICAgICAgICAgIHdpZHRoOiAyMDAsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbJ0Zvcm1hdERhdGUnXShjZWxsVmFsdWUsICd5eXl5LU1NLWRkIGhoOm1tJylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiAnYXVkaXQnLFxuICAgICAgICAgIGxhYmVsOiAn54q25oCBJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChjZWxsVmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuICflvoXlrqHmoLgnXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNlbGxWYWx1ZSA9PT0gMSkge1xuICAgICAgICAgICAgICByZXR1cm4gJ+W3sumAmui/hydcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2VsbFZhbHVlID09PSAyKSB7XG4gICAgICAgICAgICAgIHJldHVybiAn5pyq6YCa6L+HJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIHRhYmxlRGF0YTogW10sXG4gICAgICBiYXRjaFByb2Nlc3M6IDEsXG4gICAgICBwcm9jZXNzTGlzdDogW1xuICAgICAgICB7XG4gICAgICAgICAgdmFsdWU6IDEsXG4gICAgICAgICAgbGFiZWw6ICfliKDpmaQnXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBpbmRleDogLTEsXG4gICAgICBwYWdlTm86IDEsXG4gICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICB0b3RhbDogMCxcbiAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlLFxuICAgICAgY29tcG9uZW50TmFtZTogJycsXG4gICAgICBzZWxmU2VsZWN0QWxsOiBmYWxzZSwgLy8g6Ieq5a6a5LmJ55qE5YWo6YCJXG4gICAgICBjb3VudEF1ZGl0V2FpdDogdHJ1ZSxcbiAgICAgIGNvdW50QXVkaXRQYXNzOiBmYWxzZSxcbiAgICAgIGNvdW50QXVkaXROb3RQYXNzOiBmYWxzZSxcbiAgICAgIGNvdW50QXVkaXQ6IGZhbHNlLFxuICAgICAgY291bnRBdWRpdFdhaXROdW06IDAsXG4gICAgICBjb3VudEF1ZGl0UGFzc051bTogMCxcbiAgICAgIGNvdW50QXVkaXROb3RQYXNzTnVtOiAwLFxuICAgICAgY291bnRBdWRpdE51bTogMCxcbiAgICAgIGNvbW1lbnRpZDogJycsXG4gICAgICBjb21tZW50TGlzdDogW10sIC8vIOaJuemHj+WIoOmZpOivhOiuuuaJgOeUqOeahOWuueWZqFxuICAgICAgc2VsZWN0ZWRDb21tZW50SW5mbzoge31cbiAgICB9XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgc2hvd051bGxUYWcgKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgaWYgKCFhcnIpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGVsc2UgaWYgKGFyci5sZW5ndGggPD0gMCkge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgJ2NvbW1lbnQudXNlcl9uaWNrbmFtZScgKCkge1xuICAgICAgdGhpcy5nZXRDb21tZW50TGlzdCgpXG4gICAgfSxcbiAgICAnY29tbWVudC51c2VyX3Bob25lJyAoKSB7XG4gICAgICB0aGlzLmdldENvbW1lbnRMaXN0KClcbiAgICB9LFxuICAgICdjb21tZW50LnRpdGxlJyAoKSB7XG4gICAgICB0aGlzLmdldENvbW1lbnRMaXN0KClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuZ2V0Q291bnRDb21tZW50cygpXG4gICAgdGhpcy5nZXRDb21tZW50TGlzdCgpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKiog6I635Y+W6K+E6K665oC75pWw77yI5YWo6YOo77yM5bey6YCa6L+H77yM5pyq6YCa6L+H77yM5b6F5a6h5qC477yJICoqL1xuICAgIGdldENvdW50Q29tbWVudHMgKCkge1xuICAgICAgQWN0aW9ucy5jb3VudENvbW1lbnRzKCkudGhlbihyZXMgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICB0aGlzLmNvdW50QXVkaXRXYWl0TnVtID0gZGF0YS5jb3VudEF1ZGl0V2FpdFxuICAgICAgICAgIHRoaXMuY291bnRBdWRpdFBhc3NOdW0gPSBkYXRhLmNvdW50QXVkaXRQYXNzXG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0Tm90UGFzc051bSA9IGRhdGEuY291bnRBdWRpdE5vdFBhc3NcbiAgICAgICAgICB0aGlzLmNvdW50QXVkaXROdW0gPSBkYXRhLmNvdW50QXVkaXRcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDlvoXlrqHmoLjnmoTor4Torrrngrnlh7vop6blj5Hkuovku7YgKiovXG4gICAgY2hhbmdlQ29tbWVudCAoZXZlbnQpIHtcbiAgICAgIHN3aXRjaCAoZXZlbnQpIHtcbiAgICAgICAgY2FzZSAnY291bnRBdWRpdFdhaXQnOlxuICAgICAgICAgIHRoaXMuY291bnRBdWRpdFdhaXQgPSB0cnVlXG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0UGFzcyA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0Tm90UGFzcyA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0ID0gZmFsc2VcbiAgICAgICAgICB0aGlzLmdldENvbW1lbnRMaXN0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdjb3VudEF1ZGl0UGFzcyc6XG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0V2FpdCA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0UGFzcyA9IHRydWVcbiAgICAgICAgICB0aGlzLmNvdW50QXVkaXROb3RQYXNzID0gZmFsc2VcbiAgICAgICAgICB0aGlzLmNvdW50QXVkaXQgPSBmYWxzZVxuICAgICAgICAgIHRoaXMuZ2V0Q29tbWVudExpc3QoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2NvdW50QXVkaXROb3RQYXNzJzpcbiAgICAgICAgICB0aGlzLmNvdW50QXVkaXRXYWl0ID0gZmFsc2VcbiAgICAgICAgICB0aGlzLmNvdW50QXVkaXRQYXNzID0gZmFsc2VcbiAgICAgICAgICB0aGlzLmNvdW50QXVkaXROb3RQYXNzID0gdHJ1ZVxuICAgICAgICAgIHRoaXMuY291bnRBdWRpdCA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5nZXRDb21tZW50TGlzdCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnY291bnRBdWRpdCc6XG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0V2FpdCA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0UGFzcyA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0Tm90UGFzcyA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0ID0gdHJ1ZVxuICAgICAgICAgIHRoaXMuZ2V0Q29tbWVudExpc3QoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog6I635Y+W6K+E6K665YiX6KGoICoqL1xuICAgIGdldENvbW1lbnRMaXN0ICgpIHtcbiAgICAgIGxldCBhdWRpdCA9ICcnXG4gICAgICBhdWRpdCA9IHRoaXMuY291bnRBdWRpdFdhaXQgPyAwIDogYXVkaXRcbiAgICAgIGF1ZGl0ID0gdGhpcy5jb3VudEF1ZGl0UGFzcyA/IDEgOiBhdWRpdFxuICAgICAgYXVkaXQgPSB0aGlzLmNvdW50QXVkaXROb3RQYXNzID8gMiA6IGF1ZGl0XG4gICAgICB0aGlzLiRvcHRpb25zLmZpbHRlcnNbJ3N3YXBUaW1lJ10odGhpcy5jb21tZW50KVxuICAgICAgbGV0IHRpbWVTdGFydCA9IHRoaXMuY29tbWVudC5zdGFydERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLmNvbW1lbnQuc3RhcnREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBsZXQgdGltZUVuZCA9IHRoaXMuY29tbWVudC5lbmREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5jb21tZW50LmVuZERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIEFjdGlvbnMuZ2V0Q29tbWVudExpc3Qoe1xuICAgICAgICAncGFnZU5vJzogdGhpcy5wYWdlTm8sXG4gICAgICAgICdwYWdlU2l6ZSc6IHRoaXMucGFnZVNpemUsXG4gICAgICAgICd1c2VyX25pY2tuYW1lJzogdGhpcy5jb21tZW50LnVzZXJfbmlja25hbWUsXG4gICAgICAgICd1c2VyX3Bob25lJzogdGhpcy5jb21tZW50LnVzZXJfcGhvbmUsXG4gICAgICAgICd0eXBlJzogdGhpcy5jb21tZW50LnR5cGUsXG4gICAgICAgICd0aXRsZSc6IHRoaXMuY29tbWVudC50aXRsZSxcbiAgICAgICAgJ2F1ZGl0JzogYXVkaXQsXG4gICAgICAgICd0aW1lU3RhcnQnOiB0aW1lU3RhcnQsXG4gICAgICAgICd0aW1lRW5kJzogdGltZUVuZFxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gZGF0YS5saXN0XG4gICAgICAgICAgdGhpcy50b3RhbCA9IGRhdGEudG90YWxcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGhhbmRsZVNpemVDaGFuZ2UgKHBhZ2VTaXplKSB7XG4gICAgICB0aGlzLnBhZ2VTaXplID0gcGFnZVNpemVcbiAgICAgIHRoaXMuZ2V0Q29tbWVudExpc3QoKVxuICAgIH0sXG4gICAgaGFuZGxlQ3VycmVudENoYW5nZSAocGFnZUluZGV4KSB7XG4gICAgICB0aGlzLnBhZ2VObyA9IHBhZ2VJbmRleFxuICAgICAgdGhpcy5nZXRDb21tZW50TGlzdCgpXG4gICAgfSxcbiAgICAvKiog6I635Y+W5YWo6YCJ55qE5pWw5o2uICoqL1xuICAgIHNlbGVjdEFsbCAoZSkge1xuICAgICAgaWYgKGUubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLnNlbGZTZWxlY3RBbGwgPSB0cnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNlbGZTZWxlY3RBbGwgPSBmYWxzZVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOe9rumhtiAqKi9cbiAgICBzZXRNYW51VW5Ub3AgKHJvdykge1xuICAgICAgaWYgKHJvdy5hdWRpdCA9PT0gMSkge1xuICAgICAgICBBY3Rpb25zLnRvcENvbW1lbnRzKHtcbiAgICAgICAgICAnY29tbWVudFZvJzoge1xuICAgICAgICAgICAgJ2NvbW1lbnRpZCc6IHJvdy5jb21tZW50aWQsXG4gICAgICAgICAgICAndG9wJzogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSkudGhlbihyZXMgPT4ge1xuICAgICAgICAgIHRoaXMuZ2V0Q29tbWVudExpc3QoKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICBtZXNzYWdlOiAn5a6h5qC46YCa6L+H55qE6K+E6K665omN6IO9572u6aG2ISdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDlj5bmtojnva7pobYgKiovXG4gICAgc2V0TWFudVRvcCAocm93KSB7XG4gICAgICBBY3Rpb25zLnRvcENvbW1lbnRzKHtcbiAgICAgICAgJ2NvbW1lbnRWbyc6IHtcbiAgICAgICAgICAnY29tbWVudGlkJzogcm93LmNvbW1lbnRpZCxcbiAgICAgICAgICAndG9wJzogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSkudGhlbihyZXMgPT4ge1xuICAgICAgICB0aGlzLmdldENvbW1lbnRMaXN0KClcbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog5Yig6Zmk6K+E6K66ICoqL1xuICAgIGRlbGV0ZUNvbW1lbnRzIChyb3cpIHtcbiAgICAgIHRoaXMuJGNvbmZpcm0oJ+aYr+WQpuWIoOmZpFwiJyArIHJvdy51c2VyX25pY2tuYW1lICsgJ1wi55qE6K+E6K66PycsICfmj5DnpLonLCB7XG4gICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn56Gu5a6aJyxcbiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ+WPlua2iCcsXG4gICAgICAgIHR5cGU6ICd3YXJuaW5nJ1xuICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgIEFjdGlvbnMuZGVsZXRlQ29tbWVudHMoe1xuICAgICAgICAgICdjb21tZW50Vm8nOiB7XG4gICAgICAgICAgICAnY29tbWVudGlkJzogcm93LmNvbW1lbnRpZFxuICAgICAgICAgIH1cbiAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICfliKDpmaTmiJDlip8hJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5nZXRDb21tZW50TGlzdCgpXG4gICAgICAgICAgdGhpcy5nZXRDb3VudENvbW1lbnRzKClcbiAgICAgICAgfSlcbiAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog56aB6KiA55So5oi3ICoqL1xuICAgIGZvcmJpZGRlblVzZXIgKHJvdykge1xuICAgICAgaWYgKCFyb3cudXNlcl9mb3JiaWRkZW4pIHtcbiAgICAgICAgQWN0aW9ucy5mb3JiaWRkZW5Vc2VyQ29tbWVudCh7XG4gICAgICAgICAgJ2ZvcmJpZGRlbkNvbW1lbnRWbyc6IHtcbiAgICAgICAgICAgICd1c2VyaWQnOiByb3cudXNlcmlkXG4gICAgICAgICAgfVxuICAgICAgICB9KS50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgICd0eXBlJzogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAnbWVzc2FnZSc6ICfnpoHoqIDmiJDlip8nXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdGhpcy5nZXRDb21tZW50TGlzdCgpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQWN0aW9ucy5jYW5jZWxGb3JiaWRkZW5Db21tZW50KHtcbiAgICAgICAgICAnZm9yYmlkZGVuQ29tbWVudFZvJzoge1xuICAgICAgICAgICAgJ3VzZXJpZCc6IHJvdy51c2VyaWRcbiAgICAgICAgICB9XG4gICAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgICAgJ3R5cGUnOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICdtZXNzYWdlJzogJ+WPlua2iOemgeiogOaIkOWKnydcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLmdldENvbW1lbnRMaXN0KClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog6K+E6K665p+l55yLICoqL1xuICAgIGxvb2tDb21tZW50IChyb3cpIHtcbiAgICAgIHRoaXMuY29tbWVudC51c2VyX25pY2tuYW1lID0gcm93LnVzZXJfbmlja25hbWVcbiAgICAgIHRoaXMuY29tbWVudC51c2VyX3Bob25lID0gcm93LnVzZXJfcGhvbmVcbiAgICAgIC8vIHRoaXMuY29tbWVudC50aXRsZSA9IHJvdy50aXRsZVxuICAgICAgdGhpcy5nZXRDb21tZW50TGlzdCgpXG4gICAgfSxcbiAgICAvKiog5a6h5qC45oSP6KeBICoqL1xuICAgIGF1ZGl0X29waW5pb24gKHJvdykge1xuICAgICAgbGV0IHRpcENvbnRlbnQgPSAnJ1xuICAgICAgaWYgKHJvdy5hdWRpdF9vcGluaW9uKSB7XG4gICAgICAgIHRpcENvbnRlbnQgPSByb3cuYXVkaXRfb3BpbmlvblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGlwQ29udGVudCA9ICfmmoLml6DlrqHmoLjmhI/op4EnXG4gICAgICB9XG4gICAgICB0aGlzLiRhbGVydCh0aXBDb250ZW50LCAn5a6h5qC45oSP6KeBJywge1xuICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+ehruWumicsXG4gICAgICAgIGNhbGxiYWNrOiBhY3Rpb24gPT4ge1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOWuoeaguCAqKi9cbiAgICBhdWRpdCAocm93KSB7XG4gICAgICBpZiAocm93LmF1ZGl0ID09PSAwKSB7XG4gICAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IHRydWVcbiAgICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gJ0F1ZGl0J1xuICAgICAgICB0aGlzLmNvbW1lbnRpZCA9IHJvdy5jb21tZW50aWRcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDojrflj5bmiYDmnInpgInmi6nnmoTnqL/ku7ZJRCAqKi9cbiAgICBzZWxlY3Rpb25DaGFuZ2UgKHNlbGVjdGlvbikge1xuICAgICAgdGhpcy5jb21tZW50TGlzdCA9IFtdXG4gICAgICBzZWxlY3Rpb24uZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICB0aGlzLmNvbW1lbnRMaXN0LnB1c2goaXRlbS5jb21tZW50aWQpXG4gICAgICB9KVxuICAgICAgdGhpcy5zZWxlY3RlZENvbW1lbnRJbmZvID0gc2VsZWN0aW9uXG4gICAgfSxcbiAgICAvKiog5om56YeP5Yig6Zmk6K+E6K66ICoqL1xuICAgIGRlbGV0ZU1hbnlDb21tZW50ICgpIHtcbiAgICAgIGlmICh0aGlzLmNvbW1lbnRMaXN0Lmxlbmd0aCA8PSAwKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgbWVzc2FnZTogJ+ivt+iHs+WwkemAieaLqeS4gOadoeivhOiuuiEnXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgbGV0IHRpcENvbnRlbnQgPSAn5oKo5omA6YCJ5oup55qEOlwiJ1xuICAgICAgLyoqIOW3suS4iue6v+eahOeov+S7tuS4jeWPr+WIoOmZpOeahOaPkOekuiAqKi9cbiAgICAgIHRoaXMuc2VsZWN0ZWRDb21tZW50SW5mby5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgIHRpcENvbnRlbnQgKz0gJygnICsgaXRlbS51c2VyX25pY2tuYW1lICsgJyknXG4gICAgICB9KVxuICAgICAgdGhpcy4kY29uZmlybSh0aXBDb250ZW50ICsgJ+eUqOaIt+ivhOiuuuWNs+Wwhuiiq+WIoOmZpD8nLCAn5o+Q56S6Jywge1xuICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+ehruWumicsXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognLFxuICAgICAgICB0eXBlOiAnd2FybmluZydcbiAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICBBY3Rpb25zLmJhdGNoRGVsZXRlQ29tbWVudHMoe1xuICAgICAgICAgICdpZExpc3QnOiB0aGlzLmNvbW1lbnRMaXN0XG4gICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKHJlcylcbiAgICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ+aJuemHj+WIoOmZpOaIkOWKnyEnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmdldENvbW1lbnRMaXN0KClcbiAgICAgICAgICB0aGlzLmdldENvdW50Q29tbWVudHMoKVxuICAgICAgICB9KVxuICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDlhbPpl63lr7nor53moYYgKiovXG4gICAgY2xvc2VEaWFsb2cgKCkge1xuICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gJydcbiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IGZhbHNlXG4gICAgICB0aGlzLmdldENvbW1lbnRMaXN0KClcbiAgICAgIHRoaXMuZ2V0Q291bnRDb21tZW50cygpXG4gICAgfSxcbiAgICB0b2dnbGVBbGxTZWxlY3Rpb24gKGUpIHtcbiAgICAgIHRoaXMuJHJlZnMuY2hhbm5lbFRhYmxlLnRvZ2dsZUFsbFNlbGVjdGlvbigpXG4gICAgfVxuICB9XG59XG48XC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuICAucGFnaW5hdGlvbntcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIH1cbiAgLm1hbnV7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIGhlaWdodDogMjBweDtcbiAgICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gICAgYm9yZGVyLXJhZGl1czogMjBweDtcbiAgICBmb250LXNpemU6IDEzcHg7XG4gICAgcGFkZGluZzogMXB4IDVweCAycHggNXB4O1xuICAgIGNvbG9yOiByZ2JhKDE4MSwgMTg0LCAyMTcsIDEpO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuICAubWFudS11cC1hY3RpdmV7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyMzEsIDEyNSwgMCwgMSk7XG4gICAgY29sb3I6cmdiYSgyMzEsIDEyNSwgMCwgMSk7XG4gIH1cbiAgLm1hbnUtYmFjay1hY3RpdmV7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyNDAsIDgsIDgsIDEpO1xuICAgIGNvbG9yOnJnYmEoMjQwLCA4LCA4LCAxKTtcbiAgfVxuICAuZGVsZXRlLWFjdGl2ZXtcbiAgICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTA1LCA3OCwgMjU1LCAxKTtcbiAgICBjb2xvcjogcmdiYSgxMDUsIDc4LCAyNTUsIDEpO1xuICB9XG4gIC5jb21tZW50LWRldGFpbHtcbiAgICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMjMxLDEyNSwwLDEpO1xuICAgIGNvbG9yOiByZ2JhKDIzMSwxMjUsMCwxKTtcbiAgfVxuICAuZGF0ZS1sZWZ0e1xuICAgIG1hcmdpbi1sZWZ0OiAyOHB4O1xuICB9XG4gIC5jb21tZW50LXRvcC1pbmZve1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIHdpZHRoOiA5NSU7XG4gICAgaGVpZ2h0OiAxMjBweDtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgICBtYXJnaW4tYm90dG9tOiA2MHB4O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNEQURFREY7XG4gIH1cbiAgLmNvbW1lbnQtaW5mby1pdGVte1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI0RBREVERjtcbiAgICB3aWR0aDogMjUlO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuICAuYm94IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIG1hcmdpbjogYXV0bztcbiAgfVxuICAuY2hhbmdlLWJhY2tncm91ZHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIG1hcmdpbjogYXV0bztcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjk0RUZGO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgfVxuICAuY29tbWVudC1kYXRhIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgbWFyZ2luLWxlZnQ6IDE1cHg7XG4gICAgY29sb3I6cmdiYSg3MSw3MSw3MSwxKTtcbiAgfVxuICAuY29tbWVudC1kYXRhIHNwYW46Zmlyc3QtY2hpbGQge1xuICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgfVxuICAuY29tbWVudC1kYXRhIHNwYW46bGFzdC1jaGlsZHtcbiAgICBmb250LXNpemU6MTRweDtcbiAgfVxuICAuY29tbWVudC1pY29uLWNvbnRhaW5lcntcbiAgICB3aWR0aDo2MHB4O1xuICAgIGhlaWdodDogNjBweDtcbiAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBsaW5lLWhlaWdodDogNjhweDtcbiAgfVxuICAuY29tbWVudC1hY3RpdmUtYmd7XG4gICAgYmFja2dyb3VuZDogcmdiYSgxMDUsNzgsMjU1LDEpO1xuICB9XG4gIC5pY29uLWNvbnRhaW5lci1iZ3tcbiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgfVxuICAuaWNvbi1jb2xvcntcbiAgICBjb2xvcjogIzY5NEVGRjtcbiAgfVxuICAuY29tbWVudC1maXJzdC1iZ3tcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjA2LCA5MSwgMSk7XG4gIH1cbiAgLmNvbW1lbnQtc2VjLWJne1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjUzLDExMSw4OCwxKTtcbiAgfVxuICAuY29tbWVudC10aHItYmd7XG4gICAgYmFja2dyb3VuZDogcmdiYSg5NSwgMTU3LCAyNDksIDEpO1xuICB9XG4gIC5jb21tZW50LWZvdXItYmd7XG4gICAgYmFja2dyb3VuZDogcmdiYSgxMjAsIDIzMiwgMjI5LCAxKTtcbiAgfVxuICAuY29tbWVudC1pY29uLWNvbnRhaW5lciBpe1xuICAgIGZvbnQtc2l6ZTogMzBweDtcbiAgICBjb2xvcjp3aGl0ZTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIH1cbjwvc3R5bGU+XG48c3R5bGU+XG4gIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmJ0bi1jb250YWluZXIgLmVsLWJ1dHRvbntcbiAgICBwYWRkaW5nOiAxMnB4IDEwcHg7XG4gIH1cbiAgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuYnRuLWNvbnRhaW5lciAuZWwtaWNvbi0tcmlnaHR7XG4gICAgbWFyZ2luOiAwO1xuICB9XG4gIC5jdXN0b20tZGlhbG9nIC5lbC1kaWFsb2dfX2hlYWRlcntcbiAgICAvKnBhZGRpbmc6IDA7Ki9cbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSgxOTIsMTkwLDI1NSwxKTtcbiAgfVxuICAuZWwtdG9vbHRpcF9fcG9wcGVye1xuICAgIG1heC13aWR0aDogMzAwcHg7XG4gIH1cbiAgLmNvb21tZW50LWxpc3QgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICB3aWR0aDogNjUlO1xuICB9XG4gIC5jb29tbWVudC1saXN0IC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmVsLWZvcm0taXRlbSB7XG4gICAgd2lkdGg6IDIzJTtcbiAgfVxuPC9zdHlsZT5cbiJdLHNvdXJjZVJvb3Q6IiJ9XSl9LCIyMWNxIjpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLnBhZ2luYXRpb25bZGF0YS12LTQzZGMxYmIwXXtcbiAgLXdlYmtpdC1ib3gtcGFjazoganVzdGlmeTtcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xufVxuLm1hbnVbZGF0YS12LTQzZGMxYmIwXXtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogMzBweDtcbiAgaGVpZ2h0OiAyMHB4O1xuICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgcGFkZGluZzogMXB4IDVweCAycHggNXB4O1xuICBjb2xvcjogcmdiYSgxODEsIDE4NCwgMjE3LCAxKTtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuLm1hbnUtdXAtYWN0aXZlW2RhdGEtdi00M2RjMWJiMF17XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjMxLCAxMjUsIDAsIDEpO1xuICBjb2xvcjpyZ2JhKDIzMSwgMTI1LCAwLCAxKTtcbn1cbi5tYW51LWJhY2stYWN0aXZlW2RhdGEtdi00M2RjMWJiMF17XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjQwLCA4LCA4LCAxKTtcbiAgY29sb3I6cmdiYSgyNDAsIDgsIDgsIDEpO1xufVxuLmRlbGV0ZS1hY3RpdmVbZGF0YS12LTQzZGMxYmIwXXtcbiAgYm9yZGVyOjFweCBzb2xpZCByZ2JhKDEwNSwgNzgsIDI1NSwgMSk7XG4gIGNvbG9yOiByZ2JhKDEwNSwgNzgsIDI1NSwgMSk7XG59XG4uZGF0ZS1sZWZ0W2RhdGEtdi00M2RjMWJiMF17XG4gIG1hcmdpbi1sZWZ0OiAyOHB4O1xufVxuLnBhZ2luYXRpb25bZGF0YS12LTQzZGMxYmIwXSB7XG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAtd2Via2l0LWJveC1wYWNrOiBlbmQ7XG59XG4uYnRuLWNvbnRhaW5lcltkYXRhLXYtNDNkYzFiYjBdIHtcbiAgd2lkdGg6IDQwMHB4ICFpbXBvcnRhbnQ7XG4gIGxlZnQ6IDY4cHg7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZUxpdmUvc3JjL2NvbXBvbmVudHMvbWFuYWdlTGl2ZS9saXZlTGlzdC52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBdWlCQTtFQUNBLDBCQUFBO01BQUEsdUJBQUE7VUFBQSwrQkFBQTtDQUNBO0FBQ0E7RUFDQSxzQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0Esd0NBQUE7RUFDQSxvQkFBQTtFQUNBLGdCQUFBO0VBQ0EseUJBQUE7RUFDQSw4QkFBQTtFQUNBLGdCQUFBO0NBQ0E7QUFDQTtFQUNBLHVDQUFBO0VBQ0EsMkJBQUE7Q0FDQTtBQUNBO0VBQ0EscUNBQUE7RUFDQSx5QkFBQTtDQUNBO0FBQ0E7RUFDQSx1Q0FBQTtFQUNBLDZCQUFBO0NBQ0E7QUFDQTtFQUNBLGtCQUFBO0NBQ0E7QUFDQTtFQUNBLHFCQUFBO0VBQ0Esc0JBQUE7Q0FDQTtBQUNBO0VBQ0Esd0JBQUE7RUFDQSxXQUFBO0NBQ0EiLGZpbGU6ImxpdmVMaXN0LnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9ImxpdmUiPlxuICAgIDxkaXY+XG4gICAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICAgIHRpdGxlLW5hbWU9IuebtOaSreeuoeeQhiJcbiAgICAgICAgY2xhc3M9ImNpY2xlLWNvbnRyb2xsZXIiXG4gICAgICAvPlxuICAgICAgPGRpdiBjbGFzcz0ic2VhcmNoLWZvcm0tY29udGFpbmVyIj5cbiAgICAgICAgPGVsLWZvcm1cbiAgICAgICAgICA6aW5saW5lPSJ0cnVlIlxuICAgICAgICAgIDptb2RlbD0ibGl2ZSJcbiAgICAgICAgICBjbGFzcz0iZGVtby1mb3JtLWlubGluZSI+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i55u05pKt5Li76aKYIj5cbiAgICAgICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgICAgICB2LW1vZGVsPSJsaXZlLmxpdmVfbmFtZSJcbiAgICAgICAgICAgICAgY2xlYXJhYmxlLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i54q25oCBIlxuICAgICAgICAgICAgY2xhc3M9InNlYXJjaC1sZWZ0Ij5cbiAgICAgICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICAgICAgdi1tb2RlbD0ibGl2ZS5zdGF0ZSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IiJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoTGl2ZSI+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICB2YWx1ZT0iIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlhajpg6giLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMCJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5pKk6ZSAIi8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9IjEiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuW+heaSrSIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPSIyIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLnm7Tmkq3kuK0iLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMyJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5bey57uT5p2fIi8+XG4gICAgICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i5byA5aeL5pe26Ze0Ij5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9ImxpdmUuc3RhcnREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9ImxpdmUuc3RhcnREYXRlIlxuICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pe26Ze0IlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hMaXZlIi8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9Iue7k+adn+aXtumXtCJcbiAgICAgICAgICAgIGNsYXNzPSJkYXRlLWxlZnQiPlxuICAgICAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgICAgIDp0aXRsZT0ibGl2ZS5lbmREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9ImxpdmUuZW5kRGF0ZSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXtumXtCJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoTGl2ZSIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gY2xhc3M9ImJ0bi1jb250YWluZXIiPlxuICAgICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgICAgICBAY2xpY2s9InNlYXJjaExpdmUiPlxuICAgICAgICAgICAgICDmn6Xor6JcbiAgICAgICAgICAgICAgPGkgY2xhc3M9ImVsLWljb24tc2VhcmNoIGVsLWljb24tLXJpZ2h0Ii8+XG4gICAgICAgICAgICA8L2VsLWJ1dHRvbj5cbiAgICAgICAgICAgIDxyb3V0ZXItbGluayB0bz0iL2xpdmUvY3JlYXRlIj5cbiAgICAgICAgICAgICAgPGVsLWJ1dHRvbiB0eXBlPSJwcmltYXJ5Ij5cbiAgICAgICAgICAgICAgICDmt7vliqDnm7Tmkq1cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1wbHVzIGVsLWljb24tLXJpZ2h0Ii8+XG4gICAgICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICAgICAgPC9yb3V0ZXItbGluaz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgPC9lbC1mb3JtPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz0idGFibGUtbGlzdCI+XG4gICAgICA8ZWwtdGFibGVcbiAgICAgICAgcmVmPSJjaGFubmVsVGFibGUiXG4gICAgICAgIDpkYXRhPSJ0YWJsZURhdGEiXG4gICAgICAgIHN0cmlwZVxuICAgICAgICBjbGFzcz0id2hvbGUtdGFibGUiXG4gICAgICAgIG1pbi1oZWlnaHQ9IjQwMCI+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiB0YWJsZUhlYWRlciJcbiAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICA6cHJvcD0iaXRlbS5wcm9wIlxuICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCJcbiAgICAgICAgICA6d2lkdGg9Iml0ZW0ud2lkdGgiXG4gICAgICAgICAgOmZvcm1hdHRlcj0iaXRlbS5mb3JtYXR0ZXIiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICBmaXhlZFxuICAgICAgICAgIHNob3ctb3ZlcmZsb3ctdG9vbHRpcFxuICAgICAgICAvPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgbGFiZWw9Iue9rumhtueKtuaAgSJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIj5cbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgdi1pZj0iIXNjb3BlLnJvdy50b3AiXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9IueCueWHu+e9rumhtiJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3AiPlxuICAgICAgICAgICAgICA8ZWwtdGFnXG4gICAgICAgICAgICAgICAgc2l6ZT0ibWluaSJcbiAgICAgICAgICAgICAgICBjbGFzcz0ic2V0UG9pbnRlciJcbiAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6NjBweDsiXG4gICAgICAgICAgICAgICAgQGNsaWNrLm5hdGl2ZT0ic2V0VG9wKHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIOe9rumhtlxuICAgICAgICAgICAgICA8L2VsLXRhZz5cbiAgICAgICAgICAgIDwvZWwtdG9vbHRpcD5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIHYtZWxzZVxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBjb250ZW50PSLngrnlh7vlj5bmtojnva7pobYiXG4gICAgICAgICAgICAgIHBsYWNlbWVudD0idG9wIj5cbiAgICAgICAgICAgICAgPGVsLXRhZ1xuICAgICAgICAgICAgICAgIHNpemU9Im1pbmkiXG4gICAgICAgICAgICAgICAgY2xhc3M9InNldFBvaW50ZXIiXG4gICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjYwcHg7Y29sb3I6IzY5NGVmZiJcbiAgICAgICAgICAgICAgICBAY2xpY2submF0aXZlPSJzZXRVblRvcChzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAgICDlj5bmtojnva7pobZcbiAgICAgICAgICAgICAgPC9lbC10YWc+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBsYWJlbD0i5pON5L2cIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgd2lkdGg9IjIwMCI+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYW51LWNvbnRhaW5lciI+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgdi1pZj0ic2NvcGUucm93LnN0YXRlID09PSAwIlxuICAgICAgICAgICAgICAgIGNsYXNzPSJtYW51IGRlbGV0ZS1hY3RpdmUiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJ1cE1hbnUoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg5LiK56i/XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICB2LWlmPSJzY29wZS5yb3cuc3RhdGUgPT09IDEiXG4gICAgICAgICAgICAgICAgY2xhc3M9Im1hbnUgZGVsZXRlLWFjdGl2ZSJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImRvd25NYW51KHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIOaSpOeov1xuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgOmNsYXNzPSJbXCdtYW51XCcsIHNjb3BlLnJvdy5zdGF0ZSAhPT0gMSA/IFwnZGVsZXRlLWFjdGl2ZVwnOiBcJ1wnXSJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImVkaXRMaXZlKHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIOe8lui+kVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgOmNsYXNzPSJbXCdtYW51XCcsIHNjb3BlLnJvdy5zdGF0ZSAhPT0gMSA/IFwnZGVsZXRlLWFjdGl2ZVwnOiBcJ1wnXSJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImRlbGV0ZUxpdmUoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg5Yig6ZmkXG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGZpeGVkPSJyaWdodCJcbiAgICAgICAgICBsYWJlbD0i5p2D6ZmQ6YWN572uIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgd2lkdGg9IjExNSI+ODVcbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgY29udGVudD0i6K+E6K66IlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcCI+XG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICA6c3R5bGU9IntiYWNrZ3JvdW5kQ29sb3I6IHNjb3BlLnJvdy5hbGxvd19jb21tZW50ID8gXCcjZmZhNTA3XCc6IFwnI0I1QjhEOVwnfSJcbiAgICAgICAgICAgICAgICBjbGFzcz0iYWxsb3dfY29tbWVudCJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImhhbmRsZUNvbW1lbnQoc2NvcGUucm93KSJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxpXG4gICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IHdoaXRlIlxuICAgICAgICAgICAgICAgICAgY2xhc3M9Imljb25mb250IGljb24tbWFudS1jb21tZW50Ii8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgY29udGVudD0i5YiG5LqrIlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcCI+XG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICA6c3R5bGU9IntiYWNrZ3JvdW5kQ29sb3I6IHNjb3BlLnJvdy5hbGxvd19zaGFyZSA/IFwnIzE4ODNGRlwnOiBcJyNCNUI4RDlcJ30iXG4gICAgICAgICAgICAgICAgY2xhc3M9ImFsbG93X3NoYXJlIlxuICAgICAgICAgICAgICAgIEBjbGljaz0iaGFuZGxlU2hhcmUoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogd2hpdGUiXG4gICAgICAgICAgICAgICAgICBjbGFzcz0iaWNvbmZvbnQgaWNvbi1zaGFyZSIvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZWwtdG9vbHRpcD5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9IueCuei1niJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3AiPlxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgOnN0eWxlPSJ7YmFja2dyb3VuZENvbG9yOiBzY29wZS5yb3cuYWxsb3dfbGlrZSA/IFwnI0YwMDgwOFwnOiBcJyNCNUI4RDlcJ30iXG4gICAgICAgICAgICAgICAgY2xhc3M9ImFsbG93X2xpa2UiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVQcmFpc2Uoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogd2hpdGUiXG4gICAgICAgICAgICAgICAgICBjbGFzcz0iaWNvbmZvbnQgaWNvbi1wcmFpc2UiLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBjb250ZW50PSLmlLbol48iXG4gICAgICAgICAgICAgIHBsYWNlbWVudD0idG9wIj5cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIDpzdHlsZT0ie2JhY2tncm91bmRDb2xvcjogc2NvcGUucm93LmFsbG93X2NvbGxlY3QgPyBcJyM2OTRFRkZcJzogXCcjQjVCOEQ5XCd9IlxuICAgICAgICAgICAgICAgIGNsYXNzPSJhbGxvd19jb2xsZWN0IlxuICAgICAgICAgICAgICAgIEBjbGljaz0iaGFuZGxlQ29sbGVjdChzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAgICA8aVxuICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiB3aGl0ZSJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29uZm9udCBpY29uLWNvbGxlY3QiLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+XG4gICAgICA8L2VsLXRhYmxlPlxuICAgICAgPGRpdiBjbGFzcz0icGFnaW5hdGlvbiI+XG4gICAgICAgIDxlbC1wYWdpbmF0aW9uXG4gICAgICAgICAgOnRvdGFsPSJ0b3RhbCJcbiAgICAgICAgICA6cGFnZS1zaXplcz0iWzEwLCAyMCwgMzBdIlxuICAgICAgICAgIDpjdXJyZW50LXBhZ2U9InBhZ2VObyJcbiAgICAgICAgICBiYWNrZ3JvdW5kXG4gICAgICAgICAgbGF5b3V0PSJ0b3RhbCwgc2l6ZXMsIHByZXYsIHBhZ2VyLCBuZXh0IlxuICAgICAgICAgIEBzaXplLWNoYW5nZT0iaGFuZGxlU2l6ZUNoYW5nZSJcbiAgICAgICAgICBAY3VycmVudC1jaGFuZ2U9ImhhbmRsZUN1cnJlbnRDaGFuZ2UiLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IENpcmNsZVRpdGxlIGZyb20gXCdAL2NvbXBvbmVudHMvY29tbW9ucy9jaXJjbGVUaXRsZVwnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9saXZlQXBpXCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlXG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsaXZlOiB7XG4gICAgICAgIGxpdmVfbmFtZTogXCdcJyxcbiAgICAgICAgc3RhdGU6IFwnXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJ1xuICAgICAgfSxcbiAgICAgIGNoYW5uZWxUeXBlTGlzdDogW10sIC8vIOaJgOWxnumikemBk+WIl+ihqFxuICAgICAgc3BlY2lhbExpc3Q6IFtdLFxuICAgICAgY2xpY2tDZWxsSW5kZXg6IC0xLFxuICAgICAgdGFibGVIZWFkZXI6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnbGl2ZV9uYW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5Li76aKYXCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnY3JlYXRldGltZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+WIm+W7uuaXpeacn1wnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnRm9ybWF0RGF0ZVwnXShjZWxsVmFsdWUsIFwneXl5eS1NTS1kZCBoaDptbVwnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwndXBkYXRldGltZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+abtOaWsOaXpeacn1wnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnRm9ybWF0RGF0ZVwnXShjZWxsVmFsdWUsIFwneXl5eS1NTS1kZCBoaDptbVwnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnbGl2ZV9oZWFkX3VybFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+WvvOinhuWbvlwnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gPGltZyBjbGFzcz1cJ3RvcGljLXRhYmxlLXBpY1wnIHNyYz17Y2VsbFZhbHVlfS8+XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdleHBpcnlfZGF0ZV9lbmRcJyxcbiAgICAgICAgICBsYWJlbDogXCfnm7Tmkq3lkajmnJ9cJyxcbiAgICAgICAgICB3aWR0aDogMjAwLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnRm9ybWF0RGF0ZVwnXShyb3cuZXhwaXJ5X2RhdGVfc3RhcnQsIFwneXl5eS1NTS1kZCBoaDptbVwnKSArIFwn6IezXCcgKyB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdsaXZlX3VybFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+m7mOiupOinhumikemTvuaOpVwnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gPGEgaHJlZj17Y2VsbFZhbHVlfSB0YXJnZXQ9XCdfYmxhbmtcJz57Y2VsbFZhbHVlfTwvYT5cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3Nob3dTdGF0ZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+eKtuaAgVwnLFxuICAgICAgICAgIHdpZHRoOiBcJzEwMFwnXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICB0YWJsZURhdGE6IFtdLFxuICAgICAgY29tbWVudDogZmFsc2UsXG4gICAgICBzaGFyZTogZmFsc2UsXG4gICAgICBwcmFpc2U6IGZhbHNlLFxuICAgICAgY29sbGVjdDogZmFsc2UsXG4gICAgICBpbmRleDogLTEsXG4gICAgICBwYWdlTm86IDEsXG4gICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICB0b3RhbDogMCxcbiAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlXG4gICAgfVxuICB9LCAgXG4gIHdhdGNoOiB7XG4gICAgXCdsaXZlLmxpdmVfbmFtZVwnICgpIHtcbiAgICAgIHRoaXMuc2VhcmNoTGl2ZSgpXG4gICAgfVxuICB9LCAgXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuZ2V0TGl2ZUxpc3QoKVxuXG4gICAgdGhpcy4kcm9vdC5ldmVudEh1Yi4kb24oXCdyZXNldC1vcHRpb25zXCcsICgpID0+IHtcbiAgICAgIHRoaXMucmVzZXRMaXZlT3B0aW9ucygpXG4gICAgfSlcbiAgfSxcbiAgYWN0aXZhdGVkICgpIHtcbiAgICBsZXQgbWV0YSA9IHRoaXMuJHJvdXRlLm1ldGFcbiAgICBpZiAobWV0YS5oYXNPd25Qcm9wZXJ0eShcJ3JlZnJlc2hcJykgJiYgbWV0YS5yZWZyZXNoKSB7XG4gICAgICB0aGlzLmdldExpdmVMaXN0KClcbiAgICAgIGRlbGV0ZSB0aGlzLiRyb3V0ZS5tZXRhLnJlZnJlc2hcbiAgICB9XG4gIH0sXG4gIGJlZm9yZVJvdXRlTGVhdmUgKHRvLCBmcm9tLCBuZXh0KSB7XG4gICAgaWYgKHRvLnBhdGggPT09IFwnL2xpdmUvY3JlYXRlXCcpIHtcbiAgICAgIHRoaXMucmVzZXRMaXZlT3B0aW9ucygpXG4gICAgfVxuICAgIG5leHQoKVxuICB9LFxuICBiZWZvcmVEZXN0cm95ICgpIHtcbiAgICB0aGlzLiRyb290LmV2ZW50SHViLiRvZmYoXCdyZXNldC1vcHRpb25zXCcpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKiog6I635Y+W56i/5Lu25YiX6KGoICoqL1xuICAgIGdldExpdmVMaXN0ICgpIHtcbiAgICAgIGxldCB0aW1lU3RhcnQgPSB0aGlzLmxpdmUuc3RhcnREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5saXZlLnN0YXJ0RGF0ZSkuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgbGV0IHRpbWVFbmQgPSB0aGlzLmxpdmUuZW5kRGF0ZSAhPT0gbnVsbCA/IG5ldyBEYXRlKHRoaXMubGl2ZS5lbmREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBBY3Rpb25zLmdldExpdmVMaXN0KHtcbiAgICAgICAgXCdwYWdlTm9cJzogdGhpcy5wYWdlTm8sXG4gICAgICAgIFwncGFnZVNpemVcJzogdGhpcy5wYWdlU2l6ZSxcbiAgICAgICAgXCdsaXZlX25hbWVcJzogdGhpcy5saXZlLmxpdmVfbmFtZSxcbiAgICAgICAgXCdzdGF0ZVwnOiB0aGlzLmxpdmUuc3RhdGUsXG4gICAgICAgIFwndGltZVN0YXJ0XCc6IHRpbWVTdGFydCxcbiAgICAgICAgXCd0aW1lRW5kXCc6IHRpbWVFbmRcbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICB0aGlzLnRhYmxlRGF0YSA9IGRhdGEubGlzdFxuICAgICAgICAgIHRoaXMudG90YWwgPSBkYXRhLnRvdGFsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBoYW5kbGVTaXplQ2hhbmdlIChwYWdlU2l6ZSkge1xuICAgICAgdGhpcy5wYWdlU2l6ZSA9IHBhZ2VTaXplXG4gICAgICB0aGlzLnNlYXJjaExpdmUoKVxuICAgIH0sXG4gICAgaGFuZGxlQ3VycmVudENoYW5nZSAocGFnZUluZGV4KSB7XG4gICAgICB0aGlzLnBhZ2VObyA9IHBhZ2VJbmRleFxuICAgICAgdGhpcy5nZXRMaXZlTGlzdCgpXG4gICAgfSxcbiAgICAvKiog5LiK56i/ICoqL1xuICAgIHVwTWFudSAocm93KSB7XG4gICAgICB0aGlzLnVwZGF0ZUxpdmUocm93LmxpdmVpZCwgXCdzdGF0ZVwnLCAxKVxuICAgIH0sXG4gICAgLyoqIOaSpOeovyAqKi9cbiAgICBkb3duTWFudSAocm93KSB7XG4gICAgICB0aGlzLnVwZGF0ZUxpdmUocm93LmxpdmVpZCwgXCdzdGF0ZVwnLCAwKVxuICAgIH0sXG4gICAgZWRpdExpdmUgKHJvdykge1xuICAgICAgaWYgKHJvdy5zdGF0ZSA9PT0gMSkge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCfkuI3lj6/nvJbovpHlt7LkuIrnqL/nmoTnm7Tmkq0hXCdcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCdsaXZlaWRcJywgcm93LmxpdmVpZClcbiAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6IFwnL2xpdmUvZWRpdFwnfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDor4TorrrmnYPpmZAgKiovXG4gICAgaGFuZGxlQ29tbWVudCAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIGlmIChyb3cuYWxsb3dfY29tbWVudCkge1xuICAgICAgICAgIHRoaXMudXBkYXRlTGl2ZShyb3cubGl2ZWlkLCBcJ2FsbG93X2NvbW1lbnRcJywgZmFsc2UpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVMaXZlKHJvdy5saXZlaWQsIFwnYWxsb3dfY29tbWVudFwnLCB0cnVlKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCfkuIrnqL/nmoTnm7Tmkq3kuI3lj6/mk43kvZzor4TorrrmnYPpmZAhXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDliIbkuqvmnYPpmZAgKiovXG4gICAgaGFuZGxlU2hhcmUgKHJvdykge1xuICAgICAgaWYgKHJvdy5zdGF0ZSAhPT0gMSkge1xuICAgICAgICBpZiAocm93LmFsbG93X3NoYXJlKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVMaXZlKHJvdy5saXZlaWQsIFwnYWxsb3dfc2hhcmVcJywgZmFsc2UpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVMaXZlKHJvdy5saXZlaWQsIFwnYWxsb3dfc2hhcmVcJywgdHJ1ZSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn5LiK56i/55qE55u05pKt5LiN5Y+v5pON5L2c5YiG5Lqr5p2D6ZmQIVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog54K56LWe5p2D6ZmQICoqL1xuICAgIGhhbmRsZVByYWlzZSAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIGlmIChyb3cuYWxsb3dfbGlrZSkge1xuICAgICAgICAgIHRoaXMudXBkYXRlTGl2ZShyb3cubGl2ZWlkLCBcJ2FsbG93X2xpa2VcJywgZmFsc2UpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVMaXZlKHJvdy5saXZlaWQsIFwnYWxsb3dfbGlrZVwnLCB0cnVlKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCfkuIrnqL/nmoTnm7Tmkq3kuI3lj6/mk43kvZzngrnotZ7mnYPpmZAhXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDmlLbol4/mnYPpmZAgKiovXG4gICAgaGFuZGxlQ29sbGVjdCAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIGlmIChyb3cuYWxsb3dfY29sbGVjdCkge1xuICAgICAgICAgIHRoaXMudXBkYXRlTGl2ZShyb3cubGl2ZWlkLCBcJ2FsbG93X2NvbGxlY3RcJywgZmFsc2UpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVMaXZlKHJvdy5saXZlaWQsIFwnYWxsb3dfY29sbGVjdFwnLCB0cnVlKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCfkuIrnqL/nmoTnm7Tmkq3kuI3lj6/mk43kvZzmlLbol4/mnYPpmZAhXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDlj5bmtojnva7pobYgKiovXG4gICAgc2V0VG9wIChyb3cpIHtcbiAgICAgIHRoaXMudXBkYXRlTGl2ZShyb3cubGl2ZWlkLCBcJ3RvcFwnLCB0cnVlKVxuICAgIH0sXG4gICAgLyoqIOWPlua2iOe9rumhtiAqKi9cbiAgICBzZXRVblRvcCAocm93KSB7XG4gICAgICB0aGlzLnVwZGF0ZUxpdmUocm93LmxpdmVpZCwgXCd0b3BcJywgZmFsc2UpXG4gICAgfSxcbiAgICAvKiog5Yig6Zmk55u05pKtICoqL1xuICAgIGRlbGV0ZUxpdmUgKHJvdykge1xuICAgICAgaWYgKHJvdy5zdGF0ZSAhPT0gMSkge1xuICAgICAgICB0aGlzLiRjb25maXJtKFwn5piv5ZCm5Yig6ZmkIlwnICsgcm93LmxpdmVfbmFtZSArIFwnIj9cJywgXCfmj5DnpLpcJywge1xuICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcJ+ehruWumlwnLFxuICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwn5Y+W5raIXCcsXG4gICAgICAgICAgdHlwZTogXCd3YXJuaW5nXCdcbiAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgQWN0aW9ucy5kZWxldGVMaXZlKHtcbiAgICAgICAgICAgIFwnbGl2ZUJyb2FkY2FzdFwnOiB7XG4gICAgICAgICAgICAgIFwnbGl2ZWlkXCc6IHJvdy5saXZlaWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwn5Yig6Zmk5oiQ5YqfIVwnXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNlYXJjaExpdmUoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+S4jeWPr+WIoOmZpOW3suS4iueov+eahOebtOaSrSFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICAgKiDnm7Tmkq3mk43kvZznmoTlhazlhbHmjqXlj6NcbiAgICAgICAqIEBwYXJhbSBhcnRpY2xlaWQg55u05pKtSURcbiAgICAgICAqIEBwYXJhbSBrZXkg5pu05paw5a2X5q615ZCNXG4gICAgICAgKiBAcGFyYW0gdmFsdWUg5YC8XG4gICAgICAgKi9cbiAgICB1cGRhdGVMaXZlIChsaXZlaWQsIGtleSwgdmFsdWUpIHtcbiAgICAgIEFjdGlvbnMudXBkYXRlU3RhdGUoe1xuICAgICAgICBcJ2xpdmVCcm9hZGNhc3RcJzoge1xuICAgICAgICAgIFwnbGl2ZWlkXCc6IGxpdmVpZCxcbiAgICAgICAgICBba2V5XTogdmFsdWVcbiAgICAgICAgfVxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwn5pON5L2c5oiQ5YqfIVwnXG4gICAgICAgICAgfSlcbiAgICAgICAgICB0aGlzLnNlYXJjaExpdmUoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOWFs+mXreWvueivneahhiAqKi9cbiAgICBjbG9zZURpYWxvZyAoKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ1wnXG4gICAgfSxcbiAgICAvKiog5pCc57Si56i/5Lu2ICoqL1xuICAgIHNlYXJjaExpdmUgKCkge1xuICAgICAgdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnc3dhcFRpbWVcJ10odGhpcy5saXZlKVxuICAgICAgbGV0IHRpbWVTdGFydCA9IHRoaXMubGl2ZS5zdGFydERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLmxpdmUuc3RhcnREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBsZXQgdGltZUVuZCA9IHRoaXMubGl2ZS5lbmREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5saXZlLmVuZERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIEFjdGlvbnMuZ2V0TGl2ZUxpc3Qoe1xuICAgICAgICBcJ3BhZ2VOb1wnOiB0aGlzLnBhZ2VObyxcbiAgICAgICAgXCdwYWdlU2l6ZVwnOiB0aGlzLnBhZ2VTaXplLFxuICAgICAgICBcJ2xpdmVfbmFtZVwnOiB0aGlzLmxpdmUubGl2ZV9uYW1lLFxuICAgICAgICBcJ3N0YXRlXCc6IHRoaXMubGl2ZS5zdGF0ZSxcbiAgICAgICAgXCd0aW1lU3RhcnRcJzogdGltZVN0YXJ0LFxuICAgICAgICBcJ3RpbWVFbmRcJzogdGltZUVuZFxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gZGF0YS5saXN0XG4gICAgICAgICAgdGhpcy50b3RhbCA9IGRhdGEudG90YWxcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgcmVzZXRMaXZlT3B0aW9ucyAoKSB7XG4gICAgICB0aGlzLmxpdmUgPSB7XG4gICAgICAgIGxpdmVfbmFtZTogXCdcJyxcbiAgICAgICAgc3RhdGU6IFwnXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJ1xuICAgICAgfVxuICAgICAgdGhpcy5wYWdlTm8gPSAxXG4gICAgfVxuICB9XG59XG48XC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuICAucGFnaW5hdGlvbntcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIH1cbiAgLm1hbnV7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiAzMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gICAgYm9yZGVyLXJhZGl1czogMjBweDtcbiAgICBmb250LXNpemU6IDEzcHg7XG4gICAgcGFkZGluZzogMXB4IDVweCAycHggNXB4O1xuICAgIGNvbG9yOiByZ2JhKDE4MSwgMTg0LCAyMTcsIDEpO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuICAubWFudS11cC1hY3RpdmV7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyMzEsIDEyNSwgMCwgMSk7XG4gICAgY29sb3I6cmdiYSgyMzEsIDEyNSwgMCwgMSk7XG4gIH1cbiAgLm1hbnUtYmFjay1hY3RpdmV7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyNDAsIDgsIDgsIDEpO1xuICAgIGNvbG9yOnJnYmEoMjQwLCA4LCA4LCAxKTtcbiAgfVxuICAuZGVsZXRlLWFjdGl2ZXtcbiAgICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTA1LCA3OCwgMjU1LCAxKTtcbiAgICBjb2xvcjogcmdiYSgxMDUsIDc4LCAyNTUsIDEpO1xuICB9XG4gIC5kYXRlLWxlZnR7XG4gICAgbWFyZ2luLWxlZnQ6IDI4cHg7XG4gIH1cbiAgLnBhZ2luYXRpb24ge1xuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgIC13ZWJraXQtYm94LXBhY2s6IGVuZDtcbiAgfVxuICAuYnRuLWNvbnRhaW5lciB7XG4gICAgd2lkdGg6IDQwMHB4ICFpbXBvcnRhbnQ7XG4gICAgbGVmdDogNjhweDtcbiAgfVxuPC9zdHlsZT5cbjxzdHlsZT5cbiAgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuYnRuLWNvbnRhaW5lciAuZWwtYnV0dG9ue1xuICAgIHBhZGRpbmc6IDEycHggMTBweDtcbiAgfVxuICAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5idG4tY29udGFpbmVyIC5lbC1pY29uLS1yaWdodHtcbiAgICBtYXJnaW46IDA7XG4gIH1cbiAgLmN1c3RvbS1kaWFsb2cgLmVsLWRpYWxvZ19faGVhZGVye1xuICAgIC8qcGFkZGluZzogMDsqL1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZ2JhKDE5MiwxOTAsMjU1LDEpO1xuICB9XG4gIC5lbC10b29sdGlwX19wb3BwZXJ7XG4gICAgbWF4LXdpZHRoOiAzMDBweDtcbiAgfVxuICAubGl2ZSAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICAgIHdpZHRoOiA2NSU7XG4gIH1cbiAgLmxpdmUgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtIHtcbiAgICB3aWR0aDogMjIlO1xuICB9XG4gIC5saXZlIC5hbGxvd19jb21tZW50IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZhNTA3O1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgLW1vei1ib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gICAgbWFyZ2luLWxlZnQ6IDNweDtcbiAgfVxuICAubGl2ZSAuYWxsb3dfc2hhcmUge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMxODgzRkY7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtbW96LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBtYXJnaW4tbGVmdDogM3B4O1xuICB9XG4gIC5saXZlIC5hbGxvd19saWtlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjAwODA4O1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgLW1vei1ib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gICAgbWFyZ2luLWxlZnQ6IDNweDtcbiAgfVxuICAubGl2ZSAuYWxsb3dfY29sbGVjdCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzY5NEVGRjtcbiAgICB3aWR0aDogMjBweDtcbiAgICBoZWlnaHQ6IDIwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC1tb3otYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIG1hcmdpbi1sZWZ0OiAzcHg7XG4gIH1cbjwvc3R5bGU+XG4nXSxzb3VyY2VSb290OiIifV0pfSwiMjczcyI6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi5pY29uLWNvbnRhaW5lcltkYXRhLXYtNTJlOTY4MzRde1xuICB3aWR0aDogNDUwcHg7XG4gIG1hcmdpbjowIGF1dG87XG4gIHBhZGRpbmctYm90dG9tOiAzMHB4O1xufVxuLmNoYW5uZWwtaWNvbltkYXRhLXYtNTJlOTY4MzRde1xuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIC13ZWJraXQtYm94LXBhY2s6IHN0YXJ0O1xuICAgICAgLW1zLWZsZXgtcGFjazogc3RhcnQ7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAtbXMtZmxleC13cmFwOiB3cmFwO1xuICAgICAgZmxleC13cmFwOiB3cmFwO1xufVxuLmNoYW5uZWwtaWNvbiBzcGFuW2RhdGEtdi01MmU5NjgzNF17XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgd2lkdGg6IDEwMHB4O1xuICBoZWlnaHQ6IDEwMHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCBncmF5O1xuICBtYXJnaW4tbGVmdDogNXB4O1xuICBtYXJnaW4tdG9wOiA1cHg7XG59XG4uY2hhbm5lbC1pY29uIHNwYW4gaW1nW2RhdGEtdi01MmU5NjgzNF17XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG59XG4uY2hhbm5lbC1pY29uIHNwYW5bZGF0YS12LTUyZTk2ODM0XTpob3ZlcntcbiAgYm9yZGVyOiAxcHggc29saWQgYmx1ZTtcbn1cbi5jaGFubmVsLWljb24gLmNsaWNrLWJvcmRlcltkYXRhLXYtNTJlOTY4MzRde1xuICBib3JkZXI6IDFweCBzb2xpZCBibHVlO1xufVxuLm1vcmVuLWJvcmRlcltkYXRhLXYtNTJlOTY4MzRde1xuICBib3JkZXI6IDFweCBzb2xpZCBncmF5O1xufVxuLmljb24tc3VibWl0W2RhdGEtdi01MmU5NjgzNF17XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xuICBtYXJnaW46IDEwcHggMjBweCAwcHggMHB4XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZVN1YmxpdmUvc3ViQ2hhbm5lbC9zcmMvY29tcG9uZW50cy9tYW5hZ2VDaGFubmVsL2Nob29zZUljb24udnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQStEQTtFQUNBLGFBQUE7RUFDQSxjQUFBO0VBQ0EscUJBQUE7Q0FDQTtBQUNBO0VBQ0EscUJBQUE7RUFBQSxxQkFBQTtFQUFBLGNBQUE7RUFDQSx3QkFBQTtNQUFBLHFCQUFBO1VBQUEsNEJBQUE7RUFDQSxvQkFBQTtNQUFBLGdCQUFBO0NBQ0E7QUFDQTtFQUNBLHNCQUFBO0VBQ0EsYUFBQTtFQUNBLGNBQUE7RUFDQSx1QkFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7Q0FDQTtBQUNBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7Q0FDQTtBQUNBO0VBQ0EsdUJBQUE7Q0FDQTtBQUNBO0VBQ0EsdUJBQUE7Q0FDQTtBQUNBO0VBQ0EsdUJBQUE7Q0FDQTtBQUNBO0VBQ0Esa0JBQUE7RUFDQSx5QkFBQTtDQUNBIixmaWxlOiJjaG9vc2VJY29uLnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9Imljb24tY29udGFpbmVyIj5cbiAgICA8ZGl2IGNsYXNzPSJjaGFubmVsLWljb24iPlxuICAgICAgPHNwYW5cbiAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gaWNvbkxpc3QiXG4gICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICA6Y2xhc3M9Imljb25DaGVja0xpc3RbaW5kZXhdID8gXCdjbGljay1ib3JkZXJcJzogXCdtb3Jlbi1ib3JkZXJcJyJcbiAgICAgICAgQGNsaWNrPSJpY29uU2VsZWN0ZWQoaW5kZXgsIGljb25DaGVja0xpc3RbaW5kZXhdKSI+XG4gICAgICAgIDxpbWcgOnNyYz0iaXRlbSI+XG4gICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG4gICAgPGRpdlxuICAgICAgY2xhc3M9Imljb24tc3VibWl0Ij5cbiAgICAgIDxlbC1idXR0b25cbiAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgQGNsaWNrPSJzdWJtaXRJY29uIj7noa7lrpo8L2VsLWJ1dHRvbj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCBDaXJjbGVUaXRsZSBmcm9tIFwnQC9jb21wb25lbnRzL2NvbW1vbnMvY2lyY2xlVGl0bGVcJ1xuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tIFwnQC9hcGkvY2hhbm5lbEFwaVwnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBDaXJjbGVUaXRsZVxuICB9LFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWNvbkxpc3Q6IFtdLFxuICAgICAgaWNvbkNoZWNrTGlzdDogW10sXG4gICAgICBpbmRleDogMFxuICAgIH1cbiAgfSxcblxuICBtb3VudGVkICgpIHtcbiAgICB0aGlzLmdldEljb25MaXN0KClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldEljb25MaXN0ICgpIHtcbiAgICAgIEFjdGlvbnMubGlzdENoYW5uZWxJY29uKCkudGhlbihyZXMgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgdGhpcy5pY29uQ2hlY2tMaXN0ID0gW11cbiAgICAgICAgICB0aGlzLmljb25MaXN0ID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmljb25MaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmljb25DaGVja0xpc3QucHVzaChmYWxzZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBpY29uU2VsZWN0ZWQgKGluZGV4LCBpc0NoZWNrZWQpIHtcbiAgICAgIHRoaXMuaW5kZXggPSBpbmRleFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmljb25MaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuJHNldCh0aGlzLmljb25DaGVja0xpc3QsIGksIGZhbHNlKVxuICAgICAgfVxuICAgICAgdGhpcy4kc2V0KHRoaXMuaWNvbkNoZWNrTGlzdCwgaW5kZXgsIHRydWUpXG4gICAgfSxcbiAgICBzdWJtaXRJY29uICgpIHtcbiAgICAgIHRoaXMuJGVtaXQoXCdzdWJtaXQtaWNvblwnLCB0aGlzLmljb25MaXN0W3RoaXMuaW5kZXhdKVxuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbi5pY29uLWNvbnRhaW5lcntcbiAgd2lkdGg6IDQ1MHB4O1xuICBtYXJnaW46MCBhdXRvO1xuICBwYWRkaW5nLWJvdHRvbTogMzBweDtcbn1cbi5jaGFubmVsLWljb257XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgZmxleC13cmFwOiB3cmFwO1xufVxuLmNoYW5uZWwtaWNvbiBzcGFue1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdpZHRoOiAxMDBweDtcbiAgaGVpZ2h0OiAxMDBweDtcbiAgYm9yZGVyOiAxcHggc29saWQgZ3JheTtcbiAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgbWFyZ2luLXRvcDogNXB4O1xufVxuLmNoYW5uZWwtaWNvbiBzcGFuIGltZ3tcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbn1cbi5jaGFubmVsLWljb24gc3Bhbjpob3ZlcntcbiAgYm9yZGVyOiAxcHggc29saWQgYmx1ZTtcbn1cbi5jaGFubmVsLWljb24gLmNsaWNrLWJvcmRlcntcbiAgYm9yZGVyOiAxcHggc29saWQgYmx1ZTtcbn1cbi5tb3Jlbi1ib3JkZXJ7XG4gIGJvcmRlcjogMXB4IHNvbGlkIGdyYXk7XG59XG4uaWNvbi1zdWJtaXR7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xuICBtYXJnaW46IDEwcHggMjBweCAwcHggMHB4XG59XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sIjJGNkciOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJwdDUyIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjU4ODQ1MTA5IixhLCExLHt9KX0sIjJhRWMiOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCIvZEJLIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjExZDU3ZmZjIixhLCExLHt9KX0sIjM4YUoiOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCI0RXNFIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjFjM2QyODMwIixhLCExLHt9KX0sIjNCdlMiOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJ4VVpxIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjQwZjUyYWUwIixhLCExLHt9KX0sIjNFVWYiOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJYVnp2Iik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjg3NmE5NWFlIixhLCExLHt9KX0sIjRFc0UiOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJreEZCIik7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLnRvcC1oZWFkZXJbZGF0YS12LTdmYTZkYmE0XSB7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCIrYSh0KCI2TXVFIikpKyIpO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG4udG9wLWhlYWRlciAuaGVhZGVyLWxvZ29bZGF0YS12LTdmYTZkYmE0XSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDkzcHg7XG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbn1cbi50b3AtaGVhZGVyIC5oZWFkZXItaW5mb1tkYXRhLXYtN2ZhNmRiYTRdIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICBjb2xvcjogI2ZmZjtcbiAgZm9udC1zaXplOiAwO1xuICBmbG9hdDogcmlnaHQ7XG4gIGNsZWFyOiBib3RoO1xuICBwYWRkaW5nLXJpZ2h0OiA0MHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgZGlzcGxheTogZmxleDtcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbi50b3AtaGVhZGVyIC5oZWFkZXItaW5mbyBpbWdbZGF0YS12LTdmYTZkYmE0XSB7XG4gIGhlaWdodDogNDJweDtcbiAgd2lkdGg6IDQycHg7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbn1cbi50b3AtaGVhZGVyIC5oZWFkZXItaW5mbyBzcGFuW2RhdGEtdi03ZmE2ZGJhNF0ge1xuICBmb250LXNpemU6IDE0cHg7XG59XG4vKiMgc291cmNlTWFwcGluZ1VSTD1zcmMvY29tcG9uZW50cy9jb21tb25zL2xheW91dEhlYWRlci5jc3MubWFwICovIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9jb21tb25zL3NyYy9jb21wb25lbnRzL2NvbW1vbnMvbGF5b3V0SGVhZGVyLnZ1ZSIsIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL2NvbW1vbnMvbGF5b3V0SGVhZGVyLnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUFnQ0E7RUFDRSxhQUFBO0VBQ0EsZ0RBQUE7RUFDQSw2QkFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7Q0MvQkQ7QURnQ0M7RUFDRSxtQkFBQTtFQUNBLFNBQUE7RUFDQSxXQUFBO0VBQ0Esb0NBQUE7VUFBQSw0QkFBQTtDQzlCSDtBRCtCQztFQUNFLGFBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLGFBQUE7RUFDQSxZQUFBO0VBQ0Esb0JBQUE7RUFDQSxnQkFBQTtFQUNBLHFCQUFBO0VBQUEscUJBQUE7RUFBQSxjQUFBO0VBQ0EsMEJBQUE7TUFBQSx1QkFBQTtVQUFBLG9CQUFBO0NDN0JIO0FEOEJHO0VBQ0UsYUFBQTtFQUNBLFlBQUE7RUFDQSxtQkFBQTtFQUNBLHVCQUFBO0NDNUJMO0FENkJHO0VBQ0UsZ0JBQUE7Q0MzQkw7QUFDRCxtRUFBbUUiLGZpbGU6ImxheW91dEhlYWRlci52dWUiLHNvdXJjZXNDb250ZW50OlsiXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbi50b3AtaGVhZGVyXG4gIGhlaWdodCAxMDAlXG4gIGJhY2tncm91bmQtaW1hZ2UgdXJsKCcuLi8uLi9zdGF0aWMvaW1nL2JnLWhlYWRlci5wbmcnKVxuICBiYWNrZ3JvdW5kLXJlcGVhdCBuby1yZXBlYXRcbiAgYmFja2dyb3VuZC1zaXplIGNvdmVyXG4gIHBvc2l0aW9uIHJlbGF0aXZlXG4gIC5oZWFkZXItbG9nb1xuICAgIHBvc2l0aW9uIGFic29sdXRlXG4gICAgdG9wIDUwJVxuICAgIGxlZnQgOTNweFxuICAgIHRyYW5zZm9ybSB0cmFuc2xhdGVZKC01MCUpXG4gIC5oZWFkZXItaW5mb1xuICAgIGhlaWdodCAxMDAlXG4gICAgY29sb3IgI2ZmZlxuICAgIGZvbnQtc2l6ZSAwXG4gICAgZmxvYXQgcmlnaHRcbiAgICBjbGVhciBib3RoXG4gICAgcGFkZGluZy1yaWdodCA0MHB4XG4gICAgY3Vyc29yIHBvaW50ZXJcbiAgICBkaXNwbGF5IGZsZXhcbiAgICBhbGlnbi1pdGVtcyBjZW50ZXJcbiAgICBpbWcgXG4gICAgICBoZWlnaHQgNDJweFxuICAgICAgd2lkdGggNDJweFxuICAgICAgYm9yZGVyLXJhZGl1cyA1MCVcbiAgICAgIHZlcnRpY2FsLWFsaWduIG1pZGRsZVxuICAgIHNwYW4gXG4gICAgICBmb250LXNpemUgMTRweFxuIiwnLnRvcC1oZWFkZXIge1xuICBoZWlnaHQ6IDEwMCU7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgiLi4vLi4vc3RhdGljL2ltZy9iZy1oZWFkZXIucG5nIik7XG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cbi50b3AtaGVhZGVyIC5oZWFkZXItbG9nbyB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDkzcHg7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbn1cbi50b3AtaGVhZGVyIC5oZWFkZXItaW5mbyB7XG4gIGhlaWdodDogMTAwJTtcbiAgY29sb3I6ICNmZmY7XG4gIGZvbnQtc2l6ZTogMDtcbiAgZmxvYXQ6IHJpZ2h0O1xuICBjbGVhcjogYm90aDtcbiAgcGFkZGluZy1yaWdodDogNDBweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuLnRvcC1oZWFkZXIgLmhlYWRlci1pbmZvIGltZyB7XG4gIGhlaWdodDogNDJweDtcbiAgd2lkdGg6IDQycHg7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbn1cbi50b3AtaGVhZGVyIC5oZWFkZXItaW5mbyBzcGFuIHtcbiAgZm9udC1zaXplOiAxNHB4O1xufVxuLyojIHNvdXJjZU1hcHBpbmdVUkw9c3JjL2NvbXBvbmVudHMvY29tbW9ucy9sYXlvdXRIZWFkZXIuY3NzLm1hcCAqLyddLHNvdXJjZVJvb3Q6IiJ9XSl9LCI0SWRVIjpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgiT1hJWCIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCI4ZDQyZGUzMiIsYSwhMSx7fSl9LCI0bUN0IjpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgiYXVJVyIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCI3ODc5MThiZSIsYSwhMSx7fSl9LCI1T2JDIjpmdW5jdGlvbihlLG4pe30sIjVjZ1YiOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uY2hhbm5lbCAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICB3aWR0aDogNjAlO1xufVxuLmNoYW5uZWwgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtIHtcbiAgd2lkdGg6IDIwJTtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlQ2hhbm5lbC9zcmMvY29tcG9uZW50cy9tYW5hZ2VDaGFubmVsL2NoYW5uZWxMaXN0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUFpZ0JBO0VBQ0EsV0FBQTtDQUNBO0FBQ0E7RUFDQSxXQUFBO0NBQ0EiLGZpbGU6ImNoYW5uZWxMaXN0LnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9ImNoYW5uZWwiPlxuICAgIDxkaXY+XG4gICAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICAgIHRpdGxlLW5hbWU9IumikemBk+WIl+ihqCJcbiAgICAgICAgY2xhc3M9ImNpY2xlLWNvbnRyb2xsZXIiXG4gICAgICAvPlxuICAgICAgPGRpdiBjbGFzcz0ic2VhcmNoLWZvcm0tY29udGFpbmVyIj5cbiAgICAgICAgPGVsLWZvcm1cbiAgICAgICAgICA6aW5saW5lPSJ0cnVlIlxuICAgICAgICAgIDptb2RlbD0iY2hhbm5lbEZvcm0iXG4gICAgICAgICAgY2xhc3M9ImRlbW8tZm9ybS1pbmxpbmUiPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IumikemBkyI+XG4gICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgdi1tb2RlbD0iY2hhbm5lbEZvcm0uY2hhbm5lbF9uYW1lIlxuICAgICAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLniLbnuqfpopHpgZMiXG4gICAgICAgICAgICBwcm9wPSJwYXJlbnRfY2hhbm5lbF9uYW1lIj5cbiAgICAgICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICAgICAgdi1tb2RlbD0iY2hhbm5lbEZvcm0ucGFyZW50X2NoYW5uZWxpZCJcbiAgICAgICAgICAgICAgZmlsdGVyYWJsZVxuICAgICAgICAgICAgICBjbGVhcmFibGVcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IiJcbiAgICAgICAgICAgICAgQGNsZWFyPSJzZWFyY2hDaGFubmVsIlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hDaGFubmVsIj5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIHBhcmVudENoYW5uZWxMaXN0IlxuICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSJcbiAgICAgICAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i5YiG57G7IlxuICAgICAgICAgICAgY2xhc3M9InNlYXJjaC1sZWZ0Ij5cbiAgICAgICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICAgICAgdi1tb2RlbD0iY2hhbm5lbEZvcm0uY2hhbm5lbF90eXBlaWQiXG4gICAgICAgICAgICAgIGNsZWFyYWJsZVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgICAgICBAY2xlYXI9InNlYXJjaENoYW5uZWwiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaENoYW5uZWwiPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gY2hhbm5lbFR5cGVMaXN0IlxuICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSJcbiAgICAgICAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiLz5cbiAgICAgICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLnirbmgIEiXG4gICAgICAgICAgICBjbGFzcz0ic2VhcmNoLWxlZnQiPlxuICAgICAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgICAgICB2LW1vZGVsPSJjaGFubmVsRm9ybS5zdGF0ZSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IiJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoQ2hhbm5lbCI+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICB2YWx1ZT0iIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlhajpg6giLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMSJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5ZCv55SoIi8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9IjAiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuWBnOeUqCIvPlxuICAgICAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9IuW8gOWni+aXtumXtCJcbiAgICAgICAgICAgIGNsYXNzPSJkYXRlLWxlZnQiPlxuICAgICAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgICAgIDp0aXRsZT0iY2hhbm5lbEZvcm0uc3RhcnREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9ImNoYW5uZWxGb3JtLnN0YXJ0RGF0ZSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXpeacnyJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoQ2hhbm5lbCIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLnu5PmnZ/ml7bpl7QiXG4gICAgICAgICAgICBjbGFzcz0iZGF0ZS1sZWZ0IlxuICAgICAgICAgICAgc3R5bGU9ImxlZnQ6IDA7Ij5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9ImNoYW5uZWxGb3JtLmVuZERhdGUgfCBGb3JtYXREYXRlKFwneXl5eS1NTS1kZCBoaDptbVwnKSJcbiAgICAgICAgICAgICAgdi1tb2RlbD0iY2hhbm5lbEZvcm0uZW5kRGF0ZSJcbiAgICAgICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXpeacnyJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoQ2hhbm5lbCIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IDQwcHgiXG4gICAgICAgICAgICBAY2xpY2s9InNlYXJjaENoYW5uZWwiPlxuICAgICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICA8L2VsLWJ1dHRvbj5cbiAgICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9tYW5hZ2VDaGFubmVsL2NyZWF0ZSI+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uIHR5cGU9InByaW1hcnkiPlxuICAgICAgICAgICAgICDmt7vliqDpopHpgZNcbiAgICAgICAgICAgICAgPGkgY2xhc3M9ImVsLWljb24tcGx1cyBlbC1pY29uLS1yaWdodCIvPlxuICAgICAgICAgICAgPC9lbC1idXR0b24+XG4gICAgICAgICAgPC9yb3V0ZXItbGluaz5cbiAgICAgICAgPC9lbC1mb3JtPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz0idGFibGUtbGlzdCI+XG4gICAgICA8ZWwtdGFibGVcbiAgICAgICAgcmVmPSJjaGFubmVsVGFibGUiXG4gICAgICAgIDpkYXRhPSJ0YWJsZURhdGEiXG4gICAgICAgIHN0cmlwZVxuICAgICAgICBjbGFzcz0id2hvbGUtdGFibGUiXG4gICAgICAgIG1pbi1oZWlnaHQ9IjQwMCJcbiAgICAgICAgQGNlbGwtY2xpY2s9ImNlbGxDbGljayJcbiAgICAgICAgQGNlbGwtbW91c2UtbGVhdmU9ImNlbGxNb3VzZUxlYXZlIj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIHRhYmxlSGVhZGVyIlxuICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgIDpwcm9wPSJpdGVtLnByb3AiXG4gICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIlxuICAgICAgICAgIDp3aWR0aD0iaXRlbS53aWR0aCJcbiAgICAgICAgICA6Zm9ybWF0dGVyPSJpdGVtLmZvcm1hdHRlciJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIGZpeGVkXG4gICAgICAgICAgc2hvdy1vdmVyZmxvdy10b29sdGlwXG4gICAgICAgIC8+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBmaXhlZD0icmlnaHQiXG4gICAgICAgICAgbGFiZWw9IuaTjeS9nCJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIHdpZHRoPSIxMDAiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBjb250ZW50PSLkv67mlLnnirbmgIEiICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3AiPlxuICAgICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgICAgdHlwZT0idGV4dCJcbiAgICAgICAgICAgICAgICBzaXplPSJzbWFsbCJcbiAgICAgICAgICAgICAgICBpY29uPSJlbC1pY29uLXJlbW92ZS1vdXRsaW5lIlxuICAgICAgICAgICAgICAgIEBjbGljaz0iY2hhbmdlU3RhdGUoc2NvcGUucm93KSIvPlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IlxuICAgICAgICAgICAgICBzaXplPSJzbWFsbCJcbiAgICAgICAgICAgICAgaWNvbj0iZWwtaWNvbi1lZGl0IlxuICAgICAgICAgICAgICBAY2xpY2s9ImhhbmRsZUVkaXQoc2NvcGUucm93KSIvPlxuICAgICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IlxuICAgICAgICAgICAgICBzaXplPSJzbWFsbCJcbiAgICAgICAgICAgICAgaWNvbj0iZWwtaWNvbi1kZWxldGUiXG4gICAgICAgICAgICAgIEBjbGljaz0iaGFuZGxlRGVsZXRlKHNjb3BlLnJvdykiLz5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgIDwvZWwtdGFibGU+XG4gICAgICA8ZGl2IGNsYXNzPSJwYWdpbmF0aW9uIj5cbiAgICAgICAgPGVsLXBhZ2luYXRpb25cbiAgICAgICAgICA6dG90YWw9InRvdGFsIlxuICAgICAgICAgIDpwYWdlLXNpemVzPSJbMTAsIDIwLCAzMCwgNDBdIlxuICAgICAgICAgIDpjdXJyZW50LXBhZ2U9InBhZ2VObyJcbiAgICAgICAgICBiYWNrZ3JvdW5kXG4gICAgICAgICAgbGF5b3V0PSJ0b3RhbCwgc2l6ZXMsIHByZXYsIHBhZ2VyLCBuZXh0IlxuICAgICAgICAgIEBzaXplLWNoYW5nZT0iaGFuZGxlU2l6ZUNoYW5nZSJcbiAgICAgICAgICBAY3VycmVudC1jaGFuZ2U9ImhhbmRsZUN1cnJlbnRDaGFuZ2UiLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IENpcmNsZVRpdGxlIGZyb20gXCdAL2NvbXBvbmVudHMvY29tbW9ucy9jaXJjbGVUaXRsZVwnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9jaGFubmVsQXBpXCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlXG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjaGFubmVsRm9ybToge1xuICAgICAgICBjaGFubmVsX25hbWU6IFwnXCcsXG4gICAgICAgIGNoYW5uZWxfdHlwZWlkOiBcJ1wnLFxuICAgICAgICBzdGF0ZTogXCdcJyxcbiAgICAgICAgc29ydDogXCcxXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJyxcbiAgICAgICAgcGFyZW50X2NoYW5uZWxpZDogXCdcJ1xuICAgICAgfSxcbiAgICAgIGNsaWNrQ2VsbEluZGV4OiAtMSxcbiAgICAgIHRhYmxlSGVhZGVyOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2NoYW5uZWxfbmFtZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+mikemBk+WQjVwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3BhcmVudF9jaGFubmVsX25hbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfniLbnuqfpopHpgZNcJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbCwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFjZWxsVmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwn5pegXCdcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBjZWxsVmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2NoYW5uZWxfdHlwZV9uYW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5YiG57G7XCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwndXBkYXRldGltZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+abtOaWsOaXpeacn1wnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnRm9ybWF0RGF0ZVwnXShjZWxsVmFsdWUsIFwneXl5eS1NTS1kZCBoaDptbVwnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnaWNvbl91cmxcJyxcbiAgICAgICAgICBsYWJlbDogXCflm77moIfpu5jorqRcJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxpbWcgY2xhc3M9XCd0b3BpYy10YWJsZS1waWNcJyBzcmM9e2NlbGxWYWx1ZX0vPlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnZGVzY3JpcHRpb25cJyxcbiAgICAgICAgICBsYWJlbDogXCfpopHpgZPmj4/ov7BcJyxcbiAgICAgICAgICB3aWR0aDogXCcxMDBcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdzdGF0ZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+eKtuaAgVwnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAocGFyc2VJbnQoY2VsbFZhbHVlKSA9PT0gMSkge1xuICAgICAgICAgICAgICByZXR1cm4gXCflkK/nlKhcJ1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwn5YGc55SoXCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2ZpeGVkXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5L2N572u5Zu65a6aXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChjZWxsVmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwn5Zu65a6aXCdcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBcJ+S4jeWbuuWumlwnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdzb3J0XCcsXG4gICAgICAgICAgbGFiZWw6IFwn5LyY5YWI57qnXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdGhpcy5jbGlja0NlbGxJbmRleCkge1xuICAgICAgICAgICAgICByZXR1cm4gPGlucHV0IHR5cGU9XCd0ZXh0XCcgaWQ9ImlucHV0IiBjbGFzcz1cJ3NlbGYtc29ydFwnIHZhbHVlPSB7Y2VsbFZhbHVlfSBhdXRvZm9jdXM9ImF1dG9mb2N1cyIgLz5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiA8c3BhbiBjbGFzcz1cJ3NvcnQtY29udGFpbmVyXCcgZGF0YS1pZD17aW5kZXh9PntjZWxsVmFsdWV9PC9zcGFuPlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIHRhYmxlRGF0YTogW10sXG4gICAgICBjaGFubmVsVHlwZUxpc3Q6IFtdLFxuICAgICAgc29ydFZhbHVlOiAtMSxcbiAgICAgIHBhZ2VObzogMSxcbiAgICAgIHBhZ2VTaXplOiAxMCxcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgcGFyZW50Q2hhbm5lbExpc3Q6IFtdLFxuICAgICAgc2VsZWN0Q2hhbm5lbElkOiBcJ1wnIC8vIOeCueWHu+aOkuW6j+ihjOeahGNoYW5uZWxpZFxuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBcJ2NoYW5uZWxGb3JtLmNoYW5uZWxfbmFtZVwnICh2YWwpIHtcbiAgICAgIHRoaXMuc2VhcmNoQ2hhbm5lbCgpXG4gICAgfVxuICB9LFxuICBtb3VudGVkICgpIHtcbiAgICAvKiog6I635Y+W6aKR6YGT5YiX6KGoICoqL1xuICAgIHRoaXMuZ2V0Q2hhbm5lbExpc3QoKVxuICAgIC8qKiDojrflj5bpopHpgZPnsbvlnosgKiovXG4gICAgdGhpcy5nZXRDaGFubmVsVHlwZSgpXG4gICAgdGhpcy5nZXRQYXJlbnRDaGFubmVsKClcblxuICAgIHRoaXMuJHJvb3QuZXZlbnRIdWIuJG9uKFwncmVzZXQtb3B0aW9uc1wnLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlc2V0T3B0aW9ucygpXG4gICAgfSlcbiAgfSxcbiAgYWN0aXZhdGVkICgpIHtcbiAgICBsZXQgbWV0YSA9IHRoaXMuJHJvdXRlLm1ldGFcbiAgICBpZiAobWV0YS5oYXNPd25Qcm9wZXJ0eShcJ3JlZnJlc2hcJykgJiYgbWV0YS5yZWZyZXNoKSB7XG4gICAgICB0aGlzLmdldENoYW5uZWxMaXN0KClcbiAgICAgIGRlbGV0ZSB0aGlzLiRyb3V0ZS5tZXRhLnJlZnJlc2hcbiAgICB9XG4gIH0sXG4gIGJlZm9yZVJvdXRlTGVhdmUgKHRvLCBmcm9tLCBuZXh0KSB7XG4gICAgaWYgKHRvLnBhdGggPT09IFwnL21hbmFnZUNoYW5uZWwvY3JlYXRlXCcpIHtcbiAgICAgIHRoaXMucmVzZXRPcHRpb25zKClcbiAgICB9XG4gICAgbmV4dCgpXG4gIH0sXG4gIGJlZm9yZURlc3Ryb3kgKCkge1xuICAgIHRoaXMuJHJvb3QuZXZlbnRIdWIuJG9mZihcJ3Jlc2V0LW9wdGlvbnNcJylcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHJlc2V0T3B0aW9ucyAoKSB7XG4gICAgICB0aGlzLmNoYW5uZWxGb3JtID0ge1xuICAgICAgICBjaGFubmVsX25hbWU6IFwnXCcsXG4gICAgICAgIGNoYW5uZWxfdHlwZWlkOiBcJ1wnLFxuICAgICAgICBzdGF0ZTogXCdcJyxcbiAgICAgICAgc29ydDogXCcxXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJyxcbiAgICAgICAgcGFyZW50X2NoYW5uZWxpZDogXCdcJ1xuICAgICAgfVxuICAgICAgdGhpcy5wYWdlTm8gPSAxXG4gICAgICB0aGlzLmNsaWNrQ2VsbEluZGV4ID0gLTFcbiAgICAgIHRoaXMuc29ydFZhbHVlID0gLTFcbiAgICAgIHRoaXMuZ2V0Q2hhbm5lbExpc3QoKVxuICAgIH0sXG4gICAgZ2V0Q2hhbm5lbExpc3QgKCkge1xuICAgICAgbGV0IHRpbWVTdGFydCA9IHRoaXMuY2hhbm5lbEZvcm0uc3RhcnREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5jaGFubmVsRm9ybS5zdGFydERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIGxldCB0aW1lRW5kID0gdGhpcy5jaGFubmVsRm9ybS5lbmREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5jaGFubmVsRm9ybS5lbmREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBBY3Rpb25zLmdldENoYW5uZWxMaXN0KHtcbiAgICAgICAgXCdwYWdlTm9cJzogdGhpcy5wYWdlTm8sXG4gICAgICAgIFwncGFnZVNpemVcJzogdGhpcy5wYWdlU2l6ZSxcbiAgICAgICAgXCdjaGFubmVsX25hbWVcJzogdGhpcy5jaGFubmVsRm9ybS5jaGFubmVsX25hbWUsXG4gICAgICAgIFwnY2hhbm5lbF90eXBlaWRcJzogdGhpcy5jaGFubmVsRm9ybS5jaGFubmVsX3R5cGVpZCxcbiAgICAgICAgXCdzdGF0ZVwnOiB0aGlzLmNoYW5uZWxGb3JtLnN0YXRlLFxuICAgICAgICBcJ3RpbWVTdGFydFwnOiB0aW1lU3RhcnQsXG4gICAgICAgIFwndGltZUVuZFwnOiB0aW1lRW5kLFxuICAgICAgICBcJ3BhcmVudF9jaGFubmVsaWRcJzogdGhpcy5jaGFubmVsRm9ybS5wYXJlbnRfY2hhbm5lbGlkXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBsaXN0RGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gbGlzdERhdGEubGlzdFxuICAgICAgICAgIHRoaXMudG90YWwgPSBsaXN0RGF0YS50b3RhbFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgaGFuZGxlU2l6ZUNoYW5nZSAocGFnZVNpemUpIHtcbiAgICAgIHRoaXMucGFnZVNpemUgPSBwYWdlU2l6ZVxuICAgICAgdGhpcy5zZWFyY2hDaGFubmVsKClcbiAgICB9LFxuICAgIGhhbmRsZUN1cnJlbnRDaGFuZ2UgKHBhZ2VJbmRleCkge1xuICAgICAgdGhpcy5wYWdlTm8gPSBwYWdlSW5kZXhcbiAgICAgIHRoaXMuZ2V0Q2hhbm5lbExpc3QoKVxuICAgIH0sXG4gICAgdG9nZ2xlQWxsU2VsZWN0aW9uIChlKSB7XG4gICAgICB0aGlzLiRyZWZzLmNoYW5uZWxUYWJsZS50b2dnbGVBbGxTZWxlY3Rpb24oKVxuICAgIH0sXG4gICAgLyoqIOWNleWFg+agvOiiq+eCueWHuyAqKi9cbiAgICBjZWxsQ2xpY2sgKHJvdywgY29sdW1uLCBjZWxsLCBldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCdzb3J0LWNvbnRhaW5lclwnKSkge1xuICAgICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgICAgbGV0IGlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuaWRcbiAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xpY2tDZWxsSW5kZXggPSBwYXJzZUludChpZClcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGlucHV0RWxlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCcuZWwtdG9vbHRpcCA+IGlucHV0LnNlbGYtc29ydFwnKVxuICAgICAgICAgICAgaW5wdXRFbGVzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgLyoqIOWwhmNoYW5uZWxfaWTlrZjlgqjotbfmnaXmoIfor4bljZXlhYPooYwgKiovXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RDaGFubmVsSWQgPSByb3cuY2hhbm5lbGlkXG4gICAgICAgICAgICAgICAgZWxlbWVudC5mb2N1cygpXG4gICAgICAgICAgICAgICAgZWxlbWVudC5vbmtleXVwID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc29ydFZhbHVlID0gcGFyc2VJbnQoZWxlbWVudC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwn5ZCv55So54q25oCB5LiL5LiN6IO95o6S5bqPIVwnXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOemu+W8gOWNleWFg+agvCAqKi9cbiAgICBjZWxsTW91c2VMZWF2ZSAocm93LCBjb2x1bW4sIGNlbGwsIGV2ZW50KSB7XG4gICAgICAvKiog6YeN572u5Y2V5YWD5qC854q25oCBICoqL1xuICAgICAgdGhpcy5jbGlja0NlbGxJbmRleCA9IC0xXG4gICAgICBpZiAodGhpcy5zb3J0VmFsdWUgPT09IC0xIHx8IHRoaXMuc2VsZWN0Q2hhbm5lbElkICE9PSByb3cuY2hhbm5lbGlkKSByZXR1cm4gZmFsc2VcbiAgICAgIC8qKiDkv67mlLnmjpLluo8gKiovXG4gICAgICBBY3Rpb25zLmNoYW5nZUNoYW5uZWxTb3J0KHtcbiAgICAgICAgXCdjaGFubmVsXCc6IHtcbiAgICAgICAgICBcJ2NoYW5uZWxpZFwnOiByb3cuY2hhbm5lbGlkLFxuICAgICAgICAgIFwnc29ydFwnOiB0aGlzLnNvcnRWYWx1ZVxuICAgICAgICB9XG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLmdldENoYW5uZWxMaXN0KClcbiAgICAgICAgICB0aGlzLnNvcnRWYWx1ZSA9IC0xXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog57yW6L6R5pe26I635Y+W5Y2V5YWD5qC85pWw5o2uICoqL1xuICAgIGhhbmRsZUVkaXQ6IGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcJ2NoYW5uZWxpZFwnLCByb3cuY2hhbm5lbGlkKVxuICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7cGF0aDogXCcvbWFuYWdlQ2hhbm5lbC9lZGl0XCd9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn5ZCv55So54q25oCB5LiL5LiN5Y+v57yW6L6RIVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog5L+u5pS554q25oCBICoqL1xuICAgIGNoYW5nZVN0YXRlIChyb3cpIHtcbiAgICAgIGxldCBzdGF0ZSA9IDBcbiAgICAgIGlmIChyb3cuc3RhdGUgPT09IDEpIHtcbiAgICAgICAgc3RhdGUgPSAwXG4gICAgICB9IGVsc2UgaWYgKHJvdy5zdGF0ZSA9PT0gMCkge1xuICAgICAgICBzdGF0ZSA9IDFcbiAgICAgIH1cbiAgICAgIEFjdGlvbnMuY2hhbmdlQ2hhbm5lbFN0YXRlKHtcbiAgICAgICAgXCdjaGFubmVsXCc6IHtcbiAgICAgICAgICBcJ2NoYW5uZWxpZFwnOiByb3cuY2hhbm5lbGlkLFxuICAgICAgICAgIFwnc3RhdGVcJzogc3RhdGVcbiAgICAgICAgfVxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCcsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IFwn5L+u5pS554q25oCB5Li65YGc55SoXCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogXCfkv67mlLnnirbmgIHkuLrlkK/nlKhcJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5nZXRDaGFubmVsTGlzdCgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog5Yig6Zmk6aKR6YGTICoqL1xuICAgIGhhbmRsZURlbGV0ZSAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIHRoaXMuJGNvbmZpcm0oXCfmmK/lkKbliKDpmaQiXCcgKyByb3cuY2hhbm5lbF9uYW1lICsgXCciP1wnLCBcJ+aPkOekulwnLCB7XG4gICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwn56Gu5a6aXCcsXG4gICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCflj5bmtohcJyxcbiAgICAgICAgICB0eXBlOiBcJ3dhcm5pbmdcJ1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICBBY3Rpb25zLmRlbGV0ZUNoYW5uZWwoe1xuICAgICAgICAgICAgXCdjaGFubmVsXCc6IHtcbiAgICAgICAgICAgICAgXCdjaGFubmVsaWRcJzogcm93LmNoYW5uZWxpZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+WIoOmZpOaIkOWKnyFcJ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nZXRDaGFubmVsTGlzdCgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn5ZCv55So54q25oCB5LiL5LiN5Y+v5Yig6ZmkIVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog6I635Y+W6aKR6YGT57G75YirICoqL1xuICAgIGdldENoYW5uZWxUeXBlICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0Q2hhbm5lbFR5cGUoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YVxuICAgICAgICBpZiAoZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gZGF0YS5yZXN1bHRcbiAgICAgICAgICByZXN1bHQuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICAgICAgbGV0IG5ld0l0ZW0gPSB7fVxuICAgICAgICAgICAgbmV3SXRlbS5sYWJlbCA9IGl0ZW0uY2hhbm5lbF90eXBlX25hbWVcbiAgICAgICAgICAgIG5ld0l0ZW0udmFsdWUgPSBpdGVtLmNoYW5uZWxfdHlwZWlkXG4gICAgICAgICAgICB0aGlzLmNoYW5uZWxUeXBlTGlzdC5wdXNoKG5ld0l0ZW0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDmkJzntKLpopHpgZMgKiovXG4gICAgc2VhcmNoQ2hhbm5lbCAoKSB7XG4gICAgICB0aGlzLnBhZ2VObyA9IDFcbiAgICAgIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ3N3YXBUaW1lXCddKHRoaXMuY2hhbm5lbEZvcm0pXG4gICAgICB0aGlzLmdldENoYW5uZWxMaXN0KClcbiAgICB9LFxuICAgIC8qKiDojrflj5bniLbpopHpgZMgKiovXG4gICAgZ2V0UGFyZW50Q2hhbm5lbCAoKSB7XG4gICAgICBBY3Rpb25zLmxpc3RVc2FibGVQYXJlbnRDaGFubmVsKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGFcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGxldCBuZXdJdGVtID0ge31cbiAgICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBpdGVtLmNoYW5uZWxfbmFtZVxuICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uY2hhbm5lbGlkXG4gICAgICAgICAgICB0aGlzLnBhcmVudENoYW5uZWxMaXN0LnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlPlxuICAuY2hhbm5lbCAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICAgIHdpZHRoOiA2MCU7XG4gIH1cbiAgLmNoYW5uZWwgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtIHtcbiAgICB3aWR0aDogMjAlO1xuICB9XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sIjYwTjYiOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJVR1VUIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjQ0NWEwZTg4IixhLCExLHt9KX0sIjZDcm0iOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJBT1FFIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjZhZDFhNDg5IixhLCExLHt9KX0sIjZNdUUiOmZ1bmN0aW9uKGUsbil7ZS5leHBvcnRzPSJkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQjRBQUFBQkdDQVlBQUFBdHRJbmhBQUFmdWtsRVFWUjRYdTNkWFhQak9IWUdZUGlqdTNmK1hDcjN1Wm5iVkc1VGxmM1pXenZUL3Y1SWdSWmxpZ0tKQTVxeUpmbnAydFJPYkJBOGVFaHBxK2J0QTF6ODg4L1hmNldVZmlaL0NKeUJ3UE5UU2c5M0tUMCtwdlQ2ZWdZTHNnUUNCQWdRSUVDQUFBRUNCQWdRSUVDQUFBRUNCQWdRSUhER0FwZVhLVjFkcFpRdTNoZDVNZmpuMXFVM1g3dmdYaTJYak91WnJTODQ4ZVN3OFMraTgyM0dCWWQzajJScUhkdWZ6MHdXZlViREtZclhYRzdlanRHOVNyZmVtNnN3cUo5dSs4N2xNVlByS1B5OC85SGVyNVpZek4xN3BxeTNoNU1lTHY3dno5ZUhpNVIrdEg2QWpDZHdsQUt2S2IyOHBIU2ZRK0NIdDMrT2ZwRWM1WG9VUllBQUFRSUVDQkFnUUlBQUFRSUVDQkFnUUlBQUFRSUV6bHdnQjhBNUNGNGpCRjZVQ2JRa243WHdyZkNzd2lGd3NJN1pZVHRKWit6RjZlc0wzdjR0WTV3WXZQUHpKY0hucU9SdGJkVlU5LzNDNnRESnBIWWk3eTJFc1pQcm4zby9JbDdqeHpWVFovY01waC92NDhVLy8zeTlTU245RVhzRmpDSndHZ0t2THlrOTNMLzkzL1B6NWtQUThzMTFHc3RVSlFFQ0JBZ1FJRUNBQUFFQ0JBZ1FJRUNBQUFFQ0JBZ1FPSG1CSEtaZFhaZER4U1dCYnZNMWpmbEI0L0JpV0RwWlkzRHlOVVBnWVMzQjIzZnYzR2VFd0R1MXpTVzdEVjNBYzEzS3hmVlBkT09XMWovYnVGdnFHcTZCejB3NGMrbXRBUGprdnhZdFlFb2did0g5OUpqUy9jMWJDSngzaEc3KzBzZExnQUFCQWdRSUVDQkFnQUFCQWdRSUVDQkFnQUFCQWdRSUhGemdjdE1GWEF6VmFpSFpxTHBGV1VEclBScEVtdGNVcUNVY0FIZEpiYjNZTmJ1QWQ4TGhGYnVBZCtZZExxblVvVnRZOHJDVU5VTGd1UzdnSXZ2U0x1QTV3L0tqRlFEWFgza2pUbGtnaDhBdnp5bmQzYVQwOUhUS0sxRTdBUUlFQ0JBZ1FJQUFBUUlFQ0JBZ1FJQUFBUUlFQ0JBNGI0SGNCZHh0QlYzNDB4THF0b3pkM2lvUWtnN0xhaHdlN3dKdW5IaHkrRTdhR1h0dnNsdmo3YjlQRjNBbUhBWE5jKy9aWk9OdWF4ZndiRXZ4MjNNdFRDa0FqcjN5UnAyNlFBNkI3MjlUZW54TUtZZkMvaEFnUUlBQUFRSUVDQkFnUUlBQUFRSUVDQkFnUUlBQUFRTEhKWEJ4bVZJK0R6aTB0WENsOU9ZUXVESDViQndlWDFQanhHc0d3RjJZMkJnQ2g1N1ZOKzBDTGk3N2M3cUFCY0RIOWRXbW1rTUt2T1J6Z2UvZXpnWE8vOXgva1IzeW51WW1RSUFBQVFJRUNCQWdRSUFBQVFJRUNCQWdRSUFBQVFJRTRnSTVBTzY2Z0pjRVphUGJOSWZBWFhBUXI3Vmg2R1FtY1V4bkFROXprNWExSFVVSTNCYzhLcnkwanMvWUNucTJjWGZKdTEzcEJCNU5LUUNPZjR5TlBBZUIzUDJiUStEN0hBSS9PeFA0SEo2cE5SQWdRSUFBQVFJRUNCQWdRSUFBQVFJRUNCQWdRSURBK1Fqa01MRS9EM2h1VmRGd056cHVlNitXNUxNdEx5Nkd3TFAxQld1WkhkYTRGZlNhWndIdnJLMnlsdWh6MnRZM2wrdzJoTUJybkFVOERNNkg3K3hFSnIzc0x6Y0lnTS9uUzg1S0RpT1FRK0RIaDdjdG9aOXpDTng5TWc5ekw3TVNJRUNBQUFFQ0JBZ1FJRUNBQUFFQ0JBZ1FJRUNBQUFFQ2JRSzVBemlId0xWUXNQYjdxV0N1V2sxRFp0QXdkSHZiY2QyZjFnVWN6RU8rSWdTT1BNdmg4NXcxQ3dUQVE0cW1FSGdpaUozc2dwNktvRnE3Z0NmVDVQZTNlVENsRHVEcWg5eUFzeFRJSWZEVDR5WUVmaElBbitWRHRpZ0NCQWdRSUVDQUFBRUNCQWdRSUVDQUFBRUNCQWdRT0ZtQmJpdm9xM3I1cmNGaGZjYjJ6S0FsQkM3Vis5RXU0SEFIY0RBQTdvUFdsblgxMTVSOG81M0FrV2M1SEZNY1B4WFFGZ3JiWnFvelhkSkZnNjhJZ1FNQjhPRHhDb0JESDNTRHpsSWdoOERQVHluZDNieDFBdnREZ0FBQkFnUUlFQ0JBZ0FBQkFnUUlFQ0JBZ0FBQkFnUUlISWRBRHZldXJ1dGR3SDIxYytGaEpGamNXWFZyOHRtUUdZZk95eDBXRTZ3bEhBSkg1OXVNQ3c3dktnNnRiV2JDNkhOYUVnSlAzYmJMY21jQzRHNWQ0NC9FVndiQXhZTGVDOXpVS2dBK2pxOHhWWHlaUUE2Qm4xTzZ6U0Z3N2dUMmh3QUJBZ1FJRUNCQWdBQUJBZ1FJRUNCQWdBQUJBZ1FJRURnS2dmNHM0Q1hCNEhBQjBldTMxN1NrbnB1TFdpNEpCYVY5TWNHSnd3RnduamM2NTBWNGFGZHRlRjBmRElHckFYQy94dEY5U3JkZDFBVThFUURQR3F5eEZYUzhDMWdBZkJUZllJcjRjb0VjQXVkTzRMd3R0RDhFQ0JBZ1FJQUFBUUlFQ0JBZ1FJQUFBUUlFQ0JBZ1FJREFjUWhFdDRMdXEvMnFUdUJncHJwRkRZZWxYYW9ZZXhiaEVEZzYzeGQwQVhmTERkUlhEWUVMSWUxY0FMeHozOExBblIvTkJMSEhjQlp3U2trQUhQdklHUFVkQklUQTMrRXBXeU1CQWdRSUVDQkFnQUFCQWdRSUVDQkFnQUFCQWdRSW5KSkE2MWJRVTBGd0pGVGNjd2tFa2NOcldvWTNCY0JkT2xsL2F0VWhsYTJPeDNmWUNWbnJ0OStPQ0szdENMdUFPK2E1Y0hmOHNDZldjTkFRT1BZTUJjQU43NnVoMzBCQUNQd05IcklsRWlCQWdBQUJBZ1FJRUNCQWdBQUJBZ1FJRUNCQWdNQkpDYlJ1QmQwdmJoekVOWWZBMVVSMW56RjZ5YUpPNWNEa2EzWUJMdzJBZDRMVUFWSHRyTjJkZkxXeTF2Q3pIWFVDbjN3WHNBRDRwTDY3Rkh0RUFrTGdJM29ZU2lGQWdBQUJBZ1FJRUNCQWdBQUJBZ1FJRUNCQWdBQUJBaW1scSt1VUxpK1hVZlJoNFdjRXdGMzRHU3d6MUNtN2s0cldKMTR6QU83dmx1dU1ybWw0emJqYXZmVTJocnkxK1lxZXA3QVZkR3MzZEQwRTFnRmMvNmdZOFIwRmNnaDhlNVBTc3pPQnYrUGp0MllDQkFnUUlFQ0FBQUVDQkFnUUlFQ0FBQUVDQkFnUU9ES0JpOHVVOG5uQXpTSHVaaDNWTTJQbjF0dVlmcllNTDYxbmNvM0JpZGNPZ2JjQmVzTTdFUTYzVzhQUFVRM1Y1eG9NZ1BPMDI5MmZaN2FCSG81N3YyQWZacmJEdS9TWEJGb2N4bVAzcnhVQU43eXJobjR6Z2VlblRRajg5TTBXYnJrRUNCQWdRSUFBQVFJRUNCQWdRSUFBQVFJRUNCQWdRT0FJQlpadUJUMWNTdGZOR2d4U3Q5ZTFqai9tTHVDZHBEUDJrSmR1QlIwS3QzVUJ2eitFNkpuQ0F1RFlpMnNVZ2FMQWEwcFBUeW5kNVU3Z1BnUmU4Q1ZQbHdBQkFnUUlFQ0JBZ0FBQkFnUUlFQ0JBZ0FBQkFnUUlFRmhISUhjQjV5QjQ2Wi9QMmc2NkpVNElkOHZtUlFjbkRuY0JCK2Y4cWhDNEZ0YUhRdVoralNPVXVmT0FhK2NWNzF3NzB6RTgrV3dQMndXc0EzanBGNFRydm9mQWF3NkJIMU82dTAzcFJRajhQUjY2VlJJZ1FJQUFBUUlFQ0JBZ1FJQUFBUUlFQ0JBZ1FJREEwUXJrUUMyZkIxd0xCbXNMYU80RURnYXYvWDFiaGg4aUFKN05kZXNkcEh0OGF3YkFYVzMxYzJ5M05kU2U5ZmozYTV3RlhLdnZJQUh3ekVNTGJRditYcFFBdVBZRjRQY0VjZ2o4K0pEU2ZRNkJuK04vdTRZY0FRSUVDQkFnUUlBQUFRSUVDQkFnUUlBQUFRSUVDQkFnc0w3QUdsdEI5eUZrTFZ6Y3FiNGwxVzJNRTVwQzRKbWdjS3c5V1hKakNMdzBBTzZkOStwcXVIL2tHYTBkQXUvZHN3QzUvZEZNbU4zVUFkd2pSYmFDbm10ZlRra0F2UDdYamhuUFVhQVBnYnRPNE9lUC84MmljelN5SmdJRUNCQWdRSUFBQVFJRUNCQWdRSUFBQVFJRUNCQWc4RmtDSDkwS2VoeE1Sa0xHNlBiTGxSeXZTUFRwQVhBSE1DZ2xFRzR2RFlIRGE1dXBvZlo4MWc2QXgrL0gxTFB2U3E0NE5vZkFVWWZwRUZnQS9GbGZSTzV6K2dJNUJNNWR3UGQzS2FYWHhyKzZjL3JMdHdJQ0JBZ1FJRUNBQUFFQ0JBZ1FJRUNBQUFFQ0JBZ1FJSEEwQW10dUJkMHZxaFl5SGpJQTNnc2NoOW5zZkxmbjdETTUxRm5BZ2J4NHA2NVFDRnlaZE83NUhPSXM0TFc2Z0tlZWJWNXVjY25SQUhqNzRvNWVnUXNkd0VmelJhV1EweEI0ZVhrN0QvangvalRxVlNVQkFnUUlFQ0JBZ0FBQkFnUUlFQ0JBZ0FBQkFnUUlFRGhYZ2N2TGxQSjIwTlhnZGdZZ0hCeE9oVzBWM0RXQzBza3piWU1QTmh3Q0I0cjkxbDNBMlh0cUsraktsdGJGOTJ5dTF6QWFBcGYvY29BTzRPQm53ekFDVzRIbjU1UnVmNmYwL0xqNVVlQUxFUjhCQWdRSUVDQkFnQUFCQWdRSUVDQkFnQUFCQWdRSUVDQ3d2a0FPZ0s4dVA3WnI1ekdGd0sxZHJwR3U1RU1Gd0JONTZPUkREamwvb0F1NHEyZDAvV1I0UGg1WHFMcnIwSzBFdTF1RHlMaUo4TGkxQzNobm5XVXZBZkQ2WHpWbVBIZUJ2UHR6RG4rN0VOaDV3T2YrdUsyUEFBRUNCQWdRSUVDQUFBRUNCQWdRSUVDQUFBRUNCSTVjNE9vNnBkd052UFRQSVVMWFlTMHRmV1NIcUtWNi84b1p0bVBYcFYzQU84SGxadElsM2MydFJrdEQ0R0lBM0MxaS8wM3JmclNnQzdpL3JEVUVyZ1RUQXVDbFh3YXUrOTRDK1R6Z3g0ZVU3bTVTeXR0Q2YyUjdpZTh0YWZVRUNCQWdRSUFBQVFJRUNCQWdRSUFBQVFJRUNCQWdRT0JqQWhlWEtWMGRZQ3ZvWVZVN09VQTFVWjBJQ0lQTERBZWNEWFZVaC9ZRHFnUGZGckUwQkQ3MFdjQTk4VTU5NVcyUzl3TGJ5V0dSN3Q3dGpVY1BPZENSM0FYTlUrOUdaQ3ZvL1RFQzRPQm56VEFDZXdJNUJNNEI4SVB6Z0wwZEJBZ1FJRUNBQUFFQ0JBZ1FJRUNBQUFFQ0JBZ1FJRURnU3dYeVZ0QzVDM2hwdzFia3VvK0V3TUZjZFdzWURvSHpGUTJUVjRQRzRGeExBK0N1M0ZJSGJTQms3WEdhbjlYRVBUdTNjVUJiZUl1TG5jQlRYY0RqNXhGWjY2YU0xaTdnUGN2M0NRVEFYL3B0NU9ZbkwvRHluTkpOZng1dzhFdng1QmR0QVFRSUVDQkFnQUFCQWdRSUVDQkFnQUFCQWdRSUVDQkE0QWdGY2hkd0RvS1gvSW1FaXYyODI3RU51VUREME80Mmh3aUFxelVNQjFRRzc1MjEyNEQrR1YzQWE1NEYzRCtQSFpLcEFIaXFqWGpnTTduK3FTdy8wZ1hjRmJtOWlRQzQ0WDAwbEVCUklHOEZuYzhEdGhXMEY0UUFBUUlFQ0JBZ1FJQUFBUUlFQ0JBZ1FJQUFBUUlFQ0h5ZFFBN1crazdnSlZXMGhNQjlLTGhLOTIyaDJFTUV3THNaWWVtbWc1OVYwK0xsMjBCdjdZYTNDd1NudzRwcnp5cmNaVHpYeVR1cWIyOW9zTHUzZUdid1JPZHh0VU83OXE2OFRTQUFYdklGNEJvQ1E0RzhGZlQ5YlVyM2R5bWwxN2F0RmtnU0lFQ0FBQUVDQkFnUUlFQ0FBQUVDQkFnUUlFQ0FBQUVDNndsODlEemdXckM0VitsRjI3YlRnVngxZTR0ekRvRkRBVzJXaUhhL0ZsNmhwVjNBVTdmTjg5VkM0Tzczd2Uyc3A3YlIvdEJXMEFMZzliNU16RVFnYndXZHU0Q2ZIZ1hBM2dZQ0JBZ1FJRUNBQUFFQ0JBZ1FJRUNBQUFFQ0JBZ1FJUENWQWg4NUQzaEpBTnhsZnNGa056aXM0MnNLZ0tkU3k4S0RxTmJRRDZnTzNLOHhjTW0yb25CQU8vTXl0Um9WeCtlaUp6cHloN2VPQk1EYnh4QUlnVmZmQ3RvVzBGLzV0ZVBlWnlud210TGpvNjJnei9MWldoUUJBZ1FJRUNCQWdBQUJBZ1FJRUNCQWdBQUJBZ1FJbkp6QTB2T0FvMEh1ZTRxNVN4TzUvaU1oNlRpUTNMbDdjT0xxc09HQTZ1RGxXMEd2MFFYY0JhNFROWVovWGdpQXQwSHU2TTJQaE1EYmNpb2g4Sm9COE5aQkIvREpmVmNwK01nRjhsYlFkemNwUGR3ZmVhSEtJMENBQUFFQ0JBZ1FJRUNBQUFFQ0JBZ1FJRUNBQUFFQ1p5NlF3N1dyNjNobjdwZ2pFdVJ1cjRtZUJidTVJSkNwdms5ZEdieFRaOFBFMWFGZjFBVzhEVEtIRDZURllQUWdQeElDVDkxMkx3UXVQZjl1SWVOaTlqOTB4UkI4YnJQWmlNV0ZNNERQL092TjhqNWI0UGtwcFp2ZktlWC9idm9maDg4dTFQMElFQ0JBZ0FBQkFnUUlFQ0JBZ0FBQkFnUUlFQ0JBZ01DWkMzenFlY0N0WGFnTjl1RnRqcXVwN3Z0TnEwTS9LUUR1Y3RMeDlzdWw0bVlLcnVVeFRaM0duN3dWZEhNQTNJRk52enliK1c0di92bm42MDFLNlkrRzk4eFFBZ1FtQkhJWDhNTmRTbmQzS2IyK0NJRzlLQVFJRUNCQWdBQUJBZ1FJRUNCQWdBQUJBZ1FJRUNCQTRDc0ZQdTA4NEVobjVnaWlHc0p1eG9jRHp1aUUvYnkxQi9OSklYQlRRRHRSYzlob3p2UVFXMEVmb2dzNHIyRStCQllBMTk1dHZ5ZlFLdkR5L040RjNIcXQ4UVFJRUNCQWdBQUJBZ1FJRUNCQWdBQUJBZ1FJRUNCQWdNQzZBcDl5SG5BZ2ZCMkdsSUhoVzRTbWNMTmg0dERRaVZDMDlJU1dycS9MTXovWUJWeWFZMWhqVThpOGRoZHdWOXlnbXNCYXE5bjcvTU1UQUsvN0ZXSTJBaW1sM0FYODhIWWU4SXN1WUs4RUFRSUVDQkFnUUlBQUFRSUVDQkFnUUlBQUFRSUVDQkQ0VW9HUG5BZGNDMS8zRmhaSVZaY0dwV3R2QlIwbzlTMjREQTBzaExnTlR6MFUwQzdvc200T2dZTmR3TjJ3NEZiVjNiQktKL0RVVnRDbFM3ZHJtdkp3Qm5ERG0yY29nUWFCSFB6ZS9rN3A2YkhoSWtNSkVDQkFnQUFCQWdRSUVDQkFnQUFCQWdRSUVDQkFnQUNCZ3dnc0RZRVBFUUQzQzh4ekI3UFY3cEp3QU53TmpqTldod1pENEwwdTNuZ0p4ZlZGQTliaGJacU1TcVl6YTkxcjRwMTZmcVVPNGdVQmNQOFlaNTlQK1pjNmdCdmZQY01KaEFUeVdjQ1B1b0JEVmdZUklFQ0FBQUVDQkFnUUlFQ0FBQUVDQkFnUUlFQ0FBSUhQRUxpOFRDbWZDZHdhNmphTnI2YXB1eXZ0dTBNamx6V0ZtNUVKTjZWVWh3WUQ0QzZ3REd5ZlBQZXNkN3FqcHp0Y1oxK1hLYWZ3ejROZHdQMTY5OG9zMUIwSnM2ZTZnQVhBbi9IdDRCNEVnZ0s1Qy9qbXI1U2VuOXIrcGsxd2VzTUlFQ0JBZ0FBQkFnUUlFQ0JBZ0FBQkFnUUlFQ0JBZ0FDQlJvRWNBRjlkdHY5NyswT0d3RjJRV09ud0hTNHpGR1JXVTkxZHVPcndZQWc4dDVWeDVGRWR4Vm5BUFVZcHlCMHRZcktMdTlEeHV6UW9ucVhYQVJ4NXJZd2hzS0xBYTByM2R5bmQzYVgwNml6Z0ZXRk5SWUFBQVFJRUNCQWdRSUFBQVFJRUNCQWdRSUFBQVFJRWxndGNYYWVVdTRGYi9qUUZ3SG5pYXFLNmUvZWQ3WVZucnEzVnNmZjdZQjNWWWNjVUFGZDhtNDJtdG9LZXVNL09zOXFNQ1lXN3BmbkdIZE1URDJLU1h3RGM4akUybHNBNkFzL1BteTdnNS9ZdEpkYXB3Q3dFQ0JBZ1FJQUFBUUlFQ0JBZ1FJQUFBUUlFQ0JBZ1FJREFVT0JUemdPdUpxcTd6MlJ5dCtOZ1FOalB0alFBTG1XVGUyL05tWVRBb1E3cUhpVFFCZHdOTFowSFBIVnRvVHQ0L0g2V1ByRU5JYkF6Z0gzbEVUaWtRTzc4dmIxNU93L1lId0lFQ0JBZ1FJQUFBUUlFQ0JBZ1FJQUFBUUlFQ0JBZ1FPQTRCSmFFd0xYTzBwMlZOUWJBK2RxNVMwSm40MjRLMkttem9ZN3EwR0FBM0R0ODVEemcwRmJRRmJSdzBGdHlHODQ5RHVFTHIvQ0hBdURDT3ByUEE5NnRVUUI4SEY4enFqaGJnZGUzOERlSHdQbE00S2IvY1RoYkZBc2pRSUFBQVFJRUNCQWdRSUFBQVFJRUNCQWdRSUFBQVFKZkw1QzNnYzVuQWtmLzNYMTAzSFpsMVVSMTM2QjJTVi9EWEMxTHU0QnI5KzZxYlFpQnZ6b0E3c3FkMmxJNTh2TitUS1VMZUR1c05HZnAyZ1hqWmtwNWU0a0V3Ri8vaGFLQzd5WHc4cHpTNzc5U3l0dEJOLytQdy9laXNsb0NCQWdRSUVDQUFBRUNCQWdRSUVDQUFBRUNCQWdRSVBDcEFqa0F6a0Z3OU4vZlI4Y1ZRcm5RdWtJaGJML2w4TXpnZzNZQjd3ZU94YlY5U2dCY3FhVXBLSjg2QzNncUxCNnN1c3ZGSi9meDN1ZUpoUFJUZnBPUC9mMFhPb0JEbnphRENIeEF3RGJRSDhCektRRUNCQWdRSUVDQUFBRUNCQWdRSUVDQUFBRUNCQWdRT0xEQVZRNkJyMkkzT1pZQXVNczk4N216TFoyc2dTV0dBdWhnRi9EVU5zYUJNcm9oYTJ3RFhacW52MytUWFNVRVBvb3U0RzZ4M2VvRXdOR1h6RGdDU3dWZU45dEEzOWtHZWltaDZ3Z1FJRUNBQUFFQ0JBZ1FJRUNBQUFFQ0JBZ1FJRUNBd01FRWNoRFlkd0xYYnRJVUFMOEhjclZwZDM0ZkNtRkhBV2t4YkIxT0ZKMjBjaFp4VjJnd0FPNkdWclpQcnNFTXI1KzFqM1pEajI1WWRScyt3OEJhSmp1Qng5Zm04SDY4K01wMjBhSEgyUWZBLy90ZnJ6ZFgxK21QNWhlMjlrVDhuZ0NCclVEZS92bjN2NTBEN0pVZ1FJQUFBUUlFQ0JBZ1FJQUFBUUlFQ0JBZ1FJQUFBUUxIS0pCenNxdnIyRmJRelpsYVEvZzZ6QnNqVHJVQWMvdjdoaHBDUTZ1SDByNVZ2MllBUERYZjFtbEJDQnpxQWg0K2xFb0kvS0VBZU9MaDc0VGdtOFhPUHFPTGRIdnhQLy81ZW5QOU0vM3g4MWRLVjVlUldEL3l1aGxEZ01CUUlHOEQzWjBEL09RejVzMGdRSUFBQVFJRUNCQWdRSUFBQVFJRUNCQWdRSUFBQVFMSEtCQU5nWTg5QU81dCt6b1BFZ0lIQStBdTB4eWxsYUdBZWZDQ3JMRVZkRGpvbmJydnpIcExuYm5GKzBXNmdEdXczVS9IVklnKzQzaDc4ZC8vOFhxVFV2b2o3Mi8rOHg4cFhmOTRPK3phSHdJRTFoTndEdkI2bG1ZaVFJQUFBUUlFQ0JBZ1FJQUFBUUlFQ0JBZ1FJQUFBUUtIRXNnWldkNE91aGJ5MW42L1UxOXI0dG5ZUzFhclpSZ0ExOGIyZFlkS0RtNEZmUlpkd01FQU9QdUZ1NEFuT3FUMzk0WXVoK2pWQVBqMU5mMlJDOG92ZFE2QWYvMGo5bklmNnNObFhnTG5KcERQQVg2NFMrbit6amJRNS9ac3JZY0FBUUlFQ0JBZ1FJQUFBUUlFQ0JBZ1FJQUFBUUlFemt1Z1B3KzRGcGJXZm45TUlYQlhTMy91YlA3dlFNSWJHQkkrRDNqTkVMaGErMFRoYzllRk9vU0RJZkIyV0ttT2hWM0EzZU1iWEZ0cHdIN3ZBTTRYNXBBcVg1eUQ0THdsOUk5ZktWMWNGZzRoUHEvUHNkVVFPTHpBYTBxUER5bmQzZ2lBRDQvdERnUUlFQ0JBZ0FBQkFnUUlFQ0JBZ0FBQkFnUUlFQ0JBNEdNQ09RU3VIWjFhRFNLSEpZVFMxTjJhV3k1cHJXVnZlK2dDVitqK3dTN2dQUDJhVzBIUHJuZkJXY0NsK29vLys4SVFlSEVBM0QzYjErNC9YUWljRDd2dXpnYk8yMEtIbnZMSFBreXVKbkRPQXZuODMzd084TXRMN0cvV25MT0Z0UkVnUUlBQUFRSUVDQkFnUUlBQUFRSUVDQkFnUUlBQWdXTVh5TWVuNWlCNDdrOXI4TnF5NXBab2Jta2RPNkZpNFlhaEdvSWg4SnBkd05seGNzMlZva1Bkdm9NSHRUTyswbm83UGc4NGRCYndncTJneC9jWnZWZTdIY0REWC9iZHdMbXc2NThwL2ZwbFcraVdENld4Qk1ZQ3o4OHAvZjYzQU5pYlFZQUFBUUlFQ0JBZ1FJQUFBUUlFQ0JBZ1FJQUFBUUlFVGtHZzJ6VTNoOENYODlXR3c5ZFFtcnA3cjVaTHduWGtXNVRDM3VFV3c1dC9EdDkvWVFnY25uL0RzdGRGUERYQmlsM0FIVmNwK0swRTVvZllDbnJidVQxNkpVZWxUQWZBL1hWNzIwTC8zR3dMM2ZwRVR1R1RyRVlDQnhSNGVVN3Bid0h3QVlWTlRZQUFBUUlFQ0JBZ1FJQUFBUUlFQ0JBZ1FJQUFBUUlFMWhYSWdWdmVNWGZKK2JIRlNocnp0Y2Job2JOOXQzVUZRdEs4N2xBTmxjN1kvcDZmMWdXY2J6aFJlQzBvTDlZNDFYSzdZZ2pjVFRXZWJ5YW9uK2tDcmdmQTNRUFpiQXVkendQTzdlNTVXK2pySDg0SFh2Y3J4R3puTHBDM2ZzNGR3TGtUdVBibGN1NFcxa2VBQUFFQ0JBZ1FJRUNBQUFFQ0JBZ1FJRUNBQUFFQ0JFNUZvQllDTi8wNy8xQ2EraTdUT0x3dGZ3aE1QdXc0RFoyNzJ6RG44UGtITHRzT1AvWXU0RnpvT0E4UGJRVTlGYmFQY0VwbkFRL3ZtVklLQnNBYjB0d05uQ3ZPNXdIbkFQaEhQaC80MnZuQXAvSUZwYzZ2RlJBQWY2Mi91eE1nUUlBQUFRSUVDQkFnUUlBQUFRSUVDQkFnUUlBQWdhVUNjeUZ3VXdBOFN1b2k5YlNFbzkzMDBRdWk0emFCWnUyODRDNzFETXo1MFM3ZzhScER3WFFCdXRycE83cW1lQmJ3eFBNczdoaGQ2KzdkL0w1SU9CRUNUMHpaRmdEMzYzUStjT1RqYUF5QlhZRWNBSGRiUU9zQTltb1FJRUNBQUFFQ0JBZ1FJRUNBQUFFQ0JBZ1FJRUNBQUlHVEU4aG5BZWN6Z2FjQ3gwTUVyeFA1NHF4ZHVJNkd5ZmVDeGo2c0xDV1FsUkI0MHEvaGphaUcwZjFjUzJ1cGJSODlzLy95K05ZN1Eyc2g4RlNBSDl3S2V2Tklsd1hBWGVIOXR0QzVJL2d5cGV1ZmIxdEQ1Mzl1ZXJFYUhxYWhCRTVad0JuQXAvejAxRTZBQUFFQ0JBZ1FJRUNBQUFFQ0JBZ1FJRUNBQUFFQ0JONXlzS2tRdUNrZkMzVEtEcjFiaGpmVnNVa01hODkyNnY1N1Fld0h1b0NEcFd4TFhTTUVYaExtZDljRWd0eCtQYk1CY0duUmpWdEJGMHI1UUFEYzgrWnRvVGZGNVJmKzU4K1VmdnpjbkEvYzhqYlczaXkvSjNEaUFzOVBLZjMrSzZYY0Nkejg1WHZpYTFjK0FRSUVDQkFnUUlBQUFRSUVDQkFnUUlBQUFRSUVDQkE0RjRHY2g1VWFJcHYrM2YrQ0RLM2xra1BVVXJ2LzlwN0JadEdQYmdXOVJnRGNSWnd6M2JXbGQzWTcvb3U3Z0tmT0FtNCtBM2p1ZzltZEQ3eEJFZ1NmeTFlWWRhd3A4UGlRMHUxdkFmQ2FwdVlpUUlBQUFRSUVDQkFnUUlBQUFRSUVDQkFnUUlBQUFRSmZJVEFWQXZkWldiaW1XcW82bWlnNi9CQUJjTGUyeU1KeUIycy9jUGpQaFdzL0VnS0hBK0JLNFl1N2dNZnpsb0xrd1pvUHNSVjBYL3ZvMWl0MEFJOGVWaDhFZHkzd2x5bjkrSlhTang4NmdpT2ZCMlBPVnlCL0xoN3VVN3EvRlFDZjcxTzJNZ0lFQ0JBZ1FJQUFBUUlFQ0JBZ1FJQUFBUUlFQ0JENFRnSTVCTDY2M0U5RncrRnJLRTNkRlcyOVpPMWF3dmNmRE53SmFyUFg1cytubmdXYzd6bFQvT0lRT0xBVmRLbFJ1SGkvd2x6RmtrYy9MSFFDcng4QTl3OU5FUHlkdnVLc3RTYVFQdzkzdHlrOTNMMmRueDM3S3pLMVdmMmVBQUVDQkFnUUlFQ0FBQUVDQkFnUUlFQ0FBQUVDQkFnUStFcUJxN3dkOU5WdUJlSFF0UkpLbHRZVkRtQTNGNGRyYVpnNFBMU3l0ZkxGekZiUjRYc010bkN1cm5YbEFMaDdmSG5PdGJhQ0xyd1BvYUI0YVBEMjNBOFhBUGN2cFNENEs3OTIzUHRZQkY1ZlV2cjlkMHI1SEdCL0NCQWdRSUFBQVFJRUNCQWdRSUFBQVFJRUNCQWdRSUFBZ2ZNUXlBRmR2eDMwY0VYVk1MSWYzSkowYnE2SlhoS3VvYkdXNlAxcnpYQzV2cW10b3NQM0dKM2hPN3ZteXFTdFp3Rm50cjBBdVB2aC9yczkyQkY3Kzh0UXVKdU5TaCtWaVM3Z3pZOFBId0QzTlFtQ3orT0x6Q3FXQ2VUZzkvZGZ0bjllcHVjcUFnUUlFQ0JBZ0FBQkFnUUlFQ0JBZ0FBQkFnUUlFQ0J3dkFLbEVQaFE0V3V2c0RRZ3JTb0dKdzRPcSs2SVdqekhkeE1NaCs5eGJDSHdST0hOSWZCd0crM3hnNXZ2cnY2OEFIZ2NCT2UyN254RzhNK2ZLZjM0Nll6ZzZnZk9nSk1WNk03L3ZkdWMvL3M2K05zc0o3c2loUk1nUUlBQUFRSUVDQkFnUUlBQUFRSUVDQkFnUUlBQUFRSkRnWEVJZk80QmNGNTdLS0JkMEhYYnpUMUlTN3RkbGdNMzY4ZFV4emJXVkp2dkkxM0FPMnZkZWFFRy8wOWpGL0NuYkFFOTlmSHZPNEs3RDhSbFN0Yy8zOExnaTZ1M2h4aDRqcjVaQ0p5RXdFcysvL2Z2bEI0ZlQ2SmNSUklnUUlBQUFRSUVDQkFnUUlBQUFRSUVDQkFnUUlBQUFRSUxCSEsrZFhYOUhsYldnc1B0TFJhRVlxMlhIS0tXVUEyQlFaSGErakdYNHpOM2h6bnA1bDZSK2VhQ3lQSDFrZmxhUXVBeFNYVXI2SDVkcFhleXZCVjAxd0g4a0ZMNnNlQTlYdVdTblNBNGZ6QitwUFRqVjByNTBPeWR2YjlYdVp0SkNIeXVRSDYvOC9iUE4zL2Ivdmx6NWQyTkFBRUNCQWdRSUVDQUFBRUNCQWdRSUVDQUFBRUNCQWg4dnNEaUVEaVhHZ2hMaHl0cUhCN3FvdTNtRDA0Y0hCYWFMeEt5OXFVTnU0TzM1WTdDMytwOE04VlBYVHMzWjBzQVhDS2VEWUVidDRKT0Yra3hCOEQvU2luOS9QeVB3UFFkODJIWjE5ZHZXME1QLzZiRU1kV29GZ0lSZ1J3QTM5K21kSCtmVW5xTlhHRU1BUUlFQ0JBZ1FJQUFBUUlFQ0JBZ1FJQUFBUUlFQ0JBZ2NNb0NlZWZiM09pWWc5UnFFRGxjYURoUmZidW9jZmhCYWduWEVCZ1l0U3AyMEc0NmcvdGRocXR6Tlc0RFhmWE96L3B5OU5aTzNHUDQ0KzFPMTZXeGhZSGpXeFJmaEl2MDhQKzEzaEdua1ZUNzZBQUFBQUJKUlU1RXJrSmdnZz09In0sIjZOemsiOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uY2ljbGUtY29udHJvbGxlcltkYXRhLXYtMjEzMWY1MmNdIHtcbiAgbWFyZ2luLXRvcDogNCU7XG59XG4uY3JlYXRlIC5zb3J0IHNwYW5bZGF0YS12LTIxMzFmNTJjXXtcbiAgY29sb3I6ICM5MDkwOTA7XG59XG4uY3JlYXRlIC5yZXNpZGVuY2VfdGltZSBzcGFuW2RhdGEtdi0yMTMxZjUyY117XG4gIGNvbG9yOiAjOTA5MDkwO1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VTdGFydHBhZ2Uvc3JjL2NvbXBvbmVudHMvbWFuYWdlU3RhcnRwYWdlL3N0YXJ0cGFnZUNyZWF0ZS52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBd0xBO0VBQ0EsZUFBQTtDQUNBO0FBQ0E7RUFDQSxlQUFBO0NBQ0E7QUFDQTtFQUNBLGVBQUE7Q0FDQSIsZmlsZToic3RhcnRwYWdlQ3JlYXRlLnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9InN0YXJ0cGFnZSBjcmVhdGUiPlxuICAgIDxjaXJjbGUtdGl0bGVcbiAgICAgIHRpdGxlLW5hbWU9IuWQr+WKqOmhteaWsOWiniJcbiAgICAgIGNsYXNzPSJjaWNsZS1jb250cm9sbGVyIlxuICAgIC8+XG4gICAgPGVsLWZvcm1cbiAgICAgIHJlZj0iZWRpdEZvcm0iXG4gICAgICA6bW9kZWw9ImVkaXRGb3JtIlxuICAgICAgOnJ1bGVzPSJydWxlcyJcbiAgICAgIGxhYmVsLXdpZHRoPSIxMDBweCJcbiAgICAgIGNsYXNzPSJydWxlLWZvcm0iPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgbGFiZWw9IuWbvuagh+mFjee9riJcbiAgICAgICAgcHJvcD0iaW1nX3VybCI+XG4gICAgICAgIDxlbC11cGxvYWRcbiAgICAgICAgICA6YWN0aW9uPSJnZXRVcGxvYWRVcmwiXG4gICAgICAgICAgOmhlYWRlcnM9InVwbG9hZEhlYWRlcnMiXG4gICAgICAgICAgOnNob3ctZmlsZS1saXN0PSJmYWxzZSJcbiAgICAgICAgICA6b24tc3VjY2Vzcz0iaGFuZGxlUGNBdmF0YXJTdWNjZXNzIlxuICAgICAgICAgIDpiZWZvcmUtdXBsb2FkPSJiZWZvcmVBdmF0YXJVcGxvYWQiXG4gICAgICAgICAgY2xhc3M9ImF2YXRhci11cGxvYWRlciI+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgdi1pZj0iZWRpdEZvcm0uaW1nX3VybCJcbiAgICAgICAgICAgIDpzcmM9ImVkaXRGb3JtLmltZ191cmwiXG4gICAgICAgICAgICBjbGFzcz0iYXZhdGFyIj5cbiAgICAgICAgICA8aVxuICAgICAgICAgICAgdi1lbHNlXG4gICAgICAgICAgICBjbGFzcz0iZWwtaWNvbi1wbHVzIGF2YXRhci11cGxvYWRlci1pY29uIi8+XG4gICAgICAgIDwvZWwtdXBsb2FkPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLpk77mjqXlnLDlnYAiPlxuICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICB2LW1vZGVsLnRyaW09ImVkaXRGb3JtLmp1bXBfdXJsIi8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuacieaViOacnyJcbiAgICAgICAgY2xhc3M9InZhbGlkaXR5IlxuICAgICAgICByZXF1aXJlZD5cbiAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgdi1tb2RlbD0iZWRpdEZvcm0udmFsaWRpdHkiXG4gICAgICAgICAgOmNsZWFyYWJsZT0iZmFsc2UiXG4gICAgICAgICAgOmRpc2FibGVkPSJpc0Nob29zZURhdGUiXG4gICAgICAgICAgc3R5bGU9IndpZHRoOjEwMCUiXG4gICAgICAgICAgdHlwZT0iZGF0ZXRpbWVyYW5nZSJcbiAgICAgICAgICBmb3JtYXQ9Inl5eXktTU0tZGQgSEg6bW0iXG4gICAgICAgICAgcmFuZ2Utc2VwYXJhdG9yPSLoh7MiXG4gICAgICAgICAgc3RhcnQtcGxhY2Vob2xkZXI9IuW8gOWni+aXpeacnyJcbiAgICAgICAgICBlbmQtcGxhY2Vob2xkZXI9Iue7k+adn+aXpeacnyIvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLpqbvnlZnml7bpl7QiXG4gICAgICAgIHByb3A9InJlc2lkZW5jZV90aW1lIlxuICAgICAgICBjbGFzcz0icmVzaWRlbmNlX3RpbWUiPlxuICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICB2LW1vZGVsLm51bWJlcj0iZWRpdEZvcm0ucmVzaWRlbmNlX3RpbWUiXG4gICAgICAgICAgc3R5bGU9IndpZHRoOiA3NSUiLz5cbiAgICAgICAgPHNwYW4+czwvc3Bhbj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5o6S5bqPIlxuICAgICAgICBwcm9wPSJzb3J0IlxuICAgICAgICBjbGFzcz0ic29ydCJcbiAgICAgICAgcmVxdWlyZWQ+XG4gICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgIHYtbW9kZWwubnVtYmVyPSJlZGl0Rm9ybS5zb3J0IlxuICAgICAgICAgIHN0eWxlPSJ3aWR0aDogNzUlIi8+XG4gICAgICAgIDxzcGFuPuaPkOekuu+8muaVsOWtl+i2iuWwj+i2iuW+gOWJjTwvc3Bhbj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbT5cbiAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgQGNsaWNrPSJzdWJtaXRGb3JtKFwnZWRpdEZvcm1cJykiPuaPkOS6pDwvZWwtYnV0dG9uPlxuICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9tYW5hZ2VTdGFydHBhZ2UvbGlzdCI+XG4gICAgICAgICAgPGVsLWJ1dHRvbj7lj5bmtog8L2VsLWJ1dHRvbj5cbiAgICAgICAgPC9yb3V0ZXItbGluaz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgIDwvZWwtZm9ybT5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCBDaXJjbGVUaXRsZSBmcm9tIFwnQC9jb21wb25lbnRzL2NvbW1vbnMvY2lyY2xlVGl0bGVcJ1xuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tIFwnQC9hcGkvc3RhcnRwYWdlQXBpXCdcbmltcG9ydCB1cGxvYWRIZWFkZXJzIGZyb20gXCdAL21peGluc1wnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBDaXJjbGVUaXRsZVxuICB9LFxuICBcbiAgbWl4aW5zOiBbdXBsb2FkSGVhZGVyc10sXG5cbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVkaXRGb3JtOiB7XG4gICAgICAgIGltZ191cmw6IFwnXCcsXG4gICAgICAgIGNoYW5uZWxCZWxvbmc6IFwnMVwnLFxuICAgICAgICBqdW1wX3VybDogXCdcJyxcbiAgICAgICAgdmFsaWRpdHk6IFtuZXcgRGF0ZSgpLCBuZXcgRGF0ZSgpXSxcbiAgICAgICAgc29ydDogXCdcJyxcbiAgICAgICAgcmVzaWRlbmNlX3RpbWU6IFwnXCdcbiAgICAgIH0sXG4gICAgICBpc0Nob29zZURhdGU6IGZhbHNlLFxuICAgICAgZGlhbG9nVmlzaWJsZTogZmFsc2UsXG4gICAgICBjb21wb25lbnROYW1lOiBcJ0FkZE1hbnVzY3JpcHRcJyxcbiAgICAgIHJ1bGVzOiB7XG4gICAgICAgIGltZ191cmw6IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+S4iuS8oOWQr+WKqOmhteWbvueJh1wnLCB0cmlnZ2VyOiBcJ2NoYW5nZVwnIH1cbiAgICAgICAgXSxcbiAgICAgICAgdmFsaWRpdHk6IFtcbiAgICAgICAgICB7IHR5cGU6IFwnZGF0ZVwnLCByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogXCfor7fpgInmi6nml7bpl7RcJywgdHJpZ2dlcjogXCdjaGFuZ2VcJyB9XG4gICAgICAgIF0sXG4gICAgICAgIHJlc2lkZW5jZV90aW1lOiBbXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogXCfor7fovpPlhaXpqbvnlZnml7bpl7RcJywgdHJpZ2dlcjogXCdjaGFuZ2VcJyB9LFxuICAgICAgICAgIHt0eXBlOiBcJ251bWJlclwnLCBtZXNzYWdlOiBcJ+mpu+eVmeaXtumXtOW/hemhu+S4uuaVsOWtl1wnfVxuICAgICAgICBdLFxuICAgICAgICBzb3J0OiBbXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogXCfor7fovpPlhaXmjpLluo9cJywgdHJpZ2dlcjogXCdibHVyXCcgfSxcbiAgICAgICAgICB7dHlwZTogXCdudW1iZXJcJywgbWVzc2FnZTogXCfmjpLluo/lv4XpobvkuLrmlbDlrZdcJ31cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBnZXRVcGxvYWRVcmwgKCkge1xuICAgICAgcmV0dXJuIEFjdGlvbnMudXBsb2FkUGljdHVyZSgpXG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgc3VibWl0Rm9ybSAoZm9ybU5hbWUpIHtcbiAgICAgIHRoaXMuJHJlZnNbZm9ybU5hbWVdLnZhbGlkYXRlKCh2YWxpZCkgPT4ge1xuICAgICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgICBBY3Rpb25zLmFkZFN0YXJ0cGFnZSh7XG4gICAgICAgICAgICBcJ2FwcEFkdlwnOiB7XG4gICAgICAgICAgICAgIFwnaW1nX3VybFwnOiB0aGlzLmVkaXRGb3JtLmltZ191cmwsXG4gICAgICAgICAgICAgIFwnanVtcF91cmxcJzogdGhpcy5lZGl0Rm9ybS5qdW1wX3VybCxcbiAgICAgICAgICAgICAgXCdyZXNpZGVuY2VfdGltZVwnOiB0aGlzLmVkaXRGb3JtLnJlc2lkZW5jZV90aW1lLFxuICAgICAgICAgICAgICBcJ3NvcnRcJzogdGhpcy5lZGl0Rm9ybS5zb3J0LFxuICAgICAgICAgICAgICBcJ2V4cGlyeV9kYXRlX3N0YXJ0XCc6IG5ldyBEYXRlKHRoaXMuZWRpdEZvcm0udmFsaWRpdHlbMF0pLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgXCdleHBpcnlfZGF0ZV9lbmRcJzogbmV3IERhdGUodGhpcy5lZGl0Rm9ybS52YWxpZGl0eVsxXSkuZ2V0VGltZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHtwYXRoOiBcJy9tYW5hZ2VTdGFydHBhZ2UvbGlzdFwnfSlcbiAgICAgICAgICAgICAgdGhpcy4kbm90aWZ5KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCfpgJrnn6VcJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+e8lui+keaIkOWKn1wnLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcJ2Vycm9yIHN1Ym1pdCEhXCcpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBoYW5kbGVQY0F2YXRhclN1Y2Nlc3MgKHJlcywgZmlsZSkge1xuICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgbGV0IGltYWdlVXJsID0gcmVzLnJlc3VsdFxuICAgICAgICB0aGlzLmVkaXRGb3JtLmltZ191cmwgPSBpbWFnZVVybFxuICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlQXZhdGFyVXBsb2FkIChmaWxlKSB7XG4gICAgICBsZXQgaW1hZ2VPYmogPSB7XG4gICAgICAgIFwnaW1hZ2UvanBlZ1wnOiB0cnVlLFxuICAgICAgICBcJ2ltYWdlL3BuZ1wnOiB0cnVlLFxuICAgICAgICBcJ2ltYWdlL2pwZ1wnOiB0cnVlXG4gICAgICB9XG4gICAgICBjb25zdCBpc0ltYWdlID0gZmlsZS50eXBlIGluIGltYWdlT2JqXG4gICAgICBjb25zdCBpc0x0Mk0gPSBmaWxlLnNpemUgLyAxMDI0IC8gMTAyNCA8IDJcbiAgICAgIGlmICghaXNJbWFnZSkge1xuICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKFwn6K+35LiK5Lyg5Zu+54mH5qC85byP55qE5paH5Lu2IVwnKVxuICAgICAgfVxuICAgICAgaWYgKCFpc0x0Mk0pIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihcJ+S4iuS8oOWbvueJh+Wkp+Wwj+S4jeiDvei2hei/hyAyTUIhXCcpXG4gICAgICB9XG4gICAgICByZXR1cm4gaXNJbWFnZSAmJiBpc0x0Mk1cbiAgICB9XG4gIH1cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5jaWNsZS1jb250cm9sbGVyIHtcbiAgICBtYXJnaW4tdG9wOiA0JTtcbiAgfVxuICAuY3JlYXRlIC5zb3J0IHNwYW57XG4gICAgY29sb3I6ICM5MDkwOTA7XG4gIH1cbiAgLmNyZWF0ZSAucmVzaWRlbmNlX3RpbWUgc3BhbntcbiAgICBjb2xvcjogIzkwOTA5MDtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LCI4Q3BHIjpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLmNpY2xlLWNvbnRyb2xsZXJbZGF0YS12LTU5NzU5OGY4XSB7XG4gIG1hcmdpbi10b3A6IDQlO1xufVxuLmNyZWF0ZSAuc29ydCBzcGFuW2RhdGEtdi01OTc1OThmOF17XG4gIGNvbG9yOiAjOTA5MDkwO1xufVxuLmNyZWF0ZSAucmVzaWRlbmNlX3RpbWUgc3BhbltkYXRhLXYtNTk3NTk4Zjhde1xuICBjb2xvcjogIzkwOTA5MDtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlU3RhcnRwYWdlL3NyYy9jb21wb25lbnRzL21hbmFnZVN0YXJ0cGFnZS9zdGFydHBhZ2VFZGl0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUF3TkE7RUFDQSxlQUFBO0NBQ0E7QUFDQTtFQUNBLGVBQUE7Q0FDQTtBQUNBO0VBQ0EsZUFBQTtDQUNBIixmaWxlOiJzdGFydHBhZ2VFZGl0LnZ1ZSIsc291cmNlc0NvbnRlbnQ6WyI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJzdGFydHBhZ2UgY3JlYXRlXCI+XG4gICAgPGNpcmNsZS10aXRsZVxuICAgICAgdGl0bGUtbmFtZT1cIuWQr+WKqOmhtee8lui+kVwiXG4gICAgICBjbGFzcz1cImNpY2xlLWNvbnRyb2xsZXJcIlxuICAgIC8+XG4gICAgPGVsLWZvcm1cbiAgICAgIHJlZj1cImVkaXRGb3JtXCJcbiAgICAgIDptb2RlbD1cImVkaXRGb3JtXCJcbiAgICAgIDpydWxlcz1cInJ1bGVzXCJcbiAgICAgIGxhYmVsLXdpZHRoPVwiMTAwcHhcIlxuICAgICAgY2xhc3M9XCJydWxlLWZvcm1cIj5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgY2xhc3M9XCJpdGVtXCJcbiAgICAgICAgbGFiZWw9XCLlm77moIfphY3nva5cIiA+XG4gICAgICAgIDxlbC11cGxvYWRcbiAgICAgICAgICA6YWN0aW9uPVwiZ2V0VXBsb2FkVXJsXCJcbiAgICAgICAgICA6aGVhZGVycz1cInVwbG9hZEhlYWRlcnNcIlxuICAgICAgICAgIDpzaG93LWZpbGUtbGlzdD1cImZhbHNlXCJcbiAgICAgICAgICA6b24tc3VjY2Vzcz1cImhhbmRsZVBjQXZhdGFyU3VjY2Vzc1wiXG4gICAgICAgICAgOmJlZm9yZS11cGxvYWQ9XCJiZWZvcmVBdmF0YXJVcGxvYWRcIlxuICAgICAgICAgIGNsYXNzPVwiYXZhdGFyLXVwbG9hZGVyXCI+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgdi1pZj1cImVkaXRGb3JtLmltZ191cmxcIlxuICAgICAgICAgICAgOnNyYz1cImVkaXRGb3JtLmltZ191cmxcIlxuICAgICAgICAgICAgY2xhc3M9XCJhdmF0YXJcIj5cbiAgICAgICAgICA8aVxuICAgICAgICAgICAgdi1lbHNlXG4gICAgICAgICAgICBjbGFzcz1cImVsLWljb24tcGx1cyBhdmF0YXItdXBsb2FkZXItaWNvblwiLz5cbiAgICAgICAgPC9lbC11cGxvYWQ+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9XCLpk77mjqXlnLDlnYBcIj5cbiAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgdi1tb2RlbD1cImVkaXRGb3JtLmp1bXBfdXJsXCIvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPVwi5pyJ5pWI5pyfXCJcbiAgICAgICAgY2xhc3M9XCJ2YWxpZGl0eVwiXG4gICAgICAgIHJlcXVpcmVkPlxuICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICB2LW1vZGVsPVwiZWRpdEZvcm0udmFsaWRpdHlcIlxuICAgICAgICAgIDpjbGVhcmFibGU9XCJmYWxzZVwiXG4gICAgICAgICAgOmRpc2FibGVkPVwiaXNDaG9vc2VEYXRlXCJcbiAgICAgICAgICBzdHlsZT1cIndpZHRoOjEwMCVcIlxuICAgICAgICAgIHR5cGU9XCJkYXRldGltZXJhbmdlXCJcbiAgICAgICAgICBmb3JtYXQ9XCJ5eXl5LU1NLWRkIEhIOm1tXCJcbiAgICAgICAgICByYW5nZS1zZXBhcmF0b3I9XCLoh7NcIlxuICAgICAgICAgIHN0YXJ0LXBsYWNlaG9sZGVyPVwi5byA5aeL5pel5pyfXCJcbiAgICAgICAgICBlbmQtcGxhY2Vob2xkZXI9XCLnu5PmnZ/ml6XmnJ9cIi8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9XCLpqbvnlZnml7bpl7RcIlxuICAgICAgICBwcm9wPVwicmVzaWRlbmNlX3RpbWVcIlxuICAgICAgICBjbGFzcz1cInJlc2lkZW5jZV90aW1lXCI+XG4gICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgIHYtbW9kZWwubnVtYmVyPVwiZWRpdEZvcm0ucmVzaWRlbmNlX3RpbWVcIlxuICAgICAgICAgIHN0eWxlPVwid2lkdGg6IDc1JVwiLz5cbiAgICAgICAgPHNwYW4+czwvc3Bhbj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD1cIuaOkuW6j1wiXG4gICAgICAgIHByb3A9XCJzb3J0XCJcbiAgICAgICAgY2xhc3M9XCJzb3J0XCJcbiAgICAgICAgcmVxdWlyZWQ+XG4gICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgIHYtbW9kZWwubnVtYmVyPVwiZWRpdEZvcm0uc29ydFwiXG4gICAgICAgICAgc3R5bGU9XCJ3aWR0aDogNzUlXCIvPlxuICAgICAgICA8c3Bhbj7mj5DnpLrvvJrmlbDlrZfotorlsI/otorlvoDliY08L3NwYW4+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW0+XG4gICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiXG4gICAgICAgICAgQGNsaWNrPVwic3VibWl0Rm9ybSgnZWRpdEZvcm0nKVwiPuaPkOS6pDwvZWwtYnV0dG9uPlxuICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgQGNsaWNrPVwiZ290b0xpc3RcIj7lj5bmtog8L2VsLWJ1dHRvbj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgIDwvZWwtZm9ybT5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCBDaXJjbGVUaXRsZSBmcm9tICdAL2NvbXBvbmVudHMvY29tbW9ucy9jaXJjbGVUaXRsZSdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSAnQC9hcGkvc3RhcnRwYWdlQXBpJ1xuaW1wb3J0IHVwbG9hZEhlYWRlcnMgZnJvbSAnQC9taXhpbnMnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBDaXJjbGVUaXRsZVxuICB9LFxuXG4gIG1peGluczogW3VwbG9hZEhlYWRlcnNdLFxuICBcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVkaXRGb3JtOiB7XG4gICAgICAgIGltZ191cmw6ICcnLFxuICAgICAgICBjaGFubmVsQmVsb25nOiAnMScsXG4gICAgICAgIGp1bXBfdXJsOiAnJyxcbiAgICAgICAgdmFsaWRpdHk6IFtdLFxuICAgICAgICBzb3J0OiAnJyxcbiAgICAgICAgcmVzaWRlbmNlX3RpbWU6ICcnXG4gICAgICB9LFxuICAgICAgaXNDaG9vc2VEYXRlOiBmYWxzZSxcbiAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlLFxuICAgICAgY29tcG9uZW50TmFtZTogJ0FkZE1hbnVzY3JpcHQnLFxuICAgICAgcnVsZXM6IHtcbiAgICAgICAgdmFsaWRpdHk6IFtcbiAgICAgICAgICB7IHR5cGU6ICdkYXRlJywgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICfor7fpgInmi6nml7bpl7QnLCB0cmlnZ2VyOiAnY2hhbmdlJyB9XG4gICAgICAgIF0sXG4gICAgICAgIHJlc2lkZW5jZV90aW1lOiBbXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogJ+ivt+i+k+WFpempu+eVmeaXtumXtCcsIHRyaWdnZXI6ICdjaGFuZ2UnIH0sXG4gICAgICAgICAge3R5cGU6ICdudW1iZXInLCBtZXNzYWdlOiAn6am755WZ5pe26Ze05b+F6aG75Li65pWw5a2XJ31cbiAgICAgICAgXSxcbiAgICAgICAgc29ydDogW1xuICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICfor7fovpPlhaXmjpLluo8nLCB0cmlnZ2VyOiAnYmx1cicgfSxcbiAgICAgICAgICB7dHlwZTogJ251bWJlcicsIG1lc3NhZ2U6ICfmjpLluo/lv4XpobvkuLrmlbDlrZcnfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgYWRpZDogJycsXG4gICAgICBpc1JlZnJlc2g6IHRydWVcbiAgICB9XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgZ2V0VXBsb2FkVXJsICgpIHtcbiAgICAgIHJldHVybiBBY3Rpb25zLnVwbG9hZFBpY3R1cmUoKVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgdGhpcy5nZXRFZGl0SW5mbygpXG4gIH0sXG4gIGJlZm9yZVJvdXRlTGVhdmUgKHRvLCBmcm9tLCBuZXh0KSB7XG4gICAgaWYgKHRvLnBhdGggPT09ICcvbWFuYWdlU3RhcnRwYWdlL2xpc3QnKSB7XG4gICAgICB0by5tZXRhLnJlZnJlc2ggPSB0aGlzLmlzUmVmcmVzaFxuICAgIH0gZWxzZSBpZiAodG8ucGF0aCA9PT0gJy9tYW5hZ2VTdGFydHBhZ2UvY3JlYXRlJykge1xuICAgICAgdGhpcy4kcm9vdC5ldmVudEh1Yi4kZW1pdCgncmVzZXQtb3B0aW9ucycpXG4gICAgfVxuICAgIG5leHQoKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZ290b0xpc3QgKCkge1xuICAgICAgdGhpcy5pc1JlZnJlc2ggPSBmYWxzZVxuICAgICAgdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6ICcvbWFuYWdlU3RhcnRwYWdlL2xpc3QnfSlcbiAgICB9LFxuICAgIGdldEVkaXRJbmZvICgpIHtcbiAgICAgIHRoaXMuYWRpZCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ2FkaWQnKVxuICAgICAgQWN0aW9ucy5nZXRTdGFydHBhZ2VCeUlEKHtcbiAgICAgICAgJ2FwcEFkdic6IHtcbiAgICAgICAgICAnYWRpZCc6IHRoaXMuYWRpZFxuICAgICAgICB9XG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgY29uc29sZS5sb2coZGF0YSlcbiAgICAgICAgICB0aGlzLmVkaXRGb3JtLmltZ191cmwgPSBkYXRhLmltZ191cmxcbiAgICAgICAgICB0aGlzLmVkaXRGb3JtLmp1bXBfdXJsID0gZGF0YS5qdW1wX3VybFxuICAgICAgICAgIHRoaXMuZWRpdEZvcm0ucmVzaWRlbmNlX3RpbWUgPSBkYXRhLnJlc2lkZW5jZV90aW1lXG4gICAgICAgICAgdGhpcy5lZGl0Rm9ybS5zb3J0ID0gZGF0YS5zb3J0XG4gICAgICAgICAgdGhpcy5lZGl0Rm9ybS52YWxpZGl0eS5wdXNoKGRhdGEuZXhwaXJ5X2RhdGVfc3RhcnQpXG4gICAgICAgICAgdGhpcy5lZGl0Rm9ybS52YWxpZGl0eS5wdXNoKGRhdGEuZXhwaXJ5X2RhdGVfZW5kKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgc3VibWl0Rm9ybSAoZm9ybU5hbWUpIHtcbiAgICAgIHRoaXMuJHJlZnNbZm9ybU5hbWVdLnZhbGlkYXRlKCh2YWxpZCkgPT4ge1xuICAgICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgICBBY3Rpb25zLmVkaXRTdGFydHBhZ2Uoe1xuICAgICAgICAgICAgJ2FwcEFkdic6IHtcbiAgICAgICAgICAgICAgJ2FkaWQnOiB0aGlzLmFkaWQsXG4gICAgICAgICAgICAgICdpbWdfdXJsJzogdGhpcy5lZGl0Rm9ybS5pbWdfdXJsLFxuICAgICAgICAgICAgICAnanVtcF91cmwnOiB0aGlzLmVkaXRGb3JtLmp1bXBfdXJsLFxuICAgICAgICAgICAgICAncmVzaWRlbmNlX3RpbWUnOiB0aGlzLmVkaXRGb3JtLnJlc2lkZW5jZV90aW1lLFxuICAgICAgICAgICAgICAnc29ydCc6IHRoaXMuZWRpdEZvcm0uc29ydCxcbiAgICAgICAgICAgICAgJ2V4cGlyeV9kYXRlX3N0YXJ0JzogbmV3IERhdGUodGhpcy5lZGl0Rm9ybS52YWxpZGl0eVswXSkuZ2V0VGltZSgpLFxuICAgICAgICAgICAgICAnZXhwaXJ5X2RhdGVfZW5kJzogbmV3IERhdGUodGhpcy5lZGl0Rm9ybS52YWxpZGl0eVsxXSkuZ2V0VGltZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHtwYXRoOiAnL21hbmFnZVN0YXJ0cGFnZS9saXN0J30pXG4gICAgICAgICAgICAgIHRoaXMuJG5vdGlmeSh7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICfpgJrnn6UnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICfnvJbovpHmiJDlip8nLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yIHN1Ym1pdCEhJylcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGhhbmRsZVBjQXZhdGFyU3VjY2VzcyAocmVzLCBmaWxlKSB7XG4gICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICBsZXQgaW1hZ2VVcmwgPSByZXMucmVzdWx0XG4gICAgICAgIHRoaXMuZWRpdEZvcm0uaW1nX3VybCA9IGltYWdlVXJsXG4gICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVBdmF0YXJVcGxvYWQgKGZpbGUpIHtcbiAgICAgIGxldCBpbWFnZU9iaiA9IHtcbiAgICAgICAgJ2ltYWdlL2pwZWcnOiB0cnVlLFxuICAgICAgICAnaW1hZ2UvcG5nJzogdHJ1ZSxcbiAgICAgICAgJ2ltYWdlL2pwZyc6IHRydWVcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlzSW1hZ2UgPSBmaWxlLnR5cGUgaW4gaW1hZ2VPYmpcbiAgICAgIGNvbnN0IGlzTHQyTSA9IGZpbGUuc2l6ZSAvIDEwMjQgLyAxMDI0IDwgMlxuICAgICAgaWYgKCFpc0ltYWdlKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+ivt+S4iuS8oOWbvueJh+agvOW8j+eahOaWh+S7tiEnKVxuICAgICAgfVxuICAgICAgaWYgKCFpc0x0Mk0pIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign5LiK5Lyg5Zu+54mH5aSn5bCP5LiN6IO96LaF6L+HIDJNQiEnKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlzSW1hZ2UgJiYgaXNMdDJNXG4gICAgfVxuICB9XG59XG48XC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuICAuY2ljbGUtY29udHJvbGxlciB7XG4gICAgbWFyZ2luLXRvcDogNCU7XG4gIH1cbiAgLmNyZWF0ZSAuc29ydCBzcGFue1xuICAgIGNvbG9yOiAjOTA5MDkwO1xuICB9XG4gIC5jcmVhdGUgLnJlc2lkZW5jZV90aW1lIHNwYW57XG4gICAgY29sb3I6ICM5MDkwOTA7XG4gIH1cbjwvc3R5bGU+XG4iXSxzb3VyY2VSb290OiIifV0pfSwiOGpoYiI6ZnVuY3Rpb24oZSxuKXt9LCI5d2NBIjpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLmNpY2xlLWNvbnRyb2xsZXJbZGF0YS12LTcyNmNjMTdjXSB7XG4gIG1hcmdpbi10b3A6IDQlO1xufVxuLmNyZWF0ZSAuc29ydCBzcGFuW2RhdGEtdi03MjZjYzE3Y117XG4gIGNvbG9yOiAjOTA5MDkwO1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VFdmVudC9zcmMvY29tcG9uZW50cy9tYW5hZ2VFdmVudC9ldmVudENyZWF0ZS52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBc1RBO0VBQ0EsZUFBQTtDQUNBO0FBQ0E7RUFDQSxlQUFBO0NBQ0EiLGZpbGU6ImV2ZW50Q3JlYXRlLnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9ImNoYW5uZWwgY3JlYXRlIj5cbiAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICB0aXRsZS1uYW1lPSLmnI3liqHmlrDlop4iXG4gICAgICBjbGFzcz0iY2ljbGUtY29udHJvbGxlciJcbiAgICAvPlxuICAgIDxlbC1mb3JtXG4gICAgICByZWY9ImNyZWF0ZUZyb20iXG4gICAgICA6bW9kZWw9ImNyZWF0ZUZyb20iXG4gICAgICA6cnVsZXM9InJ1bGVzIlxuICAgICAgbGFiZWwtd2lkdGg9IjEwMHB4IlxuICAgICAgY2xhc3M9InJ1bGUtZm9ybSI+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLmnI3liqHlkI3np7AiXG4gICAgICAgIHByb3A9ImFjdGl2aXR5X25hbWUiPlxuICAgICAgICA8ZWwtaW5wdXQgdi1tb2RlbC50cmltPSJjcmVhdGVGcm9tLmFjdGl2aXR5X25hbWUiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5b2S5bGe57G75YirIlxuICAgICAgICBwcm9wPSJ0eXBlX25hbWUiPlxuICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgdi1tb2RlbD0iY3JlYXRlRnJvbS50eXBlaWQiXG4gICAgICAgICAgOmNsZWFyYWJsZT0idHJ1ZSJcbiAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgIEBjaGFuZ2U9ImhhbmRsZUV2ZW50VHlwZShjcmVhdGVGcm9tLnR5cGVpZCkiPlxuICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIGV2ZW50VHlwZUxpc3QiXG4gICAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSJcbiAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5Zu+5qCH6YWN572uIlxuICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgcHJvcD0iaGVhZF9pbWciPlxuICAgICAgICA8ZWwtdXBsb2FkXG4gICAgICAgICAgOnNob3ctZmlsZS1saXN0PSJmYWxzZSJcbiAgICAgICAgICA6YWN0aW9uPSJnZXRVcGxvYWRVcmwiXG4gICAgICAgICAgOmhlYWRlcnM9InVwbG9hZEhlYWRlcnMiXG4gICAgICAgICAgOm9uLXN1Y2Nlc3M9ImhhbmRsZVBjQXZhdGFyU3VjY2VzcyJcbiAgICAgICAgICA6YmVmb3JlLXVwbG9hZD0iYmVmb3JlQXZhdGFyVXBsb2FkIlxuICAgICAgICAgIGNsYXNzPSJhdmF0YXItdXBsb2FkZXIiPlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIHYtaWY9ImNyZWF0ZUZyb20uaGVhZF9pbWciXG4gICAgICAgICAgICA6c3JjPSJjcmVhdGVGcm9tLmhlYWRfaW1nIlxuICAgICAgICAgICAgY2xhc3M9ImF2YXRhciI+XG4gICAgICAgICAgPGlcbiAgICAgICAgICAgIHYtZWxzZVxuICAgICAgICAgICAgY2xhc3M9ImVsLWljb24tcGx1cyBhdmF0YXItdXBsb2FkZXItaWNvbiIvPlxuICAgICAgICA8L2VsLXVwbG9hZD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5YmN56uv6ZO+5o6lIlxuICAgICAgICBwcm9wPSJhcHBfdXJsIj5cbiAgICAgICAgPGVsLWlucHV0IHYtbW9kZWwudHJpbT0iY3JlYXRlRnJvbS5hcHBfdXJsIi8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuWQjuerr+mTvuaOpSJcbiAgICAgICAgcHJvcD0ibWFuYWdlcl91cmwiPlxuICAgICAgICA8ZWwtaW5wdXQgdi1tb2RlbC50cmltPSJjcmVhdGVGcm9tLm1hbmFnZXJfdXJsIi8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IueKtuaAgemAieaLqSJcbiAgICAgICAgcHJvcD0ic3RhdGUiPlxuICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgdi1tb2RlbD0iY3JlYXRlRnJvbS5zdGF0ZSJcbiAgICAgICAgICBwbGFjZWhvbGRlcj0i6K+36YCJ5oupIj5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICA6dmFsdWU9IjEiXG4gICAgICAgICAgICBsYWJlbD0i5ZCv55SoIi8+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgOnZhbHVlPSIwIlxuICAgICAgICAgICAgbGFiZWw9IuWBnOeUqCIvPlxuICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5pyJ5pWI5pyfIlxuICAgICAgICBwcm9wPSJsaXZlUmFuZ2UiPlxuICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICB2LW1vZGVsPSJjcmVhdGVGcm9tLmxpdmVSYW5nZSJcbiAgICAgICAgICA6Y2xlYXJhYmxlPSJmYWxzZSJcbiAgICAgICAgICB0eXBlPSJkYXRldGltZXJhbmdlIlxuICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICBzdHlsZT0id2lkdGg6MTAwJSJcbiAgICAgICAgICByYW5nZS1zZXBhcmF0b3I9IuiHsyJcbiAgICAgICAgICBzdGFydC1wbGFjZWhvbGRlcj0i5byA5aeL5pel5pyfIlxuICAgICAgICAgIGVuZC1wbGFjZWhvbGRlcj0i57uT5p2f5pel5pyfIlxuICAgICAgICAgIEBjaGFuZ2U9ImNob29zZVRpbWUiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i6ZyA6KaB55m75b2VIlxuICAgICAgICBjbGFzcz0ic29ydCI+XG4gICAgICAgIDxlbC1yYWRpby1ncm91cFxuICAgICAgICAgIHYtbW9kZWw9ImNyZWF0ZUZyb20ubmVlZF9sb2dpbiI+XG4gICAgICAgICAgPGVsLXJhZGlvIDpsYWJlbD0idHJ1ZSI+5pivPC9lbC1yYWRpbz5cbiAgICAgICAgICA8ZWwtcmFkaW8gOmxhYmVsPSJmYWxzZSI+5ZCmPC9lbC1yYWRpbz5cbiAgICAgICAgPC9lbC1yYWRpby1ncm91cD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5o6S5bqPIlxuICAgICAgICBjbGFzcz0ic29ydCJcbiAgICAgICAgcHJvcD0ic29ydCI+XG4gICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgIHYtbW9kZWwubnVtYmVyPSJjcmVhdGVGcm9tLnNvcnQiXG4gICAgICAgICAgc3R5bGU9IndpZHRoOiA3NSUiLz5cbiAgICAgICAgPHNwYW4+5o+Q56S677ya5pWw5a2X6LaK5bCP6LaK5b6A5YmNPC9zcGFuPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtPlxuICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICBAY2xpY2s9InN1Ym1pdEZvcm0oXCdjcmVhdGVGcm9tXCcpIj7mj5DkuqQ8L2VsLWJ1dHRvbj5cbiAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvZXZlbnQvbGlzdCI+XG4gICAgICAgICAgPGVsLWJ1dHRvbj7lj5bmtog8L2VsLWJ1dHRvbj5cbiAgICAgICAgPC9yb3V0ZXItbGluaz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgIDwvZWwtZm9ybT5cbiAgICA8ZWwtZGlhbG9nXG4gICAgICA6dmlzaWJsZS5zeW5jPSJkaWFsb2dWaXNpYmxlIlxuICAgICAgdGl0bGU9IuiHquWumuS5ieacjeWKoSJcbiAgICAgIHdpZHRoPSI0MCUiXG4gICAgICBzdHlsZT0icGFkZGluZzogMjBweCA1MHB4IDIwcHggNTBweCJcbiAgICAgIEBjbG9zZT0iY2xvc2VEaWFsb2ciPlxuICAgICAgPGRpdlxuICAgICAgICA6aXM9ImNvbXBvbmVudE5hbWUiXG4gICAgICAgIEBzdWJtaXQtY3VzdG9tLWV2ZW50PSJzdWJtaXRDdXN0b21FdmVudCJcbiAgICAgICAgQGNhbmNlbC1jdXN0b20tZXZlbnQ9ImNhbmNlbEN1c3RvbUV2ZW50Ii8+XG4gICAgPC9lbC1kaWFsb2c+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlXCdcbmltcG9ydCBDdXN0b21FdmVudCBmcm9tIFwnQC9jb21wb25lbnRzL21hbmFnZUV2ZW50L2N1c3RvbUV2ZW50XCdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL2V2ZW50QXBpXCdcbmltcG9ydCB1cGxvYWRIZWFkZXJzIGZyb20gXCdAL21peGluc1wnXG5pbXBvcnQge2NvbnRyb2xUaW1lfSBmcm9tIFwnLi4vLi4vaGVscGVyc1wnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBDaXJjbGVUaXRsZSxcbiAgICBDdXN0b21FdmVudFxuICB9LFxuICBtaXhpbnM6IFt1cGxvYWRIZWFkZXJzXSxcbiAgZGF0YSAoKSB7XG4gICAgdmFyIGNoZWNrVXJsID0gKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaykgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICB2YXIgbWF0Y2ggPSAgL14oKGh0fGYpdHBzPyk6XFwvXFwvKFtcXHdcXC1dKyhcXC5bXFx3XFwtXSspKlxcLykqW1xcd1xcLV0rKFxcLltcXHdcXC1dKykqXFwvPyhcXD8oW1xcd1xcLVxcLixAP149JSY6XFwvflxcKyNdKikrKT8vXG4gICAgICBpZiAoIW1hdGNoLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoXCfor7fovpPlhaXmraPnoa7nmoTlnLDlnYBcJykpXG4gICAgICB9XG4gICAgICBjYWxsYmFjaygpXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVGcm9tOiB7XG4gICAgICAgIGFjdGl2aXR5X25hbWU6IFwnXCcsXG4gICAgICAgIHNvcnQ6IFwnXCcsXG4gICAgICAgIGhlYWRfaW1nOiBcJ1wnLFxuICAgICAgICB1cmw6IFwnXCcsXG4gICAgICAgIGFwcF91cmw6IFwnXCcsXG4gICAgICAgIG1hbmFnZXJfdXJsOiBcJ1wnLFxuICAgICAgICB0eXBlX25hbWU6IFwnXCcsXG4gICAgICAgIHN0YXRlOiAwLFxuICAgICAgICB0eXBlaWQ6IFwnXCcsXG4gICAgICAgIGxpdmVSYW5nZTogW25ldyBEYXRlKCksIG5ldyBEYXRlKCldLFxuICAgICAgICBuZWVkX2xvZ2luOiB0cnVlXG4gICAgICB9LFxuICAgICAgcnVsZXM6IHtcbiAgICAgICAgYWN0aXZpdHlfbmFtZTogW1xuICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6IFwn6K+36L6T5YWl5pyN5Yqh5ZCN56ewXCcsIHRyaWdnZXI6IFwnYmx1clwnIH1cbiAgICAgICAgXSxcbiAgICAgICAgc29ydDogW1xuICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6IFwn6K+36L6T5YWl5o6S5bqPXCcsIHRyaWdnZXI6IFwnYmx1clwnIH0sXG4gICAgICAgICAgeyB0eXBlOiBcJ251bWJlclwnLCBtZXNzYWdlOiBcJ+aOkuW6j+W/hemhu+S4uuaVsOWtl1wnIH1cbiAgICAgICAgXSxcbiAgICAgICAgaGVhZF9pbWc6IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+S4iuS8oOWbvueJh1wnLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9XG4gICAgICAgIF0sXG4gICAgICAgIGFwcF91cmw6IFtcbiAgICAgICAgICB7IHZhbGlkYXRvcjogY2hlY2tVcmwsIHRyaWdnZXI6IFwnYmx1clwnIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIGV2ZW50VHlwZUxpc3Q6IFtdLFxuICAgICAgZGlhbG9nVmlzaWJsZTogZmFsc2UsXG4gICAgICBjb21wb25lbnROYW1lOiBcJ1wnLFxuICAgICAgY3VzdG9tVHlwZUlkOiBcJzA5OTlcJ1xuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBnZXRVcGxvYWRVcmwgKCkge1xuICAgICAgcmV0dXJuIEFjdGlvbnMudXBsb2FkUGljdHVyZSgpXG4gICAgfVxuICB9LFxuICBtb3VudGVkICgpIHtcbiAgICB0aGlzLmdldEFjdGl2aXR5VHlwZSgpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBzdWJtaXRGb3JtIChmb3JtTmFtZSkge1xuICAgICAgdGhpcy4kcmVmc1tmb3JtTmFtZV0udmFsaWRhdGUoKHZhbGlkKSA9PiB7XG4gICAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICAgIHRoaXMuZXZlbnRUeXBlTGlzdC5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXRlbS52YWx1ZSA9PT0gdGhpcy5jcmVhdGVGcm9tLnR5cGVpZCkge1xuICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUZyb20udHlwZV9uYW1lID0gaXRlbS5sYWJlbFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgQWN0aW9ucy5hZGRBY3Rpdml0eSh7XG4gICAgICAgICAgICBcJ2FjdGl2aXR5XCc6IHtcbiAgICAgICAgICAgICAgXCdhY3Rpdml0eV9uYW1lXCc6IHRoaXMuY3JlYXRlRnJvbS5hY3Rpdml0eV9uYW1lLFxuICAgICAgICAgICAgICBcJ2hlYWRfaW1nXCc6IHRoaXMuY3JlYXRlRnJvbS5oZWFkX2ltZyxcbiAgICAgICAgICAgICAgXCdhcHBfdXJsXCc6IHRoaXMuY3JlYXRlRnJvbS5hcHBfdXJsLFxuICAgICAgICAgICAgICBcJ21hbmFnZXJfdXJsXCc6IHRoaXMuY3JlYXRlRnJvbS5tYW5hZ2VyX3VybCxcbiAgICAgICAgICAgICAgXCd0eXBlaWRcJzogdGhpcy5jcmVhdGVGcm9tLnR5cGVpZCxcbiAgICAgICAgICAgICAgXCd0eXBlX25hbWVcJzogdGhpcy5jcmVhdGVGcm9tLnR5cGVfbmFtZSxcbiAgICAgICAgICAgICAgXCdleHBpcnlfZGF0ZV9zdGFydFwnOiB0aGlzLmNyZWF0ZUZyb20ubGl2ZVJhbmdlWzBdLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgXCdleHBpcnlfZGF0ZV9lbmRcJzogdGhpcy5jcmVhdGVGcm9tLmxpdmVSYW5nZVsxXS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgIFwnc3RhdGVcJzogdGhpcy5jcmVhdGVGcm9tLnN0YXRlLFxuICAgICAgICAgICAgICBcJ3NvcnRcJzogdGhpcy5jcmVhdGVGcm9tLnNvcnQsXG4gICAgICAgICAgICAgIFwnbmVlZF9sb2dpblwnOiB0aGlzLmNyZWF0ZUZyb20ubmVlZF9sb2dpblxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7cGF0aDogXCcvZXZlbnQvbGlzdFwnfSlcbiAgICAgICAgICAgICAgdGhpcy4kbm90aWZ5KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCfpgJrnn6VcJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+a3u+WKoOaIkOWKn1wnLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcJ2Vycm9yIHN1Ym1pdCEhXCcpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBoYW5kbGVQY0F2YXRhclN1Y2Nlc3MgKHJlcywgZmlsZSkge1xuICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgbGV0IGltYWdlVXJsID0gcmVzLnJlc3VsdFxuICAgICAgICB0aGlzLmNyZWF0ZUZyb20uaGVhZF9pbWcgPSBpbWFnZVVybFxuICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlQXZhdGFyVXBsb2FkIChmaWxlKSB7XG4gICAgICBsZXQgaW1hZ2VPYmogPSB7XG4gICAgICAgIFwnaW1hZ2UvanBlZ1wnOiB0cnVlLFxuICAgICAgICBcJ2ltYWdlL3BuZ1wnOiB0cnVlLFxuICAgICAgICBcJ2ltYWdlL2pwZ1wnOiB0cnVlXG4gICAgICB9XG4gICAgICBjb25zdCBpc0ltYWdlID0gZmlsZS50eXBlIGluIGltYWdlT2JqXG4gICAgICBjb25zdCBpc0x0Mk0gPSBmaWxlLnNpemUgLyAxMDI0IC8gMTAyNCA8IDJcbiAgICAgIGlmICghaXNJbWFnZSkge1xuICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKFwn6K+35LiK5Lyg5Zu+54mH5qC85byP55qE5paH5Lu2IVwnKVxuICAgICAgfVxuICAgICAgaWYgKCFpc0x0Mk0pIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihcJ+S4iuS8oOWbvueJh+Wkp+Wwj+S4jeiDvei2hei/hyAyTUIhXCcpXG4gICAgICB9XG4gICAgICByZXR1cm4gaXNJbWFnZSAmJiBpc0x0Mk1cbiAgICB9LFxuICAgIC8qKiDojrflj5bmnI3liqHnsbvliKsgKiovXG4gICAgZ2V0QWN0aXZpdHlUeXBlICgpIHtcbiAgICAgIHRoaXMuZXZlbnRUeXBlTGlzdCA9IFtdXG4gICAgICBBY3Rpb25zLmdldEFjdGl2aXR5VHlwZSgpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhXG4gICAgICAgIGlmIChkYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCByZXN1bHQgPSBkYXRhLnJlc3VsdFxuICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXRlbS50eXBlX25hbWUgPT09IHRoaXMuY3JlYXRlRnJvbS50eXBlaWQpIHtcbiAgICAgICAgICAgICAgLyoqIOm7mOiupOmAieaLqeS4gOS4quexu+WeiyAqKi9cbiAgICAgICAgICAgICAgdGhpcy5jcmVhdGVGcm9tLnR5cGVpZCA9IGl0ZW0udHlwZWlkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbmV3SXRlbSA9IHt9XG4gICAgICAgICAgICBuZXdJdGVtLmxhYmVsID0gaXRlbS50eXBlX25hbWVcbiAgICAgICAgICAgIG5ld0l0ZW0udmFsdWUgPSBpdGVtLnR5cGVpZFxuICAgICAgICAgICAgdGhpcy5ldmVudFR5cGVMaXN0LnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICAgIGxldCBuZXdJdGVtID0ge31cbiAgICAgICAgICBuZXdJdGVtLmxhYmVsID0gXCfoh6rlrprkuYlcJ1xuICAgICAgICAgIG5ld0l0ZW0udmFsdWUgPSB0aGlzLmN1c3RvbVR5cGVJZFxuICAgICAgICAgIHRoaXMuZXZlbnRUeXBlTGlzdC5wdXNoKG5ld0l0ZW0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBjaG9vc2VUaW1lIChjaGFuZ2VUaW1lQXJyKSB7XG4gICAgICBjb250cm9sVGltZSh0aGlzLCB0aGlzLmNyZWF0ZUZyb20ubGl2ZVJhbmdlLCBjaGFuZ2VUaW1lQXJyKVxuICAgIH0sXG4gICAgaGFuZGxlRXZlbnRUeXBlICh0eXBlaWQpIHtcbiAgICAgIGlmICh0eXBlaWQgPT09IHRoaXMuY3VzdG9tVHlwZUlkKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlQ3VzdG9tQ2xpY2soKVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOeCueWHu+iHquWumuS5ieeahOWkhOeQhumAu+i+kSAqKi9cbiAgICBoYW5kbGVDdXN0b21DbGljayAoKSB7XG4gICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSB0cnVlXG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ0N1c3RvbUV2ZW50XCdcbiAgICB9LFxuICAgIGNsb3NlRGlhbG9nICgpIHtcbiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IGZhbHNlXG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ1wnXG4gICAgfSxcbiAgICBzdWJtaXRDdXN0b21FdmVudCAoY3VzdG9tRXZlbnROYW1lKSB7XG4gICAgICB0aGlzLmNsb3NlRGlhbG9nKClcbiAgICAgIHRoaXMuZ2V0QWN0aXZpdHlUeXBlKClcbiAgICAgIHRoaXMuY3JlYXRlRnJvbS50eXBlaWQgPSBjdXN0b21FdmVudE5hbWVcbiAgICB9LFxuICAgIGNhbmNlbEN1c3RvbUV2ZW50ICgpIHtcbiAgICAgIHRoaXMuY2xvc2VEaWFsb2coKVxuICAgICAgLy8gdGhpcy5jcmVhdGVGcm9tLnR5cGVpZCA9IFwnXCdcbiAgICB9XG4gIH1cblxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLmNpY2xlLWNvbnRyb2xsZXIge1xuICAgIG1hcmdpbi10b3A6IDQlO1xuICB9XG4gIC5jcmVhdGUgLnNvcnQgc3BhbntcbiAgICBjb2xvcjogIzkwOTA5MDtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LEFKc1Q6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoInpKZHEiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiMWYyYjQyMzEiLGEsITEse30pfSxBT1FFOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4ucGFnaW5hdGlvbltkYXRhLXYtNzc0OWMwNmRde1xuICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xuICAgICAgLW1zLWZsZXgtcGFjazoganVzdGlmeTtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG59XG4ubWFudVtkYXRhLXYtNzc0OWMwNmRde1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdpZHRoOiAzMHB4O1xuICBoZWlnaHQ6IDIwcHg7XG4gIGJvcmRlcjoxcHggc29saWQgcmdiYSgxODEsIDE4NCwgMjE3LCAxKTtcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcbiAgZm9udC1zaXplOiAxM3B4O1xuICBwYWRkaW5nOiAxcHggNXB4IDJweCA1cHg7XG4gIGNvbG9yOiByZ2JhKDE4MSwgMTg0LCAyMTcsIDEpO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG4ubWFudS11cC1hY3RpdmVbZGF0YS12LTc3NDljMDZkXXtcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyMzEsIDEyNSwgMCwgMSk7XG4gIGNvbG9yOnJnYmEoMjMxLCAxMjUsIDAsIDEpO1xufVxuLm1hbnUtYmFjay1hY3RpdmVbZGF0YS12LTc3NDljMDZkXXtcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyNDAsIDgsIDgsIDEpO1xuICBjb2xvcjpyZ2JhKDI0MCwgOCwgOCwgMSk7XG59XG4uZGVsZXRlLWFjdGl2ZVtkYXRhLXYtNzc0OWMwNmRde1xuICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTA1LCA3OCwgMjU1LCAxKTtcbiAgY29sb3I6IHJnYmEoMTA1LCA3OCwgMjU1LCAxKTtcbn1cbi5wYWdpbmF0aW9uW2RhdGEtdi03NzQ5YzA2ZF0ge1xuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgLXdlYmtpdC1ib3gtcGFjazogZW5kO1xufVxuLm1hbnVzY3JpcHQgLmFsbG93X2NvbW1lbnRbZGF0YS12LTc3NDljMDZkXSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmE1MDc7XG4gIHdpZHRoOiAyMHB4O1xuICBoZWlnaHQ6IDIwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgLW1vei1ib3JkZXItcmFkaXVzOiA1MCU7XG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xuICBmbG9hdDogbGVmdDtcbiAgbWFyZ2luLWxlZnQ6IDNweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuLm1hbnVzY3JpcHQgLmFsbG93X3NoYXJlW2RhdGEtdi03NzQ5YzA2ZF0ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTg4M0ZGO1xuICB3aWR0aDogMjBweDtcbiAgaGVpZ2h0OiAyMHB4O1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIC1tb3otYm9yZGVyLXJhZGl1czogNTAlO1xuICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgZmxvYXQ6IGxlZnQ7XG4gIG1hcmdpbi1sZWZ0OiAzcHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbi5tYW51c2NyaXB0IC5hbGxvd19saWtlW2RhdGEtdi03NzQ5YzA2ZF0ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjAwODA4O1xuICB3aWR0aDogMjBweDtcbiAgaGVpZ2h0OiAyMHB4O1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIC1tb3otYm9yZGVyLXJhZGl1czogNTAlO1xuICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgZmxvYXQ6IGxlZnQ7XG4gIG1hcmdpbi1sZWZ0OiAzcHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbi5tYW51c2NyaXB0IC5hbGxvd19jb2xsZWN0W2RhdGEtdi03NzQ5YzA2ZF0ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjk0RUZGO1xuICB3aWR0aDogMjBweDtcbiAgaGVpZ2h0OiAyMHB4O1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIC1tb3otYm9yZGVyLXJhZGl1czogNTAlO1xuICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgZmxvYXQ6IGxlZnQ7XG4gIG1hcmdpbi1sZWZ0OiAzcHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlTWFudXNjcmlwdC9zcmMvY29tcG9uZW50cy9tYW5hZ2VNYW51c2NyaXB0L21hbmFnZU1hbnVzY3JpcHRMaXN0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUF3ekJBO0VBQ0EsMEJBQUE7TUFBQSx1QkFBQTtVQUFBLCtCQUFBO0NBQ0E7QUFDQTtFQUNBLHNCQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSx3Q0FBQTtFQUNBLG9CQUFBO0VBQ0EsZ0JBQUE7RUFDQSx5QkFBQTtFQUNBLDhCQUFBO0VBQ0EsZ0JBQUE7Q0FDQTtBQUNBO0VBQ0EsdUNBQUE7RUFDQSwyQkFBQTtDQUNBO0FBQ0E7RUFDQSxxQ0FBQTtFQUNBLHlCQUFBO0NBQ0E7QUFDQTtFQUNBLHVDQUFBO0VBQ0EsNkJBQUE7Q0FDQTtBQUNBO0VBQ0EscUJBQUE7RUFDQSxzQkFBQTtDQUNBO0FBQ0E7RUFDQSwwQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx3QkFBQTtFQUNBLDJCQUFBO0VBQ0EsWUFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7Q0FDQTtBQUNBO0VBQ0EsMEJBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0Esd0JBQUE7RUFDQSwyQkFBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtFQUNBLGdCQUFBO0NBQ0E7QUFDQTtFQUNBLDBCQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtFQUNBLHdCQUFBO0VBQ0EsMkJBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7RUFDQSxnQkFBQTtDQUNBO0FBQ0E7RUFDQSwwQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx3QkFBQTtFQUNBLDJCQUFBO0VBQ0EsWUFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7Q0FDQSIsZmlsZToibWFuYWdlTWFudXNjcmlwdExpc3QudnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0ibWFudXNjcmlwdCI+XG4gICAgPGRpdj5cbiAgICAgIDxjaXJjbGUtdGl0bGVcbiAgICAgICAgdGl0bGUtbmFtZT0i56i/5Lu2566h55CGIlxuICAgICAgICBjbGFzcz0iY2ljbGUtY29udHJvbGxlciJcbiAgICAgIC8+XG4gICAgICA8ZGl2IGNsYXNzPSJzZWFyY2gtZm9ybS1jb250YWluZXIiPlxuICAgICAgICA8ZWwtZm9ybVxuICAgICAgICAgIDppbmxpbmU9InRydWUiXG4gICAgICAgICAgOm1vZGVsPSJtYW51U2NyaXB0IlxuICAgICAgICAgIGNsYXNzPSJkZW1vLWZvcm0taW5saW5lIj5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLnqL/ku7bkuLvpopgiPlxuICAgICAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgICAgIHYtbW9kZWw9Im1hbnVTY3JpcHQudGl0bGUiXG4gICAgICAgICAgICAgIGNsZWFyYWJsZS8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9IuW9kuWxnumikemBkyJcbiAgICAgICAgICAgIHByb3A9ImNoYW5uZWxpZCI+XG4gICAgICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgICAgIHYtbW9kZWw9Im1hbnVTY3JpcHQuY2hhbm5lbGlkIlxuICAgICAgICAgICAgICBmaWx0ZXJhYmxlXG4gICAgICAgICAgICAgIGNsZWFyYWJsZVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgICAgICBAY2xlYXI9InNlYXJjaE1hbnVTY3JpcHQiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaE1hbnVTY3JpcHQiPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gY2hhbm5lbFR5cGVMaXN0IlxuICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSJcbiAgICAgICAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiLz5cbiAgICAgICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLlvZLlsZ7kuJPpopgiPlxuICAgICAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgICAgICB2LW1vZGVsPSJtYW51U2NyaXB0LnNwZWNpYWxpZCJcbiAgICAgICAgICAgICAgZmlsdGVyYWJsZVxuICAgICAgICAgICAgICBjbGVhcmFibGVcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IiJcbiAgICAgICAgICAgICAgQGNsZWFyPSJzZWFyY2hNYW51U2NyaXB0IlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hNYW51U2NyaXB0Ij5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIHNwZWNpYWxMaXN0IlxuICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSJcbiAgICAgICAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiLz5cbiAgICAgICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLnirbmgIEiXG4gICAgICAgICAgICBjbGFzcz0ic2VhcmNoLWxlZnQiPlxuICAgICAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgICAgICB2LW1vZGVsPSJtYW51U2NyaXB0LnN0YXRlIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hNYW51U2NyaXB0Ij5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIHZhbHVlPSIiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuWFqOmDqCIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPSIwIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlvoXkuIrnur8iLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMSJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5bey5LiK57q/Ii8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9IjIiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuW3suS4i+e6vyIvPlxuICAgICAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9IuW8gOWni+aXtumXtCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPSJtYW51U2NyaXB0LnN0YXJ0RGF0ZSB8IEZvcm1hdERhdGUoXCd5eXl5LU1NLWRkIGhoOm1tXCcpIlxuICAgICAgICAgICAgICB2LW1vZGVsPSJtYW51U2NyaXB0LnN0YXJ0RGF0ZSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXtumXtCJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoTWFudVNjcmlwdCIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLnu5PmnZ/ml7bpl7QiPlxuICAgICAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgICAgIDp0aXRsZT0ibWFudVNjcmlwdC5lbmREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9Im1hbnVTY3JpcHQuZW5kRGF0ZSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXtumXtCJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoTWFudVNjcmlwdCIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IDY4cHgiXG4gICAgICAgICAgICBAY2xpY2s9InNlYXJjaE1hbnVTY3JpcHQiPlxuICAgICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICA8L2VsLWJ1dHRvbj5cbiAgICAgICAgPC9lbC1mb3JtPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz0idGFibGUtbGlzdCI+XG4gICAgICA8ZWwtdGFibGVcbiAgICAgICAgcmVmPSJjaGFubmVsVGFibGUiXG4gICAgICAgIDpkYXRhPSJ0YWJsZURhdGEiXG4gICAgICAgIHN0cmlwZVxuICAgICAgICBjbGFzcz0id2hvbGUtdGFibGUiXG4gICAgICAgIG1pbi1oZWlnaHQ9IjQwMCJcbiAgICAgICAgQHNlbGVjdC1hbGw9InNlbGVjdEFsbCJcbiAgICAgICAgQHNlbGVjdGlvbi1jaGFuZ2U9InNlbGVjdGlvbkNoYW5nZSI+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiB0YWJsZUhlYWRlciJcbiAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICA6cHJvcD0iaXRlbS5wcm9wIlxuICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCJcbiAgICAgICAgICA6d2lkdGg9Iml0ZW0ud2lkdGgiXG4gICAgICAgICAgOmZvcm1hdHRlcj0iaXRlbS5mb3JtYXR0ZXIiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICBmaXhlZFxuICAgICAgICAgIHNob3ctb3ZlcmZsb3ctdG9vbHRpcFxuICAgICAgICAvPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgbGFiZWw9IuW9kuWxnumikemBkyJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIj5cbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPGVsLXRhZ1xuICAgICAgICAgICAgICB2LWlmPSJzaG93TnVsbFRhZyhzY29wZS5yb3cuYXJ0aWNsZUNoYW5uZWxMaXN0KSJcbiAgICAgICAgICAgICAgc2l6ZT0ibWluaSI+5pegPC9lbC10YWc+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICA6Y29udGVudD0ic2hvd0NoYW5uZWxBbGxOYW1lKHNjb3BlLnJvdy5hcnRpY2xlQ2hhbm5lbExpc3QpIlxuICAgICAgICAgICAgICA6a2V5PSJzY29wZS5yb3cuYXJ0aWNsZWlkIlxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcC1zdGFydCI+XG4gICAgICAgICAgICAgIDxlbC10YWdcbiAgICAgICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBzY29wZS5yb3cuYXJ0aWNsZUNoYW5uZWxMaXN0IlxuICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgICAgICAgIHNpemU9Im1pbmkiPlxuICAgICAgICAgICAgICAgIHt7IGNoYW5uZWxUYWdDb250ZW50KGl0ZW0pIH19XG4gICAgICAgICAgICAgIDwvZWwtdGFnPlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgbGFiZWw9IuW9kuWxnuS4k+mimCJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIj5cbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPGVsLXRhZ1xuICAgICAgICAgICAgICB2LWlmPSJzaG93TnVsbFRhZyhzY29wZS5yb3cuYXJ0aWNsZVNwZWNpYWxMaXN0KSJcbiAgICAgICAgICAgICAgc2l6ZT0ibWluaSI+5pegPC9lbC10YWc+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICA6Y29udGVudD0ic2hvd1NwZWNpYWxBbGxOYW1lKHNjb3BlLnJvdy5hcnRpY2xlU3BlY2lhbExpc3QpIlxuICAgICAgICAgICAgICA6a2V5PSJzY29wZS5yb3cuYXJ0aWNsZWlkIlxuICAgICAgICAgICAgICA6dmlzaWJsZS1hcnJvdz0iZmFsc2UiXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIHBsYWNlbWVudD0idG9wLXN0YXJ0Ij5cbiAgICAgICAgICAgICAgPGVsLXRhZ1xuICAgICAgICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIHNjb3BlLnJvdy5hcnRpY2xlU3BlY2lhbExpc3QiXG4gICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgICAgICAgc2l6ZT0ibWluaSI+XG4gICAgICAgICAgICAgICAge3sgc3BlY2lhbFRhZ0NvbnRlbnQoaXRlbSkgfX1cbiAgICAgICAgICAgICAgPC9lbC10YWc+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBsYWJlbD0i572u6aG254q25oCBIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICB2LWlmPSIhc2NvcGUucm93LnRvcCJcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgY29udGVudD0i54K55Ye7572u6aG2IlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcCI+XG4gICAgICAgICAgICAgIDxlbC10YWdcbiAgICAgICAgICAgICAgICBzaXplPSJtaW5pIlxuICAgICAgICAgICAgICAgIGNsYXNzPSJzZXRQb2ludGVyIlxuICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDo2MHB4OyJcbiAgICAgICAgICAgICAgICBAY2xpY2submF0aXZlPSJzZXRNYW51VW5Ub3Aoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg572u6aG2XG4gICAgICAgICAgICAgIDwvZWwtdGFnPlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgdi1lbHNlXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9IueCueWHu+WPlua2iOe9rumhtiJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3AiPlxuICAgICAgICAgICAgICA8ZWwtdGFnXG4gICAgICAgICAgICAgICAgc2l6ZT0ibWluaSJcbiAgICAgICAgICAgICAgICBjbGFzcz0ic2V0UG9pbnRlciJcbiAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6NjBweDtjb2xvcjojNjk0ZWZmIlxuICAgICAgICAgICAgICAgIEBjbGljay5uYXRpdmU9InNldE1hbnVUb3Aoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg5Y+W5raI572u6aG2XG4gICAgICAgICAgICAgIDwvZWwtdGFnPlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgbGFiZWw9IuS4iueovy/mkqTnqL8iXG4gICAgICAgICAgYWxpZ249ImNlbnRlciI+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYW51LWNvbnRhaW5lciI+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgOmNsYXNzPSJbXCdtYW51XCcsIHNjb3BlLnJvdy5zdGF0ZSAhPT0gMSAmJiAoc2NvcGUucm93LmFydGljbGVDaGFubmVsTGlzdC5sZW5ndGggPiAwIHx8IHNjb3BlLnJvdy5hcnRpY2xlU3BlY2lhbExpc3QubGVuZ3RoID4gMCkgPyBcJ21hbnUtdXAtYWN0aXZlXCc6IFwnXCddIlxuICAgICAgICAgICAgICAgIEBjbGljaz0idXBNYW51KHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIOS4iueov1xuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgOmNsYXNzPSJbXCdtYW51XCcsIHNjb3BlLnJvdy5zdGF0ZSA9PT0gMSA/IFwnbWFudS1iYWNrLWFjdGl2ZVwnOiBcJ1wnXSJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImRvd25NYW51KHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIOaSpOeov1xuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBsYWJlbD0i5pON5L2cIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWFudS1jb250YWluZXIiPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIDpjbGFzcz0iW1wnbWFudVwnLCBzY29wZS5yb3cuc3RhdGUgIT09IDEgPyBcJ2RlbGV0ZS1hY3RpdmVcJzogXCdcJ10iXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJzZXR0aW5nTWFudShzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAgICDphY3nva5cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIDpjbGFzcz0iW1wnbWFudVwnLCBzY29wZS5yb3cuc3RhdGUgIT09IDEgPyBcJ2RlbGV0ZS1hY3RpdmVcJzogXCdcJ10iXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJkZWxldGVNYW51KHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIOWIoOmZpFxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBmaXhlZD0icmlnaHQiXG4gICAgICAgICAgbGFiZWw9Iuadg+mZkOmFjee9riJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIHdpZHRoPSIxMTUiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBjb250ZW50PSLor4TorroiXG4gICAgICAgICAgICAgIHBsYWNlbWVudD0idG9wIj5cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIDpzdHlsZT0ie2JhY2tncm91bmRDb2xvcjogc2NvcGUucm93LmFsbG93X2NvbW1lbnQgPyBcJyNmZmE1MDdcJzogXCcjQjVCOEQ5XCd9IlxuICAgICAgICAgICAgICAgIGNsYXNzPSJhbGxvd19jb21tZW50IlxuICAgICAgICAgICAgICAgIEBjbGljaz0iaGFuZGxlQ29tbWVudChzY29wZS5yb3cpIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogd2hpdGUiXG4gICAgICAgICAgICAgICAgICBjbGFzcz0iaWNvbmZvbnQgaWNvbi1tYW51LWNvbW1lbnQiLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBjb250ZW50PSLliIbkuqsiXG4gICAgICAgICAgICAgIHBsYWNlbWVudD0idG9wIj5cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIDpzdHlsZT0ie2JhY2tncm91bmRDb2xvcjogc2NvcGUucm93LmFsbG93X3NoYXJlID8gXCcjMTg4M0ZGXCc6IFwnI0I1QjhEOVwnfSJcbiAgICAgICAgICAgICAgICBjbGFzcz0iYWxsb3dfc2hhcmUiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVTaGFyZShzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAgICA8aVxuICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiB3aGl0ZSJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29uZm9udCBpY29uLXNoYXJlIi8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgY29udGVudD0i54K56LWeIlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcCI+XG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICA6c3R5bGU9IntiYWNrZ3JvdW5kQ29sb3I6IHNjb3BlLnJvdy5hbGxvd19saWtlID8gXCcjRjAwODA4XCc6IFwnI0I1QjhEOVwnfSJcbiAgICAgICAgICAgICAgICBjbGFzcz0iYWxsb3dfbGlrZSJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImhhbmRsZVByYWlzZShzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAgICA8aVxuICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiB3aGl0ZSJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29uZm9udCBpY29uLXByYWlzZSIvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZWwtdG9vbHRpcD5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9IuaUtuiXjyJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3AiPlxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgOnN0eWxlPSJ7YmFja2dyb3VuZENvbG9yOiBzY29wZS5yb3cuYWxsb3dfY29sbGVjdCA/IFwnIzY5NEVGRlwnOiBcJyNCNUI4RDlcJ30iXG4gICAgICAgICAgICAgICAgY2xhc3M9ImFsbG93X2NvbGxlY3QiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVDb2xsZWN0KHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIDxpXG4gICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IHdoaXRlIlxuICAgICAgICAgICAgICAgICAgY2xhc3M9Imljb25mb250IGljb24tY29sbGVjdCIvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZWwtdG9vbHRpcD5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgIDwvZWwtdGFibGU+XG4gICAgICA8ZGl2IGNsYXNzPSJwYWdpbmF0aW9uIj5cbiAgICAgICAgPGVsLXBhZ2luYXRpb25cbiAgICAgICAgICA6dG90YWw9InRvdGFsIlxuICAgICAgICAgIDpwYWdlLXNpemVzPSJbMTAsIDIwLCAzMCwgNDBdIlxuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICBsYXlvdXQ9InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPSJoYW5kbGVTaXplQ2hhbmdlIlxuICAgICAgICAgIEBjdXJyZW50LWNoYW5nZT0iaGFuZGxlQ3VycmVudENoYW5nZSIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGVsLWRpYWxvZ1xuICAgICAgOnZpc2libGUuc3luYz0iZGlhbG9nVmlzaWJsZSJcbiAgICAgIGN1c3RvbS1jbGFzcz0iY3VzdG9tLWRpYWxvZyJcbiAgICAgIHRpdGxlPSLnqL/ku7bkv6Hmga/phY3nva4iXG4gICAgICB3aWR0aD0iNTAlIlxuICAgICAgQGNsb3NlPSJjbG9zZURpYWxvZyI+XG4gICAgICA8ZGl2XG4gICAgICAgIDppcz0iY29tcG9uZW50TmFtZSJcbiAgICAgICAgOnNldHRpbmctYXJ0aWNsZS1pZD0ic2V0dGluZ0FydGljbGVJZCJcbiAgICAgICAgOm1hbnUtdGl0bGU9Im1hbnVUaXRsZSIvPlxuICAgIDwvZWwtZGlhbG9nPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IENpcmNsZVRpdGxlIGZyb20gXCdAL2NvbXBvbmVudHMvY29tbW9ucy9jaXJjbGVUaXRsZVwnXG5pbXBvcnQgU2V0dGluZ01hbnUgZnJvbSBcJy4vc2V0dGluZ01hbnVcJ1xuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tIFwnQC9hcGkvbWFudVNjcmlwdEFwaVwnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBDaXJjbGVUaXRsZSxcbiAgICBTZXR0aW5nTWFudVxuICB9LFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFudVNjcmlwdDoge1xuICAgICAgICBjaGFubmVsX25hbWU6IFwnXCcsXG4gICAgICAgIHN0YXRlOiBcJ1wnLFxuICAgICAgICBzb3J0OiBcJzFcJyxcbiAgICAgICAgc3RhcnREYXRlOiBcJ1wnLFxuICAgICAgICBlbmREYXRlOiBcJ1wnLFxuICAgICAgICBjaGFubmVsaWQ6IFwnXCcsXG4gICAgICAgIHRpdGxlOiBcJ1wnLFxuICAgICAgICBzcGVjaWFsaWQ6IFwnXCdcbiAgICAgIH0sXG4gICAgICBjaGFubmVsVHlwZUxpc3Q6IFtdLCAvLyDmiYDlsZ7popHpgZPliJfooahcbiAgICAgIHNwZWNpYWxMaXN0OiBbXSxcbiAgICAgIGNsaWNrQ2VsbEluZGV4OiAtMSxcbiAgICAgIHRhYmxlSGVhZGVyOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3RpdGxlXCcsXG4gICAgICAgICAgbGFiZWw6IFwn56i/5Lu25Li76aKYXCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnY3JlYXRldGltZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+aOqOmAgeaXpeacn1wnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnRm9ybWF0RGF0ZVwnXShjZWxsVmFsdWUsIFwneXl5eS1NTS1kZCBoaDptbVwnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwndXBkYXRldGltZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+abtOaWsOaXpeacn1wnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnRm9ybWF0RGF0ZVwnXShjZWxsVmFsdWUsIFwneXl5eS1NTS1kZCBoaDptbVwnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnYXJ0aWNsZV91cmxcJyxcbiAgICAgICAgICBsYWJlbDogXCfnqL/ku7blhoXlrrlcJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxhIGhyZWY9e2NlbGxWYWx1ZX0gdGFyZ2V0PVwnX2JsYW5rXCc+5p+l55yL56i/5Lu25YaF5a65PC9hPlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnc3RhdGVcJyxcbiAgICAgICAgICBsYWJlbDogXCfnirbmgIFcJyxcbiAgICAgICAgICB3aWR0aDogXCcxMDBcJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNlbGxWYWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gXCflvoXkuIrnur9cJ1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjZWxsVmFsdWUgPT09IDEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwn5bey5LiK57q/XCdcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2VsbFZhbHVlID09PSAyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBcJ+W3suS4i+e6v1wnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgdGFibGVEYXRhOiBbXSxcbiAgICAgIGJhdGNoUHJvY2VzczogMSxcbiAgICAgIHByb2Nlc3NMaXN0OiBbXG4gICAgICAgIHtcbiAgICAgICAgICB2YWx1ZTogMSxcbiAgICAgICAgICBsYWJlbDogXCfmibnph4/liKDpmaRcJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6IDIsXG4gICAgICAgICAgbGFiZWw6IFwn5YW25LuWXCdcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGNvbW1lbnQ6IGZhbHNlLFxuICAgICAgc2hhcmU6IGZhbHNlLFxuICAgICAgcHJhaXNlOiBmYWxzZSxcbiAgICAgIGNvbGxlY3Q6IGZhbHNlLFxuICAgICAgaW5kZXg6IC0xLFxuICAgICAgcGFnZU5vOiAxLFxuICAgICAgcGFnZVNpemU6IDEwLFxuICAgICAgdG90YWw6IDAsXG4gICAgICBkaWFsb2dWaXNpYmxlOiBmYWxzZSxcbiAgICAgIGNvbXBvbmVudE5hbWU6IFwnXCcsXG4gICAgICBhcnRpY2xlaWRMaXN0OiBbXSwgLy8g6YCJ5oup55qE56i/5Lu2aWQsXG4gICAgICBzZWxmU2VsZWN0QWxsOiBmYWxzZSwgLy8g6Ieq5a6a5LmJ55qE5YWo6YCJLFxuICAgICAgc2VsZWN0ZWRNYW51SW5mbzogW10sIC8vIOaJgOmAieeahOeov+S7tueahOivpue7huS/oeaBr1xuICAgICAgc2V0dGluZ0FydGljbGVJZDogXCcwXCcsXG4gICAgICBtYW51VGl0bGU6IFwnXCcgLy8g56i/5Lu25Li76aKYLCDkvKDnu5nlrZDnu4Tku7ZcbiAgICB9XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgc2hvd051bGxUYWcgKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgaWYgKCFhcnIpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGVsc2UgaWYgKGFyci5sZW5ndGggPD0gMCkge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNoYW5uZWxUYWdDb250ZW50ICgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgIGlmIChjb250ZW50LmNoYW5uZWxfbmFtZSA9PT0gXCdcJykge1xuICAgICAgICAgICAgcmV0dXJuIFwn5pegXCdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQuY2hhbm5lbF9uYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcJ+aXoFwnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNwZWNpYWxUYWdDb250ZW50ICgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgIGlmIChjb250ZW50LnNwZWNpYWxfbmFtZSA9PT0gXCdcJykge1xuICAgICAgICAgICAgcmV0dXJuIFwn5pegXCdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQuc3BlY2lhbF9uYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcJ+aXoFwnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNob3dDaGFubmVsQWxsTmFtZSAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFycikge1xuICAgICAgICBsZXQgdGl0bGUgPSBcJ1wnXG4gICAgICAgIGFyci5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgaWYgKGluZGV4ICE9PSBhcnIubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgdGl0bGUgKz0gaXRlbS5jaGFubmVsX25hbWUgKyBcJyxcJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aXRsZSArPSBpdGVtLmNoYW5uZWxfbmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHRpdGxlXG4gICAgICB9XG4gICAgfSxcbiAgICBzaG93U3BlY2lhbEFsbE5hbWUgKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgbGV0IHRpdGxlID0gXCdcJ1xuICAgICAgICBhcnIuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICAgIGlmIChpbmRleCAhPT0gYXJyLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHRpdGxlICs9IFwn44CKXCcgKyBpdGVtLnNwZWNpYWxfbmFtZSArIFwn44CLXCcgKyBcJ1wnXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpdGxlICs9IFwn44CKXCcgKyBpdGVtLnNwZWNpYWxfbmFtZSArIFwn44CLXCdcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiB0aXRsZVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBcJ21hbnVTY3JpcHQudGl0bGVcJyAoKSB7XG4gICAgICB0aGlzLnNlYXJjaE1hbnVTY3JpcHQoKVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgdGhpcy5nZXRNdW51U2NyaXB0TGlzdCgpXG4gICAgdGhpcy5nZXRMaXN0VXNhYmxlQ2hhbm5lbCgpXG4gICAgdGhpcy5nZXRMaXN0VXNhYmxlU3BlY2lhbCgpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKiog6I635Y+W56i/5Lu25YiX6KGoICoqL1xuICAgIGdldE11bnVTY3JpcHRMaXN0ICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0TWFudVNjcmlwdExpc3Qoe1xuICAgICAgICBcJ3BhZ2VOb1wnOiB0aGlzLnBhZ2VObyxcbiAgICAgICAgXCdwYWdlU2l6ZVwnOiB0aGlzLnBhZ2VTaXplXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy50YWJsZURhdGEgPSBkYXRhLmxpc3RcbiAgICAgICAgICB0aGlzLnRvdGFsID0gZGF0YS50b3RhbFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOiOt+WPlumikemBk+exu+WIqyAqKi9cbiAgICBnZXRMaXN0VXNhYmxlQ2hhbm5lbCAoKSB7XG4gICAgICBBY3Rpb25zLmdldExpc3RVc2FibGVDaGFubmVsKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGFcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGxldCBuZXdJdGVtID0ge31cbiAgICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBpdGVtLmNoYW5uZWxfbmFtZVxuICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uY2hhbm5lbGlkXG4gICAgICAgICAgICB0aGlzLmNoYW5uZWxUeXBlTGlzdC5wdXNoKG5ld0l0ZW0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDojrflj5bkuJPpopjliJfooaggKiovXG4gICAgZ2V0TGlzdFVzYWJsZVNwZWNpYWwgKCkge1xuICAgICAgQWN0aW9ucy5nZXRMaXN0VXNhYmxlU3BlY2lhbCgpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhXG4gICAgICAgIGlmIChkYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCByZXN1bHQgPSBkYXRhLnJlc3VsdFxuICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgICBsZXQgbmV3SXRlbSA9IHt9XG4gICAgICAgICAgICBuZXdJdGVtLmxhYmVsID0gaXRlbS5zcGVjaWFsX25hbWVcbiAgICAgICAgICAgIG5ld0l0ZW0udmFsdWUgPSBpdGVtLnNwZWNpYWxpZFxuICAgICAgICAgICAgdGhpcy5zcGVjaWFsTGlzdC5wdXNoKG5ld0l0ZW0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIG9uU3VibWl0ICgpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwnc3VibWl0IVwnKVxuICAgIH0sXG4gICAgaGFuZGxlU2l6ZUNoYW5nZSAocGFnZVNpemUpIHtcbiAgICAgIHRoaXMucGFnZVNpemUgPSBwYWdlU2l6ZVxuICAgICAgdGhpcy5zZWFyY2hNYW51U2NyaXB0KClcbiAgICB9LFxuICAgIGhhbmRsZUN1cnJlbnRDaGFuZ2UgKHBhZ2VJbmRleCkge1xuICAgICAgdGhpcy5wYWdlTm8gPSBwYWdlSW5kZXhcbiAgICAgIHRoaXMuc2VhcmNoTWFudVNjcmlwdCgpXG4gICAgfSxcbiAgICAvKiog6I635Y+W5YWo6YCJ55qE5pWw5o2uICoqL1xuICAgIHNlbGVjdEFsbCAoZSkge1xuICAgICAgaWYgKGUubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLnNlbGZTZWxlY3RBbGwgPSB0cnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNlbGZTZWxlY3RBbGwgPSBmYWxzZVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOivhOiuuuadg+mZkCAqKi9cbiAgICBoYW5kbGVDb21tZW50IChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgaWYgKHJvdy5hbGxvd19jb21tZW50KSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVNYW51KHJvdy5hcnRpY2xlaWQsIFwnYWxsb3dfY29tbWVudFwnLCBmYWxzZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZU1hbnUocm93LmFydGljbGVpZCwgXCdhbGxvd19jb21tZW50XCcsIHRydWUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+W3suS4iue6v+eov+S7tuS4jeWPr+aTjeS9nOivhOiuuuadg+mZkCFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOWIhuS6q+adg+mZkCAqKi9cbiAgICBoYW5kbGVTaGFyZSAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIGlmIChyb3cuYWxsb3dfc2hhcmUpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZU1hbnUocm93LmFydGljbGVpZCwgXCdhbGxvd19zaGFyZVwnLCBmYWxzZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZU1hbnUocm93LmFydGljbGVpZCwgXCdhbGxvd19zaGFyZVwnLCB0cnVlKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCflt7LkuIrnur/nqL/ku7bkuI3lj6/mk43kvZzliIbkuqvmnYPpmZAhXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDngrnotZ7mnYPpmZAgKiovXG4gICAgaGFuZGxlUHJhaXNlIChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgaWYgKHJvdy5hbGxvd19saWtlKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVNYW51KHJvdy5hcnRpY2xlaWQsIFwnYWxsb3dfbGlrZVwnLCBmYWxzZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZU1hbnUocm93LmFydGljbGVpZCwgXCdhbGxvd19saWtlXCcsIHRydWUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+W3suS4iue6v+eov+S7tuS4jeWPr+aTjeS9nOeCuei1nuadg+mZkCFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOaUtuiXj+adg+mZkCAqKi9cbiAgICBoYW5kbGVDb2xsZWN0IChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgaWYgKHJvdy5hbGxvd19jb2xsZWN0KSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVNYW51KHJvdy5hcnRpY2xlaWQsIFwnYWxsb3dfY29sbGVjdFwnLCBmYWxzZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZU1hbnUocm93LmFydGljbGVpZCwgXCdhbGxvd19jb2xsZWN0XCcsIHRydWUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+W3suS4iue6v+eov+S7tuS4jeWPr+aTjeS9nOaUtuiXj+adg+mZkCFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOWPlua2iOe9rumhtiAqKi9cbiAgICBzZXRNYW51VW5Ub3AgKHJvdykge1xuICAgICAgdGhpcy51cGRhdGVNYW51KHJvdy5hcnRpY2xlaWQsIFwndG9wXCcsIHRydWUpXG4gICAgfSxcbiAgICAvKiog5Y+W5raI572u6aG2ICoqL1xuICAgIHNldE1hbnVUb3AgKHJvdykge1xuICAgICAgdGhpcy51cGRhdGVNYW51KHJvdy5hcnRpY2xlaWQsIFwndG9wXCcsIGZhbHNlKVxuICAgIH0sXG4gICAgLyoqIOS4iueovyAqKi9cbiAgICB1cE1hbnUgKHJvdykge1xuICAgICAgaWYgKHJvdy5hcnRpY2xlQ2hhbm5lbExpc3QubGVuZ3RoIDw9IDAgJiYgcm93LmFydGljbGVTcGVjaWFsTGlzdC5sZW5ndGggPD0gMCkge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCfor6XnqL/ku7bov5jmsqHmnInphY3nva7popHpgZPlkozkuJPpopgsIOS4jeiDveS4iueovyFcJ1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGlmIChyb3cuc3RhdGUgPT09IDAgfHwgcm93LnN0YXRlID09PSAyKSB7XG4gICAgICAgIHRoaXMuJGNvbmZpcm0oXCfnoa7lrpropoHkuIrnqL/lkJc/XCcsIFwn5o+Q56S6XCcsIHtcbiAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCfnoa7lrppcJyxcbiAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcJ+WPlua2iFwnLFxuICAgICAgICAgIHR5cGU6IFwnd2FybmluZ1wnXG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMudXBkYXRlTWFudShyb3cuYXJ0aWNsZWlkLCBcJ3N0YXRlXCcsIDEpXG4gICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+ivpeeov+S7tuW3suS4iue6vyFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOaSpOeovyAqKi9cbiAgICBkb3duTWFudSAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlID09PSAxKSB7XG4gICAgICAgIHRoaXMuJGNvbmZpcm0oXCfnoa7lrpropoHmkqTnqL/lkJc/XCcsIFwn5o+Q56S6XCcsIHtcbiAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCfnoa7lrppcJyxcbiAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcJ+WPlua2iFwnLFxuICAgICAgICAgIHR5cGU6IFwnd2FybmluZ1wnXG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMudXBkYXRlTWFudShyb3cuYXJ0aWNsZWlkLCBcJ3N0YXRlXCcsIDIpXG4gICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+ivpeeov+S7tuW3suaSpOeovyFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOmFjee9rueov+S7tiAqKi9cbiAgICBzZXR0aW5nTWFudSAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IHRydWVcbiAgICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gU2V0dGluZ01hbnVcbiAgICAgICAgdGhpcy5zZXR0aW5nQXJ0aWNsZUlkID0gcm93LmFydGljbGVpZFxuICAgICAgICB0aGlzLm1hbnVUaXRsZSA9IHJvdy50aXRsZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn5bey5LiK57q/56i/5Lu25LiN5Y+v6YWN572uIVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog5Yig6Zmk56i/5Lu2ICoqL1xuICAgIGRlbGV0ZU1hbnUgKHJvdykge1xuICAgICAgaWYgKHJvdy5zdGF0ZSAhPT0gMSkge1xuICAgICAgICB0aGlzLiRjb25maXJtKFwn5piv5ZCm5Yig6ZmkIlwnICsgcm93LnRpdGxlICsgXCciP1wnLCBcJ+aPkOekulwnLCB7XG4gICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwn56Gu5a6aXCcsXG4gICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCflj5bmtohcJyxcbiAgICAgICAgICB0eXBlOiBcJ3dhcm5pbmdcJ1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICBBY3Rpb25zLmRlbGV0ZU1hbnVTY3JpcHQoe1xuICAgICAgICAgICAgXCdhcnRpY2xlXCc6IHtcbiAgICAgICAgICAgICAgXCdhcnRpY2xlaWRcJzogcm93LmFydGljbGVpZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCcsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCfliKDpmaTmiJDlip8hXCdcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2VhcmNoTWFudVNjcmlwdCgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn5bey5LiK57q/56i/5Lu25LiN5Y+v5Yig6ZmkIVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDnqL/ku7bmk43kvZznmoTlhazlhbHmjqXlj6NcbiAgICAgKiBAcGFyYW0gYXJ0aWNsZWlkIOaWh+eroElEXG4gICAgICogQHBhcmFtIGtleSDmm7TmlrDlrZfmrrXlkI1cbiAgICAgKiBAcGFyYW0gdmFsdWUg5YC8XG4gICAgICovXG4gICAgdXBkYXRlTWFudSAoYXJ0aWNsZWlkLCBrZXksIHZhbHVlKSB7XG4gICAgICBBY3Rpb25zLnVwZGF0ZU1hbnUoe1xuICAgICAgICBcJ2FydGljbGVcJzoge1xuICAgICAgICAgIFwnYXJ0aWNsZWlkXCc6IGFydGljbGVpZCxcbiAgICAgICAgICBba2V5XTogdmFsdWVcbiAgICAgICAgfVxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwn5pON5L2c5oiQ5YqfIVwnXG4gICAgICAgICAgfSlcbiAgICAgICAgICB0aGlzLnNlYXJjaE1hbnVTY3JpcHQoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOiOt+WPluaJgOaciemAieaLqeeahOeov+S7tklEICoqL1xuICAgIHNlbGVjdGlvbkNoYW5nZSAoc2VsZWN0aW9uKSB7XG4gICAgICB0aGlzLmFydGljbGVpZExpc3QgPSBbXVxuICAgICAgc2VsZWN0aW9uLmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgdGhpcy5hcnRpY2xlaWRMaXN0LnB1c2goaXRlbS5hcnRpY2xlaWQpXG4gICAgICB9KVxuICAgICAgdGhpcy5zZWxlY3RlZE1hbnVJbmZvID0gc2VsZWN0aW9uXG4gICAgfSxcbiAgICAvKiog5om56YeP5Yig6Zmk56i/5Lu2ICoqL1xuICAgIGRlbGV0ZU1hbnlNYW51ICgpIHtcbiAgICAgIGlmICh0aGlzLmJhdGNoUHJvY2VzcyA9PT0gMSkge1xuICAgICAgICBsZXQgaXNBbGxvd0RlbGV0ZSA9IHRydWVcbiAgICAgICAgaWYgKHRoaXMuYXJ0aWNsZWlkTGlzdC5sZW5ndGggPD0gMCkge1xuICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgICAgbWVzc2FnZTogXCfor7foh7PlsJHpgInmi6nkuIDkuKrnqL/ku7YhXCdcbiAgICAgICAgICB9KVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIGxldCB0aXBDb250ZW50ID0gXCfmgqjmiYDpgInmi6nnmoQ6IlwnXG4gICAgICAgIC8qKiDlt7LkuIrnur/nmoTnqL/ku7bkuI3lj6/liKDpmaTnmoTmj5DnpLogKiovXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRNYW51SW5mby5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgaWYgKGl0ZW0uc3RhdGUgPT09IDEpIHtcbiAgICAgICAgICAgIGlzQWxsb3dEZWxldGUgPSBmYWxzZVxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSBhcnIubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICB0aXBDb250ZW50ICs9IFwn44CKXCcgKyBpdGVtLnRpdGxlICsgXCfjgItcJ1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGlwQ29udGVudCArPSBcJyDlt7LkuIrnur/nqL/ku7YsIOS4jeWPr+WIoOmZpCEgXCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGlmICghaXNBbGxvd0RlbGV0ZSkge1xuICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgICAgbWVzc2FnZTogdGlwQ29udGVudFxuICAgICAgICAgIH0pXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4kY29uZmlybShcJ+ehruWumuWIoOmZpOaJgOmAieeov+S7tj9cJywgXCfmj5DnpLpcJywge1xuICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcJ+ehruWumlwnLFxuICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwn5Y+W5raIXCcsXG4gICAgICAgICAgdHlwZTogXCd3YXJuaW5nXCdcbiAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgQWN0aW9ucy5iYXRjaERlbGV0ZU1hbnUoe1xuICAgICAgICAgICAgXCdhcnRpY2xlaWRMaXN0XCc6IHRoaXMuYXJ0aWNsZWlkTGlzdFxuICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKVxuICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCcsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCfmibnph4/liKDpmaTmiJDlip8hXCdcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2VhcmNoTWFudVNjcmlwdCgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOWFs+mXreWvueivneahhiAqKi9cbiAgICBjbG9zZURpYWxvZyAoKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ1wnXG4gICAgICB0aGlzLnNlYXJjaE1hbnVTY3JpcHQoKVxuICAgIH0sXG4gICAgLyoqIOaQnOe0oueov+S7tiAqKi9cbiAgICBzZWFyY2hNYW51U2NyaXB0ICgpIHtcbiAgICAgIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ3N3YXBUaW1lXCddKHRoaXMubWFudVNjcmlwdClcbiAgICAgIGxldCB0aW1lU3RhcnQgPSB0aGlzLm1hbnVTY3JpcHQuc3RhcnREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5tYW51U2NyaXB0LnN0YXJ0RGF0ZSkuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgbGV0IHRpbWVFbmQgPSB0aGlzLm1hbnVTY3JpcHQuZW5kRGF0ZSAhPT0gbnVsbCA/IG5ldyBEYXRlKHRoaXMubWFudVNjcmlwdC5lbmREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBBY3Rpb25zLmdldE1hbnVTY3JpcHRMaXN0KHtcbiAgICAgICAgXCdwYWdlTm9cJzogdGhpcy5wYWdlTm8sXG4gICAgICAgIFwncGFnZVNpemVcJzogdGhpcy5wYWdlU2l6ZSxcbiAgICAgICAgXCdjaGFubmVsaWRcJzogdGhpcy5tYW51U2NyaXB0LmNoYW5uZWxpZCxcbiAgICAgICAgXCdzcGVjaWFsaWRcJzogdGhpcy5tYW51U2NyaXB0LnNwZWNpYWxpZCxcbiAgICAgICAgXCd0aXRsZVwnOiB0aGlzLm1hbnVTY3JpcHQudGl0bGUsXG4gICAgICAgIFwnc3RhdGVcJzogdGhpcy5tYW51U2NyaXB0LnN0YXRlLFxuICAgICAgICBcJ3RpbWVTdGFydFwnOiB0aW1lU3RhcnQsXG4gICAgICAgIFwndGltZUVuZFwnOiB0aW1lRW5kXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgY29uc29sZS5sb2coZGF0YSlcbiAgICAgICAgICB0aGlzLnRhYmxlRGF0YSA9IGRhdGEubGlzdFxuICAgICAgICAgIHRoaXMudG90YWwgPSBkYXRhLnRvdGFsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG48XC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuICAucGFnaW5hdGlvbntcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIH1cbiAgLm1hbnV7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiAzMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gICAgYm9yZGVyLXJhZGl1czogMjBweDtcbiAgICBmb250LXNpemU6IDEzcHg7XG4gICAgcGFkZGluZzogMXB4IDVweCAycHggNXB4O1xuICAgIGNvbG9yOiByZ2JhKDE4MSwgMTg0LCAyMTcsIDEpO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuICAubWFudS11cC1hY3RpdmV7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyMzEsIDEyNSwgMCwgMSk7XG4gICAgY29sb3I6cmdiYSgyMzEsIDEyNSwgMCwgMSk7XG4gIH1cbiAgLm1hbnUtYmFjay1hY3RpdmV7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyNDAsIDgsIDgsIDEpO1xuICAgIGNvbG9yOnJnYmEoMjQwLCA4LCA4LCAxKTtcbiAgfVxuICAuZGVsZXRlLWFjdGl2ZXtcbiAgICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTA1LCA3OCwgMjU1LCAxKTtcbiAgICBjb2xvcjogcmdiYSgxMDUsIDc4LCAyNTUsIDEpO1xuICB9XG4gIC5wYWdpbmF0aW9uIHtcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICAtd2Via2l0LWJveC1wYWNrOiBlbmQ7XG4gIH1cbiAgLm1hbnVzY3JpcHQgLmFsbG93X2NvbW1lbnQge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmE1MDc7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtbW96LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBtYXJnaW4tbGVmdDogM3B4O1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuICAubWFudXNjcmlwdCAuYWxsb3dfc2hhcmUge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMxODgzRkY7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtbW96LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBtYXJnaW4tbGVmdDogM3B4O1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuICAubWFudXNjcmlwdCAuYWxsb3dfbGlrZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0YwMDgwODtcbiAgICB3aWR0aDogMjBweDtcbiAgICBoZWlnaHQ6IDIwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC1tb3otYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIG1hcmdpbi1sZWZ0OiAzcHg7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG4gIC5tYW51c2NyaXB0IC5hbGxvd19jb2xsZWN0IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjk0RUZGO1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgLW1vei1ib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gICAgbWFyZ2luLWxlZnQ6IDNweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbjwvc3R5bGU+XG48c3R5bGU+XG4gIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmJ0bi1jb250YWluZXIgLmVsLWJ1dHRvbntcbiAgICBwYWRkaW5nOiAxMnB4IDEwcHg7XG4gIH1cbiAgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuYnRuLWNvbnRhaW5lciAuZWwtaWNvbi0tcmlnaHR7XG4gICAgbWFyZ2luOiAwO1xuICB9XG4uY3VzdG9tLWRpYWxvZyAuZWwtZGlhbG9nX19oZWFkZXJ7XG4gIC8qcGFkZGluZzogMDsqL1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSgxOTIsMTkwLDI1NSwxKTtcbn1cbiAgLmVsLXRvb2x0aXBfX3BvcHBlcntcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xuICB9XG4gIC5tYW51c2NyaXB0IC5lbC1mb3JtLS1pbmxpbmUgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gICAgd2lkdGg6IDYwJTtcbiAgfVxuICAubWFudXNjcmlwdCAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAyMCU7XG4gIH1cbjwvc3R5bGU+XG4nXSxzb3VyY2VSb290OiIifV0pfSwiQVgvQyI6ZnVuY3Rpb24oZSxuKXt9LEFpUUg6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoInl6ZHIiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiNTZhYzZhZWQiLGEsITEse30pfSxBcVI1OmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uZWwtZGlhbG9nX19oZWFkZXJ7XG4gIHBhZGRpbmc6IDEzcHggMzBweCAxM3B4O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI0MwQkVGRjtcbiAgYmFja2dyb3VuZC1jb2xvcjogI0Y3RkFGRjtcbn1cbi5lbC1kaWFsb2dfX3RpdGxlIHtcbiAgbGluZS1oZWlnaHQ6IDE3cHg7XG4gIGZvbnQtc2l6ZTogMTdweDtcbiAgY29sb3I6ICMzMDMxMzM7XG59XG4uZWwtZGlhbG9nX19oZWFkZXJidG4ge1xuICB0b3A6IDEzcHg7XG59XG4uZWwtZGlhbG9nX19ib2R5IHtcbiAgcGFkZGluZzogMjBweCA2MHB4IDBweCA2MHB4O1xufVxuLmFzc2lnblJvbGUgLmVsLWZvcm0ge1xuICBtYXJnaW4tdG9wOiAxNXB4O1xufVxuLmFzc2lnblJvbGUgLnN1Ym1pdCAuZWwtZm9ybS1pdGVtX19jb250ZW50e1xuICBmbG9hdDogcmlnaHQ7XG4gIHdpZHRoOiAxNjBweDtcbn1cbi5zZWxlY3Qtcm9sZSB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICM2OTRFRkY7XG4gIGJhY2tncm91bmQtY29sb3I6ICNFQkY1RkY7XG4gIGNvbG9yOiAjNjk0RUZGO1xuICBwYWRkaW5nOjhweCAyMnB4IDhweCAyMnB4O1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG59XG4uYXNzaWduUm9sZSAuZWwtc2VsZWN0IHtcbiAgd2lkdGg6IDEwMCU7XG59XG4uYXNzaWduUm9sZSAuZWwtZm9ybS1pdGVtIHtcbiAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcbn1cbi5hc3NpZ25Sb2xlIC5lbC1jaGVja2JveCsuZWwtY2hlY2tib3h7XG4gIHdpZHRoOiAyMDBweDtcbiAgbWFyZ2luLWxlZnQ6IDBweDtcbn1cbi8qLmFzc2lnblJvbGUgLmVsLWZvcm0taXRlbSAqL1xuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VTeXN0ZW1Vc2VyL3NyYy9jb21wb25lbnRzL21hbmFnZVN5c3RlbVVzZXIvYXNzaWduUm9sZUxpc3QudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQTZGQTtFQUNBLHdCQUFBO0VBQ0EsaUNBQUE7RUFDQSwwQkFBQTtDQUNBO0FBQ0E7RUFDQSxrQkFBQTtFQUNBLGdCQUFBO0VBQ0EsZUFBQTtDQUNBO0FBQ0E7RUFDQSxVQUFBO0NBQ0E7QUFDQTtFQUNBLDRCQUFBO0NBQ0E7QUFDQTtFQUNBLGlCQUFBO0NBQ0E7QUFDQTtFQUNBLGFBQUE7RUFDQSxhQUFBO0NBQ0E7QUFDQTtFQUNBLDBCQUFBO0VBQ0EsMEJBQUE7RUFDQSxlQUFBO0VBQ0EsMEJBQUE7RUFDQSxtQkFBQTtDQUNBO0FBQ0E7RUFDQSxZQUFBO0NBQ0E7QUFDQTtFQUNBLHVCQUFBO0NBQ0E7QUFDQTtFQUNBLGFBQUE7RUFDQSxpQkFBQTtDQUNBO0FBQ0EsOEJBQUEiLGZpbGU6ImFzc2lnblJvbGVMaXN0LnZ1ZSIsc291cmNlc0NvbnRlbnQ6WyI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJhc3NpZ25Sb2xlXCI+XG4gICAgPGVsLWZvcm1cbiAgICAgIDppbmxpbmU9XCJ0cnVlXCJcbiAgICAgIHNpemU9XCJzbWFsbFwiPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD1cIueUqOaIt+WQjVwiXG4gICAgICAgIHN0eWxlPVwibWFyZ2luLWxlZnQ6IDEzcHg7XCI+XG4gICAgICAgIDxzcGFuPnt7IHVzZXJuYW1lIH19PC9zcGFuPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPVwi6KeS6Imy5YiG6YWNXCI+XG4gICAgICAgIDxlbC1jaGVja2JveFxuICAgICAgICAgIHYtZm9yPVwiKGl0ZW0sIGluZGV4KSBpbiBhbGxSb2xlTGlzdFwiXG4gICAgICAgICAgOmtleT1cImluZGV4XCJcbiAgICAgICAgICB2LW1vZGVsPVwiaXRlbS5pc0NoZWNrZWRcIlxuICAgICAgICAgIEBjaGFuZ2U9XCJjaG9vc2VSb2xlKGl0ZW0ucm9sZWlkLCBpdGVtLmlzQ2hlY2tlZClcIj5cbiAgICAgICAgICB7eyBpdGVtLm5hbWUgfX1cbiAgICAgICAgPC9lbC1jaGVja2JveD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgIDwvZWwtZm9ybT5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSAnQC9hcGkvc3lzdGVtVXNlcnNBcGknXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdBc3NpZ25Sb2xlJyxcbiAgcHJvcHM6IHtcbiAgICB1c2VyY29kZUxpc3Q6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gW11cbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZXJuYW1lOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJ1xuICAgIH1cbiAgfSxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFsbFJvbGVMaXN0OiBbXVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgLyoqIOiOt+WPlueUqOaIt+S/oeaBryAqKi9cbiAgICB0aGlzLmdldFVzZXJJbmZvKClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGNhbmNlbCAoKSB7XG4gICAgICB0aGlzLiRlbWl0KCdjbG9zZURpYWxvZycpXG4gICAgfSxcbiAgICBnZXRVc2VySW5mbyAoKSB7XG4gICAgICBBY3Rpb25zLmdldFVzZXJSb2xlcyh7XG4gICAgICAgICdvcmdVc2Vycyc6IHtcbiAgICAgICAgICAndXNlcmNvZGUnOiAnJ1xuICAgICAgICB9XG4gICAgICB9KS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLmFsbFJvbGVMaXN0ID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog57uZ55So5oi35YiG6YWN5p2D6ZmQICoqL1xuICAgIGNob29zZVJvbGUgKHJvbGVpZCwgaXNDaGVja2VkKSB7XG4gICAgICBBY3Rpb25zLmFzc2lnblJvbGVMaXN0KHtcbiAgICAgICAgJ2Fzc2lnbic6IHtcbiAgICAgICAgICAndXNlcmNvZGVzJzogdGhpcy51c2VyY29kZUxpc3QsXG4gICAgICAgICAgJ3JvbGVpZCc6IHJvbGVpZCxcbiAgICAgICAgICAnYXNzaWduT3JDYW5lbCc6IGlzQ2hlY2tlZFxuICAgICAgICB9XG4gICAgICB9KS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICfliIbphY3miJDlip8nXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5lbC1idXR0b24tLXByaW1hcnkge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM3MTZCRkY7XG4gICAgYm9yZGVyLWNvbG9yOiAjNzE2QkZGO1xuICB9XG4gIC5lbC1idXR0b24tLWRlZmF1bHQge1xuICAgIGNvbG9yOiAjNzE2QkZGIDtcbiAgICBib3JkZXItY29sb3I6ICM3MTZCRkY7XG4gIH1cbjwvc3R5bGU+XG48c3R5bGU+XG4gIC5lbC1kaWFsb2dfX2hlYWRlcntcbiAgICBwYWRkaW5nOiAxM3B4IDMwcHggMTNweDtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI0MwQkVGRjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjdGQUZGO1xuICB9XG4gIC5lbC1kaWFsb2dfX3RpdGxlIHtcbiAgICBsaW5lLWhlaWdodDogMTdweDtcbiAgICBmb250LXNpemU6IDE3cHg7XG4gICAgY29sb3I6ICMzMDMxMzM7XG4gIH1cbiAgLmVsLWRpYWxvZ19faGVhZGVyYnRuIHtcbiAgICB0b3A6IDEzcHg7XG4gIH1cbiAgLmVsLWRpYWxvZ19fYm9keSB7XG4gICAgcGFkZGluZzogMjBweCA2MHB4IDBweCA2MHB4O1xuICB9XG4gIC5hc3NpZ25Sb2xlIC5lbC1mb3JtIHtcbiAgICBtYXJnaW4tdG9wOiAxNXB4O1xuICB9XG4gIC5hc3NpZ25Sb2xlIC5zdWJtaXQgLmVsLWZvcm0taXRlbV9fY29udGVudHtcbiAgICBmbG9hdDogcmlnaHQ7XG4gICAgd2lkdGg6IDE2MHB4O1xuICB9XG4gIC5zZWxlY3Qtcm9sZSB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzY5NEVGRjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUJGNUZGO1xuICAgIGNvbG9yOiAjNjk0RUZGO1xuICAgIHBhZGRpbmc6OHB4IDIycHggOHB4IDIycHg7XG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICB9XG4gIC5hc3NpZ25Sb2xlIC5lbC1zZWxlY3Qge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG4gIC5hc3NpZ25Sb2xlIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG4gIH1cbiAgLmFzc2lnblJvbGUgLmVsLWNoZWNrYm94Ky5lbC1jaGVja2JveHtcbiAgICB3aWR0aDogMjAwcHg7XG4gICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgfVxuICAvKi5hc3NpZ25Sb2xlIC5lbC1mb3JtLWl0ZW0gKi9cbjwvc3R5bGU+XG4iXSxzb3VyY2VSb290OiIifV0pfSxBdVBNOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uaWNvbi1jb250YWluZXJbZGF0YS12LTA1MjkwNTkxXXtcbiAgd2lkdGg6IDQ1MHB4O1xuICBtYXJnaW46MCBhdXRvO1xuICBwYWRkaW5nLWJvdHRvbTogMzBweDtcbn1cbi5jaGFubmVsLWljb25bZGF0YS12LTA1MjkwNTkxXXtcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICBkaXNwbGF5OiBmbGV4O1xuICAtd2Via2l0LWJveC1wYWNrOiBzdGFydDtcbiAgICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgLW1zLWZsZXgtd3JhcDogd3JhcDtcbiAgICAgIGZsZXgtd3JhcDogd3JhcDtcbn1cbi5jaGFubmVsLWljb24gc3BhbltkYXRhLXYtMDUyOTA1OTFde1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdpZHRoOiAxMDBweDtcbiAgaGVpZ2h0OiAxMDBweDtcbiAgYm9yZGVyOiAxcHggc29saWQgZ3JheTtcbiAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgbWFyZ2luLXRvcDogNXB4O1xufVxuLmNoYW5uZWwtaWNvbiBzcGFuIGltZ1tkYXRhLXYtMDUyOTA1OTFde1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuLmNoYW5uZWwtaWNvbiBzcGFuW2RhdGEtdi0wNTI5MDU5MV06aG92ZXJ7XG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsdWU7XG59XG4uY2hhbm5lbC1pY29uIC5jbGljay1ib3JkZXJbZGF0YS12LTA1MjkwNTkxXXtcbiAgYm9yZGVyOiAxcHggc29saWQgYmx1ZTtcbn1cbi5tb3Jlbi1ib3JkZXJbZGF0YS12LTA1MjkwNTkxXXtcbiAgYm9yZGVyOiAxcHggc29saWQgZ3JheTtcbn1cbi5pY29uLXN1Ym1pdFtkYXRhLXYtMDUyOTA1OTFde1xuICB0ZXh0LWFsaWduOiByaWdodDtcbiAgbWFyZ2luOiAxMHB4IDIwcHggMHB4IDBweFxufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VDaGFubmVsL3NyYy9jb21wb25lbnRzL21hbmFnZUNoYW5uZWwvY2hvb3NlSWNvbi52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBK0RBO0VBQ0EsYUFBQTtFQUNBLGNBQUE7RUFDQSxxQkFBQTtDQUNBO0FBQ0E7RUFDQSxxQkFBQTtFQUFBLHFCQUFBO0VBQUEsY0FBQTtFQUNBLHdCQUFBO01BQUEscUJBQUE7VUFBQSw0QkFBQTtFQUNBLG9CQUFBO01BQUEsZ0JBQUE7Q0FDQTtBQUNBO0VBQ0Esc0JBQUE7RUFDQSxhQUFBO0VBQ0EsY0FBQTtFQUNBLHVCQUFBO0VBQ0EsaUJBQUE7RUFDQSxnQkFBQTtDQUNBO0FBQ0E7RUFDQSxZQUFBO0VBQ0EsYUFBQTtDQUNBO0FBQ0E7RUFDQSx1QkFBQTtDQUNBO0FBQ0E7RUFDQSx1QkFBQTtDQUNBO0FBQ0E7RUFDQSx1QkFBQTtDQUNBO0FBQ0E7RUFDQSxrQkFBQTtFQUNBLHlCQUFBO0NBQ0EiLGZpbGU6ImNob29zZUljb24udnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0iaWNvbi1jb250YWluZXIiPlxuICAgIDxkaXYgY2xhc3M9ImNoYW5uZWwtaWNvbiI+XG4gICAgICA8c3BhblxuICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBpY29uTGlzdCJcbiAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgIDpjbGFzcz0iaWNvbkNoZWNrTGlzdFtpbmRleF0gPyBcJ2NsaWNrLWJvcmRlclwnOiBcJ21vcmVuLWJvcmRlclwnIlxuICAgICAgICBAY2xpY2s9Imljb25TZWxlY3RlZChpbmRleCwgaWNvbkNoZWNrTGlzdFtpbmRleF0pIj5cbiAgICAgICAgPGltZyA6c3JjPSJpdGVtIj5cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2XG4gICAgICBjbGFzcz0iaWNvbi1zdWJtaXQiPlxuICAgICAgPGVsLWJ1dHRvblxuICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICBAY2xpY2s9InN1Ym1pdEljb24iPuehruWumjwvZWwtYnV0dG9uPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IENpcmNsZVRpdGxlIGZyb20gXCdAL2NvbXBvbmVudHMvY29tbW9ucy9jaXJjbGVUaXRsZVwnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9jaGFubmVsQXBpXCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlXG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpY29uTGlzdDogW10sXG4gICAgICBpY29uQ2hlY2tMaXN0OiBbXSxcbiAgICAgIGluZGV4OiAwXG4gICAgfVxuICB9LFxuXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuZ2V0SWNvbkxpc3QoKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZ2V0SWNvbkxpc3QgKCkge1xuICAgICAgQWN0aW9ucy5saXN0Q2hhbm5lbEljb24oKS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLmljb25DaGVja0xpc3QgPSBbXVxuICAgICAgICAgIHRoaXMuaWNvbkxpc3QgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaWNvbkxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuaWNvbkNoZWNrTGlzdC5wdXNoKGZhbHNlKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGljb25TZWxlY3RlZCAoaW5kZXgsIGlzQ2hlY2tlZCkge1xuICAgICAgdGhpcy5pbmRleCA9IGluZGV4XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaWNvbkxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy4kc2V0KHRoaXMuaWNvbkNoZWNrTGlzdCwgaSwgZmFsc2UpXG4gICAgICB9XG4gICAgICB0aGlzLiRzZXQodGhpcy5pY29uQ2hlY2tMaXN0LCBpbmRleCwgdHJ1ZSlcbiAgICB9LFxuICAgIHN1Ym1pdEljb24gKCkge1xuICAgICAgdGhpcy4kZW1pdChcJ3N1Ym1pdC1pY29uXCcsIHRoaXMuaWNvbkxpc3RbdGhpcy5pbmRleF0pXG4gICAgfVxuICB9XG59XG48XC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuLmljb24tY29udGFpbmVye1xuICB3aWR0aDogNDUwcHg7XG4gIG1hcmdpbjowIGF1dG87XG4gIHBhZGRpbmctYm90dG9tOiAzMHB4O1xufVxuLmNoYW5uZWwtaWNvbntcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICBmbGV4LXdyYXA6IHdyYXA7XG59XG4uY2hhbm5lbC1pY29uIHNwYW57XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgd2lkdGg6IDEwMHB4O1xuICBoZWlnaHQ6IDEwMHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCBncmF5O1xuICBtYXJnaW4tbGVmdDogNXB4O1xuICBtYXJnaW4tdG9wOiA1cHg7XG59XG4uY2hhbm5lbC1pY29uIHNwYW4gaW1ne1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuLmNoYW5uZWwtaWNvbiBzcGFuOmhvdmVye1xuICBib3JkZXI6IDFweCBzb2xpZCBibHVlO1xufVxuLmNoYW5uZWwtaWNvbiAuY2xpY2stYm9yZGVye1xuICBib3JkZXI6IDFweCBzb2xpZCBibHVlO1xufVxuLm1vcmVuLWJvcmRlcntcbiAgYm9yZGVyOiAxcHggc29saWQgZ3JheTtcbn1cbi5pY29uLXN1Ym1pdHtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gIG1hcmdpbjogMTBweCAyMHB4IDBweCAwcHhcbn1cbjwvc3R5bGU+XG4nXSxzb3VyY2VSb290OiIifV0pfSxCTkpSOmZ1bmN0aW9uKGUsbil7fSxCWlpYOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJ1cFpJIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjIyNGQ3NzkwIixhLCExLHt9KX0sQ0RKMjpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgid0paQiIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCI1M2E5ODlmMCIsYSwhMSx7fSl9LENFOVQ6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoInFxSXkiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiYzUxOTE5NGUiLGEsITEse30pfSxDUGxOOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4udXNlci1tYW5hZ2UgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgd2lkdGg6IDE2MHB4O1xufVxuLnVzZXItbWFuYWdlIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmVsLWZvcm0taXRlbSB7XG4gIHdpZHRoOiAyNSU7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZVN5c3RlbVVzZXIvc3JjL2NvbXBvbmVudHMvbWFuYWdlU3lzdGVtVXNlci91c2VyTWFuYWdlLnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUFtU0E7RUFDQSxhQUFBO0NBQ0E7QUFDQTtFQUNBLFdBQUE7Q0FDQSIsZmlsZToidXNlck1hbmFnZS52dWUiLHNvdXJjZXNDb250ZW50OlsnPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSJ1c2VyLW1hbmFnZSI+XG4gICAgPGRpdj5cbiAgICAgIDxjaXJjbGUtdGl0bGVcbiAgICAgICAgdGl0bGUtbmFtZT0i57O757uf55So5oi3566h55CGIlxuICAgICAgICBjbGFzcz0iY2ljbGUtY29udHJvbGxlciJcbiAgICAgIC8+XG4gICAgICA8ZGl2IGNsYXNzPSJzZWFyY2gtZm9ybS1jb250YWluZXIiPlxuICAgICAgICA8ZWwtZm9ybVxuICAgICAgICAgIDppbmxpbmU9InRydWUiXG4gICAgICAgICAgOm1vZGVsPSJtYW5hZ2VVc2VyIlxuICAgICAgICAgIGNsYXNzPSJkZW1vLWZvcm0taW5saW5lIj5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLnlKjmiLflkI0iPlxuICAgICAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgICAgIHYtbW9kZWw9Im1hbmFnZVVzZXIudXNlcm5hbWUiXG4gICAgICAgICAgICAgIGNsZWFyYWJsZS8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9IuW8gOWni+aXtumXtCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPSJtYW5hZ2VVc2VyLnN0YXJ0RGF0ZSB8IEZvcm1hdERhdGUoXCd5eXl5LU1NLWRkIGhoOm1tXCcpIlxuICAgICAgICAgICAgICB2LW1vZGVsPSJtYW5hZ2VVc2VyLnN0YXJ0RGF0ZSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXpeacnyJcbiAgICAgICAgICAgICAgQGNoYW5nZT0iZ2V0TWFuYWdlVXNlckxpc3QiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i57uT5p2f5pe26Ze0Ij5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9Im1hbmFnZVVzZXIuZW5kRGF0ZSB8IEZvcm1hdERhdGUoXCd5eXl5LU1NLWRkIGhoOm1tXCcpIlxuICAgICAgICAgICAgICB2LW1vZGVsPSJtYW5hZ2VVc2VyLmVuZERhdGUiXG4gICAgICAgICAgICAgIHR5cGU9ImRhdGV0aW1lIlxuICAgICAgICAgICAgICBmb3JtYXQ9Inl5eXktTU0tZGQgSEg6bW0iXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLpgInmi6nml6XmnJ8iXG4gICAgICAgICAgICAgIEBjaGFuZ2U9ImdldE1hbmFnZVVzZXJMaXN0Ii8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICAgIEBjbGljaz0iZ2V0TWFuYWdlVXNlckxpc3QiPlxuICAgICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICA8L2VsLWJ1dHRvbj5cbiAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICA6ZGlzYWJsZWQ9InNlbGVjdFJvd3MgPD0gMCJcbiAgICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgICBAY2xpY2s9ImFzc2lnblJvbGVMaXN0Ij5cbiAgICAgICAgICAgIOWIhumFjeinkuiJslxuICAgICAgICAgICAgPGkgY2xhc3M9ImVsLWljb24tZWRpdC1vdXRsaW5lIGVsLWljb24tLXJpZ2h0ICIvPlxuICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICA8L2VsLWZvcm0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1saXN0Ij5cbiAgICAgIDxlbC10YWJsZVxuICAgICAgICByZWY9ImNoYW5uZWxUYWJsZSJcbiAgICAgICAgOmRhdGE9InRhYmxlRGF0YSJcbiAgICAgICAgc3RyaXBlXG4gICAgICAgIGNsYXNzPSJ3aG9sZS10YWJsZSJcbiAgICAgICAgbWluLWhlaWdodD0iNDAwIlxuICAgICAgICBAc2VsZWN0aW9uLWNoYW5nZT0ic2VsZWN0aW9uQ2hhbmdlIj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIHR5cGU9InNlbGVjdGlvbiJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIHdpZHRoPSI1NSIvPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gdGFibGVIZWFkZXIiXG4gICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgOnByb3A9Iml0ZW0ucHJvcCJcbiAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiXG4gICAgICAgICAgOndpZHRoPSJpdGVtLndpZHRoIlxuICAgICAgICAgIDpmb3JtYXR0ZXI9Iml0ZW0uZm9ybWF0dGVyIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgZml4ZWRcbiAgICAgICAgICBzaG93LW92ZXJmbG93LXRvb2x0aXBcbiAgICAgICAgLz5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGZpeGVkPSJyaWdodCJcbiAgICAgICAgICBsYWJlbD0i5pON5L2cIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgd2lkdGg9IjI1MCI+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj5cbiAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzPSJ1c2VyIGVkaXQiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJhc3NpZ25Sb2xlKHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIOWIhumFjeinkuiJslxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+XG4gICAgICA8L2VsLXRhYmxlPlxuICAgICAgPGRpdiBjbGFzcz0icGFnaW5hdGlvbiI+XG4gICAgICAgIDxlbC1wYWdpbmF0aW9uXG4gICAgICAgICAgOnRvdGFsPSJ0b3RhbCJcbiAgICAgICAgICA6cGFnZS1zaXplcz0iWzEwLCAyMCwgMzAsIDQwXSJcbiAgICAgICAgICBiYWNrZ3JvdW5kXG4gICAgICAgICAgbGF5b3V0PSJ0b3RhbCwgc2l6ZXMsIHByZXYsIHBhZ2VyLCBuZXh0IlxuICAgICAgICAgIEBzaXplLWNoYW5nZT0iaGFuZGxlU2l6ZUNoYW5nZSJcbiAgICAgICAgICBAY3VycmVudC1jaGFuZ2U9ImhhbmRsZUN1cnJlbnRDaGFuZ2UiLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxlbC1kaWFsb2dcbiAgICAgIDp2aXNpYmxlLnN5bmM9ImRpYWxvZ1Zpc2libGUiXG4gICAgICB0aXRsZT0i55So5oi35YiG6YWN6KeS6ImyIlxuICAgICAgd2lkdGg9IjMwJSJcbiAgICAgIEBjbG9zZT0iY2xvc2VEaWFsb2ciPlxuICAgICAgPGRpdlxuICAgICAgICA6aXM9ImNvbXBvbmVudE5hbWUiXG4gICAgICAgIDp1c2VyY29kZT0idXNlcmNvZGUiXG4gICAgICAgIDp1c2VyY29kZS1saXN0PSJ1c2VyY29kZUxpc3QiXG4gICAgICAgIDp1c2VybmFtZT0idXNlcm5hbWUiXG4gICAgICAgIEBjbG9zZURpYWxvZz0iY2xvc2VEaWFsb2ciLz5cbiAgICA8L2VsLWRpYWxvZz5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCBDaXJjbGVUaXRsZSBmcm9tIFwnQC9jb21wb25lbnRzL2NvbW1vbnMvY2lyY2xlVGl0bGVcJ1xuaW1wb3J0IEFzc2lnblJvbGUgZnJvbSBcJ0AvY29tcG9uZW50cy9tYW5hZ2VTeXN0ZW1Vc2VyL2Fzc2lnblJvbGVcJ1xuaW1wb3J0IEFzc2lnblJvbGVMaXN0IGZyb20gXCdAL2NvbXBvbmVudHMvbWFuYWdlU3lzdGVtVXNlci9hc3NpZ25Sb2xlTGlzdFwnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9zeXN0ZW1Vc2Vyc0FwaVwnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBDaXJjbGVUaXRsZSxcbiAgICBBc3NpZ25Sb2xlLFxuICAgIEFzc2lnblJvbGVMaXN0XG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtYW5hZ2VVc2VyOiB7XG4gICAgICAgIHVzZXJuYW1lOiBcJ1wnLFxuICAgICAgICBzdGFydERhdGU6IFwnXCcsXG4gICAgICAgIGVuZERhdGU6IFwnXCdcbiAgICAgIH0sXG4gICAgICBkaWFsb2dWaXNpYmxlOiBmYWxzZSxcbiAgICAgIGNvbXBvbmVudE5hbWU6IFwnQXNzaWduUm9sZVwnLFxuICAgICAgdGFibGVIZWFkZXI6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwndXNlcm5hbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfmiJDlkZjotKblj7dcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdyb2xlTGlzdFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+inkuiJslwnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoY2VsbFZhbHVlLmxlbmd0aCA8PSAwKSByZXR1cm4gXCfor6XnlKjmiLfmmoLml6DliIbphY3op5LoibJcJ1xuICAgICAgICAgICAgbGV0IHRvb2xUaXAgPSBcJ1wnXG4gICAgICAgICAgICBjZWxsVmFsdWUuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IGFyci5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgdG9vbFRpcCArPSBpdGVtLm5hbWUgKyBcJyxcJ1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvb2xUaXAgKz0gaXRlbS5uYW1lXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICByZXR1cm4gdG9vbFRpcFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwncGhvbmVcJyxcbiAgICAgICAgICBsYWJlbDogXCfmiYvmnLrlj7dcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdlbWFpbFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+mCrueuseWcsOWdgFwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2NyZWF0ZWRhdGFcJyxcbiAgICAgICAgICBsYWJlbDogXCfmt7vliqDml7bpl7RcJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10oY2VsbFZhbHVlLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICB0YWJsZURhdGE6IFtdLFxuICAgICAgcGFnZU5vOiAxLFxuICAgICAgcGFnZVNpemU6IDEwLFxuICAgICAgdG90YWw6IDAsXG4gICAgICB1c2VyY29kZUxpc3Q6IFtdLFxuICAgICAgdXNlcmNvZGU6IFwnXCcsXG4gICAgICB1c2VybmFtZTogXCdcJyxcbiAgICAgIHNlbGVjdFJvd3M6IFtdXG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIFwnbWFuYWdlVXNlci51c2VybmFtZVwnICh2YWwpIHtcbiAgICAgIHRoaXMuZ2V0TWFuYWdlVXNlckxpc3QoKVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgdGhpcy5nZXRNYW5hZ2VVc2VyTGlzdCgpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBnZXRNYW5hZ2VVc2VyTGlzdCAoKSB7XG4gICAgICB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdzd2FwVGltZVwnXSh0aGlzLm1hbmFnZVVzZXIpXG4gICAgICBsZXQgdGltZVN0YXJ0ID0gdGhpcy5tYW5hZ2VVc2VyLnN0YXJ0RGF0ZSAhPT0gbnVsbCA/IG5ldyBEYXRlKHRoaXMubWFuYWdlVXNlci5zdGFydERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIGxldCB0aW1lRW5kID0gdGhpcy5tYW5hZ2VVc2VyLmVuZERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLm1hbmFnZVVzZXIuZW5kRGF0ZSkuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgQWN0aW9ucy5nZXRNYW5hZ2VVc2VyTGlzdCh7XG4gICAgICAgIFwncGFnZU5vXCc6IHRoaXMucGFnZU5vLFxuICAgICAgICBcJ3BhZ2VTaXplXCc6IHRoaXMucGFnZVNpemUsXG4gICAgICAgIFwnbmFtZVwnOiB0aGlzLm1hbmFnZVVzZXIudXNlcm5hbWUsXG4gICAgICAgIFwndGltZVN0YXJ0XCc6IHRpbWVTdGFydCxcbiAgICAgICAgXCd0aW1lRW5kXCc6IHRpbWVFbmRcbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgIGxldCBsaXN0RGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gbGlzdERhdGEubGlzdFxuICAgICAgICAgIHRoaXMudG90YWwgPSBsaXN0RGF0YS50b3RhbFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgYXNzaWduUm9sZSAocm93KSB7XG4gICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSB0cnVlXG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ0Fzc2lnblJvbGVcJ1xuICAgICAgdGhpcy51c2VyY29kZSA9IHJvdy51c2VyY29kZVxuICAgICAgdGhpcy51c2VybmFtZSA9IHJvdy51c2VybmFtZVxuICAgIH0sXG4gICAgYXNzaWduUm9sZUxpc3QgKCkge1xuICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gdHJ1ZVxuICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gXCdBc3NpZ25Sb2xlTGlzdFwnXG4gICAgfSxcbiAgICBoYW5kbGVTaXplQ2hhbmdlIChwYWdlU2l6ZSkge1xuICAgICAgdGhpcy5wYWdlU2l6ZSA9IHBhZ2VTaXplXG4gICAgICB0aGlzLmdldE1hbmFnZVVzZXJMaXN0KClcbiAgICB9LFxuICAgIGhhbmRsZUN1cnJlbnRDaGFuZ2UgKHBhZ2VJbmRleCkge1xuICAgICAgdGhpcy5wYWdlTm8gPSBwYWdlSW5kZXhcbiAgICAgIHRoaXMuZ2V0TWFuYWdlVXNlckxpc3QoKVxuICAgIH0sXG4gICAgY2xvc2VEaWFsb2cgKCkge1xuICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gXCdcJ1xuICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gZmFsc2VcbiAgICAgIHRoaXMuZ2V0TWFuYWdlVXNlckxpc3QoKVxuICAgIH0sXG4gICAgLyoqIOiOt+WPluaJgOaciemAieaLqeeahOeov+S7tklEICoqL1xuICAgIHNlbGVjdGlvbkNoYW5nZSAoc2VsZWN0aW9uKSB7XG4gICAgICAvLyB0aGlzLnJlY292ZXJTZWxlY3Rpb24oKVxuICAgICAgdGhpcy51c2VyY29kZUxpc3QgPSBbXVxuICAgICAgdGhpcy5zZWxlY3RSb3dzID0gc2VsZWN0aW9uXG4gICAgICBsZXQgdXNlcm5hbWVDb250YWN0ID0gXCdcJ1xuICAgICAgc2VsZWN0aW9uLmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgaWYgKGluZGV4ID09PSBhcnIubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHVzZXJuYW1lQ29udGFjdCArPSBpdGVtLnVzZXJuYW1lXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXNlcm5hbWVDb250YWN0ICs9IGl0ZW0udXNlcm5hbWUgKyBcJy9cJ1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXNlcmNvZGVMaXN0LnB1c2goaXRlbS51c2VyY29kZSlcbiAgICAgIH0pXG4gICAgICB0aGlzLnVzZXJuYW1lID0gdXNlcm5hbWVDb250YWN0XG4gICAgfSxcbiAgICByZWNvdmVyU2VsZWN0aW9uICgpIHtcbiAgICAgIHRoaXMuc2VsZWN0Um93cy5mb3JFYWNoKChyb3cpID0+IHtcbiAgICAgICAgdGhpcy4kcmVmcy5jaGFubmVsVGFibGUudG9nZ2xlUm93U2VsZWN0aW9uKHJvdywgdHJ1ZSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG48XC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuICAucGFnaW5hdGlvbntcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICB9XG4gIC51c2Vye1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB3aWR0aDogYXV0bztcbiAgICBoZWlnaHQ6IDIwcHg7XG4gICAgYm9yZGVyOjFweCBzb2xpZCByZ2JhKDE4MSwgMTg0LCAyMTcsIDEpO1xuICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gICAgZm9udC1zaXplOiAxM3B4O1xuICAgIHBhZGRpbmc6IDFweCA1cHggMnB4IDVweDtcbiAgICBjb2xvcjogcmdiYSgxODEsIDE4NCwgMjE3LCAxKTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbiAgLmVkaXR7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzE4ODNGRjtcbiAgICBjb2xvcjojMTg4M0ZGO1xuICB9XG4gIC5yZXNldC1wYXNzd29yZHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNjk0RUZGO1xuICAgIGNvbG9yOiM2OTRFRkY7XG4gICAgd2lkdGg6IDYwcHg7XG4gIH1cbiAgLmRlbGV0ZXtcbiAgICBib3JkZXI6MXB4IHNvbGlkICNGMDA4MDg7XG4gICAgY29sb3I6ICNGMDA4MDg7XG4gIH1cbiAgLmRpc2FibGV7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI0U3N0QwMDtcbiAgICBjb2xvcjojRTc3RDAwO1xuICB9XG48L3N0eWxlPlxuPHN0eWxlPlxuICAudXNlci1tYW5hZ2UgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICB3aWR0aDogMTYwcHg7XG4gIH1cbiAgLnVzZXItbWFuYWdlIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmVsLWZvcm0taXRlbSB7XG4gICAgd2lkdGg6IDI1JTtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LERJVVM6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi5jb3VudC1pdGVtLXdyYXBwZXJbZGF0YS12LTY2N2RkMWZiXSB7XG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgZGlzcGxheTogZmxleDtcbiAgLXdlYmtpdC1ib3gtcGFjazogc3RhcnQ7XG4gICAgICAtbXMtZmxleC1wYWNrOiBzdGFydDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XG4gICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gIC13ZWJraXQtYm94LWZsZXg6IDE7XG4gICAgICAtbXMtZmxleDogMTtcbiAgICAgICAgICBmbGV4OiAxO1xuICBmb250LXNpemU6IDA7XG59XG4uaXRlbS1pY29uW2RhdGEtdi02NjdkZDFmYl0ge1xuICB3aWR0aDogNzBweDtcbiAgbWluLXdpZHRoOiA3MHB4O1xuICBoZWlnaHQ6IDcwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuLml0ZW0taWNvbiBpW2RhdGEtdi02NjdkZDFmYl0ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG4uaXRlbS1pY29uIGkuY2xvY2tbZGF0YS12LTY2N2RkMWZiXSB7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgY29sb3I6ICM2OTRlZmY7XG59XG4uaXRlbS1pY29uIGkuY3VzdG9tLWljb25bZGF0YS12LTY2N2RkMWZiXSB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgZm9udC1zaXplOiAzNXB4O1xuICBjb2xvcjogI2ZmZjtcbiAgdG9wOiA2NSU7XG4gIGxlZnQ6IDUwJTtcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbn1cbi5pdGVtLW51bVtkYXRhLXYtNjY3ZGQxZmJdIHtcbiAgcGFkZGluZy1sZWZ0OiAyMHB4O1xuICBjb2xvcjogIzQ3NDc0NztcbiAgZm9udC1zaXplOiAwO1xufVxuLml0ZW0tbnVtIC5jb3VudC1udW1bZGF0YS12LTY2N2RkMWZiXSB7XG4gIGZvbnQtc2l6ZTogMjZweDtcbn1cbi5pdGVtLW51bSAuY291bnQtdGV4dFtkYXRhLXYtNjY3ZGQxZmJdIHtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuLyojIHNvdXJjZU1hcHBpbmdVUkw9c3JjL2NvbXBvbmVudHMvY29tbW9ucy9jb3VudEl0ZW0uY3NzLm1hcCAqLyIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvY29tbW9ucy9zcmMvY29tcG9uZW50cy9jb21tb25zL2NvdW50SXRlbS52dWUiLCIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9jb21tb25zL2NvdW50SXRlbS52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBdURBO0VBQ0UscUJBQUE7RUFBQSxxQkFBQTtFQUFBLGNBQUE7RUFDQSx3QkFBQTtNQUFBLHFCQUFBO1VBQUEsNEJBQUE7RUFDQSwwQkFBQTtNQUFBLHVCQUFBO1VBQUEsb0JBQUE7RUFDQSxvQkFBQTtFQUNBLG9CQUFBO01BQUEsWUFBQTtVQUFBLFFBQUE7RUFDQSxhQUFBO0NDdEREO0FEd0REO0VBQ0UsWUFBQTtFQUNBLGdCQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsbUJBQUE7Q0N0REQ7QUR1REM7RUFDRSxtQkFBQTtDQ3JESDtBRHNERztFQUNFLE9BQUE7RUFDQSxRQUFBO0VBQ0EsZUFBQTtDQ3BETDtBRHFERztFQUNFLHNCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxZQUFBO0VBQ0EsU0FBQTtFQUNBLFVBQUE7RUFDQSx5Q0FBQTtVQUFBLGlDQUFBO0NDbkRMO0FEb0REO0VBQ0UsbUJBQUE7RUFDQSxlQUFBO0VBQ0EsYUFBQTtDQ2xERDtBRG1EQztFQUNFLGdCQUFBO0NDakRIO0FEa0RDO0VBQ0UsZ0JBQUE7RUFDQSxpQkFBQTtDQ2hESDtBQUNELGdFQUFnRSIsZmlsZToiY291bnRJdGVtLnZ1ZSIsc291cmNlc0NvbnRlbnQ6WyJcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbi5jb3VudC1pdGVtLXdyYXBwZXJcbiAgZGlzcGxheSBmbGV4XG4gIGp1c3RpZnktY29udGVudCBmbGV4LXN0YXJ0XG4gIGFsaWduLWl0ZW1zIGNlbnRlclxuICBtYXJnaW4tYm90dG9tIDMwcHhcbiAgZmxleCAxXG4gIGZvbnQtc2l6ZSAwXG4gICAgICBcbi5pdGVtLWljb25cbiAgd2lkdGggNzBweFxuICBtaW4td2lkdGggNzBweFxuICBoZWlnaHQgNzBweFxuICBib3JkZXItcmFkaXVzIDUwJVxuICBwb3NpdGlvbiByZWxhdGl2ZVxuICBpIFxuICAgIHBvc2l0aW9uIGFic29sdXRlXG4gICAgJi5jbG9ja1xuICAgICAgdG9wIDBcbiAgICAgIGxlZnQgMFxuICAgICAgY29sb3IgIzY5NEVGRlxuICAgICYuY3VzdG9tLWljb25cbiAgICAgIGRpc3BsYXkgaW5saW5lLWJsb2NrXG4gICAgICBmb250LXNpemUgMzVweFxuICAgICAgY29sb3IgI2ZmZlxuICAgICAgdG9wIDY1JVxuICAgICAgbGVmdCA1MCVcbiAgICAgIHRyYW5zZm9ybSB0cmFuc2xhdGUoLTUwJSwtNTAlKVxuLml0ZW0tbnVtXG4gIHBhZGRpbmctbGVmdCAyMHB4XG4gIGNvbG9yICM0NzQ3NDdcbiAgZm9udC1zaXplIDBcbiAgLmNvdW50LW51bVxuICAgIGZvbnQtc2l6ZSAyNnB4ICAgIFxuICAuY291bnQtdGV4dFxuICAgIGZvbnQtc2l6ZSAxNHB4XG4gICAgbWFyZ2luLXRvcCAxMHB4XG4iLCIuY291bnQtaXRlbS13cmFwcGVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICBmbGV4OiAxO1xuICBmb250LXNpemU6IDA7XG59XG4uaXRlbS1pY29uIHtcbiAgd2lkdGg6IDcwcHg7XG4gIG1pbi13aWR0aDogNzBweDtcbiAgaGVpZ2h0OiA3MHB4O1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cbi5pdGVtLWljb24gaSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbn1cbi5pdGVtLWljb24gaS5jbG9jayB7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgY29sb3I6ICM2OTRlZmY7XG59XG4uaXRlbS1pY29uIGkuY3VzdG9tLWljb24ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGZvbnQtc2l6ZTogMzVweDtcbiAgY29sb3I6ICNmZmY7XG4gIHRvcDogNjUlO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xufVxuLml0ZW0tbnVtIHtcbiAgcGFkZGluZy1sZWZ0OiAyMHB4O1xuICBjb2xvcjogIzQ3NDc0NztcbiAgZm9udC1zaXplOiAwO1xufVxuLml0ZW0tbnVtIC5jb3VudC1udW0ge1xuICBmb250LXNpemU6IDI2cHg7XG59XG4uaXRlbS1udW0gLmNvdW50LXRleHQge1xuICBmb250LXNpemU6IDE0cHg7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG59XG4vKiMgc291cmNlTWFwcGluZ1VSTD1zcmMvY29tcG9uZW50cy9jb21tb25zL2NvdW50SXRlbS5jc3MubWFwICovIl0sc291cmNlUm9vdDoiIn1dKX0sRG52aDpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLmVsLWJ1dHRvbi0tcHJpbWFyeVtkYXRhLXYtNDBhOGFhYjNdIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzcxNkJGRjtcbiAgYm9yZGVyLWNvbG9yOiAjNzE2QkZGO1xufVxuLmVsLWJ1dHRvbi0tZGVmYXVsdFtkYXRhLXYtNDBhOGFhYjNdIHtcbiAgY29sb3I6ICM3MTZCRkYgO1xuICBib3JkZXItY29sb3I6ICM3MTZCRkY7XG59XG4uYWRkVXNlciAuZWwtY2hlY2tib3hbZGF0YS12LTQwYThhYWIzXSB7XG4gIGZsb2F0OiBsZWZ0O1xufVxuLmFkZFVzZXIgLmNoZWNrLWFsbFtkYXRhLXYtNDBhOGFhYjNdIHtcbiAgbWFyZ2luLXJpZ2h0OiAzMHB4O1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VSb2xlL3NyYy9jb21wb25lbnRzL21hbmFnZVJvbGUvYWRkUm9sZS52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBK0lBO0VBQ0EsMEJBQUE7RUFDQSxzQkFBQTtDQUNBO0FBQ0E7RUFDQSxnQkFBQTtFQUNBLHNCQUFBO0NBQ0E7QUFDQTtFQUNBLFlBQUE7Q0FDQTtBQUNBO0VBQ0EsbUJBQUE7Q0FDQSIsZmlsZToiYWRkUm9sZS52dWUiLHNvdXJjZXNDb250ZW50OlsnPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSJhZGRVc2VyIj5cbiAgICA8ZWwtZm9ybVxuICAgICAgcmVmPSJydWxlRm9ybSJcbiAgICAgIDptb2RlbD0icnVsZUZvcm0iXG4gICAgICA6cnVsZXM9InJ1bGVzIj5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuinkuiJsuWQjeensCJcbiAgICAgICAgcHJvcD0icm9sZV9uYW1lIj5cbiAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgdi1tb2RlbC50cmltPSJydWxlRm9ybS5yb2xlX25hbWUiXG4gICAgICAgICAgc3R5bGU9IndpZHRoOjI2MHB4OyJcbiAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgPC9lbC1mb3JtPlxuICAgIDxkaXYgY2xhc3M9InRhYmxlLWxpc3RzIj5cbiAgICAgIDxwIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAxMHB4OyI+5p2D6ZmQ6YWN572u77yaPC9wPlxuICAgICAgPHRyZWUtdHJhbnNmZXJcbiAgICAgICAgOnRpdGxlPSJ0aXRsZSJcbiAgICAgICAgOmZyb21fZGF0YT0iZnJvbURhdGEiXG4gICAgICAgIDp0b19kYXRhPSJ0b0RhdGEiXG4gICAgICAgIDpkZWZhdWx0LXByb3BzPSJ7bGFiZWw6XCdsYWJlbFwnfSJcbiAgICAgICAgOm1vZGU9Im1vZGUiXG4gICAgICAgIDpmaWx0ZXI9ImZhbHNlIlxuICAgICAgICBvcGVuLWFsbFxuICAgICAgICBoZWlnaHQ9IjQ0MHB4IlxuICAgICAgICBAYWRkQnRuID0gImFkZEF1dGgiXG4gICAgICAgIEByZW1vdmVCdG4gPSAicmVtb3ZlQXV0aCIvPlxuICAgIDwvZGl2PlxuICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgIGNsYXNzPSJzdWJtaXQiXG4gICAgICBzdHlsZT0id2lkdGg6MTAwJSI+XG4gICAgICA8ZWwtYnV0dG9uXG4gICAgICAgIEBjbGljaz0iY2FuY2VsIj7lj5bmtog8L2VsLWJ1dHRvbj5cbiAgICAgIDxlbC1idXR0b25cbiAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgQGNsaWNrPSJvblN1Ym1pdChcJ3J1bGVGb3JtXCcpIj7mj5DkuqQ8L2VsLWJ1dHRvbj5cbiAgICA8L2VsLWZvcm0taXRlbT5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCB0cmVlVHJhbnNmZXIgZnJvbSBcJ2VsLXRyZWUtdHJhbnNmZXJcJ1xuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tIFwnQC9hcGkvc3lzdGVtVXNlcnNBcGlcJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiBcJ0FkZFJvbGVcJyxcbiAgY29tcG9uZW50czoge1xuICAgIHRyZWVUcmFuc2ZlclxuICB9LFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcnVsZUZvcm06IHtcbiAgICAgICAgcm9sZV9uYW1lOiBcJ1wnXG4gICAgICB9LFxuICAgICAgbW9kZTogXCd0cmFuc2ZlclwnLCAvLyB0cmFuc2ZlciBhZGRyZXNzTGlzdFxuICAgICAgZnJvbURhdGE6IFtdLFxuICAgICAgdG9EYXRhOiBbXSxcbiAgICAgIHRpdGxlOiBbXCflhajpg6jmnYPpmZBcJywgXCflt7LpgInmi6nmnYPpmZBcJ10sXG4gICAgICBydWxlczoge1xuICAgICAgICByb2xlX25hbWU6IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+i+k+WFpeinkuiJsuWQjeensFwnLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBpZEFycjogW11cbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIC8qKiDojrflj5bmoJEgKiovXG4gICAgdGhpcy5nZXRUcmVlUGVybWlzc2lvbigpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBnZXRUcmVlUGVybWlzc2lvbiAoKSB7XG4gICAgICBBY3Rpb25zLmdldFRyZWVQZXJtaXNzaW9uKCkudGhlbihyZXMgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgdGhpcy5mcm9tRGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgZ2V0QWxsU2VsZWN0ZWRJZCAoKSB7XG4gICAgICB0aGlzLnRvRGF0YS5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgIHRoaXMuaWRBcnIucHVzaChpdGVtLmlkKVxuICAgICAgICBpZiAoaXRlbS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5nZXRDaGlsZHJlbklkKGl0ZW0uY2hpbGRyZW4pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBnZXRDaGlsZHJlbklkIChhcnIpIHtcbiAgICAgIGFyci5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgIHRoaXMuaWRBcnIucHVzaChpdGVtLmlkKVxuICAgICAgICBpZiAoaXRlbS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5nZXRDaGlsZHJlbklkKGl0ZW0uY2hpbGRyZW4pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBvblN1Ym1pdCAoZm9ybU5hbWUpIHtcbiAgICAgIHRoaXMuJHJlZnNbZm9ybU5hbWVdLnZhbGlkYXRlKCh2YWxpZCkgPT4ge1xuICAgICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgICBpZiAodGhpcy50b0RhdGEubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIHRoaXMuJG5vdGlmeSh7XG4gICAgICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICAgICAgdGl0bGU6IFwn6ZSZ6K+vXCcsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IFwn6K+35Li66KeS6Imy6YWN572u5p2D6ZmQXCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pZEFyciA9IFtdXG4gICAgICAgICAgdGhpcy5nZXRBbGxTZWxlY3RlZElkKClcbiAgICAgICAgICBBY3Rpb25zLmFkZFJvbGUoe1xuICAgICAgICAgICAgXCdyb2xlXCc6IHtcbiAgICAgICAgICAgICAgXCduYW1lXCc6IHRoaXMucnVsZUZvcm0ucm9sZV9uYW1lLFxuICAgICAgICAgICAgICBcJ3Blcm1pc3Npb25pZExpc3RcJzogdGhpcy5pZEFyclxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcylcbiAgICAgICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgdGhpcy4kbm90aWZ5KHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogXCfmiJDlip9cJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+a3u+WKoOinkuiJsuaIkOWKn1wnXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIHRoaXMuJGVtaXQoXCdjbG9zZURpYWxvZ1wnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCdlcnJvciBzdWJtaXQhIVwnKVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgY2FuY2VsICgpIHtcbiAgICAgIHRoaXMuJGVtaXQoXCdjbG9zZURpYWxvZ1wnKVxuICAgIH0sXG4gICAgYWRkQXV0aCAoZnJvbURhdGEsIHRvRGF0YSwgb2JqKSB7XG4gICAgICB0aGlzLnRvRGF0YSA9IHRvRGF0YVxuICAgIH0sXG4gICAgcmVtb3ZlQXV0aCAoZnJvbURhdGEsIHRvRGF0YSwgb2JqKSB7XG4gICAgICB0aGlzLnRvRGF0YSA9IHRvRGF0YVxuICAgIH1cbiAgfVxuXG59XG48XC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4gIC5lbC1idXR0b24tLXByaW1hcnkge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM3MTZCRkY7XG4gICAgYm9yZGVyLWNvbG9yOiAjNzE2QkZGO1xuICB9XG4gIC5lbC1idXR0b24tLWRlZmF1bHQge1xuICAgIGNvbG9yOiAjNzE2QkZGIDtcbiAgICBib3JkZXItY29sb3I6ICM3MTZCRkY7XG4gIH1cbiAgLmFkZFVzZXIgLmVsLWNoZWNrYm94IHtcbiAgICBmbG9hdDogbGVmdDtcbiAgfVxuICAuYWRkVXNlciAuY2hlY2stYWxsIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDMwcHg7XG4gIH1cbjwvc3R5bGU+XG48c3R5bGU+XG4gIC5lbC1kaWFsb2dfX2hlYWRlcntcbiAgICBwYWRkaW5nOiAxM3B4IDMwcHggMTNweDtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI0MwQkVGRjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjdGQUZGO1xuICB9XG4gIC5lbC1kaWFsb2dfX3RpdGxlIHtcbiAgICBsaW5lLWhlaWdodDogMTdweDtcbiAgICBmb250LXNpemU6IDE3cHg7XG4gICAgY29sb3I6ICMzMDMxMzM7XG4gIH1cbiAgLmVsLWRpYWxvZ19faGVhZGVyYnRuIHtcbiAgICB0b3A6IDEzcHg7XG4gIH1cbiAgLmVsLWRpYWxvZ19fYm9keSB7XG4gICAgcGFkZGluZzogMjBweCA2MHB4IDBweCA2MHB4O1xuICB9XG4gIC5hZGRVc2VyIC5lbC1mb3JtIHtcbiAgICBtYXJnaW4tdG9wOiAxNXB4O1xuICB9XG4gIC5hZGRVc2VyIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG4gIC5hZGRVc2VyIC5zdWJtaXQgLmVsLWZvcm0taXRlbV9fY29udGVudHtcbiAgICBmbG9hdDogcmlnaHQ7XG4gICAgd2lkdGg6IDE2MHB4O1xuICB9XG4gIC5zZWxlY3Qtcm9sZSB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzY5NEVGRjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUJGNUZGO1xuICAgIGNvbG9yOiAjNjk0RUZGO1xuICAgIHBhZGRpbmc6OHB4IDIycHggOHB4IDIycHg7XG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICB9XG4gIC5hZGRVc2VyIC5lbC1zZWxlY3Qge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG4gIC50YWJsZS1saXN0cyB7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICB9XG4gIC50YWJsZS1saXN0cyB0aGVhZCB0ciB0aCB7XG4gICAgYmFja2dyb3VuZDogIzcxNkJGRjtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgYm9yZGVyLWNvbG9yOiM3MTZCRkYgO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LER0ZTI6ZnVuY3Rpb24oZSxuKXt9LER5ZHg6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi5iYXNpcyAuZWwtdXBsb2FkLS1waWN0dXJlLWNhcmQge1xuICB3aWR0aDogNjBweDtcbiAgaGVpZ2h0OiA2MHB4O1xuICBsaW5lLWhlaWdodDogNjVweDtcbn1cbi5iYXNpcyAuZWwtdXBsb2FkLWxpc3QtLXBpY3R1cmUtY2FyZCAuZWwtdXBsb2FkLWxpc3RfX2l0ZW0ge1xuICB3aWR0aDogNjBweDtcbiAgaGVpZ2h0OiA2MHB4O1xufVxuLmJhc2lzIC5lbC1kaWFsb2dfX2hlYWRlciB7XG4gIHBhZGRpbmc6IDA7XG59XG4uYmFzaXMgLmVsLWRpYWxvZ19fYm9keSB7XG4gIHBhZGRpbmc6IDMwcHg7XG4gIGhlaWdodDogMjQwcHg7XG4gIGNvbG9yOiAjNjA2MjY2O1xuICBmb250LXNpemU6IDE0cHg7XG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgZGlzcGxheTogZmxleDtcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xuICAgICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuLmJhc2lzIC5lbC1kaWFsb2dfX2JvZHkgaW1nIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbn1cbi5iYXNpcyAuZWwtZGlhbG9nIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW46IDAgYXV0byA2MHB4O1xuICB3aWR0aDogMzAwcHg7XG4gIGhlaWdodDogMzAwcHg7XG59XG4uYmFzaXMgLmVsLWRpYWxvZ19faGVhZGVyYnRuIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDEwcHg7XG4gIHJpZ2h0OiAxMHB4O1xufVxuLmJhc2lzIC5tZW51IC5tZW51LWJveCAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDtcbn1cbi5iYXNpcyAuZnJhbWUgLmZyYW1lLWJveCAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgbWFyZ2luLWxlZnQ6IDQ1cHggIWltcG9ydGFudDtcbn1cbi5iYXNpcyAuZnJhbWUgLmZyYW1lLWJveCAuZWwtZm9ybS1pdGVtX19sYWJlbCB7XG4gIHdpZHRoOiA0MHB4ICFpbXBvcnRhbnQ7XG59XG4uYmFzaXMgLmZyYW1lIC5mcmFtZS1ib3ggLmVsLWZvcm0taXRlbSB7XG4gIG1hcmdpbi1ib3R0b206IDAgIWltcG9ydGFudDtcbn1cbi5iYXNpcyAuZWwtY2hlY2tib3hfX2lucHV0LmlzLWNoZWNrZWQgLmVsLWNoZWNrYm94X19pbm5lciwgLmVsLWNoZWNrYm94X19pbnB1dC5pcy1pbmRldGVybWluYXRlIC5lbC1jaGVja2JveF9faW5uZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjk0RUZGO1xuICBib3JkZXItY29sb3I6ICM2OTRFRkY7XG59XG4uYmFzaXMgLmVsLWNoZWNrYm94X19pbnB1dC5pcy1jaGVja2VkKy5lbC1jaGVja2JveF9fbGFiZWwge1xuICBjb2xvcjogIzY5NEVGRjtcbn1cbi5iYXNpcyAubWVudSAuZWwtdXBsb2FkLWxpc3QtLXBpY3R1cmUtY2FyZCAuZWwtdXBsb2FkLWxpc3RfX2l0ZW0tYWN0aW9ucyAuZWwtdXBsb2FkLWxpc3RfX2l0ZW0tZGVsZXRlIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlQmFzaXMvc3JjL2NvbXBvbmVudHMvbWFuYWdlQmFzaXMvYmFzaXNDb25maWd1cmF0aW9uLnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUF1cEJBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxrQkFBQTtDQUNBO0FBQ0E7RUFDQSxZQUFBO0VBQ0EsYUFBQTtDQUNBO0FBQ0E7RUFDQSxXQUFBO0NBQ0E7QUFDQTtFQUNBLGNBQUE7RUFDQSxjQUFBO0VBQ0EsZUFBQTtFQUNBLGdCQUFBO0VBQ0EscUJBQUE7RUFBQSxxQkFBQTtFQUFBLGNBQUE7RUFDQSwwQkFBQTtNQUFBLHVCQUFBO1VBQUEsb0JBQUE7RUFDQSx5QkFBQTtNQUFBLHNCQUFBO1VBQUEsd0JBQUE7Q0FDQTtBQUNBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7Q0FDQTtBQUNBO0VBQ0EsbUJBQUE7RUFDQSxvQkFBQTtFQUNBLGFBQUE7RUFDQSxjQUFBO0NBQ0E7QUFDQTtFQUNBLG1CQUFBO0VBQ0EsVUFBQTtFQUNBLFlBQUE7Q0FDQTtBQUNBO0VBQ0EsMEJBQUE7Q0FDQTtBQUNBO0VBQ0EsNkJBQUE7Q0FDQTtBQUNBO0VBQ0EsdUJBQUE7Q0FDQTtBQUNBO0VBQ0EsNEJBQUE7Q0FDQTtBQUNBO0VBQ0EsMEJBQUE7RUFDQSxzQkFBQTtDQUNBO0FBQ0E7RUFDQSxlQUFBO0NBQ0E7QUFDQTtFQUNBLGNBQUE7Q0FDQSIsZmlsZToiYmFzaXNDb25maWd1cmF0aW9uLnZ1ZSIsc291cmNlc0NvbnRlbnQ6WyI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJiYXNpc1wiPlxuICAgIDxlbC1mb3JtXG4gICAgICByZWY9XCJlZGl0Rm9ybVwiXG4gICAgICA6bW9kZWw9XCJlZGl0Rm9ybVwiXG4gICAgICA6cnVsZXM9XCJydWxlc1wiXG4gICAgICBsYWJlbC13aWR0aD1cIjEwMHB4XCJcbiAgICAgIGNsYXNzPVwiZGVtby1ydWxlRm9ybVwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm1lbnVcIj5cbiAgICAgICAgPGNpcmNsZS10aXRsZVxuICAgICAgICAgIHRpdGxlLW5hbWU9XCLoj5zljZXphY3nva5cIlxuICAgICAgICAgIGNsYXNzPVwiY2lyY2xlLXRpdGxlXCIvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibWVudS1ib3hcIj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICB2LWZvcj1cIihpdGVtLGluZGV4KSBpbiBlZGl0Rm9ybS5tZW51bGlzdFwiXG4gICAgICAgICAgICA6a2V5PVwiaW5kZXhcIlxuICAgICAgICAgICAgY2xhc3M9XCJib3gtbGVmdFwiPlxuICAgICAgICAgICAgPGVsLWNoZWNrYm94XG4gICAgICAgICAgICAgIHYtbW9kZWw9XCJpdGVtLmlzdXNlXCJcbiAgICAgICAgICAgICAgOmRpc2FibGVkPVwiaXRlbS5kaXNhYmxlZFwiPlxuICAgICAgICAgICAgICA8ZGl2IDpjbGFzcz1cIlsndGl0bGUnLCBjb3VudEF1ZGl0V2FpdCA/ICdibG9jayc6ICdub25lJ11cIj4ge3sgaXRlbS5uYW1lIH19IDwvZGl2PlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICA6Y2xhc3M9XCJbJ2lucHV0JywgY291bnRBdWRpdFdhaXQgPyAnaW5wdXQtbm9uZSc6ICdpbnB1dC1ibG9jayddXCJcbiAgICAgICAgICAgICAgICB2LW1vZGVsPVwiaXRlbS5uYW1lXCJcbiAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XCJpdGVtLmRpc2FibGVkXCJcbiAgICAgICAgICAgICAgICBtaW5sZW5ndGg9XCIxXCJcbiAgICAgICAgICAgICAgICBtYXhsZW5ndGg9XCIzXCJcbiAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiPlxuICAgICAgICAgICAgPC9lbC1jaGVja2JveD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbWctYm94XCI+XG4gICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJ3aWR0aDogNjBweDtoZWlnaHQ6IDYwcHg7b3ZlcmZsb3c6IGhpZGRlblwiPlxuICAgICAgICAgICAgICAgIDxteS11cGxvYWRcbiAgICAgICAgICAgICAgICAgIDp1cGxvYWQtaXRlbT1cIml0ZW1cIlxuICAgICAgICAgICAgICAgICAgYWxpZ249XCJsZWZ0XCJcbiAgICAgICAgICAgICAgICAgIEBvcGVuLWRpYWxvZz1cIm9wZW5EaWFsb2dcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGVsLWRpYWxvZ1xuICAgICAgICAgICAgICAgICAgOnZpc2libGUuc3luYz1cImRpYWxvZ1Zpc2libGVcIj5cbiAgICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgICAgOnNyYz1cImRpYWxvZ0ltYWdlVXJsXCJcbiAgICAgICAgICAgICAgICAgICAgYWx0PVwiXCI+XG4gICAgICAgICAgICAgICAgPC9lbC1kaWFsb2c+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8c3Bhbj7pu5jorqTlm748L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbWctYm94XCI+XG4gICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJ3aWR0aDogNjBweDtoZWlnaHQ6IDYwcHg7b3ZlcmZsb3c6IGhpZGRlblwiPlxuICAgICAgICAgICAgICAgIDxteS11cGxvYWRcbiAgICAgICAgICAgICAgICAgIDp1cGxvYWQtaWQ9XCJpdGVtLmlkXCJcbiAgICAgICAgICAgICAgICAgIDp1cGxvYWQtaXRlbT1cIml0ZW1cIlxuICAgICAgICAgICAgICAgICAgYWxpZ249XCJyaWdodFwiXG4gICAgICAgICAgICAgICAgICBAb3Blbi1kaWFsb2c9XCJvcGVuRGlhbG9nXCIvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPHNwYW4+6YCJ5Lit5Zu+PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZWRpdFwiPlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIDpjbGFzcz1cIlsnJywgY291bnRBdWRpdFdhaXQgPyAnYmxvY2snOiAnbm9uZSddXCJcbiAgICAgICAgICAgIHN0eWxlPVwibWFyZ2luLWxlZnQ6IDkwJTtmb250LXNpemU6IDE0cHhcIlxuICAgICAgICAgICAgdHlwZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICAgIEBjbGljaz1cImVkaXQoKVwiPue8lui+kTwvZWwtYnV0dG9uPlxuICAgICAgICAgIDxkaXYgOmNsYXNzPVwiWydzYXZlJywgY291bnRBdWRpdFdhaXQgPyAnbm9uZSc6ICdibG9jayddXCI+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgc3R5bGU9XCJmb250LXNpemU6IDE0cHhcIlxuICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgICAgICBAY2xpY2s9XCJzdWJtaXRNZW51KCdlZGl0Rm9ybScpXCI+5L+d5a2YPC9lbC1idXR0b24+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9XCJpbmZvXCJcbiAgICAgICAgICAgICAgc3R5bGU9XCJmb250LXNpemU6IDE0cHhcIlxuICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgICAgICBAY2xpY2s9XCJjYW5jZWwoKVwiPuWPlua2iDwvZWwtYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImZyYW1lXCI+XG4gICAgICAgIDxjaXJjbGUtdGl0bGVcbiAgICAgICAgICB0aXRsZS1uYW1lPVwi5qGG5p625YaF5a65XCJcbiAgICAgICAgICBjbGFzcz1cImNpcmNsZS10aXRsZVwiLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZyYW1lLWJveFwiPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIHYtZm9yPVwiKGl0ZW0saW5kZXgpIGluIGZyYW1lTGlzdFwiXG4gICAgICAgICAgICA6a2V5PVwiaW5kZXhcIlxuICAgICAgICAgICAgY2xhc3M9XCJib3gtbGVmdFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZyYW1ld29yay10aXRsZVwiPnt7IGl0ZW0ubmFtZSB9fTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImltZy1ib3hcIj5cbiAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cIndpZHRoOiA2MHB4O2hlaWdodDogNjBweDtvdmVyZmxvdzogaGlkZGVuXCI+XG4gICAgICAgICAgICAgICAgPG15LXVwbG9hZFxuICAgICAgICAgICAgICAgICAgOnVwbG9hZC1pdGVtPVwiaXRlbVwiXG4gICAgICAgICAgICAgICAgICA6dXBsb2FkLXVybC5zeW5jPVwiaXRlbS51cmxcIlxuICAgICAgICAgICAgICAgICAgQG9wZW4tZGlhbG9nPVwib3BlbkRpYWxvZ1wiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmcmFtZS1ib3hcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiYm94LWxlZnRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmcmFtZXdvcmstdGl0bGVcIj7popHpgZPpgInkuK3popzoibI8L2Rpdj5cbiAgICAgICAgICAgIDxlbC1jb2xvci1waWNrZXJcbiAgICAgICAgICAgICAgdi1tb2RlbD1cImVkaXRGb3JtLmNoYW5uZWxfc2VsZWN0X2NvbG9yXCJcbiAgICAgICAgICAgICAgY2xhc3M9XCJpbWctYm94XCIvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImVkaXRcIj5cbiAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICBzdHlsZT1cIm1hcmdpbi1sZWZ0OiA5MCU7Zm9udC1zaXplOiAxNHB4XCJcbiAgICAgICAgICAgIHR5cGU9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgICAgICBAY2xpY2s9XCJzdWJtaXRGcmFtZSgnZWRpdEZvcm0nKVwiPuS/neWtmDwvZWwtYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImZyYW1lIGNvbnRlbnRcIj5cbiAgICAgICAgPGNpcmNsZS10aXRsZVxuICAgICAgICAgIHRpdGxlLW5hbWU9XCLlhoXlrrnmoIfor4ZcIlxuICAgICAgICAgIGNsYXNzPVwiY2lyY2xlLXRpdGxlXCIvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZnJhbWUtYm94XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJveC1sZWZ0XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZnJhbWV3b3JrLXRpdGxlXCI+5LiT6aKY5Zu+5qCH6aKc6ImyPC9kaXY+XG4gICAgICAgICAgICA8ZWwtY29sb3ItcGlja2VyXG4gICAgICAgICAgICAgIHYtbW9kZWw9XCJlZGl0Rm9ybS5zcGVjaWFsX2ljb25fY29sb3JcIlxuICAgICAgICAgICAgICBjbGFzcz1cImltZy1ib3hcIi8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJveC1sZWZ0XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZnJhbWV3b3JrLXRpdGxlXCI+572u6aG25Zu+5qCH6aKc6ImyPC9kaXY+XG4gICAgICAgICAgICA8ZWwtY29sb3ItcGlja2VyXG4gICAgICAgICAgICAgIHYtbW9kZWw9XCJlZGl0Rm9ybS50b3BfaWNvbl9jb2xvclwiXG4gICAgICAgICAgICAgIGNsYXNzPVwiaW1nLWJveFwiLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJlZGl0XCI+XG4gICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgc3R5bGU9XCJtYXJnaW4tbGVmdDogOTAlO2ZvbnQtc2l6ZTogMTRweFwiXG4gICAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgICAgQGNsaWNrPVwic3VibWl0Q29udGVudCgnZWRpdEZvcm0nKVwiPuS/neWtmDwvZWwtYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImZyYW1lIGxvZ2luUGFnZVwiPlxuICAgICAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICAgICAgdGl0bGUtbmFtZT1cIueZu+W9lemhtVwiXG4gICAgICAgICAgY2xhc3M9XCJjaXJjbGUtdGl0bGVcIi8+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmcmFtZS1ib3hcIj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICB2LWZvcj1cIihpdGVtLGluZGV4KSBpbiBsb2dpbkxpc3RcIlxuICAgICAgICAgICAgOmtleT1cImluZGV4XCJcbiAgICAgICAgICAgIGNsYXNzPVwiYm94LWxlZnRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmcmFtZXdvcmstdGl0bGVcIj57eyBpdGVtLm5hbWUgfX08L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbWctYm94XCI+XG4gICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJ3aWR0aDogNjBweDtoZWlnaHQ6IDYwcHg7b3ZlcmZsb3c6IGhpZGRlblwiPlxuICAgICAgICAgICAgICAgIDxteS11cGxvYWRcbiAgICAgICAgICAgICAgICAgIDp1cGxvYWQtaXRlbT1cIml0ZW1cIlxuICAgICAgICAgICAgICAgICAgOnVwbG9hZC11cmwuc3luYz1cIml0ZW0udXJsXCJcbiAgICAgICAgICAgICAgICAgIEBvcGVuLWRpYWxvZz1cIm9wZW5EaWFsb2dcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZWRpdFwiPlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIHN0eWxlPVwibWFyZ2luLWxlZnQ6IDkwJTtmb250LXNpemU6IDE0cHhcIlxuICAgICAgICAgICAgdHlwZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICAgIEBjbGljaz1cInN1Ym1pdExvZ2luKCdlZGl0Rm9ybScpXCI+5L+d5a2YPC9lbC1idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9lbC1mb3JtPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IENpcmNsZVRpdGxlIGZyb20gJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlJ1xuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tICdAL2FwaS9iYXNpc0FwaSdcbmltcG9ydCB1cGxvYWRIZWFkZXJzIGZyb20gJ0AvbWl4aW5zJ1xuaW1wb3J0IE15VXBsb2FkIGZyb20gJ0AvY29tcG9uZW50cy9jb21tb25zL215VXBsb2FkJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQ2lyY2xlVGl0bGUsXG4gICAgTXlVcGxvYWRcbiAgfSxcbiAgbWl4aW5zOiBbdXBsb2FkSGVhZGVyc10sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBlZGl0Rm9ybToge1xuICAgICAgICBjaGFubmVsX3NlbGVjdF9jb2xvcjogJ3JlZCcsXG4gICAgICAgIHNwZWNpYWxfaWNvbl9jb2xvcjogJ3JlZCcsXG4gICAgICAgIHRvcF9pY29uX2NvbG9yOiAncmVkJyxcbiAgICAgICAgbWVudWxpc3Q6IFtdLFxuICAgICAgICBkaXNhYmxlZDogdHJ1ZSxcbiAgICAgICAgZGF0YTogJydcbiAgICAgIH0sXG4gICAgICBmcmFtZUxpc3Q6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfpobbpg6jog4zmma8nLFxuICAgICAgICAgIHVybDogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfmiJHnmoTog4zmma8nLFxuICAgICAgICAgIHVybDogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfoh6rlrprkuYnlm77moIcnLFxuICAgICAgICAgIHVybDogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfmkJzntKLlm77moIcnLFxuICAgICAgICAgIHVybDogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfog4zmma9sb2dvJyxcbiAgICAgICAgICB1cmw6ICcnXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBsb2dpbkxpc3Q6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfnmbvlvZXog4zmma8nLFxuICAgICAgICAgIHVybDogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfnmbvlvZVsb2dvJyxcbiAgICAgICAgICB1cmw6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAn55m75b2V5oyJ6ZKuJyxcbiAgICAgICAgICB1cmw6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAn5rOo5YaM5oyJ6ZKuJyxcbiAgICAgICAgICB1cmw6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAn6LSm5Y+3aWNvbicsXG4gICAgICAgICAgdXJsOiAnJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ+WvhueggWljb24nLFxuICAgICAgICAgIHVybDogJydcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlLFxuICAgICAgZGlhbG9nSW1hZ2VVcmw6ICcnLFxuICAgICAgY291bnRBdWRpdFdhaXQ6IHRydWUsXG4gICAgICBydWxlczoge1xuICAgICAgICBoZWFkX2ltZzogW1xuICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICfor7fkuIrkvKDlm77niYcnLCB0cmlnZ2VyOiAnYmx1cicgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGdldFVwbG9hZFVybCAoKSB7XG4gICAgICByZXR1cm4gQWN0aW9ucy51cGxvYWRQaWN0dXJlKClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuZ2V0QmFzaXNCeUlEKClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldEJhc2lzQnlJRCAoKSB7XG4gICAgICBBY3Rpb25zLmdldEJhc2lzQnlJRCgpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgdGhpcy5lZGl0Rm9ybS5kYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKVxuICAgICAgICAgIGZvciAodmFyIGl0ZW0gaW4gZGF0YS5tZW51KSB7XG4gICAgICAgICAgICBkYXRhLm1lbnVbaXRlbV0uZGlzYWJsZWQgPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZWRpdEZvcm0ubWVudWxpc3QgPSBkYXRhLm1lbnVcbiAgICAgICAgICB0aGlzLiRzZXQodGhpcy5mcmFtZUxpc3RbMF0sICd1cmwnLCBkYXRhLmZyYW1lLnRvcF9iZ191cmwpXG4gICAgICAgICAgdGhpcy4kc2V0KHRoaXMuZnJhbWVMaXN0WzFdLCAndXJsJywgZGF0YS5mcmFtZS5jZW50ZXJfYmdfdXJsKVxuICAgICAgICAgIHRoaXMuJHNldCh0aGlzLmZyYW1lTGlzdFsyXSwgJ3VybCcsIGRhdGEuZnJhbWUuaWNvbl9zZWxlY3RfdXJsKVxuICAgICAgICAgIHRoaXMuJHNldCh0aGlzLmZyYW1lTGlzdFszXSwgJ3VybCcsIGRhdGEuZnJhbWUuc2VhcmNoX2ljb24pXG4gICAgICAgICAgdGhpcy4kc2V0KHRoaXMuZnJhbWVMaXN0WzRdLCAndXJsJywgZGF0YS5mcmFtZS5iZ19sb2dvX3VybClcbiAgICAgICAgICB0aGlzLiRzZXQodGhpcy5sb2dpbkxpc3RbMF0sICd1cmwnLCBkYXRhLmxvZ2luUGFnZS5sb2dpbl9iZ191cmwpXG4gICAgICAgICAgdGhpcy4kc2V0KHRoaXMubG9naW5MaXN0WzFdLCAndXJsJywgZGF0YS5sb2dpblBhZ2UubG9naW5fbG9nb191cmwpXG4gICAgICAgICAgdGhpcy4kc2V0KHRoaXMubG9naW5MaXN0WzJdLCAndXJsJywgZGF0YS5sb2dpblBhZ2UubG9naW5fYnRuX3VybClcbiAgICAgICAgICB0aGlzLiRzZXQodGhpcy5sb2dpbkxpc3RbM10sICd1cmwnLCBkYXRhLmxvZ2luUGFnZS5yZWdpc3Rlcl9idG5fdXJsKVxuICAgICAgICAgIHRoaXMuJHNldCh0aGlzLmxvZ2luTGlzdFs0XSwgJ3VybCcsIGRhdGEubG9naW5QYWdlLnVzZXJuYW1lX2ljb24pXG4gICAgICAgICAgdGhpcy4kc2V0KHRoaXMubG9naW5MaXN0WzVdLCAndXJsJywgZGF0YS5sb2dpblBhZ2UucGFzc3dvcmRfaWNvbilcbiAgICAgICAgICB0aGlzLmVkaXRGb3JtLmNoYW5uZWxfc2VsZWN0X2NvbG9yID0gZGF0YS5mcmFtZS5jaGFubmVsX3NlbGVjdF9jb2xvclxuICAgICAgICAgIHRoaXMuZWRpdEZvcm0uc3BlY2lhbF9pY29uX2NvbG9yID0gZGF0YS5jb250ZW50LnNwZWNpYWxfaWNvbl9jb2xvclxuICAgICAgICAgIHRoaXMuZWRpdEZvcm0udG9wX2ljb25fY29sb3IgPSBkYXRhLmNvbnRlbnQudG9wX2ljb25fY29sb3JcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGVkaXQgKCkge1xuICAgICAgZm9yICh2YXIgaXRlbSBpbiB0aGlzLmVkaXRGb3JtLmRhdGEubWVudSkge1xuICAgICAgICBpZiAoaXRlbSAhPT0gJ3BlcnNvbmFsQ2VudGVyJykge1xuICAgICAgICAgIHRoaXMuZWRpdEZvcm0uZGF0YS5tZW51W2l0ZW1dLmRpc2FibGVkID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IGRlbGV0ZUJ0bkxpc3QgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51IC5lbC11cGxvYWQtbGlzdF9faXRlbS1kZWxldGUnKSlcbiAgICAgIGRlbGV0ZUJ0bkxpc3QuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jaydcbiAgICAgIH0pXG4gICAgICB0aGlzLmNvdW50QXVkaXRXYWl0ID0gZmFsc2VcbiAgICB9LFxuICAgIGNhbmNlbCAoKSB7XG4gICAgICBsZXQgZGVsZXRlQnRuTGlzdCA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1lbnUgLmVsLXVwbG9hZC1saXN0X19pdGVtLWRlbGV0ZScpKVxuICAgICAgZGVsZXRlQnRuTGlzdC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgIH0pXG4gICAgICB0aGlzLmNvdW50QXVkaXRXYWl0ID0gdHJ1ZVxuICAgICAgdGhpcy5nZXRCYXNpc0J5SUQoKVxuICAgIH0sXG4gICAgb3BlbkRpYWxvZyAoZGF0YTEpIHtcbiAgICAgIHRoaXMuZGlhbG9nSW1hZ2VVcmwgPSBkYXRhMVxuICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gdHJ1ZVxuICAgIH0sXG4gICAgc3VibWl0TWVudSAoZm9ybU5hbWUpIHtcbiAgICAgIHRoaXMuJHJlZnNbZm9ybU5hbWVdLnZhbGlkYXRlKCh2YWxpZCkgPT4ge1xuICAgICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgICBsZXQgbWVudSA9IHtcbiAgICAgICAgICAgICduZXdzJzoge1xuICAgICAgICAgICAgICAnaXN1c2UnOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0Lm5ld3MuaXN1c2UsXG4gICAgICAgICAgICAgICduYW1lJzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5uZXdzLm5hbWUsXG4gICAgICAgICAgICAgICdpY29uJzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5uZXdzLmljb24sXG4gICAgICAgICAgICAgICdpY29uX3NlbGVjdCc6IHRoaXMuZWRpdEZvcm0ubWVudWxpc3QubmV3cy5pY29uX3NlbGVjdFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdvbkRlbWFuZCc6IHtcbiAgICAgICAgICAgICAgJ2lzdXNlJzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5vbkRlbWFuZC5pc3VzZSxcbiAgICAgICAgICAgICAgJ25hbWUnOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0Lm9uRGVtYW5kLm5hbWUsXG4gICAgICAgICAgICAgICdpY29uJzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5vbkRlbWFuZC5pY29uLFxuICAgICAgICAgICAgICAnaWNvbl9zZWxlY3QnOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0Lm9uRGVtYW5kLmljb25fc2VsZWN0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2xpdmVCcm9hZGNhc3QnOiB7XG4gICAgICAgICAgICAgICdpc3VzZSc6IHRoaXMuZWRpdEZvcm0ubWVudWxpc3QubGl2ZUJyb2FkY2FzdC5pc3VzZSxcbiAgICAgICAgICAgICAgJ25hbWUnOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0LmxpdmVCcm9hZGNhc3QubmFtZSxcbiAgICAgICAgICAgICAgJ2ljb24nOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0LmxpdmVCcm9hZGNhc3QuaWNvbixcbiAgICAgICAgICAgICAgJ2ljb25fc2VsZWN0JzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5saXZlQnJvYWRjYXN0Lmljb25fc2VsZWN0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ3NlcnZpY2UnOiB7XG4gICAgICAgICAgICAgICdpc3VzZSc6IHRoaXMuZWRpdEZvcm0ubWVudWxpc3Quc2VydmljZS5pc3VzZSxcbiAgICAgICAgICAgICAgJ25hbWUnOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0LnNlcnZpY2UubmFtZSxcbiAgICAgICAgICAgICAgJ2ljb24nOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0LnNlcnZpY2UuaWNvbixcbiAgICAgICAgICAgICAgJ2ljb25fc2VsZWN0JzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5zZXJ2aWNlLmljb25fc2VsZWN0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2VfY29tbWVyY2UnOiB7XG4gICAgICAgICAgICAgICdpc3VzZSc6IHRoaXMuZWRpdEZvcm0ubWVudWxpc3QuZV9jb21tZXJjZS5pc3VzZSxcbiAgICAgICAgICAgICAgJ25hbWUnOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0LmVfY29tbWVyY2UubmFtZSxcbiAgICAgICAgICAgICAgJ2ljb24nOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0LmVfY29tbWVyY2UuaWNvbixcbiAgICAgICAgICAgICAgJ2ljb25fc2VsZWN0JzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5lX2NvbW1lcmNlLmljb25fc2VsZWN0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2ludGVyYWN0aW9uJzoge1xuICAgICAgICAgICAgICAnaXN1c2UnOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0LmludGVyYWN0aW9uLmlzdXNlLFxuICAgICAgICAgICAgICAnbmFtZSc6IHRoaXMuZWRpdEZvcm0ubWVudWxpc3QuaW50ZXJhY3Rpb24ubmFtZSxcbiAgICAgICAgICAgICAgJ2ljb24nOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0LmludGVyYWN0aW9uLmljb24sXG4gICAgICAgICAgICAgICdpY29uX3NlbGVjdCc6IHRoaXMuZWRpdEZvcm0ubWVudWxpc3QuaW50ZXJhY3Rpb24uaWNvbl9zZWxlY3RcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAncGVyc29uYWxDZW50ZXInOiB7XG4gICAgICAgICAgICAgICdpc3VzZSc6IHRoaXMuZWRpdEZvcm0ubWVudWxpc3QucGVyc29uYWxDZW50ZXIuaXN1c2UsXG4gICAgICAgICAgICAgICduYW1lJzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5wZXJzb25hbENlbnRlci5uYW1lLFxuICAgICAgICAgICAgICAnaWNvbic6IHRoaXMuZWRpdEZvcm0ubWVudWxpc3QucGVyc29uYWxDZW50ZXIuaWNvbixcbiAgICAgICAgICAgICAgJ2ljb25fc2VsZWN0JzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5wZXJzb25hbENlbnRlci5pY29uX3NlbGVjdFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBBY3Rpb25zLnNhdmVCYXNpcyh7XG4gICAgICAgICAgICAnY29uZmlndXJhdGlvbic6IHtcbiAgICAgICAgICAgICAgJ3VwZGF0ZUNvbmZpZ3VyYXRpb24nOiAnbWVudScsXG4gICAgICAgICAgICAgICdtZW51JzogbWVudVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICBsZXQgZGVsZXRlQnRuTGlzdCA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1lbnUgLmVsLXVwbG9hZC1saXN0X19pdGVtLWRlbGV0ZScpKVxuICAgICAgICAgICAgICBkZWxldGVCdG5MaXN0LmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIHRoaXMuZ2V0QmFzaXNCeUlEKClcbiAgICAgICAgICAgICAgdGhpcy5jb3VudEF1ZGl0V2FpdCA9IHRydWVcbiAgICAgICAgICAgICAgdGhpcy4kbm90aWZ5KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+mAmuefpScsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ+abtOaUueaIkOWKnycsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3Igc3VibWl0ISEnKVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgc3VibWl0RnJhbWUgKGZvcm1OYW1lKSB7XG4gICAgICB0aGlzLiRyZWZzW2Zvcm1OYW1lXS52YWxpZGF0ZSgodmFsaWQpID0+IHtcbiAgICAgICAgaWYgKHZhbGlkKSB7XG4gICAgICAgICAgQWN0aW9ucy5zYXZlQmFzaXMoe1xuICAgICAgICAgICAgJ2NvbmZpZ3VyYXRpb24nOiB7XG4gICAgICAgICAgICAgICd1cGRhdGVDb25maWd1cmF0aW9uJzogJ2ZyYW1lJyxcbiAgICAgICAgICAgICAgJ2ZyYW1lJzoge1xuICAgICAgICAgICAgICAgICd0b3BfYmdfdXJsJzogdGhpcy5mcmFtZUxpc3RbMF0udXJsLFxuICAgICAgICAgICAgICAgICdjZW50ZXJfYmdfdXJsJzogdGhpcy5mcmFtZUxpc3RbMV0udXJsLFxuICAgICAgICAgICAgICAgICdpY29uX3NlbGVjdF91cmwnOiB0aGlzLmZyYW1lTGlzdFsyXS51cmwsXG4gICAgICAgICAgICAgICAgJ3NlYXJjaF9pY29uJzogdGhpcy5mcmFtZUxpc3RbM10udXJsLFxuICAgICAgICAgICAgICAgICdiZ19sb2dvX3VybCc6IHRoaXMuZnJhbWVMaXN0WzRdLnVybCxcbiAgICAgICAgICAgICAgICAnY2hhbm5lbF9zZWxlY3RfY29sb3InOiB0aGlzLmVkaXRGb3JtLmNoYW5uZWxfc2VsZWN0X2NvbG9yXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgQWN0aW9ucy5nZXRCYXNpc0J5SUQoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMuZnJhbWVMaXN0WzBdLCAndXJsJywgZGF0YS5mcmFtZS50b3BfYmdfdXJsKVxuICAgICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMuZnJhbWVMaXN0WzFdLCAndXJsJywgZGF0YS5mcmFtZS5jZW50ZXJfYmdfdXJsKVxuICAgICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMuZnJhbWVMaXN0WzJdLCAndXJsJywgZGF0YS5mcmFtZS5pY29uX3NlbGVjdF91cmwpXG4gICAgICAgICAgICAgICAgICB0aGlzLiRzZXQodGhpcy5mcmFtZUxpc3RbM10sICd1cmwnLCBkYXRhLmZyYW1lLnNlYXJjaF9pY29uKVxuICAgICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMuZnJhbWVMaXN0WzRdLCAndXJsJywgZGF0YS5mcmFtZS5iZ19sb2dvX3VybClcbiAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdEZvcm0uY2hhbm5lbF9zZWxlY3RfY29sb3IgPSBkYXRhLmZyYW1lLmNoYW5uZWxfc2VsZWN0X2NvbG9yXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB0aGlzLiRub3RpZnkoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiAn6YCa55+lJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAn5pu05pS55oiQ5YqfJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcydcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBzdWJtaXQhIScpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBzdWJtaXRDb250ZW50IChmb3JtTmFtZSkge1xuICAgICAgdGhpcy4kcmVmc1tmb3JtTmFtZV0udmFsaWRhdGUoKHZhbGlkKSA9PiB7XG4gICAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICAgIEFjdGlvbnMuc2F2ZUJhc2lzKHtcbiAgICAgICAgICAgICdjb25maWd1cmF0aW9uJzoge1xuICAgICAgICAgICAgICAndXBkYXRlQ29uZmlndXJhdGlvbic6ICdjb250ZW50JyxcbiAgICAgICAgICAgICAgJ2NvbnRlbnQnOiB7XG4gICAgICAgICAgICAgICAgJ3NwZWNpYWxfaWNvbl9jb2xvcic6IHRoaXMuZWRpdEZvcm0uc3BlY2lhbF9pY29uX2NvbG9yLFxuICAgICAgICAgICAgICAgICd0b3BfaWNvbl9jb2xvcic6IHRoaXMuZWRpdEZvcm0udG9wX2ljb25fY29sb3JcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICBBY3Rpb25zLmdldEJhc2lzQnlJRCgpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgICAgICAgICB0aGlzLmVkaXRGb3JtLnNwZWNpYWxfaWNvbl9jb2xvciA9IGRhdGEuY29udGVudC5zcGVjaWFsX2ljb25fY29sb3JcbiAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdEZvcm0udG9wX2ljb25fY29sb3IgPSBkYXRhLmNvbnRlbnQudG9wX2ljb25fY29sb3JcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIHRoaXMuJG5vdGlmeSh7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICfpgJrnn6UnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICfmm7TmlLnmiJDlip8nLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yIHN1Ym1pdCEhJylcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIHN1Ym1pdExvZ2luIChmb3JtTmFtZSkge1xuICAgICAgdGhpcy4kcmVmc1tmb3JtTmFtZV0udmFsaWRhdGUoKHZhbGlkKSA9PiB7XG4gICAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICAgIEFjdGlvbnMuc2F2ZUJhc2lzKHtcbiAgICAgICAgICAgICdjb25maWd1cmF0aW9uJzoge1xuICAgICAgICAgICAgICAndXBkYXRlQ29uZmlndXJhdGlvbic6ICdsb2dpblBhZ2UnLFxuICAgICAgICAgICAgICAnbG9naW5QYWdlJzoge1xuICAgICAgICAgICAgICAgICdsb2dpbl9iZ191cmwnOiB0aGlzLmxvZ2luTGlzdFswXS51cmwsXG4gICAgICAgICAgICAgICAgJ2xvZ2luX2xvZ29fdXJsJzogdGhpcy5sb2dpbkxpc3RbMV0udXJsLFxuICAgICAgICAgICAgICAgICdsb2dpbl9idG5fdXJsJzogdGhpcy5sb2dpbkxpc3RbMl0udXJsLFxuICAgICAgICAgICAgICAgICdyZWdpc3Rlcl9idG5fdXJsJzogdGhpcy5sb2dpbkxpc3RbM10udXJsLFxuICAgICAgICAgICAgICAgICd1c2VybmFtZV9pY29uJzogdGhpcy5sb2dpbkxpc3RbNF0udXJsLFxuICAgICAgICAgICAgICAgICdwYXNzd29yZF9pY29uJzogdGhpcy5sb2dpbkxpc3RbNV0udXJsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgQWN0aW9ucy5nZXRCYXNpc0J5SUQoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMubG9naW5MaXN0WzBdLCAndXJsJywgZGF0YS5sb2dpblBhZ2UubG9naW5fYmdfdXJsKVxuICAgICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMubG9naW5MaXN0WzFdLCAndXJsJywgZGF0YS5sb2dpblBhZ2UubG9naW5fbG9nb191cmwpXG4gICAgICAgICAgICAgICAgICB0aGlzLiRzZXQodGhpcy5sb2dpbkxpc3RbMl0sICd1cmwnLCBkYXRhLmxvZ2luUGFnZS5sb2dpbl9idG5fdXJsKVxuICAgICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMubG9naW5MaXN0WzNdLCAndXJsJywgZGF0YS5sb2dpblBhZ2UucmVnaXN0ZXJfYnRuX3VybClcbiAgICAgICAgICAgICAgICAgIHRoaXMuJHNldCh0aGlzLmxvZ2luTGlzdFs0XSwgJ3VybCcsIGRhdGEubG9naW5QYWdlLnVzZXJuYW1lX2ljb24pXG4gICAgICAgICAgICAgICAgICB0aGlzLiRzZXQodGhpcy5sb2dpbkxpc3RbNV0sICd1cmwnLCBkYXRhLmxvZ2luUGFnZS5wYXNzd29yZF9pY29uKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgdGhpcy4kbm90aWZ5KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+mAmuefpScsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ+abtOaUueaIkOWKnycsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3Igc3VibWl0ISEnKVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgaGFuZGxlUGNBdmF0YXJTdWNjZXNzIChyZXMsIGZpbGUsIGZpbGVMaXN0KSB7XG4gICAgICBjb25zb2xlLmxvZyhyZXMpXG4gICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICBsZXQgaW1hZ2VVcmwgPSByZXMucmVzdWx0XG4gICAgICAgIGlmICh0aGlzLmFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgICB0aGlzLiRzZXQodGhpcy51cGxvYWRJdGVtLCAnaWNvbicsIGltYWdlVXJsKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnZ2VyXG4gICAgICAgICAgdGhpcy4kc2V0KHRoaXMudXBsb2FkSXRlbSwgJ2ljb25fc2VsZWN0JywgaW1hZ2VVcmwpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZUF2YXRhclVwbG9hZCAoZmlsZSkge1xuICAgICAgbGV0IGltYWdlT2JqID0ge1xuICAgICAgICAnaW1hZ2UvanBlZyc6IHRydWUsXG4gICAgICAgICdpbWFnZS9wbmcnOiB0cnVlLFxuICAgICAgICAnaW1hZ2UvanBnJzogdHJ1ZVxuICAgICAgfVxuICAgICAgY29uc3QgaXNJbWFnZSA9IGZpbGUudHlwZSBpbiBpbWFnZU9ialxuICAgICAgY29uc3QgaXNMdDFNID0gZmlsZS5zaXplIC8gMTAyNCAvIDEwMjQgPCAxXG4gICAgICBpZiAoIWlzSW1hZ2UpIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign6K+35LiK5Lyg5LiA5byg5Zu+54mHIScpXG4gICAgICB9XG4gICAgICBpZiAoIWlzTHQxTSkge1xuICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfkuIrkvKDlm77niYflpKflsI/kuI3og73otoXov4cgMU1CIScpXG4gICAgICB9XG4gICAgICByZXR1cm4gaXNJbWFnZSAmJiBpc0x0MU1cbiAgICB9XG4gIH1cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5iYXNpcyB7XG4gICAgcGFkZGluZzowIDI4cHggNDBweCAyOHB4O1xuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcbiAgfVxuICAuYmFzaXMgLmF2YXRhci11cGxvYWRlci1pY29uIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgY29sb3I6ICM4YzkzOWQ7XG4gICAgd2lkdGg6IDYwcHg7XG4gICAgaGVpZ2h0OiA2MHB4O1xuICAgIGxpbmUtaGVpZ2h0OiA2MHB4O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgfVxuICAuYmFzaXMgLnNhdmUge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbWFyZ2luLWxlZnQ6IDg1JTtcbiAgfVxuICAuYmFzaXMgLmNpcmNsZS10aXRsZSB7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gIH1cbiAgLmJhc2lzIC5tZW51IHtcbiAgICBwYWRkaW5nOjEwcHg7XG4gICAgbWFyZ2luLXRvcDogNDBweDtcbiAgICBib3JkZXI6MXB4IHNvbGlkICNEQURFREY7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICB9XG4gIC5iYXNpcyAubWVudSAubWVudS1ib3gge1xuICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICBwYWRkaW5nOiAwIDAgMjBweCA0MHB4O1xuICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgIG1hcmdpbi1sZWZ0OiAtMTMwcHg7XG4gICB9XG4gIC5iYXNpcyAubWVudSAubWVudS1ib3ggLmJveC1sZWZ0IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgcGFkZGluZzogMCAwIDIwcHggMDtcbiAgICBtYXJnaW4tbGVmdDogMTMwcHg7XG4gIH1cbiAgLmJhc2lzIC5mcmFtZSB7XG4gICAgcGFkZGluZzoxMHB4O1xuICAgIG1hcmdpbi10b3A6IDQwcHg7XG4gICAgYm9yZGVyOjFweCBzb2xpZCAjREFERURGO1xuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgfVxuICAuYmFzaXMgLmZyYW1lIC5mcmFtZS1ib3gge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgcGFkZGluZzogMCAwIDIwcHggNDBweDtcbiAgICBtYXJnaW4tbGVmdDogLTI2MHB4O1xuICB9XG4gIC5iYXNpcyAuZnJhbWUgLmZyYW1lLWJveCAuYm94LWxlZnQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwYWRkaW5nOiAwIDAgMjBweCAwO1xuICAgIG1hcmdpbi1sZWZ0OiAyNjBweDtcbiAgfVxuICAuYmFzaXMgLmZyYW1lIC5mcmFtZS1ib3ggLmJveC1sZWZ0IC5mcmFtZXdvcmstdGl0bGUge1xuICAgIGNvbG9yOiAjMzMzO1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgfVxuICAuZnJhbWUtYm94IC5ib3gtbGVmdCAuaW1nLWJveCB7XG4gICAgbWFyZ2luLWxlZnQ6IDIwcHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cbiAgLmJhc2lzIC5jb250ZW50IHtcbiAgICBwYWRkaW5nOjEwcHg7XG4gICAgbWFyZ2luLXRvcDogNDBweDtcbiAgICBib3JkZXI6MXB4IHNvbGlkICNEQURFREY7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICB9XG4gIC5iYXNpcyAuY29udGVudCAuY29udGVudC1ib3gge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwYWRkaW5nOiAwIDAgMjBweCA0MHB4O1xuICB9XG4gIC5tZW51LWJveCAuYm94LWxlZnQgLnRpdGxlIHtcbiAgICB3aWR0aDogNTBweDtcbiAgfVxuICAuYmFzaXMgLmJsb2NrIHtcbiAgICAgZGlzcGxheTogYmxvY2s7XG4gICB9XG4gIC5iYXNpcyAubm9uZSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuICAubWVudS1ib3ggLmJveC1sZWZ0IC5pbnB1dC1ibG9jayB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzQwOUVGRjtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgfVxuICAubWVudS1ib3ggLmJveC1sZWZ0IC5pbnB1dC1ub25lIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIGJvcmRlcjogbm9uZTtcbiAgfVxuICAubWVudS1ib3ggLmJveC1sZWZ0IC5pbnB1dCB7XG4gICAgd2lkdGg6IDUwcHg7XG4gIH1cbiAgLm1lbnUtYm94IC5hdmF0YXItdXBsb2FkZXIge1xuICAgIHdpZHRoOiA2MHB4O1xuICAgIGhlaWdodDogNjBweDtcbiAgfVxuICAubWVudS1ib3ggLmJveC1sZWZ0IC5pbWctYm94IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cbiAgLm1lbnUtYm94IC5ib3gxIC5pbWctYm94IHtcbiAgICBtYXJnaW4tbGVmdDogMjBweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuICAubWVudS1ib3ggLmltZy1ib3ggc3BhbiB7XG4gICAgY29sb3I6IGJsYWNrO1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICBtYXJnaW4tdG9wOiA4cHg7XG4gIH1cbiAgLmJhc2lzIC5lZGl0IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICB9XG4gIC5pbWctYXZhdGFyIHtcbiAgICB3aWR0aDogNjBweDtcbiAgICBoZWlnaHQ6IDYwcHg7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbjwvc3R5bGU+XG48c3R5bGU+XG4gIC5iYXNpcyAuZWwtdXBsb2FkLS1waWN0dXJlLWNhcmQge1xuICAgIHdpZHRoOiA2MHB4O1xuICAgIGhlaWdodDogNjBweDtcbiAgICBsaW5lLWhlaWdodDogNjVweDtcbiAgfVxuICAuYmFzaXMgLmVsLXVwbG9hZC1saXN0LS1waWN0dXJlLWNhcmQgLmVsLXVwbG9hZC1saXN0X19pdGVtIHtcbiAgICB3aWR0aDogNjBweDtcbiAgICBoZWlnaHQ6IDYwcHg7XG4gIH1cbiAgLmJhc2lzIC5lbC1kaWFsb2dfX2hlYWRlciB7XG4gICAgcGFkZGluZzogMDtcbiAgfVxuICAuYmFzaXMgLmVsLWRpYWxvZ19fYm9keSB7XG4gICAgcGFkZGluZzogMzBweDtcbiAgICBoZWlnaHQ6IDI0MHB4O1xuICAgIGNvbG9yOiAjNjA2MjY2O1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIH1cbiAgLmJhc2lzIC5lbC1kaWFsb2dfX2JvZHkgaW1nIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cbiAgLmJhc2lzIC5lbC1kaWFsb2cge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtYXJnaW46IDAgYXV0byA2MHB4O1xuICAgIHdpZHRoOiAzMDBweDtcbiAgICBoZWlnaHQ6IDMwMHB4O1xuICB9XG4gIC5iYXNpcyAuZWwtZGlhbG9nX19oZWFkZXJidG4ge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDEwcHg7XG4gICAgcmlnaHQ6IDEwcHg7XG4gIH1cbiAgLmJhc2lzIC5tZW51IC5tZW51LWJveCAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICBtYXJnaW4tbGVmdDogMCAhaW1wb3J0YW50O1xuICB9XG4gIC5iYXNpcyAuZnJhbWUgLmZyYW1lLWJveCAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICBtYXJnaW4tbGVmdDogNDVweCAhaW1wb3J0YW50O1xuICB9XG4gIC5iYXNpcyAuZnJhbWUgLmZyYW1lLWJveCAuZWwtZm9ybS1pdGVtX19sYWJlbCB7XG4gICAgd2lkdGg6IDQwcHggIWltcG9ydGFudDtcbiAgfVxuICAuYmFzaXMgLmZyYW1lIC5mcmFtZS1ib3ggLmVsLWZvcm0taXRlbSB7XG4gICAgbWFyZ2luLWJvdHRvbTogMCAhaW1wb3J0YW50O1xuICB9XG4gIC5iYXNpcyAuZWwtY2hlY2tib3hfX2lucHV0LmlzLWNoZWNrZWQgLmVsLWNoZWNrYm94X19pbm5lciwgLmVsLWNoZWNrYm94X19pbnB1dC5pcy1pbmRldGVybWluYXRlIC5lbC1jaGVja2JveF9faW5uZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM2OTRFRkY7XG4gICAgYm9yZGVyLWNvbG9yOiAjNjk0RUZGO1xuICB9XG4gIC5iYXNpcyAuZWwtY2hlY2tib3hfX2lucHV0LmlzLWNoZWNrZWQrLmVsLWNoZWNrYm94X19sYWJlbCB7XG4gICAgY29sb3I6ICM2OTRFRkY7XG4gIH1cbiAgLmJhc2lzIC5tZW51IC5lbC11cGxvYWQtbGlzdC0tcGljdHVyZS1jYXJkIC5lbC11cGxvYWQtbGlzdF9faXRlbS1hY3Rpb25zIC5lbC11cGxvYWQtbGlzdF9faXRlbS1kZWxldGUge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbjwvc3R5bGU+XG4iXSxzb3VyY2VSb290OiIifV0pfSxFMjBvOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJBcVI1Iik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjQ3NDBlNTY5IixhLCExLHt9KX0sRkVvdTpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgiemlIYiIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCJlZWExOTE2OCIsYSwhMSx7fSl9LEZLQmU6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoIlVIemoiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiN2FmY2YxY2MiLGEsITEse30pfSxHSEdoOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJ6LytkIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjA4YmFjOTA2IixhLCExLHt9KX0sR1hFcDpmdW5jdGlvbihlLG4pe30sR1puSDpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgibEJiRyIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCI1ZGZkMTE0ZSIsYSwhMSx7fSl9LEhaVWk6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoImJQYkoiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiNzA3NDI1ODUiLGEsITEse30pfSxIdHVuOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJDUGxOIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjI4NTU0YzFhIixhLCExLHt9KX0sIkkvTzgiOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uc2VhcmNoLWZvcm0tY29udGFpbmVyIC5idG4tY29udGFpbmVyIC5lbC1idXR0b257XG4gIHBhZGRpbmc6IDEycHggMTBweDtcbn1cbi5zZWFyY2gtZm9ybS1jb250YWluZXIgLmJ0bi1jb250YWluZXIgLmVsLWljb24tLXJpZ2h0e1xuICBtYXJnaW46IDA7XG59XG4uY3VzdG9tLWRpYWxvZyAuZWwtZGlhbG9nX19oZWFkZXJ7XG4gIC8qcGFkZGluZzogMDsqL1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSgxOTIsMTkwLDI1NSwxKTtcbn1cbi5lbC10b29sdGlwX19wb3BwZXJ7XG4gIG1heC13aWR0aDogMzAwcHg7XG59XG4ubGl2ZSAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICB3aWR0aDogNjUlO1xufVxuLmxpdmUgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtIHtcbiAgd2lkdGg6IDIyJTtcbn1cbi5saXZlIC5hbGxvd19jb21tZW50IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYTUwNztcbiAgd2lkdGg6IDIwcHg7XG4gIGhlaWdodDogMjBweDtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAtbW96LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA1MCU7XG4gIGZsb2F0OiBsZWZ0O1xuICBtYXJnaW4tbGVmdDogM3B4O1xufVxuLmxpdmUgLmFsbG93X3NoYXJlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzE4ODNGRjtcbiAgd2lkdGg6IDIwcHg7XG4gIGhlaWdodDogMjBweDtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAtbW96LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA1MCU7XG4gIGZsb2F0OiBsZWZ0O1xuICBtYXJnaW4tbGVmdDogM3B4O1xufVxuLmxpdmUgLmFsbG93X2xpa2Uge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjAwODA4O1xuICB3aWR0aDogMjBweDtcbiAgaGVpZ2h0OiAyMHB4O1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIC1tb3otYm9yZGVyLXJhZGl1czogNTAlO1xuICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgZmxvYXQ6IGxlZnQ7XG4gIG1hcmdpbi1sZWZ0OiAzcHg7XG59XG4ubGl2ZSAuYWxsb3dfY29sbGVjdCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM2OTRFRkY7XG4gIHdpZHRoOiAyMHB4O1xuICBoZWlnaHQ6IDIwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgLW1vei1ib3JkZXItcmFkaXVzOiA1MCU7XG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xuICBmbG9hdDogbGVmdDtcbiAgbWFyZ2luLWxlZnQ6IDNweDtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlTGl2ZS9zcmMvY29tcG9uZW50cy9tYW5hZ2VMaXZlL2xpdmVMaXN0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUE4a0JBO0VBQ0EsbUJBQUE7Q0FDQTtBQUNBO0VBQ0EsVUFBQTtDQUNBO0FBQ0E7RUFDQSxlQUFBO0VBQ0EsNkNBQUE7Q0FDQTtBQUNBO0VBQ0EsaUJBQUE7Q0FDQTtBQUNBO0VBQ0EsV0FBQTtDQUNBO0FBQ0E7RUFDQSxXQUFBO0NBQ0E7QUFDQTtFQUNBLDBCQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtFQUNBLHdCQUFBO0VBQ0EsMkJBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7Q0FDQTtBQUNBO0VBQ0EsMEJBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0Esd0JBQUE7RUFDQSwyQkFBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtDQUNBO0FBQ0E7RUFDQSwwQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx3QkFBQTtFQUNBLDJCQUFBO0VBQ0EsWUFBQTtFQUNBLGlCQUFBO0NBQ0E7QUFDQTtFQUNBLDBCQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtFQUNBLHdCQUFBO0VBQ0EsMkJBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7Q0FDQSIsZmlsZToibGl2ZUxpc3QudnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0ibGl2ZSI+XG4gICAgPGRpdj5cbiAgICAgIDxjaXJjbGUtdGl0bGVcbiAgICAgICAgdGl0bGUtbmFtZT0i55u05pKt566h55CGIlxuICAgICAgICBjbGFzcz0iY2ljbGUtY29udHJvbGxlciJcbiAgICAgIC8+XG4gICAgICA8ZGl2IGNsYXNzPSJzZWFyY2gtZm9ybS1jb250YWluZXIiPlxuICAgICAgICA8ZWwtZm9ybVxuICAgICAgICAgIDppbmxpbmU9InRydWUiXG4gICAgICAgICAgOm1vZGVsPSJsaXZlIlxuICAgICAgICAgIGNsYXNzPSJkZW1vLWZvcm0taW5saW5lIj5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLnm7Tmkq3kuLvpopgiPlxuICAgICAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgICAgIHYtbW9kZWw9ImxpdmUubGl2ZV9uYW1lIlxuICAgICAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLnirbmgIEiXG4gICAgICAgICAgICBjbGFzcz0ic2VhcmNoLWxlZnQiPlxuICAgICAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgICAgICB2LW1vZGVsPSJsaXZlLnN0YXRlIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hMaXZlIj5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIHZhbHVlPSIiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuWFqOmDqCIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPSIwIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLmkqTplIAiLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMSJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5b6F5pKtIi8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9IjIiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuebtOaSreS4rSIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPSIzIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlt7Lnu5PmnZ8iLz5cbiAgICAgICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLlvIDlp4vml7bpl7QiPlxuICAgICAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgICAgIDp0aXRsZT0ibGl2ZS5zdGFydERhdGUgfCBGb3JtYXREYXRlKFwneXl5eS1NTS1kZCBoaDptbVwnKSJcbiAgICAgICAgICAgICAgdi1tb2RlbD0ibGl2ZS5zdGFydERhdGUiXG4gICAgICAgICAgICAgIHR5cGU9ImRhdGV0aW1lIlxuICAgICAgICAgICAgICBmb3JtYXQ9Inl5eXktTU0tZGQgSEg6bW0iXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLpgInmi6nml7bpl7QiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaExpdmUiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i57uT5p2f5pe26Ze0IlxuICAgICAgICAgICAgY2xhc3M9ImRhdGUtbGVmdCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPSJsaXZlLmVuZERhdGUgfCBGb3JtYXREYXRlKFwneXl5eS1NTS1kZCBoaDptbVwnKSJcbiAgICAgICAgICAgICAgdi1tb2RlbD0ibGl2ZS5lbmREYXRlIlxuICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pe26Ze0IlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hMaXZlIi8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbSBjbGFzcz0iYnRuLWNvbnRhaW5lciI+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgICAgIEBjbGljaz0ic2VhcmNoTGl2ZSI+XG4gICAgICAgICAgICAgIOafpeivolxuICAgICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICAgICAgPHJvdXRlci1saW5rIHRvPSIvbGl2ZS9jcmVhdGUiPlxuICAgICAgICAgICAgICA8ZWwtYnV0dG9uIHR5cGU9InByaW1hcnkiPlxuICAgICAgICAgICAgICAgIOa3u+WKoOebtOaSrVxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLXBsdXMgZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICAgICAgPC9lbC1idXR0b24+XG4gICAgICAgICAgICA8L3JvdXRlci1saW5rPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICA8L2VsLWZvcm0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1saXN0Ij5cbiAgICAgIDxlbC10YWJsZVxuICAgICAgICByZWY9ImNoYW5uZWxUYWJsZSJcbiAgICAgICAgOmRhdGE9InRhYmxlRGF0YSJcbiAgICAgICAgc3RyaXBlXG4gICAgICAgIGNsYXNzPSJ3aG9sZS10YWJsZSJcbiAgICAgICAgbWluLWhlaWdodD0iNDAwIj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIHRhYmxlSGVhZGVyIlxuICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgIDpwcm9wPSJpdGVtLnByb3AiXG4gICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIlxuICAgICAgICAgIDp3aWR0aD0iaXRlbS53aWR0aCJcbiAgICAgICAgICA6Zm9ybWF0dGVyPSJpdGVtLmZvcm1hdHRlciJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIGZpeGVkXG4gICAgICAgICAgc2hvdy1vdmVyZmxvdy10b29sdGlwXG4gICAgICAgIC8+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBsYWJlbD0i572u6aG254q25oCBIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICB2LWlmPSIhc2NvcGUucm93LnRvcCJcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgY29udGVudD0i54K55Ye7572u6aG2IlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcCI+XG4gICAgICAgICAgICAgIDxlbC10YWdcbiAgICAgICAgICAgICAgICBzaXplPSJtaW5pIlxuICAgICAgICAgICAgICAgIGNsYXNzPSJzZXRQb2ludGVyIlxuICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDo2MHB4OyJcbiAgICAgICAgICAgICAgICBAY2xpY2submF0aXZlPSJzZXRUb3Aoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg572u6aG2XG4gICAgICAgICAgICAgIDwvZWwtdGFnPlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgdi1lbHNlXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9IueCueWHu+WPlua2iOe9rumhtiJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3AiPlxuICAgICAgICAgICAgICA8ZWwtdGFnXG4gICAgICAgICAgICAgICAgc2l6ZT0ibWluaSJcbiAgICAgICAgICAgICAgICBjbGFzcz0ic2V0UG9pbnRlciJcbiAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6NjBweDtjb2xvcjojNjk0ZWZmIlxuICAgICAgICAgICAgICAgIEBjbGljay5uYXRpdmU9InNldFVuVG9wKHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIOWPlua2iOe9rumhtlxuICAgICAgICAgICAgICA8L2VsLXRhZz5cbiAgICAgICAgICAgIDwvZWwtdG9vbHRpcD5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGxhYmVsPSLmk43kvZwiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICB3aWR0aD0iMjAwIj5cbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1hbnUtY29udGFpbmVyIj5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICB2LWlmPSJzY29wZS5yb3cuc3RhdGUgPT09IDAiXG4gICAgICAgICAgICAgICAgY2xhc3M9Im1hbnUgZGVsZXRlLWFjdGl2ZSJcbiAgICAgICAgICAgICAgICBAY2xpY2s9InVwTWFudShzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAgICDkuIrnqL9cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIHYtaWY9InNjb3BlLnJvdy5zdGF0ZSA9PT0gMSJcbiAgICAgICAgICAgICAgICBjbGFzcz0ibWFudSBkZWxldGUtYWN0aXZlIlxuICAgICAgICAgICAgICAgIEBjbGljaz0iZG93bk1hbnUoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg5pKk56i/XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICA6Y2xhc3M9IltcJ21hbnVcJywgc2NvcGUucm93LnN0YXRlICE9PSAxID8gXCdkZWxldGUtYWN0aXZlXCc6IFwnXCddIlxuICAgICAgICAgICAgICAgIEBjbGljaz0iZWRpdExpdmUoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg57yW6L6RXG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICA6Y2xhc3M9IltcJ21hbnVcJywgc2NvcGUucm93LnN0YXRlICE9PSAxID8gXCdkZWxldGUtYWN0aXZlXCc6IFwnXCddIlxuICAgICAgICAgICAgICAgIEBjbGljaz0iZGVsZXRlTGl2ZShzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAgICDliKDpmaRcbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgZml4ZWQ9InJpZ2h0IlxuICAgICAgICAgIGxhYmVsPSLmnYPpmZDphY3nva4iXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICB3aWR0aD0iMTE1Ij44NVxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBjb250ZW50PSLor4TorroiXG4gICAgICAgICAgICAgIHBsYWNlbWVudD0idG9wIj5cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIDpzdHlsZT0ie2JhY2tncm91bmRDb2xvcjogc2NvcGUucm93LmFsbG93X2NvbW1lbnQgPyBcJyNmZmE1MDdcJzogXCcjQjVCOEQ5XCd9IlxuICAgICAgICAgICAgICAgIGNsYXNzPSJhbGxvd19jb21tZW50IlxuICAgICAgICAgICAgICAgIEBjbGljaz0iaGFuZGxlQ29tbWVudChzY29wZS5yb3cpIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogd2hpdGUiXG4gICAgICAgICAgICAgICAgICBjbGFzcz0iaWNvbmZvbnQgaWNvbi1tYW51LWNvbW1lbnQiLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBjb250ZW50PSLliIbkuqsiXG4gICAgICAgICAgICAgIHBsYWNlbWVudD0idG9wIj5cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIDpzdHlsZT0ie2JhY2tncm91bmRDb2xvcjogc2NvcGUucm93LmFsbG93X3NoYXJlID8gXCcjMTg4M0ZGXCc6IFwnI0I1QjhEOVwnfSJcbiAgICAgICAgICAgICAgICBjbGFzcz0iYWxsb3dfc2hhcmUiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVTaGFyZShzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAgICA8aVxuICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiB3aGl0ZSJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29uZm9udCBpY29uLXNoYXJlIi8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgY29udGVudD0i54K56LWeIlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcCI+XG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICA6c3R5bGU9IntiYWNrZ3JvdW5kQ29sb3I6IHNjb3BlLnJvdy5hbGxvd19saWtlID8gXCcjRjAwODA4XCc6IFwnI0I1QjhEOVwnfSJcbiAgICAgICAgICAgICAgICBjbGFzcz0iYWxsb3dfbGlrZSJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImhhbmRsZVByYWlzZShzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAgICA8aVxuICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiB3aGl0ZSJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29uZm9udCBpY29uLXByYWlzZSIvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZWwtdG9vbHRpcD5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9IuaUtuiXjyJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3AiPlxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgOnN0eWxlPSJ7YmFja2dyb3VuZENvbG9yOiBzY29wZS5yb3cuYWxsb3dfY29sbGVjdCA/IFwnIzY5NEVGRlwnOiBcJyNCNUI4RDlcJ30iXG4gICAgICAgICAgICAgICAgY2xhc3M9ImFsbG93X2NvbGxlY3QiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVDb2xsZWN0KHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIDxpXG4gICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IHdoaXRlIlxuICAgICAgICAgICAgICAgICAgY2xhc3M9Imljb25mb250IGljb24tY29sbGVjdCIvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZWwtdG9vbHRpcD5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgIDwvZWwtdGFibGU+XG4gICAgICA8ZGl2IGNsYXNzPSJwYWdpbmF0aW9uIj5cbiAgICAgICAgPGVsLXBhZ2luYXRpb25cbiAgICAgICAgICA6dG90YWw9InRvdGFsIlxuICAgICAgICAgIDpwYWdlLXNpemVzPSJbMTAsIDIwLCAzMF0iXG4gICAgICAgICAgOmN1cnJlbnQtcGFnZT0icGFnZU5vIlxuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICBsYXlvdXQ9InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPSJoYW5kbGVTaXplQ2hhbmdlIlxuICAgICAgICAgIEBjdXJyZW50LWNoYW5nZT0iaGFuZGxlQ3VycmVudENoYW5nZSIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlXCdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL2xpdmVBcGlcJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQ2lyY2xlVGl0bGVcbiAgfSxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxpdmU6IHtcbiAgICAgICAgbGl2ZV9uYW1lOiBcJ1wnLFxuICAgICAgICBzdGF0ZTogXCdcJyxcbiAgICAgICAgc3RhcnREYXRlOiBcJ1wnLFxuICAgICAgICBlbmREYXRlOiBcJ1wnXG4gICAgICB9LFxuICAgICAgY2hhbm5lbFR5cGVMaXN0OiBbXSwgLy8g5omA5bGe6aKR6YGT5YiX6KGoXG4gICAgICBzcGVjaWFsTGlzdDogW10sXG4gICAgICBjbGlja0NlbGxJbmRleDogLTEsXG4gICAgICB0YWJsZUhlYWRlcjogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdsaXZlX25hbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfkuLvpophcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdjcmVhdGV0aW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5Yib5bu65pel5pyfXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCd1cGRhdGV0aW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5pu05paw5pel5pyfXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdsaXZlX2hlYWRfdXJsXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5a+86KeG5Zu+XCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8aW1nIGNsYXNzPVwndG9waWMtdGFibGUtcGljXCcgc3JjPXtjZWxsVmFsdWV9Lz5cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2V4cGlyeV9kYXRlX2VuZFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+ebtOaSreWRqOacn1wnLFxuICAgICAgICAgIHdpZHRoOiAyMDAsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKHJvdy5leHBpcnlfZGF0ZV9zdGFydCwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpICsgXCfoh7NcJyArIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10oY2VsbFZhbHVlLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2xpdmVfdXJsXCcsXG4gICAgICAgICAgbGFiZWw6IFwn6buY6K6k6KeG6aKR6ZO+5o6lXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8YSBocmVmPXtjZWxsVmFsdWV9IHRhcmdldD1cJ19ibGFua1wnPntjZWxsVmFsdWV9PC9hPlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnc2hvd1N0YXRlXCcsXG4gICAgICAgICAgbGFiZWw6IFwn54q25oCBXCcsXG4gICAgICAgICAgd2lkdGg6IFwnMTAwXCdcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIHRhYmxlRGF0YTogW10sXG4gICAgICBjb21tZW50OiBmYWxzZSxcbiAgICAgIHNoYXJlOiBmYWxzZSxcbiAgICAgIHByYWlzZTogZmFsc2UsXG4gICAgICBjb2xsZWN0OiBmYWxzZSxcbiAgICAgIGluZGV4OiAtMSxcbiAgICAgIHBhZ2VObzogMSxcbiAgICAgIHBhZ2VTaXplOiAxMCxcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgZGlhbG9nVmlzaWJsZTogZmFsc2VcbiAgICB9XG4gIH0sICBcbiAgd2F0Y2g6IHtcbiAgICBcJ2xpdmUubGl2ZV9uYW1lXCcgKCkge1xuICAgICAgdGhpcy5zZWFyY2hMaXZlKClcbiAgICB9XG4gIH0sICBcbiAgbW91bnRlZCAoKSB7XG4gICAgdGhpcy5nZXRMaXZlTGlzdCgpXG5cbiAgICB0aGlzLiRyb290LmV2ZW50SHViLiRvbihcJ3Jlc2V0LW9wdGlvbnNcJywgKCkgPT4ge1xuICAgICAgdGhpcy5yZXNldExpdmVPcHRpb25zKClcbiAgICB9KVxuICB9LFxuICBhY3RpdmF0ZWQgKCkge1xuICAgIGxldCBtZXRhID0gdGhpcy4kcm91dGUubWV0YVxuICAgIGlmIChtZXRhLmhhc093blByb3BlcnR5KFwncmVmcmVzaFwnKSAmJiBtZXRhLnJlZnJlc2gpIHtcbiAgICAgIHRoaXMuZ2V0TGl2ZUxpc3QoKVxuICAgICAgZGVsZXRlIHRoaXMuJHJvdXRlLm1ldGEucmVmcmVzaFxuICAgIH1cbiAgfSxcbiAgYmVmb3JlUm91dGVMZWF2ZSAodG8sIGZyb20sIG5leHQpIHtcbiAgICBpZiAodG8ucGF0aCA9PT0gXCcvbGl2ZS9jcmVhdGVcJykge1xuICAgICAgdGhpcy5yZXNldExpdmVPcHRpb25zKClcbiAgICB9XG4gICAgbmV4dCgpXG4gIH0sXG4gIGJlZm9yZURlc3Ryb3kgKCkge1xuICAgIHRoaXMuJHJvb3QuZXZlbnRIdWIuJG9mZihcJ3Jlc2V0LW9wdGlvbnNcJylcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIC8qKiDojrflj5bnqL/ku7bliJfooaggKiovXG4gICAgZ2V0TGl2ZUxpc3QgKCkge1xuICAgICAgbGV0IHRpbWVTdGFydCA9IHRoaXMubGl2ZS5zdGFydERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLmxpdmUuc3RhcnREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBsZXQgdGltZUVuZCA9IHRoaXMubGl2ZS5lbmREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5saXZlLmVuZERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIEFjdGlvbnMuZ2V0TGl2ZUxpc3Qoe1xuICAgICAgICBcJ3BhZ2VOb1wnOiB0aGlzLnBhZ2VObyxcbiAgICAgICAgXCdwYWdlU2l6ZVwnOiB0aGlzLnBhZ2VTaXplLFxuICAgICAgICBcJ2xpdmVfbmFtZVwnOiB0aGlzLmxpdmUubGl2ZV9uYW1lLFxuICAgICAgICBcJ3N0YXRlXCc6IHRoaXMubGl2ZS5zdGF0ZSxcbiAgICAgICAgXCd0aW1lU3RhcnRcJzogdGltZVN0YXJ0LFxuICAgICAgICBcJ3RpbWVFbmRcJzogdGltZUVuZFxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gZGF0YS5saXN0XG4gICAgICAgICAgdGhpcy50b3RhbCA9IGRhdGEudG90YWxcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGhhbmRsZVNpemVDaGFuZ2UgKHBhZ2VTaXplKSB7XG4gICAgICB0aGlzLnBhZ2VTaXplID0gcGFnZVNpemVcbiAgICAgIHRoaXMuc2VhcmNoTGl2ZSgpXG4gICAgfSxcbiAgICBoYW5kbGVDdXJyZW50Q2hhbmdlIChwYWdlSW5kZXgpIHtcbiAgICAgIHRoaXMucGFnZU5vID0gcGFnZUluZGV4XG4gICAgICB0aGlzLmdldExpdmVMaXN0KClcbiAgICB9LFxuICAgIC8qKiDkuIrnqL8gKiovXG4gICAgdXBNYW51IChyb3cpIHtcbiAgICAgIHRoaXMudXBkYXRlTGl2ZShyb3cubGl2ZWlkLCBcJ3N0YXRlXCcsIDEpXG4gICAgfSxcbiAgICAvKiog5pKk56i/ICoqL1xuICAgIGRvd25NYW51IChyb3cpIHtcbiAgICAgIHRoaXMudXBkYXRlTGl2ZShyb3cubGl2ZWlkLCBcJ3N0YXRlXCcsIDApXG4gICAgfSxcbiAgICBlZGl0TGl2ZSAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlID09PSAxKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+S4jeWPr+e8lui+keW3suS4iueov+eahOebtOaSrSFcJ1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcJ2xpdmVpZFwnLCByb3cubGl2ZWlkKVxuICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7cGF0aDogXCcvbGl2ZS9lZGl0XCd9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOivhOiuuuadg+mZkCAqKi9cbiAgICBoYW5kbGVDb21tZW50IChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgaWYgKHJvdy5hbGxvd19jb21tZW50KSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVMaXZlKHJvdy5saXZlaWQsIFwnYWxsb3dfY29tbWVudFwnLCBmYWxzZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUxpdmUocm93LmxpdmVpZCwgXCdhbGxvd19jb21tZW50XCcsIHRydWUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+S4iueov+eahOebtOaSreS4jeWPr+aTjeS9nOivhOiuuuadg+mZkCFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOWIhuS6q+adg+mZkCAqKi9cbiAgICBoYW5kbGVTaGFyZSAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIGlmIChyb3cuYWxsb3dfc2hhcmUpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUxpdmUocm93LmxpdmVpZCwgXCdhbGxvd19zaGFyZVwnLCBmYWxzZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUxpdmUocm93LmxpdmVpZCwgXCdhbGxvd19zaGFyZVwnLCB0cnVlKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCfkuIrnqL/nmoTnm7Tmkq3kuI3lj6/mk43kvZzliIbkuqvmnYPpmZAhXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDngrnotZ7mnYPpmZAgKiovXG4gICAgaGFuZGxlUHJhaXNlIChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgaWYgKHJvdy5hbGxvd19saWtlKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVMaXZlKHJvdy5saXZlaWQsIFwnYWxsb3dfbGlrZVwnLCBmYWxzZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUxpdmUocm93LmxpdmVpZCwgXCdhbGxvd19saWtlXCcsIHRydWUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+S4iueov+eahOebtOaSreS4jeWPr+aTjeS9nOeCuei1nuadg+mZkCFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOaUtuiXj+adg+mZkCAqKi9cbiAgICBoYW5kbGVDb2xsZWN0IChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgaWYgKHJvdy5hbGxvd19jb2xsZWN0KSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVMaXZlKHJvdy5saXZlaWQsIFwnYWxsb3dfY29sbGVjdFwnLCBmYWxzZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUxpdmUocm93LmxpdmVpZCwgXCdhbGxvd19jb2xsZWN0XCcsIHRydWUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+S4iueov+eahOebtOaSreS4jeWPr+aTjeS9nOaUtuiXj+adg+mZkCFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOWPlua2iOe9rumhtiAqKi9cbiAgICBzZXRUb3AgKHJvdykge1xuICAgICAgdGhpcy51cGRhdGVMaXZlKHJvdy5saXZlaWQsIFwndG9wXCcsIHRydWUpXG4gICAgfSxcbiAgICAvKiog5Y+W5raI572u6aG2ICoqL1xuICAgIHNldFVuVG9wIChyb3cpIHtcbiAgICAgIHRoaXMudXBkYXRlTGl2ZShyb3cubGl2ZWlkLCBcJ3RvcFwnLCBmYWxzZSlcbiAgICB9LFxuICAgIC8qKiDliKDpmaTnm7Tmkq0gKiovXG4gICAgZGVsZXRlTGl2ZSAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIHRoaXMuJGNvbmZpcm0oXCfmmK/lkKbliKDpmaQiXCcgKyByb3cubGl2ZV9uYW1lICsgXCciP1wnLCBcJ+aPkOekulwnLCB7XG4gICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwn56Gu5a6aXCcsXG4gICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCflj5bmtohcJyxcbiAgICAgICAgICB0eXBlOiBcJ3dhcm5pbmdcJ1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICBBY3Rpb25zLmRlbGV0ZUxpdmUoe1xuICAgICAgICAgICAgXCdsaXZlQnJvYWRjYXN0XCc6IHtcbiAgICAgICAgICAgICAgXCdsaXZlaWRcJzogcm93LmxpdmVpZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCcsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCfliKDpmaTmiJDlip8hXCdcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2VhcmNoTGl2ZSgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn5LiN5Y+v5Yig6Zmk5bey5LiK56i/55qE55u05pKtIVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgICAqIOebtOaSreaTjeS9nOeahOWFrOWFseaOpeWPo1xuICAgICAgICogQHBhcmFtIGFydGljbGVpZCDnm7Tmkq1JRFxuICAgICAgICogQHBhcmFtIGtleSDmm7TmlrDlrZfmrrXlkI1cbiAgICAgICAqIEBwYXJhbSB2YWx1ZSDlgLxcbiAgICAgICAqL1xuICAgIHVwZGF0ZUxpdmUgKGxpdmVpZCwga2V5LCB2YWx1ZSkge1xuICAgICAgQWN0aW9ucy51cGRhdGVTdGF0ZSh7XG4gICAgICAgIFwnbGl2ZUJyb2FkY2FzdFwnOiB7XG4gICAgICAgICAgXCdsaXZlaWRcJzogbGl2ZWlkLFxuICAgICAgICAgIFtrZXldOiB2YWx1ZVxuICAgICAgICB9XG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgbWVzc2FnZTogXCfmk43kvZzmiJDlip8hXCdcbiAgICAgICAgICB9KVxuICAgICAgICAgIHRoaXMuc2VhcmNoTGl2ZSgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog5YWz6Zet5a+56K+d5qGGICoqL1xuICAgIGNsb3NlRGlhbG9nICgpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50TmFtZSA9IFwnXCdcbiAgICB9LFxuICAgIC8qKiDmkJzntKLnqL/ku7YgKiovXG4gICAgc2VhcmNoTGl2ZSAoKSB7XG4gICAgICB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdzd2FwVGltZVwnXSh0aGlzLmxpdmUpXG4gICAgICBsZXQgdGltZVN0YXJ0ID0gdGhpcy5saXZlLnN0YXJ0RGF0ZSAhPT0gbnVsbCA/IG5ldyBEYXRlKHRoaXMubGl2ZS5zdGFydERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIGxldCB0aW1lRW5kID0gdGhpcy5saXZlLmVuZERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLmxpdmUuZW5kRGF0ZSkuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgQWN0aW9ucy5nZXRMaXZlTGlzdCh7XG4gICAgICAgIFwncGFnZU5vXCc6IHRoaXMucGFnZU5vLFxuICAgICAgICBcJ3BhZ2VTaXplXCc6IHRoaXMucGFnZVNpemUsXG4gICAgICAgIFwnbGl2ZV9uYW1lXCc6IHRoaXMubGl2ZS5saXZlX25hbWUsXG4gICAgICAgIFwnc3RhdGVcJzogdGhpcy5saXZlLnN0YXRlLFxuICAgICAgICBcJ3RpbWVTdGFydFwnOiB0aW1lU3RhcnQsXG4gICAgICAgIFwndGltZUVuZFwnOiB0aW1lRW5kXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy50YWJsZURhdGEgPSBkYXRhLmxpc3RcbiAgICAgICAgICB0aGlzLnRvdGFsID0gZGF0YS50b3RhbFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG5cbiAgICByZXNldExpdmVPcHRpb25zICgpIHtcbiAgICAgIHRoaXMubGl2ZSA9IHtcbiAgICAgICAgbGl2ZV9uYW1lOiBcJ1wnLFxuICAgICAgICBzdGF0ZTogXCdcJyxcbiAgICAgICAgc3RhcnREYXRlOiBcJ1wnLFxuICAgICAgICBlbmREYXRlOiBcJ1wnXG4gICAgICB9XG4gICAgICB0aGlzLnBhZ2VObyA9IDFcbiAgICB9XG4gIH1cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5wYWdpbmF0aW9ue1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgfVxuICAubWFudXtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6IDMwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIGJvcmRlcjoxcHggc29saWQgcmdiYSgxODEsIDE4NCwgMjE3LCAxKTtcbiAgICBib3JkZXItcmFkaXVzOiAyMHB4O1xuICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICBwYWRkaW5nOiAxcHggNXB4IDJweCA1cHg7XG4gICAgY29sb3I6IHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG4gIC5tYW51LXVwLWFjdGl2ZXtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDIzMSwgMTI1LCAwLCAxKTtcbiAgICBjb2xvcjpyZ2JhKDIzMSwgMTI1LCAwLCAxKTtcbiAgfVxuICAubWFudS1iYWNrLWFjdGl2ZXtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI0MCwgOCwgOCwgMSk7XG4gICAgY29sb3I6cmdiYSgyNDAsIDgsIDgsIDEpO1xuICB9XG4gIC5kZWxldGUtYWN0aXZle1xuICAgIGJvcmRlcjoxcHggc29saWQgcmdiYSgxMDUsIDc4LCAyNTUsIDEpO1xuICAgIGNvbG9yOiByZ2JhKDEwNSwgNzgsIDI1NSwgMSk7XG4gIH1cbiAgLmRhdGUtbGVmdHtcbiAgICBtYXJnaW4tbGVmdDogMjhweDtcbiAgfVxuICAucGFnaW5hdGlvbiB7XG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgLXdlYmtpdC1ib3gtcGFjazogZW5kO1xuICB9XG4gIC5idG4tY29udGFpbmVyIHtcbiAgICB3aWR0aDogNDAwcHggIWltcG9ydGFudDtcbiAgICBsZWZ0OiA2OHB4O1xuICB9XG48L3N0eWxlPlxuPHN0eWxlPlxuICAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5idG4tY29udGFpbmVyIC5lbC1idXR0b257XG4gICAgcGFkZGluZzogMTJweCAxMHB4O1xuICB9XG4gIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmJ0bi1jb250YWluZXIgLmVsLWljb24tLXJpZ2h0e1xuICAgIG1hcmdpbjogMDtcbiAgfVxuICAuY3VzdG9tLWRpYWxvZyAuZWwtZGlhbG9nX19oZWFkZXJ7XG4gICAgLypwYWRkaW5nOiAwOyovXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMTkyLDE5MCwyNTUsMSk7XG4gIH1cbiAgLmVsLXRvb2x0aXBfX3BvcHBlcntcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xuICB9XG4gIC5saXZlIC5lbC1mb3JtLS1pbmxpbmUgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gICAgd2lkdGg6IDY1JTtcbiAgfVxuICAubGl2ZSAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAyMiU7XG4gIH1cbiAgLmxpdmUgLmFsbG93X2NvbW1lbnQge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmE1MDc7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtbW96LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBtYXJnaW4tbGVmdDogM3B4O1xuICB9XG4gIC5saXZlIC5hbGxvd19zaGFyZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE4ODNGRjtcbiAgICB3aWR0aDogMjBweDtcbiAgICBoZWlnaHQ6IDIwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC1tb3otYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIG1hcmdpbi1sZWZ0OiAzcHg7XG4gIH1cbiAgLmxpdmUgLmFsbG93X2xpa2Uge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNGMDA4MDg7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtbW96LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBtYXJnaW4tbGVmdDogM3B4O1xuICB9XG4gIC5saXZlIC5hbGxvd19jb2xsZWN0IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjk0RUZGO1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgLW1vei1ib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gICAgbWFyZ2luLWxlZnQ6IDNweDtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LEk0bkI6ZnVuY3Rpb24oZSxuKXt9LElVV3k6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoImxuck0iKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiOTk2ZmRhM2MiLGEsITEse30pfSxJeWVYOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJUMHNNIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjg0MDFkMzk2IixhLCExLHt9KX0sSnlEMDpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgia2J4OSIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCIyNGRlZTM2MCIsYSwhMSx7fSl9LEp6VUc6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoImg4UEsiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiMDI0NzhlNmMiLGEsITEse30pfSxLQWpwOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uZXZlbnQtbGlzdCAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICB3aWR0aDogNjAlO1xufVxuLmV2ZW50LWxpc3QgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtIHtcbiAgd2lkdGg6IDI1JTtcbn1cbi5lbC1kaWFsb2dfX2hlYWRlcntcbiAgcGFkZGluZzogMTNweCAzMHB4IDEzcHg7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjQzBCRUZGO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjdGQUZGO1xufVxuLmVsLWRpYWxvZ19fdGl0bGUge1xuICBsaW5lLWhlaWdodDogMTdweDtcbiAgZm9udC1zaXplOiAxN3B4O1xuICBjb2xvcjogIzMwMzEzMztcbn1cbi5lbC1kaWFsb2dfX2hlYWRlcmJ0biB7XG4gIHRvcDogMTNweDtcbn1cbi5lbC1kaWFsb2dfX2JvZHkge1xuICBwYWRkaW5nOiAyMHB4IDBweCAyMHB4IDBweDtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlRXZlbnQvc3JjL2NvbXBvbmVudHMvbWFuYWdlRXZlbnQvZXZlbnRMaXN0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUF1ZkE7RUFDQSxXQUFBO0NBQ0E7QUFDQTtFQUNBLFdBQUE7Q0FDQTtBQUNBO0VBQ0Esd0JBQUE7RUFDQSxpQ0FBQTtFQUNBLDBCQUFBO0NBQ0E7QUFDQTtFQUNBLGtCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxlQUFBO0NBQ0E7QUFDQTtFQUNBLFVBQUE7Q0FDQTtBQUNBO0VBQ0EsMkJBQUE7Q0FDQSIsZmlsZToiZXZlbnRMaXN0LnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9ImV2ZW50LWxpc3QiPlxuICAgIDxkaXY+XG4gICAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICAgIHRpdGxlLW5hbWU9IuacjeWKoeWIl+ihqCJcbiAgICAgICAgY2xhc3M9ImNpY2xlLWNvbnRyb2xsZXIiXG4gICAgICAvPlxuICAgICAgPGRpdiBjbGFzcz0ic2VhcmNoLWZvcm0tY29udGFpbmVyIj5cbiAgICAgICAgPGVsLWZvcm1cbiAgICAgICAgICA6aW5saW5lPSJ0cnVlIlxuICAgICAgICAgIDptb2RlbD0iZXZlbnRGb3JtIlxuICAgICAgICAgIGNsYXNzPSJkZW1vLWZvcm0taW5saW5lIj5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLmnI3liqHlkI3np7AiPlxuICAgICAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgICAgIHYtbW9kZWw9ImV2ZW50Rm9ybS5hY3Rpdml0eV9uYW1lIlxuICAgICAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLnsbvlnosiXG4gICAgICAgICAgICBjbGFzcz0ic2VhcmNoLWxlZnQiPlxuICAgICAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgICAgICB2LW1vZGVsPSJldmVudEZvcm0udHlwZWlkIlxuICAgICAgICAgICAgICBjbGVhcmFibGVcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IiJcbiAgICAgICAgICAgICAgQGNsZWFyPSJnZXRBY3Rpdml0eUxpc3QiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9ImdldEFjdGl2aXR5TGlzdCI+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBldmVudFR5cGVMaXN0IlxuICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSJcbiAgICAgICAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiLz5cbiAgICAgICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLnirbmgIEiXG4gICAgICAgICAgICBjbGFzcz0ic2VhcmNoLWxlZnQiPlxuICAgICAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgICAgICB2LW1vZGVsPSJldmVudEZvcm0uc3RhdGUiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSIiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9ImdldEFjdGl2aXR5TGlzdCI+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICB2YWx1ZT0iIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlhajpg6giLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMSJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5pyq5byA5aeLIi8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9IjIiXG4gICAgICAgICAgICAgICAgbGFiZWw9Iui/m+ihjOS4rSIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPSIzIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlt7Lnu5PmnZ8iLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMCJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5YGc55SoIi8+XG4gICAgICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i5byA5aeL5pe26Ze0Ij5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9ImV2ZW50Rm9ybS5zdGFydERhdGUgfCBGb3JtYXREYXRlKFwneXl5eS1NTS1kZCBoaDptbVwnKSJcbiAgICAgICAgICAgICAgdi1tb2RlbD0iZXZlbnRGb3JtLnN0YXJ0RGF0ZSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXpeacnyJcbiAgICAgICAgICAgICAgQGNoYW5nZT0iZ2V0QWN0aXZpdHlMaXN0Ii8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9Iue7k+adn+aXtumXtCJcbiAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogLTI4cHg7Ij5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9ImV2ZW50Rm9ybS5lbmREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9ImV2ZW50Rm9ybS5lbmREYXRlIlxuICAgICAgICAgICAgICBmb3JtYXQ9Inl5eXktTU0tZGQgSEg6bW0iXG4gICAgICAgICAgICAgIHR5cGU9ImRhdGV0aW1lIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pel5pyfIlxuICAgICAgICAgICAgICBAY2hhbmdlPSJnZXRBY3Rpdml0eUxpc3QiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiA2OHB4IlxuICAgICAgICAgICAgQGNsaWNrPSJnZXRBY3Rpdml0eUxpc3QiPlxuICAgICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICA8L2VsLWJ1dHRvbj5cbiAgICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9ldmVudC9jcmVhdGUiPlxuICAgICAgICAgICAgPGVsLWJ1dHRvbiB0eXBlPSJwcmltYXJ5Ij5cbiAgICAgICAgICAgICAg5pyN5Yqh5paw5aKeXG4gICAgICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLXBsdXMgZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICAgIDwvcm91dGVyLWxpbms+XG4gICAgICAgIDwvZWwtZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9InRhYmxlLWxpc3QiPlxuICAgICAgPGVsLXRhYmxlXG4gICAgICAgIHJlZj0iY2hhbm5lbFRhYmxlIlxuICAgICAgICA6ZGF0YT0idGFibGVEYXRhIlxuICAgICAgICBzdHJpcGVcbiAgICAgICAgY2xhc3M9Indob2xlLXRhYmxlIlxuICAgICAgICBtaW4taGVpZ2h0PSI0MDAiXG4gICAgICAgIEBjZWxsLWNsaWNrPSJjZWxsQ2xpY2siXG4gICAgICAgIEBjZWxsLW1vdXNlLWxlYXZlPSJjZWxsTW91c2VMZWF2ZSI+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiB0YWJsZUhlYWRlciJcbiAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICA6cHJvcD0iaXRlbS5wcm9wIlxuICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCJcbiAgICAgICAgICA6d2lkdGg9Iml0ZW0ud2lkdGgiXG4gICAgICAgICAgOmZvcm1hdHRlcj0iaXRlbS5mb3JtYXR0ZXIiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICBmaXhlZFxuICAgICAgICAgIHNob3ctb3ZlcmZsb3ctdG9vbHRpcFxuICAgICAgICAvPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgZml4ZWQ9InJpZ2h0IlxuICAgICAgICAgIGxhYmVsPSLmk43kvZwiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICB3aWR0aD0iMTAwIj5cbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgY29udGVudD0i5L+u5pS554q25oCBIlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcCI+XG4gICAgICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IlxuICAgICAgICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgICAgICAgIGljb249ImVsLWljb24tcmVtb3ZlLW91dGxpbmUiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJjaGFuZ2VTdGF0ZShzY29wZS5yb3cpIi8+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9InRleHQiXG4gICAgICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgICAgICBpY29uPSJlbC1pY29uLWVkaXQiXG4gICAgICAgICAgICAgIEBjbGljaz0iaGFuZGxlRWRpdChzY29wZS5yb3cpIi8+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9InRleHQiXG4gICAgICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgICAgICBpY29uPSJlbC1pY29uLWRlbGV0ZSJcbiAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVEZWxldGUoc2NvcGUucm93KSIvPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgPC9lbC10YWJsZT5cbiAgICAgIDxkaXYgY2xhc3M9InBhZ2luYXRpb24iPlxuICAgICAgICA8ZWwtcGFnaW5hdGlvblxuICAgICAgICAgIDp0b3RhbD0idG90YWwiXG4gICAgICAgICAgOnBhZ2Utc2l6ZXM9IlsxMCwgMjAsIDMwLCA0MF0iXG4gICAgICAgICAgOmN1cnJlbnQtcGFnZT0icGFnZU5vIlxuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICBsYXlvdXQ9InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPSJoYW5kbGVTaXplQ2hhbmdlIlxuICAgICAgICAgIEBjdXJyZW50LWNoYW5nZT0iaGFuZGxlQ3VycmVudENoYW5nZSIvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZWwtZGlhbG9nXG4gICAgICAgIDp2aXNpYmxlLnN5bmM9ImRpYWxvZ1Zpc2libGUiXG4gICAgICAgIGN1c3RvbS1jbGFzcz0iY3VzdG9tLWRpYWxvZyJcbiAgICAgICAgdGl0bGU9IuacjeWKoee8lui+kSJcbiAgICAgICAgd2lkdGg9IjcwJSJcbiAgICAgICAgQGNsb3NlPSJjbG9zZURpYWxvZyI+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICA6aXM9ImNvbXBvbmVudE5hbWUiXG4gICAgICAgICAgOnNldHRpbmctYWN0aXZpdHktaWQ9InNldHRpbmdBY3Rpdml0eUlkIlxuICAgICAgICAgIEBjbG9zZURpYWxvZz0iY2xvc2VEaWFsb2ciLz5cbiAgICAgIDwvZWwtZGlhbG9nPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IENpcmNsZVRpdGxlIGZyb20gXCdAL2NvbXBvbmVudHMvY29tbW9ucy9jaXJjbGVUaXRsZVwnXG5pbXBvcnQgRXZlbnRFZGl0IGZyb20gXCcuL2V2ZW50RWRpdFwnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9ldmVudEFwaVwnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBDaXJjbGVUaXRsZSxcbiAgICBFdmVudEVkaXRcbiAgfSxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV2ZW50Rm9ybToge1xuICAgICAgICBhY3Rpdml0eV9uYW1lOiBcJ1wnLFxuICAgICAgICB0eXBlX25hbWU6IFwnXCcsXG4gICAgICAgIHNob3dTdGF0ZTogXCdcJyxcbiAgICAgICAgc29ydDogXCcxXCcsXG4gICAgICAgIGVuZERhdGU6IFwnXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJ1xuICAgICAgfSxcbiAgICAgIGNsaWNrQ2VsbEluZGV4OiAtMSxcbiAgICAgIGJhdGNoUHJvY2VzczogMCxcbiAgICAgIHRhYmxlSGVhZGVyOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2FjdGl2aXR5X25hbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfmnI3liqHlkI3np7BcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCd0eXBlX25hbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfnsbvlnotcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdoZWFkX2ltZ1wnLFxuICAgICAgICAgIGxhYmVsOiBcJ+Wbvuagh1wnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gPGltZyBjbGFzcz1cJ3RvcGljLXRhYmxlLXBpY1wnIHNyYz17Y2VsbFZhbHVlfS8+XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdhcHBfdXJsXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5YmN56uv6ZO+5o6lXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8YSBocmVmPXtjZWxsVmFsdWV9IHRhcmdldD1cJ19ibGFua1wnPntjZWxsVmFsdWV9PC9hPlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnbWFuYWdlcl91cmxcJyxcbiAgICAgICAgICBsYWJlbDogXCflkI7nq6/pk77mjqVcJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNlbGxWYWx1ZSAhPT0gXCdcJykge1xuICAgICAgICAgICAgICBjb25zdCB0b2tlbiA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCd0b2tlblwnKVxuICAgICAgICAgICAgICBjb25zdCBjb21waWQgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwnY29tcGlkXCcpXG4gICAgICAgICAgICAgIGNvbnN0IHVzZXJjb2RlID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcJ3VzZXJjb2RlXCcpXG4gICAgICAgICAgICAgIGxldCB1cmwgPSBgJHtjZWxsVmFsdWV9P3Rva2VuPSR7dG9rZW59JmNvbXBpZD0ke2NvbXBpZH0mdXNlcmNvZGU9JHt1c2VyY29kZX1gXG4gICAgICAgICAgICAgIHJldHVybiA8YSBocmVmPXt1cmx9IHRhcmdldD1cJ19ibGFua1wnPnt1cmx9PC9hPlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwn5pegXCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2V4cGlyeV9kYXRlX3N0YXJ0XCcsXG4gICAgICAgICAgbGFiZWw6IFwn5pyJ5pWI5pyfXCcsXG4gICAgICAgICAgd2lkdGg6IDIwMCxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnRm9ybWF0RGF0ZVwnXShjZWxsVmFsdWUsIFwneXl5eS1NTS1kZCBoaDptbVwnKVxuICAgICAgICAgICAgbGV0IGVuZCA9IHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10ocm93LmV4cGlyeV9kYXRlX2VuZCwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgICByZXR1cm4gc3RhcnQgKyBcJ+iHs1wnICsgZW5kXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdjcmVhdGV0aW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5Yib5bu65pel5pyfXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCd1cGRhdGV0aW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5pu05paw5pel5pyfXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdzaG93U3RhdGVcJyxcbiAgICAgICAgICBsYWJlbDogXCfnirbmgIFcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdzb3J0XCcsXG4gICAgICAgICAgbGFiZWw6IFwn5LyY5YWI57qnXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdGhpcy5jbGlja0NlbGxJbmRleCkge1xuICAgICAgICAgICAgICByZXR1cm4gPGlucHV0IHR5cGU9XCd0ZXh0XCcgaWQ9ImlucHV0IiBjbGFzcz1cJ3NlbGYtc29ydFwnIHZhbHVlPSB7Y2VsbFZhbHVlfSBhdXRvZm9jdXM9ImF1dG9mb2N1cyIgLz5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiA8c3BhbiBjbGFzcz1cJ3NvcnQtY29udGFpbmVyXCcgZGF0YS1pZD17aW5kZXh9PntjZWxsVmFsdWV9PC9zcGFuPlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIHRhYmxlRGF0YTogW10sXG4gICAgICBldmVudFR5cGVMaXN0OiBbXSxcbiAgICAgIHNvcnRWYWx1ZTogLTEsXG4gICAgICBwYWdlTm86IDEsXG4gICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICB0b3RhbDogMCxcbiAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlLFxuICAgICAgc2V0dGluZ0FjdGl2aXR5SWQ6IFwnMFwnLFxuICAgICAgY29tcG9uZW50TmFtZTogXCdcJyxcbiAgICAgIHNlbGVjdEFjdGl2aXR5SWQ6IFwnXCdcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgXCdldmVudEZvcm0uYWN0aXZpdHlfbmFtZVwnICh2YWwpIHtcbiAgICAgIHRoaXMuZ2V0QWN0aXZpdHlMaXN0KClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIC8qKiDliIbpobXojrflj5bmnI3liqHliJfooaggKiovXG4gICAgdGhpcy5nZXRBY3Rpdml0eUxpc3QoKVxuICAgIC8qKiDojrflj5bmnI3liqHnsbvlnosgKiovXG4gICAgdGhpcy5nZXRBY3Rpdml0eVR5cGUoKVxuICAgIHRoaXMuJHJvb3QuZXZlbnRIdWIuJG9uKFwncmVzZXQtb3B0aW9uc1wnLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlc2V0TGl2ZU9wdGlvbnMoKVxuICAgIH0pXG4gIH0sXG4gIGFjdGl2YXRlZCAoKSB7XG4gICAgbGV0IG1ldGEgPSB0aGlzLiRyb3V0ZS5tZXRhXG4gICAgaWYgKG1ldGEuaGFzT3duUHJvcGVydHkoXCdyZWZyZXNoXCcpICYmIG1ldGEucmVmcmVzaCkge1xuICAgICAgdGhpcy5nZXRBY3Rpdml0eUxpc3QoKVxuICAgICAgZGVsZXRlIHRoaXMuJHJvdXRlLm1ldGEucmVmcmVzaFxuICAgIH1cbiAgfSxcbiAgYmVmb3JlUm91dGVMZWF2ZSAodG8sIGZyb20sIG5leHQpIHtcbiAgICBpZiAodG8ucGF0aCA9PT0gXCcvZXZlbnQvY3JlYXRlXCcgfHwgdG8ucGF0aCA9PT0gXCcvZXZlbnQvbGlzdFwnKSB7XG4gICAgICB0aGlzLnJlc2V0TGl2ZU9wdGlvbnMoKVxuICAgIH1cbiAgICBuZXh0KClcbiAgfSxcbiAgYmVmb3JlRGVzdHJveSAoKSB7XG4gICAgdGhpcy4kcm9vdC5ldmVudEh1Yi4kb2ZmKFwncmVzZXQtb3B0aW9uc1wnKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgcmVzZXRMaXZlT3B0aW9ucyAoKSB7XG4gICAgICB0aGlzLmV2ZW50Rm9ybSA9IHtcbiAgICAgICAgYWN0aXZpdHlfbmFtZTogXCdcJyxcbiAgICAgICAgdHlwZV9uYW1lOiBcJ1wnLFxuICAgICAgICBoZWFkX2ltZzogXCdcJyxcbiAgICAgICAgYXBwX3VybDogXCdcJyxcbiAgICAgICAgdHlwZWlkOiBcJ1wnLFxuICAgICAgICBzaG93U3RhdGU6IFwnXCcsXG4gICAgICAgIHN0YXRlOiBcJ1wnLFxuICAgICAgICBzb3J0OiBcJzFcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJyxcbiAgICAgICAgc3RhcnREYXRlOiBcJ1wnXG4gICAgICB9XG4gICAgICB0aGlzLnBhZ2VObyA9IDFcbiAgICAgIHRoaXMuZ2V0QWN0aXZpdHlMaXN0KClcbiAgICB9LFxuICAgIGdldEFjdGl2aXR5TGlzdCAoKSB7XG4gICAgICB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdzd2FwVGltZVwnXSh0aGlzLmV2ZW50Rm9ybSlcbiAgICAgIGxldCB0aW1lU3RhcnQgPSB0aGlzLmV2ZW50Rm9ybS5zdGFydERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLmV2ZW50Rm9ybS5zdGFydERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIGxldCB0aW1lRW5kID0gdGhpcy5ldmVudEZvcm0uZW5kRGF0ZSAhPT0gbnVsbCA/IG5ldyBEYXRlKHRoaXMuZXZlbnRGb3JtLmVuZERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIEFjdGlvbnMuZ2V0QWN0aXZpdHlMaXN0KHtcbiAgICAgICAgXCdwYWdlTm9cJzogdGhpcy5wYWdlTm8sXG4gICAgICAgIFwncGFnZVNpemVcJzogdGhpcy5wYWdlU2l6ZSxcbiAgICAgICAgXCdhY3Rpdml0eV9uYW1lXCc6IHRoaXMuZXZlbnRGb3JtLmFjdGl2aXR5X25hbWUsXG4gICAgICAgIFwndHlwZWlkXCc6IHRoaXMuZXZlbnRGb3JtLnR5cGVpZCxcbiAgICAgICAgXCdzdGF0ZVwnOiB0aGlzLmV2ZW50Rm9ybS5zdGF0ZSxcbiAgICAgICAgXCd0aW1lU3RhcnRcJzogdGltZVN0YXJ0LFxuICAgICAgICBcJ3RpbWVFbmRcJzogdGltZUVuZFxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgbGlzdERhdGEgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICB0aGlzLnRhYmxlRGF0YSA9IGxpc3REYXRhLmxpc3RcbiAgICAgICAgICB0aGlzLnRvdGFsID0gbGlzdERhdGEudG90YWxcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGhhbmRsZVNpemVDaGFuZ2UgKHBhZ2VTaXplKSB7XG4gICAgICB0aGlzLnBhZ2VTaXplID0gcGFnZVNpemVcbiAgICAgIHRoaXMuZ2V0QWN0aXZpdHlMaXN0KClcbiAgICB9LFxuICAgIGhhbmRsZUN1cnJlbnRDaGFuZ2UgKHBhZ2VJbmRleCkge1xuICAgICAgdGhpcy5wYWdlTm8gPSBwYWdlSW5kZXhcbiAgICAgIHRoaXMuZ2V0QWN0aXZpdHlMaXN0KClcbiAgICB9LFxuICAgIHRvZ2dsZUFsbFNlbGVjdGlvbiAoZSkge1xuICAgICAgdGhpcy4kcmVmcy5jaGFubmVsVGFibGUudG9nZ2xlQWxsU2VsZWN0aW9uKClcbiAgICB9LFxuICAgIC8qKiDljZXlhYPmoLzooqvngrnlh7sgKiovXG4gICAgY2VsbENsaWNrIChyb3csIGNvbHVtbiwgY2VsbCwgZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwnc29ydC1jb250YWluZXJcJykpIHtcbiAgICAgICAgaWYgKHJvdy5zdGF0ZSAhPT0gMSkge1xuICAgICAgICAgIGxldCBpZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmlkXG4gICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICB0aGlzLmNsaWNrQ2VsbEluZGV4ID0gcGFyc2VJbnQoaWQpXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIGxldCBpbnB1dEVsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwnLmVsLXRvb2x0aXAgPiBpbnB1dC5zZWxmLXNvcnRcJylcbiAgICAgICAgICAgIGlucHV0RWxlcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0QWN0aXZpdHlJZCA9IHJvdy5hY3Rpdml0eWlkXG4gICAgICAgICAgICAgICAgZWxlbWVudC5mb2N1cygpXG4gICAgICAgICAgICAgICAgZWxlbWVudC5vbmtleXVwID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc29ydFZhbHVlID0gcGFyc2VJbnQoZWxlbWVudC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwn5ZCv55So54q25oCB5LiL5LiN6IO95o6S5bqPIVwnXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOWFs+mXreWvueivneahhiAqKi9cbiAgICBjbG9zZURpYWxvZyAoKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ1wnXG4gICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSBmYWxzZVxuICAgICAgdGhpcy5nZXRBY3Rpdml0eUxpc3QoKVxuICAgIH0sXG4gICAgLyoqIOemu+W8gOWNleWFg+agvCAqKi9cbiAgICBjZWxsTW91c2VMZWF2ZSAocm93LCBjb2x1bW4sIGNlbGwsIGV2ZW50KSB7XG4gICAgICAvKiog6YeN572u5Y2V5YWD5qC854q25oCBICoqL1xuICAgICAgdGhpcy5jbGlja0NlbGxJbmRleCA9IC0xXG4gICAgICBpZiAodGhpcy5zb3J0VmFsdWUgPT09IC0xIHx8IHRoaXMuc2VsZWN0QWN0aXZpdHlJZCAhPT0gcm93LmFjdGl2aXR5aWQpIHJldHVybiBmYWxzZVxuICAgICAgLyoqIOS/ruaUueaOkuW6jyAqKi9cbiAgICAgIEFjdGlvbnMuY2hhbmdlQWN0aXZpdHlTb3J0KHtcbiAgICAgICAgXCdhY3Rpdml0eVwnOiB7XG4gICAgICAgICAgXCdhY3Rpdml0eWlkXCc6IHJvdy5hY3Rpdml0eWlkLFxuICAgICAgICAgIFwnc29ydFwnOiB0aGlzLnNvcnRWYWx1ZVxuICAgICAgICB9XG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLmdldEFjdGl2aXR5TGlzdCgpXG4gICAgICAgICAgdGhpcy5zb3J0VmFsdWUgPSAtMVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOe8lui+keaXtuiOt+WPluWNleWFg+agvOaVsOaNriAqKi9cbiAgICBoYW5kbGVFZGl0OiBmdW5jdGlvbiAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IHRydWVcbiAgICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gRXZlbnRFZGl0XG4gICAgICAgIHRoaXMuc2V0dGluZ0FjdGl2aXR5SWQgPSByb3cuYWN0aXZpdHlpZFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn5ZCv55So54q25oCB5LiL5LiN5Y+v57yW6L6RIVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog5L+u5pS554q25oCBICoqL1xuICAgIGNoYW5nZVN0YXRlIChyb3cpIHtcbiAgICAgIGxldCBzdGF0ZSA9IDBcbiAgICAgIGlmIChyb3cuc3RhdGUgPT09IDEpIHtcbiAgICAgICAgc3RhdGUgPSAwXG4gICAgICB9IGVsc2UgaWYgKHJvdy5zdGF0ZSA9PT0gMCkge1xuICAgICAgICBzdGF0ZSA9IDFcbiAgICAgIH1cbiAgICAgIEFjdGlvbnMuY2hhbmdlQWN0aXZpdHlTdGF0ZSh7XG4gICAgICAgIFwnYWN0aXZpdHlcJzoge1xuICAgICAgICAgIFwnYWN0aXZpdHlpZFwnOiByb3cuYWN0aXZpdHlpZCxcbiAgICAgICAgICBcJ3N0YXRlXCc6IHN0YXRlXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+S/ruaUueeKtuaAgeS4uuWBnOeUqFwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCcsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IFwn5L+u5pS554q25oCB5Li65ZCv55SoXCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZ2V0QWN0aXZpdHlMaXN0KClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDliKDpmaTpopHpgZMgKiovXG4gICAgaGFuZGxlRGVsZXRlIChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgdGhpcy4kY29uZmlybShcJ+aYr+WQpuWIoOmZpCJcJyArIHJvdy5hY3Rpdml0eV9uYW1lICsgXCciP1wnLCBcJ+aPkOekulwnLCB7XG4gICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwn56Gu5a6aXCcsXG4gICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCflj5bmtohcJyxcbiAgICAgICAgICB0eXBlOiBcJ3dhcm5pbmdcJ1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICBBY3Rpb25zLmRlbGV0ZUFjdGl2aXR5KHtcbiAgICAgICAgICAgIFwnYWN0aXZpdHlcJzoge1xuICAgICAgICAgICAgICBcJ2FjdGl2aXR5aWRcJzogcm93LmFjdGl2aXR5aWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCcsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCfliKDpmaTmiJDlip8hXCdcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ2V0QWN0aXZpdHlMaXN0KClcbiAgICAgICAgICB9KVxuICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCflkK/nlKjnirbmgIHkuIvkuI3lj6/liKDpmaQhXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDojrflj5bmnI3liqHnsbvliKsgKiovXG4gICAgZ2V0QWN0aXZpdHlUeXBlICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0QWN0aXZpdHlUeXBlKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGFcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGxldCBuZXdJdGVtID0ge31cbiAgICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBpdGVtLnR5cGVfbmFtZVxuICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0udHlwZWlkXG4gICAgICAgICAgICB0aGlzLmV2ZW50VHlwZUxpc3QucHVzaChuZXdJdGVtKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG48XC9zY3JpcHQ+XG48c3R5bGU+XG4gIC5ldmVudC1saXN0IC5lbC1mb3JtLS1pbmxpbmUgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gICAgd2lkdGg6IDYwJTtcbiAgfVxuICAuZXZlbnQtbGlzdCAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAyNSU7XG4gIH1cbiAgLmVsLWRpYWxvZ19faGVhZGVye1xuICAgIHBhZGRpbmc6IDEzcHggMzBweCAxM3B4O1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjQzBCRUZGO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNGN0ZBRkY7XG4gIH1cbiAgLmVsLWRpYWxvZ19fdGl0bGUge1xuICAgIGxpbmUtaGVpZ2h0OiAxN3B4O1xuICAgIGZvbnQtc2l6ZTogMTdweDtcbiAgICBjb2xvcjogIzMwMzEzMztcbiAgfVxuICAuZWwtZGlhbG9nX19oZWFkZXJidG4ge1xuICAgIHRvcDogMTNweDtcbiAgfVxuICAuZWwtZGlhbG9nX19ib2R5IHtcbiAgICBwYWRkaW5nOiAyMHB4IDBweCAyMHB4IDBweDtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LEtndDc6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoIlB5ZnMiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiNDA1NWI2ZTYiLGEsITEse30pfSxLeVYzOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJoMXFRIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjVlMGI2MGIzIixhLCExLHt9KX0sIkxmVC8iOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uY2ljbGUtY29udHJvbGxlcltkYXRhLXYtNzljNjdlOGVdIHtcbiAgbWFyZ2luLXRvcDogNCU7XG59XG4uY3JlYXRlIC5zb3J0IHNwYW5bZGF0YS12LTc5YzY3ZThlXXtcbiAgY29sb3I6ICM5MDkwOTA7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZUNoYW5uZWwvc3JjL2NvbXBvbmVudHMvbWFuYWdlQ2hhbm5lbC9jaGFubmVsQ3JlYXRlLnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUEyVEE7RUFDQSxlQUFBO0NBQ0E7QUFDQTtFQUNBLGVBQUE7Q0FDQSIsZmlsZToiY2hhbm5lbENyZWF0ZS52dWUiLHNvdXJjZXNDb250ZW50OlsnPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSJjaGFubmVsIGNyZWF0ZSI+XG4gICAgPGNpcmNsZS10aXRsZVxuICAgICAgdGl0bGUtbmFtZT0i6aKR6YGT5paw5aKeIlxuICAgICAgY2xhc3M9ImNpY2xlLWNvbnRyb2xsZXIiXG4gICAgLz5cbiAgICA8ZWwtZm9ybVxuICAgICAgcmVmPSJjcmVhdGVGcm9tIlxuICAgICAgOm1vZGVsPSJjcmVhdGVGcm9tIlxuICAgICAgOnJ1bGVzPSJydWxlcyJcbiAgICAgIGxhYmVsLXdpZHRoPSIxMDBweCJcbiAgICAgIGNsYXNzPSJydWxlLWZvcm0iPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i6aKR6YGT5ZCN56ewIlxuICAgICAgICBwcm9wPSJjaGFubmVsX25hbWUiPlxuICAgICAgICA8ZWwtaW5wdXQgdi1tb2RlbC50cmltPSJjcmVhdGVGcm9tLmNoYW5uZWxfbmFtZSIvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLniLbnuqfpopHpgZMiXG4gICAgICAgIHByb3A9InBhcmVudF9jaGFubmVsX25hbWUiPlxuICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgdi1tb2RlbD0iY3JlYXRlRnJvbS5wYXJlbnRfY2hhbm5lbGlkIlxuICAgICAgICAgIGZpbHRlcmFibGVcbiAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgIEBjaGFuZ2U9ImRpc2FibGVJc0ZpeGVkIj5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBwYXJlbnRDaGFubmVsTGlzdCJcbiAgICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgICAgOnZhbHVlPSJpdGVtLnZhbHVlIlxuICAgICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIi8+XG4gICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLlvZLlsZ7nsbvliKsiXG4gICAgICAgIHByb3A9ImNoYW5uZWxfdHlwZV9uYW1lIj5cbiAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgIHYtbW9kZWw9ImNyZWF0ZUZyb20uY2hhbm5lbF90eXBlaWQiXG4gICAgICAgICAgZmlsdGVyYWJsZVxuICAgICAgICAgIHBsYWNlaG9sZGVyPSIiPlxuICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIGNoYW5uZWxUeXBlTGlzdCJcbiAgICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgICAgOnZhbHVlPSJpdGVtLnZhbHVlIlxuICAgICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIi8+XG4gICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLlm77moIfphY3nva4iXG4gICAgICAgIGNsYXNzPSJpdGVtIj5cbiAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi1jaG9vc2UtY29udGFpbmVyIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb3Jlbi1pY29uIj5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgOnNyYz0iY3JlYXRlRnJvbS5pY29uX3VybCI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICAgIEBjbGljaz0iY2hvb3NlSWNvbiI+6YCJ5oup5Zu+5qCHPC9lbC1idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLnirbmgIHpgInmi6kiXG4gICAgICAgIHByb3A9InN0YXRlIj5cbiAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgIHYtbW9kZWw9ImNyZWF0ZUZyb20uc3RhdGUiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+mAieaLqSI+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgOnZhbHVlPSIwIlxuICAgICAgICAgICAgbGFiZWw9IuWBnOeUqCIvPlxuICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgIDp2YWx1ZT0iMSJcbiAgICAgICAgICAgIGxhYmVsPSLlkK/nlKgiLz5cbiAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IumikemBk+eugOi/sCI+XG4gICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgIHYtbW9kZWw9ImNyZWF0ZUZyb20uZGVzY3JpcHRpb24iXG4gICAgICAgICAgdHlwZT0idGV4dGFyZWEiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5piv5ZCm5Zu65a6aIlxuICAgICAgICBwcm9wPSJmaXhlZCI+XG4gICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICA6ZGlzYWJsZWQ9ImZpeGVkRGlzYWJsZWQiXG4gICAgICAgICAgdi1tb2RlbD0iY3JlYXRlRnJvbS5maXhlZCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj0i6K+36YCJ5oupIj5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICA6dmFsdWU9InRydWUiXG4gICAgICAgICAgICBsYWJlbD0i5pivIi8+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgOnZhbHVlPSJmYWxzZSJcbiAgICAgICAgICAgIGxhYmVsPSLlkKYiLz5cbiAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuaOkuW6jyJcbiAgICAgICAgY2xhc3M9InNvcnQiXG4gICAgICAgIHByb3A9InNvcnQiPlxuICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICB2LW1vZGVsLm51bWJlcj0iY3JlYXRlRnJvbS5zb3J0IlxuICAgICAgICAgIHN0eWxlPSJ3aWR0aDogNzUlIi8+XG4gICAgICAgIDxzcGFuPuaPkOekuu+8muaVsOWtl+i2iuWwj+i2iuW+gOWJjTwvc3Bhbj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbT5cbiAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgQGNsaWNrPSJzdWJtaXRGb3JtKFwnY3JlYXRlRnJvbVwnKSI+5o+Q5LqkPC9lbC1idXR0b24+XG4gICAgICAgIDxyb3V0ZXItbGluayB0bz0iL21hbmFnZUNoYW5uZWwvbGlzdCI+XG4gICAgICAgICAgPGVsLWJ1dHRvbj7lj5bmtog8L2VsLWJ1dHRvbj5cbiAgICAgICAgPC9yb3V0ZXItbGluaz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgIDwvZWwtZm9ybT5cbiAgICA8ZWwtZGlhbG9nXG4gICAgICA6dmlzaWJsZS5zeW5jPSJkaWFsb2dWaXNpYmxlIlxuICAgICAgdGl0bGU9IuWbvuagh+mAieaLqSJcbiAgICAgIHdpZHRoPSI0MCUiXG4gICAgICBAY2xvc2U9ImNsb3NlRGlhbG9nIj5cbiAgICAgIDxkaXZcbiAgICAgICAgOmlzPSJjb21wb25lbnROYW1lIlxuICAgICAgICBAc3VibWl0LWljb249InN1Ym1pdEljb24iLz5cbiAgICA8L2VsLWRpYWxvZz5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCBDaXJjbGVUaXRsZSBmcm9tIFwnQC9jb21wb25lbnRzL2NvbW1vbnMvY2lyY2xlVGl0bGVcJ1xuaW1wb3J0IENob29zZUljb24gZnJvbSBcJ0AvY29tcG9uZW50cy9tYW5hZ2VDaGFubmVsL2Nob29zZUljb25cJ1xuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tIFwnQC9hcGkvY2hhbm5lbEFwaVwnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBDaXJjbGVUaXRsZSxcbiAgICBDaG9vc2VJY29uXG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIGxldCBjaGVja0NoYW5uZWxOYW1lTGVuZ3RoID0gKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaykgPT4ge1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDEwKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoXCfpopHpgZPlkI3np7Dplb/luqbkuI3og73otoXov4cxMFwnKSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVGcm9tOiB7XG4gICAgICAgIGNoYW5uZWxfbmFtZTogXCdcJyxcbiAgICAgICAgcGFyZW50X2NoYW5uZWxfbmFtZTogXCdcJyxcbiAgICAgICAgc29ydDogXCdcJyxcbiAgICAgICAgaWNvbl91cmw6IFwnL3N0YXRpYy9pbWcvbW9yZW4uanBnXCcsXG4gICAgICAgIGNoYW5uZWxfdHlwZV9uYW1lOiBcJ1wnLFxuICAgICAgICBzdGF0ZTogMCxcbiAgICAgICAgZGVzY3JpcHRpb246IFwnXCcsXG4gICAgICAgIGZpeGVkOiBmYWxzZSxcbiAgICAgICAgcGFyZW50X2NoYW5uZWxpZDogXCdcJyxcbiAgICAgICAgY2hhbm5lbF90eXBlaWQ6IFwnXCdcbiAgICAgIH0sXG4gICAgICBydWxlczoge1xuICAgICAgICBjaGFubmVsX25hbWU6IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+i+k+WFpemikemBk+WQjeensFwnLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9LFxuICAgICAgICAgIHsgdmFsaWRhdG9yOiBjaGVja0NoYW5uZWxOYW1lTGVuZ3RoLCB0cmlnZ2VyOiBcJ2NoYW5nZVwnIH1cbiAgICAgICAgXSxcbiAgICAgICAgc29ydDogW1xuICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6IFwn6K+36L6T5YWl5o6S5bqPXCcsIHRyaWdnZXI6IFwnYmx1clwnIH0sXG4gICAgICAgICAgeyB0eXBlOiBcJ251bWJlclwnLCBtZXNzYWdlOiBcJ+aOkuW6j+W/hemhu+S4uuaVsOWtl1wnIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIGNoYW5uZWxUeXBlTGlzdDogW10sXG4gICAgICBwYXJlbnRDaGFubmVsTGlzdDogW1xuICAgICAgICB7XG4gICAgICAgICAgbGFiZWw6IFwn5pegXCcsXG4gICAgICAgICAgdmFsdWU6IFwnXCdcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlLFxuICAgICAgY29tcG9uZW50TmFtZTogXCdcJyxcbiAgICAgIGZpeGVkRGlzYWJsZWQ6IGZhbHNlXG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGdldFVwbG9hZFVybCAoKSB7XG4gICAgICByZXR1cm4gQWN0aW9ucy51cGxvYWRQaWN0dXJlKClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuZ2V0Q2hhbm5lbFR5cGUoKVxuICAgIHRoaXMuZ2V0UGFyZW50Q2hhbm5lbCgpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBzdWJtaXRGb3JtIChmb3JtTmFtZSkge1xuICAgICAgdGhpcy4kcmVmc1tmb3JtTmFtZV0udmFsaWRhdGUoKHZhbGlkKSA9PiB7XG4gICAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICAgIHRoaXMuY2hhbm5lbFR5cGVMaXN0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtLnZhbHVlID09PSB0aGlzLmNyZWF0ZUZyb20uY2hhbm5lbF90eXBlaWQpIHtcbiAgICAgICAgICAgICAgdGhpcy5jcmVhdGVGcm9tLmNoYW5uZWxfdHlwZV9uYW1lID0gaXRlbS5sYWJlbFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgdGhpcy5wYXJlbnRDaGFubmVsTGlzdC5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXRlbS52YWx1ZSA9PT0gdGhpcy5jcmVhdGVGcm9tLnBhcmVudF9jaGFubmVsaWQpIHtcbiAgICAgICAgICAgICAgdGhpcy5jcmVhdGVGcm9tLnBhcmVudF9jaGFubmVsX25hbWUgPSBpdGVtLmxhYmVsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICBBY3Rpb25zLmFkZENoYW5uZWwoe1xuICAgICAgICAgICAgXCdjaGFubmVsXCc6IHtcbiAgICAgICAgICAgICAgXCdwYXJlbnRfY2hhbm5lbGlkXCc6IHRoaXMuY3JlYXRlRnJvbS5wYXJlbnRfY2hhbm5lbGlkLFxuICAgICAgICAgICAgICBcJ3BhcmVudF9jaGFubmVsX25hbWVcJzogdGhpcy5jcmVhdGVGcm9tLnBhcmVudF9jaGFubmVsX25hbWUsXG4gICAgICAgICAgICAgIFwnY2hhbm5lbF9uYW1lXCc6IHRoaXMuY3JlYXRlRnJvbS5jaGFubmVsX25hbWUsXG4gICAgICAgICAgICAgIFwnY2hhbm5lbF90eXBlaWRcJzogdGhpcy5jcmVhdGVGcm9tLmNoYW5uZWxfdHlwZWlkLFxuICAgICAgICAgICAgICBcJ2NoYW5uZWxfdHlwZV9uYW1lXCc6IHRoaXMuY3JlYXRlRnJvbS5jaGFubmVsX3R5cGVfbmFtZSxcbiAgICAgICAgICAgICAgXCdpY29uX3VybFwnOiB0aGlzLmNyZWF0ZUZyb20uaWNvbl91cmwsXG4gICAgICAgICAgICAgIFwnc3RhdGVcJzogdGhpcy5jcmVhdGVGcm9tLnN0YXRlLFxuICAgICAgICAgICAgICBcJ2Rlc2NyaXB0aW9uXCc6IHRoaXMuY3JlYXRlRnJvbS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgXCdmaXhlZFwnOiB0aGlzLmNyZWF0ZUZyb20uZml4ZWQsXG4gICAgICAgICAgICAgIFwnc29ydFwnOiB0aGlzLmNyZWF0ZUZyb20uc29ydFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7cGF0aDogXCcvbWFuYWdlQ2hhbm5lbC9saXN0XCd9KVxuICAgICAgICAgICAgICB0aGlzLiRub3RpZnkoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcJ+mAmuefpVwnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwn5re75Yqg5oiQ5YqfXCcsXG4gICAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCdcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwnZXJyb3Igc3VibWl0ISFcJylcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGhhbmRsZVBjQXZhdGFyU3VjY2VzcyAocmVzLCBmaWxlKSB7XG4gICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICBsZXQgaW1hZ2VVcmwgPSByZXMucmVzdWx0XG4gICAgICAgIHRoaXMuY3JlYXRlRnJvbS5pY29uX3VybCA9IGltYWdlVXJsXG4gICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVBdmF0YXJVcGxvYWQgKGZpbGUpIHtcbiAgICAgIGxldCBpbWFnZU9iaiA9IHtcbiAgICAgICAgXCdpbWFnZS9qcGVnXCc6IHRydWUsXG4gICAgICAgIFwnaW1hZ2UvcG5nXCc6IHRydWUsXG4gICAgICAgIFwnaW1hZ2UvanBnXCc6IHRydWVcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlzSW1hZ2UgPSBmaWxlLnR5cGUgaW4gaW1hZ2VPYmpcbiAgICAgIGNvbnN0IGlzTHQyTSA9IGZpbGUuc2l6ZSAvIDEwMjQgLyAxMDI0IDwgMlxuICAgICAgaWYgKCFpc0ltYWdlKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoXCfor7fkuIrkvKDlm77niYfmoLzlvI/nmoTmlofku7YhXCcpXG4gICAgICB9XG4gICAgICBpZiAoIWlzTHQyTSkge1xuICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKFwn5LiK5Lyg5Zu+54mH5aSn5bCP5LiN6IO96LaF6L+HIDJNQiFcJylcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0ltYWdlICYmIGlzTHQyTVxuICAgIH0sXG4gICAgLyoqIOiOt+WPlumikemBk+exu+WIqyAqKi9cbiAgICBnZXRDaGFubmVsVHlwZSAoKSB7XG4gICAgICBBY3Rpb25zLmdldENoYW5uZWxUeXBlKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGFcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAvKiog6buY6K6k6YCJ5oup5LiA5Liq57G75Z6LICoqL1xuICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUZyb20uY2hhbm5lbF90eXBlaWQgPSBpdGVtLmNoYW5uZWxfdHlwZWlkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbmV3SXRlbSA9IHt9XG4gICAgICAgICAgICBuZXdJdGVtLmxhYmVsID0gaXRlbS5jaGFubmVsX3R5cGVfbmFtZVxuICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uY2hhbm5lbF90eXBlaWRcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbFR5cGVMaXN0LnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOiOt+WPlueItumikemBkyAqKi9cbiAgICBnZXRQYXJlbnRDaGFubmVsICgpIHtcbiAgICAgIEFjdGlvbnMubGlzdFVzYWJsZVBhcmVudENoYW5uZWwoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YVxuICAgICAgICBpZiAoZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gZGF0YS5yZXN1bHRcbiAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpXG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoYW5uZWxpZCAhPT0gaXRlbS5jaGFubmVsaWQpIHtcbiAgICAgICAgICAgICAgbGV0IG5ld0l0ZW0gPSB7fVxuICAgICAgICAgICAgICBuZXdJdGVtLmxhYmVsID0gaXRlbS5jaGFubmVsX25hbWVcbiAgICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uY2hhbm5lbGlkXG4gICAgICAgICAgICAgIHRoaXMucGFyZW50Q2hhbm5lbExpc3QucHVzaChuZXdJdGVtKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog6YCJ5Y+W5Zu+5qCHICoqL1xuICAgIGNob29zZUljb24gKCkge1xuICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gdHJ1ZVxuICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gXCdDaG9vc2VJY29uXCdcbiAgICB9LFxuICAgIGNsb3NlRGlhbG9nICgpIHtcbiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IGZhbHNlXG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ1wnXG4gICAgfSxcbiAgICAvKiog56Gu5a6a5Zu+5qCHICoqL1xuICAgIHN1Ym1pdEljb24gKGljb25VcmwpIHtcbiAgICAgIHRoaXMuY3JlYXRlRnJvbS5pY29uX3VybCA9IGljb25VcmxcbiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IGZhbHNlXG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ1wnXG4gICAgfSxcbiAgICAvKiog56aB55So5piv5ZCm5Zu65a6a5oyJ6ZKuLCDlubborqnlhbbpu5jorqTkuLrlkKYgKiovXG4gICAgZGlzYWJsZUlzRml4ZWQgKCkge1xuICAgICAgaWYgKHRoaXMuY3JlYXRlRnJvbS5wYXJlbnRfY2hhbm5lbGlkKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlRnJvbS5maXhlZCA9IGZhbHNlXG4gICAgICAgIHRoaXMuZml4ZWREaXNhYmxlZCA9IHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZml4ZWREaXNhYmxlZCA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5jaWNsZS1jb250cm9sbGVyIHtcbiAgICBtYXJnaW4tdG9wOiA0JTtcbiAgfVxuICAuY3JlYXRlIC5zb3J0IHNwYW57XG4gICAgY29sb3I6ICM5MDkwOTA7XG4gIH1cbjwvc3R5bGU+XG4nXSxzb3VyY2VSb290OiIifV0pfSxNY3E2OmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCIvUllvIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjM0MjkyMWU0IixhLCExLHt9KX0sTkJVbjpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgiQXVQTSIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCIxNDA4NTJiMyIsYSwhMSx7fSl9LE5IbnI6ZnVuY3Rpb24oZSxuLHQpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkobiwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIGE9e307dC5kKGEsIkZvcm1hdERhdGUiLGZ1bmN0aW9uKCl7cmV0dXJuIG1jfSksdC5kKGEsImdldEFNb250aEFnbyIsZnVuY3Rpb24oKXtyZXR1cm4gZGN9KSx0LmQoYSwic3dhcFRpbWUiLGZ1bmN0aW9uKCl7cmV0dXJuIHBjfSk7dmFyIGk9dCgiZlpqTCIpLGw9dC5uKGkpLG89KHQoIi9JNFUiKSx0KCIrQlRpIiksdCgieWc2ayIpKSxzPXQubihvKSxyPSh0KCJjd2U3IiksdCgiMlg5eiIpKSxjPXQubihyKSxtPSh0KCJvcTdpIiksdCgiK1REOCIpKSxkPXQubihtKSxwPSh0KCJ3bGJDIiksdCgiMVpJRiIpKSx1PXQubihwKSxoPSh0KCJiUll5IiksdCgiZUJHRiIpKSxnPXQubihoKSxBPSh0KCJZcTRKIiksdCgicXViWSIpKSxmPXQubihBKSxiPSh0KCJqQXpRIiksdCgid09oeCIpKSx2PXQubihiKSx5PSh0KCJCTkpSIiksdCgiZkRQTyIpKSxDPXQubih5KSxfPSh0KCI4amhiIiksdCgiUkRvSyIpKSx4PXQubihfKSx3PSh0KCJURkltIiksdCgiczN1ZSIpKSxGPXQubih3KSxrPSh0KCJkbVJIIiksdCgiRUtUViIpKSxTPXQubihrKSxFPSh0KCJXelpGIiksdCgid3hiayIpKSxEPXQubihFKSxMPSh0KCI1T2JDIiksdCgiNFpESiIpKSxCPXQubihMKSxNPSh0KCJpc2dOIiksdCgidExhKyIpKSxJPXQubihNKSxUPSh0KCJ5bHJ3IiksdCgiNm9pVyIpKSwkPXQubihUKSx6PSh0KCJEdGUyIiksdCgicTRsZSIpKSxVPXQubih6KSxOPSh0KCJpc0U2IiksdCgiTFI2eSIpKSxSPXQubihOKSxWPSh0KCJjRFN5IiksdCgiZTBCbSIpKSxqPXQubihWKSxQPSh0KCJJNG5CIiksdCgiU1RMaiIpKSxIPXQubihQKSxRPSh0KCJHWEVwIiksdCgibXRyRCIpKSxXPXQubihRKSxPPSh0KCJYK2t5IiksdCgiSEpNeCIpKSxxPXQubihPKSxZPSh0KCIrUmRiIiksdCgiTWV6byIpKSxaPXQubihZKSxHPSh0KCJxdW5KIiksdCgidnF3bCIpKSxKPXQubihHKSxYPSh0KCJSV2pZIiksdCgiYU13VyIpKSxLPXQubihYKSxlZT0odCgiczk2NyIpLHQoIjg1NS8iKSksbmU9dC5uKGVlKSx0ZT0odCgid0pLUyIpLHQoIm9yYlMiKSksYWU9dC5uKHRlKSxpZT10KCI3K3VXIiksbGU9dCgiTll4TyIpLG9lPXttb2R1bGVzOntsaXZlOntzdGF0ZTp7fSxtdXRhdGlvbnM6e30sYWN0aW9uczp7fSxnZXR0ZXJzOnt9fX19LHNlPXtkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3VzZXJOYW1lOnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oInVzZXJuYW1lIil9fSxjcmVhdGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiRyb290LmV2ZW50SHViLiRvbigicGFyYW1zLXJlYWR5IixmdW5jdGlvbigpe2UudXNlck5hbWU9c2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgidXNlcm5hbWUiKXx8IiJ9KX19LHJlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kY3JlYXRlRWxlbWVudCxuPXRoaXMuX3NlbGYuX2N8fGU7cmV0dXJuIG4oImRpdiIse3N0YXRpY0NsYXNzOiJ0b3AtaGVhZGVyIn0sW24oImltZyIse3N0YXRpY0NsYXNzOiJoZWFkZXItbG9nbyIsYXR0cnM6e3NyYzp0KCJ2Vlo0IiksYWx0OiIifX0pLHRoaXMuX3YoIiAiKSxuKCJkaXYiLHtzdGF0aWNDbGFzczoiaGVhZGVyLWluZm8ifSxbbigiaW1nIix7YXR0cnM6e3NyYzp0KCJVRXc0IiksYWx0OiIifX0pLHRoaXMuX3YoIiAiKSxuKCJzcGFuIix7c3RhdGljU3R5bGU6e3BhZGRpbmc6IjAgMTBweCJ9fSxbdGhpcy5fdih0aGlzLl9zKHRoaXMudXNlck5hbWUpKV0pXSldKX07cmUuX3dpdGhTdHJpcHBlZD0hMDt2YXIgY2U9e3JlbmRlcjpyZSxzdGF0aWNSZW5kZXJGbnM6W119LG1lPWNlO3ZhciBkZT0hMTt2YXIgcGU9dCgiVlUvOCIpKHNlLG1lLCExLGZ1bmN0aW9uKGUpe2RlfHx0KCIzOGFKIil9LCJkYXRhLXYtN2ZhNmRiYTQiLG51bGwpO3BlLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9jb21tb25zL2xheW91dEhlYWRlci52dWUiO3ZhciB1ZT1wZS5leHBvcnRzLGhlPXQoIi8vRmsiKSxnZT10Lm4oaGUpLEFlPSJodHRwczovL2cudC5kYWN1YmUuY24vQVBQLU1BTkFHRS1TVi00Si8iLGZlPXQoIm10V00iKS5jcmVhdGUoe2Jhc2VVUkw6QWUsd2l0aENyZWRlbnRpYWxzOiExLGhlYWRlcnM6eyJYLVJlcXVlc3RlZC1XaXRoIjoiWE1MSHR0cFJlcXVlc3QiLCJDb250ZW50LVR5cGUiOiJhcHBsaWNhdGlvbi9qc29uIn19KTtmZS5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoZnVuY3Rpb24oZSl7aWYoInBvc3QiPT09ZS5tZXRob2Qpe3ZhciBuPWUuZGF0YXx8e307bi50b2tlbj1zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCJ0b2tlbiIpfHwiIixuLmNvbXBpZD1zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCJjb21waWQiKXx8IiIsbi51c2VyY29kZT1zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCJ1c2VyY29kZSIpfHwiIixlLmRhdGE9bn1yZXR1cm4gZX0sZnVuY3Rpb24oZSl7cmV0dXJuIGdlLmEucmVqZWN0KGUpfSksZmUuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShmdW5jdGlvbihlKXtyZXR1cm4gZS5kYXRhLnN0YXR1cz9lOigobmV3IGllLmRlZmF1bHQpLiRub3RpZnkoe3RpdGxlOiLplJnor68iLHR5cGU6ImVycm9yIixtZXNzYWdlOmUuZGF0YS5lcnJvcm1zZ30pLCExKX0sZnVuY3Rpb24oZSl7dmFyIG47cmV0dXJuKG49ZSkmJm4ucmVzcG9uc2UmJig0MDEhPT1uLnJlc3BvbnNlLnN0YXR1cyYmNDAzIT09bi5yZXNwb25zZS5zdGF0dXN8fChzZXNzaW9uU3RvcmFnZS5jbGVhcigpLHdpbmRvdy5sb2NhdGlvbi5ocmVmPSJodHRwczovL2NlbnRlci50LmRhY3ViZS5jbi8iKSksZ2UuYS5yZWplY3QoZSl9KTt2YXIgYmU9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gZmUucG9zdChlLG4pfSx2ZT1mdW5jdGlvbihlLG4pe3JldHVybiBmZS5nZXQoZSx7cGFyYW1zOm59KX0seWU9ZnVuY3Rpb24oZSl7Zm9yKHZhciBuIGluIGUpaWYoZS5oYXNPd25Qcm9wZXJ0eShuKSl7dmFyIHQ9ZVtuXTtmZS5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltuXT10fX0sQ2U9QWU7ZnVuY3Rpb24gX2UoKXtyZXR1cm4gQ2UrIm1hbmFnZXIvUmVzb3VyY2VzL3VwbG9hZC9pbWFnZXMifWZ1bmN0aW9uIHhlKGUpe3JldHVybiBiZSgibWFuYWdlci9TcGVjaWFsL2xpc3RVc2FibGVDaGFubmVsIixlKX1mdW5jdGlvbiB3ZShlKXtyZXR1cm4gYmUoIm1hbmFnZXIvU3BlY2lhbC9saXN0VXNhYmxlU3BlY2lhbCIsZSl9dmFyIEZlPXtkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2RhdGFMaXN0OltdLGRlZmF1bHRQcm9wczp7Y2hpbGRyZW46ImNoaWxkcmVuIixsYWJlbDoibGFiZWwifX19LGNyZWF0ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuJHJvb3QuZXZlbnRIdWIuJG9uKCJwYXJhbXMtcmVhZHkiLGZ1bmN0aW9uKCl7ZS5nZXRNZW51TGlzdCgpfSk7dmFyIG49c2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgidG9rZW4iKTtuJiYoeWUoe3Rva2VuOm59KSx0aGlzLmdldE1lbnVMaXN0KCkpfSxiZWZvcmVEZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy4kcm9vdC5ldmVudEh1Yi4kb2ZmKCJwYXJhbXMtcmVhZHkiKX0sbWV0aG9kczp7aGFuZGxlTm9kZUNsaWNrOmZ1bmN0aW9uKGUsbix0KXt0aGlzLiRyb3V0ZXIucHVzaChlLnBhdGgpfSxnZXRNZW51TGlzdDpmdW5jdGlvbigpe3ZhciBlLG49dGhpcztiZSgibWFuYWdlci9PcmdVc2Vycy91c2VyVHJlZVBlcm1pc3Npb24iLGUpLnRoZW4oZnVuY3Rpb24oZSl7ZS5kYXRhJiZlLmRhdGEuc3RhdHVzJiYobi5kYXRhTGlzdD1lLmRhdGEucmVzdWx0fHxbXSl9KS5jYXRjaChmdW5jdGlvbigpe24uZGF0YUxpc3Q9W119KX19fSxrZT1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1lLiRjcmVhdGVFbGVtZW50LHQ9ZS5fc2VsZi5fY3x8bjtyZXR1cm4gdCgiZGl2Iix7c3RhdGljQ2xhc3M6InRyZWUtd3JhcHBlciJ9LFt0KCJlbC10cmVlIix7YXR0cnM6e2RhdGE6ZS5kYXRhTGlzdCxwcm9wczplLmRlZmF1bHRQcm9wcyxhY2NvcmRpb246IiJ9LG9uOnsibm9kZS1jbGljayI6ZS5oYW5kbGVOb2RlQ2xpY2t9LHNjb3BlZFNsb3RzOmUuX3UoW3trZXk6ImRlZmF1bHQiLGZuOmZ1bmN0aW9uKG4pe24ubm9kZTt2YXIgYT1uLmRhdGE7cmV0dXJuIHQoInNwYW4iLHtzdGF0aWNDbGFzczoiY3VzdG9tLXRyZWUtbm9kZSJ9LFt0KCJyb3V0ZXItbGluayIse2F0dHJzOnt0bzphLnBhdGh9fSxbdCgiaSIse2NsYXNzOlsiaWNvbmZvbnQgY3VzdG9tLXRyZWUtaWNvbiIsYS5pY29uXX0pLGUuX3YoIiAiKSx0KCJzcGFuIixbZS5fdihlLl9zKGEubGFiZWwpKV0pXSldLDEpfX1dKX0pXSwxKX07a2UuX3dpdGhTdHJpcHBlZD0hMDt2YXIgU2U9e3JlbmRlcjprZSxzdGF0aWNSZW5kZXJGbnM6W119LEVlPVNlO3ZhciBEZT0hMTt2YXIgTGU9dCgiVlUvOCIpKEZlLEVlLCExLGZ1bmN0aW9uKGUpe0RlfHx0KCJla2NNIil9LCJkYXRhLXYtM2EwYThlMWUiLG51bGwpO0xlLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9jb21tb25zL3JvdXRlclRyZWUudnVlIjt2YXIgQmU9e2NvbXBvbmVudHM6e0xheW91dEhlYWRlcjp1ZSxSb3V0ZXJUcmVlOkxlLmV4cG9ydHN9fSxNZT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuJGNyZWF0ZUVsZW1lbnQsbj10aGlzLl9zZWxmLl9jfHxlO3JldHVybiBuKCJkaXYiLHtzdGF0aWNDbGFzczoibG8tY29udGFpbmVyIn0sW24oImRpdiIse3N0YXRpY0NsYXNzOiJsby1oZWFkZXIifSxbbigibGF5b3V0LWhlYWRlciIpXSwxKSx0aGlzLl92KCIgIiksbigiZGl2Iix7c3RhdGljQ2xhc3M6ImxvLWNvbnRlbnQifSxbbigiZGl2Iix7c3RhdGljQ2xhc3M6ImxvLXRyZWUifSxbbigicm91dGVyLXRyZWUiKV0sMSksdGhpcy5fdigiICIpLG4oImRpdiIse3N0YXRpY0NsYXNzOiJsby1tYWluIn0sW24oInJvdXRlci12aWV3IildLDEpXSldKX07TWUuX3dpdGhTdHJpcHBlZD0hMDt2YXIgSWU9e3JlbmRlcjpNZSxzdGF0aWNSZW5kZXJGbnM6W119LFRlPUllO3ZhciAkZT0hMTt2YXIgemU9dCgiVlUvOCIpKEJlLFRlLCExLGZ1bmN0aW9uKGUpeyRlfHx0KCJNY3E2Iil9LCJkYXRhLXYtOGE1NGU2NzgiLG51bGwpO3plLm9wdGlvbnMuX19maWxlPSJzcmMvdmlld3MvbGF5b3V0LnZ1ZSI7dmFyIFVlPXplLmV4cG9ydHMsTmU9ZnVuY3Rpb24oZSxuKXtufHwobj1sb2NhdGlvbi5ocmVmKSxlPWUucmVwbGFjZSgvW1tdLywiXFxbIikucmVwbGFjZSgvW1xdXS8sIlxcXSIpO3ZhciB0PW5ldyBSZWdFeHAoIltcXD8mXSIrZSsiPShbXiYjXSopIikuZXhlYyhuKTtyZXR1cm4gbnVsbD09dD9udWxsOnRbMV19LFJlPWZ1bmN0aW9uKGUsbix0KXt2YXIgYT0obmV3IERhdGUpLmdldFRpbWUoKSxpPXRbMF0uZ2V0VGltZSgpLGw9dFsxXS5nZXRUaW1lKCk7aTxhJiZlLiRzZXQobiwwLG5ldyBEYXRlKSxsPGEmJmUuJHNldChuLDEsbmV3IERhdGUpfSxWZT17bmFtZToiQXBwIixjb21wb25lbnRzOntMYXlvdXQ6VWV9LGNyZWF0ZWQ6ZnVuY3Rpb24oKXt0aGlzLmdldFVybFRva2VuKCl9LG1ldGhvZHM6e2dldFVybFRva2VuOmZ1bmN0aW9uKCl7aWYoIXNlc3Npb25TdG9yYWdlLmdldEl0ZW0oInRva2VuIikpe3ZhciBlPXdpbmRvdy5sb2NhdGlvbi5ocmVmLG49TmUoInRva2VuIixlKTtuJiYoc2Vzc2lvblN0b3JhZ2UuY2xlYXIoKSxzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCJ0b2tlbiIsbikseWUoe3Rva2VuOm59KSx0aGlzLmdldFVzZXJJbmZvKCkpfX0sZ2V0VXNlckluZm86ZnVuY3Rpb24oKXt2YXIgZSxuPXRoaXM7dmUoIm1hbmFnZXIvT3JnVXNlcnMvdXNlcmluZm8iLGUpLnRoZW4oZnVuY3Rpb24oZSl7dmFyIHQ9ZS5kYXRhP2UuZGF0YS5yZXN1bHQ6e307Zm9yKHZhciBhIGluIHQpaWYodC5oYXNPd25Qcm9wZXJ0eShhKSl7dmFyIGk9dFthXTtzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGEsaSl9bi4kcm9vdC5ldmVudEh1Yi4kZW1pdCgicGFyYW1zLXJlYWR5Iil9KS5jYXRjaChmdW5jdGlvbihlKXtjb25zb2xlLmVycm9yKGUpfSl9fX0samU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRjcmVhdGVFbGVtZW50LG49dGhpcy5fc2VsZi5fY3x8ZTtyZXR1cm4gbigiZGl2Iix7YXR0cnM6e2lkOiJhcHAifX0sW24oImxheW91dCIpXSwxKX07amUuX3dpdGhTdHJpcHBlZD0hMDt2YXIgUGU9e3JlbmRlcjpqZSxzdGF0aWNSZW5kZXJGbnM6W119LEhlPVBlO3ZhciBRZT0hMTt2YXIgV2U9dCgiVlUvOCIpKFZlLEhlLCExLGZ1bmN0aW9uKGUpe1FlfHx0KCJHSEdoIil9LG51bGwsbnVsbCk7V2Uub3B0aW9ucy5fX2ZpbGU9InNyYy9BcHAudnVlIjt2YXIgT2U9V2UuZXhwb3J0cyxxZT10KCIvb2NxIiksWWU9e25hbWU6IkNpcmNsZVRpdGxlIixwcm9wczp7dGl0bGVOYW1lOnt0eXBlOlN0cmluZyxkZWZhdWx0OiLnrqHnkIYifX19LFplPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kY3JlYXRlRWxlbWVudCxuPXRoaXMuX3NlbGYuX2N8fGU7cmV0dXJuIG4oImRpdiIse3N0YXRpY0NsYXNzOiJjaWNsZS1jb250YWluZXIifSxbbigic3BhbiIse3N0YXRpY0NsYXNzOiJib3JkZXItY2lyY2xlIn0pLHRoaXMuX3YoIiAiKSxuKCJzcGFuIix7c3RhdGljQ2xhc3M6InRpdGxlLW5hbWUifSxbdGhpcy5fdigiXG4gICAgIit0aGlzLl9zKHRoaXMudGl0bGVOYW1lKSsiXG4gICIpXSldKX07WmUuX3dpdGhTdHJpcHBlZD0hMDt2YXIgR2U9e3JlbmRlcjpaZSxzdGF0aWNSZW5kZXJGbnM6W119LEplPUdlO3ZhciBYZT0hMTt2YXIgS2U9dCgiVlUvOCIpKFllLEplLCExLGZ1bmN0aW9uKGUpe1hlfHx0KCJXWnpBIil9LCJkYXRhLXYtNTVkNTgxNjEiLG51bGwpO0tlLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlLnZ1ZSI7dmFyIGVuPUtlLmV4cG9ydHMsbm49e3Byb3BzOntzaG93Q2xvY2s6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuITF9fSxpY29uQmc6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4iI0ZENkY1OCJ9fSxpY29uTmFtZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybiIifX0sY291bnQ6e3R5cGU6W1N0cmluZyxOdW1iZXJdLGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gMH19LGxhYmVsOnt0eXBlOlN0cmluZyxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIiJ9fX19LHRuPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPWUuJGNyZWF0ZUVsZW1lbnQsdD1lLl9zZWxmLl9jfHxuO3JldHVybiB0KCJkaXYiLHtzdGF0aWNDbGFzczoiY291bnQtaXRlbS13cmFwcGVyIn0sW3QoImRpdiIse3N0YXRpY0NsYXNzOiJpdGVtLWljb24iLHN0eWxlOnsiYmFja2dyb3VuZC1jb2xvciI6ZS5pY29uQmd9fSxbdCgiaSIse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOmUuc2hvd0Nsb2NrLGV4cHJlc3Npb246InNob3dDbG9jayJ9XSxzdGF0aWNDbGFzczoiaWNvbmZvbnQgaWNvbi1jbG9jayBjbG9jayJ9KSxlLl92KCIgIiksdCgiaSIse2NsYXNzOlsiaWNvbmZvbnQgY3VzdG9tLWljb24iLGUuaWNvbk5hbWVdfSldKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6Iml0ZW0tbnVtIn0sW3QoInAiLHtzdGF0aWNDbGFzczoiY291bnQtbnVtIn0sW2UuX3YoZS5fcyhlLmNvdW50fHwwKSldKSxlLl92KCIgIiksdCgicCIse3N0YXRpY0NsYXNzOiJjb3VudC10ZXh0In0sW2UuX3YoZS5fcyhlLmxhYmVsKSldKV0pXSl9O3RuLl93aXRoU3RyaXBwZWQ9ITA7dmFyIGFuPXtyZW5kZXI6dG4sc3RhdGljUmVuZGVyRm5zOltdfSxsbj1hbjt2YXIgb249ITE7dmFyIHNuPXQoIlZVLzgiKShubixsbiwhMSxmdW5jdGlvbihlKXtvbnx8dCgibzE5cCIpfSwiZGF0YS12LTY2N2RkMWZiIixudWxsKTtzbi5vcHRpb25zLl9fZmlsZT0ic3JjL2NvbXBvbmVudHMvY29tbW9ucy9jb3VudEl0ZW0udnVlIjt2YXIgcm49c24uZXhwb3J0cyxjbj17cHJvcHM6e2RhdGE6e3R5cGU6QXJyYXksZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybltdfX19LGRhdGE6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybnt0YWJsZUhlYWRlcjpbe3Byb3A6ImxvZ2lkIixsYWJlbDoi57yW5Y+3In0se3Byb3A6InVzZXJuYW1lIixsYWJlbDoi5pON5L2c6ICFIn0se3Byb3A6ImNyZWF0ZXRpbWUiLGxhYmVsOiLmk43kvZzml6XmnJ8iLGZvcm1hdHRlcjpmdW5jdGlvbihuLHQsYSxpKXtyZXR1cm4gZS4kb3B0aW9ucy5maWx0ZXJzLkZvcm1hdERhdGUoYSwieXl5eS1NTS1kZCBoaDptbSIpfX0se3Byb3A6ImlwQWRkcmVzcyIsbGFiZWw6IklQ5Zyw5Z2AIn0se3Byb3A6Im9wZXJhdGlvbkNvbnRlbnQiLGxhYmVsOiLmk43kvZzorrDlvZUifV19fX0sbW49ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRjcmVhdGVFbGVtZW50LG49dGhpcy5fc2VsZi5fY3x8ZTtyZXR1cm4gbigiZGl2Iix7c3RhdGljQ2xhc3M6InRhYmxlLWxpc3QifSxbbigiZWwtdGFibGUiLHtyZWY6ImNoYW5uZWxUYWJsZSIsc3RhdGljQ2xhc3M6Indob2xlLXRhYmxlIixhdHRyczp7ZGF0YTp0aGlzLmRhdGEsc3RyaXBlOiIiLCJtaW4taGVpZ2h0IjoiNDAwIn19LHRoaXMuX2wodGhpcy50YWJsZUhlYWRlcixmdW5jdGlvbihlLHQpe3JldHVybiBuKCJlbC10YWJsZS1jb2x1bW4iLHtrZXk6dCxhdHRyczp7cHJvcDplLnByb3AsbGFiZWw6ZS5sYWJlbCx3aWR0aDplLndpZHRoLGZvcm1hdHRlcjplLmZvcm1hdHRlcixhbGlnbjoiY2VudGVyIixmaXhlZDoiIiwic2hvdy1vdmVyZmxvdy10b29sdGlwIjoiIn19KX0pLDEpXSwxKX07bW4uX3dpdGhTdHJpcHBlZD0hMDt2YXIgZG49e3JlbmRlcjptbixzdGF0aWNSZW5kZXJGbnM6W119LHBuPWRuO3ZhciB1bj0hMTt2YXIgaG49dCgiVlUvOCIpKGNuLHBuLCExLGZ1bmN0aW9uKGUpe3VufHx0KCJyUi8vIil9LCJkYXRhLXYtYjA2MTA3MjgiLG51bGwpO2huLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9ob21lL3RhYmxlTGlzdC52dWUiO3ZhciBnbj17Y29tcG9uZW50czp7Q2lyY2xlVGl0bGU6ZW4sQ291bnRJdGVtOnJuLFRhYmxlTGlzdDpobi5leHBvcnRzfSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2NvdW50UmVzdWx0Ont9LGxvZ0xpc3Q6W10sb3B0aW9uczp7cGFnZU5vOjEscGFnZVNpemU6MTB9LHRvdGFsOjB9fSxjcmVhdGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiRyb290LmV2ZW50SHViLiRvbigicGFyYW1zLXJlYWR5IixmdW5jdGlvbigpe2UuZ2V0Q291bnQoKSxlLmdldFRvZGF5TG9nKCl9KX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMuJHJvb3QuZXZlbnRIdWIuJG9mZigicGFyYW1zLXJlYWR5Iil9LG1ldGhvZHM6e2dldENvdW50OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztiZSgibWFuYWdlci9Ib21lUGFnZS9zdGF0aXN0aWNzIikudGhlbihmdW5jdGlvbihuKXtuLmRhdGEmJm4uZGF0YS5zdGF0dXM/ZS5jb3VudFJlc3VsdD1uLmRhdGEucmVzdWx0fHx7fTplLmNvdW50UmVzdWx0PXt9fSl9LGdldFRvZGF5TG9nOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztiZSgibWFuYWdlci9Ib21lUGFnZS9wYWdlVG9kYXlPcGVyYXRpb25Mb2ciLHRoaXMub3B0aW9ucykudGhlbihmdW5jdGlvbihuKXtpZihuLmRhdGEmJm4uZGF0YS5zdGF0dXMpe3ZhciB0PW4uZGF0YS5yZXN1bHQ7ZS5sb2dMaXN0PXQubGlzdHx8W10sZS50b3RhbD10LnRvdGFsfHwwfWVsc2UgZS5sb2dMaXN0PVtdLGUudG90YWw9MH0pfSxoYW5kbGVTaXplQ2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMub3B0aW9ucy5wYWdlTm89MSx0aGlzLm9wdGlvbnMucGFnZVNpemU9ZSx0aGlzLmdldFRvZGF5TG9nKCl9LGhhbmRsZUN1cnJlbnRDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5vcHRpb25zLnBhZ2VObz1lLHRoaXMuZ2V0VG9kYXlMb2coKX19fSxBbj1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1lLiRjcmVhdGVFbGVtZW50LHQ9ZS5fc2VsZi5fY3x8bjtyZXR1cm4gdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImhvbWUtd3JhcHBlciJ9LFt0KCJkaXYiLHtzdGF0aWNDbGFzczoiaG9tZS10b2RvcyBpbm5lci1ibG9jayJ9LFt0KCJjaXJjbGUtdGl0bGUiLHthdHRyczp7InRpdGxlLW5hbWUiOiLlvoXlpITnkIbkuovniakifX0pLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoiaXRlbXMtd3JhcHBlciJ9LFt0KCJjb3VudC1pdGVtIix7YXR0cnM6e2NvdW50OmUuY291bnRSZXN1bHQuY291bnRUb0JlQWxsb2NhdGVkQXJ0aWNsZSwiaWNvbi1iZyI6IiNGRDZGNTgiLCJzaG93LWNsb2NrIjoiIiwiaWNvbi1uYW1lIjoiaWNvbi1wYXBlcjIiLGxhYmVsOiLlvoXliIbphY3nqL/ku7bmlbAifX0pLGUuX3YoIiAiKSx0KCJjb3VudC1pdGVtIix7YXR0cnM6e2NvdW50OmUuY291bnRSZXN1bHQuY291bnRUb0JlQWxsb2NhdGVkVmlkZW8sImljb24tYmciOiIjNzdFNkU1Iiwic2hvdy1jbG9jayI6IiIsImljb24tbmFtZSI6Imljb24tcGFwZXIzIixsYWJlbDoi5b6F5YiG6YWN54K55pKt56i/5Lu25pWwIn19KSxlLl92KCIgIiksdCgiY291bnQtaXRlbSIse2F0dHJzOntjb3VudDplLmNvdW50UmVzdWx0LmNvdW50VG9CZUF1ZGl0ZWRDb21tZW50LCJzaG93LWNsb2NrIjoiIiwiaWNvbi1iZyI6IiNGRkNFNUIiLCJpY29uLW5hbWUiOiJpY29uLW1hbnUtY29tbWVudCIsbGFiZWw6IuW+heWuoeaJueivhOiuuuaVsCJ9fSldLDEpXSwxKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImhvbWUtY291bnQgaW5uZXItYmxvY2sifSxbdCgiY2lyY2xlLXRpdGxlIix7YXR0cnM6eyJ0aXRsZS1uYW1lIjoi57uf6K6h5pWw5o2uIn19KSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6Iml0ZW1zLWxpbmUifSxbdCgiZGl2Iix7c3RhdGljQ2xhc3M6Iml0ZW1zLXdyYXBwZXIifSxbdCgiY291bnQtaXRlbSIse2F0dHJzOntjb3VudDplLmNvdW50UmVzdWx0LmNvdW50T25saW5lQXJ0aWNsZSwiaWNvbi1iZyI6IiNGRkNFNUIiLCJpY29uLW5hbWUiOiJpY29uLW1lbnUiLGxhYmVsOiLlnKjnur/otYTorq/nqL/ku7bmlbAifX0pLGUuX3YoIiAiKSx0KCJjb3VudC1pdGVtIix7YXR0cnM6e2NvdW50OmUuY291bnRSZXN1bHQuY291bnRPbmxpbmVWaWRlbywiaWNvbi1iZyI6IiM3N0U2RTUiLCJpY29uLW5hbWUiOiJpY29uLWxpdmUiLGxhYmVsOiLlnKjnur/ngrnmkq3nqL/ku7bmlbAifX0pLGUuX3YoIiAiKSx0KCJjb3VudC1pdGVtIix7YXR0cnM6e2NvdW50OmUuY291bnRSZXN1bHQuY291bnRUb2RheU9ubGluZUFydGljbGUsImljb24tYmciOiIjNUY5REY5IiwiaWNvbi1uYW1lIjoiaWNvbi1saXZlMiIsbGFiZWw6IuS7iuaXpeaWsOWinueCueaSreeov+S7tuaVsCJ9fSldLDEpXSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJpdGVtcy1saW5lMiJ9LFt0KCJkaXYiLHtzdGF0aWNDbGFzczoiaXRlbXMtd3JhcHBlciJ9LFt0KCJjb3VudC1pdGVtIix7YXR0cnM6e2NvdW50OmUuY291bnRSZXN1bHQuY291bnRUb0JlQWxsb2NhdGVkQXJ0aWNsZSwiaWNvbi1iZyI6IiM3OTY4RkYiLCJpY29uLW5hbWUiOiJpY29uLXBhcGVyIixsYWJlbDoi5LuK5pel5paw5aKe6LWE6K6v56i/5Lu25pWwIn19KSxlLl92KCIgIiksdCgiY291bnQtaXRlbSIse2F0dHJzOntjb3VudDplLmNvdW50UmVzdWx0LmNvdW50QWxsUmVnaXN0ZXIsImljb24tYmciOiIjRkQ2RjU4IiwiaWNvbi1uYW1lIjoiaWNvbi11c2VyczIiLGxhYmVsOiLmgLvnlKjmiLfmlbAifX0pLGUuX3YoIiAiKSx0KCJjb3VudC1pdGVtIix7YXR0cnM6e2NvdW50OmUuY291bnRSZXN1bHQuY291bnRUb2RheVJlZ2lzdGVyLCJpY29uLWJnIjoiI0ZGQ0U1QiIsImljb24tbmFtZSI6Imljb24tdXNlcjIiLGxhYmVsOiLku4rml6XmlrDlop7nlKjmiLfmlbAifX0pXSwxKV0pXSwxKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImhvbWUtbG9ncyJ9LFt0KCJjaXJjbGUtdGl0bGUiKSxlLl92KCIgIiksdCgidGFibGUtbGlzdCIse2F0dHJzOntkYXRhOmUubG9nTGlzdH19KSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InBhZ2luYXRpb24ifSxbdCgiZWwtcGFnaW5hdGlvbiIse2F0dHJzOnt0b3RhbDplLnRvdGFsLCJjdXJyZW50LXBhZ2UiOmUub3B0aW9ucy5wYWdlTm8sInBhZ2Utc2l6ZXMiOlsxMCwyMCwzMCw0MF0sYmFja2dyb3VuZDoiIixsYXlvdXQ6InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQifSxvbjp7InNpemUtY2hhbmdlIjplLmhhbmRsZVNpemVDaGFuZ2UsImN1cnJlbnQtY2hhbmdlIjplLmhhbmRsZUN1cnJlbnRDaGFuZ2V9fSldLDEpXSwxKV0pfTtBbi5fd2l0aFN0cmlwcGVkPSEwO3ZhciBmbj17cmVuZGVyOkFuLHN0YXRpY1JlbmRlckZuczpbXX0sYm49Zm47dmFyIHZuPSExO3ZhciB5bj10KCJWVS84IikoZ24sYm4sITEsZnVuY3Rpb24oZSl7dm58fHQoImlaUlIiKX0sImRhdGEtdi03ZWIyYmM3OSIsbnVsbCk7eW4ub3B0aW9ucy5fX2ZpbGU9InNyYy92aWV3cy9ob21lLnZ1ZSI7dmFyIENuPXluLmV4cG9ydHMsX249ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRjcmVhdGVFbGVtZW50LG49dGhpcy5fc2VsZi5fY3x8ZTtyZXR1cm4gbigiZGl2Iix7c3RhdGljQ2xhc3M6Im1jLWNvbnRhaW5lciJ9LFtuKCJrZWVwLWFsaXZlIixbdGhpcy4kcm91dGUubWV0YS5rZWVwQWxpdmU/bigicm91dGVyLXZpZXciKTp0aGlzLl9lKCldLDEpLHRoaXMuX3YoIiAiKSx0aGlzLiRyb3V0ZS5tZXRhLmtlZXBBbGl2ZT90aGlzLl9lKCk6bigicm91dGVyLXZpZXciKV0sMSl9O19uLl93aXRoU3RyaXBwZWQ9ITA7dmFyIHhuPXtyZW5kZXI6X24sc3RhdGljUmVuZGVyRm5zOltdfSx3bj14bjt2YXIgRm49dCgiVlUvOCIpKG51bGwsd24sITEsbnVsbCxudWxsLG51bGwpO0ZuLm9wdGlvbnMuX19maWxlPSJzcmMvdmlld3MvbWFuYWdlQ2hhbm5lbC52dWUiO3ZhciBrbj1Gbi5leHBvcnRzLFNuPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kY3JlYXRlRWxlbWVudCxuPXRoaXMuX3NlbGYuX2N8fGU7cmV0dXJuIG4oImRpdiIse3N0YXRpY0NsYXNzOiJzbGlkZS13cmFwcGVyIn0sW24oImtlZXAtYWxpdmUiLFt0aGlzLiRyb3V0ZS5tZXRhLmtlZXBBbGl2ZT9uKCJyb3V0ZXItdmlldyIpOnRoaXMuX2UoKV0sMSksdGhpcy5fdigiICIpLHRoaXMuJHJvdXRlLm1ldGEua2VlcEFsaXZlP3RoaXMuX2UoKTpuKCJyb3V0ZXItdmlldyIpXSwxKX07U24uX3dpdGhTdHJpcHBlZD0hMDt2YXIgRW49e3JlbmRlcjpTbixzdGF0aWNSZW5kZXJGbnM6W119LERuPUVuO3ZhciBMbj10KCJWVS84IikobnVsbCxEbiwhMSxudWxsLG51bGwsbnVsbCk7TG4ub3B0aW9ucy5fX2ZpbGU9InNyYy92aWV3cy9tYW5hZ2VTbGlkZS52dWUiO3ZhciBCbj1Mbi5leHBvcnRzLE1uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kY3JlYXRlRWxlbWVudCxuPXRoaXMuX3NlbGYuX2N8fGU7cmV0dXJuIG4oImRpdiIse3N0YXRpY0NsYXNzOiJtYy1jb250YWluZXIifSxbbigia2VlcC1hbGl2ZSIsW3RoaXMuJHJvdXRlLm1ldGEua2VlcEFsaXZlP24oInJvdXRlci12aWV3Iik6dGhpcy5fZSgpXSwxKSx0aGlzLl92KCIgIiksdGhpcy4kcm91dGUubWV0YS5rZWVwQWxpdmU/dGhpcy5fZSgpOm4oInJvdXRlci12aWV3IildLDEpfTtNbi5fd2l0aFN0cmlwcGVkPSEwO3ZhciBJbj17cmVuZGVyOk1uLHN0YXRpY1JlbmRlckZuczpbXX0sVG49SW47dmFyICRuPXQoIlZVLzgiKShudWxsLFRuLCExLG51bGwsbnVsbCxudWxsKTskbi5vcHRpb25zLl9fZmlsZT0ic3JjL3ZpZXdzL21hbmFnZVRvcGljLnZ1ZSI7dmFyIHpuPSRuLmV4cG9ydHMsVW49ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRjcmVhdGVFbGVtZW50LG49dGhpcy5fc2VsZi5fY3x8ZTtyZXR1cm4gbigiZGl2Iix7c3RhdGljQ2xhc3M6InNsaWRlLXdyYXBwZXIifSxbbigicm91dGVyLXZpZXciKV0sMSl9O1VuLl93aXRoU3RyaXBwZWQ9ITA7dmFyIE5uPXtyZW5kZXI6VW4sc3RhdGljUmVuZGVyRm5zOltdfSxSbj1Objt2YXIgVm49dCgiVlUvOCIpKG51bGwsUm4sITEsbnVsbCxudWxsLG51bGwpO1ZuLm9wdGlvbnMuX19maWxlPSJzcmMvdmlld3MvbWFuYWdlTWFudXNjcmlwdC52dWUiO3ZhciBqbj1Wbi5leHBvcnRzLFBuPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kY3JlYXRlRWxlbWVudCxuPXRoaXMuX3NlbGYuX2N8fGU7cmV0dXJuIG4oImRpdiIse3N0YXRpY0NsYXNzOiJtYy1jb250YWluZXIifSxbbigia2VlcC1hbGl2ZSIsW3RoaXMuJHJvdXRlLm1ldGEua2VlcEFsaXZlP24oInJvdXRlci12aWV3Iik6dGhpcy5fZSgpXSwxKSx0aGlzLl92KCIgIiksdGhpcy4kcm91dGUubWV0YS5rZWVwQWxpdmU/dGhpcy5fZSgpOm4oInJvdXRlci12aWV3IildLDEpfTtQbi5fd2l0aFN0cmlwcGVkPSEwO3ZhciBIbj17cmVuZGVyOlBuLHN0YXRpY1JlbmRlckZuczpbXX0sUW49SG47dmFyIFduPXQoIlZVLzgiKShudWxsLFFuLCExLG51bGwsbnVsbCxudWxsKTtXbi5vcHRpb25zLl9fZmlsZT0ic3JjL3ZpZXdzL21hbmFnZVN0YXJ0cGFnZS52dWUiO3ZhciBPbj1Xbi5leHBvcnRzLHFuPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kY3JlYXRlRWxlbWVudCxuPXRoaXMuX3NlbGYuX2N8fGU7cmV0dXJuIG4oImRpdiIsW24oImtlZXAtYWxpdmUiLFt0aGlzLiRyb3V0ZS5tZXRhLmtlZXBBbGl2ZT9uKCJyb3V0ZXItdmlldyIpOnRoaXMuX2UoKV0sMSksdGhpcy5fdigiICIpLHRoaXMuJHJvdXRlLm1ldGEua2VlcEFsaXZlP3RoaXMuX2UoKTpuKCJyb3V0ZXItdmlldyIpXSwxKX07cW4uX3dpdGhTdHJpcHBlZD0hMDt2YXIgWW49e3JlbmRlcjpxbixzdGF0aWNSZW5kZXJGbnM6W119LFpuPVluO3ZhciBHbj10KCJWVS84IikobnVsbCxabiwhMSxudWxsLG51bGwsbnVsbCk7R24ub3B0aW9ucy5fX2ZpbGU9InNyYy92aWV3cy9tYW5hZ2VTdWJMaXZlLnZ1ZSI7dmFyIEpuPUduLmV4cG9ydHMsWG49ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRjcmVhdGVFbGVtZW50LG49dGhpcy5fc2VsZi5fY3x8ZTtyZXR1cm4gbigiZGl2Iixbbigia2VlcC1hbGl2ZSIsW3RoaXMuJHJvdXRlLm1ldGEua2VlcEFsaXZlP24oInJvdXRlci12aWV3Iik6dGhpcy5fZSgpXSwxKSx0aGlzLl92KCIgIiksdGhpcy4kcm91dGUubWV0YS5rZWVwQWxpdmU/dGhpcy5fZSgpOm4oInJvdXRlci12aWV3IildLDEpfTtYbi5fd2l0aFN0cmlwcGVkPSEwO3ZhciBLbj17cmVuZGVyOlhuLHN0YXRpY1JlbmRlckZuczpbXX0sZXQ9S247dmFyIG50PXQoIlZVLzgiKShudWxsLGV0LCExLG51bGwsbnVsbCxudWxsKTtudC5vcHRpb25zLl9fZmlsZT0ic3JjL3ZpZXdzL21hbmFnZUxpdmUudnVlIjt2YXIgdHQ9bnQuZXhwb3J0cyxhdD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuJGNyZWF0ZUVsZW1lbnQ7cmV0dXJuKHRoaXMuX3NlbGYuX2N8fGUpKCJyb3V0ZXItdmlldyIpfTthdC5fd2l0aFN0cmlwcGVkPSEwO3ZhciBpdD17cmVuZGVyOmF0LHN0YXRpY1JlbmRlckZuczpbXX0sbHQ9aXQ7dmFyIG90PXQoIlZVLzgiKShudWxsLGx0LCExLG51bGwsbnVsbCxudWxsKTtvdC5vcHRpb25zLl9fZmlsZT0ic3JjL3ZpZXdzL21hbmFnZUV2ZW50LnZ1ZSI7dmFyIHN0PW90LmV4cG9ydHMscnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRjcmVhdGVFbGVtZW50O3JldHVybih0aGlzLl9zZWxmLl9jfHxlKSgicm91dGVyLXZpZXciKX07cnQuX3dpdGhTdHJpcHBlZD0hMDt2YXIgY3Q9e3JlbmRlcjpydCxzdGF0aWNSZW5kZXJGbnM6W119LG10PWN0O3ZhciBkdD10KCJWVS84IikobnVsbCxtdCwhMSxudWxsLG51bGwsbnVsbCk7ZHQub3B0aW9ucy5fX2ZpbGU9InNyYy92aWV3cy9tYW5hZ2VVc2VyLnZ1ZSI7dmFyIHB0PWR0LmV4cG9ydHMsdXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRjcmVhdGVFbGVtZW50O3JldHVybih0aGlzLl9zZWxmLl9jfHxlKSgicm91dGVyLXZpZXciKX07dXQuX3dpdGhTdHJpcHBlZD0hMDt2YXIgaHQ9e3JlbmRlcjp1dCxzdGF0aWNSZW5kZXJGbnM6W119LGd0PWh0O3ZhciBBdD10KCJWVS84IikobnVsbCxndCwhMSxudWxsLG51bGwsbnVsbCk7QXQub3B0aW9ucy5fX2ZpbGU9InNyYy92aWV3cy9tYW5hZ2VDb21tZW50LnZ1ZSI7dmFyIGZ0PUF0LmV4cG9ydHMsYnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRjcmVhdGVFbGVtZW50O3JldHVybih0aGlzLl9zZWxmLl9jfHxlKSgicm91dGVyLXZpZXciKX07YnQuX3dpdGhTdHJpcHBlZD0hMDt2YXIgdnQ9e3JlbmRlcjpidCxzdGF0aWNSZW5kZXJGbnM6W119LHl0PXZ0O3ZhciBDdD10KCJWVS84IikobnVsbCx5dCwhMSxudWxsLG51bGwsbnVsbCk7Q3Qub3B0aW9ucy5fX2ZpbGU9InNyYy92aWV3cy9tYW5hZ2VTeXN0ZW1Vc2VyLnZ1ZSI7dmFyIF90PUN0LmV4cG9ydHMseHQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRjcmVhdGVFbGVtZW50O3JldHVybih0aGlzLl9zZWxmLl9jfHxlKSgicm91dGVyLXZpZXciKX07eHQuX3dpdGhTdHJpcHBlZD0hMDt2YXIgd3Q9e3JlbmRlcjp4dCxzdGF0aWNSZW5kZXJGbnM6W119LEZ0PXd0O3ZhciBrdD10KCJWVS84IikobnVsbCxGdCwhMSxudWxsLG51bGwsbnVsbCk7a3Qub3B0aW9ucy5fX2ZpbGU9InNyYy92aWV3cy9tYW5hZ2VSb2xlLnZ1ZSI7dmFyIFN0PWt0LmV4cG9ydHMsRXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRjcmVhdGVFbGVtZW50O3JldHVybih0aGlzLl9zZWxmLl9jfHxlKSgicm91dGVyLXZpZXciKX07RXQuX3dpdGhTdHJpcHBlZD0hMDt2YXIgRHQ9e3JlbmRlcjpFdCxzdGF0aWNSZW5kZXJGbnM6W119LEx0PUR0O3ZhciBCdD10KCJWVS84IikobnVsbCxMdCwhMSxudWxsLG51bGwsbnVsbCk7QnQub3B0aW9ucy5fX2ZpbGU9InNyYy92aWV3cy9tYW5hZ2VMb2cudnVlIjt2YXIgTXQ9QnQuZXhwb3J0cyxJdD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuJGNyZWF0ZUVsZW1lbnQ7cmV0dXJuKHRoaXMuX3NlbGYuX2N8fGUpKCJyb3V0ZXItdmlldyIpfTtJdC5fd2l0aFN0cmlwcGVkPSEwO3ZhciBUdD17cmVuZGVyOkl0LHN0YXRpY1JlbmRlckZuczpbXX0sJHQ9VHQ7dmFyIHp0PXQoIlZVLzgiKShudWxsLCR0LCExLG51bGwsbnVsbCxudWxsKTt6dC5vcHRpb25zLl9fZmlsZT0ic3JjL3ZpZXdzL21hbmFnZUJhc2lzLnZ1ZSI7dmFyIFV0PXp0LmV4cG9ydHM7ZnVuY3Rpb24gTnQoZSl7cmV0dXJuIGJlKCJtYW5hZ2VyL0NoYW5uZWwvbGlzdENoYW5uZWxUeXBlIixlKX1mdW5jdGlvbiBSdChlKXtyZXR1cm4gYmUoIm1hbmFnZXIvQ2hhbm5lbC9saXN0VXNhYmxlUGFyZW50Q2hhbm5lbCIsZSl9ZnVuY3Rpb24gVnQoZSl7cmV0dXJuIGJlKCJtYW5hZ2VyL0NoYW5uZWwvbGlzdENoYW5uZWxJY29uIixlKX12YXIganQ9e2NvbXBvbmVudHM6e0NpcmNsZVRpdGxlOmVufSxkYXRhOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPXRoaXMuJGNyZWF0ZUVsZW1lbnQ7cmV0dXJue2NoYW5uZWxGb3JtOntjaGFubmVsX25hbWU6IiIsY2hhbm5lbF90eXBlaWQ6IiIsc3RhdGU6IiIsc29ydDoiMSIsc3RhcnREYXRlOiIiLGVuZERhdGU6IiIscGFyZW50X2NoYW5uZWxpZDoiIn0sY2xpY2tDZWxsSW5kZXg6LTEsdGFibGVIZWFkZXI6W3twcm9wOiJjaGFubmVsX25hbWUiLGxhYmVsOiLpopHpgZPlkI0ifSx7cHJvcDoicGFyZW50X2NoYW5uZWxfbmFtZSIsbGFiZWw6IueItue6p+mikemBkyIsZm9ybWF0dGVyOmZ1bmN0aW9uKGUsbix0LGEpe3JldHVybiB0fHwi5pegIn19LHtwcm9wOiJjaGFubmVsX3R5cGVfbmFtZSIsbGFiZWw6IuWIhuexuyJ9LHtwcm9wOiJ1cGRhdGV0aW1lIixsYWJlbDoi5pu05paw5pel5pyfIixmb3JtYXR0ZXI6ZnVuY3Rpb24obix0LGEsaSl7cmV0dXJuIGUuJG9wdGlvbnMuZmlsdGVycy5Gb3JtYXREYXRlKGEsInl5eXktTU0tZGQgaGg6bW0iKX19LHtwcm9wOiJpY29uX3VybCIsbGFiZWw6IuWbvuagh+m7mOiupCIsZm9ybWF0dGVyOmZ1bmN0aW9uKGUsdCxhLGkpe3JldHVybiBuKCJpbWciLHtjbGFzczoidG9waWMtdGFibGUtcGljIixhdHRyczp7c3JjOmF9fSl9fSx7cHJvcDoiZGVzY3JpcHRpb24iLGxhYmVsOiLpopHpgZPmj4/ov7AiLHdpZHRoOiIxMDAifSx7cHJvcDoic3RhdGUiLGxhYmVsOiLnirbmgIEiLGZvcm1hdHRlcjpmdW5jdGlvbihlLG4sdCxhKXtyZXR1cm4gMT09PXBhcnNlSW50KHQpPyLlkK/nlKgiOiLlgZznlKgifX0se3Byb3A6ImZpeGVkIixsYWJlbDoi5L2N572u5Zu65a6aIixmb3JtYXR0ZXI6ZnVuY3Rpb24oZSxuLHQsYSl7cmV0dXJuIHQ/IuWbuuWumiI6IuS4jeWbuuWumiJ9fSx7cHJvcDoic29ydCIsbGFiZWw6IuS8mOWFiOe6pyIsZm9ybWF0dGVyOmZ1bmN0aW9uKHQsYSxpLGwpe3JldHVybiBsPT09ZS5jbGlja0NlbGxJbmRleD9uKCJpbnB1dCIse2F0dHJzOnt0eXBlOiJ0ZXh0IixpZDoiaW5wdXQiLGF1dG9mb2N1czoiYXV0b2ZvY3VzIn0sY2xhc3M6InNlbGYtc29ydCIsZG9tUHJvcHM6e3ZhbHVlOml9fSk6bigic3BhbiIse2NsYXNzOiJzb3J0LWNvbnRhaW5lciIsYXR0cnM6eyJkYXRhLWlkIjpsfX0sW2ldKX19XSx0YWJsZURhdGE6W10sY2hhbm5lbFR5cGVMaXN0OltdLHNvcnRWYWx1ZTotMSxwYWdlTm86MSxwYWdlU2l6ZToxMCx0b3RhbDowLHBhcmVudENoYW5uZWxMaXN0OltdLHNlbGVjdENoYW5uZWxJZDoiIn19LHdhdGNoOnsiY2hhbm5lbEZvcm0uY2hhbm5lbF9uYW1lIjpmdW5jdGlvbihlKXt0aGlzLnNlYXJjaENoYW5uZWwoKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuZ2V0Q2hhbm5lbExpc3QoKSx0aGlzLmdldENoYW5uZWxUeXBlKCksdGhpcy5nZXRQYXJlbnRDaGFubmVsKCksdGhpcy4kcm9vdC5ldmVudEh1Yi4kb24oInJlc2V0LW9wdGlvbnMiLGZ1bmN0aW9uKCl7ZS5yZXNldE9wdGlvbnMoKX0pfSxhY3RpdmF0ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRyb3V0ZS5tZXRhO2UuaGFzT3duUHJvcGVydHkoInJlZnJlc2giKSYmZS5yZWZyZXNoJiYodGhpcy5nZXRDaGFubmVsTGlzdCgpLGRlbGV0ZSB0aGlzLiRyb3V0ZS5tZXRhLnJlZnJlc2gpfSxiZWZvcmVSb3V0ZUxlYXZlOmZ1bmN0aW9uKGUsbix0KXsiL21hbmFnZUNoYW5uZWwvY3JlYXRlIj09PWUucGF0aCYmdGhpcy5yZXNldE9wdGlvbnMoKSx0KCl9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLiRyb290LmV2ZW50SHViLiRvZmYoInJlc2V0LW9wdGlvbnMiKX0sbWV0aG9kczp7cmVzZXRPcHRpb25zOmZ1bmN0aW9uKCl7dGhpcy5jaGFubmVsRm9ybT17Y2hhbm5lbF9uYW1lOiIiLGNoYW5uZWxfdHlwZWlkOiIiLHN0YXRlOiIiLHNvcnQ6IjEiLHN0YXJ0RGF0ZToiIixlbmREYXRlOiIiLHBhcmVudF9jaGFubmVsaWQ6IiJ9LHRoaXMucGFnZU5vPTEsdGhpcy5jbGlja0NlbGxJbmRleD0tMSx0aGlzLnNvcnRWYWx1ZT0tMSx0aGlzLmdldENoYW5uZWxMaXN0KCl9LGdldENoYW5uZWxMaXN0OmZ1bmN0aW9uKCl7dmFyIGUsbj10aGlzLHQ9bnVsbCE9PXRoaXMuY2hhbm5lbEZvcm0uc3RhcnREYXRlP25ldyBEYXRlKHRoaXMuY2hhbm5lbEZvcm0uc3RhcnREYXRlKS5nZXRUaW1lKCk6bnVsbCxhPW51bGwhPT10aGlzLmNoYW5uZWxGb3JtLmVuZERhdGU/bmV3IERhdGUodGhpcy5jaGFubmVsRm9ybS5lbmREYXRlKS5nZXRUaW1lKCk6bnVsbDsoZT17cGFnZU5vOnRoaXMucGFnZU5vLHBhZ2VTaXplOnRoaXMucGFnZVNpemUsY2hhbm5lbF9uYW1lOnRoaXMuY2hhbm5lbEZvcm0uY2hhbm5lbF9uYW1lLGNoYW5uZWxfdHlwZWlkOnRoaXMuY2hhbm5lbEZvcm0uY2hhbm5lbF90eXBlaWQsc3RhdGU6dGhpcy5jaGFubmVsRm9ybS5zdGF0ZSx0aW1lU3RhcnQ6dCx0aW1lRW5kOmEscGFyZW50X2NoYW5uZWxpZDp0aGlzLmNoYW5uZWxGb3JtLnBhcmVudF9jaGFubmVsaWR9LGJlKCJtYW5hZ2VyL0NoYW5uZWwvcGFnZSIsZSkpLnRoZW4oZnVuY3Rpb24oZSl7aWYoZS5kYXRhLnN0YXR1cyl7dmFyIHQ9ZS5kYXRhLnJlc3VsdDtuLnRhYmxlRGF0YT10Lmxpc3Qsbi50b3RhbD10LnRvdGFsfX0pfSxoYW5kbGVTaXplQ2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMucGFnZVNpemU9ZSx0aGlzLnNlYXJjaENoYW5uZWwoKX0saGFuZGxlQ3VycmVudENoYW5nZTpmdW5jdGlvbihlKXt0aGlzLnBhZ2VObz1lLHRoaXMuZ2V0Q2hhbm5lbExpc3QoKX0sdG9nZ2xlQWxsU2VsZWN0aW9uOmZ1bmN0aW9uKGUpe3RoaXMuJHJlZnMuY2hhbm5lbFRhYmxlLnRvZ2dsZUFsbFNlbGVjdGlvbigpfSxjZWxsQ2xpY2s6ZnVuY3Rpb24oZSxuLHQsYSl7dmFyIGk9dGhpcztpZihhLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoInNvcnQtY29udGFpbmVyIikpaWYoMSE9PWUuc3RhdGUpe3ZhciBsPWEudGFyZ2V0LmRhdGFzZXQuaWQ7bCYmKHRoaXMuY2xpY2tDZWxsSW5kZXg9cGFyc2VJbnQobCkpLHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiLmVsLXRvb2x0aXAgPiBpbnB1dC5zZWxmLXNvcnQiKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe24mJihpLnNlbGVjdENoYW5uZWxJZD1lLmNoYW5uZWxpZCxuLmZvY3VzKCksbi5vbmtleXVwPWZ1bmN0aW9uKGUpe24udmFsdWUmJihpLnNvcnRWYWx1ZT1wYXJzZUludChuLnZhbHVlKSl9KX0pfSl9ZWxzZSB0aGlzLiRtZXNzYWdlKHt0eXBlOiJlcnJvciIsbWVzc2FnZToi5ZCv55So54q25oCB5LiL5LiN6IO95o6S5bqPISJ9KX0sY2VsbE1vdXNlTGVhdmU6ZnVuY3Rpb24oZSxuLHQsYSl7dmFyIGksbD10aGlzO2lmKHRoaXMuY2xpY2tDZWxsSW5kZXg9LTEsLTE9PT10aGlzLnNvcnRWYWx1ZXx8dGhpcy5zZWxlY3RDaGFubmVsSWQhPT1lLmNoYW5uZWxpZClyZXR1cm4hMTsoaT17Y2hhbm5lbDp7Y2hhbm5lbGlkOmUuY2hhbm5lbGlkLHNvcnQ6dGhpcy5zb3J0VmFsdWV9fSxiZSgibWFuYWdlci9DaGFubmVsL3VwZGF0ZVNvcnQiLGkpKS50aGVuKGZ1bmN0aW9uKGUpe2Uuc3RhdHVzJiYobC5nZXRDaGFubmVsTGlzdCgpLGwuc29ydFZhbHVlPS0xKX0pfSxoYW5kbGVFZGl0OmZ1bmN0aW9uKGUpezEhPT1lLnN0YXRlPyhzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCJjaGFubmVsaWQiLGUuY2hhbm5lbGlkKSx0aGlzLiRyb3V0ZXIucHVzaCh7cGF0aDoiL21hbmFnZUNoYW5uZWwvZWRpdCJ9KSk6dGhpcy4kbWVzc2FnZSh7dHlwZToiZXJyb3IiLG1lc3NhZ2U6IuWQr+eUqOeKtuaAgeS4i+S4jeWPr+e8lui+kSEifSl9LGNoYW5nZVN0YXRlOmZ1bmN0aW9uKGUpe3ZhciBuLHQ9dGhpcyxhPTA7MT09PWUuc3RhdGU/YT0wOjA9PT1lLnN0YXRlJiYoYT0xKSwobj17Y2hhbm5lbDp7Y2hhbm5lbGlkOmUuY2hhbm5lbGlkLHN0YXRlOmF9fSxiZSgibWFuYWdlci9DaGFubmVsL3VwZGF0ZVN0YXRlIixuKSkudGhlbihmdW5jdGlvbihlKXtlLnN0YXR1cyYmKDA9PT1hP3QuJG1lc3NhZ2Uoe3R5cGU6InN1Y2Nlc3MiLG1lc3NhZ2U6IuS/ruaUueeKtuaAgeS4uuWBnOeUqCJ9KTp0LiRtZXNzYWdlKHt0eXBlOiJzdWNjZXNzIixtZXNzYWdlOiLkv67mlLnnirbmgIHkuLrlkK/nlKgifSksdC5nZXRDaGFubmVsTGlzdCgpKX0pfSxoYW5kbGVEZWxldGU6ZnVuY3Rpb24oZSl7dmFyIG49dGhpczsxIT09ZS5zdGF0ZT90aGlzLiRjb25maXJtKCfmmK/lkKbliKDpmaQiJytlLmNoYW5uZWxfbmFtZSsnIj8nLCLmj5DnpLoiLHtjb25maXJtQnV0dG9uVGV4dDoi56Gu5a6aIixjYW5jZWxCdXR0b25UZXh0OiLlj5bmtogiLHR5cGU6Indhcm5pbmcifSkudGhlbihmdW5jdGlvbigpe3ZhciB0Oyh0PXtjaGFubmVsOntjaGFubmVsaWQ6ZS5jaGFubmVsaWR9fSxiZSgibWFuYWdlci9DaGFubmVsL2RlbGV0ZSIsdCkpLnRoZW4oZnVuY3Rpb24oZSl7ZS5kYXRhLnN0YXR1cyYmbi4kbWVzc2FnZSh7dHlwZToic3VjY2VzcyIsbWVzc2FnZToi5Yig6Zmk5oiQ5YqfISJ9KSxuLmdldENoYW5uZWxMaXN0KCl9KX0pLmNhdGNoKGZ1bmN0aW9uKCl7fSk6dGhpcy4kbWVzc2FnZSh7dHlwZToiZXJyb3IiLG1lc3NhZ2U6IuWQr+eUqOeKtuaAgeS4i+S4jeWPr+WIoOmZpCEifSl9LGdldENoYW5uZWxUeXBlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztOdCgpLnRoZW4oZnVuY3Rpb24obil7dmFyIHQ9bi5kYXRhO3Quc3RhdHVzJiZ0LnJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uKG4sdCxhKXt2YXIgaT17fTtpLmxhYmVsPW4uY2hhbm5lbF90eXBlX25hbWUsaS52YWx1ZT1uLmNoYW5uZWxfdHlwZWlkLGUuY2hhbm5lbFR5cGVMaXN0LnB1c2goaSl9KX0pfSxzZWFyY2hDaGFubmVsOmZ1bmN0aW9uKCl7dGhpcy5wYWdlTm89MSx0aGlzLiRvcHRpb25zLmZpbHRlcnMuc3dhcFRpbWUodGhpcy5jaGFubmVsRm9ybSksdGhpcy5nZXRDaGFubmVsTGlzdCgpfSxnZXRQYXJlbnRDaGFubmVsOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztSdCgpLnRoZW4oZnVuY3Rpb24obil7dmFyIHQ9bi5kYXRhO3Quc3RhdHVzJiZ0LnJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uKG4sdCxhKXt2YXIgaT17fTtpLmxhYmVsPW4uY2hhbm5lbF9uYW1lLGkudmFsdWU9bi5jaGFubmVsaWQsZS5wYXJlbnRDaGFubmVsTGlzdC5wdXNoKGkpfSl9KX19fSxQdD1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1lLiRjcmVhdGVFbGVtZW50LHQ9ZS5fc2VsZi5fY3x8bjtyZXR1cm4gdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImNoYW5uZWwifSxbdCgiZGl2IixbdCgiY2lyY2xlLXRpdGxlIix7c3RhdGljQ2xhc3M6ImNpY2xlLWNvbnRyb2xsZXIiLGF0dHJzOnsidGl0bGUtbmFtZSI6IumikemBk+WIl+ihqCJ9fSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJzZWFyY2gtZm9ybS1jb250YWluZXIifSxbdCgiZWwtZm9ybSIse3N0YXRpY0NsYXNzOiJkZW1vLWZvcm0taW5saW5lIixhdHRyczp7aW5saW5lOiEwLG1vZGVsOmUuY2hhbm5lbEZvcm19fSxbdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLpopHpgZMifX0sW3QoImVsLWlucHV0Iix7YXR0cnM6e2NsZWFyYWJsZToiIn0sbW9kZWw6e3ZhbHVlOmUuY2hhbm5lbEZvcm0uY2hhbm5lbF9uYW1lLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNoYW5uZWxGb3JtLCJjaGFubmVsX25hbWUiLG4pfSxleHByZXNzaW9uOiJjaGFubmVsRm9ybS5jaGFubmVsX25hbWUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLniLbnuqfpopHpgZMiLHByb3A6InBhcmVudF9jaGFubmVsX25hbWUifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntmaWx0ZXJhYmxlOiIiLGNsZWFyYWJsZToiIixwbGFjZWhvbGRlcjoiIn0sb246e2NsZWFyOmUuc2VhcmNoQ2hhbm5lbCxjaGFuZ2U6ZS5zZWFyY2hDaGFubmVsfSxtb2RlbDp7dmFsdWU6ZS5jaGFubmVsRm9ybS5wYXJlbnRfY2hhbm5lbGlkLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNoYW5uZWxGb3JtLCJwYXJlbnRfY2hhbm5lbGlkIixuKX0sZXhwcmVzc2lvbjoiY2hhbm5lbEZvcm0ucGFyZW50X2NoYW5uZWxpZCJ9fSxlLl9sKGUucGFyZW50Q2hhbm5lbExpc3QsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtb3B0aW9uIix7a2V5Om4sYXR0cnM6e3ZhbHVlOmUudmFsdWUsbGFiZWw6ZS5sYWJlbH19KX0pLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6InNlYXJjaC1sZWZ0IixhdHRyczp7bGFiZWw6IuWIhuexuyJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e2NsZWFyYWJsZToiIixwbGFjZWhvbGRlcjoiIn0sb246e2NsZWFyOmUuc2VhcmNoQ2hhbm5lbCxjaGFuZ2U6ZS5zZWFyY2hDaGFubmVsfSxtb2RlbDp7dmFsdWU6ZS5jaGFubmVsRm9ybS5jaGFubmVsX3R5cGVpZCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jaGFubmVsRm9ybSwiY2hhbm5lbF90eXBlaWQiLG4pfSxleHByZXNzaW9uOiJjaGFubmVsRm9ybS5jaGFubmVsX3R5cGVpZCJ9fSxlLl9sKGUuY2hhbm5lbFR5cGVMaXN0LGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQoImVsLW9wdGlvbiIse2tleTpuLGF0dHJzOnt2YWx1ZTplLnZhbHVlLGxhYmVsOmUubGFiZWx9fSl9KSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJzZWFyY2gtbGVmdCIsYXR0cnM6e2xhYmVsOiLnirbmgIEifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntwbGFjZWhvbGRlcjoiIn0sb246e2NoYW5nZTplLnNlYXJjaENoYW5uZWx9LG1vZGVsOnt2YWx1ZTplLmNoYW5uZWxGb3JtLnN0YXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNoYW5uZWxGb3JtLCJzdGF0ZSIsbil9LGV4cHJlc3Npb246ImNoYW5uZWxGb3JtLnN0YXRlIn19LFt0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6IiIsbGFiZWw6IuWFqOmDqCJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZToxLGxhYmVsOiLlkK/nlKgifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MCxsYWJlbDoi5YGc55SoIn19KV0sMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoiZGF0ZS1sZWZ0IixhdHRyczp7bGFiZWw6IuW8gOWni+aXtumXtCJ9fSxbdCgiZWwtZGF0ZS1waWNrZXIiLHthdHRyczp7dGl0bGU6ZS5fZigiRm9ybWF0RGF0ZSIpKGUuY2hhbm5lbEZvcm0uc3RhcnREYXRlLCJ5eXl5LU1NLWRkIGhoOm1tIiksdHlwZToiZGF0ZXRpbWUiLGZvcm1hdDoieXl5eS1NTS1kZCBISDptbSIscGxhY2Vob2xkZXI6IumAieaLqeaXpeacnyJ9LG9uOntjaGFuZ2U6ZS5zZWFyY2hDaGFubmVsfSxtb2RlbDp7dmFsdWU6ZS5jaGFubmVsRm9ybS5zdGFydERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuY2hhbm5lbEZvcm0sInN0YXJ0RGF0ZSIsbil9LGV4cHJlc3Npb246ImNoYW5uZWxGb3JtLnN0YXJ0RGF0ZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoiZGF0ZS1sZWZ0IixzdGF0aWNTdHlsZTp7bGVmdDoiMCJ9LGF0dHJzOntsYWJlbDoi57uT5p2f5pe26Ze0In19LFt0KCJlbC1kYXRlLXBpY2tlciIse2F0dHJzOnt0aXRsZTplLl9mKCJGb3JtYXREYXRlIikoZS5jaGFubmVsRm9ybS5lbmREYXRlLCJ5eXl5LU1NLWRkIGhoOm1tIiksZm9ybWF0OiJ5eXl5LU1NLWRkIEhIOm1tIix0eXBlOiJkYXRldGltZSIscGxhY2Vob2xkZXI6IumAieaLqeaXpeacnyJ9LG9uOntjaGFuZ2U6ZS5zZWFyY2hDaGFubmVsfSxtb2RlbDp7dmFsdWU6ZS5jaGFubmVsRm9ybS5lbmREYXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNoYW5uZWxGb3JtLCJlbmREYXRlIixuKX0sZXhwcmVzc2lvbjoiY2hhbm5lbEZvcm0uZW5kRGF0ZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1idXR0b24iLHtzdGF0aWNTdHlsZTp7Im1hcmdpbi1sZWZ0IjoiNDBweCJ9LGF0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmUuc2VhcmNoQ2hhbm5lbH19LFtlLl92KCJcbiAgICAgICAgICDmn6Xor6JcbiAgICAgICAgICAiKSx0KCJpIix7c3RhdGljQ2xhc3M6ImVsLWljb24tc2VhcmNoIGVsLWljb24tLXJpZ2h0In0pXSksZS5fdigiICIpLHQoInJvdXRlci1saW5rIix7YXR0cnM6e3RvOiIvbWFuYWdlQ2hhbm5lbC9jcmVhdGUifX0sW3QoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5In19LFtlLl92KCJcbiAgICAgICAgICAgIOa3u+WKoOmikemBk1xuICAgICAgICAgICAgIiksdCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXBsdXMgZWwtaWNvbi0tcmlnaHQifSldKV0sMSldLDEpXSwxKV0sMSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJ0YWJsZS1saXN0In0sW3QoImVsLXRhYmxlIix7cmVmOiJjaGFubmVsVGFibGUiLHN0YXRpY0NsYXNzOiJ3aG9sZS10YWJsZSIsYXR0cnM6e2RhdGE6ZS50YWJsZURhdGEsc3RyaXBlOiIiLCJtaW4taGVpZ2h0IjoiNDAwIn0sb246eyJjZWxsLWNsaWNrIjplLmNlbGxDbGljaywiY2VsbC1tb3VzZS1sZWF2ZSI6ZS5jZWxsTW91c2VMZWF2ZX19LFtlLl9sKGUudGFibGVIZWFkZXIsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtdGFibGUtY29sdW1uIix7a2V5Om4sYXR0cnM6e3Byb3A6ZS5wcm9wLGxhYmVsOmUubGFiZWwsd2lkdGg6ZS53aWR0aCxmb3JtYXR0ZXI6ZS5mb3JtYXR0ZXIsYWxpZ246ImNlbnRlciIsZml4ZWQ6IiIsInNob3ctb3ZlcmZsb3ctdG9vbHRpcCI6IiJ9fSl9KSxlLl92KCIgIiksdCgiZWwtdGFibGUtY29sdW1uIix7YXR0cnM6e2ZpeGVkOiJyaWdodCIsbGFiZWw6IuaTjeS9nCIsYWxpZ246ImNlbnRlciIsd2lkdGg6IjEwMCJ9LHNjb3BlZFNsb3RzOmUuX3UoW3trZXk6ImRlZmF1bHQiLGZuOmZ1bmN0aW9uKG4pe3JldHVyblt0KCJlbC10b29sdGlwIix7c3RhdGljQ2xhc3M6Iml0ZW0iLGF0dHJzOntlZmZlY3Q6ImRhcmsiLGNvbnRlbnQ6IuS/ruaUueeKtuaAgSIscGxhY2VtZW50OiJ0b3AifX0sW3QoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJ0ZXh0IixzaXplOiJzbWFsbCIsaWNvbjoiZWwtaWNvbi1yZW1vdmUtb3V0bGluZSJ9LG9uOntjbGljazpmdW5jdGlvbih0KXtlLmNoYW5nZVN0YXRlKG4ucm93KX19fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToidGV4dCIsc2l6ZToic21hbGwiLGljb246ImVsLWljb24tZWRpdCJ9LG9uOntjbGljazpmdW5jdGlvbih0KXtlLmhhbmRsZUVkaXQobi5yb3cpfX19KSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InRleHQiLHNpemU6InNtYWxsIixpY29uOiJlbC1pY29uLWRlbGV0ZSJ9LG9uOntjbGljazpmdW5jdGlvbih0KXtlLmhhbmRsZURlbGV0ZShuLnJvdyl9fX0pXX19XSl9KV0sMiksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJwYWdpbmF0aW9uIn0sW3QoImVsLXBhZ2luYXRpb24iLHthdHRyczp7dG90YWw6ZS50b3RhbCwicGFnZS1zaXplcyI6WzEwLDIwLDMwLDQwXSwiY3VycmVudC1wYWdlIjplLnBhZ2VObyxiYWNrZ3JvdW5kOiIiLGxheW91dDoidG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dCJ9LG9uOnsic2l6ZS1jaGFuZ2UiOmUuaGFuZGxlU2l6ZUNoYW5nZSwiY3VycmVudC1jaGFuZ2UiOmUuaGFuZGxlQ3VycmVudENoYW5nZX19KV0sMSldLDEpXSl9O1B0Ll93aXRoU3RyaXBwZWQ9ITA7dmFyIEh0PXtyZW5kZXI6UHQsc3RhdGljUmVuZGVyRm5zOltdfSxRdD1IdDt2YXIgV3Q9ITE7dmFyIE90PXQoIlZVLzgiKShqdCxRdCwhMSxmdW5jdGlvbihlKXtXdHx8dCgiUjJHbyIpfSxudWxsLG51bGwpO090Lm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9tYW5hZ2VDaGFubmVsL2NoYW5uZWxMaXN0LnZ1ZSI7dmFyIHF0PU90LmV4cG9ydHMsWXQ9e2NvbXBvbmVudHM6e0NpcmNsZVRpdGxlOmVufSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2ljb25MaXN0OltdLGljb25DaGVja0xpc3Q6W10saW5kZXg6MH19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLmdldEljb25MaXN0KCl9LG1ldGhvZHM6e2dldEljb25MaXN0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztWdCgpLnRoZW4oZnVuY3Rpb24obil7aWYobi5kYXRhLnN0YXR1cyl7ZS5pY29uQ2hlY2tMaXN0PVtdLGUuaWNvbkxpc3Q9bi5kYXRhLnJlc3VsdDtmb3IodmFyIHQ9MDt0PGUuaWNvbkxpc3QubGVuZ3RoO3QrKyllLmljb25DaGVja0xpc3QucHVzaCghMSl9fSl9LGljb25TZWxlY3RlZDpmdW5jdGlvbihlLG4pe3RoaXMuaW5kZXg9ZTtmb3IodmFyIHQ9MDt0PHRoaXMuaWNvbkxpc3QubGVuZ3RoO3QrKyl0aGlzLiRzZXQodGhpcy5pY29uQ2hlY2tMaXN0LHQsITEpO3RoaXMuJHNldCh0aGlzLmljb25DaGVja0xpc3QsZSwhMCl9LHN1Ym1pdEljb246ZnVuY3Rpb24oKXt0aGlzLiRlbWl0KCJzdWJtaXQtaWNvbiIsdGhpcy5pY29uTGlzdFt0aGlzLmluZGV4XSl9fX0sWnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJpY29uLWNvbnRhaW5lciJ9LFt0KCJkaXYiLHtzdGF0aWNDbGFzczoiY2hhbm5lbC1pY29uIn0sZS5fbChlLmljb25MaXN0LGZ1bmN0aW9uKG4sYSl7cmV0dXJuIHQoInNwYW4iLHtrZXk6YSxjbGFzczplLmljb25DaGVja0xpc3RbYV0/ImNsaWNrLWJvcmRlciI6Im1vcmVuLWJvcmRlciIsb246e2NsaWNrOmZ1bmN0aW9uKG4pe2UuaWNvblNlbGVjdGVkKGEsZS5pY29uQ2hlY2tMaXN0W2FdKX19fSxbdCgiaW1nIix7YXR0cnM6e3NyYzpufX0pXSl9KSwwKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6Imljb24tc3VibWl0In0sW3QoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmUuc3VibWl0SWNvbn19LFtlLl92KCLnoa7lrpoiKV0pXSwxKV0pfTtadC5fd2l0aFN0cmlwcGVkPSEwO3ZhciBHdD17cmVuZGVyOlp0LHN0YXRpY1JlbmRlckZuczpbXX0sSnQ9R3Q7dmFyIFh0PSExO3ZhciBLdD10KCJWVS84IikoWXQsSnQsITEsZnVuY3Rpb24oZSl7WHR8fHQoIk5CVW4iKX0sImRhdGEtdi0wNTI5MDU5MSIsbnVsbCk7S3Qub3B0aW9ucy5fX2ZpbGU9InNyYy9jb21wb25lbnRzL21hbmFnZUNoYW5uZWwvY2hvb3NlSWNvbi52dWUiO3ZhciBlYT1LdC5leHBvcnRzLG5hPXtjb21wb25lbnRzOntDaXJjbGVUaXRsZTplbixDaG9vc2VJY29uOmVhfSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2NyZWF0ZUZyb206e2NoYW5uZWxfbmFtZToiIixwYXJlbnRfY2hhbm5lbF9uYW1lOiIiLHNvcnQ6IiIsaWNvbl91cmw6Ii9zdGF0aWMvaW1nL21vcmVuLmpwZyIsY2hhbm5lbF90eXBlX25hbWU6IiIsc3RhdGU6MCxkZXNjcmlwdGlvbjoiIixmaXhlZDohMSxwYXJlbnRfY2hhbm5lbGlkOiIiLGNoYW5uZWxfdHlwZWlkOiIifSxydWxlczp7Y2hhbm5lbF9uYW1lOlt7cmVxdWlyZWQ6ITAsbWVzc2FnZToi6K+36L6T5YWl6aKR6YGT5ZCN56ewIix0cmlnZ2VyOiJibHVyIn0se3ZhbGlkYXRvcjpmdW5jdGlvbihlLG4sdCl7cmV0dXJuIG4ubGVuZ3RoPjEwP3QobmV3IEVycm9yKCLpopHpgZPlkI3np7Dplb/luqbkuI3og73otoXov4cxMCIpKTp0KCl9LHRyaWdnZXI6ImNoYW5nZSJ9XSxzb3J0Olt7cmVxdWlyZWQ6ITAsbWVzc2FnZToi6K+36L6T5YWl5o6S5bqPIix0cmlnZ2VyOiJibHVyIn0se3R5cGU6Im51bWJlciIsbWVzc2FnZToi5o6S5bqP5b+F6aG75Li65pWw5a2XIn1dfSxjaGFubmVsVHlwZUxpc3Q6W10scGFyZW50Q2hhbm5lbExpc3Q6W3tsYWJlbDoi5pegIix2YWx1ZToiIn1dLGRpYWxvZ1Zpc2libGU6ITEsY29tcG9uZW50TmFtZToiIixmaXhlZERpc2FibGVkOiExfX0sY29tcHV0ZWQ6e2dldFVwbG9hZFVybDpmdW5jdGlvbigpe3JldHVybiBfZSgpfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuZ2V0Q2hhbm5lbFR5cGUoKSx0aGlzLmdldFBhcmVudENoYW5uZWwoKX0sbWV0aG9kczp7c3VibWl0Rm9ybTpmdW5jdGlvbihlKXt2YXIgbj10aGlzO3RoaXMuJHJlZnNbZV0udmFsaWRhdGUoZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuIGNvbnNvbGUubG9nKCJlcnJvciBzdWJtaXQhISIpLCExO3ZhciB0O24uY2hhbm5lbFR5cGVMaXN0LmZvckVhY2goZnVuY3Rpb24oZSx0LGEpe2UudmFsdWU9PT1uLmNyZWF0ZUZyb20uY2hhbm5lbF90eXBlaWQmJihuLmNyZWF0ZUZyb20uY2hhbm5lbF90eXBlX25hbWU9ZS5sYWJlbCl9KSxuLnBhcmVudENoYW5uZWxMaXN0LmZvckVhY2goZnVuY3Rpb24oZSx0LGEpe2UudmFsdWU9PT1uLmNyZWF0ZUZyb20ucGFyZW50X2NoYW5uZWxpZCYmKG4uY3JlYXRlRnJvbS5wYXJlbnRfY2hhbm5lbF9uYW1lPWUubGFiZWwpfSksKHQ9e2NoYW5uZWw6e3BhcmVudF9jaGFubmVsaWQ6bi5jcmVhdGVGcm9tLnBhcmVudF9jaGFubmVsaWQscGFyZW50X2NoYW5uZWxfbmFtZTpuLmNyZWF0ZUZyb20ucGFyZW50X2NoYW5uZWxfbmFtZSxjaGFubmVsX25hbWU6bi5jcmVhdGVGcm9tLmNoYW5uZWxfbmFtZSxjaGFubmVsX3R5cGVpZDpuLmNyZWF0ZUZyb20uY2hhbm5lbF90eXBlaWQsY2hhbm5lbF90eXBlX25hbWU6bi5jcmVhdGVGcm9tLmNoYW5uZWxfdHlwZV9uYW1lLGljb25fdXJsOm4uY3JlYXRlRnJvbS5pY29uX3VybCxzdGF0ZTpuLmNyZWF0ZUZyb20uc3RhdGUsZGVzY3JpcHRpb246bi5jcmVhdGVGcm9tLmRlc2NyaXB0aW9uLGZpeGVkOm4uY3JlYXRlRnJvbS5maXhlZCxzb3J0Om4uY3JlYXRlRnJvbS5zb3J0fX0sYmUoIm1hbmFnZXIvQ2hhbm5lbC9hZGQiLHQpKS50aGVuKGZ1bmN0aW9uKGUpezIwMD09PWUuc3RhdHVzJiYobi4kcm91dGVyLnB1c2goe3BhdGg6Ii9tYW5hZ2VDaGFubmVsL2xpc3QifSksbi4kbm90aWZ5KHt0aXRsZToi6YCa55+lIixtZXNzYWdlOiLmt7vliqDmiJDlip8iLHR5cGU6InN1Y2Nlc3MifSkpfSl9KX0saGFuZGxlUGNBdmF0YXJTdWNjZXNzOmZ1bmN0aW9uKGUsbil7aWYoZS5zdGF0dXMpe3ZhciB0PWUucmVzdWx0O3RoaXMuY3JlYXRlRnJvbS5pY29uX3VybD10fX0sYmVmb3JlQXZhdGFyVXBsb2FkOmZ1bmN0aW9uKGUpe3ZhciBuPWUudHlwZSBpbnsiaW1hZ2UvanBlZyI6ITAsImltYWdlL3BuZyI6ITAsImltYWdlL2pwZyI6ITB9LHQ9ZS5zaXplLzEwMjQvMTAyNDwyO3JldHVybiBufHx0aGlzLiRtZXNzYWdlLmVycm9yKCLor7fkuIrkvKDlm77niYfmoLzlvI/nmoTmlofku7YhIiksdHx8dGhpcy4kbWVzc2FnZS5lcnJvcigi5LiK5Lyg5Zu+54mH5aSn5bCP5LiN6IO96LaF6L+HIDJNQiEiKSxuJiZ0fSxnZXRDaGFubmVsVHlwZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7TnQoKS50aGVuKGZ1bmN0aW9uKG4pe3ZhciB0PW4uZGF0YTt0LnN0YXR1cyYmdC5yZXN1bHQuZm9yRWFjaChmdW5jdGlvbihuLHQsYSl7MD09PXQmJihlLmNyZWF0ZUZyb20uY2hhbm5lbF90eXBlaWQ9bi5jaGFubmVsX3R5cGVpZCk7dmFyIGk9e307aS5sYWJlbD1uLmNoYW5uZWxfdHlwZV9uYW1lLGkudmFsdWU9bi5jaGFubmVsX3R5cGVpZCxlLmNoYW5uZWxUeXBlTGlzdC5wdXNoKGkpfSl9KX0sZ2V0UGFyZW50Q2hhbm5lbDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7UnQoKS50aGVuKGZ1bmN0aW9uKG4pe3ZhciB0PW4uZGF0YTtpZih0LnN0YXR1cyl7dmFyIGE9dC5yZXN1bHQ7Y29uc29sZS5sb2coYSksYS5mb3JFYWNoKGZ1bmN0aW9uKG4sdCxhKXtpZihlLmNoYW5uZWxpZCE9PW4uY2hhbm5lbGlkKXt2YXIgaT17fTtpLmxhYmVsPW4uY2hhbm5lbF9uYW1lLGkudmFsdWU9bi5jaGFubmVsaWQsZS5wYXJlbnRDaGFubmVsTGlzdC5wdXNoKGkpfX0pfX0pfSxjaG9vc2VJY29uOmZ1bmN0aW9uKCl7dGhpcy5kaWFsb2dWaXNpYmxlPSEwLHRoaXMuY29tcG9uZW50TmFtZT0iQ2hvb3NlSWNvbiJ9LGNsb3NlRGlhbG9nOmZ1bmN0aW9uKCl7dGhpcy5kaWFsb2dWaXNpYmxlPSExLHRoaXMuY29tcG9uZW50TmFtZT0iIn0sc3VibWl0SWNvbjpmdW5jdGlvbihlKXt0aGlzLmNyZWF0ZUZyb20uaWNvbl91cmw9ZSx0aGlzLmRpYWxvZ1Zpc2libGU9ITEsdGhpcy5jb21wb25lbnROYW1lPSIifSxkaXNhYmxlSXNGaXhlZDpmdW5jdGlvbigpe3RoaXMuY3JlYXRlRnJvbS5wYXJlbnRfY2hhbm5lbGlkPyh0aGlzLmNyZWF0ZUZyb20uZml4ZWQ9ITEsdGhpcy5maXhlZERpc2FibGVkPSEwKTp0aGlzLmZpeGVkRGlzYWJsZWQ9ITF9fX0sdGE9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJjaGFubmVsIGNyZWF0ZSJ9LFt0KCJjaXJjbGUtdGl0bGUiLHtzdGF0aWNDbGFzczoiY2ljbGUtY29udHJvbGxlciIsYXR0cnM6eyJ0aXRsZS1uYW1lIjoi6aKR6YGT5paw5aKeIn19KSxlLl92KCIgIiksdCgiZWwtZm9ybSIse3JlZjoiY3JlYXRlRnJvbSIsc3RhdGljQ2xhc3M6InJ1bGUtZm9ybSIsYXR0cnM6e21vZGVsOmUuY3JlYXRlRnJvbSxydWxlczplLnJ1bGVzLCJsYWJlbC13aWR0aCI6IjEwMHB4In19LFt0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IumikemBk+WQjeensCIscHJvcDoiY2hhbm5lbF9uYW1lIn19LFt0KCJlbC1pbnB1dCIse21vZGVsOnt2YWx1ZTplLmNyZWF0ZUZyb20uY2hhbm5lbF9uYW1lLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZyb20sImNoYW5uZWxfbmFtZSIsInN0cmluZyI9PXR5cGVvZiBuP24udHJpbSgpOm4pfSxleHByZXNzaW9uOiJjcmVhdGVGcm9tLmNoYW5uZWxfbmFtZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IueItue6p+mikemBkyIscHJvcDoicGFyZW50X2NoYW5uZWxfbmFtZSJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e2ZpbHRlcmFibGU6IiIscGxhY2Vob2xkZXI6IiJ9LG9uOntjaGFuZ2U6ZS5kaXNhYmxlSXNGaXhlZH0sbW9kZWw6e3ZhbHVlOmUuY3JlYXRlRnJvbS5wYXJlbnRfY2hhbm5lbGlkLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZyb20sInBhcmVudF9jaGFubmVsaWQiLG4pfSxleHByZXNzaW9uOiJjcmVhdGVGcm9tLnBhcmVudF9jaGFubmVsaWQifX0sZS5fbChlLnBhcmVudENoYW5uZWxMaXN0LGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQoImVsLW9wdGlvbiIse2tleTpuLGF0dHJzOnt2YWx1ZTplLnZhbHVlLGxhYmVsOmUubGFiZWx9fSl9KSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5b2S5bGe57G75YirIixwcm9wOiJjaGFubmVsX3R5cGVfbmFtZSJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e2ZpbHRlcmFibGU6IiIscGxhY2Vob2xkZXI6IiJ9LG1vZGVsOnt2YWx1ZTplLmNyZWF0ZUZyb20uY2hhbm5lbF90eXBlaWQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuY3JlYXRlRnJvbSwiY2hhbm5lbF90eXBlaWQiLG4pfSxleHByZXNzaW9uOiJjcmVhdGVGcm9tLmNoYW5uZWxfdHlwZWlkIn19LGUuX2woZS5jaGFubmVsVHlwZUxpc3QsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtb3B0aW9uIix7a2V5Om4sYXR0cnM6e3ZhbHVlOmUudmFsdWUsbGFiZWw6ZS5sYWJlbH19KX0pLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6Iml0ZW0iLGF0dHJzOntsYWJlbDoi5Zu+5qCH6YWN572uIn19LFt0KCJkaXYiLHtzdGF0aWNDbGFzczoiaWNvbi1jaG9vc2UtY29udGFpbmVyIn0sW3QoImRpdiIse3N0YXRpY0NsYXNzOiJtb3Jlbi1pY29uIn0sW3QoImltZyIse2F0dHJzOntzcmM6ZS5jcmVhdGVGcm9tLmljb25fdXJsfX0pXSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmUuY2hvb3NlSWNvbn19LFtlLl92KCLpgInmi6nlm77moIciKV0pXSwxKV0pLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IueKtuaAgemAieaLqSIscHJvcDoic3RhdGUifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntwbGFjZWhvbGRlcjoi6K+36YCJ5oupIn0sbW9kZWw6e3ZhbHVlOmUuY3JlYXRlRnJvbS5zdGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jcmVhdGVGcm9tLCJzdGF0ZSIsbil9LGV4cHJlc3Npb246ImNyZWF0ZUZyb20uc3RhdGUifX0sW3QoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZTowLGxhYmVsOiLlgZznlKgifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MSxsYWJlbDoi5ZCv55SoIn19KV0sMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IumikemBk+eugOi/sCJ9fSxbdCgiZWwtaW5wdXQiLHthdHRyczp7dHlwZToidGV4dGFyZWEifSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGcm9tLmRlc2NyaXB0aW9uLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZyb20sImRlc2NyaXB0aW9uIixuKX0sZXhwcmVzc2lvbjoiY3JlYXRlRnJvbS5kZXNjcmlwdGlvbiJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuaYr+WQpuWbuuWumiIscHJvcDoiZml4ZWQifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntkaXNhYmxlZDplLmZpeGVkRGlzYWJsZWQscGxhY2Vob2xkZXI6Iuivt+mAieaLqSJ9LG1vZGVsOnt2YWx1ZTplLmNyZWF0ZUZyb20uZml4ZWQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuY3JlYXRlRnJvbSwiZml4ZWQiLG4pfSxleHByZXNzaW9uOiJjcmVhdGVGcm9tLmZpeGVkIn19LFt0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6ITAsbGFiZWw6IuaYryJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZTohMSxsYWJlbDoi5ZCmIn19KV0sMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoic29ydCIsYXR0cnM6e2xhYmVsOiLmjpLluo8iLHByb3A6InNvcnQifX0sW3QoImVsLWlucHV0Iix7c3RhdGljU3R5bGU6e3dpZHRoOiI3NSUifSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGcm9tLnNvcnQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuY3JlYXRlRnJvbSwic29ydCIsZS5fbihuKSl9LGV4cHJlc3Npb246ImNyZWF0ZUZyb20uc29ydCJ9fSksZS5fdigiICIpLHQoInNwYW4iLFtlLl92KCLmj5DnpLrvvJrmlbDlrZfotorlsI/otorlvoDliY0iKV0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIixbdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InByaW1hcnkifSxvbjp7Y2xpY2s6ZnVuY3Rpb24obil7ZS5zdWJtaXRGb3JtKCJjcmVhdGVGcm9tIil9fX0sW2UuX3YoIuaPkOS6pCIpXSksZS5fdigiICIpLHQoInJvdXRlci1saW5rIix7YXR0cnM6e3RvOiIvbWFuYWdlQ2hhbm5lbC9saXN0In19LFt0KCJlbC1idXR0b24iLFtlLl92KCLlj5bmtogiKV0pXSwxKV0sMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1kaWFsb2ciLHthdHRyczp7dmlzaWJsZTplLmRpYWxvZ1Zpc2libGUsdGl0bGU6IuWbvuagh+mAieaLqSIsd2lkdGg6IjQwJSJ9LG9uOnsidXBkYXRlOnZpc2libGUiOmZ1bmN0aW9uKG4pe2UuZGlhbG9nVmlzaWJsZT1ufSxjbG9zZTplLmNsb3NlRGlhbG9nfX0sW3QoZS5jb21wb25lbnROYW1lLHt0YWc6ImRpdiIsb246eyJzdWJtaXQtaWNvbiI6ZS5zdWJtaXRJY29ufX0pXSwxKV0sMSl9O3RhLl93aXRoU3RyaXBwZWQ9ITA7dmFyIGFhPXtyZW5kZXI6dGEsc3RhdGljUmVuZGVyRm5zOltdfSxpYT1hYTt2YXIgbGE9ITE7dmFyIG9hPXQoIlZVLzgiKShuYSxpYSwhMSxmdW5jdGlvbihlKXtsYXx8dCgiYUMrVCIpfSwiZGF0YS12LTc5YzY3ZThlIixudWxsKTtvYS5vcHRpb25zLl9fZmlsZT0ic3JjL2NvbXBvbmVudHMvbWFuYWdlQ2hhbm5lbC9jaGFubmVsQ3JlYXRlLnZ1ZSI7dmFyIHNhPW9hLmV4cG9ydHMscmE9e2NvbXBvbmVudHM6e0NpcmNsZVRpdGxlOmVuLENob29zZUljb246ZWF9LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57ZWRpdEZyb206e2NoYW5uZWxfbmFtZToiIixwYXJlbnRfY2hhbm5lbF9uYW1lOiIiLHBhcmVudF9jaGFubmVsaWQ6IiIsc29ydDowLGljb25fdXJsOiIvc3RhdGljL2ltZy9tb3Jlbi5qcGciLGNoYW5uZWxfdHlwZV9uYW1lOiIiLHN0YXRlOiIiLGRlc2NyaXB0aW9uOiIiLGZpeGVkOiIiLGNoYW5uZWxfdHlwZWlkOiIifSxydWxlczp7Y2hhbm5lbF9uYW1lOlt7cmVxdWlyZWQ6ITAsbWVzc2FnZToi6K+36L6T5YWl6aKR6YGT5ZCN56ewIix0cmlnZ2VyOiJibHVyIn0se3ZhbGlkYXRvcjpmdW5jdGlvbihlLG4sdCl7cmV0dXJuIG4ubGVuZ3RoPjEwP3QobmV3IEVycm9yKCLpopHpgZPlkI3np7Dplb/luqbkuI3og73otoXov4cxMCIpKTp0KCl9LHRyaWdnZXI6ImNoYW5nZSJ9XSxzb3J0Olt7cmVxdWlyZWQ6ITAsbWVzc2FnZToi6K+36L6T5YWl5o6S5bqPIix0cmlnZ2VyOiJibHVyIn0se3R5cGU6Im51bWJlciIsbWVzc2FnZToi5o6S5bqP5b+F6aG75Li65pWw5a2XIn1dfSxjaGFubmVsVHlwZUxpc3Q6W10scGFyZW50Q2hhbm5lbExpc3Q6W3tsYWJlbDoi5pegIix2YWx1ZToiIn1dLGNoYW5uZWxpZDoiIixkaXNhYmxlZENob29zZVBhcmVudENoYW5uZWw6ITEsZGlhbG9nVmlzaWJsZTohMSxjb21wb25lbnROYW1lOiIiLGlzUmVmcmVzaDohMCxmaXhlZERpc2FibGVkOiExfX0sY29tcHV0ZWQ6e2dldFVwbG9hZFVybDpmdW5jdGlvbigpe3JldHVybiBfZSgpfX0sd2F0Y2g6eyJlZGl0RnJvbS5jaGFubmVsX25hbWUiOntpbW1lZGlhdGU6ITAsaGFuZGxlcjpmdW5jdGlvbihlLG4pe3RoaXMuZWRpdEZyb20uY2hhbm5lbF9uYW1lPWUudHJpbSgpfX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLmdldEVkaXRJbmZvKCksdGhpcy5nZXRDaGFubmVsVHlwZSgpLHRoaXMuZ2V0UGFyZW50Q2hhbm5lbCgpfSxiZWZvcmVSb3V0ZUxlYXZlOmZ1bmN0aW9uKGUsbix0KXsiL21hbmFnZUNoYW5uZWwvbGlzdCI9PT1lLnBhdGg/ZS5tZXRhLnJlZnJlc2g9dGhpcy5pc1JlZnJlc2g6Ii9tYW5hZ2VDaGFubmVsL2NyZWF0ZSI9PT1lLnBhdGgmJnRoaXMuJHJvb3QuZXZlbnRIdWIuJGVtaXQoInJlc2V0LW9wdGlvbnMiKSx0KCl9LG1ldGhvZHM6e2dvdG9MaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1JlZnJlc2g9ITEsdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6Ii9tYW5hZ2VDaGFubmVsL2xpc3QifSl9LGdldEVkaXRJbmZvOmZ1bmN0aW9uKCl7dmFyIGUsbj10aGlzO3RoaXMuY2hhbm5lbGlkPXNlc3Npb25TdG9yYWdlLmdldEl0ZW0oImNoYW5uZWxpZCIpLChlPXtjaGFubmVsOntjaGFubmVsaWQ6dGhpcy5jaGFubmVsaWR9fSxiZSgibWFuYWdlci9DaGFubmVsL2dldENoYW5uZWxCeUlEIixlKSkudGhlbihmdW5jdGlvbihlKXtpZihlLmRhdGEuc3RhdHVzKXt2YXIgdD1lLmRhdGEucmVzdWx0O24uZWRpdEZyb20uY2hhbm5lbF9uYW1lPXQuY2hhbm5lbF9uYW1lLG4uZWRpdEZyb20ucGFyZW50X2NoYW5uZWxfbmFtZT10LnBhcmVudF9jaGFubmVsX25hbWUsbi5lZGl0RnJvbS5zb3J0PXQuc29ydCxuLmVkaXRGcm9tLmljb25fdXJsPXQuaWNvbl91cmwsbi5lZGl0RnJvbS5jaGFubmVsX3R5cGVfbmFtZT10LmNoYW5uZWxfdHlwZV9uYW1lLG4uZWRpdEZyb20uc3RhdGU9dC5zdGF0ZSxuLmVkaXRGcm9tLmRlc2NyaXB0aW9uPXQuZGVzY3JpcHRpb24sbi5lZGl0RnJvbS5maXhlZD10LmZpeGVkLG4uZWRpdEZyb20uY2hhbm5lbF90eXBlaWQ9dC5jaGFubmVsX3R5cGVpZCxuLmVkaXRGcm9tLnBhcmVudF9jaGFubmVsaWQ9dC5wYXJlbnRfY2hhbm5lbGlkLHQuY291bnRDaGlsZHJlbj4wJiYobi5kaXNhYmxlZENob29zZVBhcmVudENoYW5uZWw9ITApLG4uZGlzYWJsZUlzRml4ZWQoKX19KX0sc3VibWl0Rm9ybTpmdW5jdGlvbihlKXt2YXIgbj10aGlzO3RoaXMuJHJlZnNbZV0udmFsaWRhdGUoZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuIGNvbnNvbGUubG9nKCJlcnJvciBzdWJtaXQhISIpLCExO3ZhciB0O24uY2hhbm5lbFR5cGVMaXN0LmZvckVhY2goZnVuY3Rpb24oZSx0LGEpe2UudmFsdWU9PT1uLmVkaXRGcm9tLmNoYW5uZWxfdHlwZWlkJiYobi5lZGl0RnJvbS5jaGFubmVsX3R5cGVfbmFtZT1lLmxhYmVsKX0pLG4ucGFyZW50Q2hhbm5lbExpc3QuZm9yRWFjaChmdW5jdGlvbihlLHQsYSl7ZS52YWx1ZT09PW4uZWRpdEZyb20ucGFyZW50X2NoYW5uZWxpZCYmKG4uZWRpdEZyb20ucGFyZW50X2NoYW5uZWxfbmFtZT1lLmxhYmVsKX0pLCh0PXtjaGFubmVsOntwYXJlbnRfY2hhbm5lbGlkOm4uZWRpdEZyb20ucGFyZW50X2NoYW5uZWxpZCxwYXJlbnRfY2hhbm5lbF9uYW1lOm4uZWRpdEZyb20ucGFyZW50X2NoYW5uZWxfbmFtZSxjaGFubmVsaWQ6bi5jaGFubmVsaWQsY2hhbm5lbF9uYW1lOm4uZWRpdEZyb20uY2hhbm5lbF9uYW1lLGNoYW5uZWxfdHlwZWlkOm4uZWRpdEZyb20uY2hhbm5lbF90eXBlaWQsY2hhbm5lbF90eXBlX25hbWU6bi5lZGl0RnJvbS5jaGFubmVsX3R5cGVfbmFtZSxpY29uX3VybDpuLmVkaXRGcm9tLmljb25fdXJsLHN0YXRlOm4uZWRpdEZyb20uc3RhdGUsZGVzY3JpcHRpb246bi5lZGl0RnJvbS5kZXNjcmlwdGlvbixmaXhlZDpuLmVkaXRGcm9tLmZpeGVkLHNvcnQ6bi5lZGl0RnJvbS5zb3J0fX0sYmUoIm1hbmFnZXIvQ2hhbm5lbC91cGRhdGUiLHQpKS50aGVuKGZ1bmN0aW9uKGUpezIwMD09PWUuc3RhdHVzJiYobi4kcm91dGVyLnB1c2goe3BhdGg6Ii9tYW5hZ2VDaGFubmVsL2xpc3QifSksbi4kbm90aWZ5KHt0aXRsZToi6YCa55+lIixtZXNzYWdlOiLnvJbovpHmiJDlip8iLHR5cGU6InN1Y2Nlc3MifSkpfSl9KX0saGFuZGxlUGNBdmF0YXJTdWNjZXNzOmZ1bmN0aW9uKGUsbil7aWYoZS5zdGF0dXMpe3ZhciB0PWUucmVzdWx0O3RoaXMuZWRpdEZyb20uaWNvbl91cmw9dH19LGJlZm9yZUF2YXRhclVwbG9hZDpmdW5jdGlvbihlKXt2YXIgbj1lLnR5cGUgaW57ImltYWdlL2pwZWciOiEwLCJpbWFnZS9wbmciOiEwLCJpbWFnZS9qcGciOiEwfSx0PWUuc2l6ZS8xMDI0LzEwMjQ8MjtyZXR1cm4gbnx8dGhpcy4kbWVzc2FnZS5lcnJvcigi6K+35LiK5Lyg5Zu+54mH5qC85byP55qE5paH5Lu2ISIpLHR8fHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuS4iuS8oOWbvueJh+Wkp+Wwj+S4jeiDvei2hei/hyAyTUIhIiksbiYmdH0sZ2V0Q2hhbm5lbFR5cGU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO050KCkudGhlbihmdW5jdGlvbihuKXt2YXIgdD1uLmRhdGE7dC5zdGF0dXMmJnQucmVzdWx0LmZvckVhY2goZnVuY3Rpb24obix0LGEpezA9PT10JiYoZS5lZGl0RnJvbS5jaGFubmVsX3R5cGVpZD1uLmNoYW5uZWxfdHlwZWlkKTt2YXIgaT17fTtpLmxhYmVsPW4uY2hhbm5lbF90eXBlX25hbWUsaS52YWx1ZT1uLmNoYW5uZWxfdHlwZWlkLGUuY2hhbm5lbFR5cGVMaXN0LnB1c2goaSl9KX0pfSxnZXRQYXJlbnRDaGFubmVsOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztSdCgpLnRoZW4oZnVuY3Rpb24obil7dmFyIHQ9bi5kYXRhO3Quc3RhdHVzJiZ0LnJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uKG4sdCxhKXtpZihlLmNoYW5uZWxpZCE9PW4uY2hhbm5lbGlkKXt2YXIgaT17fTtpLmxhYmVsPW4uY2hhbm5lbF9uYW1lLGkudmFsdWU9bi5jaGFubmVsaWQsZS5wYXJlbnRDaGFubmVsTGlzdC5wdXNoKGkpfX0pfSl9LGNsb3NlRGlhbG9nOmZ1bmN0aW9uKCl7dGhpcy5kaWFsb2dWaXNpYmxlPSExLHRoaXMuY29tcG9uZW50TmFtZT0iIn0sY2hvb3NlSWNvbjpmdW5jdGlvbigpe3RoaXMuZGlhbG9nVmlzaWJsZT0hMCx0aGlzLmNvbXBvbmVudE5hbWU9IkNob29zZUljb24ifSxzdWJtaXRJY29uOmZ1bmN0aW9uKGUpe3RoaXMuZWRpdEZyb20uaWNvbl91cmw9ZSx0aGlzLmRpYWxvZ1Zpc2libGU9ITEsdGhpcy5jb21wb25lbnROYW1lPSIifSxkaXNhYmxlSXNGaXhlZDpmdW5jdGlvbigpe3RoaXMuZWRpdEZyb20ucGFyZW50X2NoYW5uZWxpZD8odGhpcy5lZGl0RnJvbS5maXhlZD0hMSx0aGlzLmZpeGVkRGlzYWJsZWQ9ITApOnRoaXMuZml4ZWREaXNhYmxlZD0hMX19fSxjYT1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1lLiRjcmVhdGVFbGVtZW50LHQ9ZS5fc2VsZi5fY3x8bjtyZXR1cm4gdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImNoYW5uZWwgY3JlYXRlIn0sW3QoImNpcmNsZS10aXRsZSIse3N0YXRpY0NsYXNzOiJjaWNsZS1jb250cm9sbGVyIixhdHRyczp7InRpdGxlLW5hbWUiOiLpopHpgZPnvJbovpEifX0pLGUuX3YoIiAiKSx0KCJlbC1mb3JtIix7cmVmOiJlZGl0RnJvbSIsc3RhdGljQ2xhc3M6InJ1bGUtZm9ybSIsYXR0cnM6e21vZGVsOmUuZWRpdEZyb20scnVsZXM6ZS5ydWxlcywibGFiZWwtd2lkdGgiOiIxMDBweCJ9fSxbdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLpopHpgZPlkI3np7AiLHByb3A6ImNoYW5uZWxfbmFtZSJ9fSxbdCgiZWwtaW5wdXQiLHttb2RlbDp7dmFsdWU6ZS5lZGl0RnJvbS5jaGFubmVsX25hbWUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZWRpdEZyb20sImNoYW5uZWxfbmFtZSIsInN0cmluZyI9PXR5cGVvZiBuP24udHJpbSgpOm4pfSxleHByZXNzaW9uOiJlZGl0RnJvbS5jaGFubmVsX25hbWUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLniLbnuqfpopHpgZMiLHByb3A6InBhcmVudF9jaGFubmVsX25hbWUifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntkaXNhYmxlZDplLmRpc2FibGVkQ2hvb3NlUGFyZW50Q2hhbm5lbCxmaWx0ZXJhYmxlOiIiLHBsYWNlaG9sZGVyOiIifSxvbjp7Y2hhbmdlOmUuZGlzYWJsZUlzRml4ZWR9LG1vZGVsOnt2YWx1ZTplLmVkaXRGcm9tLnBhcmVudF9jaGFubmVsaWQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZWRpdEZyb20sInBhcmVudF9jaGFubmVsaWQiLG4pfSxleHByZXNzaW9uOiJlZGl0RnJvbS5wYXJlbnRfY2hhbm5lbGlkIn19LGUuX2woZS5wYXJlbnRDaGFubmVsTGlzdCxmdW5jdGlvbihlLG4pe3JldHVybiB0KCJlbC1vcHRpb24iLHtrZXk6bixhdHRyczp7dmFsdWU6ZS52YWx1ZSxsYWJlbDplLmxhYmVsfX0pfSksMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuW9kuWxnuexu+WIqyIscHJvcDoiY2hhbm5lbF90eXBlX25hbWUifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntmaWx0ZXJhYmxlOiIiLHBsYWNlaG9sZGVyOiIifSxtb2RlbDp7dmFsdWU6ZS5lZGl0RnJvbS5jaGFubmVsX3R5cGVpZCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5lZGl0RnJvbSwiY2hhbm5lbF90eXBlaWQiLG4pfSxleHByZXNzaW9uOiJlZGl0RnJvbS5jaGFubmVsX3R5cGVpZCJ9fSxlLl9sKGUuY2hhbm5lbFR5cGVMaXN0LGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQoImVsLW9wdGlvbiIse2tleTpuLGF0dHJzOnt2YWx1ZTplLnZhbHVlLGxhYmVsOmUubGFiZWx9fSl9KSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJpdGVtIixhdHRyczp7bGFiZWw6IuWbvuagh+mFjee9riJ9fSxbdCgiZGl2Iix7c3RhdGljQ2xhc3M6Imljb24tY2hvb3NlLWNvbnRhaW5lciJ9LFt0KCJkaXYiLHtzdGF0aWNDbGFzczoibW9yZW4taWNvbiJ9LFt0KCJpbWciLHthdHRyczp7c3JjOmUuZWRpdEZyb20uaWNvbl91cmx9fSldKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InByaW1hcnkifSxvbjp7Y2xpY2s6ZS5jaG9vc2VJY29ufX0sW2UuX3YoIumAieaLqeWbvuaghyIpXSldLDEpXSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi54q25oCB6YCJ5oupIixwcm9wOiJzdGF0ZSJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiLor7fpgInmi6kifSxtb2RlbDp7dmFsdWU6ZS5lZGl0RnJvbS5zdGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5lZGl0RnJvbSwic3RhdGUiLG4pfSxleHByZXNzaW9uOiJlZGl0RnJvbS5zdGF0ZSJ9fSxbdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjEsbGFiZWw6IuWQr+eUqCJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZTowLGxhYmVsOiLlgZznlKgifX0pXSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi6aKR6YGT566A6L+wIn19LFt0KCJlbC1pbnB1dCIse2F0dHJzOnt0eXBlOiJ0ZXh0YXJlYSJ9LG1vZGVsOnt2YWx1ZTplLmVkaXRGcm9tLmRlc2NyaXB0aW9uLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmVkaXRGcm9tLCJkZXNjcmlwdGlvbiIsbil9LGV4cHJlc3Npb246ImVkaXRGcm9tLmRlc2NyaXB0aW9uIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5piv5ZCm5Zu65a6aIixwcm9wOiJmaXhlZCJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e2Rpc2FibGVkOmUuZml4ZWREaXNhYmxlZCxwbGFjZWhvbGRlcjoi6K+36YCJ5oupIn0sbW9kZWw6e3ZhbHVlOmUuZWRpdEZyb20uZml4ZWQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZWRpdEZyb20sImZpeGVkIixuKX0sZXhwcmVzc2lvbjoiZWRpdEZyb20uZml4ZWQifX0sW3QoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZTohMCxsYWJlbDoi5pivIn19KSxlLl92KCIgIiksdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOiExLGxhYmVsOiLlkKYifX0pXSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJzb3J0IixhdHRyczp7bGFiZWw6IuaOkuW6jyIscHJvcDoic29ydCJ9fSxbdCgiZWwtaW5wdXQiLHtzdGF0aWNTdHlsZTp7d2lkdGg6Ijc1JSJ9LG1vZGVsOnt2YWx1ZTplLmVkaXRGcm9tLnNvcnQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZWRpdEZyb20sInNvcnQiLGUuX24obikpfSxleHByZXNzaW9uOiJlZGl0RnJvbS5zb3J0In19KSxlLl92KCIgIiksdCgic3BhbiIsW2UuX3YoIuaPkOekuu+8muaVsOWtl+i2iuWwj+i2iuW+gOWJjSIpXSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLFt0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToicHJpbWFyeSJ9LG9uOntjbGljazpmdW5jdGlvbihuKXtlLnN1Ym1pdEZvcm0oImVkaXRGcm9tIil9fX0sW2UuX3YoIuaPkOS6pCIpXSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse29uOntjbGljazplLmdvdG9MaXN0fX0sW2UuX3YoIuWPlua2iCIpXSldLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZGlhbG9nIix7YXR0cnM6e3Zpc2libGU6ZS5kaWFsb2dWaXNpYmxlLHRpdGxlOiLlm77moIfpgInmi6kiLHdpZHRoOiI0MCUifSxvbjp7InVwZGF0ZTp2aXNpYmxlIjpmdW5jdGlvbihuKXtlLmRpYWxvZ1Zpc2libGU9bn0sY2xvc2U6ZS5jbG9zZURpYWxvZ319LFt0KGUuY29tcG9uZW50TmFtZSx7dGFnOiJkaXYiLG9uOnsic3VibWl0LWljb24iOmUuc3VibWl0SWNvbn19KV0sMSldLDEpfTtjYS5fd2l0aFN0cmlwcGVkPSEwO3ZhciBtYT17cmVuZGVyOmNhLHN0YXRpY1JlbmRlckZuczpbXX0sZGE9bWE7dmFyIHBhPSExO3ZhciB1YT10KCJWVS84IikocmEsZGEsITEsZnVuY3Rpb24oZSl7cGF8fHQoIldkUVEiKX0sImRhdGEtdi03MmU5MGIxYyIsbnVsbCk7dWEub3B0aW9ucy5fX2ZpbGU9InNyYy9jb21wb25lbnRzL21hbmFnZUNoYW5uZWwvY2hhbm5lbEVkaXQudnVlIjt2YXIgaGE9dWEuZXhwb3J0cztmdW5jdGlvbiBnYShlKXtyZXR1cm4gYmUoIm1hbmFnZXIvU3BlY2lhbC9wYWdlIixlKX12YXIgQWE9e2NvbXBvbmVudHM6e0NpcmNsZVRpdGxlOmVufSxkYXRhOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPXRoaXMuJGNyZWF0ZUVsZW1lbnQ7cmV0dXJue3RvcGljRm9ybTp7Y2hhbm5lbGlkOiIiLGNoYW5uZWxfbmFtZToiIixzcGVjaWFsX25hbWU6IiIsZGF0ZXJhbmdlOltdLHN0YXRlOiIiLHN0YXJ0RGF0ZToiIixlbmREYXRlOiIifSxjbGlja0NlbGxJbmRleDotMSx0YWJsZUhlYWRlcjpbe3Byb3A6InNwZWNpYWxfbmFtZSIsbGFiZWw6IuS4k+mimOWQjeensCJ9LHtwcm9wOiJ1cGRhdGV0aW1lIixsYWJlbDoi5pu05paw5pel5pyfIixmb3JtYXR0ZXI6ZnVuY3Rpb24obix0LGEsaSl7cmV0dXJuIGUuJG9wdGlvbnMuZmlsdGVycy5Gb3JtYXREYXRlKGEsInl5eXktTU0tZGQgaGg6bW0iKX19LHtwcm9wOiJjaGFubmVsX25hbWUiLGxhYmVsOiLlvZLlsZ7popHpgZMifSx7cHJvcDoic3BlY2lhbF9oZWFkX3VybCIsbGFiZWw6IuWbvueJhyIsZm9ybWF0dGVyOmZ1bmN0aW9uKGUsdCxhLGkpe3JldHVybiBuKCJpbWciLHtjbGFzczoidG9waWMtdGFibGUtcGljIixhdHRyczp7c3JjOmF9fSl9fSx7cHJvcDoiZXhwaXJ5X2RhdGVfc3RhcnQiLGxhYmVsOiLmnInmlYjmnJ8t5aeLIixmb3JtYXR0ZXI6ZnVuY3Rpb24obix0LGEsaSl7cmV0dXJuIGUuJG9wdGlvbnMuZmlsdGVycy5Gb3JtYXREYXRlKGEsInl5eXktTU0tZGQgaGg6bW0iKX19LHtwcm9wOiJleHBpcnlfZGF0ZV9lbmQiLGxhYmVsOiLmnInmlYjmnJ8t57uIIix3aWR0aDoxMjAsZm9ybWF0dGVyOmZ1bmN0aW9uKG4sdCxhLGkpe3JldHVybiBlLiRvcHRpb25zLmZpbHRlcnMuRm9ybWF0RGF0ZShhLCJ5eXl5LU1NLWRkIGhoOm1tIil9fSx7cHJvcDoic2hvd1N0YXRlIixsYWJlbDoi54q25oCBIn0se3Byb3A6InNvcnQiLGxhYmVsOiLmjpLluo8iLGZvcm1hdHRlcjpmdW5jdGlvbih0LGEsaSxsKXtyZXR1cm4gbD09PWUuY2xpY2tDZWxsSW5kZXg/bigiaW5wdXQiLHthdHRyczp7dHlwZToidGV4dCIsaWQ6bCxhdXRvZm9jdXM6ImF1dG9mb2N1cyJ9LGNsYXNzOiJzZWxmLXNvcnQiLGRvbVByb3BzOnt2YWx1ZTppfX0pOm4oInNwYW4iLHtjbGFzczoic29ydC1jb250YWluZXIiLGF0dHJzOnsiZGF0YS1pZCI6bH19LFtpXSl9fV0sdGFibGVEYXRhOltdLHNvcnRWYWx1ZTotMSxwYWdlTm86MSxwYWdlU2l6ZToxMCx0b3RhbDowLGxpc3RVc2FibGVDaGFubmVsOltdLHNlbGVjdFNwZWNpYWxJZDoiIn19LHdhdGNoOnsidG9waWNGb3JtLnN0YXRlIjpmdW5jdGlvbigpe3RoaXMuc2VhcmNoU3BlY2lhbCgpfX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5nZXRUb3BpY0xpc3QoKSx0aGlzLmdldExpc3RVc2FibGVDaGFubmVsKCksdGhpcy4kcm9vdC5ldmVudEh1Yi4kb24oInJlc2V0LW9wdGlvbnMiLGZ1bmN0aW9uKCl7ZS5yZXNldE9wdGlvbnMoKX0pfSxhY3RpdmF0ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRyb3V0ZS5tZXRhO2UuaGFzT3duUHJvcGVydHkoInJlZnJlc2giKSYmZS5yZWZyZXNoJiYodGhpcy5nZXRUb3BpY0xpc3QoKSxkZWxldGUgdGhpcy4kcm91dGUubWV0YS5yZWZyZXNoKX0sYmVmb3JlUm91dGVMZWF2ZTpmdW5jdGlvbihlLG4sdCl7Ii9tYW5hZ2VUb3BpYy9jcmVhdGUiPT09ZS5wYXRoJiZ0aGlzLnJlc2V0T3B0aW9ucygpLHQoKX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMuJHJvb3QuZXZlbnRIdWIuJG9mZigicmVzZXQtb3B0aW9ucyIpfSxtZXRob2RzOntyZXNldE9wdGlvbnM6ZnVuY3Rpb24oKXt0aGlzLnRvcGljRm9ybT17Y2hhbm5lbGlkOiIiLGNoYW5uZWxfbmFtZToiIixzcGVjaWFsX25hbWU6IiIsZGF0ZXJhbmdlOltdLHN0YXRlOiIiLHN0YXJ0RGF0ZToiIixlbmREYXRlOiIifSx0aGlzLnBhZ2VObz0xLHRoaXMuZ2V0VG9waWNMaXN0KCl9LGhhbmRsZVNpemVDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5wYWdlU2l6ZT1lLHRoaXMuc2VhcmNoU3BlY2lhbCgpfSxoYW5kbGVDdXJyZW50Q2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMucGFnZU5vPWUsdGhpcy5nZXRUb3BpY0xpc3QoKX0sdG9nZ2xlQWxsU2VsZWN0aW9uOmZ1bmN0aW9uKGUpe3RoaXMuJHJlZnMuY2hhbm5lbFRhYmxlLnRvZ2dsZUFsbFNlbGVjdGlvbigpfSxjZWxsQ2xpY2s6ZnVuY3Rpb24oZSxuLHQsYSl7dmFyIGk9dGhpcztpZihhLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoInNvcnQtY29udGFpbmVyIikpaWYoMSE9PWUuc3RhdGUpe3ZhciBsPWEudGFyZ2V0LmRhdGFzZXQuaWQ7bCYmKHRoaXMuY2xpY2tDZWxsSW5kZXg9cGFyc2VJbnQobCkpLHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiLmVsLXRvb2x0aXAgPiBpbnB1dC5zZWxmLXNvcnQiKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe24mJihpLnNlbGVjdFNwZWNpYWxJZD1lLnNwZWNpYWxpZCxuLmZvY3VzKCksbi5vbmtleXVwPWZ1bmN0aW9uKGUpe24udmFsdWUmJihpLnNvcnRWYWx1ZT1wYXJzZUludChuLnZhbHVlKSl9KX0pfSl9ZWxzZSB0aGlzLiRtZXNzYWdlKHt0eXBlOiJlcnJvciIsbWVzc2FnZToi5ZCv55So54q25oCB5LiL5LiN6IO95o6S5bqPISJ9KX0sY2VsbE1vdXNlTGVhdmU6ZnVuY3Rpb24oZSl7dmFyIG4sdD10aGlzO2lmKHRoaXMuY2xpY2tDZWxsSW5kZXg9LTEsLTE9PT10aGlzLnNvcnRWYWx1ZXx8dGhpcy5zZWxlY3RTcGVjaWFsSWQhPT1lLnNwZWNpYWxpZClyZXR1cm4hMTsobj17c3BlY2lhbDp7c3BlY2lhbGlkOmUuc3BlY2lhbGlkLHNvcnQ6dGhpcy5zb3J0VmFsdWV9fSxiZSgibWFuYWdlci9TcGVjaWFsL3VwZGF0ZVNvcnQiLG4pKS50aGVuKGZ1bmN0aW9uKGUpe2Uuc3RhdHVzJiYodC5nZXRUb3BpY0xpc3QoKSx0LnNvcnRWYWx1ZT0tMSl9KX0sZ2V0VG9waWNMaXN0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPW51bGwhPT10aGlzLnRvcGljRm9ybS5zdGFydERhdGU/bmV3IERhdGUodGhpcy50b3BpY0Zvcm0uc3RhcnREYXRlKS5nZXRUaW1lKCk6bnVsbCx0PW51bGwhPT10aGlzLnRvcGljRm9ybS5lbmREYXRlP25ldyBEYXRlKHRoaXMudG9waWNGb3JtLmVuZERhdGUpLmdldFRpbWUoKTpudWxsO2dhKHtwYWdlTm86dGhpcy5wYWdlTm8scGFnZVNpemU6dGhpcy5wYWdlU2l6ZSxjaGFubmVsaWQ6dGhpcy50b3BpY0Zvcm0uY2hhbm5lbGlkLHNwZWNpYWxfbmFtZTp0aGlzLnRvcGljRm9ybS5zcGVjaWFsX25hbWUsc3RhdGU6dGhpcy50b3BpY0Zvcm0uc3RhdGUsdGltZVN0YXJ0Om4sdGltZUVuZDp0fSkudGhlbihmdW5jdGlvbihuKXtpZihuLmRhdGEuc3RhdHVzKXt2YXIgdD1uLmRhdGEucmVzdWx0O2UudGFibGVEYXRhPXQubGlzdCxlLnRvdGFsPXQudG90YWx9fSl9LGhhbmRsZUVkaXQ6ZnVuY3Rpb24oZSl7MSE9PWUuc3RhdGU/KHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oInNwZWNpYWxpZCIsZS5zcGVjaWFsaWQpLHRoaXMuJHJvdXRlci5wdXNoKHtwYXRoOiIvbWFuYWdlVG9waWMvZWRpdCJ9KSk6dGhpcy4kbWVzc2FnZSh7dHlwZToiZXJyb3IiLG1lc3NhZ2U6IuWQr+eUqOeKtuaAgeS4i+S4jeWPr+e8lui+kSEifSl9LGNoYW5nZVN0YXRlOmZ1bmN0aW9uKGUpe3ZhciBuLHQ9dGhpcyxhPTA7MT09PWUuc3RhdGU/YT0wOjA9PT1lLnN0YXRlJiYoYT0xKSwobj17c3BlY2lhbDp7c3BlY2lhbGlkOmUuc3BlY2lhbGlkLHN0YXRlOmF9fSxiZSgibWFuYWdlci9TcGVjaWFsL3VwZGF0ZVN0YXRlIixuKSkudGhlbihmdW5jdGlvbihlKXtlLnN0YXR1cyYmKDA9PT1hP3QuJG1lc3NhZ2Uoe3R5cGU6InN1Y2Nlc3MiLG1lc3NhZ2U6IuS/ruaUueeKtuaAgeS4uuWBnOeUqCJ9KTp0LiRtZXNzYWdlKHt0eXBlOiJzdWNjZXNzIixtZXNzYWdlOiLkv67mlLnnirbmgIHkuLrlkK/nlKgifSksdC5nZXRUb3BpY0xpc3QoKSl9KX0saGFuZGxlRGVsZXRlOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7MSE9PWUuc3RhdGU/dGhpcy4kY29uZmlybSgn5piv5ZCm5Yig6ZmkIicrZS5zcGVjaWFsX25hbWUrJyI/Jywi5o+Q56S6Iix7Y29uZmlybUJ1dHRvblRleHQ6IuehruWumiIsY2FuY2VsQnV0dG9uVGV4dDoi5Y+W5raIIix0eXBlOiJ3YXJuaW5nIn0pLnRoZW4oZnVuY3Rpb24oKXt2YXIgdDsodD17c3BlY2lhbDp7c3BlY2lhbGlkOmUuc3BlY2lhbGlkfX0sYmUoIm1hbmFnZXIvU3BlY2lhbC9kZWxldGUiLHQpKS50aGVuKGZ1bmN0aW9uKGUpe2UuZGF0YS5zdGF0dXMmJm4uJG1lc3NhZ2Uoe3R5cGU6InN1Y2Nlc3MiLG1lc3NhZ2U6IuWIoOmZpOaIkOWKnyEifSksbi5nZXRUb3BpY0xpc3QoKX0pfSkuY2F0Y2goZnVuY3Rpb24oKXt9KTp0aGlzLiRtZXNzYWdlKHt0eXBlOiJlcnJvciIsbWVzc2FnZToi5ZCv55So54q25oCB5LiL5LiN5Y+v5Yig6ZmkISJ9KX0sc2VhcmNoU3BlY2lhbDpmdW5jdGlvbigpe3RoaXMucGFnZU5vPTEsdGhpcy4kb3B0aW9ucy5maWx0ZXJzLnN3YXBUaW1lKHRoaXMudG9waWNGb3JtKSx0aGlzLmdldFRvcGljTGlzdCgpfSxnZXRMaXN0VXNhYmxlQ2hhbm5lbDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7eGUoKS50aGVuKGZ1bmN0aW9uKG4pe24uZGF0YS5zdGF0dXMmJm4uZGF0YS5yZXN1bHQuZm9yRWFjaChmdW5jdGlvbihuLHQsYSl7dmFyIGk9e307aS5sYWJlbD1uLmNoYW5uZWxfbmFtZSxpLnZhbHVlPW4uY2hhbm5lbGlkLGUubGlzdFVzYWJsZUNoYW5uZWwucHVzaChpKX0pfSl9fX0sZmE9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJ0b3BpYyJ9LFt0KCJkaXYiLFt0KCJjaXJjbGUtdGl0bGUiLHtzdGF0aWNDbGFzczoiY2ljbGUtY29udHJvbGxlciIsYXR0cnM6eyJ0aXRsZS1uYW1lIjoi5LiT6aKY566h55CGIn19KSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InNlYXJjaC1mb3JtLWNvbnRhaW5lciJ9LFt0KCJlbC1mb3JtIix7c3RhdGljQ2xhc3M6ImRlbW8tZm9ybS1pbmxpbmUiLGF0dHJzOntpbmxpbmU6ITAsbW9kZWw6ZS50b3BpY0Zvcm19fSxbdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLpopHpgZMifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntmaWx0ZXJhYmxlOiIiLGNsZWFyYWJsZToiIixwbGFjZWhvbGRlcjoiIn0sb246e2NsZWFyOmUuc2VhcmNoU3BlY2lhbCxjaGFuZ2U6ZS5zZWFyY2hTcGVjaWFsfSxtb2RlbDp7dmFsdWU6ZS50b3BpY0Zvcm0uY2hhbm5lbGlkLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLnRvcGljRm9ybSwiY2hhbm5lbGlkIixuKX0sZXhwcmVzc2lvbjoidG9waWNGb3JtLmNoYW5uZWxpZCJ9fSxlLl9sKGUubGlzdFVzYWJsZUNoYW5uZWwsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtb3B0aW9uIix7a2V5Om4sYXR0cnM6e3ZhbHVlOmUudmFsdWUsbGFiZWw6ZS5sYWJlbH19KX0pLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLkuJPpopgifX0sW3QoImVsLWlucHV0Iix7bW9kZWw6e3ZhbHVlOmUudG9waWNGb3JtLnNwZWNpYWxfbmFtZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS50b3BpY0Zvcm0sInNwZWNpYWxfbmFtZSIsbil9LGV4cHJlc3Npb246InRvcGljRm9ybS5zcGVjaWFsX25hbWUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6InNlYXJjaC1sZWZ0IixhdHRyczp7bGFiZWw6IueKtuaAgSJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiIifSxvbjp7Y2hhbmdlOmUuc2VhcmNoU3BlY2lhbH0sbW9kZWw6e3ZhbHVlOmUudG9waWNGb3JtLnN0YXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLnRvcGljRm9ybSwic3RhdGUiLG4pfSxleHByZXNzaW9uOiJ0b3BpY0Zvcm0uc3RhdGUifX0sW3QoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZToiIixsYWJlbDoi5YWo6YOoIn19KSxlLl92KCIgIiksdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjEsbGFiZWw6IuW+heS4iue6vyJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZToyLGxhYmVsOiLlt7LkuIrnur8ifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MyxsYWJlbDoi6L+H5pyfIn19KSxlLl92KCIgIiksdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjAsbGFiZWw6IuWBnOeUqCJ9fSldLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6ImRhdGUtbGVmdCIsYXR0cnM6e2xhYmVsOiLlvIDlp4vml7bpl7QifX0sW3QoImVsLWRhdGUtcGlja2VyIix7YXR0cnM6e3RpdGxlOmUuX2YoIkZvcm1hdERhdGUiKShlLnRvcGljRm9ybS5zdGFydERhdGUsInl5eXktTU0tZGQgaGg6bW0iKSx0eXBlOiJkYXRldGltZSIsZm9ybWF0OiJ5eXl5LU1NLWRkIEhIOm1tIixwbGFjZWhvbGRlcjoi6YCJ5oup5pel5pyfIn0sb246e2NoYW5nZTplLnNlYXJjaFNwZWNpYWx9LG1vZGVsOnt2YWx1ZTplLnRvcGljRm9ybS5zdGFydERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUudG9waWNGb3JtLCJzdGFydERhdGUiLG4pfSxleHByZXNzaW9uOiJ0b3BpY0Zvcm0uc3RhcnREYXRlIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJkYXRlLWxlZnQiLGF0dHJzOntsYWJlbDoi57uT5p2f5pe26Ze0In19LFt0KCJlbC1kYXRlLXBpY2tlciIse2F0dHJzOnt0aXRsZTplLl9mKCJGb3JtYXREYXRlIikoZS50b3BpY0Zvcm0uZW5kRGF0ZSwieXl5eS1NTS1kZCBoaDptbSIpLGZvcm1hdDoieXl5eS1NTS1kZCBISDptbSIsdHlwZToiZGF0ZXRpbWUiLHBsYWNlaG9sZGVyOiLpgInmi6nml6XmnJ8ifSxvbjp7Y2hhbmdlOmUuc2VhcmNoU3BlY2lhbH0sbW9kZWw6e3ZhbHVlOmUudG9waWNGb3JtLmVuZERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUudG9waWNGb3JtLCJlbmREYXRlIixuKX0sZXhwcmVzc2lvbjoidG9waWNGb3JtLmVuZERhdGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7c3RhdGljU3R5bGU6eyJtYXJnaW4tbGVmdCI6IjQwcHgifSxhdHRyczp7dHlwZToicHJpbWFyeSJ9LG9uOntjbGljazplLnNlYXJjaFNwZWNpYWx9fSxbZS5fdigiXG4gICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgIiksdCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCJ9KV0pLGUuX3YoIiAiKSx0KCJyb3V0ZXItbGluayIse2F0dHJzOnt0bzoiL21hbmFnZVRvcGljL2NyZWF0ZSJ9fSxbdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InByaW1hcnkifX0sW2UuX3YoIlxuICAgICAgICAgICAg5re75Yqg5LiT6aKYXG4gICAgICAgICAgICAiKSx0KCJpIix7c3RhdGljQ2xhc3M6ImVsLWljb24tcGx1cyBlbC1pY29uLS1yaWdodCJ9KV0pXSwxKV0sMSldLDEpXSwxKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InRhYmxlLWxpc3QifSxbdCgiZWwtdGFibGUiLHtyZWY6ImNoYW5uZWxUYWJsZSIsc3RhdGljQ2xhc3M6Indob2xlLXRhYmxlIixhdHRyczp7ZGF0YTplLnRhYmxlRGF0YSxzdHJpcGU6IiIsIm1pbi1oZWlnaHQiOiI0MDAifSxvbjp7ImNlbGwtY2xpY2siOmUuY2VsbENsaWNrLCJjZWxsLW1vdXNlLWxlYXZlIjplLmNlbGxNb3VzZUxlYXZlfX0sW2UuX2woZS50YWJsZUhlYWRlcixmdW5jdGlvbihlLG4pe3JldHVybiB0KCJlbC10YWJsZS1jb2x1bW4iLHtrZXk6bixhdHRyczp7cHJvcDplLnByb3AsbGFiZWw6ZS5sYWJlbCx3aWR0aDplLndpZHRoLGZvcm1hdHRlcjplLmZvcm1hdHRlcixhbGlnbjoiY2VudGVyIixmaXhlZDoiIiwic2hvdy1vdmVyZmxvdy10b29sdGlwIjoiIn19KX0pLGUuX3YoIiAiKSx0KCJlbC10YWJsZS1jb2x1bW4iLHthdHRyczp7Zml4ZWQ6InJpZ2h0IixsYWJlbDoi5pON5L2cIixhbGlnbjoiY2VudGVyIix3aWR0aDoiMTAwIn0sc2NvcGVkU2xvdHM6ZS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24obil7cmV0dXJuW3QoImVsLXRvb2x0aXAiLHtzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6e2VmZmVjdDoiZGFyayIsY29udGVudDoi5L+u5pS554q25oCBIixwbGFjZW1lbnQ6InRvcCJ9fSxbdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InRleHQiLHNpemU6InNtYWxsIixpY29uOiJlbC1pY29uLXJlbW92ZS1vdXRsaW5lIn0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuY2hhbmdlU3RhdGUobi5yb3cpfX19KV0sMSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJ0ZXh0IixzaXplOiJzbWFsbCIsaWNvbjoiZWwtaWNvbi1lZGl0In0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuaGFuZGxlRWRpdChuLnJvdyl9fX0pLGUuX3YoIiAiKSx0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToidGV4dCIsc2l6ZToic21hbGwiLGljb246ImVsLWljb24tZGVsZXRlIn0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuaGFuZGxlRGVsZXRlKG4ucm93KX19fSldfX1dKX0pXSwyKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InBhZ2luYXRpb24ifSxbdCgiZWwtcGFnaW5hdGlvbiIse2F0dHJzOnt0b3RhbDplLnRvdGFsLCJwYWdlLXNpemVzIjpbMTAsMjAsMzAsNDBdLCJjdXJyZW50LXBhZ2UiOmUucGFnZU5vLGJhY2tncm91bmQ6IiIsbGF5b3V0OiJ0b3RhbCwgc2l6ZXMsIHByZXYsIHBhZ2VyLCBuZXh0In0sb246eyJzaXplLWNoYW5nZSI6ZS5oYW5kbGVTaXplQ2hhbmdlLCJjdXJyZW50LWNoYW5nZSI6ZS5oYW5kbGVDdXJyZW50Q2hhbmdlfX0pXSwxKV0sMSldKX07ZmEuX3dpdGhTdHJpcHBlZD0hMDt2YXIgYmE9e3JlbmRlcjpmYSxzdGF0aWNSZW5kZXJGbnM6W119LHZhPWJhO3ZhciB5YT0hMTt2YXIgQ2E9dCgiVlUvOCIpKEFhLHZhLCExLGZ1bmN0aW9uKGUpe3lhfHwodCgiS3lWMyIpLHQoIjNFVWYiKSl9LCJkYXRhLXYtOGM3YzljZjAiLG51bGwpO0NhLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9tYW5hZ2VUb3BpYy90b3BpY0xpc3QudnVlIjt2YXIgX2E9Q2EuZXhwb3J0cyx4YT17Y29tcHV0ZWQ6e3VwbG9hZEhlYWRlcnM6ZnVuY3Rpb24oKXtyZXR1cm57dG9rZW46c2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgidG9rZW4iKX19fX0sd2E9e2NvbXBvbmVudHM6e0NpcmNsZVRpdGxlOmVufSxtaXhpbnM6W3hhXSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3J1bGVGb3JtOntzb3J0OjAsY2hhbm5lbGlkOiIiLHNwZWNpYWxfbmFtZToiIixzcGVjaWFsX2hlYWRfdXJsOiIiLGluZGF0ZTpbbmV3IERhdGUsbmV3IERhdGVdLGlzdG9wOjAsc3RhdGU6MH0saXNDaG9vc2VEYXRlOiExLHJ1bGVzOntzb3J0Olt7cmVxdWlyZWQ6ITAsbWVzc2FnZToi6K+36L6T5YWl5o6S5bqPIix0cmlnZ2VyOiJibHVyIn0se3R5cGU6Im51bWJlciIsbWVzc2FnZToi5o6S5bqP5b+F6aG75Li65pWw5a2XIn1dLHNwZWNpYWxfbmFtZTpbe3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+i+k+WFpeS4k+mimOWQjeensCIsdHJpZ2dlcjoiYmx1ciJ9LHttaW46MCxtYXg6NjQsbWVzc2FnZToi5qCH6aKY6ZmQ5a6aNjTkuKrlrZfnrKblhoUiLHRyaWdnZXI6ImNoYW5nZSJ9XSxzcGVjaWFsX2hlYWRfdXJsOlt7cmVxdWlyZWQ6ITAsbWVzc2FnZToi6K+35LiK5Lyg5Zu+54mHIix0cmlnZ2VyOiJibHVyIn1dfSxsaXN0VXNhYmxlQ2hhbm5lbDpbXX19LGNvbXB1dGVkOntnZXRVcGxvYWRVcmw6ZnVuY3Rpb24oKXtyZXR1cm4gX2UoKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLmdldExpc3RVc2FibGVDaGFubmVsKCl9LG1ldGhvZHM6e3N1Ym1pdEZvcm06ZnVuY3Rpb24oZSl7dmFyIG49dGhpczt0aGlzLiRyZWZzW2VdLnZhbGlkYXRlKGZ1bmN0aW9uKGUpe2lmKCFlKXJldHVybiBjb25zb2xlLmxvZygiZXJyb3Igc3VibWl0ISEiKSwhMTt2YXIgdDsodD17c3BlY2lhbDp7c3BlY2lhbF9uYW1lOm4ucnVsZUZvcm0uc3BlY2lhbF9uYW1lLHNwZWNpYWxfaGVhZF91cmw6bi5ydWxlRm9ybS5zcGVjaWFsX2hlYWRfdXJsLGNoYW5uZWxpZDpuLnJ1bGVGb3JtLmNoYW5uZWxpZCxzdGF0ZTpuLnJ1bGVGb3JtLnN0YXRlLGV4cGlyeV9kYXRlX3N0YXJ0Om5ldyBEYXRlKG4ucnVsZUZvcm0uaW5kYXRlWzBdKS5nZXRUaW1lKCksZXhwaXJ5X2RhdGVfZW5kOm5ldyBEYXRlKG4ucnVsZUZvcm0uaW5kYXRlWzFdKS5nZXRUaW1lKCksc29ydDpuLnJ1bGVGb3JtLnNvcnR9fSxiZSgibWFuYWdlci9TcGVjaWFsL2FkZCIsdCkpLnRoZW4oZnVuY3Rpb24oZSl7ZS5zdGF0dXMmJjIwMD09PWUuc3RhdHVzJiYobi4kcm91dGVyLnB1c2goe3BhdGg6Ii9tYW5hZ2VUb3BpYy9saXN0In0pLG4uJG5vdGlmeSh7dGl0bGU6IumAmuefpSIsbWVzc2FnZToi5re75Yqg5oiQ5YqfIix0eXBlOiJzdWNjZXNzIn0pKX0pfSl9LGhhbmRsZVBjQXZhdGFyU3VjY2VzczpmdW5jdGlvbihlLG4pe2lmKGUuc3RhdHVzKXt2YXIgdD1lLnJlc3VsdDt0aGlzLnJ1bGVGb3JtLnNwZWNpYWxfaGVhZF91cmw9dH19LGJlZm9yZUF2YXRhclVwbG9hZDpmdW5jdGlvbihlKXt2YXIgbj1lLnR5cGUgaW57ImltYWdlL2pwZWciOiEwLCJpbWFnZS9wbmciOiEwLCJpbWFnZS9qcGciOiEwfSx0PWUuc2l6ZS8xMDI0LzEwMjQ8MjtyZXR1cm4gbnx8dGhpcy4kbWVzc2FnZS5lcnJvcigi5LiK5Lyg5Zu+54mH5Y+q6IO95pivIEpQRyDmoLzlvI8hIiksdHx8dGhpcy4kbWVzc2FnZS5lcnJvcigi5LiK5Lyg5Zu+54mH5aSn5bCP5LiN6IO96LaF6L+HIDJNQiEiKSxuJiZ0fSxnZXRMaXN0VXNhYmxlQ2hhbm5lbDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7eGUoKS50aGVuKGZ1bmN0aW9uKG4pe24uZGF0YS5zdGF0dXMmJm4uZGF0YS5yZXN1bHQuZm9yRWFjaChmdW5jdGlvbihuLHQsYSl7MD09PXQmJihlLnJ1bGVGb3JtLmNoYW5uZWxpZD1uLmNoYW5uZWxpZCk7dmFyIGk9e307aS5sYWJlbD1uLmNoYW5uZWxfbmFtZSxpLnZhbHVlPW4uY2hhbm5lbGlkLGUubGlzdFVzYWJsZUNoYW5uZWwucHVzaChpKX0pfSl9fX0sRmE9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJ0b3BpYyBjcmVhdGUifSxbdCgiY2lyY2xlLXRpdGxlIix7c3RhdGljQ2xhc3M6ImNpY2xlLWNvbnRyb2xsZXIiLGF0dHJzOnsidGl0bGUtbmFtZSI6IuS4k+mimOaWsOWiniJ9fSksZS5fdigiICIpLHQoImVsLWZvcm0iLHtyZWY6InJ1bGVGb3JtIixzdGF0aWNDbGFzczoicnVsZS1mb3JtIixhdHRyczp7bW9kZWw6ZS5ydWxlRm9ybSxydWxlczplLnJ1bGVzLCJsYWJlbC13aWR0aCI6IjEwMHB4In19LFt0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuS4k+mimOagh+mimCIscHJvcDoic3BlY2lhbF9uYW1lIn19LFt0KCJlbC1pbnB1dCIse21vZGVsOnt2YWx1ZTplLnJ1bGVGb3JtLnNwZWNpYWxfbmFtZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5ydWxlRm9ybSwic3BlY2lhbF9uYW1lIiwic3RyaW5nIj09dHlwZW9mIG4/bi50cmltKCk6bil9LGV4cHJlc3Npb246InJ1bGVGb3JtLnNwZWNpYWxfbmFtZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6e2xhYmVsOiLlm77moIfphY3nva4iLHByb3A6InNwZWNpYWxfaGVhZF91cmwifX0sW3QoImVsLXVwbG9hZCIse3N0YXRpY0NsYXNzOiJhdmF0YXItdXBsb2FkZXIiLGF0dHJzOnthY3Rpb246ZS5nZXRVcGxvYWRVcmwsaGVhZGVyczplLnVwbG9hZEhlYWRlcnMsInNob3ctZmlsZS1saXN0IjohMSwib24tc3VjY2VzcyI6ZS5oYW5kbGVQY0F2YXRhclN1Y2Nlc3MsImJlZm9yZS11cGxvYWQiOmUuYmVmb3JlQXZhdGFyVXBsb2FkfX0sW2UucnVsZUZvcm0uc3BlY2lhbF9oZWFkX3VybD90KCJpbWciLHtzdGF0aWNDbGFzczoiYXZhdGFyIixhdHRyczp7c3JjOmUucnVsZUZvcm0uc3BlY2lhbF9oZWFkX3VybH19KTp0KCJpIix7c3RhdGljQ2xhc3M6ImVsLWljb24tcGx1cyBhdmF0YXItdXBsb2FkZXItaWNvbiJ9KV0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLlvZLlsZ7popHpgZMiLHByb3A6ImNoYW5uZWxCZWxvbmcifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntmaWx0ZXJhYmxlOiIiLHBsYWNlaG9sZGVyOiIifSxtb2RlbDp7dmFsdWU6ZS5ydWxlRm9ybS5jaGFubmVsaWQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUucnVsZUZvcm0sImNoYW5uZWxpZCIsbil9LGV4cHJlc3Npb246InJ1bGVGb3JtLmNoYW5uZWxpZCJ9fSxlLl9sKGUubGlzdFVzYWJsZUNoYW5uZWwsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtb3B0aW9uIix7a2V5Om4sYXR0cnM6e3ZhbHVlOmUudmFsdWUsbGFiZWw6ZS5sYWJlbH19KX0pLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6ImluZGF0ZSIsYXR0cnM6e2xhYmVsOiLmnInmlYjmnJ8iLHJlcXVpcmVkOiIifX0sW3QoImVsLWRhdGUtcGlja2VyIix7c3RhdGljU3R5bGU6e3dpZHRoOiIxMDAlIn0sYXR0cnM6e2NsZWFyYWJsZTohMSxkaXNhYmxlZDplLmlzQ2hvb3NlRGF0ZSx0eXBlOiJkYXRldGltZXJhbmdlIixmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLCJyYW5nZS1zZXBhcmF0b3IiOiLoh7MiLCJzdGFydC1wbGFjZWhvbGRlciI6IuW8gOWni+aXpeacnyIsImVuZC1wbGFjZWhvbGRlciI6Iue7k+adn+aXpeacnyJ9LG1vZGVsOnt2YWx1ZTplLnJ1bGVGb3JtLmluZGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5ydWxlRm9ybSwiaW5kYXRlIixuKX0sZXhwcmVzc2lvbjoicnVsZUZvcm0uaW5kYXRlIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJzb3J0IixhdHRyczp7bGFiZWw6IuaOkuW6jyIscHJvcDoic29ydCJ9fSxbdCgiZWwtaW5wdXQiLHtzdGF0aWNTdHlsZTp7d2lkdGg6Ijc1JSJ9LG1vZGVsOnt2YWx1ZTplLnJ1bGVGb3JtLnNvcnQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUucnVsZUZvcm0sInNvcnQiLGUuX24obikpfSxleHByZXNzaW9uOiJydWxlRm9ybS5zb3J0In19KSxlLl92KCIgIiksdCgic3BhbiIsW2UuX3YoIuaPkOekuu+8muaVsOWtl+i2iuWwj+i2iuW+gOWJjSIpXSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IueKtuaAgemAieaLqSJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiLor7fpgInmi6kifSxtb2RlbDp7dmFsdWU6ZS5ydWxlRm9ybS5zdGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5ydWxlRm9ybSwic3RhdGUiLG4pfSxleHByZXNzaW9uOiJydWxlRm9ybS5zdGF0ZSJ9fSxbdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjEsbGFiZWw6IuWQr+eUqCJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZTowLGxhYmVsOiLlgZznlKgifX0pXSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIsW3QoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmZ1bmN0aW9uKG4pe2Uuc3VibWl0Rm9ybSgicnVsZUZvcm0iKX19fSxbZS5fdigi5o+Q5LqkIildKSxlLl92KCIgIiksdCgicm91dGVyLWxpbmsiLHthdHRyczp7dG86Ii9tYW5hZ2VUb3BpYy9saXN0In19LFt0KCJlbC1idXR0b24iLFtlLl92KCLlj5bmtogiKV0pXSwxKV0sMSldLDEpXSwxKX07RmEuX3dpdGhTdHJpcHBlZD0hMDt2YXIga2E9e3JlbmRlcjpGYSxzdGF0aWNSZW5kZXJGbnM6W119LFNhPWthO3ZhciBFYT0hMTt2YXIgRGE9dCgiVlUvOCIpKHdhLFNhLCExLGZ1bmN0aW9uKGUpe0VhfHx0KCJwQ3lQIil9LCJkYXRhLXYtNmEyOTkzMzQiLG51bGwpO0RhLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9tYW5hZ2VUb3BpYy90b3BpY0NyZWF0ZS52dWUiO3ZhciBMYT1EYS5leHBvcnRzLEJhPXtjb21wb25lbnRzOntDaXJjbGVUaXRsZTplbn0sbWl4aW5zOlt4YV0sZGF0YTpmdW5jdGlvbigpe3JldHVybntlZGl0Rm9ybTp7c3BlY2lhbF9uYW1lOiIiLGNoYW5uZWxfbmFtZToiIixjaGFubmVsaWQ6IiIsc3BlY2lhbF9oZWFkX3VybDoiIixpbmRhdGU6W10sc3RhdGU6MCxzb3J0OjB9LGlzQ2hvb3NlRGF0ZTohMSxydWxlczp7c3BlY2lhbF9uYW1lOlt7cmVxdWlyZWQ6ITAsbWVzc2FnZToi6K+36L6T5YWl5LiT6aKY5ZCN56ewIix0cmlnZ2VyOiJibHVyIn0se21pbjowLG1heDo2NCxtZXNzYWdlOiLmoIfpopjpmZDlrpo2NOS4quWtl+espuWGhSIsdHJpZ2dlcjoiY2hhbmdlIn1dLHNvcnQ6W3tyZXF1aXJlZDohMCxtZXNzYWdlOiLor7fovpPlhaXmjpLluo8iLHRyaWdnZXI6ImJsdXIifSx7dHlwZToibnVtYmVyIixtZXNzYWdlOiLmjpLluo/lv4XpobvkuLrmlbDlrZcifV0sc3BlY2lhbF9oZWFkX3VybDpbe3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+S4iuS8oOWbvueJhyIsdHJpZ2dlcjoiYmx1ciJ9XSxjaGFubmVsaWQ6W3tyZXF1aXJlZDohMCxtZXNzYWdlOiLor7fpgInmi6nlvZLlsZ7popHpgZMiLHRyaWdnZXI6ImJsdXIifV19LGNoYW5uZWxUeXBlTGlzdDpbXSxzcGVjaWFsaWQ6IiIsaXNSZWZyZXNoOiEwfX0sY29tcHV0ZWQ6e2dldFVwbG9hZFVybDpmdW5jdGlvbigpe3JldHVybiBfZSgpfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuZ2V0RWRpdEluZm8oKX0sYmVmb3JlUm91dGVMZWF2ZTpmdW5jdGlvbihlLG4sdCl7Ii9tYW5hZ2VUb3BpYy9saXN0Ij09PWUucGF0aD9lLm1ldGEucmVmcmVzaD10aGlzLmlzUmVmcmVzaDoiL21hbmFnZVRvcGljL2NyZWF0ZSI9PT1lLnBhdGgmJnRoaXMuJHJvb3QuZXZlbnRIdWIuJGVtaXQoInJlc2V0LW9wdGlvbnMiKSx0KCl9LG1ldGhvZHM6e2dvdG9MaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1JlZnJlc2g9ITEsdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6Ii9tYW5hZ2VUb3BpYy9saXN0In0pfSxnZXRFZGl0SW5mbzpmdW5jdGlvbigpe3ZhciBlLG49dGhpczt0aGlzLnNwZWNpYWxpZD1zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCJzcGVjaWFsaWQiKSwoZT17c3BlY2lhbDp7c3BlY2lhbGlkOnRoaXMuc3BlY2lhbGlkfX0sYmUoIm1hbmFnZXIvU3BlY2lhbC9nZXRTcGVjaWFsQnlJRCIsZSkpLnRoZW4oZnVuY3Rpb24oZSl7aWYoZS5kYXRhLnN0YXR1cyl7dmFyIHQ9ZS5kYXRhLnJlc3VsdDtuLmVkaXRGb3JtLnNwZWNpYWxfbmFtZT10LnNwZWNpYWxfbmFtZSxuLmVkaXRGb3JtLmNoYW5uZWxfbmFtZT10LmNoYW5uZWxfbmFtZSxuLmVkaXRGb3JtLmNoYW5uZWxpZD10LmNoYW5uZWxpZCxuLmVkaXRGb3JtLnN0YXRlPXQuc3RhdGUsbi5lZGl0Rm9ybS5zcGVjaWFsX2hlYWRfdXJsPXQuc3BlY2lhbF9oZWFkX3VybCxuLmVkaXRGb3JtLmluZGF0ZS5wdXNoKHQuZXhwaXJ5X2RhdGVfc3RhcnQpLG4uZWRpdEZvcm0uaW5kYXRlLnB1c2godC5leHBpcnlfZGF0ZV9lbmQpLG4uZWRpdEZvcm0uc29ydD10LnNvcnR9bi5nZXRMaXN0VXNhYmxlQ2hhbm5lbCgpfSl9LHNldENoYW5ubmVsaWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ITA7Y29uc29sZS5sb2codGhpcy5lZGl0Rm9ybS5jaGFubmVsaWQpLHRoaXMuY2hhbm5lbFR5cGVMaXN0LmZvckVhY2goZnVuY3Rpb24odCl7dC52YWx1ZT09PWUuZWRpdEZvcm0uY2hhbm5lbGlkJiYobj0hMSl9KSxuJiZ0aGlzLiRzZXQodGhpcy5lZGl0Rm9ybSwiY2hhbm5lbGlkIiwiIil9LGdldExpc3RVc2FibGVDaGFubmVsOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt4ZSgpLnRoZW4oZnVuY3Rpb24obil7dmFyIHQ9bi5kYXRhO3Quc3RhdHVzJiYodC5yZXN1bHQuZm9yRWFjaChmdW5jdGlvbihuLHQsYSl7dmFyIGk9e307aS5sYWJlbD1uLmNoYW5uZWxfbmFtZSxpLnZhbHVlPW4uY2hhbm5lbGlkLGUuY2hhbm5lbFR5cGVMaXN0LnB1c2goaSl9KSxlLnNldENoYW5ubmVsaWQoKSl9KX0sc3VibWl0Rm9ybTpmdW5jdGlvbihlKXt2YXIgbj10aGlzO3RoaXMuJHJlZnNbZV0udmFsaWRhdGUoZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuIGNvbnNvbGUubG9nKCJlcnJvciBzdWJtaXQhISIpLCExO3ZhciB0O24uY2hhbm5lbFR5cGVMaXN0LmZvckVhY2goZnVuY3Rpb24oZSx0LGEpe2UudmFsdWU9PT1uLmVkaXRGb3JtLmNoYW5uZWxfbmFtZSYmKG4uZWRpdEZvcm0uY2hhbm5lbGlkPWUubGFiZWwpfSksKHQ9e3NwZWNpYWw6e3NwZWNpYWxpZDpuLnNwZWNpYWxpZCxzcGVjaWFsX25hbWU6bi5lZGl0Rm9ybS5zcGVjaWFsX25hbWUsc3BlY2lhbF9oZWFkX3VybDpuLmVkaXRGb3JtLnNwZWNpYWxfaGVhZF91cmwsY2hhbm5lbGlkOm4uZWRpdEZvcm0uY2hhbm5lbGlkLHN0YXRlOm4uZWRpdEZvcm0uc3RhdGUsZXhwaXJ5X2RhdGVfc3RhcnQ6bmV3IERhdGUobi5lZGl0Rm9ybS5pbmRhdGVbMF0pLmdldFRpbWUoKSxleHBpcnlfZGF0ZV9lbmQ6bmV3IERhdGUobi5lZGl0Rm9ybS5pbmRhdGVbMV0pLmdldFRpbWUoKSxzb3J0Om4uZWRpdEZvcm0uc29ydH19LGJlKCJtYW5hZ2VyL1NwZWNpYWwvdXBkYXRlIix0KSkudGhlbihmdW5jdGlvbihlKXsyMDA9PT1lLnN0YXR1cyYmKG4uJHJvdXRlci5wdXNoKHtwYXRoOiIvbWFuYWdlVG9waWMvbGlzdCJ9KSxuLiRub3RpZnkoe3RpdGxlOiLpgJrnn6UiLG1lc3NhZ2U6Iue8lui+keaIkOWKnyIsdHlwZToic3VjY2VzcyJ9KSl9KX0pfSxoYW5kbGVQY0F2YXRhclN1Y2Nlc3M6ZnVuY3Rpb24oZSxuKXtpZihlLnN0YXR1cyl7dmFyIHQ9ZS5yZXN1bHQ7dGhpcy5lZGl0Rm9ybS5zcGVjaWFsX2hlYWRfdXJsPXR9fSxiZWZvcmVBdmF0YXJVcGxvYWQ6ZnVuY3Rpb24oZSl7dmFyIG49ZS50eXBlIGlueyJpbWFnZS9qcGVnIjohMCwiaW1hZ2UvcG5nIjohMCwiaW1hZ2UvanBnIjohMH0sdD1lLnNpemUvMTAyNC8xMDI0PDI7cmV0dXJuIG58fHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuivt+S4iuS8oOS4gOW8oOWbvueJhyEiKSx0fHx0aGlzLiRtZXNzYWdlLmVycm9yKCLkuIrkvKDlm77niYflpKflsI/kuI3og73otoXov4cgMk1CISIpLG4mJnR9fX0sTWE9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJ0b3BpYyBjcmVhdGUifSxbdCgiY2lyY2xlLXRpdGxlIix7c3RhdGljQ2xhc3M6ImNpY2xlLWNvbnRyb2xsZXIiLGF0dHJzOnsidGl0bGUtbmFtZSI6IuS4k+mimOe8lui+kSJ9fSksZS5fdigiICIpLHQoImVsLWZvcm0iLHtyZWY6ImVkaXRGb3JtIixzdGF0aWNDbGFzczoicnVsZS1mb3JtIixhdHRyczp7bW9kZWw6ZS5lZGl0Rm9ybSxydWxlczplLnJ1bGVzLCJsYWJlbC13aWR0aCI6IjEwMHB4In19LFt0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuS4k+mimOagh+mimCIscHJvcDoic3BlY2lhbF9uYW1lIn19LFt0KCJlbC1pbnB1dCIse21vZGVsOnt2YWx1ZTplLmVkaXRGb3JtLnNwZWNpYWxfbmFtZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5lZGl0Rm9ybSwic3BlY2lhbF9uYW1lIiwic3RyaW5nIj09dHlwZW9mIG4/bi50cmltKCk6bil9LGV4cHJlc3Npb246ImVkaXRGb3JtLnNwZWNpYWxfbmFtZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6e2xhYmVsOiLlm77moIfphY3nva4iLHByb3A6InNwZWNpYWxfaGVhZF91cmwifX0sW3QoImVsLXVwbG9hZCIse3N0YXRpY0NsYXNzOiJhdmF0YXItdXBsb2FkZXIiLGF0dHJzOnthY3Rpb246ZS5nZXRVcGxvYWRVcmwsaGVhZGVyczplLnVwbG9hZEhlYWRlcnMsInNob3ctZmlsZS1saXN0IjohMSwib24tc3VjY2VzcyI6ZS5oYW5kbGVQY0F2YXRhclN1Y2Nlc3MsImJlZm9yZS11cGxvYWQiOmUuYmVmb3JlQXZhdGFyVXBsb2FkfX0sW2UuZWRpdEZvcm0uc3BlY2lhbF9oZWFkX3VybD90KCJpbWciLHtzdGF0aWNDbGFzczoiYXZhdGFyIixhdHRyczp7c3JjOmUuZWRpdEZvcm0uc3BlY2lhbF9oZWFkX3VybH19KTp0KCJpIix7c3RhdGljQ2xhc3M6ImVsLWljb24tcGx1cyBhdmF0YXItdXBsb2FkZXItaWNvbiJ9KV0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLlvZLlsZ7popHpgZMiLHByb3A6ImNoYW5uZWxpZCJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiIifSxtb2RlbDp7dmFsdWU6ZS5lZGl0Rm9ybS5jaGFubmVsaWQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZWRpdEZvcm0sImNoYW5uZWxpZCIsbil9LGV4cHJlc3Npb246ImVkaXRGb3JtLmNoYW5uZWxpZCJ9fSxlLl9sKGUuY2hhbm5lbFR5cGVMaXN0LGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQoImVsLW9wdGlvbiIse2tleTpuLGF0dHJzOnt2YWx1ZTplLnZhbHVlLGxhYmVsOmUubGFiZWx9fSl9KSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJpbmRhdGUiLGF0dHJzOntsYWJlbDoi5pyJ5pWI5pyfIixyZXF1aXJlZDoiIn19LFt0KCJlbC1kYXRlLXBpY2tlciIse3N0YXRpY1N0eWxlOnt3aWR0aDoiMTAwJSJ9LGF0dHJzOntjbGVhcmFibGU6ITEsdHlwZToiZGF0ZXRpbWVyYW5nZSIsInJhbmdlLXNlcGFyYXRvciI6IuiHsyIsZm9ybWF0OiJ5eXl5LU1NLWRkIEhIOm1tIiwic3RhcnQtcGxhY2Vob2xkZXIiOiLlvIDlp4vml6XmnJ8iLCJlbmQtcGxhY2Vob2xkZXIiOiLnu5PmnZ/ml6XmnJ8ifSxtb2RlbDp7dmFsdWU6ZS5lZGl0Rm9ybS5pbmRhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZWRpdEZvcm0sImluZGF0ZSIsbil9LGV4cHJlc3Npb246ImVkaXRGb3JtLmluZGF0ZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuaOkuW6jyIscHJvcDoic29ydCJ9fSxbdCgiZWwtaW5wdXQiLHttb2RlbDp7dmFsdWU6ZS5lZGl0Rm9ybS5zb3J0LGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmVkaXRGb3JtLCJzb3J0IixlLl9uKG4pKX0sZXhwcmVzc2lvbjoiZWRpdEZvcm0uc29ydCJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IueKtuaAgemAieaLqSIscHJvcDoic3RhdGUifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntwbGFjZWhvbGRlcjoi6K+36YCJ5oupIn0sbW9kZWw6e3ZhbHVlOmUuZWRpdEZvcm0uc3RhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZWRpdEZvcm0sInN0YXRlIixuKX0sZXhwcmVzc2lvbjoiZWRpdEZvcm0uc3RhdGUifX0sW3QoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZToxLGxhYmVsOiLlkK/nlKgifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MCxsYWJlbDoi5YGc55SoIn19KV0sMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLFt0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToicHJpbWFyeSJ9LG9uOntjbGljazpmdW5jdGlvbihuKXtlLnN1Ym1pdEZvcm0oImVkaXRGb3JtIil9fX0sW2UuX3YoIuaPkOS6pCIpXSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse29uOntjbGljazplLmdvdG9MaXN0fX0sW2UuX3YoIuWPlua2iCIpXSldLDEpXSwxKV0sMSl9O01hLl93aXRoU3RyaXBwZWQ9ITA7dmFyIElhPXtyZW5kZXI6TWEsc3RhdGljUmVuZGVyRm5zOltdfSxUYT1JYTt2YXIgJGE9ITE7dmFyIHphPXQoIlZVLzgiKShCYSxUYSwhMSxmdW5jdGlvbihlKXskYXx8dCgidnJrUCIpfSwiZGF0YS12LTZkZWM0ZTE4IixudWxsKTt6YS5vcHRpb25zLl9fZmlsZT0ic3JjL2NvbXBvbmVudHMvbWFuYWdlVG9waWMvdG9waWNFZGl0LnZ1ZSI7dmFyIFVhPXphLmV4cG9ydHM7dmFyIE5hPXtjb21wb25lbnRzOntDaXJjbGVUaXRsZTplbn0sZGF0YTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsbj10aGlzLiRjcmVhdGVFbGVtZW50O3JldHVybntzbGlkZUZvcm06e2NoYXJ0X25hbWU6IiIsY2hhbm5lbGlkOiIiLHN0YXRlOiIiLHJlZ2lvbjoiIixkYXRlcmFuZ2U6W10sc29ydDoiMSIsc3RhcnREYXRlOiIiLGVuZERhdGU6IiJ9LGNsaWNrQ2VsbEluZGV4Oi0xLHRhYmxlSGVhZGVyOlt7cHJvcDoiY2hhcnRfbmFtZSIsbGFiZWw6IuWbvueJh+agh+mimCJ9LHtwcm9wOiJjcmVhdGV0aW1lIixsYWJlbDoi5Yib5bu65pel5pyfIixmb3JtYXR0ZXI6ZnVuY3Rpb24obix0LGEsaSl7cmV0dXJuIGUuJG9wdGlvbnMuZmlsdGVycy5Gb3JtYXREYXRlKGEsInl5eXktTU0tZGQgaGg6bW0iKX19LHtwcm9wOiJ1cGRhdGV0aW1lIixsYWJlbDoi5pu05paw5pel5pyfIixmb3JtYXR0ZXI6ZnVuY3Rpb24obix0LGEsaSl7cmV0dXJuIGUuJG9wdGlvbnMuZmlsdGVycy5Gb3JtYXREYXRlKGEsInl5eXktTU0tZGQgaGg6bW0iKX19LHtwcm9wOiJjaGFubmVsX25hbWUiLGxhYmVsOiLlvZLlsZ7popHpgZMifSx7cHJvcDoiY2hhcnRfaGVhZF91cmwiLGxhYmVsOiLova7mkq3lm77lm77niYciLGZvcm1hdHRlcjpmdW5jdGlvbihlLHQsYSxpKXtyZXR1cm4gbigiaW1nIix7Y2xhc3M6InRvcGljLXRhYmxlLXBpYyIsYXR0cnM6e3NyYzphfX0pfX0se3Byb3A6Imp1bXBfdHlwZSIsbGFiZWw6IuWFs+iBlOWGheWuuSIsZm9ybWF0dGVyOmZ1bmN0aW9uKGUsbix0LGEpe3JldHVybiAxPT09dCYmZS50aXRsZT8i56i/5Lu2LSIrZS50aXRsZToyPT09dCYmZS5zcGVjaWFsX25hbWU/IuS4k+mimC0iK2Uuc3BlY2lhbF9uYW1lOiLml6AifX0se3Byb3A6ImV4cGlyeV9kYXRlX3N0YXJ0IixsYWJlbDoi5pyJ5pWI5pyfIixmb3JtYXR0ZXI6ZnVuY3Rpb24obix0LGEsaSl7cmV0dXJuIGUuJG9wdGlvbnMuZmlsdGVycy5Gb3JtYXREYXRlKGEsInl5eXktTU0tZGQgaGg6bW0iKSsi6IezIitlLiRvcHRpb25zLmZpbHRlcnMuRm9ybWF0RGF0ZShuLmV4cGlyeV9kYXRlX2VuZCwieXl5eS1NTS1kZCBoaDptbSIpfX0se3Byb3A6InNob3dTdGF0ZSIsbGFiZWw6IueKtuaAgSJ9LHtwcm9wOiJzb3J0IixsYWJlbDoi5o6S5bqPIixmb3JtYXR0ZXI6ZnVuY3Rpb24odCxhLGksbCl7cmV0dXJuIGw9PT1lLmNsaWNrQ2VsbEluZGV4P24oImlucHV0Iix7YXR0cnM6e3R5cGU6InRleHQiLGlkOmwsYXV0b2ZvY3VzOiJhdXRvZm9jdXMifSxjbGFzczoic2VsZi1zb3J0Iixkb21Qcm9wczp7dmFsdWU6aX19KTpuKCJzcGFuIix7Y2xhc3M6InNvcnQtY29udGFpbmVyIixhdHRyczp7ImRhdGEtaWQiOmx9fSxbaV0pfX1dLHRhYmxlRGF0YTpbXSxzb3J0VmFsdWU6LTEscGFnZU5vOjEscGFnZVNpemU6MTAsdG90YWw6MCxjaGFubmVsVHlwZUxpc3Q6W10sc2VsZWN0Q2hhcnRJZDoiIn19LHdhdGNoOnsic2xpZGVGb3JtLmNoYXJ0X25hbWUiOmZ1bmN0aW9uKCl7dGhpcy5zZWFyY2hTbGlkZSgpfX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5nZXRTbGlkZUxpc3QoKSx0aGlzLmdldExpc3RVc2FibGVDaGFubmVsKCksdGhpcy4kcm9vdC5ldmVudEh1Yi4kb24oInJlc2V0LW9wdGlvbnMiLGZ1bmN0aW9uKCl7ZS5yZXNldE9wdGlvbnMoKX0pfSxhY3RpdmF0ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRyb3V0ZS5tZXRhO2UuaGFzT3duUHJvcGVydHkoInJlZnJlc2giKSYmZS5yZWZyZXNoJiYodGhpcy5nZXRTbGlkZUxpc3QoKSxkZWxldGUgdGhpcy4kcm91dGUubWV0YS5yZWZyZXNoKX0sYmVmb3JlUm91dGVMZWF2ZTpmdW5jdGlvbihlLG4sdCl7Ii9tYW5hZ2VTbGlkZS9jcmVhdGUiPT09ZS5wYXRoJiZ0aGlzLnJlc2V0T3B0aW9ucygpLHQoKX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMuJHJvb3QuZXZlbnRIdWIuJG9mZigicmVzZXQtb3B0aW9ucyIpfSxtZXRob2RzOntyZXNldE9wdGlvbnM6ZnVuY3Rpb24oKXt0aGlzLnNsaWRlRm9ybT17Y2hhcnRfbmFtZToiIixjaGFubmVsaWQ6IiIsc3RhdGU6IiIscmVnaW9uOiIiLGRhdGVyYW5nZTpbXSxzb3J0OiIxIixzdGFydERhdGU6IiIsZW5kRGF0ZToiIn0sdGhpcy5wYWdlTm89MSx0aGlzLmdldFNsaWRlTGlzdCgpfSxoYW5kbGVTaXplQ2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMucGFnZVNpemU9ZSx0aGlzLnNlYXJjaFNsaWRlKCl9LGhhbmRsZUN1cnJlbnRDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5wYWdlTm89ZSx0aGlzLmdldFNsaWRlTGlzdCgpfSxjZWxsQ2xpY2s6ZnVuY3Rpb24oZSxuLHQsYSl7dmFyIGk9dGhpcztpZihhLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoInNvcnQtY29udGFpbmVyIikpaWYoMSE9PWUuc3RhdGUpe3ZhciBsPWEudGFyZ2V0LmRhdGFzZXQuaWQ7bCYmKHRoaXMuY2xpY2tDZWxsSW5kZXg9cGFyc2VJbnQobCkpLHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiLmVsLXRvb2x0aXAgPiBpbnB1dC5zZWxmLXNvcnQiKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe24mJihpLnNlbGVjdENoYXJ0SWQ9ZS5jaGFydGlkLG4uZm9jdXMoKSxuLm9ua2V5dXA9ZnVuY3Rpb24oZSl7bi52YWx1ZSYmKGkuc29ydFZhbHVlPXBhcnNlSW50KG4udmFsdWUpKX0pfSl9KX1lbHNlIHRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOiLlkK/nlKjnirbmgIHkuIvkuI3og73mjpLluo8hIn0pfSxjZWxsTW91c2VMZWF2ZTpmdW5jdGlvbihlKXt2YXIgbix0PXRoaXM7aWYodGhpcy5jbGlja0NlbGxJbmRleD0tMSwtMT09PXRoaXMuc29ydFZhbHVlfHx0aGlzLnNlbGVjdENoYXJ0SWQhPT1lLmNoYXJ0aWQpcmV0dXJuITE7KG49e3JvdGF0aW9uQ2hhcnQ6e2NoYXJ0aWQ6ZS5jaGFydGlkLHNvcnQ6dGhpcy5zb3J0VmFsdWV9fSxiZSgibWFuYWdlci9Sb3RhdGlvbkNoYXJ0L3VwZGF0ZVNvcnQiLG4pKS50aGVuKGZ1bmN0aW9uKGUpe2Uuc3RhdHVzJiYodC5nZXRTbGlkZUxpc3QoKSx0LnNvcnRWYWx1ZT0tMSl9KX0sZ2V0U2xpZGVMaXN0OmZ1bmN0aW9uKCl7dmFyIGUsbj10aGlzLHQ9bnVsbCE9PXRoaXMuc2xpZGVGb3JtLnN0YXJ0RGF0ZT9uZXcgRGF0ZSh0aGlzLnNsaWRlRm9ybS5zdGFydERhdGUpLmdldFRpbWUoKTpudWxsLGE9bnVsbCE9PXRoaXMuc2xpZGVGb3JtLmVuZERhdGU/bmV3IERhdGUodGhpcy5zbGlkZUZvcm0uZW5kRGF0ZSkuZ2V0VGltZSgpOm51bGw7KGU9e3BhZ2VObzp0aGlzLnBhZ2VObyxwYWdlU2l6ZTp0aGlzLnBhZ2VTaXplLGNoYW5uZWxpZDp0aGlzLnNsaWRlRm9ybS5jaGFubmVsaWQsY2hhcnRfbmFtZTp0aGlzLnNsaWRlRm9ybS5jaGFydF9uYW1lLHN0YXRlOnRoaXMuc2xpZGVGb3JtLnN0YXRlLHRpbWVTdGFydDp0LHRpbWVFbmQ6YX0sYmUoIm1hbmFnZXIvUm90YXRpb25DaGFydC9wYWdlIixlKSkudGhlbihmdW5jdGlvbihlKXtpZihlLmRhdGEuc3RhdHVzKXt2YXIgdD1lLmRhdGEucmVzdWx0O24udGFibGVEYXRhPXQubGlzdCxuLnRvdGFsPXQudG90YWx9fSl9LGNoYW5nZVN0YXRlOmZ1bmN0aW9uKGUpe3ZhciBuLHQ9dGhpcyxhPTA7MT09PWUuc3RhdGU/YT0wOjA9PT1lLnN0YXRlJiYoYT0xKSwobj17cm90YXRpb25DaGFydDp7Y2hhcnRpZDplLmNoYXJ0aWQsc3RhdGU6YX19LGJlKCJtYW5hZ2VyL1JvdGF0aW9uQ2hhcnQvdXBkYXRlU3RhdGUiLG4pKS50aGVuKGZ1bmN0aW9uKGUpe2Uuc3RhdHVzJiYoMD09PWE/dC4kbWVzc2FnZSh7dHlwZToic3VjY2VzcyIsbWVzc2FnZToi5L+u5pS554q25oCB5Li65YGc55SoIn0pOnQuJG1lc3NhZ2Uoe3R5cGU6InN1Y2Nlc3MiLG1lc3NhZ2U6IuS/ruaUueeKtuaAgeS4uuWQr+eUqCJ9KSx0LmdldFNsaWRlTGlzdCgpKX0pfSxoYW5kbGVEZWxldGU6ZnVuY3Rpb24oZSl7dmFyIG49dGhpczsxIT09ZS5zdGF0ZT90aGlzLiRjb25maXJtKCfmmK/lkKbliKDpmaQiJytlLmNoYXJ0X25hbWUrJyI/Jywi5o+Q56S6Iix7Y29uZmlybUJ1dHRvblRleHQ6IuehruWumiIsY2FuY2VsQnV0dG9uVGV4dDoi5Y+W5raIIix0eXBlOiJ3YXJuaW5nIn0pLnRoZW4oZnVuY3Rpb24oKXt2YXIgdDsodD17cm90YXRpb25DaGFydDp7Y2hhcnRpZDplLmNoYXJ0aWR9fSxiZSgibWFuYWdlci9Sb3RhdGlvbkNoYXJ0L2RlbGV0ZSIsdCkpLnRoZW4oZnVuY3Rpb24oZSl7ZS5kYXRhLnN0YXR1cyYmbi4kbWVzc2FnZSh7dHlwZToic3VjY2VzcyIsbWVzc2FnZToi5Yig6Zmk5oiQ5YqfISJ9KSxuLmdldFNsaWRlTGlzdCgpfSl9KS5jYXRjaChmdW5jdGlvbigpe30pOnRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOiLlkK/nlKjnirbmgIHkuIvkuI3lj6/liKDpmaQhIn0pfSxoYW5kbGVFZGl0OmZ1bmN0aW9uKGUpezEhPT1lLnN0YXRlPyhzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCJjaGFydGlkIixlLmNoYXJ0aWQpLHRoaXMuJHJvdXRlci5wdXNoKHtwYXRoOiIvbWFuYWdlU2xpZGUvZWRpdCJ9KSk6dGhpcy4kbWVzc2FnZSh7dHlwZToiZXJyb3IiLG1lc3NhZ2U6IuWQr+eUqOeKtuaAgeS4i+S4jeWPr+e8lui+kSEifSl9LGdldExpc3RVc2FibGVDaGFubmVsOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt4ZSgpLnRoZW4oZnVuY3Rpb24obil7dmFyIHQ9bi5kYXRhO3Quc3RhdHVzJiZ0LnJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uKG4sdCxhKXt2YXIgaT17fTtpLmxhYmVsPW4uY2hhbm5lbF9uYW1lLGkudmFsdWU9bi5jaGFubmVsaWQsZS5jaGFubmVsVHlwZUxpc3QucHVzaChpKX0pfSl9LHNlYXJjaFNsaWRlOmZ1bmN0aW9uKCl7dGhpcy5wYWdlTm89MSx0aGlzLiRvcHRpb25zLmZpbHRlcnMuc3dhcFRpbWUodGhpcy5zbGlkZUZvcm0pLHRoaXMuZ2V0U2xpZGVMaXN0KCl9fX0sUmE9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJzbGlkZSJ9LFt0KCJkaXYiLFt0KCJjaXJjbGUtdGl0bGUiLHtzdGF0aWNDbGFzczoiY2ljbGUtY29udHJvbGxlciIsYXR0cnM6eyJ0aXRsZS1uYW1lIjoi6L2u5pKt5Zu+566h55CGIn19KSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InNlYXJjaC1mb3JtLWNvbnRhaW5lciJ9LFt0KCJlbC1mb3JtIix7c3RhdGljQ2xhc3M6ImRlbW8tZm9ybS1pbmxpbmUiLGF0dHJzOntpbmxpbmU6ITAsbW9kZWw6ZS5zbGlkZUZvcm19fSxbdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLmoIfpopgifX0sW3QoImVsLWlucHV0Iix7YXR0cnM6e2NsZWFyYWJsZToiIn0sbW9kZWw6e3ZhbHVlOmUuc2xpZGVGb3JtLmNoYXJ0X25hbWUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuc2xpZGVGb3JtLCJjaGFydF9uYW1lIixuKX0sZXhwcmVzc2lvbjoic2xpZGVGb3JtLmNoYXJ0X25hbWUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLlvZLlsZ7popHpgZMifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntmaWx0ZXJhYmxlOiIiLGNsZWFyYWJsZToiIixwbGFjZWhvbGRlcjoiIn0sb246e2NoYW5nZTplLnNlYXJjaFNsaWRlLGNsZWFyOmUuc2VhcmNoU2xpZGV9LG1vZGVsOnt2YWx1ZTplLnNsaWRlRm9ybS5jaGFubmVsaWQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuc2xpZGVGb3JtLCJjaGFubmVsaWQiLG4pfSxleHByZXNzaW9uOiJzbGlkZUZvcm0uY2hhbm5lbGlkIn19LGUuX2woZS5jaGFubmVsVHlwZUxpc3QsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtb3B0aW9uIix7a2V5Om4sYXR0cnM6e3ZhbHVlOmUudmFsdWUsbGFiZWw6ZS5sYWJlbH19KX0pLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6InNlYXJjaC1sZWZ0IixhdHRyczp7bGFiZWw6IueKtuaAgSJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiIifSxvbjp7Y2hhbmdlOmUuc2VhcmNoU2xpZGV9LG1vZGVsOnt2YWx1ZTplLnNsaWRlRm9ybS5zdGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5zbGlkZUZvcm0sInN0YXRlIixuKX0sZXhwcmVzc2lvbjoic2xpZGVGb3JtLnN0YXRlIn19LFt0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6IiIsbGFiZWw6IuWFqOmDqCJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZToxLGxhYmVsOiLlvoXkuIrnur8ifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MixsYWJlbDoi5bey5LiK57q/In19KSxlLl92KCIgIiksdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjMsbGFiZWw6Iui/h+acnyJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZTowLGxhYmVsOiLlgZznlKgifX0pXSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY1N0eWxlOnsibWFyZ2luLWxlZnQiOiItMjlweCJ9LGF0dHJzOntsYWJlbDoi5byA5aeL5pe26Ze0In19LFt0KCJlbC1kYXRlLXBpY2tlciIse2F0dHJzOnt0aXRsZTplLl9mKCJGb3JtYXREYXRlIikoZS5zbGlkZUZvcm0uc3RhcnREYXRlLCJ5eXl5LU1NLWRkIGhoOm1tIiksdHlwZToiZGF0ZXRpbWUiLGZvcm1hdDoieXl5eS1NTS1kZCBISDptbSIscGxhY2Vob2xkZXI6IumAieaLqeaXtumXtCJ9LG9uOntjaGFuZ2U6ZS5zZWFyY2hTbGlkZX0sbW9kZWw6e3ZhbHVlOmUuc2xpZGVGb3JtLnN0YXJ0RGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5zbGlkZUZvcm0sInN0YXJ0RGF0ZSIsbil9LGV4cHJlc3Npb246InNsaWRlRm9ybS5zdGFydERhdGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6InNsaWRlLWVuZC1kYXRlLWl0ZW0iLHN0YXRpY1N0eWxlOnsibWFyZ2luLWxlZnQiOiIyOXB4In0sYXR0cnM6e2xhYmVsOiLnu5PmnZ/ml7bpl7QifX0sW3QoImVsLWRhdGUtcGlja2VyIix7YXR0cnM6e3RpdGxlOmUuX2YoIkZvcm1hdERhdGUiKShlLnNsaWRlRm9ybS5lbmREYXRlLCJ5eXl5LU1NLWRkIGhoOm1tIiksdHlwZToiZGF0ZXRpbWUiLGZvcm1hdDoieXl5eS1NTS1kZCBISDptbSIscGxhY2Vob2xkZXI6IumAieaLqeaXtumXtCJ9LG9uOntjaGFuZ2U6ZS5zZWFyY2hTbGlkZX0sbW9kZWw6e3ZhbHVlOmUuc2xpZGVGb3JtLmVuZERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuc2xpZGVGb3JtLCJlbmREYXRlIixuKX0sZXhwcmVzc2lvbjoic2xpZGVGb3JtLmVuZERhdGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7c3RhdGljU3R5bGU6eyJtYXJnaW4tbGVmdCI6IjQwcHgifSxhdHRyczp7dHlwZToicHJpbWFyeSJ9LG9uOntjbGljazplLnNlYXJjaFNsaWRlfX0sW2UuX3YoIlxuICAgICAgICAgIOafpeivolxuICAgICAgICAgICIpLHQoImkiLHtzdGF0aWNDbGFzczoiZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQifSldKSxlLl92KCIgIiksdCgicm91dGVyLWxpbmsiLHthdHRyczp7dG86Ii9tYW5hZ2VTbGlkZS9jcmVhdGUifX0sW3QoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5In19LFtlLl92KCJcbiAgICAgICAgICAgIOa3u+WKoOi9ruaSreWbvlxuICAgICAgICAgICAgIiksdCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXBsdXMgZWwtaWNvbi0tcmlnaHQifSldKV0sMSldLDEpXSwxKV0sMSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJ0YWJsZS1saXN0In0sW3QoImVsLXRhYmxlIix7cmVmOiJzbGlkZVRhYmxlIixzdGF0aWNDbGFzczoid2hvbGUtdGFibGUiLGF0dHJzOntkYXRhOmUudGFibGVEYXRhLHN0cmlwZToiIiwibWluLWhlaWdodCI6IjQwMCJ9LG9uOnsiY2VsbC1jbGljayI6ZS5jZWxsQ2xpY2ssImNlbGwtbW91c2UtbGVhdmUiOmUuY2VsbE1vdXNlTGVhdmV9fSxbZS5fbChlLnRhYmxlSGVhZGVyLGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQoImVsLXRhYmxlLWNvbHVtbiIse2tleTpuLGF0dHJzOntwcm9wOmUucHJvcCxsYWJlbDplLmxhYmVsLHdpZHRoOmUud2lkdGgsZm9ybWF0dGVyOmUuZm9ybWF0dGVyLGFsaWduOiJjZW50ZXIiLGZpeGVkOiIiLCJzaG93LW92ZXJmbG93LXRvb2x0aXAiOiIifX0pfSksZS5fdigiICIpLHQoImVsLXRhYmxlLWNvbHVtbiIse2F0dHJzOntmaXhlZDoicmlnaHQiLGxhYmVsOiLmk43kvZwiLGFsaWduOiJjZW50ZXIiLHdpZHRoOiIxMDAifSxzY29wZWRTbG90czplLl91KFt7a2V5OiJkZWZhdWx0IixmbjpmdW5jdGlvbihuKXtyZXR1cm5bdCgiZWwtdG9vbHRpcCIse3N0YXRpY0NsYXNzOiJpdGVtIixhdHRyczp7ZWZmZWN0OiJkYXJrIixjb250ZW50OiLkv67mlLnnirbmgIEiLHBsYWNlbWVudDoidG9wIn19LFt0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToidGV4dCIsc2l6ZToic21hbGwiLGljb246ImVsLWljb24tcmVtb3ZlLW91dGxpbmUifSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5jaGFuZ2VTdGF0ZShuLnJvdyl9fX0pXSwxKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InRleHQiLHNpemU6InNtYWxsIixpY29uOiJlbC1pY29uLWVkaXQifSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVFZGl0KG4ucm93KX19fSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJ0ZXh0IixzaXplOiJzbWFsbCIsaWNvbjoiZWwtaWNvbi1kZWxldGUifSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVEZWxldGUobi5yb3cpfX19KV19fV0pfSldLDIpLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoicGFnaW5hdGlvbiJ9LFt0KCJlbC1wYWdpbmF0aW9uIix7YXR0cnM6e3RvdGFsOmUudG90YWwsInBhZ2Utc2l6ZXMiOlsxMCwyMCwzMCw0MF0sImN1cnJlbnQtcGFnZSI6ZS5wYWdlTm8sYmFja2dyb3VuZDoiIixsYXlvdXQ6InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQifSxvbjp7InNpemUtY2hhbmdlIjplLmhhbmRsZVNpemVDaGFuZ2UsImN1cnJlbnQtY2hhbmdlIjplLmhhbmRsZUN1cnJlbnRDaGFuZ2V9fSldLDEpXSwxKV0pfTtSYS5fd2l0aFN0cmlwcGVkPSEwO3ZhciBWYT17cmVuZGVyOlJhLHN0YXRpY1JlbmRlckZuczpbXX0samE9VmE7dmFyIFBhPSExO3ZhciBIYT10KCJWVS84IikoTmEsamEsITEsZnVuY3Rpb24oZSl7UGF8fCh0KCJla1g1IiksdCgid3U4ViIpKX0sImRhdGEtdi0wMGRhZTUwYyIsbnVsbCk7SGEub3B0aW9ucy5fX2ZpbGU9InNyYy9jb21wb25lbnRzL21hbmFnZVNsaWRlL3NsaWRlTGlzdC52dWUiO3ZhciBRYT1IYS5leHBvcnRzLFdhPXtuYW1lOiJBZGRUb3BpYyIsZGF0YTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJue3RvcGljRm9ybTp7Y2hhbm5lbGlkOiIiLGNoYW5uZWxfbmFtZToiIixzcGVjaWFsX25hbWU6IiIsZGF0ZXJhbmdlOltdLHN0YXJ0RGF0ZToiIixlbmREYXRlOiIifSx0YWJsZUhlYWRlcjpbe3Byb3A6InNwZWNpYWxfbmFtZSIsbGFiZWw6IuS4k+mimOagh+mimCJ9LHtwcm9wOiJ1cGRhdGV0aW1lIixsYWJlbDoi5pu05paw5pel5pyfIixmb3JtYXR0ZXI6ZnVuY3Rpb24obix0LGEsaSl7cmV0dXJuIGUuJG9wdGlvbnMuZmlsdGVycy5Gb3JtYXREYXRlKGEsInl5eXktTU0tZGQgaGg6bW0iKX19LHtwcm9wOiJjaGFubmVsX25hbWUiLGxhYmVsOiLlvZLlsZ7popHpgZMifSx7cHJvcDoiZXhwaXJ5X2RhdGVfc3RhcnQiLGxhYmVsOiLmnInmlYjml6XmnJ8iLGZvcm1hdHRlcjpmdW5jdGlvbihuLHQsYSxpKXtyZXR1cm4gZS4kb3B0aW9ucy5maWx0ZXJzLkZvcm1hdERhdGUoYSwieXl5eS1NTS1kZCBoaDptbSIpKyLoh7MiK2UuJG9wdGlvbnMuZmlsdGVycy5Gb3JtYXREYXRlKG4uZXhwaXJ5X2RhdGVfZW5kLCJ5eXl5LU1NLWRkIGhoOm1tIil9fV0sdGFibGVEYXRhOltdLGxpc3RVc2FibGVDaGFubmVsOltdLHBhZ2VObzoxLHBhZ2VTaXplOjEwLHRvdGFsOjAsc2VsZWN0Um93OltdfX0sd2F0Y2g6eyJ0b3BpY0Zvcm0uc3BlY2lhbF9uYW1lIjpmdW5jdGlvbigpe3RoaXMuc2VhcmNoU3BlY2lhbCgpfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuZ2V0VG9waWNMaXN0KCksdGhpcy5nZXRMaXN0VXNhYmxlQ2hhbm5lbCgpfSxtZXRob2RzOntnZXRUb3BpY0xpc3Q6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2dhKHtwYWdlTm86dGhpcy5wYWdlTm8scGFnZVNpemU6dGhpcy5wYWdlU2l6ZSxzdGF0ZToyfSkudGhlbihmdW5jdGlvbihuKXtpZihuLnN0YXR1cyl7dmFyIHQ9bi5kYXRhLnJlc3VsdDtlLnRhYmxlRGF0YT10Lmxpc3QsY29uc29sZS5sb2codCksZS50b3RhbD10LnRvdGFsfX0pfSxnZXRMaXN0VXNhYmxlQ2hhbm5lbDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7eGUoKS50aGVuKGZ1bmN0aW9uKG4pe24uZGF0YS5zdGF0dXMmJm4uZGF0YS5yZXN1bHQuZm9yRWFjaChmdW5jdGlvbihuLHQsYSl7dmFyIGk9e307aS5sYWJlbD1uLmNoYW5uZWxfbmFtZSxpLnZhbHVlPW4uY2hhbm5lbGlkLGUubGlzdFVzYWJsZUNoYW5uZWwucHVzaChpKX0pfSl9LG9uU3VibWl0OmZ1bmN0aW9uKCl7Y29uc29sZS5sb2coInN1Ym1pdCEiKX0saGFuZGxlU2l6ZUNoYW5nZTpmdW5jdGlvbihlKXt0aGlzLnBhZ2VTaXplPWUsdGhpcy5zZWFyY2hTcGVjaWFsKCl9LGhhbmRsZUN1cnJlbnRDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5wYWdlTm89ZSx0aGlzLnNlYXJjaFNwZWNpYWwoKX0sdG9nZ2xlQWxsU2VsZWN0aW9uOmZ1bmN0aW9uKGUpe3RoaXMuJHJlZnMuY2hhbm5lbFRhYmxlLnRvZ2dsZUFsbFNlbGVjdGlvbigpfSxzZWxlY3Q6ZnVuY3Rpb24oZSxuKXt0aGlzLnNlbGVjdFJvdz1uLGUubGVuZ3RoPjEmJmUuc2hpZnQoKX0sc2VsZWN0QWxsOmZ1bmN0aW9uKGUpe3RoaXMuJHJlZnMuYWRkTWFudS5jbGVhclNlbGVjdGlvbigpLHRoaXMuc2VsZWN0Um93PXt9fSxzZWFyY2hTcGVjaWFsOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiRvcHRpb25zLmZpbHRlcnMuc3dhcFRpbWUodGhpcy50b3BpY0Zvcm0pO3ZhciBuPW51bGwhPT10aGlzLnRvcGljRm9ybS5zdGFydERhdGU/bmV3IERhdGUodGhpcy50b3BpY0Zvcm0uc3RhcnREYXRlKS5nZXRUaW1lKCk6bnVsbCx0PW51bGwhPT10aGlzLnRvcGljRm9ybS5lbmREYXRlP25ldyBEYXRlKHRoaXMudG9waWNGb3JtLmVuZERhdGUpLmdldFRpbWUoKTpudWxsO2dhKHtwYWdlTm86dGhpcy5wYWdlTm8scGFnZVNpemU6dGhpcy5wYWdlU2l6ZSxjaGFubmVsaWQ6dGhpcy50b3BpY0Zvcm0uY2hhbm5lbGlkLHNwZWNpYWxfbmFtZTp0aGlzLnRvcGljRm9ybS5zcGVjaWFsX25hbWUsc3RhdGU6Mix0aW1lU3RhcnQ6bix0aW1lRW5kOnR9KS50aGVuKGZ1bmN0aW9uKG4pe2lmKG4uZGF0YS5zdGF0dXMpe3ZhciB0PW4uZGF0YS5yZXN1bHQ7ZS50YWJsZURhdGE9dC5saXN0LGUudG90YWw9dC50b3RhbH19KX0sbm90aWZ5UGFyZW50U2VsZWN0ZWRSb3c6ZnVuY3Rpb24oKXt0aGlzLiRlbWl0KCJzZWxlY3RlZC1yb3ciLHRoaXMuc2VsZWN0Um93KX19fSxPYT1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1lLiRjcmVhdGVFbGVtZW50LHQ9ZS5fc2VsZi5fY3x8bjtyZXR1cm4gdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImFkZFVybCJ9LFt0KCJlbC1mb3JtIix7c3RhdGljQ2xhc3M6ImRlbW8tZm9ybS1pbmxpbmUiLGF0dHJzOntpbmxpbmU6ITAsbW9kZWw6ZS50b3BpY0Zvcm0sc2l6ZToic21hbGwifX0sW3QoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5LiT6aKY5qCH6aKYIn19LFt0KCJlbC1pbnB1dCIse2F0dHJzOntjbGVhcmFibGU6IiJ9LG1vZGVsOnt2YWx1ZTplLnRvcGljRm9ybS5zcGVjaWFsX25hbWUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUudG9waWNGb3JtLCJzcGVjaWFsX25hbWUiLG4pfSxleHByZXNzaW9uOiJ0b3BpY0Zvcm0uc3BlY2lhbF9uYW1lIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5b2S5bGe6aKR6YGTIn19LFt0KCJlbC1zZWxlY3QiLHthdHRyczp7ZmlsdGVyYWJsZToiIixjbGVhcmFibGU6IiIscGxhY2Vob2xkZXI6IiJ9LG9uOntjbGVhcjplLnNlYXJjaFNwZWNpYWwsY2hhbmdlOmUuc2VhcmNoU3BlY2lhbH0sbW9kZWw6e3ZhbHVlOmUudG9waWNGb3JtLmNoYW5uZWxpZCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS50b3BpY0Zvcm0sImNoYW5uZWxpZCIsbil9LGV4cHJlc3Npb246InRvcGljRm9ybS5jaGFubmVsaWQifX0sZS5fbChlLmxpc3RVc2FibGVDaGFubmVsLGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQoImVsLW9wdGlvbiIse2tleTpuLGF0dHJzOnt2YWx1ZTplLnZhbHVlLGxhYmVsOmUubGFiZWx9fSl9KSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJkYXRlLWxlZnQiLGF0dHJzOntsYWJlbDoi5byA5aeL5pe26Ze0In19LFt0KCJlbC1kYXRlLXBpY2tlciIse2F0dHJzOnt0aXRsZTplLl9mKCJGb3JtYXREYXRlIikoZS50b3BpY0Zvcm0uc3RhcnREYXRlLCJ5eXl5LU1NLWRkIGhoOm1tIiksdHlwZToiZGF0ZXRpbWUiLGZvcm1hdDoieXl5eS1NTS1kZCBISDptbSIscGxhY2Vob2xkZXI6IumAieaLqeaXpeacnyJ9LG9uOntjaGFuZ2U6ZS5zZWFyY2hTcGVjaWFsfSxtb2RlbDp7dmFsdWU6ZS50b3BpY0Zvcm0uc3RhcnREYXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLnRvcGljRm9ybSwic3RhcnREYXRlIixuKX0sZXhwcmVzc2lvbjoidG9waWNGb3JtLnN0YXJ0RGF0ZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoiZGF0ZS1sZWZ0IixhdHRyczp7bGFiZWw6Iue7k+adn+aXtumXtCJ9fSxbdCgiZWwtZGF0ZS1waWNrZXIiLHthdHRyczp7dGl0bGU6ZS5fZigiRm9ybWF0RGF0ZSIpKGUudG9waWNGb3JtLnN0YXJ0RGF0ZSwieXl5eS1NTS1kZCBoaDptbSIpLGZvcm1hdDoieXl5eS1NTS1kZCBISDptbSIsdHlwZToiZGF0ZXRpbWUiLHBsYWNlaG9sZGVyOiLpgInmi6nml6XmnJ8ifSxvbjp7Y2hhbmdlOmUuc2VhcmNoU3BlY2lhbH0sbW9kZWw6e3ZhbHVlOmUudG9waWNGb3JtLmVuZERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUudG9waWNGb3JtLCJlbmREYXRlIixuKX0sZXhwcmVzc2lvbjoidG9waWNGb3JtLmVuZERhdGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6ImJ0bi1jb250YWluZXIifSxbdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InByaW1hcnkifSxvbjp7Y2xpY2s6ZS5zZWFyY2hTcGVjaWFsfX0sW2UuX3YoIlxuICAgICAgICDmn6Xor6JcbiAgICAgICAgIiksdCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCJ9KV0pXSwxKV0sMSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJ0YWJsZS1saXN0In0sW3QoImVsLXRhYmxlIix7cmVmOiJjaGFubmVsVGFibGUiLHN0YXRpY0NsYXNzOiJ3aG9sZS10YWJsZSIsYXR0cnM6e2RhdGE6ZS50YWJsZURhdGEsc3RyaXBlOiIiLCJtaW4taGVpZ2h0IjoiNDAwIixzaXplOiJzbWFsbCJ9LG9uOntzZWxlY3Q6ZS5zZWxlY3QsInNlbGVjdC1hbGwiOmUuc2VsZWN0QWxsfX0sW3QoImVsLXRhYmxlLWNvbHVtbiIse2F0dHJzOnt0eXBlOiJzZWxlY3Rpb24iLGFsaWduOiJjZW50ZXIiLHdpZHRoOiI1NSJ9fSksZS5fdigiICIpLGUuX2woZS50YWJsZUhlYWRlcixmdW5jdGlvbihlLG4pe3JldHVybiB0KCJlbC10YWJsZS1jb2x1bW4iLHtrZXk6bixhdHRyczp7cHJvcDplLnByb3AsbGFiZWw6ZS5sYWJlbCx3aWR0aDplLndpZHRoLGZvcm1hdHRlcjplLmZvcm1hdHRlcixhbGlnbjoiY2VudGVyIixmaXhlZDoiIiwic2hvdy1vdmVyZmxvdy10b29sdGlwIjoiIn19KX0pXSwyKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InBhZ2luYXRpb24ifSxbdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InByaW1hcnkiLHNpemU6InNtYWxsIn0sb246e2NsaWNrOmUubm90aWZ5UGFyZW50U2VsZWN0ZWRSb3d9fSxbZS5fdigi56Gu5a6aIildKSxlLl92KCIgIiksdCgiZWwtcGFnaW5hdGlvbiIse2F0dHJzOnt0b3RhbDplLnRvdGFsLCJwYWdlLXNpemVzIjpbMTAsMjAsMzAsNDBdLGJhY2tncm91bmQ6IiIsbGF5b3V0OiJ0b3RhbCwgc2l6ZXMsIHByZXYsIHBhZ2VyLCBuZXh0In0sb246eyJzaXplLWNoYW5nZSI6ZS5oYW5kbGVTaXplQ2hhbmdlLCJjdXJyZW50LWNoYW5nZSI6ZS5oYW5kbGVDdXJyZW50Q2hhbmdlfX0pXSwxKV0sMSldLDEpfTtPYS5fd2l0aFN0cmlwcGVkPSEwO3ZhciBxYT17cmVuZGVyOk9hLHN0YXRpY1JlbmRlckZuczpbXX0sWWE9cWE7dmFyIFphPSExO3ZhciBHYT10KCJWVS84IikoV2EsWWEsITEsZnVuY3Rpb24oZSl7WmF8fCh0KCJoZ2dvIiksdCgiQUpzVCIpKX0sImRhdGEtdi0xZjc2MmZmZSIsbnVsbCk7R2Eub3B0aW9ucy5fX2ZpbGU9InNyYy9jb21wb25lbnRzL21hbmFnZVNsaWRlL2FkZFRvcGljLnZ1ZSI7dmFyIEphPUdhLmV4cG9ydHM7ZnVuY3Rpb24gWGEoZSl7cmV0dXJuIGJlKCJtYW5hZ2VyL0FydGljbGUvcGFnZSIsZSl9dmFyIEthPXtuYW1lOiJBZGRNYW51c2NyaXB0IixkYXRhOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPXRoaXMuJGNyZWF0ZUVsZW1lbnQ7cmV0dXJue21hbnVTY3JpcHQ6e2NoYW5uZWxfbmFtZToiIixzdGF0ZToiIixzb3J0OiIxIixzdGFydERhdGU6IiIsZW5kRGF0ZToiIixjaGFubmVsaWQ6IiIsdGl0bGU6IiIsc3BlY2lhbGlkOiIifSxjbGlja0NlbGxJbmRleDotMSx0YWJsZUhlYWRlcjpbe3Byb3A6InRpdGxlIixsYWJlbDoi56i/5Lu25Li76aKYIn0se3Byb3A6ImNyZWF0ZXRpbWUiLGxhYmVsOiLmjqjpgIHml6XmnJ8iLGZvcm1hdHRlcjpmdW5jdGlvbihuLHQsYSxpKXtyZXR1cm4gZS4kb3B0aW9ucy5maWx0ZXJzLkZvcm1hdERhdGUoYSwieXl5eS1NTS1kZCBoaDptbSIpfX0se3Byb3A6ImFydGljbGVfdXJsIixsYWJlbDoi56i/5Lu25YaF5a65Iixmb3JtYXR0ZXI6ZnVuY3Rpb24oZSx0LGEsaSl7cmV0dXJuIG4oImEiLHthdHRyczp7aHJlZjphLHRhcmdldDoiX2JsYW5rIn19LFsi5p+l55yL56i/5Lu25YaF5a65Il0pfX1dLGNoYW5uZWxUeXBlTGlzdDpbXSxzcGVjaWFsTGlzdDpbXSx0YWJsZURhdGE6W10scGFnZU5vOjEscGFnZVNpemU6MTAsdG90YWw6MCxzZWxlY3RSb3c6e319fSxjb21wdXRlZDp7c2hvd051bGxUYWc6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIWV8fGUubGVuZ3RoPD0wfX0sY2hhbm5lbFRhZ0NvbnRlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGU/IiI9PT1lLmNoYW5uZWxfbmFtZT8i5pegIjplLmNoYW5uZWxfbmFtZToi5pegIn19LHNwZWNpYWxUYWdDb250ZW50OmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBlPyIiPT09ZS5zcGVjaWFsX25hbWU/IuaXoCI6ZS5zcGVjaWFsX25hbWU6IuaXoCJ9fSxzaG93Q2hhbm5lbEFsbE5hbWU6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIG49IiI7cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihlLHQsYSl7dCE9PWEubGVuZ3RoLTE/bis9ZS5jaGFubmVsX25hbWUrIiwiOm4rPWUuY2hhbm5lbF9uYW1lfSksbn19LHNob3dTcGVjaWFsQWxsTmFtZTpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgbj0iIjtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUsdCxhKXthLmxlbmd0aCxuKz0i44CKIitlLnNwZWNpYWxfbmFtZSsi44CLIn0pLG59fX0sd2F0Y2g6eyJtYW51U2NyaXB0LnRpdGxlIjpmdW5jdGlvbigpe3RoaXMuc2VhcmNoTWFudVNjcmlwdCgpfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuZ2V0TXVudVNjcmlwdExpc3QoKSx0aGlzLmdldExpc3RVc2FibGVDaGFubmVsKCksdGhpcy5nZXRMaXN0VXNhYmxlU3BlY2lhbCgpfSxtZXRob2RzOntnZXRNdW51U2NyaXB0TGlzdDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7WGEoe3BhZ2VObzp0aGlzLnBhZ2VObyxwYWdlU2l6ZTp0aGlzLnBhZ2VTaXplLHN0YXRlOjF9KS50aGVuKGZ1bmN0aW9uKG4pe2lmKG4uZGF0YS5zdGF0dXMpe3ZhciB0PW4uZGF0YS5yZXN1bHQ7ZS50YWJsZURhdGE9dC5saXN0LGUudG90YWw9dC50b3RhbH19KX0sZ2V0TGlzdFVzYWJsZUNoYW5uZWw6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3hlKCkudGhlbihmdW5jdGlvbihuKXt2YXIgdD1uLmRhdGE7dC5zdGF0dXMmJnQucmVzdWx0LmZvckVhY2goZnVuY3Rpb24obix0LGEpe3ZhciBpPXt9O2kubGFiZWw9bi5jaGFubmVsX25hbWUsaS52YWx1ZT1uLmNoYW5uZWxpZCxlLmNoYW5uZWxUeXBlTGlzdC5wdXNoKGkpfSl9KX0sZ2V0TGlzdFVzYWJsZVNwZWNpYWw6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3dlKCkudGhlbihmdW5jdGlvbihuKXt2YXIgdD1uLmRhdGE7dC5zdGF0dXMmJnQucmVzdWx0LmZvckVhY2goZnVuY3Rpb24obix0LGEpe3ZhciBpPXt9O2kubGFiZWw9bi5zcGVjaWFsX25hbWUsaS52YWx1ZT1uLnNwZWNpYWxpZCxlLnNwZWNpYWxMaXN0LnB1c2goaSl9KX0pfSxzZWFyY2hNYW51U2NyaXB0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiRvcHRpb25zLmZpbHRlcnMuc3dhcFRpbWUodGhpcy5tYW51U2NyaXB0KTt2YXIgbj1udWxsIT09dGhpcy5tYW51U2NyaXB0LnN0YXJ0RGF0ZT9uZXcgRGF0ZSh0aGlzLm1hbnVTY3JpcHQuc3RhcnREYXRlKS5nZXRUaW1lKCk6bnVsbCx0PW51bGwhPT10aGlzLm1hbnVTY3JpcHQuZW5kRGF0ZT9uZXcgRGF0ZSh0aGlzLm1hbnVTY3JpcHQuZW5kRGF0ZSkuZ2V0VGltZSgpOm51bGw7WGEoe3BhZ2VObzp0aGlzLnBhZ2VObyxwYWdlU2l6ZTp0aGlzLnBhZ2VTaXplLGNoYW5uZWxpZDp0aGlzLm1hbnVTY3JpcHQuY2hhbm5lbGlkLHNwZWNpYWxpZDp0aGlzLm1hbnVTY3JpcHQuc3BlY2lhbGlkLHRpdGxlOnRoaXMubWFudVNjcmlwdC50aXRsZSxzdGF0ZToxLHRpbWVTdGFydDpuLHRpbWVFbmQ6dH0pLnRoZW4oZnVuY3Rpb24obil7aWYobi5kYXRhLnN0YXR1cyl7dmFyIHQ9bi5kYXRhLnJlc3VsdDtlLnRhYmxlRGF0YT10Lmxpc3QsZS50b3RhbD10LnRvdGFsfX0pfSxvblN1Ym1pdDpmdW5jdGlvbigpe2NvbnNvbGUubG9nKCJzdWJtaXQhIil9LGhhbmRsZVNpemVDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5wYWdlU2l6ZT1lLHRoaXMuc2VhcmNoTWFudVNjcmlwdCgpfSxoYW5kbGVDdXJyZW50Q2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMucGFnZU5vPWUsdGhpcy5zZWFyY2hNYW51U2NyaXB0KCl9LHNlbGVjdDpmdW5jdGlvbihlLG4pe3RoaXMuc2VsZWN0Um93PW4sZS5sZW5ndGg+MSYmZS5zaGlmdCgpfSxzZWxlY3RBbGw6ZnVuY3Rpb24oZSl7dGhpcy4kcmVmcy5hZGRNYW51LmNsZWFyU2VsZWN0aW9uKCksdGhpcy5zZWxlY3RSb3c9e319LG5vdGlmeVBhcmVudFNlbGVjdGVkUm93OmZ1bmN0aW9uKCl7dGhpcy4kZW1pdCgic2VsZWN0ZWQtcm93Iix0aGlzLnNlbGVjdFJvdyl9fX0sZWk9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJhZGRVcmwifSxbdCgiZWwtZm9ybSIse3N0YXRpY0NsYXNzOiJkZW1vLWZvcm0taW5saW5lIixhdHRyczp7aW5saW5lOiEwLG1vZGVsOmUubWFudVNjcmlwdCxzaXplOiJzbWFsbCJ9fSxbdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLnqL/ku7bkuLvpopgifX0sW3QoImVsLWlucHV0Iix7YXR0cnM6e2NsZWFyYWJsZToiIn0sbW9kZWw6e3ZhbHVlOmUubWFudVNjcmlwdC50aXRsZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5tYW51U2NyaXB0LCJ0aXRsZSIsbil9LGV4cHJlc3Npb246Im1hbnVTY3JpcHQudGl0bGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLlvZLlsZ7popHpgZMifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntmaWx0ZXJhYmxlOiIiLGNsZWFyYWJsZToiIixwbGFjZWhvbGRlcjoiIn0sb246e2NoYW5nZTplLnNlYXJjaE1hbnVTY3JpcHQsY2xlYXI6ZS5zZWFyY2hNYW51U2NyaXB0fSxtb2RlbDp7dmFsdWU6ZS5tYW51U2NyaXB0LmNoYW5uZWxpZCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5tYW51U2NyaXB0LCJjaGFubmVsaWQiLG4pfSxleHByZXNzaW9uOiJtYW51U2NyaXB0LmNoYW5uZWxpZCJ9fSxlLl9sKGUuY2hhbm5lbFR5cGVMaXN0LGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQoImVsLW9wdGlvbiIse2tleTpuLGF0dHJzOnt2YWx1ZTplLnZhbHVlLGxhYmVsOmUubGFiZWx9fSl9KSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5b2S5bGe5LiT6aKYIn19LFt0KCJlbC1zZWxlY3QiLHthdHRyczp7ZmlsdGVyYWJsZToiIixjbGVhcmFibGU6IiIscGxhY2Vob2xkZXI6IiJ9LG9uOntjaGFuZ2U6ZS5zZWFyY2hNYW51U2NyaXB0LGNsZWFyOmUuc2VhcmNoTWFudVNjcmlwdH0sbW9kZWw6e3ZhbHVlOmUubWFudVNjcmlwdC5zcGVjaWFsaWQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUubWFudVNjcmlwdCwic3BlY2lhbGlkIixuKX0sZXhwcmVzc2lvbjoibWFudVNjcmlwdC5zcGVjaWFsaWQifX0sZS5fbChlLnNwZWNpYWxMaXN0LGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQoImVsLW9wdGlvbiIse2tleTpuLGF0dHJzOnt2YWx1ZTplLnZhbHVlLGxhYmVsOmUubGFiZWx9fSl9KSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJkYXRlLWxlZnQiLGF0dHJzOntsYWJlbDoi5byA5aeL5pe26Ze0In19LFt0KCJlbC1kYXRlLXBpY2tlciIse2F0dHJzOnt0aXRsZTplLl9mKCJGb3JtYXREYXRlIikoZS5tYW51U2NyaXB0LnN0YXJ0RGF0ZSwieXl5eS1NTS1kZCBoaDptbSIpLHR5cGU6ImRhdGV0aW1lIixmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLHBsYWNlaG9sZGVyOiLpgInmi6nml7bpl7QifSxvbjp7Y2hhbmdlOmUuc2VhcmNoTWFudVNjcmlwdH0sbW9kZWw6e3ZhbHVlOmUubWFudVNjcmlwdC5zdGFydERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUubWFudVNjcmlwdCwic3RhcnREYXRlIixuKX0sZXhwcmVzc2lvbjoibWFudVNjcmlwdC5zdGFydERhdGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6ImRhdGUtbGVmdCIsYXR0cnM6e2xhYmVsOiLnu5PmnZ/ml7bpl7QifX0sW3QoImVsLWRhdGUtcGlja2VyIix7YXR0cnM6e3RpdGxlOmUuX2YoIkZvcm1hdERhdGUiKShlLm1hbnVTY3JpcHQuZW5kRGF0ZSwieXl5eS1NTS1kZCBoaDptbSIpLHR5cGU6ImRhdGV0aW1lIixmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLHBsYWNlaG9sZGVyOiLpgInmi6nml7bpl7QifSxvbjp7Y2hhbmdlOmUuc2VhcmNoTWFudVNjcmlwdH0sbW9kZWw6e3ZhbHVlOmUubWFudVNjcmlwdC5lbmREYXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLm1hbnVTY3JpcHQsImVuZERhdGUiLG4pfSxleHByZXNzaW9uOiJtYW51U2NyaXB0LmVuZERhdGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6ImJ0bi1jb250YWluZXIifSxbdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InByaW1hcnkifSxvbjp7Y2xpY2s6ZS5zZWFyY2hNYW51U2NyaXB0fX0sW2UuX3YoIlxuICAgICAgICDmn6Xor6JcbiAgICAgICAgIiksdCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCJ9KV0pXSwxKV0sMSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJ0YWJsZS1saXN0In0sW3QoImVsLXRhYmxlIix7cmVmOiJhZGRNYW51IixzdGF0aWNDbGFzczoid2hvbGUtdGFibGUiLGF0dHJzOntkYXRhOmUudGFibGVEYXRhLHN0cmlwZToiIixzaXplOiJzbWFsbCAiLCJtaW4taGVpZ2h0IjoiNDAwIn0sb246e3NlbGVjdDplLnNlbGVjdCwic2VsZWN0LWFsbCI6ZS5zZWxlY3RBbGx9fSxbdCgiZWwtdGFibGUtY29sdW1uIix7YXR0cnM6e3R5cGU6InNlbGVjdGlvbiIsYWxpZ246ImNlbnRlciIsd2lkdGg6IjU1In19KSxlLl92KCIgIiksZS5fbChlLnRhYmxlSGVhZGVyLGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQoImVsLXRhYmxlLWNvbHVtbiIse2tleTpuLGF0dHJzOntwcm9wOmUucHJvcCxsYWJlbDplLmxhYmVsLHdpZHRoOmUud2lkdGgsZm9ybWF0dGVyOmUuZm9ybWF0dGVyLGFsaWduOiJjZW50ZXIiLGZpeGVkOiIiLCJzaG93LW92ZXJmbG93LXRvb2x0aXAiOiIifX0pfSksZS5fdigiICIpLHQoImVsLXRhYmxlLWNvbHVtbiIse2F0dHJzOntsYWJlbDoi5b2S5bGe6aKR6YGTIixhbGlnbjoiY2VudGVyIn0sc2NvcGVkU2xvdHM6ZS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24obil7cmV0dXJuW2Uuc2hvd051bGxUYWcobi5yb3cuYXJ0aWNsZUNoYW5uZWxMaXN0KT90KCJlbC10YWciLHthdHRyczp7c2l6ZToibWluaSJ9fSxbZS5fdigi5pegIildKTplLl9lKCksZS5fdigiICIpLHQoImVsLXRvb2x0aXAiLHtzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6e2NvbnRlbnQ6ZS5zaG93Q2hhbm5lbEFsbE5hbWUobi5yb3cuYXJ0aWNsZUNoYW5uZWxMaXN0KSxlZmZlY3Q6ImRhcmsiLHBsYWNlbWVudDoidG9wLXN0YXJ0In19LGUuX2wobi5yb3cuYXJ0aWNsZUNoYW5uZWxMaXN0LGZ1bmN0aW9uKG4sYSl7cmV0dXJuIHQoImVsLXRhZyIse2tleTphLGF0dHJzOntzaXplOiJtaW5pIn19LFtlLl92KCJcbiAgICAgICAgICAgICAgIitlLl9zKGUuY2hhbm5lbFRhZ0NvbnRlbnQobikpKyJcbiAgICAgICAgICAgICIpXSl9KSwxKV19fV0pfSksZS5fdigiICIpLHQoImVsLXRhYmxlLWNvbHVtbiIse2F0dHJzOntsYWJlbDoi5b2S5bGe5LiT6aKYIixhbGlnbjoiY2VudGVyIn0sc2NvcGVkU2xvdHM6ZS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24obil7cmV0dXJuW2Uuc2hvd051bGxUYWcobi5yb3cuYXJ0aWNsZVNwZWNpYWxMaXN0KT90KCJlbC10YWciLHthdHRyczp7c2l6ZToibWluaSJ9fSxbZS5fdigi5pegIildKTplLl9lKCksZS5fdigiICIpLHQoImVsLXRvb2x0aXAiLHtzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6eyJ2aXNpYmxlLWFycm93IjohMSxlZmZlY3Q6ImRhcmsiLHBsYWNlbWVudDoidG9wLXN0YXJ0In19LFt0KCJkaXYiLHthdHRyczp7c2xvdDoiY29udGVudCJ9LHNsb3Q6ImNvbnRlbnQifSxbZS5fdihlLl9zKGUuc2hvd1NwZWNpYWxBbGxOYW1lKG4ucm93LmFydGljbGVTcGVjaWFsTGlzdCkpKV0pLGUuX3YoIiAiKSxlLl9sKG4ucm93LmFydGljbGVTcGVjaWFsTGlzdCxmdW5jdGlvbihuLGEpe3JldHVybiB0KCJlbC10YWciLHtrZXk6YSxhdHRyczp7c2l6ZToibWluaSJ9fSxbZS5fdigiXG4gICAgICAgICAgICAgICIrZS5fcyhlLnNwZWNpYWxUYWdDb250ZW50KG4pKSsiXG4gICAgICAgICAgICAiKV0pfSldLDIpXX19XSl9KSxlLl92KCIgIiksdCgiZWwtdGFibGUtY29sdW1uIix7YXR0cnM6e2xhYmVsOiLnva7pobbnirbmgIEiLGFsaWduOiJjZW50ZXIifSxzY29wZWRTbG90czplLl91KFt7a2V5OiJkZWZhdWx0IixmbjpmdW5jdGlvbihuKXtyZXR1cm5bbi5yb3cudG9wP3QoImVsLXRhZyIse3N0YXRpY0NsYXNzOiJzZXRQb2ludGVyIixhdHRyczp7c2l6ZToibWluaSJ9fSxbZS5fdigiXG4gICAgICAgICAgICDlt7Lnva7pobZcbiAgICAgICAgICAiKV0pOnQoImVsLXRhZyIse3N0YXRpY0NsYXNzOiJzZXRQb2ludGVyIixhdHRyczp7c2l6ZToibWluaSJ9fSxbZS5fdigiXG4gICAgICAgICAgICDmnKrnva7pobZcbiAgICAgICAgICAiKV0pXX19XSl9KV0sMiksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJwYWdpbmF0aW9uIn0sW3QoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5IixzaXplOiJzbWFsbCJ9LG9uOntjbGljazplLm5vdGlmeVBhcmVudFNlbGVjdGVkUm93fX0sW2UuX3YoIuehruWumiIpXSksZS5fdigiICIpLHQoImVsLXBhZ2luYXRpb24iLHthdHRyczp7dG90YWw6ZS50b3RhbCwicGFnZS1zaXplcyI6WzEwLDIwLDMwLDQwXSxiYWNrZ3JvdW5kOiIiLGxheW91dDoidG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dCJ9LG9uOnsic2l6ZS1jaGFuZ2UiOmUuaGFuZGxlU2l6ZUNoYW5nZSwiY3VycmVudC1jaGFuZ2UiOmUuaGFuZGxlQ3VycmVudENoYW5nZX19KV0sMSldLDEpXSwxKX07ZWkuX3dpdGhTdHJpcHBlZD0hMDt2YXIgbmk9e3JlbmRlcjplaSxzdGF0aWNSZW5kZXJGbnM6W119LHRpPW5pO3ZhciBhaT0hMTt2YXIgaWk9dCgiVlUvOCIpKEthLHRpLCExLGZ1bmN0aW9uKGUpe2FpfHwodCgiSFpVaSIpLHQoImUyU1YiKSl9LCJkYXRhLXYtMjkwYzYzMDQiLG51bGwpO2lpLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9tYW5hZ2VTbGlkZS9hZGRNYW51c2NyaXB0LnZ1ZSI7dmFyIGxpPWlpLmV4cG9ydHMsb2k9e2NvbXBvbmVudHM6e0NpcmNsZVRpdGxlOmVuLEFkZE1hbnVzY3JpcHQ6bGksQWRkVG9waWM6SmF9LG1peGluczpbeGFdLGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57cnVsZUZvcm06e2NoYXJ0X25hbWU6IiIsaWNvbjoiIixpbWFnZVVybDoiIixpbmRhdGU6W25ldyBEYXRlLG5ldyBEYXRlXSxzb3J0OiIiLGNoYW5uZWxpZDoiIixyZWxhdGl2ZUNvbnRlbnQ6IiIsc3RhdGU6MH0scmFkaW86Iueov+S7tiIsaXNDaG9vc2VEYXRlOiExLGRpYWxvZ1Zpc2libGU6ITEsY29tcG9uZW50TmFtZToiQWRkTWFudXNjcmlwdCIscnVsZXM6e2NoYXJ0X25hbWU6W3tyZXF1aXJlZDohMCxtZXNzYWdlOiLor7fovpPlhaXova7mkq3lm77moIfpopgiLHRyaWdnZXI6ImJsdXIifSx7bWluOjAsbWF4OjY0LG1lc3NhZ2U6Iuagh+mimOmZkOWumjY05Liq5a2X56ym5YaFIix0cmlnZ2VyOiJjaGFuZ2UifV0sY2hhbm5lbGlkOlt7cmVxdWlyZWQ6ITAsbWVzc2FnZToi6K+36YCJ5oup5b2S5bGe6aKR6YGTIix0cmlnZ2VyOiJibHVyIn1dLHNvcnQ6W3tyZXF1aXJlZDohMCxtZXNzYWdlOiLor7fovpPlhaXmjpLluo8iLHRyaWdnZXI6ImJsdXIifSx7dHlwZToibnVtYmVyIixtZXNzYWdlOiLmjpLluo/lv4XpobvkuLrmlbDlrZcifV0saWNvbjpbe3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+S4iuS8oOWbvueJhyIsdHJpZ2dlcjoiYmx1ciJ9XSxyZWxhdGl2ZUNvbnRlbnQ6e3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+mAieaLqeWFs+iBlOWGheWuuSIsdHJpZ2dlcjoiYmx1ciJ9fSxjaGFydGlkOiIiLGNoYW5uZWxUeXBlTGlzdDpbXSxqdW1wX3R5cGU6MCxhcnRpY2xlaWQ6IiIsc3BlY2lhbGlkOiIiLGp1bXBfdXJsOiIifX0sY29tcHV0ZWQ6e2dldFVwbG9hZFVybDpmdW5jdGlvbigpe3JldHVybiBfZSgpfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuZ2V0TGlzdFVzYWJsZUNoYW5uZWwoKX0sbWV0aG9kczp7aGFuZGxlT3BlcmF0aW9uQ2xpY2s6ZnVuY3Rpb24oZSl7aWYoZSlzd2l0Y2goZSl7Y2FzZSLnqL/ku7YiOnRoaXMuY29tcG9uZW50TmFtZT0iQWRkTWFudXNjcmlwdCI7YnJlYWs7Y2FzZSLkuJPpopgiOnRoaXMuY29tcG9uZW50TmFtZT0iQWRkVG9waWMifX0sc3VibWl0Rm9ybTpmdW5jdGlvbihlKXt2YXIgbj10aGlzO3RoaXMuJHJlZnNbZV0udmFsaWRhdGUoZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuIGNvbnNvbGUubG9nKCJlcnJvciBzdWJtaXQhISIpLCExO3ZhciB0Oyh0PXtyb3RhdGlvbkNoYXJ0OntjaGFydF9uYW1lOm4ucnVsZUZvcm0uY2hhcnRfbmFtZSxjaGFydF9oZWFkX3VybDpuLnJ1bGVGb3JtLmljb24sanVtcF90eXBlOm4uanVtcF90eXBlLGFydGljbGVpZDpuLmFydGljbGVpZCxzcGVjaWFsaWQ6bi5zcGVjaWFsaWQsY2hhbm5lbGlkOm4ucnVsZUZvcm0uY2hhbm5lbGlkLGV4cGlyeV9kYXRlX3N0YXJ0Om5ldyBEYXRlKG4ucnVsZUZvcm0uaW5kYXRlWzBdKS5nZXRUaW1lKCksZXhwaXJ5X2RhdGVfZW5kOm5ldyBEYXRlKG4ucnVsZUZvcm0uaW5kYXRlWzFdKS5nZXRUaW1lKCksc29ydDpuLnJ1bGVGb3JtLnNvcnQsc3RhdGU6bi5ydWxlRm9ybS5zdGF0ZX19LGJlKCJtYW5hZ2VyL1JvdGF0aW9uQ2hhcnQvYWRkIix0KSkudGhlbihmdW5jdGlvbihlKXsyMDA9PT1lLnN0YXR1cyYmKG4uJHJvdXRlci5wdXNoKHtwYXRoOiIvbWFuYWdlU2xpZGUvbGlzdCJ9KSxuLiRub3RpZnkoe3RpdGxlOiLpgJrnn6UiLG1lc3NhZ2U6Iua3u+WKoOaIkOWKnyIsdHlwZToic3VjY2VzcyJ9KSl9KX0pfSxoYW5kbGVQY0F2YXRhclN1Y2Nlc3M6ZnVuY3Rpb24oZSxuKXtpZihlLnN0YXR1cyl7dmFyIHQ9ZS5yZXN1bHQ7dGhpcy5ydWxlRm9ybS5pY29uPXR9fSxiZWZvcmVBdmF0YXJVcGxvYWQ6ZnVuY3Rpb24oZSl7dmFyIG49ZS50eXBlIGlueyJpbWFnZS9qcGVnIjohMCwiaW1hZ2UvcG5nIjohMCwiaW1hZ2UvanBnIjohMH0sdD1lLnNpemUvMTAyNC8xMDI0PDI7cmV0dXJuIG58fHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuS4iuS8oOWbvueJh+WPquiDveaYryBKUEcg5qC85byPISIpLHR8fHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuS4iuS8oOWbvueJh+Wkp+Wwj+S4jeiDvei2hei/hyAyTUIhIiksbiYmdH0sZ2V0TGlzdFVzYWJsZUNoYW5uZWw6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3hlKCkudGhlbihmdW5jdGlvbihuKXt2YXIgdD1uLmRhdGE7dC5zdGF0dXMmJnQucmVzdWx0LmZvckVhY2goZnVuY3Rpb24obix0LGEpe3ZhciBpPXt9O2kubGFiZWw9bi5jaGFubmVsX25hbWUsaS52YWx1ZT1uLmNoYW5uZWxpZCxlLmNoYW5uZWxUeXBlTGlzdC5wdXNoKGkpfSl9KX0sc2VsZWN0ZWRSb3c6ZnVuY3Rpb24oZSl7dGhpcy5kaWFsb2dWaXNpYmxlPSExLGUuYXJ0aWNsZWlkPyh0aGlzLnJ1bGVGb3JtLnJlbGF0aXZlQ29udGVudD0i56i/5Lu2LSIrZS50aXRsZSx0aGlzLmp1bXBfdHlwZT0xLHRoaXMuYXJ0aWNsZWlkPWUuYXJ0aWNsZWlkLHRoaXMuc3BlY2lhbGlkPSIiLHRoaXMuanVtcF91cmw9ZS5hcnRpY2xlX3VybCk6KHRoaXMucnVsZUZvcm0ucmVsYXRpdmVDb250ZW50PSLkuJPpopgtIitlLnNwZWNpYWxfbmFtZSx0aGlzLmp1bXBfdHlwZT0yLHRoaXMuYXJ0aWNsZWlkPSIiLHRoaXMuc3BlY2lhbGlkPWUuc3BlY2lhbGlkLHRoaXMuanVtcF91cmw9IiIpfX19LHNpPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPWUuJGNyZWF0ZUVsZW1lbnQsdD1lLl9zZWxmLl9jfHxuO3JldHVybiB0KCJkaXYiLHtzdGF0aWNDbGFzczoic2xpZGUgY3JlYXRlIn0sW3QoImNpcmNsZS10aXRsZSIse3N0YXRpY0NsYXNzOiJjaWNsZS1jb250cm9sbGVyIixhdHRyczp7InRpdGxlLW5hbWUiOiLova7mkq3lm77nvJbovpEifX0pLGUuX3YoIiAiKSx0KCJlbC1mb3JtIix7cmVmOiJydWxlRm9ybSIsc3RhdGljQ2xhc3M6InJ1bGUtZm9ybSIsYXR0cnM6e21vZGVsOmUucnVsZUZvcm0scnVsZXM6ZS5ydWxlcywibGFiZWwtd2lkdGgiOiIxMDBweCJ9fSxbdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLova7mkq3lm77moIfpopgiLHByb3A6ImNoYXJ0X25hbWUifX0sW3QoImVsLWlucHV0Iix7bW9kZWw6e3ZhbHVlOmUucnVsZUZvcm0uY2hhcnRfbmFtZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5ydWxlRm9ybSwiY2hhcnRfbmFtZSIsInN0cmluZyI9PXR5cGVvZiBuP24udHJpbSgpOm4pfSxleHByZXNzaW9uOiJydWxlRm9ybS5jaGFydF9uYW1lIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJpdGVtIixhdHRyczp7bGFiZWw6IuS4iuS8oOWbvueJhyIscHJvcDoiaWNvbiJ9fSxbdCgiZWwtdXBsb2FkIix7c3RhdGljQ2xhc3M6ImF2YXRhci11cGxvYWRlciIsYXR0cnM6e2FjdGlvbjplLmdldFVwbG9hZFVybCxoZWFkZXJzOmUudXBsb2FkSGVhZGVycywic2hvdy1maWxlLWxpc3QiOiExLCJvbi1zdWNjZXNzIjplLmhhbmRsZVBjQXZhdGFyU3VjY2VzcywiYmVmb3JlLXVwbG9hZCI6ZS5iZWZvcmVBdmF0YXJVcGxvYWR9fSxbZS5ydWxlRm9ybS5pY29uP3QoImltZyIse3N0YXRpY0NsYXNzOiJhdmF0YXIiLGF0dHJzOntzcmM6ZS5ydWxlRm9ybS5pY29ufX0pOnQoImkiLHtzdGF0aWNDbGFzczoiZWwtaWNvbi1wbHVzIGF2YXRhci11cGxvYWRlci1pY29uIn0pXSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuWFs+iBlOWGheWuuSIscHJvcDoicmVsYXRpdmVDb250ZW50In19LFt0KCJlbC1pbnB1dCIse3N0YXRpY1N0eWxlOnt3aWR0aDoiODclIn0sYXR0cnM6e2Rpc2FibGVkOiIifSxtb2RlbDp7dmFsdWU6ZS5ydWxlRm9ybS5yZWxhdGl2ZUNvbnRlbnQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUucnVsZUZvcm0sInJlbGF0aXZlQ29udGVudCIsbil9LGV4cHJlc3Npb246InJ1bGVGb3JtLnJlbGF0aXZlQ29udGVudCJ9fSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse3N0YXRpY1N0eWxlOnt3aWR0aDoiMTElIiwibWFyZ2luLWxlZnQiOiIxJSJ9LGF0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmZ1bmN0aW9uKG4pe2UuZGlhbG9nVmlzaWJsZT0hMH19fSxbZS5fdigi5re75YqgIildKV0sMSksZS5fdigiICIpLHQoImVsLWRpYWxvZyIse2F0dHJzOnt2aXNpYmxlOmUuZGlhbG9nVmlzaWJsZSx0aXRsZToi6YCJ5oup5YWz6IGU5YaF5a65Iix3aWR0aDoiNzAlIn0sb246eyJ1cGRhdGU6dmlzaWJsZSI6ZnVuY3Rpb24obil7ZS5kaWFsb2dWaXNpYmxlPW59fX0sW3QoImVsLXJhZGlvLWdyb3VwIix7YXR0cnM6eyJ0ZXh0LWNvbG9yIjoiI2ZmZmZmZiIsZmlsbDoiIzY5NEVGRiIsc2l6ZToic21hbGwifSxvbjp7Y2hhbmdlOmZ1bmN0aW9uKG4pe2UuaGFuZGxlT3BlcmF0aW9uQ2xpY2soZS5yYWRpbyl9fSxtb2RlbDp7dmFsdWU6ZS5yYWRpbyxjYWxsYmFjazpmdW5jdGlvbihuKXtlLnJhZGlvPW59LGV4cHJlc3Npb246InJhZGlvIn19LFt0KCJlbC1yYWRpby1idXR0b24iLHthdHRyczp7bGFiZWw6Iueov+S7tiJ9fSksZS5fdigiICIpLHQoImVsLXJhZGlvLWJ1dHRvbiIse2F0dHJzOntsYWJlbDoi5LiT6aKYIn19KV0sMSksZS5fdigiICIpLHQoZS5jb21wb25lbnROYW1lLHt0YWc6ImRpdiIsb246eyJzZWxlY3RlZC1yb3ciOmUuc2VsZWN0ZWRSb3d9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuW9kuWxnumikemBkyIscHJvcDoiY2hhbm5lbGlkIn19LFt0KCJlbC1zZWxlY3QiLHthdHRyczp7ZmlsdGVyYWJsZToiIixjbGVhcmFibGU6IiIscGxhY2Vob2xkZXI6IiJ9LG1vZGVsOnt2YWx1ZTplLnJ1bGVGb3JtLmNoYW5uZWxpZCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5ydWxlRm9ybSwiY2hhbm5lbGlkIixuKX0sZXhwcmVzc2lvbjoicnVsZUZvcm0uY2hhbm5lbGlkIn19LGUuX2woZS5jaGFubmVsVHlwZUxpc3QsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtb3B0aW9uIix7a2V5Om4sYXR0cnM6e3ZhbHVlOmUudmFsdWUsbGFiZWw6ZS5sYWJlbH19KX0pLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6ImluZGF0ZSIsYXR0cnM6e2xhYmVsOiLmnInmlYjmnJ8iLHJlcXVpcmVkOiIifX0sW3QoImVsLWRhdGUtcGlja2VyIix7c3RhdGljU3R5bGU6e3dpZHRoOiIxMDAlIn0sYXR0cnM6e2NsZWFyYWJsZTohMSx0eXBlOiJkYXRldGltZXJhbmdlIiwicmFuZ2Utc2VwYXJhdG9yIjoi6IezIixmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLCJzdGFydC1wbGFjZWhvbGRlciI6IuW8gOWni+aXpeacnyIsImVuZC1wbGFjZWhvbGRlciI6Iue7k+adn+aXpeacnyJ9LG1vZGVsOnt2YWx1ZTplLnJ1bGVGb3JtLmluZGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5ydWxlRm9ybSwiaW5kYXRlIixuKX0sZXhwcmVzc2lvbjoicnVsZUZvcm0uaW5kYXRlIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi54q25oCB6YCJ5oupIixwcm9wOiJzdGF0ZSJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiLor7fpgInmi6kifSxtb2RlbDp7dmFsdWU6ZS5ydWxlRm9ybS5zdGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5ydWxlRm9ybSwic3RhdGUiLG4pfSxleHByZXNzaW9uOiJydWxlRm9ybS5zdGF0ZSJ9fSxbdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjEsbGFiZWw6IuWQr+eUqCJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZTowLGxhYmVsOiLlgZznlKgifX0pXSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJzb3J0IixhdHRyczp7bGFiZWw6IuaOkuW6jyIscHJvcDoic29ydCIscmVxdWlyZWQ6IiJ9fSxbdCgiZWwtaW5wdXQiLHtzdGF0aWNTdHlsZTp7d2lkdGg6Ijc1JSJ9LG1vZGVsOnt2YWx1ZTplLnJ1bGVGb3JtLnNvcnQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUucnVsZUZvcm0sInNvcnQiLGUuX24obikpfSxleHByZXNzaW9uOiJydWxlRm9ybS5zb3J0In19KSxlLl92KCIgIiksdCgic3BhbiIsW2UuX3YoIuaPkOekuu+8muaVsOWtl+i2iuWwj+i2iuW+gOWJjSIpXSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLFt0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToicHJpbWFyeSJ9LG9uOntjbGljazpmdW5jdGlvbihuKXtlLnN1Ym1pdEZvcm0oInJ1bGVGb3JtIil9fX0sW2UuX3YoIuaPkOS6pCIpXSksZS5fdigiICIpLHQoInJvdXRlci1saW5rIix7YXR0cnM6e3RvOiIvbWFuYWdlU2xpZGUvbGlzdCJ9fSxbdCgiZWwtYnV0dG9uIixbZS5fdigi5Y+W5raIIildKV0sMSldLDEpXSwxKV0sMSl9O3NpLl93aXRoU3RyaXBwZWQ9ITA7dmFyIHJpPXtyZW5kZXI6c2ksc3RhdGljUmVuZGVyRm5zOltdfSxjaT1yaTt2YXIgbWk9ITE7dmFyIGRpPXQoIlZVLzgiKShvaSxjaSwhMSxmdW5jdGlvbihlKXttaXx8dCgidDZJVCIpfSwiZGF0YS12LTllZjRjZTJjIixudWxsKTtkaS5vcHRpb25zLl9fZmlsZT0ic3JjL2NvbXBvbmVudHMvbWFuYWdlU2xpZGUvc2xpZGVDcmVhdGUudnVlIjt2YXIgcGk9ZGkuZXhwb3J0cyx1aT17Y29tcG9uZW50czp7Q2lyY2xlVGl0bGU6ZW4sQWRkTWFudXNjcmlwdDpsaSxBZGRUb3BpYzpKYX0sbWl4aW5zOlt4YV0sZGF0YTpmdW5jdGlvbigpe3JldHVybntydWxlRm9ybTp7Y2hhcnRfbmFtZToiIixpY29uOiIiLGltYWdlVXJsOiIiLGluZGF0ZTpbXSxzb3J0OiIiLGNoYW5uZWxpZDoiIixyZWxhdGl2ZUNvbnRlbnQ6IiIsc3RhdGU6MH0scmFkaW86Iueov+S7tiIsaXNDaG9vc2VEYXRlOiExLGRpYWxvZ1Zpc2libGU6ITEsY29tcG9uZW50TmFtZToiQWRkTWFudXNjcmlwdCIscnVsZXM6e2NoYXJ0X25hbWU6W3tyZXF1aXJlZDohMCxtZXNzYWdlOiLor7fovpPlhaXova7mkq3lm77moIfpopgiLHRyaWdnZXI6ImJsdXIifV0sY2hhbm5lbGlkOlt7cmVxdWlyZWQ6ITAsbWVzc2FnZToi6K+36YCJ5oup5b2S5bGe6aKR6YGTIix0cmlnZ2VyOiJibHVyIn1dLHNvcnQ6W3tyZXF1aXJlZDohMCxtZXNzYWdlOiLor7fovpPlhaXmjpLluo8iLHRyaWdnZXI6ImJsdXIifSx7dHlwZToibnVtYmVyIixtZXNzYWdlOiLmjpLluo/lv4XpobvkuLrmlbDlrZcifV0scmVsYXRpdmVDb250ZW50Olt7cmVxdWlyZWQ6ITAsbWVzc2FnZToi6K+36YCJ5oup5YWz6IGU5YaF5a65Iix0cmlnZ2VyOiJibHVyIn1dLGljb246W3tyZXF1aXJlZDohMCxtZXNzYWdlOiLor7fkuIrkvKDlm77niYciLHRyaWdnZXI6ImJsdXIifV19LGNoYXJ0aWQ6IiIsY2hhbm5lbFR5cGVMaXN0OltdLGp1bXBfdHlwZTowLGFydGljbGVpZDoiIixzcGVjaWFsaWQ6IiIsanVtcF91cmw6IiIscGFnZU5vOjEsaXNSZWZyZXNoOiEwfX0sY29tcHV0ZWQ6e2dldFVwbG9hZFVybDpmdW5jdGlvbigpe3JldHVybiBfZSgpfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuZ2V0U2xpZGVFZGl0SW5mbygpfSxiZWZvcmVSb3V0ZUxlYXZlOmZ1bmN0aW9uKGUsbix0KXsiL21hbmFnZVNsaWRlL2xpc3QiPT09ZS5wYXRoP2UubWV0YS5yZWZyZXNoPXRoaXMuaXNSZWZyZXNoOiIvbWFuYWdlU2xpZGUvY3JlYXRlIj09PWUucGF0aCYmdGhpcy4kcm9vdC5ldmVudEh1Yi4kZW1pdCgicmVzZXQtb3B0aW9ucyIpLHQoKX0sbWV0aG9kczp7Z290b0xpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUmVmcmVzaD0hMSx0aGlzLiRyb3V0ZXIucHVzaCh7cGF0aDoiL21hbmFnZVNsaWRlL2xpc3QifSl9LGhhbmRsZU9wZXJhdGlvbkNsaWNrOmZ1bmN0aW9uKGUpe2lmKGUpc3dpdGNoKGUpe2Nhc2Ui56i/5Lu2Ijp0aGlzLmNvbXBvbmVudE5hbWU9IkFkZE1hbnVzY3JpcHQiO2JyZWFrO2Nhc2Ui5LiT6aKYIjp0aGlzLmNvbXBvbmVudE5hbWU9IkFkZFRvcGljIn19LHN1Ym1pdEZvcm06ZnVuY3Rpb24oZSl7dmFyIG49dGhpczt0aGlzLiRyZWZzW2VdLnZhbGlkYXRlKGZ1bmN0aW9uKGUpe2lmKCFlKXJldHVybiBjb25zb2xlLmxvZygiZXJyb3Igc3VibWl0ISEiKSwhMTt2YXIgdDsodD17cm90YXRpb25DaGFydDp7Y2hhcnRpZDpuLmNoYXJ0aWQsY2hhcnRfbmFtZTpuLnJ1bGVGb3JtLmNoYXJ0X25hbWUsY2hhcnRfaGVhZF91cmw6bi5ydWxlRm9ybS5pY29uLGp1bXBfdHlwZTpuLmp1bXBfdHlwZSxhcnRpY2xlaWQ6bi5hcnRpY2xlaWQsc3BlY2lhbGlkOm4uc3BlY2lhbGlkLGNoYW5uZWxpZDpuLnJ1bGVGb3JtLmNoYW5uZWxpZCxleHBpcnlfZGF0ZV9zdGFydDpuZXcgRGF0ZShuLnJ1bGVGb3JtLmluZGF0ZVswXSkuZ2V0VGltZSgpLGV4cGlyeV9kYXRlX2VuZDpuZXcgRGF0ZShuLnJ1bGVGb3JtLmluZGF0ZVsxXSkuZ2V0VGltZSgpLHNvcnQ6bi5ydWxlRm9ybS5zb3J0LHN0YXRlOm4ucnVsZUZvcm0uc3RhdGV9fSxiZSgibWFuYWdlci9Sb3RhdGlvbkNoYXJ0L3VwZGF0ZSIsdCkpLnRoZW4oZnVuY3Rpb24oZSl7MjAwPT09ZS5zdGF0dXMmJihuLiRyb3V0ZXIucHVzaCh7cGF0aDoiL21hbmFnZVNsaWRlL2xpc3QifSksbi4kbm90aWZ5KHt0aXRsZToi6YCa55+lIixtZXNzYWdlOiLnvJbovpHmiJDlip8iLHR5cGU6InN1Y2Nlc3MifSkpfSl9KX0saGFuZGxlUGNBdmF0YXJTdWNjZXNzOmZ1bmN0aW9uKGUsbil7aWYoZS5zdGF0dXMpe3ZhciB0PWUucmVzdWx0O3RoaXMucnVsZUZvcm0uaWNvbj10fX0sYmVmb3JlQXZhdGFyVXBsb2FkOmZ1bmN0aW9uKGUpe3ZhciBuPWUudHlwZSBpbnsiaW1hZ2UvanBlZyI6ITAsImltYWdlL3BuZyI6ITAsImltYWdlL2pwZyI6ITB9LHQ9ZS5zaXplLzEwMjQvMTAyNDwyO3JldHVybiBufHx0aGlzLiRtZXNzYWdlLmVycm9yKCLkuIrkvKDlm77niYflj6rog73mmK8gSlBHIOagvOW8jyEiKSx0fHx0aGlzLiRtZXNzYWdlLmVycm9yKCLkuIrkvKDlm77niYflpKflsI/kuI3og73otoXov4cgMk1CISIpLG4mJnR9LGdldFNsaWRlRWRpdEluZm86ZnVuY3Rpb24oKXt2YXIgZSxuPXRoaXM7dGhpcy5jaGFydGlkPXNlc3Npb25TdG9yYWdlLmdldEl0ZW0oImNoYXJ0aWQiKSwoZT17cm90YXRpb25DaGFydDp7Y2hhcnRpZDp0aGlzLmNoYXJ0aWR9fSxiZSgibWFuYWdlci9Sb3RhdGlvbkNoYXJ0L2dldFJvdGF0aW9uQ2hhcnRCeUlEIixlKSkudGhlbihmdW5jdGlvbihlKXtpZihlLmRhdGEuc3RhdHVzKXt2YXIgdD1lLmRhdGEucmVzdWx0O24ucnVsZUZvcm0uY2hhcnRfbmFtZT10LmNoYXJ0X25hbWUsbi5ydWxlRm9ybS5pY29uPXQuY2hhcnRfaGVhZF91cmwsMT09PXQuanVtcF90eXBlJiZ0LnRpdGxlP24ucnVsZUZvcm0ucmVsYXRpdmVDb250ZW50PSLnqL/ku7YtIit0LnRpdGxlOjI9PT10Lmp1bXBfdHlwZSYmdC5zcGVjaWFsX25hbWU/bi5ydWxlRm9ybS5yZWxhdGl2ZUNvbnRlbnQ9IuS4k+mimC0iK3Quc3BlY2lhbF9uYW1lOm4ucnVsZUZvcm0ucmVsYXRpdmVDb250ZW50PSLml6AiLG4ucnVsZUZvcm0uY2hhbm5lbGlkPXQuY2hhbm5lbGlkLG4ucnVsZUZvcm0uaW5kYXRlLnB1c2gobmV3IERhdGUodC5leHBpcnlfZGF0ZV9zdGFydCkpLG4ucnVsZUZvcm0uaW5kYXRlLnB1c2gobmV3IERhdGUodC5leHBpcnlfZGF0ZV9lbmQpKSxuLnJ1bGVGb3JtLnNvcnQ9dC5zb3J0LG4uYXJ0aWNsZWlkPXQuYXJ0aWNsZWlkLG4uc3BlY2lhbGlkPXQuc3BlY2lhbGlkLG4ucnVsZUZvcm0uY2hhbm5lbGlkPXQuY2hhbm5lbGlkLG4uanVtcF90eXBlPXQuanVtcF90eXBlLG4uZ2V0TGlzdFVzYWJsZUNoYW5uZWwoKX19KX0sZ2V0TGlzdFVzYWJsZUNoYW5uZWw6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3hlKCkudGhlbihmdW5jdGlvbihuKXt2YXIgdD1uLmRhdGE7dC5zdGF0dXMmJih0LnJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uKG4sdCxhKXt2YXIgaT17fTtpLmxhYmVsPW4uY2hhbm5lbF9uYW1lLGkudmFsdWU9bi5jaGFubmVsaWQsZS5jaGFubmVsVHlwZUxpc3QucHVzaChpKX0pLGUuc2V0Q2hhbm5uZWxpZCgpKX0pfSxzZXRDaGFubm5lbGlkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPSEwO2NvbnNvbGUubG9nKHRoaXMucnVsZUZvcm0uY2hhbm5lbGlkKSx0aGlzLmNoYW5uZWxUeXBlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QudmFsdWU9PT1lLnJ1bGVGb3JtLmNoYW5uZWxpZCYmKG49ITEpfSksbiYmdGhpcy4kc2V0KHRoaXMucnVsZUZvcm0sImNoYW5uZWxpZCIsIiIpfSxzZWxlY3RlZFJvdzpmdW5jdGlvbihlKXt0aGlzLmRpYWxvZ1Zpc2libGU9ITEsZS5hcnRpY2xlaWQ/KHRoaXMucnVsZUZvcm0ucmVsYXRpdmVDb250ZW50PSLnqL/ku7YtIitlLnRpdGxlLHRoaXMuanVtcF90eXBlPTEsdGhpcy5hcnRpY2xlaWQ9ZS5hcnRpY2xlaWQsdGhpcy5zcGVjaWFsaWQ9IiIsdGhpcy5qdW1wX3VybD1lLmFydGljbGVfdXJsKToodGhpcy5ydWxlRm9ybS5yZWxhdGl2ZUNvbnRlbnQ9IuS4k+mimC0iK2Uuc3BlY2lhbF9uYW1lLHRoaXMuanVtcF90eXBlPTIsdGhpcy5hcnRpY2xlaWQ9IiIsdGhpcy5zcGVjaWFsaWQ9ZS5zcGVjaWFsaWQsdGhpcy5qdW1wX3VybD0iIil9fX0saGk9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJzbGlkZSBjcmVhdGUifSxbdCgiY2lyY2xlLXRpdGxlIix7c3RhdGljQ2xhc3M6ImNpY2xlLWNvbnRyb2xsZXIiLGF0dHJzOnsidGl0bGUtbmFtZSI6Iui9ruaSreWbvue8lui+kSJ9fSksZS5fdigiICIpLHQoImVsLWZvcm0iLHtyZWY6InJ1bGVGb3JtIixzdGF0aWNDbGFzczoicnVsZS1mb3JtIixhdHRyczp7bW9kZWw6ZS5ydWxlRm9ybSxydWxlczplLnJ1bGVzLCJsYWJlbC13aWR0aCI6IjEwMHB4In19LFt0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6Iui9ruaSreWbvuagh+mimCIscHJvcDoiY2hhcnRfbmFtZSJ9fSxbdCgiZWwtaW5wdXQiLHttb2RlbDp7dmFsdWU6ZS5ydWxlRm9ybS5jaGFydF9uYW1lLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLnJ1bGVGb3JtLCJjaGFydF9uYW1lIiwic3RyaW5nIj09dHlwZW9mIG4/bi50cmltKCk6bil9LGV4cHJlc3Npb246InJ1bGVGb3JtLmNoYXJ0X25hbWUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6Iml0ZW0iLGF0dHJzOntsYWJlbDoi5LiK5Lyg5Zu+54mHIixwcm9wOiJpY29uIn19LFt0KCJlbC11cGxvYWQiLHtzdGF0aWNDbGFzczoiYXZhdGFyLXVwbG9hZGVyIixhdHRyczp7YWN0aW9uOmUuZ2V0VXBsb2FkVXJsLGhlYWRlcnM6ZS51cGxvYWRIZWFkZXJzLCJzaG93LWZpbGUtbGlzdCI6ITEsIm9uLXN1Y2Nlc3MiOmUuaGFuZGxlUGNBdmF0YXJTdWNjZXNzLCJiZWZvcmUtdXBsb2FkIjplLmJlZm9yZUF2YXRhclVwbG9hZH19LFtlLnJ1bGVGb3JtLmljb24/dCgiaW1nIix7c3RhdGljQ2xhc3M6ImF2YXRhciIsYXR0cnM6e3NyYzplLnJ1bGVGb3JtLmljb259fSk6dCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXBsdXMgYXZhdGFyLXVwbG9hZGVyLWljb24ifSldKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5YWz6IGU5YaF5a65Iixwcm9wOiJyZWxhdGl2ZUNvbnRlbnQifX0sW3QoImVsLWlucHV0Iix7c3RhdGljU3R5bGU6e3dpZHRoOiI4NyUifSxhdHRyczp7ZGlzYWJsZWQ6IiJ9LG1vZGVsOnt2YWx1ZTplLnJ1bGVGb3JtLnJlbGF0aXZlQ29udGVudCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5ydWxlRm9ybSwicmVsYXRpdmVDb250ZW50IixuKX0sZXhwcmVzc2lvbjoicnVsZUZvcm0ucmVsYXRpdmVDb250ZW50In19KSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7c3RhdGljU3R5bGU6e3dpZHRoOiIxMSUiLCJtYXJnaW4tbGVmdCI6IjElIn0sYXR0cnM6e3R5cGU6InByaW1hcnkifSxvbjp7Y2xpY2s6ZnVuY3Rpb24obil7ZS5kaWFsb2dWaXNpYmxlPSEwfX19LFtlLl92KCLmt7vliqAiKV0pXSwxKSxlLl92KCIgIiksdCgiZWwtZGlhbG9nIix7YXR0cnM6e3Zpc2libGU6ZS5kaWFsb2dWaXNpYmxlLHRpdGxlOiLpgInmi6nlhbPogZTlhoXlrrkiLHdpZHRoOiI3MCUifSxvbjp7InVwZGF0ZTp2aXNpYmxlIjpmdW5jdGlvbihuKXtlLmRpYWxvZ1Zpc2libGU9bn19fSxbdCgiZWwtcmFkaW8tZ3JvdXAiLHthdHRyczp7InRleHQtY29sb3IiOiIjZmZmZmZmIixmaWxsOiIjNjk0RUZGIixzaXplOiJzbWFsbCJ9LG9uOntjaGFuZ2U6ZnVuY3Rpb24obil7ZS5oYW5kbGVPcGVyYXRpb25DbGljayhlLnJhZGlvKX19LG1vZGVsOnt2YWx1ZTplLnJhZGlvLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UucmFkaW89bn0sZXhwcmVzc2lvbjoicmFkaW8ifX0sW3QoImVsLXJhZGlvLWJ1dHRvbiIse2F0dHJzOntsYWJlbDoi56i/5Lu2In19KSxlLl92KCIgIiksdCgiZWwtcmFkaW8tYnV0dG9uIix7YXR0cnM6e2xhYmVsOiLkuJPpopgifX0pXSwxKSxlLl92KCIgIiksdChlLmNvbXBvbmVudE5hbWUse3RhZzoiZGl2Iixvbjp7InNlbGVjdGVkLXJvdyI6ZS5zZWxlY3RlZFJvd319KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5b2S5bGe6aKR6YGTIixwcm9wOiJjaGFubmVsaWQifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntmaWx0ZXJhYmxlOiIiLGNsZWFyYWJsZToiIixwbGFjZWhvbGRlcjoiIn0sbW9kZWw6e3ZhbHVlOmUucnVsZUZvcm0uY2hhbm5lbGlkLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLnJ1bGVGb3JtLCJjaGFubmVsaWQiLG4pfSxleHByZXNzaW9uOiJydWxlRm9ybS5jaGFubmVsaWQifX0sZS5fbChlLmNoYW5uZWxUeXBlTGlzdCxmdW5jdGlvbihlLG4pe3JldHVybiB0KCJlbC1vcHRpb24iLHtrZXk6bixhdHRyczp7dmFsdWU6ZS52YWx1ZSxsYWJlbDplLmxhYmVsfX0pfSksMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoiaW5kYXRlIixhdHRyczp7bGFiZWw6IuacieaViOacnyIscmVxdWlyZWQ6IiJ9fSxbdCgiZWwtZGF0ZS1waWNrZXIiLHtzdGF0aWNTdHlsZTp7d2lkdGg6IjEwMCUifSxhdHRyczp7Y2xlYXJhYmxlOiExLHR5cGU6ImRhdGV0aW1lcmFuZ2UiLCJyYW5nZS1zZXBhcmF0b3IiOiLoh7MiLGZvcm1hdDoieXl5eS1NTS1kZCBISDptbSIsInN0YXJ0LXBsYWNlaG9sZGVyIjoi5byA5aeL5pel5pyfIiwiZW5kLXBsYWNlaG9sZGVyIjoi57uT5p2f5pel5pyfIn0sbW9kZWw6e3ZhbHVlOmUucnVsZUZvcm0uaW5kYXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLnJ1bGVGb3JtLCJpbmRhdGUiLG4pfSxleHByZXNzaW9uOiJydWxlRm9ybS5pbmRhdGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLnirbmgIHpgInmi6kiLHByb3A6InN0YXRlIn19LFt0KCJlbC1zZWxlY3QiLHthdHRyczp7cGxhY2Vob2xkZXI6Iuivt+mAieaLqSJ9LG1vZGVsOnt2YWx1ZTplLnJ1bGVGb3JtLnN0YXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLnJ1bGVGb3JtLCJzdGF0ZSIsbil9LGV4cHJlc3Npb246InJ1bGVGb3JtLnN0YXRlIn19LFt0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MSxsYWJlbDoi5ZCv55SoIn19KSxlLl92KCIgIiksdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjAsbGFiZWw6IuWBnOeUqCJ9fSldLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6InNvcnQiLGF0dHJzOntsYWJlbDoi5o6S5bqPIixwcm9wOiJzb3J0IixyZXF1aXJlZDoiIn19LFt0KCJlbC1pbnB1dCIse3N0YXRpY1N0eWxlOnt3aWR0aDoiNzUlIn0sbW9kZWw6e3ZhbHVlOmUucnVsZUZvcm0uc29ydCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5ydWxlRm9ybSwic29ydCIsZS5fbihuKSl9LGV4cHJlc3Npb246InJ1bGVGb3JtLnNvcnQifX0pLGUuX3YoIiAiKSx0KCJzcGFuIixbZS5fdigi5o+Q56S677ya5pWw5a2X6LaK5bCP6LaK5b6A5YmNIildKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIsW3QoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmZ1bmN0aW9uKG4pe2Uuc3VibWl0Rm9ybSgicnVsZUZvcm0iKX19fSxbZS5fdigi5o+Q5LqkIildKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7b246e2NsaWNrOmUuZ290b0xpc3R9fSxbZS5fdigi5Y+W5raIIildKV0sMSldLDEpXSwxKX07aGkuX3dpdGhTdHJpcHBlZD0hMDt2YXIgZ2k9e3JlbmRlcjpoaSxzdGF0aWNSZW5kZXJGbnM6W119LEFpPWdpO3ZhciBmaT0hMTt2YXIgYmk9dCgiVlUvOCIpKHVpLEFpLCExLGZ1bmN0aW9uKGUpe2ZpfHx0KCJnYzJLIil9LCJkYXRhLXYtMTAyMzBjNzgiLG51bGwpO2JpLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9tYW5hZ2VTbGlkZS9zbGlkZUVkaXQudnVlIjt2YXIgdmk9YmkuZXhwb3J0cyx5aT10KCJiT2RJIiksQ2k9dC5uKHlpKSxfaT17cHJvcHM6e3NldHRpbmdBcnRpY2xlSWQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6IjAifSxtYW51VGl0bGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6IuaXoCJ9fSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3RhYmxlRGF0YTpbXSxjaGFubmVsR3JvdXA6W10saXNTaG93SW5wdXQ6ITEsc3VibWl0TWFudVRpdGxlOnRoaXMubWFudVRpdGxlfX0sY29tcHV0ZWQ6e3N1YlN0clNwZWNpYWxMZW5ndGg6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGUubGVuZ3RoPjIzP2Uuc3Vic3RyaW5nKDAsMjMpKyIuLi4iOmV9fX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuZ2V0U2V0dGluZ01hbnVMaXN0KCl9LG1ldGhvZHM6e2dldFNldHRpbmdNYW51TGlzdDpmdW5jdGlvbigpe3ZhciBlLG49dGhpczsoZT17YXJ0aWNsZTp7YXJ0aWNsZWlkOnRoaXMuc2V0dGluZ0FydGljbGVJZH19LGJlKCJtYW5hZ2VyL0FydGljbGUvbGlzdFVzYWJsZUNoYW5uZWxBbmRTcGVjYWwiLGUpKS50aGVuKGZ1bmN0aW9uKGUpe2lmKGUuZGF0YS5zdGF0dXMpe3ZhciB0PWUuZGF0YS5yZXN1bHQ7bi50YWJsZURhdGE9dH19KX0sc2V0Q2hhbm5lbEJ0bjpmdW5jdGlvbihlKXt2YXIgbix0PXRoaXM7KG49e2FydGljbGVpZDp0aGlzLnNldHRpbmdBcnRpY2xlSWQsY2hhbm5lbGlkOmUuY2hhbm5lbGlkLHNhdmVPckRlbDplLmlzQ2hlY2tlZH0sYmUoIm1hbmFnZXIvQXJ0aWNsZS9zYXZlT3JEZWxDaGFubmVsQXJ0aWNsZVJlbGF0aW9uIixuKSkudGhlbihmdW5jdGlvbihlKXtlLnN0YXR1cyYmdC4kbWVzc2FnZSh7dHlwZToic3VjY2VzcyIsbWVzc2FnZToi6YWN572u5oiQ5YqfISJ9KX0pfSxzZXRTcGVjaWFsQnRuOmZ1bmN0aW9uKGUpe3ZhciBuLHQ9dGhpcztlJiYobj17YXJ0aWNsZWlkOnRoaXMuc2V0dGluZ0FydGljbGVJZCxzcGVjaWFsaWQ6ZS5zcGVjaWFsaWQsc2F2ZU9yRGVsOmUuaXNDaGVja2VkfSxiZSgibWFuYWdlci9BcnRpY2xlL3NhdmVPckRlbFNwZWNpYWxBcnRpY2xlUmVsYXRpb24iLG4pKS50aGVuKGZ1bmN0aW9uKGUpe2Uuc3RhdHVzJiZ0LiRtZXNzYWdlKHt0eXBlOiJzdWNjZXNzIixtZXNzYWdlOiLphY3nva7miJDlip8hIn0pfSl9LHNob3dJbnB1dDpmdW5jdGlvbigpe3RoaXMuaXNTaG93SW5wdXQ9ITAsdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXt0aGlzLiRyZWZzLm1hbnVJbnB1dC5mb2N1cygpfSl9LGhpZGVJbnB1dEFuZFN1Ym1pdDpmdW5jdGlvbigpe3ZhciBlLG49dGhpczt0aGlzLmlzU2hvd0lucHV0PSExLChlPXthcnRpY2xlOnthcnRpY2xlaWQ6dGhpcy5zZXR0aW5nQXJ0aWNsZUlkLHRpdGxlOnRoaXMuc3VibWl0TWFudVRpdGxlfX0sYmUoIm1hbmFnZXIvQXJ0aWNsZS91cGRhdGVUaXRsZSIsZSkpLnRoZW4oZnVuY3Rpb24oZSl7ZS5zdGF0dXMmJm4uJG1lc3NhZ2Uoe3R5cGU6InN1Y2Nlc3MiLG1lc3NhZ2U6IuS/ruaUueaIkOWKnyEifSl9KX19fSx4aT1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1lLiRjcmVhdGVFbGVtZW50LHQ9ZS5fc2VsZi5fY3x8bjtyZXR1cm4gdCgiZGl2IixbdCgiZGl2Iix7c3RhdGljQ2xhc3M6InRpdGxlLWNsYXNzIn0sW2UuX3YoIlxuICAgIOeov+S7tuS4u+mimDpcbiAgICAiKSxlLmlzU2hvd0lucHV0P2UuX2UoKTp0KCJzcGFuIixbZS5fdigiXG4gICAgICAiK2UuX3MoZS5zdWJtaXRNYW51VGl0bGUpKyJcbiAgICAgICIpLHQoImEiLHtzdGF0aWNTdHlsZTp7Y29sb3I6ImJsdWUiLGN1cnNvcjoicG9pbnRlciJ9LG9uOntjbGljazplLnNob3dJbnB1dH19LFtlLl92KCLkv67mlLkiKV0pXSksZS5fdigiICIpLGUuaXNTaG93SW5wdXQ/dCgic3BhbiIsW3QoImVsLWlucHV0Iix7cmVmOiJtYW51SW5wdXQiLHN0YXRpY1N0eWxlOnt3aWR0aDoiNDAwcHgifSxhdHRyczp7dHlwZToidGV4dCJ9LG9uOntibHVyOmUuaGlkZUlucHV0QW5kU3VibWl0fSxtb2RlbDp7dmFsdWU6ZS5zdWJtaXRNYW51VGl0bGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS5zdWJtaXRNYW51VGl0bGU9bn0sZXhwcmVzc2lvbjoic3VibWl0TWFudVRpdGxlIn19KV0sMSk6ZS5fZSgpXSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJ0YWJsZS1saXN0In0sW3QoImVsLXRhYmxlIix7cmVmOiJjaGFubmVsVGFibGUiLHN0YXRpY0NsYXNzOiJ3aG9sZS10YWJsZSIsYXR0cnM6e2RhdGE6ZS50YWJsZURhdGEsc3RyaXBlOiIiLCJtaW4taGVpZ2h0IjoiNDAwIn19LFt0KCJlbC10YWJsZS1jb2x1bW4iLHthdHRyczp7cHJvcDoiY2hhbm5lbF9uYW1lIixsYWJlbDoi5b2S5bGe6aKR6YGTIixhbGlnbjoibGVmdCIsZml4ZWQ6IiJ9LHNjb3BlZFNsb3RzOmUuX3UoW3trZXk6ImRlZmF1bHQiLGZuOmZ1bmN0aW9uKG4pe3JldHVyblt0KCJlbC1jaGVja2JveCIse29uOntjaGFuZ2U6ZnVuY3Rpb24odCl7ZS5zZXRDaGFubmVsQnRuKG4ucm93KX19LG1vZGVsOnt2YWx1ZTpuLnJvdy5pc0NoZWNrZWQsY2FsbGJhY2s6ZnVuY3Rpb24odCl7ZS4kc2V0KG4ucm93LCJpc0NoZWNrZWQiLHQpfSxleHByZXNzaW9uOiJzY29wZS5yb3cuaXNDaGVja2VkIn19LFtlLl92KCJcbiAgICAgICAgICAgICIrZS5fcyhuLnJvdy5jaGFubmVsX25hbWUpKyJcbiAgICAgICAgICAiKV0pXX19XSl9KSxlLl92KCIgIiksdCgiZWwtdGFibGUtY29sdW1uIix7YXR0cnM6e3Byb3A6InBhcmVudF9jaGFubmVsX25hbWUiLGxhYmVsOiLlvZLlsZ7kuJPpopgiLGFsaWduOiJsZWZ0IixmaXhlZDoiIn0sc2NvcGVkU2xvdHM6ZS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24obil7cmV0dXJuIGUuX2wobi5yb3cuc3BlY2lhbExpc3QsZnVuY3Rpb24obixhKXtyZXR1cm4gdCgicCIse2tleTphfSxbdCgiZWwtY2hlY2tib3giLHthdHRyczp7dGl0bGU6bi5zcGVjaWFsX25hbWV9LG9uOntjaGFuZ2U6ZnVuY3Rpb24odCl7ZS5zZXRTcGVjaWFsQnRuKG4pfX0sbW9kZWw6e3ZhbHVlOm4uaXNDaGVja2VkLGNhbGxiYWNrOmZ1bmN0aW9uKHQpe2UuJHNldChuLCJpc0NoZWNrZWQiLHQpfSxleHByZXNzaW9uOiJpdGVtLmlzQ2hlY2tlZCJ9fSxbZS5fdigiXG4gICAgICAgICAgICAgICIrZS5fcyhlLnN1YlN0clNwZWNpYWxMZW5ndGgobi5zcGVjaWFsX25hbWUpKSsiXG4gICAgICAgICAgICAiKV0pXSwxKX0pfX1dKX0pXSwxKV0sMSldKX07eGkuX3dpdGhTdHJpcHBlZD0hMDt2YXIgd2k9e3JlbmRlcjp4aSxzdGF0aWNSZW5kZXJGbnM6W119LEZpPXdpO3ZhciBraT0hMTt2YXIgU2k9dCgiVlUvOCIpKF9pLEZpLCExLGZ1bmN0aW9uKGUpe2tpfHwodCgieVJlOSIpLHQoImk0MlciKSl9LCJkYXRhLXYtNjg0ZmUxMTIiLG51bGwpO1NpLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9tYW5hZ2VNYW51c2NyaXB0L3NldHRpbmdNYW51LnZ1ZSI7dmFyIEVpPVNpLmV4cG9ydHMsRGk9e2NvbXBvbmVudHM6e0NpcmNsZVRpdGxlOmVuLFNldHRpbmdNYW51OkVpfSxkYXRhOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPXRoaXMuJGNyZWF0ZUVsZW1lbnQ7cmV0dXJue21hbnVTY3JpcHQ6e2NoYW5uZWxfbmFtZToiIixzdGF0ZToiIixzb3J0OiIxIixzdGFydERhdGU6IiIsZW5kRGF0ZToiIixjaGFubmVsaWQ6IiIsdGl0bGU6IiIsc3BlY2lhbGlkOiIifSxjaGFubmVsVHlwZUxpc3Q6W10sc3BlY2lhbExpc3Q6W10sY2xpY2tDZWxsSW5kZXg6LTEsdGFibGVIZWFkZXI6W3twcm9wOiJ0aXRsZSIsbGFiZWw6Iueov+S7tuS4u+mimCJ9LHtwcm9wOiJjcmVhdGV0aW1lIixsYWJlbDoi5o6o6YCB5pel5pyfIixmb3JtYXR0ZXI6ZnVuY3Rpb24obix0LGEsaSl7cmV0dXJuIGUuJG9wdGlvbnMuZmlsdGVycy5Gb3JtYXREYXRlKGEsInl5eXktTU0tZGQgaGg6bW0iKX19LHtwcm9wOiJ1cGRhdGV0aW1lIixsYWJlbDoi5pu05paw5pel5pyfIixmb3JtYXR0ZXI6ZnVuY3Rpb24obix0LGEsaSl7cmV0dXJuIGUuJG9wdGlvbnMuZmlsdGVycy5Gb3JtYXREYXRlKGEsInl5eXktTU0tZGQgaGg6bW0iKX19LHtwcm9wOiJhcnRpY2xlX3VybCIsbGFiZWw6Iueov+S7tuWGheWuuSIsZm9ybWF0dGVyOmZ1bmN0aW9uKGUsdCxhLGkpe3JldHVybiBuKCJhIix7YXR0cnM6e2hyZWY6YSx0YXJnZXQ6Il9ibGFuayJ9fSxbIuafpeeci+eov+S7tuWGheWuuSJdKX19LHtwcm9wOiJzdGF0ZSIsbGFiZWw6IueKtuaAgSIsd2lkdGg6IjEwMCIsZm9ybWF0dGVyOmZ1bmN0aW9uKGUsbix0LGEpe3JldHVybiAwPT09dD8i5b6F5LiK57q/IjoxPT09dD8i5bey5LiK57q/IjoyPT09dD8i5bey5LiL57q/Ijp2b2lkIDB9fV0sdGFibGVEYXRhOltdLGJhdGNoUHJvY2VzczoxLHByb2Nlc3NMaXN0Olt7dmFsdWU6MSxsYWJlbDoi5om56YeP5Yig6ZmkIn0se3ZhbHVlOjIsbGFiZWw6IuWFtuS7liJ9XSxjb21tZW50OiExLHNoYXJlOiExLHByYWlzZTohMSxjb2xsZWN0OiExLGluZGV4Oi0xLHBhZ2VObzoxLHBhZ2VTaXplOjEwLHRvdGFsOjAsZGlhbG9nVmlzaWJsZTohMSxjb21wb25lbnROYW1lOiIiLGFydGljbGVpZExpc3Q6W10sc2VsZlNlbGVjdEFsbDohMSxzZWxlY3RlZE1hbnVJbmZvOltdLHNldHRpbmdBcnRpY2xlSWQ6IjAiLG1hbnVUaXRsZToiIn19LGNvbXB1dGVkOntzaG93TnVsbFRhZzpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4hZXx8ZS5sZW5ndGg8PTB9fSxjaGFubmVsVGFnQ29udGVudDpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZT8iIj09PWUuY2hhbm5lbF9uYW1lPyLml6AiOmUuY2hhbm5lbF9uYW1lOiLml6AifX0sc3BlY2lhbFRhZ0NvbnRlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGU/IiI9PT1lLnNwZWNpYWxfbmFtZT8i5pegIjplLnNwZWNpYWxfbmFtZToi5pegIn19LHNob3dDaGFubmVsQWxsTmFtZTpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgbj0iIjtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUsdCxhKXt0IT09YS5sZW5ndGgtMT9uKz1lLmNoYW5uZWxfbmFtZSsiLCI6bis9ZS5jaGFubmVsX25hbWV9KSxufX0sc2hvd1NwZWNpYWxBbGxOYW1lOmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciBuPSIiO3JldHVybiBlLmZvckVhY2goZnVuY3Rpb24oZSx0LGEpe2EubGVuZ3RoLG4rPSLjgIoiK2Uuc3BlY2lhbF9uYW1lKyLjgIsifSksbn19fSx3YXRjaDp7Im1hbnVTY3JpcHQudGl0bGUiOmZ1bmN0aW9uKCl7dGhpcy5zZWFyY2hNYW51U2NyaXB0KCl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dGhpcy5nZXRNdW51U2NyaXB0TGlzdCgpLHRoaXMuZ2V0TGlzdFVzYWJsZUNoYW5uZWwoKSx0aGlzLmdldExpc3RVc2FibGVTcGVjaWFsKCl9LG1ldGhvZHM6e2dldE11bnVTY3JpcHRMaXN0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztYYSh7cGFnZU5vOnRoaXMucGFnZU5vLHBhZ2VTaXplOnRoaXMucGFnZVNpemV9KS50aGVuKGZ1bmN0aW9uKG4pe2lmKG4uZGF0YS5zdGF0dXMpe3ZhciB0PW4uZGF0YS5yZXN1bHQ7ZS50YWJsZURhdGE9dC5saXN0LGUudG90YWw9dC50b3RhbH19KX0sZ2V0TGlzdFVzYWJsZUNoYW5uZWw6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3hlKCkudGhlbihmdW5jdGlvbihuKXt2YXIgdD1uLmRhdGE7dC5zdGF0dXMmJnQucmVzdWx0LmZvckVhY2goZnVuY3Rpb24obix0LGEpe3ZhciBpPXt9O2kubGFiZWw9bi5jaGFubmVsX25hbWUsaS52YWx1ZT1uLmNoYW5uZWxpZCxlLmNoYW5uZWxUeXBlTGlzdC5wdXNoKGkpfSl9KX0sZ2V0TGlzdFVzYWJsZVNwZWNpYWw6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3dlKCkudGhlbihmdW5jdGlvbihuKXt2YXIgdD1uLmRhdGE7dC5zdGF0dXMmJnQucmVzdWx0LmZvckVhY2goZnVuY3Rpb24obix0LGEpe3ZhciBpPXt9O2kubGFiZWw9bi5zcGVjaWFsX25hbWUsaS52YWx1ZT1uLnNwZWNpYWxpZCxlLnNwZWNpYWxMaXN0LnB1c2goaSl9KX0pfSxvblN1Ym1pdDpmdW5jdGlvbigpe2NvbnNvbGUubG9nKCJzdWJtaXQhIil9LGhhbmRsZVNpemVDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5wYWdlU2l6ZT1lLHRoaXMuc2VhcmNoTWFudVNjcmlwdCgpfSxoYW5kbGVDdXJyZW50Q2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMucGFnZU5vPWUsdGhpcy5zZWFyY2hNYW51U2NyaXB0KCl9LHNlbGVjdEFsbDpmdW5jdGlvbihlKXtlLmxlbmd0aD4wP3RoaXMuc2VsZlNlbGVjdEFsbD0hMDp0aGlzLnNlbGZTZWxlY3RBbGw9ITF9LGhhbmRsZUNvbW1lbnQ6ZnVuY3Rpb24oZSl7MSE9PWUuc3RhdGU/ZS5hbGxvd19jb21tZW50P3RoaXMudXBkYXRlTWFudShlLmFydGljbGVpZCwiYWxsb3dfY29tbWVudCIsITEpOnRoaXMudXBkYXRlTWFudShlLmFydGljbGVpZCwiYWxsb3dfY29tbWVudCIsITApOnRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOiLlt7LkuIrnur/nqL/ku7bkuI3lj6/mk43kvZzor4TorrrmnYPpmZAhIn0pfSxoYW5kbGVTaGFyZTpmdW5jdGlvbihlKXsxIT09ZS5zdGF0ZT9lLmFsbG93X3NoYXJlP3RoaXMudXBkYXRlTWFudShlLmFydGljbGVpZCwiYWxsb3dfc2hhcmUiLCExKTp0aGlzLnVwZGF0ZU1hbnUoZS5hcnRpY2xlaWQsImFsbG93X3NoYXJlIiwhMCk6dGhpcy4kbWVzc2FnZSh7dHlwZToiZXJyb3IiLG1lc3NhZ2U6IuW3suS4iue6v+eov+S7tuS4jeWPr+aTjeS9nOWIhuS6q+adg+mZkCEifSl9LGhhbmRsZVByYWlzZTpmdW5jdGlvbihlKXsxIT09ZS5zdGF0ZT9lLmFsbG93X2xpa2U/dGhpcy51cGRhdGVNYW51KGUuYXJ0aWNsZWlkLCJhbGxvd19saWtlIiwhMSk6dGhpcy51cGRhdGVNYW51KGUuYXJ0aWNsZWlkLCJhbGxvd19saWtlIiwhMCk6dGhpcy4kbWVzc2FnZSh7dHlwZToiZXJyb3IiLG1lc3NhZ2U6IuW3suS4iue6v+eov+S7tuS4jeWPr+aTjeS9nOeCuei1nuadg+mZkCEifSl9LGhhbmRsZUNvbGxlY3Q6ZnVuY3Rpb24oZSl7MSE9PWUuc3RhdGU/ZS5hbGxvd19jb2xsZWN0P3RoaXMudXBkYXRlTWFudShlLmFydGljbGVpZCwiYWxsb3dfY29sbGVjdCIsITEpOnRoaXMudXBkYXRlTWFudShlLmFydGljbGVpZCwiYWxsb3dfY29sbGVjdCIsITApOnRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOiLlt7LkuIrnur/nqL/ku7bkuI3lj6/mk43kvZzmlLbol4/mnYPpmZAhIn0pfSxzZXRNYW51VW5Ub3A6ZnVuY3Rpb24oZSl7dGhpcy51cGRhdGVNYW51KGUuYXJ0aWNsZWlkLCJ0b3AiLCEwKX0sc2V0TWFudVRvcDpmdW5jdGlvbihlKXt0aGlzLnVwZGF0ZU1hbnUoZS5hcnRpY2xlaWQsInRvcCIsITEpfSx1cE1hbnU6ZnVuY3Rpb24oZSl7dmFyIG49dGhpcztpZihlLmFydGljbGVDaGFubmVsTGlzdC5sZW5ndGg8PTAmJmUuYXJ0aWNsZVNwZWNpYWxMaXN0Lmxlbmd0aDw9MClyZXR1cm4gdGhpcy4kbWVzc2FnZSh7dHlwZToiZXJyb3IiLG1lc3NhZ2U6Iuivpeeov+S7tui/mOayoeaciemFjee9rumikemBk+WSjOS4k+mimCwg5LiN6IO95LiK56i/ISJ9KSwhMTswPT09ZS5zdGF0ZXx8Mj09PWUuc3RhdGU/dGhpcy4kY29uZmlybSgi56Gu5a6a6KaB5LiK56i/5ZCXPyIsIuaPkOekuiIse2NvbmZpcm1CdXR0b25UZXh0OiLnoa7lrpoiLGNhbmNlbEJ1dHRvblRleHQ6IuWPlua2iCIsdHlwZToid2FybmluZyJ9KS50aGVuKGZ1bmN0aW9uKCl7bi51cGRhdGVNYW51KGUuYXJ0aWNsZWlkLCJzdGF0ZSIsMSl9KS5jYXRjaChmdW5jdGlvbigpe30pOnRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOiLor6XnqL/ku7blt7LkuIrnur8hIn0pfSxkb3duTWFudTpmdW5jdGlvbihlKXt2YXIgbj10aGlzOzE9PT1lLnN0YXRlP3RoaXMuJGNvbmZpcm0oIuehruWumuimgeaSpOeov+WQlz8iLCLmj5DnpLoiLHtjb25maXJtQnV0dG9uVGV4dDoi56Gu5a6aIixjYW5jZWxCdXR0b25UZXh0OiLlj5bmtogiLHR5cGU6Indhcm5pbmcifSkudGhlbihmdW5jdGlvbigpe24udXBkYXRlTWFudShlLmFydGljbGVpZCwic3RhdGUiLDIpfSkuY2F0Y2goZnVuY3Rpb24oKXt9KTp0aGlzLiRtZXNzYWdlKHt0eXBlOiJlcnJvciIsbWVzc2FnZToi6K+l56i/5Lu25bey5pKk56i/ISJ9KX0sc2V0dGluZ01hbnU6ZnVuY3Rpb24oZSl7MSE9PWUuc3RhdGU/KHRoaXMuZGlhbG9nVmlzaWJsZT0hMCx0aGlzLmNvbXBvbmVudE5hbWU9RWksdGhpcy5zZXR0aW5nQXJ0aWNsZUlkPWUuYXJ0aWNsZWlkLHRoaXMubWFudVRpdGxlPWUudGl0bGUpOnRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOiLlt7LkuIrnur/nqL/ku7bkuI3lj6/phY3nva4hIn0pfSxkZWxldGVNYW51OmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7MSE9PWUuc3RhdGU/dGhpcy4kY29uZmlybSgn5piv5ZCm5Yig6ZmkIicrZS50aXRsZSsnIj8nLCLmj5DnpLoiLHtjb25maXJtQnV0dG9uVGV4dDoi56Gu5a6aIixjYW5jZWxCdXR0b25UZXh0OiLlj5bmtogiLHR5cGU6Indhcm5pbmcifSkudGhlbihmdW5jdGlvbigpe3ZhciB0Oyh0PXthcnRpY2xlOnthcnRpY2xlaWQ6ZS5hcnRpY2xlaWR9fSxiZSgibWFuYWdlci9BcnRpY2xlL2RlbGV0ZSIsdCkpLnRoZW4oZnVuY3Rpb24oZSl7ZS5zdGF0dXMmJm4uJG1lc3NhZ2Uoe3R5cGU6InN1Y2Nlc3MiLG1lc3NhZ2U6IuWIoOmZpOaIkOWKnyEifSksbi5zZWFyY2hNYW51U2NyaXB0KCl9KX0pLmNhdGNoKGZ1bmN0aW9uKCl7fSk6dGhpcy4kbWVzc2FnZSh7dHlwZToiZXJyb3IiLG1lc3NhZ2U6IuW3suS4iue6v+eov+S7tuS4jeWPr+WIoOmZpCEifSl9LHVwZGF0ZU1hbnU6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhLGk9dGhpczsoYT17YXJ0aWNsZTpDaSgpKHthcnRpY2xlaWQ6ZX0sbix0KX0sYmUoIm1hbmFnZXIvQXJ0aWNsZS91cGRhdGUiLGEpKS50aGVuKGZ1bmN0aW9uKGUpe2Uuc3RhdHVzJiYoaS4kbWVzc2FnZSh7dHlwZToic3VjY2VzcyIsbWVzc2FnZToi5pON5L2c5oiQ5YqfISJ9KSxpLnNlYXJjaE1hbnVTY3JpcHQoKSl9KX0sc2VsZWN0aW9uQ2hhbmdlOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7dGhpcy5hcnRpY2xlaWRMaXN0PVtdLGUuZm9yRWFjaChmdW5jdGlvbihlLHQsYSl7bi5hcnRpY2xlaWRMaXN0LnB1c2goZS5hcnRpY2xlaWQpfSksdGhpcy5zZWxlY3RlZE1hbnVJbmZvPWV9LGRlbGV0ZU1hbnlNYW51OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZigxPT09dGhpcy5iYXRjaFByb2Nlc3Mpe3ZhciBuPSEwO2lmKHRoaXMuYXJ0aWNsZWlkTGlzdC5sZW5ndGg8PTApcmV0dXJuIHRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOiLor7foh7PlsJHpgInmi6nkuIDkuKrnqL/ku7YhIn0pLCExO3ZhciB0PSfmgqjmiYDpgInmi6nnmoQ6Iic7aWYodGhpcy5zZWxlY3RlZE1hbnVJbmZvLmZvckVhY2goZnVuY3Rpb24oZSxhLGkpezE9PT1lLnN0YXRlJiYobj0hMSxhIT09aS5sZW5ndGgtMT90Kz0i44CKIitlLnRpdGxlKyLjgIsiOnQrPSIg5bey5LiK57q/56i/5Lu2LCDkuI3lj6/liKDpmaQhICIpfSksIW4pcmV0dXJuIHRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOnR9KSwhMTt0aGlzLiRjb25maXJtKCLnoa7lrprliKDpmaTmiYDpgInnqL/ku7Y/Iiwi5o+Q56S6Iix7Y29uZmlybUJ1dHRvblRleHQ6IuehruWumiIsY2FuY2VsQnV0dG9uVGV4dDoi5Y+W5raIIix0eXBlOiJ3YXJuaW5nIn0pLnRoZW4oZnVuY3Rpb24oKXt2YXIgbjsobj17YXJ0aWNsZWlkTGlzdDplLmFydGljbGVpZExpc3R9LGJlKCJtYW5hZ2VyL0FydGljbGUvYmF0Y2hEZWxldGUiLG4pKS50aGVuKGZ1bmN0aW9uKG4pe2NvbnNvbGUubG9nKG4pLG4uc3RhdHVzJiZlLiRtZXNzYWdlKHt0eXBlOiJzdWNjZXNzIixtZXNzYWdlOiLmibnph4/liKDpmaTmiJDlip8hIn0pLGUuc2VhcmNoTWFudVNjcmlwdCgpfSl9KS5jYXRjaChmdW5jdGlvbigpe30pfX0sY2xvc2VEaWFsb2c6ZnVuY3Rpb24oKXt0aGlzLmNvbXBvbmVudE5hbWU9IiIsdGhpcy5zZWFyY2hNYW51U2NyaXB0KCl9LHNlYXJjaE1hbnVTY3JpcHQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuJG9wdGlvbnMuZmlsdGVycy5zd2FwVGltZSh0aGlzLm1hbnVTY3JpcHQpO3ZhciBuPW51bGwhPT10aGlzLm1hbnVTY3JpcHQuc3RhcnREYXRlP25ldyBEYXRlKHRoaXMubWFudVNjcmlwdC5zdGFydERhdGUpLmdldFRpbWUoKTpudWxsLHQ9bnVsbCE9PXRoaXMubWFudVNjcmlwdC5lbmREYXRlP25ldyBEYXRlKHRoaXMubWFudVNjcmlwdC5lbmREYXRlKS5nZXRUaW1lKCk6bnVsbDtYYSh7cGFnZU5vOnRoaXMucGFnZU5vLHBhZ2VTaXplOnRoaXMucGFnZVNpemUsY2hhbm5lbGlkOnRoaXMubWFudVNjcmlwdC5jaGFubmVsaWQsc3BlY2lhbGlkOnRoaXMubWFudVNjcmlwdC5zcGVjaWFsaWQsdGl0bGU6dGhpcy5tYW51U2NyaXB0LnRpdGxlLHN0YXRlOnRoaXMubWFudVNjcmlwdC5zdGF0ZSx0aW1lU3RhcnQ6bix0aW1lRW5kOnR9KS50aGVuKGZ1bmN0aW9uKG4pe2lmKG4uZGF0YS5zdGF0dXMpe3ZhciB0PW4uZGF0YS5yZXN1bHQ7Y29uc29sZS5sb2codCksZS50YWJsZURhdGE9dC5saXN0LGUudG90YWw9dC50b3RhbH19KX19fSxMaT1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1lLiRjcmVhdGVFbGVtZW50LHQ9ZS5fc2VsZi5fY3x8bjtyZXR1cm4gdCgiZGl2Iix7c3RhdGljQ2xhc3M6Im1hbnVzY3JpcHQifSxbdCgiZGl2IixbdCgiY2lyY2xlLXRpdGxlIix7c3RhdGljQ2xhc3M6ImNpY2xlLWNvbnRyb2xsZXIiLGF0dHJzOnsidGl0bGUtbmFtZSI6Iueov+S7tueuoeeQhiJ9fSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJzZWFyY2gtZm9ybS1jb250YWluZXIifSxbdCgiZWwtZm9ybSIse3N0YXRpY0NsYXNzOiJkZW1vLWZvcm0taW5saW5lIixhdHRyczp7aW5saW5lOiEwLG1vZGVsOmUubWFudVNjcmlwdH19LFt0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6Iueov+S7tuS4u+mimCJ9fSxbdCgiZWwtaW5wdXQiLHthdHRyczp7Y2xlYXJhYmxlOiIifSxtb2RlbDp7dmFsdWU6ZS5tYW51U2NyaXB0LnRpdGxlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLm1hbnVTY3JpcHQsInRpdGxlIixuKX0sZXhwcmVzc2lvbjoibWFudVNjcmlwdC50aXRsZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuW9kuWxnumikemBkyIscHJvcDoiY2hhbm5lbGlkIn19LFt0KCJlbC1zZWxlY3QiLHthdHRyczp7ZmlsdGVyYWJsZToiIixjbGVhcmFibGU6IiIscGxhY2Vob2xkZXI6IiJ9LG9uOntjbGVhcjplLnNlYXJjaE1hbnVTY3JpcHQsY2hhbmdlOmUuc2VhcmNoTWFudVNjcmlwdH0sbW9kZWw6e3ZhbHVlOmUubWFudVNjcmlwdC5jaGFubmVsaWQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUubWFudVNjcmlwdCwiY2hhbm5lbGlkIixuKX0sZXhwcmVzc2lvbjoibWFudVNjcmlwdC5jaGFubmVsaWQifX0sZS5fbChlLmNoYW5uZWxUeXBlTGlzdCxmdW5jdGlvbihlLG4pe3JldHVybiB0KCJlbC1vcHRpb24iLHtrZXk6bixhdHRyczp7dmFsdWU6ZS52YWx1ZSxsYWJlbDplLmxhYmVsfX0pfSksMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuW9kuWxnuS4k+mimCJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e2ZpbHRlcmFibGU6IiIsY2xlYXJhYmxlOiIiLHBsYWNlaG9sZGVyOiIifSxvbjp7Y2xlYXI6ZS5zZWFyY2hNYW51U2NyaXB0LGNoYW5nZTplLnNlYXJjaE1hbnVTY3JpcHR9LG1vZGVsOnt2YWx1ZTplLm1hbnVTY3JpcHQuc3BlY2lhbGlkLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLm1hbnVTY3JpcHQsInNwZWNpYWxpZCIsbil9LGV4cHJlc3Npb246Im1hbnVTY3JpcHQuc3BlY2lhbGlkIn19LGUuX2woZS5zcGVjaWFsTGlzdCxmdW5jdGlvbihlLG4pe3JldHVybiB0KCJlbC1vcHRpb24iLHtrZXk6bixhdHRyczp7dmFsdWU6ZS52YWx1ZSxsYWJlbDplLmxhYmVsfX0pfSksMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoic2VhcmNoLWxlZnQiLGF0dHJzOntsYWJlbDoi54q25oCBIn19LFt0KCJlbC1zZWxlY3QiLHthdHRyczp7cGxhY2Vob2xkZXI6IiJ9LG9uOntjaGFuZ2U6ZS5zZWFyY2hNYW51U2NyaXB0fSxtb2RlbDp7dmFsdWU6ZS5tYW51U2NyaXB0LnN0YXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLm1hbnVTY3JpcHQsInN0YXRlIixuKX0sZXhwcmVzc2lvbjoibWFudVNjcmlwdC5zdGF0ZSJ9fSxbdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOiIiLGxhYmVsOiLlhajpg6gifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MCxsYWJlbDoi5b6F5LiK57q/In19KSxlLl92KCIgIiksdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjEsbGFiZWw6IuW3suS4iue6vyJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZToyLGxhYmVsOiLlt7LkuIvnur8ifX0pXSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5byA5aeL5pe26Ze0In19LFt0KCJlbC1kYXRlLXBpY2tlciIse2F0dHJzOnt0aXRsZTplLl9mKCJGb3JtYXREYXRlIikoZS5tYW51U2NyaXB0LnN0YXJ0RGF0ZSwieXl5eS1NTS1kZCBoaDptbSIpLHR5cGU6ImRhdGV0aW1lIixmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLHBsYWNlaG9sZGVyOiLpgInmi6nml7bpl7QifSxvbjp7Y2hhbmdlOmUuc2VhcmNoTWFudVNjcmlwdH0sbW9kZWw6e3ZhbHVlOmUubWFudVNjcmlwdC5zdGFydERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUubWFudVNjcmlwdCwic3RhcnREYXRlIixuKX0sZXhwcmVzc2lvbjoibWFudVNjcmlwdC5zdGFydERhdGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLnu5PmnZ/ml7bpl7QifX0sW3QoImVsLWRhdGUtcGlja2VyIix7YXR0cnM6e3RpdGxlOmUuX2YoIkZvcm1hdERhdGUiKShlLm1hbnVTY3JpcHQuZW5kRGF0ZSwieXl5eS1NTS1kZCBoaDptbSIpLHR5cGU6ImRhdGV0aW1lIixmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLHBsYWNlaG9sZGVyOiLpgInmi6nml7bpl7QifSxvbjp7Y2hhbmdlOmUuc2VhcmNoTWFudVNjcmlwdH0sbW9kZWw6e3ZhbHVlOmUubWFudVNjcmlwdC5lbmREYXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLm1hbnVTY3JpcHQsImVuZERhdGUiLG4pfSxleHByZXNzaW9uOiJtYW51U2NyaXB0LmVuZERhdGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7c3RhdGljU3R5bGU6eyJtYXJnaW4tbGVmdCI6IjY4cHgifSxhdHRyczp7dHlwZToicHJpbWFyeSJ9LG9uOntjbGljazplLnNlYXJjaE1hbnVTY3JpcHR9fSxbZS5fdigiXG4gICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgIiksdCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCJ9KV0pXSwxKV0sMSldLDEpLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoidGFibGUtbGlzdCJ9LFt0KCJlbC10YWJsZSIse3JlZjoiY2hhbm5lbFRhYmxlIixzdGF0aWNDbGFzczoid2hvbGUtdGFibGUiLGF0dHJzOntkYXRhOmUudGFibGVEYXRhLHN0cmlwZToiIiwibWluLWhlaWdodCI6IjQwMCJ9LG9uOnsic2VsZWN0LWFsbCI6ZS5zZWxlY3RBbGwsInNlbGVjdGlvbi1jaGFuZ2UiOmUuc2VsZWN0aW9uQ2hhbmdlfX0sW2UuX2woZS50YWJsZUhlYWRlcixmdW5jdGlvbihlLG4pe3JldHVybiB0KCJlbC10YWJsZS1jb2x1bW4iLHtrZXk6bixhdHRyczp7cHJvcDplLnByb3AsbGFiZWw6ZS5sYWJlbCx3aWR0aDplLndpZHRoLGZvcm1hdHRlcjplLmZvcm1hdHRlcixhbGlnbjoiY2VudGVyIixmaXhlZDoiIiwic2hvdy1vdmVyZmxvdy10b29sdGlwIjoiIn19KX0pLGUuX3YoIiAiKSx0KCJlbC10YWJsZS1jb2x1bW4iLHthdHRyczp7bGFiZWw6IuW9kuWxnumikemBkyIsYWxpZ246ImNlbnRlciJ9LHNjb3BlZFNsb3RzOmUuX3UoW3trZXk6ImRlZmF1bHQiLGZuOmZ1bmN0aW9uKG4pe3JldHVybltlLnNob3dOdWxsVGFnKG4ucm93LmFydGljbGVDaGFubmVsTGlzdCk/dCgiZWwtdGFnIix7YXR0cnM6e3NpemU6Im1pbmkifX0sW2UuX3YoIuaXoCIpXSk6ZS5fZSgpLGUuX3YoIiAiKSx0KCJlbC10b29sdGlwIix7a2V5Om4ucm93LmFydGljbGVpZCxzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6e2NvbnRlbnQ6ZS5zaG93Q2hhbm5lbEFsbE5hbWUobi5yb3cuYXJ0aWNsZUNoYW5uZWxMaXN0KSxlZmZlY3Q6ImRhcmsiLHBsYWNlbWVudDoidG9wLXN0YXJ0In19LGUuX2wobi5yb3cuYXJ0aWNsZUNoYW5uZWxMaXN0LGZ1bmN0aW9uKG4sYSl7cmV0dXJuIHQoImVsLXRhZyIse2tleTphLGF0dHJzOntzaXplOiJtaW5pIn19LFtlLl92KCJcbiAgICAgICAgICAgICAgIitlLl9zKGUuY2hhbm5lbFRhZ0NvbnRlbnQobikpKyJcbiAgICAgICAgICAgICIpXSl9KSwxKV19fV0pfSksZS5fdigiICIpLHQoImVsLXRhYmxlLWNvbHVtbiIse2F0dHJzOntsYWJlbDoi5b2S5bGe5LiT6aKYIixhbGlnbjoiY2VudGVyIn0sc2NvcGVkU2xvdHM6ZS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24obil7cmV0dXJuW2Uuc2hvd051bGxUYWcobi5yb3cuYXJ0aWNsZVNwZWNpYWxMaXN0KT90KCJlbC10YWciLHthdHRyczp7c2l6ZToibWluaSJ9fSxbZS5fdigi5pegIildKTplLl9lKCksZS5fdigiICIpLHQoImVsLXRvb2x0aXAiLHtrZXk6bi5yb3cuYXJ0aWNsZWlkLHN0YXRpY0NsYXNzOiJpdGVtIixhdHRyczp7Y29udGVudDplLnNob3dTcGVjaWFsQWxsTmFtZShuLnJvdy5hcnRpY2xlU3BlY2lhbExpc3QpLCJ2aXNpYmxlLWFycm93IjohMSxlZmZlY3Q6ImRhcmsiLHBsYWNlbWVudDoidG9wLXN0YXJ0In19LGUuX2wobi5yb3cuYXJ0aWNsZVNwZWNpYWxMaXN0LGZ1bmN0aW9uKG4sYSl7cmV0dXJuIHQoImVsLXRhZyIse2tleTphLGF0dHJzOntzaXplOiJtaW5pIn19LFtlLl92KCJcbiAgICAgICAgICAgICAgIitlLl9zKGUuc3BlY2lhbFRhZ0NvbnRlbnQobikpKyJcbiAgICAgICAgICAgICIpXSl9KSwxKV19fV0pfSksZS5fdigiICIpLHQoImVsLXRhYmxlLWNvbHVtbiIse2F0dHJzOntsYWJlbDoi572u6aG254q25oCBIixhbGlnbjoiY2VudGVyIn0sc2NvcGVkU2xvdHM6ZS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24obil7cmV0dXJuW24ucm93LnRvcD90KCJlbC10b29sdGlwIix7c3RhdGljQ2xhc3M6Iml0ZW0iLGF0dHJzOntlZmZlY3Q6ImRhcmsiLGNvbnRlbnQ6IueCueWHu+WPlua2iOe9rumhtiIscGxhY2VtZW50OiJ0b3AifX0sW3QoImVsLXRhZyIse3N0YXRpY0NsYXNzOiJzZXRQb2ludGVyIixzdGF0aWNTdHlsZTp7d2lkdGg6IjYwcHgiLGNvbG9yOiIjNjk0ZWZmIn0sYXR0cnM6e3NpemU6Im1pbmkifSxuYXRpdmVPbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5zZXRNYW51VG9wKG4ucm93KX19fSxbZS5fdigiXG4gICAgICAgICAgICAgIOWPlua2iOe9rumhtlxuICAgICAgICAgICAgIildKV0sMSk6dCgiZWwtdG9vbHRpcCIse3N0YXRpY0NsYXNzOiJpdGVtIixhdHRyczp7ZWZmZWN0OiJkYXJrIixjb250ZW50OiLngrnlh7vnva7pobYiLHBsYWNlbWVudDoidG9wIn19LFt0KCJlbC10YWciLHtzdGF0aWNDbGFzczoic2V0UG9pbnRlciIsc3RhdGljU3R5bGU6e3dpZHRoOiI2MHB4In0sYXR0cnM6e3NpemU6Im1pbmkifSxuYXRpdmVPbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5zZXRNYW51VW5Ub3Aobi5yb3cpfX19LFtlLl92KCJcbiAgICAgICAgICAgICAg572u6aG2XG4gICAgICAgICAgICAiKV0pXSwxKV19fV0pfSksZS5fdigiICIpLHQoImVsLXRhYmxlLWNvbHVtbiIse2F0dHJzOntsYWJlbDoi5LiK56i/L+aSpOeovyIsYWxpZ246ImNlbnRlciJ9LHNjb3BlZFNsb3RzOmUuX3UoW3trZXk6ImRlZmF1bHQiLGZuOmZ1bmN0aW9uKG4pe3JldHVyblt0KCJzcGFuIix7c3RhdGljQ2xhc3M6Im1hbnUtY29udGFpbmVyIn0sW3QoInNwYW4iLHtjbGFzczpbIm1hbnUiLDEhPT1uLnJvdy5zdGF0ZSYmKG4ucm93LmFydGljbGVDaGFubmVsTGlzdC5sZW5ndGg+MHx8bi5yb3cuYXJ0aWNsZVNwZWNpYWxMaXN0Lmxlbmd0aD4wKT8ibWFudS11cC1hY3RpdmUiOiIiXSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS51cE1hbnUobi5yb3cpfX19LFtlLl92KCJcbiAgICAgICAgICAgICAg5LiK56i/XG4gICAgICAgICAgICAiKV0pLGUuX3YoIiAiKSx0KCJzcGFuIix7Y2xhc3M6WyJtYW51IiwxPT09bi5yb3cuc3RhdGU/Im1hbnUtYmFjay1hY3RpdmUiOiIiXSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5kb3duTWFudShuLnJvdyl9fX0sW2UuX3YoIlxuICAgICAgICAgICAgICDmkqTnqL9cbiAgICAgICAgICAgICIpXSldKV19fV0pfSksZS5fdigiICIpLHQoImVsLXRhYmxlLWNvbHVtbiIse2F0dHJzOntsYWJlbDoi5pON5L2cIixhbGlnbjoiY2VudGVyIn0sc2NvcGVkU2xvdHM6ZS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24obil7cmV0dXJuW3QoInNwYW4iLHtzdGF0aWNDbGFzczoibWFudS1jb250YWluZXIifSxbdCgic3BhbiIse2NsYXNzOlsibWFudSIsMSE9PW4ucm93LnN0YXRlPyJkZWxldGUtYWN0aXZlIjoiIl0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2Uuc2V0dGluZ01hbnUobi5yb3cpfX19LFtlLl92KCJcbiAgICAgICAgICAgICAg6YWN572uXG4gICAgICAgICAgICAiKV0pLGUuX3YoIiAiKSx0KCJzcGFuIix7Y2xhc3M6WyJtYW51IiwxIT09bi5yb3cuc3RhdGU/ImRlbGV0ZS1hY3RpdmUiOiIiXSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5kZWxldGVNYW51KG4ucm93KX19fSxbZS5fdigiXG4gICAgICAgICAgICAgIOWIoOmZpFxuICAgICAgICAgICAgIildKV0pXX19XSl9KSxlLl92KCIgIiksdCgiZWwtdGFibGUtY29sdW1uIix7YXR0cnM6e2ZpeGVkOiJyaWdodCIsbGFiZWw6Iuadg+mZkOmFjee9riIsYWxpZ246ImNlbnRlciIsd2lkdGg6IjExNSJ9LHNjb3BlZFNsb3RzOmUuX3UoW3trZXk6ImRlZmF1bHQiLGZuOmZ1bmN0aW9uKG4pe3JldHVyblt0KCJlbC10b29sdGlwIix7c3RhdGljQ2xhc3M6Iml0ZW0iLGF0dHJzOntlZmZlY3Q6ImRhcmsiLGNvbnRlbnQ6IuivhOiuuiIscGxhY2VtZW50OiJ0b3AifX0sW3QoImRpdiIse3N0YXRpY0NsYXNzOiJhbGxvd19jb21tZW50IixzdHlsZTp7YmFja2dyb3VuZENvbG9yOm4ucm93LmFsbG93X2NvbW1lbnQ/IiNmZmE1MDciOiIjQjVCOEQ5In0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuaGFuZGxlQ29tbWVudChuLnJvdyl9fX0sW3QoImkiLHtzdGF0aWNDbGFzczoiaWNvbmZvbnQgaWNvbi1tYW51LWNvbW1lbnQiLHN0YXRpY1N0eWxlOntjb2xvcjoid2hpdGUifX0pXSldKSxlLl92KCIgIiksdCgiZWwtdG9vbHRpcCIse3N0YXRpY0NsYXNzOiJpdGVtIixhdHRyczp7ZWZmZWN0OiJkYXJrIixjb250ZW50OiLliIbkuqsiLHBsYWNlbWVudDoidG9wIn19LFt0KCJkaXYiLHtzdGF0aWNDbGFzczoiYWxsb3dfc2hhcmUiLHN0eWxlOntiYWNrZ3JvdW5kQ29sb3I6bi5yb3cuYWxsb3dfc2hhcmU/IiMxODgzRkYiOiIjQjVCOEQ5In0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuaGFuZGxlU2hhcmUobi5yb3cpfX19LFt0KCJpIix7c3RhdGljQ2xhc3M6Imljb25mb250IGljb24tc2hhcmUiLHN0YXRpY1N0eWxlOntjb2xvcjoid2hpdGUifX0pXSldKSxlLl92KCIgIiksdCgiZWwtdG9vbHRpcCIse3N0YXRpY0NsYXNzOiJpdGVtIixhdHRyczp7ZWZmZWN0OiJkYXJrIixjb250ZW50OiLngrnotZ4iLHBsYWNlbWVudDoidG9wIn19LFt0KCJkaXYiLHtzdGF0aWNDbGFzczoiYWxsb3dfbGlrZSIsc3R5bGU6e2JhY2tncm91bmRDb2xvcjpuLnJvdy5hbGxvd19saWtlPyIjRjAwODA4IjoiI0I1QjhEOSJ9LG9uOntjbGljazpmdW5jdGlvbih0KXtlLmhhbmRsZVByYWlzZShuLnJvdyl9fX0sW3QoImkiLHtzdGF0aWNDbGFzczoiaWNvbmZvbnQgaWNvbi1wcmFpc2UiLHN0YXRpY1N0eWxlOntjb2xvcjoid2hpdGUifX0pXSldKSxlLl92KCIgIiksdCgiZWwtdG9vbHRpcCIse3N0YXRpY0NsYXNzOiJpdGVtIixhdHRyczp7ZWZmZWN0OiJkYXJrIixjb250ZW50OiLmlLbol48iLHBsYWNlbWVudDoidG9wIn19LFt0KCJkaXYiLHtzdGF0aWNDbGFzczoiYWxsb3dfY29sbGVjdCIsc3R5bGU6e2JhY2tncm91bmRDb2xvcjpuLnJvdy5hbGxvd19jb2xsZWN0PyIjNjk0RUZGIjoiI0I1QjhEOSJ9LG9uOntjbGljazpmdW5jdGlvbih0KXtlLmhhbmRsZUNvbGxlY3Qobi5yb3cpfX19LFt0KCJpIix7c3RhdGljQ2xhc3M6Imljb25mb250IGljb24tY29sbGVjdCIsc3RhdGljU3R5bGU6e2NvbG9yOiJ3aGl0ZSJ9fSldKV0pXX19XSl9KV0sMiksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJwYWdpbmF0aW9uIn0sW3QoImVsLXBhZ2luYXRpb24iLHthdHRyczp7dG90YWw6ZS50b3RhbCwicGFnZS1zaXplcyI6WzEwLDIwLDMwLDQwXSxiYWNrZ3JvdW5kOiIiLGxheW91dDoidG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dCJ9LG9uOnsic2l6ZS1jaGFuZ2UiOmUuaGFuZGxlU2l6ZUNoYW5nZSwiY3VycmVudC1jaGFuZ2UiOmUuaGFuZGxlQ3VycmVudENoYW5nZX19KV0sMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1kaWFsb2ciLHthdHRyczp7dmlzaWJsZTplLmRpYWxvZ1Zpc2libGUsImN1c3RvbS1jbGFzcyI6ImN1c3RvbS1kaWFsb2ciLHRpdGxlOiLnqL/ku7bkv6Hmga/phY3nva4iLHdpZHRoOiI1MCUifSxvbjp7InVwZGF0ZTp2aXNpYmxlIjpmdW5jdGlvbihuKXtlLmRpYWxvZ1Zpc2libGU9bn0sY2xvc2U6ZS5jbG9zZURpYWxvZ319LFt0KGUuY29tcG9uZW50TmFtZSx7dGFnOiJkaXYiLGF0dHJzOnsic2V0dGluZy1hcnRpY2xlLWlkIjplLnNldHRpbmdBcnRpY2xlSWQsIm1hbnUtdGl0bGUiOmUubWFudVRpdGxlfX0pXSwxKV0sMSl9O0xpLl93aXRoU3RyaXBwZWQ9ITA7dmFyIEJpPXtyZW5kZXI6TGksc3RhdGljUmVuZGVyRm5zOltdfSxNaT1CaTt2YXIgSWk9ITE7dmFyIFRpPXQoIlZVLzgiKShEaSxNaSwhMSxmdW5jdGlvbihlKXtJaXx8KHQoIjZDcm0iKSx0KCIyRjZHIikpfSwiZGF0YS12LTc3NDljMDZkIixudWxsKTtUaS5vcHRpb25zLl9fZmlsZT0ic3JjL2NvbXBvbmVudHMvbWFuYWdlTWFudXNjcmlwdC9tYW5hZ2VNYW51c2NyaXB0TGlzdC52dWUiO3ZhciAkaT1UaS5leHBvcnRzO3ZhciB6aT17Y29tcG9uZW50czp7Q2lyY2xlVGl0bGU6ZW59LGRhdGE6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49dGhpcy4kY3JlYXRlRWxlbWVudDtyZXR1cm57U3RhcnRwYWdlRm9ybTp7c3RhdGU6IiIscmVnaW9uOiIiLHN0YXJ0RGF0ZToiIixlbmREYXRlOiIiLHNvcnQ6IjEifSxjbGlja0NlbGxJbmRleDotMSxzb3J0VmFsdWU6LTEscGFnZU5vOjEscGFnZVNpemU6MTAsdG90YWw6MCx0YWJsZUhlYWRlcjpbe3Byb3A6ImltZ191cmwiLGxhYmVsOiLlkK/liqjpobXlm77niYciLGZvcm1hdHRlcjpmdW5jdGlvbihlLHQsYSxpKXtyZXR1cm4gbigiaW1nIix7Y2xhc3M6InRvcGljLXRhYmxlLXBpYyIsYXR0cnM6e3NyYzphfX0pfX0se3Byb3A6InVwZGF0ZXRpbWUiLGxhYmVsOiLmm7TmlrDml6XmnJ8iLGZvcm1hdHRlcjpmdW5jdGlvbihuLHQsYSxpKXtyZXR1cm4gZS4kb3B0aW9ucy5maWx0ZXJzLkZvcm1hdERhdGUoYSwieXl5eS1NTS1kZCBoaDptbSIpfX0se3Byb3A6InJlc2lkZW5jZV90aW1lIixsYWJlbDoi6am755WZ5pe26Ze0In0se3Byb3A6ImltZ191cmwiLGxhYmVsOiLlm77niYflnLDlnYAiLHdpZHRoOiIxMDAifSx7cHJvcDoianVtcF91cmwiLGxhYmVsOiLpk77mjqXlnLDlnYAiLHdpZHRoOiIxMDAifSx7cHJvcDoiZXhwaXJ5X2RhdGVfc3RhcnQiLGxhYmVsOiLlvIDlp4vml6XmnJ8iLGZvcm1hdHRlcjpmdW5jdGlvbihuLHQsYSxpKXtyZXR1cm4gZS4kb3B0aW9ucy5maWx0ZXJzLkZvcm1hdERhdGUoYSwieXl5eS1NTS1kZCBoaDptbSIpfX0se3Byb3A6ImV4cGlyeV9kYXRlX2VuZCIsbGFiZWw6Iue7k+adn+aXpeacnyIsZm9ybWF0dGVyOmZ1bmN0aW9uKG4sdCxhLGkpe3JldHVybiBlLiRvcHRpb25zLmZpbHRlcnMuRm9ybWF0RGF0ZShhLCJ5eXl5LU1NLWRkIGhoOm1tIil9fSx7cHJvcDoic3RhdGUiLGxhYmVsOiLnirbmgIEiLGZvcm1hdHRlcjpmdW5jdGlvbihlLG4sdCxhKXtyZXR1cm4gMT09PXBhcnNlSW50KHQpPyLkvb/nlKjkuK0iOjA9PT1wYXJzZUludCh0KT8i5b6F5LiK57q/Ijoi5bey5LiL57q/In19LHtwcm9wOiJzb3J0IixsYWJlbDoi5o6S5bqPIixmb3JtYXR0ZXI6ZnVuY3Rpb24odCxhLGksbCl7cmV0dXJuIGw9PT1lLmNsaWNrQ2VsbEluZGV4P24oImlucHV0Iix7YXR0cnM6e3R5cGU6InRleHQiLGlkOmwsYXV0b2ZvY3VzOiJhdXRvZm9jdXMifSxjbGFzczoic2VsZi1zb3J0Iixkb21Qcm9wczp7dmFsdWU6aX19KTpuKCJzcGFuIix7Y2xhc3M6InNvcnQtY29udGFpbmVyIixhdHRyczp7ImRhdGEtaWQiOmx9fSxbaV0pfX1dLHRhYmxlRGF0YTpbXSxiYXRjaFByb2Nlc3M6MSxwcm9jZXNzTGlzdDpbe3ZhbHVlOjEsbGFiZWw6IuaJuemHj+aTjeS9nCJ9LHt2YWx1ZToyLGxhYmVsOiLlhbbku5YifV0sc2VsZWN0QWRJZDoiIn19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuZ2V0U3RhcnRwYWdlbExpc3QoKSx0aGlzLiRyb290LmV2ZW50SHViLiRvbigicmVzZXQtb3B0aW9ucyIsZnVuY3Rpb24oKXtlLnJlc2V0T3B0aW9ucygpfSl9LGFjdGl2YXRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuJHJvdXRlLm1ldGE7ZS5oYXNPd25Qcm9wZXJ0eSgicmVmcmVzaCIpJiZlLnJlZnJlc2gmJih0aGlzLmdldFN0YXJ0cGFnZWxMaXN0KCksZGVsZXRlIHRoaXMuJHJvdXRlLm1ldGEucmVmcmVzaCl9LGJlZm9yZVJvdXRlTGVhdmU6ZnVuY3Rpb24oZSxuLHQpeyIvbWFuYWdlU3RhcnRwYWdlL2NyZWF0ZSI9PT1lLnBhdGgmJnRoaXMucmVzZXRPcHRpb25zKCksdCgpfSxiZWZvcmVEZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy4kcm9vdC5ldmVudEh1Yi4kb2ZmKCJyZXNldC1vcHRpb25zIil9LG1ldGhvZHM6e3Jlc2V0T3B0aW9uczpmdW5jdGlvbigpe3RoaXMuU3RhcnRwYWdlRm9ybT17c3RhdGU6IiIscmVnaW9uOiIiLHN0YXJ0RGF0ZToiIixlbmREYXRlOiIiLHNvcnQ6IjEifSx0aGlzLnBhZ2VObz0xLHRoaXMuZ2V0U3RhcnRwYWdlbExpc3QoKX0sZ2V0U3RhcnRwYWdlbExpc3Q6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49bnVsbCE9PXRoaXMuU3RhcnRwYWdlRm9ybS5zdGFydERhdGU/bmV3IERhdGUodGhpcy5TdGFydHBhZ2VGb3JtLnN0YXJ0RGF0ZSkuZ2V0VGltZSgpOm51bGwsdD1udWxsIT09dGhpcy5TdGFydHBhZ2VGb3JtLmVuZERhdGU/bmV3IERhdGUodGhpcy5TdGFydHBhZ2VGb3JtLmVuZERhdGUpLmdldFRpbWUoKTpudWxsOyhmdW5jdGlvbihlKXtyZXR1cm4gYmUoIm1hbmFnZXIvQXBwQWR2L3BhZ2UiLGUpfSkoe3BhZ2VObzp0aGlzLnBhZ2VObyxwYWdlU2l6ZTp0aGlzLnBhZ2VTaXplLHN0YXRlOnRoaXMuU3RhcnRwYWdlRm9ybS5zdGF0ZSx0aW1lU3RhcnQ6bix0aW1lRW5kOnR9KS50aGVuKGZ1bmN0aW9uKG4pe2lmKG4uc3RhdHVzKXt2YXIgdD1uLmRhdGEucmVzdWx0Lmxpc3Q7ZS50YWJsZURhdGE9dCxlLnRvdGFsPXQudG90YWx9fSl9LHNlYXJjaFN0YXJ0cGFnZTpmdW5jdGlvbigpe3RoaXMucGFnZU5vPTEsdGhpcy4kb3B0aW9ucy5maWx0ZXJzLnN3YXBUaW1lKHRoaXMuU3RhcnRwYWdlRm9ybSksdGhpcy5nZXRTdGFydHBhZ2VsTGlzdCgpfSxoYW5kbGVEZWxldGU6ZnVuY3Rpb24oZSl7dmFyIG49dGhpczt0aGlzLiRjb25maXJtKCLmmK/lkKbliKDpmaTor6Xlub/lkYrpobU/Iiwi5o+Q56S6Iix7Y29uZmlybUJ1dHRvblRleHQ6IuehruWumiIsY2FuY2VsQnV0dG9uVGV4dDoi5Y+W5raIIix0eXBlOiJ3YXJuaW5nIn0pLnRoZW4oZnVuY3Rpb24oKXt2YXIgdDsodD17YXBwQWR2OnthZGlkOmUuYWRpZH19LGJlKCJtYW5hZ2VyL0FwcEFkdi9kZWxldGUiLHQpKS50aGVuKGZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKGUpLGUuZGF0YS5zdGF0dXMmJm4uJG1lc3NhZ2Uoe3R5cGU6InN1Y2Nlc3MiLG1lc3NhZ2U6IuWIoOmZpOaIkOWKnyEifSksbi5nZXRTdGFydHBhZ2VsTGlzdCgpfSl9KS5jYXRjaChmdW5jdGlvbigpe30pfSxoYW5kbGVFZGl0OmZ1bmN0aW9uKGUpe3Nlc3Npb25TdG9yYWdlLnNldEl0ZW0oImFkaWQiLGUuYWRpZCksdGhpcy4kcm91dGVyLnB1c2goe25hbWU6InN0YXJ0cGFnZUVkaXQiLHBhcmFtczplfSl9LGhhbmRsZVNpemVDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5wYWdlU2l6ZT1lLHRoaXMuc2VhcmNoU3RhcnRwYWdlKCl9LGhhbmRsZUN1cnJlbnRDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5wYWdlTm89ZSx0aGlzLmdldFN0YXJ0cGFnZWxMaXN0KCl9LHRvZ2dsZUFsbFNlbGVjdGlvbjpmdW5jdGlvbihlKXt0aGlzLiRyZWZzLnNsaWRlVGFibGUudG9nZ2xlQWxsU2VsZWN0aW9uKCl9LGNlbGxDbGljazpmdW5jdGlvbihlLG4sdCxhKXt2YXIgaT10aGlzLGw9YS50YXJnZXQuZGF0YXNldC5pZDtsJiYodGhpcy5jbGlja0NlbGxJbmRleD1wYXJzZUludChsKSksdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXtkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIuZWwtdG9vbHRpcCA+IGlucHV0LnNlbGYtc29ydCIpLmZvckVhY2goZnVuY3Rpb24obil7biYmKGkuc2VsZWN0QWRJZD1lLmFkaWQsbi5mb2N1cygpLG4ub25rZXl1cD1mdW5jdGlvbihlKXtuLnZhbHVlJiYoaS5zb3J0VmFsdWU9cGFyc2VJbnQobi52YWx1ZSkpfSl9KX0pfSxjZWxsTW91c2VMZWF2ZTpmdW5jdGlvbihlLG4sdCxhKXt2YXIgaSxsPXRoaXM7aWYodGhpcy5jbGlja0NlbGxJbmRleD0tMSwtMT09PXRoaXMuc29ydFZhbHVlfHx0aGlzLnNlbGVjdEFkSWQhPT1lLmFkaWQpcmV0dXJuITE7KGk9e2FwcEFkdjp7YWRpZDplLmFkaWQsc29ydDp0aGlzLnNvcnRWYWx1ZX19LGJlKCJtYW5hZ2VyL0FwcEFkdi91cGRhdGVTb3J0IixpKSkudGhlbihmdW5jdGlvbihlKXtlLnN0YXR1cyYmKGwuZ2V0U3RhcnRwYWdlbExpc3QoKSxsLnNvcnRWYWx1ZT0tMSl9KX19fSxVaT1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1lLiRjcmVhdGVFbGVtZW50LHQ9ZS5fc2VsZi5fY3x8bjtyZXR1cm4gdCgiZGl2Iix7c3RhdGljQ2xhc3M6InN0YXJ0cGFnZS1saXN0In0sW3QoImRpdiIsW3QoImNpcmNsZS10aXRsZSIse3N0YXRpY0NsYXNzOiJjaWNsZS1jb250cm9sbGVyIixhdHRyczp7InRpdGxlLW5hbWUiOiLlub/lkYrpobXnrqHnkIYifX0pLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoic2VhcmNoLWZvcm0tY29udGFpbmVyIn0sW3QoImVsLWZvcm0iLHtzdGF0aWNDbGFzczoiZGVtby1mb3JtLWlubGluZSIsYXR0cnM6e2lubGluZTohMCxtb2RlbDplLlN0YXJ0cGFnZUZvcm19fSxbdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6InNlYXJjaC1sZWZ0IixhdHRyczp7bGFiZWw6IueKtuaAgSJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiIifSxvbjp7Y2hhbmdlOmUuc2VhcmNoU3RhcnRwYWdlfSxtb2RlbDp7dmFsdWU6ZS5TdGFydHBhZ2VGb3JtLnN0YXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLlN0YXJ0cGFnZUZvcm0sInN0YXRlIixuKX0sZXhwcmVzc2lvbjoiU3RhcnRwYWdlRm9ybS5zdGF0ZSJ9fSxbdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOiIiLGxhYmVsOiLlhajpg6gifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MCxsYWJlbDoi5b6F5LiK57q/In19KSxlLl92KCIgIiksdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjEsbGFiZWw6IuS9v+eUqOS4rSJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZToyLGxhYmVsOiLlt7LkuIvnur8ifX0pXSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY1N0eWxlOnsibWFyZ2luLWxlZnQiOiItNzBweCJ9LGF0dHJzOntsYWJlbDoi5byA5aeL5pe26Ze0In19LFt0KCJlbC1kYXRlLXBpY2tlciIse2F0dHJzOnt0aXRsZTplLl9mKCJGb3JtYXREYXRlIikoZS5TdGFydHBhZ2VGb3JtLnN0YXJ0RGF0ZSwieXl5eS1NTS1kZCBoaDptbSIpLHR5cGU6ImRhdGV0aW1lIixmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLHBsYWNlaG9sZGVyOiLpgInmi6nml6XmnJ8ifSxvbjp7Y2hhbmdlOmUuc2VhcmNoU3RhcnRwYWdlfSxtb2RlbDp7dmFsdWU6ZS5TdGFydHBhZ2VGb3JtLnN0YXJ0RGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5TdGFydHBhZ2VGb3JtLCJzdGFydERhdGUiLG4pfSxleHByZXNzaW9uOiJTdGFydHBhZ2VGb3JtLnN0YXJ0RGF0ZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6Iue7k+adn+aXtumXtCJ9fSxbdCgiZWwtZGF0ZS1waWNrZXIiLHthdHRyczp7dGl0bGU6ZS5fZigiRm9ybWF0RGF0ZSIpKGUuU3RhcnRwYWdlRm9ybS5lbmREYXRlLCJ5eXl5LU1NLWRkIGhoOm1tIiksZm9ybWF0OiJ5eXl5LU1NLWRkIEhIOm1tIix0eXBlOiJkYXRldGltZSIscGxhY2Vob2xkZXI6IumAieaLqeaXpeacnyJ9LG9uOntjaGFuZ2U6ZS5zZWFyY2hTdGFydHBhZ2V9LG1vZGVsOnt2YWx1ZTplLlN0YXJ0cGFnZUZvcm0uZW5kRGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5TdGFydHBhZ2VGb3JtLCJlbmREYXRlIixuKX0sZXhwcmVzc2lvbjoiU3RhcnRwYWdlRm9ybS5lbmREYXRlIn19KV0sMSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmUuc2VhcmNoU3RhcnRwYWdlfX0sW2UuX3YoIlxuICAgICAgICAgIOaQnOe0olxuICAgICAgICAgICIpLHQoImkiLHtzdGF0aWNDbGFzczoiZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQifSldKSxlLl92KCIgIiksdCgicm91dGVyLWxpbmsiLHthdHRyczp7dG86Ii9tYW5hZ2VTdGFydHBhZ2UvY3JlYXRlIn19LFt0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToicHJpbWFyeSJ9fSxbZS5fdigiXG4gICAgICAgICAgICDmt7vliqDlkK/liqjpobVcbiAgICAgICAgICAgICIpLHQoImkiLHtzdGF0aWNDbGFzczoiZWwtaWNvbi1wbHVzIGVsLWljb24tLXJpZ2h0In0pXSldLDEpXSwxKV0sMSldLDEpLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoidGFibGUtbGlzdCJ9LFt0KCJlbC10YWJsZSIse3JlZjoic2xpZGVUYWJsZSIsc3RhdGljQ2xhc3M6Indob2xlLXRhYmxlIixhdHRyczp7ZGF0YTplLnRhYmxlRGF0YSxzdHJpcGU6IiIsIm1pbi1oZWlnaHQiOiI0MDAifSxvbjp7ImNlbGwtY2xpY2siOmUuY2VsbENsaWNrLCJjZWxsLW1vdXNlLWxlYXZlIjplLmNlbGxNb3VzZUxlYXZlfX0sW2UuX2woZS50YWJsZUhlYWRlcixmdW5jdGlvbihlLG4pe3JldHVybiB0KCJlbC10YWJsZS1jb2x1bW4iLHtrZXk6bixhdHRyczp7cHJvcDplLnByb3AsbGFiZWw6ZS5sYWJlbCx3aWR0aDplLndpZHRoLGZvcm1hdHRlcjplLmZvcm1hdHRlcixhbGlnbjoiY2VudGVyIixmaXhlZDoiIiwic2hvdy1vdmVyZmxvdy10b29sdGlwIjoiIn19KX0pLGUuX3YoIiAiKSx0KCJlbC10YWJsZS1jb2x1bW4iLHthdHRyczp7Zml4ZWQ6InJpZ2h0IixsYWJlbDoi5pON5L2cIixhbGlnbjoiY2VudGVyIix3aWR0aDoiMTAwIn0sc2NvcGVkU2xvdHM6ZS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24obil7cmV0dXJuW3QoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJ0ZXh0IixzaXplOiJzbWFsbCIsaWNvbjoiZWwtaWNvbi1lZGl0In0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuaGFuZGxlRWRpdChuLnJvdyl9fX0pLGUuX3YoIiAiKSx0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToidGV4dCIsc2l6ZToic21hbGwiLGljb246ImVsLWljb24tZGVsZXRlIn0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuaGFuZGxlRGVsZXRlKG4ucm93KX19fSldfX1dKX0pXSwyKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InBhZ2luYXRpb24ifSxbdCgiZWwtcGFnaW5hdGlvbiIse2F0dHJzOnt0b3RhbDplLnRvdGFsLCJwYWdlLXNpemVzIjpbMTAsMjAsMzAsNDBdLCJjdXJyZW50LXBhZ2UiOmUucGFnZU5vLGJhY2tncm91bmQ6IiIsbGF5b3V0OiJ0b3RhbCwgc2l6ZXMsIHByZXYsIHBhZ2VyLCBuZXh0In0sb246eyJzaXplLWNoYW5nZSI6ZS5oYW5kbGVTaXplQ2hhbmdlLCJjdXJyZW50LWNoYW5nZSI6ZS5oYW5kbGVDdXJyZW50Q2hhbmdlfX0pXSwxKV0sMSldKX07VWkuX3dpdGhTdHJpcHBlZD0hMDt2YXIgTmk9e3JlbmRlcjpVaSxzdGF0aWNSZW5kZXJGbnM6W119LFJpPU5pO3ZhciBWaT0hMTt2YXIgamk9dCgiVlUvOCIpKHppLFJpLCExLGZ1bmN0aW9uKGUpe1ZpfHwodCgiNjBONiIpLHQoImZITEgiKSl9LCJkYXRhLXYtNGEyZDcxOGMiLG51bGwpO2ppLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9tYW5hZ2VTdGFydHBhZ2Uvc3RhcnRwYWdlTGlzdC52dWUiO3ZhciBQaT1qaS5leHBvcnRzLEhpPXtjb21wb25lbnRzOntDaXJjbGVUaXRsZTplbn0sbWl4aW5zOlt4YV0sZGF0YTpmdW5jdGlvbigpe3JldHVybntlZGl0Rm9ybTp7aW1nX3VybDoiIixjaGFubmVsQmVsb25nOiIxIixqdW1wX3VybDoiIix2YWxpZGl0eTpbbmV3IERhdGUsbmV3IERhdGVdLHNvcnQ6IiIscmVzaWRlbmNlX3RpbWU6IiJ9LGlzQ2hvb3NlRGF0ZTohMSxkaWFsb2dWaXNpYmxlOiExLGNvbXBvbmVudE5hbWU6IkFkZE1hbnVzY3JpcHQiLHJ1bGVzOntpbWdfdXJsOlt7cmVxdWlyZWQ6ITAsbWVzc2FnZToi6K+35LiK5Lyg5ZCv5Yqo6aG15Zu+54mHIix0cmlnZ2VyOiJjaGFuZ2UifV0sdmFsaWRpdHk6W3t0eXBlOiJkYXRlIixyZXF1aXJlZDohMCxtZXNzYWdlOiLor7fpgInmi6nml7bpl7QiLHRyaWdnZXI6ImNoYW5nZSJ9XSxyZXNpZGVuY2VfdGltZTpbe3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+i+k+WFpempu+eVmeaXtumXtCIsdHJpZ2dlcjoiY2hhbmdlIn0se3R5cGU6Im51bWJlciIsbWVzc2FnZToi6am755WZ5pe26Ze05b+F6aG75Li65pWw5a2XIn1dLHNvcnQ6W3tyZXF1aXJlZDohMCxtZXNzYWdlOiLor7fovpPlhaXmjpLluo8iLHRyaWdnZXI6ImJsdXIifSx7dHlwZToibnVtYmVyIixtZXNzYWdlOiLmjpLluo/lv4XpobvkuLrmlbDlrZcifV19fX0sY29tcHV0ZWQ6e2dldFVwbG9hZFVybDpmdW5jdGlvbigpe3JldHVybiBfZSgpfX0sbWV0aG9kczp7c3VibWl0Rm9ybTpmdW5jdGlvbihlKXt2YXIgbj10aGlzO3RoaXMuJHJlZnNbZV0udmFsaWRhdGUoZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuIGNvbnNvbGUubG9nKCJlcnJvciBzdWJtaXQhISIpLCExO3ZhciB0Oyh0PXthcHBBZHY6e2ltZ191cmw6bi5lZGl0Rm9ybS5pbWdfdXJsLGp1bXBfdXJsOm4uZWRpdEZvcm0uanVtcF91cmwscmVzaWRlbmNlX3RpbWU6bi5lZGl0Rm9ybS5yZXNpZGVuY2VfdGltZSxzb3J0Om4uZWRpdEZvcm0uc29ydCxleHBpcnlfZGF0ZV9zdGFydDpuZXcgRGF0ZShuLmVkaXRGb3JtLnZhbGlkaXR5WzBdKS5nZXRUaW1lKCksZXhwaXJ5X2RhdGVfZW5kOm5ldyBEYXRlKG4uZWRpdEZvcm0udmFsaWRpdHlbMV0pLmdldFRpbWUoKX19LGJlKCJtYW5hZ2VyL0FwcEFkdi9hZGQiLHQpKS50aGVuKGZ1bmN0aW9uKGUpezIwMD09PWUuc3RhdHVzJiYobi4kcm91dGVyLnB1c2goe3BhdGg6Ii9tYW5hZ2VTdGFydHBhZ2UvbGlzdCJ9KSxuLiRub3RpZnkoe3RpdGxlOiLpgJrnn6UiLG1lc3NhZ2U6Iue8lui+keaIkOWKnyIsdHlwZToic3VjY2VzcyJ9KSl9KX0pfSxoYW5kbGVQY0F2YXRhclN1Y2Nlc3M6ZnVuY3Rpb24oZSxuKXtpZihlLnN0YXR1cyl7dmFyIHQ9ZS5yZXN1bHQ7dGhpcy5lZGl0Rm9ybS5pbWdfdXJsPXR9fSxiZWZvcmVBdmF0YXJVcGxvYWQ6ZnVuY3Rpb24oZSl7dmFyIG49ZS50eXBlIGlueyJpbWFnZS9qcGVnIjohMCwiaW1hZ2UvcG5nIjohMCwiaW1hZ2UvanBnIjohMH0sdD1lLnNpemUvMTAyNC8xMDI0PDI7cmV0dXJuIG58fHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuivt+S4iuS8oOWbvueJh+agvOW8j+eahOaWh+S7tiEiKSx0fHx0aGlzLiRtZXNzYWdlLmVycm9yKCLkuIrkvKDlm77niYflpKflsI/kuI3og73otoXov4cgMk1CISIpLG4mJnR9fX0sUWk9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJzdGFydHBhZ2UgY3JlYXRlIn0sW3QoImNpcmNsZS10aXRsZSIse3N0YXRpY0NsYXNzOiJjaWNsZS1jb250cm9sbGVyIixhdHRyczp7InRpdGxlLW5hbWUiOiLlkK/liqjpobXmlrDlop4ifX0pLGUuX3YoIiAiKSx0KCJlbC1mb3JtIix7cmVmOiJlZGl0Rm9ybSIsc3RhdGljQ2xhc3M6InJ1bGUtZm9ybSIsYXR0cnM6e21vZGVsOmUuZWRpdEZvcm0scnVsZXM6ZS5ydWxlcywibGFiZWwtd2lkdGgiOiIxMDBweCJ9fSxbdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6Iml0ZW0iLGF0dHJzOntsYWJlbDoi5Zu+5qCH6YWN572uIixwcm9wOiJpbWdfdXJsIn19LFt0KCJlbC11cGxvYWQiLHtzdGF0aWNDbGFzczoiYXZhdGFyLXVwbG9hZGVyIixhdHRyczp7YWN0aW9uOmUuZ2V0VXBsb2FkVXJsLGhlYWRlcnM6ZS51cGxvYWRIZWFkZXJzLCJzaG93LWZpbGUtbGlzdCI6ITEsIm9uLXN1Y2Nlc3MiOmUuaGFuZGxlUGNBdmF0YXJTdWNjZXNzLCJiZWZvcmUtdXBsb2FkIjplLmJlZm9yZUF2YXRhclVwbG9hZH19LFtlLmVkaXRGb3JtLmltZ191cmw/dCgiaW1nIix7c3RhdGljQ2xhc3M6ImF2YXRhciIsYXR0cnM6e3NyYzplLmVkaXRGb3JtLmltZ191cmx9fSk6dCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXBsdXMgYXZhdGFyLXVwbG9hZGVyLWljb24ifSldKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi6ZO+5o6l5Zyw5Z2AIn19LFt0KCJlbC1pbnB1dCIse21vZGVsOnt2YWx1ZTplLmVkaXRGb3JtLmp1bXBfdXJsLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmVkaXRGb3JtLCJqdW1wX3VybCIsInN0cmluZyI9PXR5cGVvZiBuP24udHJpbSgpOm4pfSxleHByZXNzaW9uOiJlZGl0Rm9ybS5qdW1wX3VybCJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoidmFsaWRpdHkiLGF0dHJzOntsYWJlbDoi5pyJ5pWI5pyfIixyZXF1aXJlZDoiIn19LFt0KCJlbC1kYXRlLXBpY2tlciIse3N0YXRpY1N0eWxlOnt3aWR0aDoiMTAwJSJ9LGF0dHJzOntjbGVhcmFibGU6ITEsZGlzYWJsZWQ6ZS5pc0Nob29zZURhdGUsdHlwZToiZGF0ZXRpbWVyYW5nZSIsZm9ybWF0OiJ5eXl5LU1NLWRkIEhIOm1tIiwicmFuZ2Utc2VwYXJhdG9yIjoi6IezIiwic3RhcnQtcGxhY2Vob2xkZXIiOiLlvIDlp4vml6XmnJ8iLCJlbmQtcGxhY2Vob2xkZXIiOiLnu5PmnZ/ml6XmnJ8ifSxtb2RlbDp7dmFsdWU6ZS5lZGl0Rm9ybS52YWxpZGl0eSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5lZGl0Rm9ybSwidmFsaWRpdHkiLG4pfSxleHByZXNzaW9uOiJlZGl0Rm9ybS52YWxpZGl0eSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoicmVzaWRlbmNlX3RpbWUiLGF0dHJzOntsYWJlbDoi6am755WZ5pe26Ze0Iixwcm9wOiJyZXNpZGVuY2VfdGltZSJ9fSxbdCgiZWwtaW5wdXQiLHtzdGF0aWNTdHlsZTp7d2lkdGg6Ijc1JSJ9LG1vZGVsOnt2YWx1ZTplLmVkaXRGb3JtLnJlc2lkZW5jZV90aW1lLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmVkaXRGb3JtLCJyZXNpZGVuY2VfdGltZSIsZS5fbihuKSl9LGV4cHJlc3Npb246ImVkaXRGb3JtLnJlc2lkZW5jZV90aW1lIn19KSxlLl92KCIgIiksdCgic3BhbiIsW2UuX3YoInMiKV0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6InNvcnQiLGF0dHJzOntsYWJlbDoi5o6S5bqPIixwcm9wOiJzb3J0IixyZXF1aXJlZDoiIn19LFt0KCJlbC1pbnB1dCIse3N0YXRpY1N0eWxlOnt3aWR0aDoiNzUlIn0sbW9kZWw6e3ZhbHVlOmUuZWRpdEZvcm0uc29ydCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5lZGl0Rm9ybSwic29ydCIsZS5fbihuKSl9LGV4cHJlc3Npb246ImVkaXRGb3JtLnNvcnQifX0pLGUuX3YoIiAiKSx0KCJzcGFuIixbZS5fdigi5o+Q56S677ya5pWw5a2X6LaK5bCP6LaK5b6A5YmNIildKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIsW3QoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmZ1bmN0aW9uKG4pe2Uuc3VibWl0Rm9ybSgiZWRpdEZvcm0iKX19fSxbZS5fdigi5o+Q5LqkIildKSxlLl92KCIgIiksdCgicm91dGVyLWxpbmsiLHthdHRyczp7dG86Ii9tYW5hZ2VTdGFydHBhZ2UvbGlzdCJ9fSxbdCgiZWwtYnV0dG9uIixbZS5fdigi5Y+W5raIIildKV0sMSldLDEpXSwxKV0sMSl9O1FpLl93aXRoU3RyaXBwZWQ9ITA7dmFyIFdpPXtyZW5kZXI6UWksc3RhdGljUmVuZGVyRm5zOltdfSxPaT1XaTt2YXIgcWk9ITE7dmFyIFlpPXQoIlZVLzgiKShIaSxPaSwhMSxmdW5jdGlvbihlKXtxaXx8dCgiVWhIbSIpfSwiZGF0YS12LTIxMzFmNTJjIixudWxsKTtZaS5vcHRpb25zLl9fZmlsZT0ic3JjL2NvbXBvbmVudHMvbWFuYWdlU3RhcnRwYWdlL3N0YXJ0cGFnZUNyZWF0ZS52dWUiO3ZhciBaaT1ZaS5leHBvcnRzLEdpPXtjb21wb25lbnRzOntDaXJjbGVUaXRsZTplbn0sbWl4aW5zOlt4YV0sZGF0YTpmdW5jdGlvbigpe3JldHVybntlZGl0Rm9ybTp7aW1nX3VybDoiIixjaGFubmVsQmVsb25nOiIxIixqdW1wX3VybDoiIn0sYWRpZDoiIixpc1JlZnJlc2g6ITB9fSxjb21wdXRlZDp7Z2V0VXBsb2FkVXJsOmZ1bmN0aW9uKCl7cmV0dXJuIF9lKCl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dGhpcy5nZXRFZGl0SW5mbygpfSxtZXRob2RzOntnZXRFZGl0SW5mbzpmdW5jdGlvbigpe3ZhciBlLG49dGhpcztiZSgibWFuYWdlci9BcHBBZHYvZ2V0RW1iZWRkZWRBZHYiLGUpLnRoZW4oZnVuY3Rpb24oZSl7ZS5kYXRhLnN0YXR1cyYmKGNvbnNvbGUubG9nKGUuZGF0YSksbi5lZGl0Rm9ybS5pbWdfdXJsPWUuZGF0YS5yZXN1bHQuYmdfdXJsLG4uZWRpdEZvcm0uanVtcF91cmw9ZS5kYXRhLnJlc3VsdC5qdW1wX3VybCl9KX0sc3VibWl0Rm9ybTpmdW5jdGlvbigpe3ZhciBlLG49dGhpczsoZT17ZW1iZWRkZWQ6e3RpdGxlOiIiLGJnX3VybDp0aGlzLmVkaXRGb3JtLmltZ191cmwsanVtcF91cmw6dGhpcy5lZGl0Rm9ybS5qdW1wX3VybH19LGJlKCJtYW5hZ2VyL0FwcEFkdi9zYXZlRW1iZWRkZWRBZHYiLGUpKS50aGVuKGZ1bmN0aW9uKGUpezIwMD09PWUuc3RhdHVzJiZuLiRub3RpZnkoe3RpdGxlOiLpgJrnn6UiLG1lc3NhZ2U6IuS/neWtmOaIkOWKnyIsdHlwZToic3VjY2VzcyJ9KX0pfSxjbGVhcklubmVyUGFnZTpmdW5jdGlvbigpe3RoaXMuZWRpdEZvcm0uaW1nX3VybD0iIix0aGlzLmVkaXRGb3JtLmp1bXBfdXJsPSIiLHRoaXMuc3VibWl0Rm9ybSgpfSxoYW5kbGVQY0F2YXRhclN1Y2Nlc3M6ZnVuY3Rpb24oZSxuKXtpZihlLnN0YXR1cyl7dmFyIHQ9ZS5yZXN1bHQ7dGhpcy5lZGl0Rm9ybS5pbWdfdXJsPXR9fSxiZWZvcmVBdmF0YXJVcGxvYWQ6ZnVuY3Rpb24oZSl7dmFyIG49ZS50eXBlIGlueyJpbWFnZS9qcGVnIjohMCwiaW1hZ2UvcG5nIjohMCwiaW1hZ2UvanBnIjohMH0sdD1lLnNpemUvMTAyNC8xMDI0PDI7cmV0dXJuIG58fHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuivt+S4iuS8oOWbvueJh+agvOW8j+eahOaWh+S7tiEiKSx0fHx0aGlzLiRtZXNzYWdlLmVycm9yKCLkuIrkvKDlm77niYflpKflsI/kuI3og73otoXov4cgMk1CISIpLG4mJnR9fX0sSmk9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJzdGFydHBhZ2UgY3JlYXRlIn0sW3QoImNpcmNsZS10aXRsZSIse3N0YXRpY0NsYXNzOiJjaWNsZS1jb250cm9sbGVyIixhdHRyczp7InRpdGxlLW5hbWUiOiLlhoXltYzlub/lkYrpobXnrqHnkIYifX0pLGUuX3YoIiAiKSx0KCJlbC1mb3JtIix7cmVmOiJlZGl0Rm9ybSIsc3RhdGljQ2xhc3M6InJ1bGUtZm9ybSIsYXR0cnM6e21vZGVsOmUuZWRpdEZvcm0sImxhYmVsLXdpZHRoIjoiMTAwcHgifX0sW3QoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJpdGVtIixhdHRyczp7bGFiZWw6IuWbvuagh+mFjee9riJ9fSxbdCgiZWwtdXBsb2FkIix7c3RhdGljQ2xhc3M6ImF2YXRhci11cGxvYWRlciIsYXR0cnM6e2FjdGlvbjplLmdldFVwbG9hZFVybCxoZWFkZXJzOmUudXBsb2FkSGVhZGVycywic2hvdy1maWxlLWxpc3QiOiExLCJvbi1zdWNjZXNzIjplLmhhbmRsZVBjQXZhdGFyU3VjY2VzcywiYmVmb3JlLXVwbG9hZCI6ZS5iZWZvcmVBdmF0YXJVcGxvYWR9fSxbZS5lZGl0Rm9ybS5pbWdfdXJsP3QoImltZyIse3N0YXRpY0NsYXNzOiJhdmF0YXIiLGF0dHJzOntzcmM6ZS5lZGl0Rm9ybS5pbWdfdXJsfX0pOnQoImkiLHtzdGF0aWNDbGFzczoiZWwtaWNvbi1wbHVzIGF2YXRhci11cGxvYWRlci1pY29uIn0pXSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IumTvuaOpeWcsOWdgCJ9fSxbdCgiZWwtaW5wdXQiLHttb2RlbDp7dmFsdWU6ZS5lZGl0Rm9ybS5qdW1wX3VybCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5lZGl0Rm9ybSwianVtcF91cmwiLG4pfSxleHByZXNzaW9uOiJlZGl0Rm9ybS5qdW1wX3VybCJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLFt0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToicHJpbWFyeSJ9LG9uOntjbGljazplLnN1Ym1pdEZvcm19fSxbZS5fdigi5o+Q5LqkIildKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6ImRhbmdlciJ9LG9uOntjbGljazplLmNsZWFySW5uZXJQYWdlfX0sW2UuX3YoIua4hemZpCIpXSldLDEpXSwxKV0sMSl9O0ppLl93aXRoU3RyaXBwZWQ9ITA7dmFyIFhpPXtyZW5kZXI6Smksc3RhdGljUmVuZGVyRm5zOltdfSxLaT1YaTt2YXIgZWw9ITE7dmFyIG5sPXQoIlZVLzgiKShHaSxLaSwhMSxmdW5jdGlvbihlKXtlbHx8dCgib1VWTCIpfSwiZGF0YS12LTYyODU1M2YyIixudWxsKTtubC5vcHRpb25zLl9fZmlsZT0ic3JjL2NvbXBvbmVudHMvbWFuYWdlU3RhcnRwYWdlL2lubmVyQWR2ZXJFZGl0LnZ1ZSI7dmFyIHRsPW5sLmV4cG9ydHMsYWw9e2NvbXBvbmVudHM6e0NpcmNsZVRpdGxlOmVufSxtaXhpbnM6W3hhXSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2VkaXRGb3JtOntpbWdfdXJsOiIiLGNoYW5uZWxCZWxvbmc6IjEiLGp1bXBfdXJsOiIiLHZhbGlkaXR5OltdLHNvcnQ6IiIscmVzaWRlbmNlX3RpbWU6IiJ9LGlzQ2hvb3NlRGF0ZTohMSxkaWFsb2dWaXNpYmxlOiExLGNvbXBvbmVudE5hbWU6IkFkZE1hbnVzY3JpcHQiLHJ1bGVzOnt2YWxpZGl0eTpbe3R5cGU6ImRhdGUiLHJlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+mAieaLqeaXtumXtCIsdHJpZ2dlcjoiY2hhbmdlIn1dLHJlc2lkZW5jZV90aW1lOlt7cmVxdWlyZWQ6ITAsbWVzc2FnZToi6K+36L6T5YWl6am755WZ5pe26Ze0Iix0cmlnZ2VyOiJjaGFuZ2UifSx7dHlwZToibnVtYmVyIixtZXNzYWdlOiLpqbvnlZnml7bpl7Tlv4XpobvkuLrmlbDlrZcifV0sc29ydDpbe3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+i+k+WFpeaOkuW6jyIsdHJpZ2dlcjoiYmx1ciJ9LHt0eXBlOiJudW1iZXIiLG1lc3NhZ2U6IuaOkuW6j+W/hemhu+S4uuaVsOWtlyJ9XX0sYWRpZDoiIixpc1JlZnJlc2g6ITB9fSxjb21wdXRlZDp7Z2V0VXBsb2FkVXJsOmZ1bmN0aW9uKCl7cmV0dXJuIF9lKCl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dGhpcy5nZXRFZGl0SW5mbygpfSxiZWZvcmVSb3V0ZUxlYXZlOmZ1bmN0aW9uKGUsbix0KXsiL21hbmFnZVN0YXJ0cGFnZS9saXN0Ij09PWUucGF0aD9lLm1ldGEucmVmcmVzaD10aGlzLmlzUmVmcmVzaDoiL21hbmFnZVN0YXJ0cGFnZS9jcmVhdGUiPT09ZS5wYXRoJiZ0aGlzLiRyb290LmV2ZW50SHViLiRlbWl0KCJyZXNldC1vcHRpb25zIiksdCgpfSxtZXRob2RzOntnb3RvTGlzdDpmdW5jdGlvbigpe3RoaXMuaXNSZWZyZXNoPSExLHRoaXMuJHJvdXRlci5wdXNoKHtwYXRoOiIvbWFuYWdlU3RhcnRwYWdlL2xpc3QifSl9LGdldEVkaXRJbmZvOmZ1bmN0aW9uKCl7dmFyIGUsbj10aGlzO3RoaXMuYWRpZD1zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCJhZGlkIiksKGU9e2FwcEFkdjp7YWRpZDp0aGlzLmFkaWR9fSxiZSgibWFuYWdlci9BcHBBZHYvZ2V0QXBwQWR2QnlJRCIsZSkpLnRoZW4oZnVuY3Rpb24oZSl7aWYoZS5kYXRhLnN0YXR1cyl7dmFyIHQ9ZS5kYXRhLnJlc3VsdDtjb25zb2xlLmxvZyh0KSxuLmVkaXRGb3JtLmltZ191cmw9dC5pbWdfdXJsLG4uZWRpdEZvcm0uanVtcF91cmw9dC5qdW1wX3VybCxuLmVkaXRGb3JtLnJlc2lkZW5jZV90aW1lPXQucmVzaWRlbmNlX3RpbWUsbi5lZGl0Rm9ybS5zb3J0PXQuc29ydCxuLmVkaXRGb3JtLnZhbGlkaXR5LnB1c2godC5leHBpcnlfZGF0ZV9zdGFydCksbi5lZGl0Rm9ybS52YWxpZGl0eS5wdXNoKHQuZXhwaXJ5X2RhdGVfZW5kKX19KX0sc3VibWl0Rm9ybTpmdW5jdGlvbihlKXt2YXIgbj10aGlzO3RoaXMuJHJlZnNbZV0udmFsaWRhdGUoZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuIGNvbnNvbGUubG9nKCJlcnJvciBzdWJtaXQhISIpLCExO3ZhciB0Oyh0PXthcHBBZHY6e2FkaWQ6bi5hZGlkLGltZ191cmw6bi5lZGl0Rm9ybS5pbWdfdXJsLGp1bXBfdXJsOm4uZWRpdEZvcm0uanVtcF91cmwscmVzaWRlbmNlX3RpbWU6bi5lZGl0Rm9ybS5yZXNpZGVuY2VfdGltZSxzb3J0Om4uZWRpdEZvcm0uc29ydCxleHBpcnlfZGF0ZV9zdGFydDpuZXcgRGF0ZShuLmVkaXRGb3JtLnZhbGlkaXR5WzBdKS5nZXRUaW1lKCksZXhwaXJ5X2RhdGVfZW5kOm5ldyBEYXRlKG4uZWRpdEZvcm0udmFsaWRpdHlbMV0pLmdldFRpbWUoKX19LGJlKCJtYW5hZ2VyL0FwcEFkdi91cGRhdGUiLHQpKS50aGVuKGZ1bmN0aW9uKGUpezIwMD09PWUuc3RhdHVzJiYobi4kcm91dGVyLnB1c2goe3BhdGg6Ii9tYW5hZ2VTdGFydHBhZ2UvbGlzdCJ9KSxuLiRub3RpZnkoe3RpdGxlOiLpgJrnn6UiLG1lc3NhZ2U6Iue8lui+keaIkOWKnyIsdHlwZToic3VjY2VzcyJ9KSl9KX0pfSxoYW5kbGVQY0F2YXRhclN1Y2Nlc3M6ZnVuY3Rpb24oZSxuKXtpZihlLnN0YXR1cyl7dmFyIHQ9ZS5yZXN1bHQ7dGhpcy5lZGl0Rm9ybS5pbWdfdXJsPXR9fSxiZWZvcmVBdmF0YXJVcGxvYWQ6ZnVuY3Rpb24oZSl7dmFyIG49ZS50eXBlIGlueyJpbWFnZS9qcGVnIjohMCwiaW1hZ2UvcG5nIjohMCwiaW1hZ2UvanBnIjohMH0sdD1lLnNpemUvMTAyNC8xMDI0PDI7cmV0dXJuIG58fHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuivt+S4iuS8oOWbvueJh+agvOW8j+eahOaWh+S7tiEiKSx0fHx0aGlzLiRtZXNzYWdlLmVycm9yKCLkuIrkvKDlm77niYflpKflsI/kuI3og73otoXov4cgMk1CISIpLG4mJnR9fX0saWw9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJzdGFydHBhZ2UgY3JlYXRlIn0sW3QoImNpcmNsZS10aXRsZSIse3N0YXRpY0NsYXNzOiJjaWNsZS1jb250cm9sbGVyIixhdHRyczp7InRpdGxlLW5hbWUiOiLlkK/liqjpobXnvJbovpEifX0pLGUuX3YoIiAiKSx0KCJlbC1mb3JtIix7cmVmOiJlZGl0Rm9ybSIsc3RhdGljQ2xhc3M6InJ1bGUtZm9ybSIsYXR0cnM6e21vZGVsOmUuZWRpdEZvcm0scnVsZXM6ZS5ydWxlcywibGFiZWwtd2lkdGgiOiIxMDBweCJ9fSxbdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6Iml0ZW0iLGF0dHJzOntsYWJlbDoi5Zu+5qCH6YWN572uIn19LFt0KCJlbC11cGxvYWQiLHtzdGF0aWNDbGFzczoiYXZhdGFyLXVwbG9hZGVyIixhdHRyczp7YWN0aW9uOmUuZ2V0VXBsb2FkVXJsLGhlYWRlcnM6ZS51cGxvYWRIZWFkZXJzLCJzaG93LWZpbGUtbGlzdCI6ITEsIm9uLXN1Y2Nlc3MiOmUuaGFuZGxlUGNBdmF0YXJTdWNjZXNzLCJiZWZvcmUtdXBsb2FkIjplLmJlZm9yZUF2YXRhclVwbG9hZH19LFtlLmVkaXRGb3JtLmltZ191cmw/dCgiaW1nIix7c3RhdGljQ2xhc3M6ImF2YXRhciIsYXR0cnM6e3NyYzplLmVkaXRGb3JtLmltZ191cmx9fSk6dCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXBsdXMgYXZhdGFyLXVwbG9hZGVyLWljb24ifSldKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi6ZO+5o6l5Zyw5Z2AIn19LFt0KCJlbC1pbnB1dCIse21vZGVsOnt2YWx1ZTplLmVkaXRGb3JtLmp1bXBfdXJsLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmVkaXRGb3JtLCJqdW1wX3VybCIsbil9LGV4cHJlc3Npb246ImVkaXRGb3JtLmp1bXBfdXJsIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJ2YWxpZGl0eSIsYXR0cnM6e2xhYmVsOiLmnInmlYjmnJ8iLHJlcXVpcmVkOiIifX0sW3QoImVsLWRhdGUtcGlja2VyIix7c3RhdGljU3R5bGU6e3dpZHRoOiIxMDAlIn0sYXR0cnM6e2NsZWFyYWJsZTohMSxkaXNhYmxlZDplLmlzQ2hvb3NlRGF0ZSx0eXBlOiJkYXRldGltZXJhbmdlIixmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLCJyYW5nZS1zZXBhcmF0b3IiOiLoh7MiLCJzdGFydC1wbGFjZWhvbGRlciI6IuW8gOWni+aXpeacnyIsImVuZC1wbGFjZWhvbGRlciI6Iue7k+adn+aXpeacnyJ9LG1vZGVsOnt2YWx1ZTplLmVkaXRGb3JtLnZhbGlkaXR5LGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmVkaXRGb3JtLCJ2YWxpZGl0eSIsbil9LGV4cHJlc3Npb246ImVkaXRGb3JtLnZhbGlkaXR5In19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJyZXNpZGVuY2VfdGltZSIsYXR0cnM6e2xhYmVsOiLpqbvnlZnml7bpl7QiLHByb3A6InJlc2lkZW5jZV90aW1lIn19LFt0KCJlbC1pbnB1dCIse3N0YXRpY1N0eWxlOnt3aWR0aDoiNzUlIn0sbW9kZWw6e3ZhbHVlOmUuZWRpdEZvcm0ucmVzaWRlbmNlX3RpbWUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZWRpdEZvcm0sInJlc2lkZW5jZV90aW1lIixlLl9uKG4pKX0sZXhwcmVzc2lvbjoiZWRpdEZvcm0ucmVzaWRlbmNlX3RpbWUifX0pLGUuX3YoIiAiKSx0KCJzcGFuIixbZS5fdigicyIpXSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoic29ydCIsYXR0cnM6e2xhYmVsOiLmjpLluo8iLHByb3A6InNvcnQiLHJlcXVpcmVkOiIifX0sW3QoImVsLWlucHV0Iix7c3RhdGljU3R5bGU6e3dpZHRoOiI3NSUifSxtb2RlbDp7dmFsdWU6ZS5lZGl0Rm9ybS5zb3J0LGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmVkaXRGb3JtLCJzb3J0IixlLl9uKG4pKX0sZXhwcmVzc2lvbjoiZWRpdEZvcm0uc29ydCJ9fSksZS5fdigiICIpLHQoInNwYW4iLFtlLl92KCLmj5DnpLrvvJrmlbDlrZfotorlsI/otorlvoDliY0iKV0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIixbdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InByaW1hcnkifSxvbjp7Y2xpY2s6ZnVuY3Rpb24obil7ZS5zdWJtaXRGb3JtKCJlZGl0Rm9ybSIpfX19LFtlLl92KCLmj5DkuqQiKV0pLGUuX3YoIiAiKSx0KCJlbC1idXR0b24iLHtvbjp7Y2xpY2s6ZS5nb3RvTGlzdH19LFtlLl92KCLlj5bmtogiKV0pXSwxKV0sMSldLDEpfTtpbC5fd2l0aFN0cmlwcGVkPSEwO3ZhciBsbD17cmVuZGVyOmlsLHN0YXRpY1JlbmRlckZuczpbXX0sb2w9bGw7dmFyIHNsPSExO3ZhciBybD10KCJWVS84IikoYWwsb2wsITEsZnVuY3Rpb24oZSl7c2x8fHQoIlREN0YiKX0sImRhdGEtdi01OTc1OThmOCIsbnVsbCk7cmwub3B0aW9ucy5fX2ZpbGU9InNyYy9jb21wb25lbnRzL21hbmFnZVN0YXJ0cGFnZS9zdGFydHBhZ2VFZGl0LnZ1ZSI7dmFyIGNsPXJsLmV4cG9ydHM7ZnVuY3Rpb24gbWwoZSl7cmV0dXJuIGJlKCJtYW5hZ2VyL09uRGVtYW5kQ2hhbm5lbC9saXN0VXNhYmxlUGFyZW50Q2hhbm5lbCIsZSl9ZnVuY3Rpb24gZGwoZSl7cmV0dXJuIGJlKCJtYW5hZ2VyL0NoYW5uZWwvbGlzdENoYW5uZWxUeXBlIixlKX12YXIgcGw9e3Byb3BzOnt2aWRlb2lkOnt0eXBlOlN0cmluZyxkZWZhdWx0OiIwIn0sbWFudVRpdGxlOnt0eXBlOlN0cmluZyxkZWZhdWx0OiLml6AifX0sZGF0YTpmdW5jdGlvbigpe3JldHVybnt0YWJsZURhdGE6W10sY2hhbm5lbEdyb3VwOltdLGlzU2hvd0lucHV0OiExLHN1Ym1pdE1hbnVUaXRsZTp0aGlzLm1hbnVUaXRsZX19LGNvbXB1dGVkOnt9LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLmdldFNldHRpbmdDaGFubmVsKCl9LG1ldGhvZHM6e2dldFNldHRpbmdDaGFubmVsOmZ1bmN0aW9uKCl7dmFyIGUsbj10aGlzOyhlPXt2aWRlbzp7dmlkZW9pZDp0aGlzLnZpZGVvaWR9fSxiZSgibWFuYWdlci9PbkRlbWFuZFZpZGVvL2xpc3RVc2FibGVDaGFubmVsQW5kSXNCZWxvbmciLGUpKS50aGVuKGZ1bmN0aW9uKGUpe2lmKGUuZGF0YS5zdGF0dXMpe3ZhciB0PWUuZGF0YS5yZXN1bHQ7bi50YWJsZURhdGE9dH19KX0sc2V0Q2hhbm5lbEJ0bjpmdW5jdGlvbihlKXt2YXIgbix0PXRoaXM7KG49e3ZpZGVvaWQ6dGhpcy52aWRlb2lkLGNoYW5uZWxpZDplLmNoYW5uZWxpZCxzYXZlT3JEZWw6ZS5pc0NoZWNrZWR9LGJlKCJtYW5hZ2VyL09uRGVtYW5kVmlkZW8vc2F2ZU9yRGVsQ2hhbm5lbFZpZGVvUmVsYXRpb24iLG4pKS50aGVuKGZ1bmN0aW9uKGUpe2Uuc3RhdHVzJiZ0LiRtZXNzYWdlKHt0eXBlOiJzdWNjZXNzIixtZXNzYWdlOiLphY3nva7miJDlip8hIn0pfSl9LHNob3dJbnB1dDpmdW5jdGlvbigpe3RoaXMuaXNTaG93SW5wdXQ9ITAsdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXt0aGlzLiRyZWZzLm1hbnVJbnB1dC5mb2N1cygpfSl9LGhpZGVJbnB1dEFuZFN1Ym1pdDpmdW5jdGlvbigpe3ZhciBlLG49dGhpczt0aGlzLmlzU2hvd0lucHV0PSExLChlPXt2aWRlbzp7dmlkZW9pZDp0aGlzLnZpZGVvaWQsdGl0bGU6dGhpcy5zdWJtaXRNYW51VGl0bGV9fSxiZSgibWFuYWdlci9PbkRlbWFuZFZpZGVvL3VwZGF0ZVRpdGxlIixlKSkudGhlbihmdW5jdGlvbihlKXtlLnN0YXR1cyYmbi4kbWVzc2FnZSh7dHlwZToic3VjY2VzcyIsbWVzc2FnZToi5L+u5pS55oiQ5YqfISJ9KX0pfX19LHVsPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPWUuJGNyZWF0ZUVsZW1lbnQsdD1lLl9zZWxmLl9jfHxuO3JldHVybiB0KCJkaXYiLFt0KCJkaXYiLHtzdGF0aWNDbGFzczoidGl0bGUtY2xhc3MifSxbdCgic3BhbiIsW2UuX3YoIueov+S7tuS4u+mimDpcbiAgICAgICIpLGUuaXNTaG93SW5wdXQ/ZS5fZSgpOnQoInNwYW4iLFtlLl92KCJcbiAgICAgICAgIitlLl9zKGUuc3VibWl0TWFudVRpdGxlKSsiXG4gICAgICAgICIpLHQoImEiLHtzdGF0aWNTdHlsZTp7Y29sb3I6ImJsdWUiLGN1cnNvcjoicG9pbnRlciJ9LG9uOntjbGljazplLnNob3dJbnB1dH19LFtlLl92KCLkv67mlLkiKV0pXSksZS5fdigiICIpLGUuaXNTaG93SW5wdXQ/dCgic3BhbiIsW3QoImVsLWlucHV0Iix7cmVmOiJtYW51SW5wdXQiLHN0YXRpY1N0eWxlOnt3aWR0aDoiNDAwcHgifSxhdHRyczp7dHlwZToidGV4dCJ9LG9uOntibHVyOmUuaGlkZUlucHV0QW5kU3VibWl0fSxtb2RlbDp7dmFsdWU6ZS5zdWJtaXRNYW51VGl0bGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS5zdWJtaXRNYW51VGl0bGU9bn0sZXhwcmVzc2lvbjoic3VibWl0TWFudVRpdGxlIn19KV0sMSk6ZS5fZSgpXSldKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InRhYmxlLWxpc3QifSxbdCgiZWwtdGFibGUiLHtyZWY6ImNoYW5uZWxUYWJsZSIsc3RhdGljQ2xhc3M6Indob2xlLXRhYmxlIixzdGF0aWNTdHlsZTp7d2lkdGg6IjQ1MHB4In0sYXR0cnM6e2RhdGE6ZS50YWJsZURhdGEsc3RyaXBlOiIiLHNpemU6Im1pbmkiLCJtaW4taGVpZ2h0IjoiNDAwIn19LFt0KCJlbC10YWJsZS1jb2x1bW4iLHthdHRyczp7cHJvcDoiY2hhbm5lbF9uYW1lIixsYWJlbDoi5b2S5bGe6aKR6YGTIixhbGlnbjoibGVmdCIsd2lkdGg6IjQ0OCIsZml4ZWQ6IiJ9LHNjb3BlZFNsb3RzOmUuX3UoW3trZXk6ImRlZmF1bHQiLGZuOmZ1bmN0aW9uKG4pe3JldHVyblt0KCJlbC1jaGVja2JveCIse29uOntjaGFuZ2U6ZnVuY3Rpb24odCl7ZS5zZXRDaGFubmVsQnRuKG4ucm93KX19LG1vZGVsOnt2YWx1ZTpuLnJvdy5pc0NoZWNrZWQsY2FsbGJhY2s6ZnVuY3Rpb24odCl7ZS4kc2V0KG4ucm93LCJpc0NoZWNrZWQiLHQpfSxleHByZXNzaW9uOiJzY29wZS5yb3cuaXNDaGVja2VkIn19LFtlLl92KCJcbiAgICAgICAgICAgICIrZS5fcyhuLnJvdy5jaGFubmVsX25hbWUpKyJcbiAgICAgICAgICAiKV0pXX19XSl9KV0sMSldLDEpXSl9O3VsLl93aXRoU3RyaXBwZWQ9ITA7dmFyIGhsPXtyZW5kZXI6dWwsc3RhdGljUmVuZGVyRm5zOltdfSxnbD1obDt2YXIgQWw9ITE7dmFyIGZsPXQoIlZVLzgiKShwbCxnbCwhMSxmdW5jdGlvbihlKXtBbHx8KHQoIkZFb3UiKSx0KCJwZlFJIikpfSwiZGF0YS12LTQ4OGU2NzYzIixudWxsKTtmbC5vcHRpb25zLl9fZmlsZT0ic3JjL2NvbXBvbmVudHMvbWFuYWdlU3VibGl2ZS9zZXR0aW5nTWFudS52dWUiO3ZhciBibD1mbC5leHBvcnRzLHZsPXtjb21wb25lbnRzOntDaXJjbGVUaXRsZTplbixTZXR0aW5nTWFudTpibH0sZGF0YTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsbj10aGlzLiRjcmVhdGVFbGVtZW50O3JldHVybntzdWJMaXZlOntjaGFubmVsX25hbWU6IiIsc3RhdGU6IiIsc3RhcnREYXRlOiIiLGVuZERhdGU6IiIsY2hhbm5lbGlkOiIiLHRpdGxlOiIifSxjaGFubmVsVHlwZUxpc3Q6W10sY2xpY2tDZWxsSW5kZXg6LTEsdGFibGVIZWFkZXI6W3twcm9wOiJ0aXRsZSIsbGFiZWw6Iueov+S7tuS4u+mimCJ9LHtwcm9wOiJjcmVhdGV0aW1lIixsYWJlbDoi5o6o6YCB5pel5pyfIixmb3JtYXR0ZXI6ZnVuY3Rpb24obix0LGEsaSl7cmV0dXJuIGUuJG9wdGlvbnMuZmlsdGVycy5Gb3JtYXREYXRlKGEsInl5eXktTU0tZGQgaGg6bW0iKX19LHtwcm9wOiJ1cGRhdGV0aW1lIixsYWJlbDoi5pu05paw5pel5pyfIixmb3JtYXR0ZXI6ZnVuY3Rpb24obix0LGEsaSl7cmV0dXJuIGUuJG9wdGlvbnMuZmlsdGVycy5Gb3JtYXREYXRlKGEsInl5eXktTU0tZGQgaGg6bW0iKX19LHtwcm9wOiJkaWdlc3QiLGxhYmVsOiLnqL/ku7blhoXlrrkifSx7cHJvcDoicGxheV91cmwiLGxhYmVsOiLpu5jorqTop4bpopHpk77mjqUiLGZvcm1hdHRlcjpmdW5jdGlvbihlLHQsYSxpKXtyZXR1cm4gbigiYSIse2F0dHJzOntocmVmOmEsdGFyZ2V0OiJfYmxhbmsifX0sW2FdKX19LHtwcm9wOiJzdGF0ZSIsbGFiZWw6IueKtuaAgSIsd2lkdGg6IjEwMCIsZm9ybWF0dGVyOmZ1bmN0aW9uKGUsbix0LGEpe3JldHVybiAwPT09dD8i5b6F5LiK57q/IjoxPT09dD8i5bey5LiK57q/IjoyPT09dD8i5bey5LiL57q/Ijp2b2lkIDB9fV0sdGFibGVEYXRhOltdLGNvbW1lbnQ6ITEsc2hhcmU6ITEscHJhaXNlOiExLGNvbGxlY3Q6ITEsaW5kZXg6LTEscGFnZU5vOjEscGFnZVNpemU6MTAsdG90YWw6MCxkaWFsb2dWaXNpYmxlOiExLGNvbXBvbmVudE5hbWU6IiIsdmlkZW9pZDoiMCIsbWFudVRpdGxlOiIifX0sY29tcHV0ZWQ6e3Nob3dOdWxsVGFnOmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiFlfHxlLmxlbmd0aDw9MH19LGNoYW5uZWxUYWdDb250ZW50OmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBlPyIiPT09ZS5jaGFubmVsX25hbWU/IuaXoCI6ZS5jaGFubmVsX25hbWU6IuaXoCJ9fSxzaG93Q2hhbm5lbEFsbE5hbWU6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIG49IiI7cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihlLHQsYSl7dCE9PWEubGVuZ3RoLTE/bis9ZS5jaGFubmVsX25hbWUrIiwiOm4rPWUuY2hhbm5lbF9uYW1lfSksbn19fSx3YXRjaDp7InN1YkxpdmUudGl0bGUiOmZ1bmN0aW9uKCl7dGhpcy5nZXRTdWJMaXZlTGlzdCgpfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuZ2V0U3ViTGl2ZUxpc3QoKSx0aGlzLmdldExpc3RVc2FibGVDaGFubmVsKCl9LG1ldGhvZHM6e2dldFN1YkxpdmVMaXN0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiRvcHRpb25zLmZpbHRlcnMuc3dhcFRpbWUodGhpcy5zdWJMaXZlKTt2YXIgbix0PW51bGwhPT10aGlzLnN1YkxpdmUuc3RhcnREYXRlP25ldyBEYXRlKHRoaXMuc3ViTGl2ZS5zdGFydERhdGUpLmdldFRpbWUoKTpudWxsLGE9bnVsbCE9PXRoaXMuc3ViTGl2ZS5lbmREYXRlP25ldyBEYXRlKHRoaXMuc3ViTGl2ZS5lbmREYXRlKS5nZXRUaW1lKCk6bnVsbDsobj17cGFnZU5vOnRoaXMucGFnZU5vLHBhZ2VTaXplOnRoaXMucGFnZVNpemUsY2hhbm5lbGlkOnRoaXMuc3ViTGl2ZS5jaGFubmVsaWQsdGl0bGU6dGhpcy5zdWJMaXZlLnRpdGxlLHN0YXRlOnRoaXMuc3ViTGl2ZS5zdGF0ZSx0aW1lU3RhcnQ6dCx0aW1lRW5kOmF9LGJlKCJtYW5hZ2VyL09uRGVtYW5kVmlkZW8vcGFnZSIsbikpLnRoZW4oZnVuY3Rpb24obil7aWYobi5kYXRhLnN0YXR1cyl7dmFyIHQ9bi5kYXRhLnJlc3VsdDtjb25zb2xlLmxvZyh0KSxlLnRhYmxlRGF0YT10Lmxpc3QsZS50b3RhbD10LnRvdGFsfX0pfSxnZXRMaXN0VXNhYmxlQ2hhbm5lbDpmdW5jdGlvbigpe3ZhciBlLG49dGhpcztiZSgibWFuYWdlci9PbkRlbWFuZFZpZGVvL2xpc3RVc2FibGVDaGFubmVsIixlKS50aGVuKGZ1bmN0aW9uKGUpe3ZhciB0PWUuZGF0YTt0LnN0YXR1cyYmdC5yZXN1bHQuZm9yRWFjaChmdW5jdGlvbihlLHQsYSl7dmFyIGk9e307aS5sYWJlbD1lLmNoYW5uZWxfbmFtZSxpLnZhbHVlPWUuY2hhbm5lbGlkLG4uY2hhbm5lbFR5cGVMaXN0LnB1c2goaSl9KX0pfSxoYW5kbGVTaXplQ2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMucGFnZVNpemU9ZSx0aGlzLmdldFN1YkxpdmVMaXN0KCl9LGhhbmRsZUN1cnJlbnRDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5wYWdlTm89ZSx0aGlzLmdldFN1YkxpdmVMaXN0KCl9LGhhbmRsZUNvbW1lbnQ6ZnVuY3Rpb24oZSl7MSE9PWUuc3RhdGU/ZS5hbGxvd19jb21tZW50P3RoaXMudXBkYXRlU3ViTGl2ZShlLnZpZGVvaWQsImFsbG93X2NvbW1lbnQiLCExKTp0aGlzLnVwZGF0ZVN1YkxpdmUoZS52aWRlb2lkLCJhbGxvd19jb21tZW50IiwhMCk6dGhpcy4kbWVzc2FnZSh7dHlwZToiZXJyb3IiLG1lc3NhZ2U6IuW3suS4iue6v+eov+S7tuS4jeWPr+aTjeS9nOivhOiuuuadg+mZkCEifSl9LGhhbmRsZVNoYXJlOmZ1bmN0aW9uKGUpezEhPT1lLnN0YXRlP2UuYWxsb3dfc2hhcmU/dGhpcy51cGRhdGVTdWJMaXZlKGUudmlkZW9pZCwiYWxsb3dfc2hhcmUiLCExKTp0aGlzLnVwZGF0ZVN1YkxpdmUoZS52aWRlb2lkLCJhbGxvd19zaGFyZSIsITApOnRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOiLlt7LkuIrnur/nqL/ku7bkuI3lj6/mk43kvZzliIbkuqvmnYPpmZAhIn0pfSxoYW5kbGVQcmFpc2U6ZnVuY3Rpb24oZSl7MSE9PWUuc3RhdGU/ZS5hbGxvd19saWtlP3RoaXMudXBkYXRlU3ViTGl2ZShlLnZpZGVvaWQsImFsbG93X2xpa2UiLCExKTp0aGlzLnVwZGF0ZVN1YkxpdmUoZS52aWRlb2lkLCJhbGxvd19saWtlIiwhMCk6dGhpcy4kbWVzc2FnZSh7dHlwZToiZXJyb3IiLG1lc3NhZ2U6IuW3suS4iue6v+eov+S7tuS4jeWPr+aTjeS9nOeCuei1nuadg+mZkCEifSl9LGhhbmRsZUNvbGxlY3Q6ZnVuY3Rpb24oZSl7MSE9PWUuc3RhdGU/ZS5hbGxvd19jb2xsZWN0P3RoaXMudXBkYXRlU3ViTGl2ZShlLnZpZGVvaWQsImFsbG93X2NvbGxlY3QiLCExKTp0aGlzLnVwZGF0ZVN1YkxpdmUoZS52aWRlb2lkLCJhbGxvd19jb2xsZWN0IiwhMCk6dGhpcy4kbWVzc2FnZSh7dHlwZToiZXJyb3IiLG1lc3NhZ2U6IuW3suS4iue6v+eov+S7tuS4jeWPr+aTjeS9nOaUtuiXj+adg+mZkCEifSl9LHNldFN1YkxpdmVVblRvcDpmdW5jdGlvbihlKXt0aGlzLnVwZGF0ZVN1YkxpdmUoZS52aWRlb2lkLCJ0b3AiLCEwKX0sc2V0U3ViTGl2ZVRvcDpmdW5jdGlvbihlKXt0aGlzLnVwZGF0ZVN1YkxpdmUoZS52aWRlb2lkLCJ0b3AiLCExKX0sdXBTdWJMaXZlOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7aWYoZS5jaGFubmVsTGlzdC5sZW5ndGg8PTApcmV0dXJuIHRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOiLor6XnqL/ku7bov5jmsqHmnInphY3nva7popHpgZMsIOS4jeiDveS4iueovyEifSksITE7MD09PWUuc3RhdGV8fDI9PT1lLnN0YXRlP3RoaXMuJGNvbmZpcm0oIuehruWumuimgeS4iueov+WQlz8iLCLmj5DnpLoiLHtjb25maXJtQnV0dG9uVGV4dDoi56Gu5a6aIixjYW5jZWxCdXR0b25UZXh0OiLlj5bmtogiLHR5cGU6Indhcm5pbmcifSkudGhlbihmdW5jdGlvbigpe24udXBkYXRlU3ViTGl2ZShlLnZpZGVvaWQsInN0YXRlIiwxKX0pLmNhdGNoKGZ1bmN0aW9uKCl7fSk6dGhpcy4kbWVzc2FnZSh7dHlwZToiZXJyb3IiLG1lc3NhZ2U6Iuivpeeov+S7tuW3suS4iue6vyEifSl9LGRvd25TdWJMaXZlOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7MT09PWUuc3RhdGU/dGhpcy4kY29uZmlybSgi56Gu5a6a6KaB5pKk56i/5ZCXPyIsIuaPkOekuiIse2NvbmZpcm1CdXR0b25UZXh0OiLnoa7lrpoiLGNhbmNlbEJ1dHRvblRleHQ6IuWPlua2iCIsdHlwZToid2FybmluZyJ9KS50aGVuKGZ1bmN0aW9uKCl7bi51cGRhdGVTdWJMaXZlKGUudmlkZW9pZCwic3RhdGUiLDIpfSkuY2F0Y2goZnVuY3Rpb24oKXt9KTp0aGlzLiRtZXNzYWdlKHt0eXBlOiJlcnJvciIsbWVzc2FnZToi6K+l56i/5Lu26L+Y5pyq5LiK56i/ISJ9KX0sc2V0dGluZ1N1YkxpdmU6ZnVuY3Rpb24oZSl7MSE9PWUuc3RhdGU/KHRoaXMuZGlhbG9nVmlzaWJsZT0hMCx0aGlzLmNvbXBvbmVudE5hbWU9YmwsdGhpcy52aWRlb2lkPWUudmlkZW9pZCx0aGlzLm1hbnVUaXRsZT1lLnRpdGxlKTp0aGlzLiRtZXNzYWdlKHt0eXBlOiJlcnJvciIsbWVzc2FnZToi6K+35pKk56i/5ZCO5YaN6YWN572uISJ9KX0sZGVsZXRlU3ViTGl2ZTpmdW5jdGlvbihlKXt2YXIgbj10aGlzOzEhPT1lLnN0YXRlP3RoaXMuJGNvbmZpcm0oJ+aYr+WQpuWIoOmZpCInK2UudGl0bGUrJyI/Jywi5o+Q56S6Iix7Y29uZmlybUJ1dHRvblRleHQ6IuehruWumiIsY2FuY2VsQnV0dG9uVGV4dDoi5Y+W5raIIix0eXBlOiJ3YXJuaW5nIn0pLnRoZW4oZnVuY3Rpb24oKXt2YXIgdDsodD17dmlkZW86e3ZpZGVvaWQ6ZS52aWRlb2lkfX0sYmUoIm1hbmFnZXIvT25EZW1hbmRWaWRlby9kZWxldGUiLHQpKS50aGVuKGZ1bmN0aW9uKGUpe2Uuc3RhdHVzJiZuLiRtZXNzYWdlKHt0eXBlOiJzdWNjZXNzIixtZXNzYWdlOiLliKDpmaTmiJDlip8hIn0pLG4uZ2V0U3ViTGl2ZUxpc3QoKX0pfSkuY2F0Y2goZnVuY3Rpb24oKXt9KTp0aGlzLiRtZXNzYWdlKHt0eXBlOiJlcnJvciIsbWVzc2FnZToi5bey5LiK57q/56i/5Lu25LiN5Y+v5Yig6ZmkISJ9KX0sdXBkYXRlU3ViTGl2ZTpmdW5jdGlvbihlLG4sdCl7dmFyIGEsaT10aGlzOyhhPXt2aWRlbzpDaSgpKHt2aWRlb2lkOmV9LG4sdCl9LGJlKCJtYW5hZ2VyL09uRGVtYW5kVmlkZW8vdXBkYXRlIixhKSkudGhlbihmdW5jdGlvbihlKXtlLnN0YXR1cyYmKGkuJG1lc3NhZ2Uoe3R5cGU6InN1Y2Nlc3MiLG1lc3NhZ2U6IuaTjeS9nOaIkOWKnyEifSksaS5nZXRTdWJMaXZlTGlzdCgpKX0pfSxzZWxlY3Rpb25DaGFuZ2U6ZnVuY3Rpb24oZSl7dmFyIG49dGhpczt0aGlzLmFydGljbGVpZExpc3Q9W10sZS5mb3JFYWNoKGZ1bmN0aW9uKGUsdCxhKXtuLmFydGljbGVpZExpc3QucHVzaChlLmFydGljbGVpZCl9KSx0aGlzLnNlbGVjdGVkTWFudUluZm89ZX0sY2xvc2VEaWFsb2c6ZnVuY3Rpb24oKXt0aGlzLmNvbXBvbmVudE5hbWU9IiIsdGhpcy5nZXRTdWJMaXZlTGlzdCgpfX19LHlsPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPWUuJGNyZWF0ZUVsZW1lbnQsdD1lLl9zZWxmLl9jfHxuO3JldHVybiB0KCJkaXYiLHtzdGF0aWNDbGFzczoic3VibGl2ZSJ9LFt0KCJkaXYiLFt0KCJjaXJjbGUtdGl0bGUiLHtzdGF0aWNDbGFzczoiY2ljbGUtY29udHJvbGxlciIsYXR0cnM6eyJ0aXRsZS1uYW1lIjoi54K55pKt566h55CGIn19KSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InNlYXJjaC1mb3JtLWNvbnRhaW5lciJ9LFt0KCJlbC1mb3JtIix7c3RhdGljQ2xhc3M6ImRlbW8tZm9ybS1pbmxpbmUiLGF0dHJzOntpbmxpbmU6ITAsbW9kZWw6ZS5zdWJMaXZlfX0sW3QoImVsLWZvcm0taXRlbSIse3N0YXRpY1N0eWxlOnsibWFyZ2luLWxlZnQiOiItMjlweCJ9LGF0dHJzOntsYWJlbDoi56i/5Lu25Li76aKYIn19LFt0KCJlbC1pbnB1dCIse2F0dHJzOntjbGVhcmFibGU6IiJ9LG1vZGVsOnt2YWx1ZTplLnN1YkxpdmUudGl0bGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuc3ViTGl2ZSwidGl0bGUiLG4pfSxleHByZXNzaW9uOiJzdWJMaXZlLnRpdGxlIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi6aKR6YGTIixwcm9wOiJjaGFubmVsaWQifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntmaWx0ZXJhYmxlOiIiLGNsZWFyYWJsZToiIixwbGFjZWhvbGRlcjoiIn0sb246e2NsZWFyOmUuZ2V0U3ViTGl2ZUxpc3QsY2hhbmdlOmUuZ2V0U3ViTGl2ZUxpc3R9LG1vZGVsOnt2YWx1ZTplLnN1YkxpdmUuY2hhbm5lbGlkLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLnN1YkxpdmUsImNoYW5uZWxpZCIsbil9LGV4cHJlc3Npb246InN1YkxpdmUuY2hhbm5lbGlkIn19LGUuX2woZS5jaGFubmVsVHlwZUxpc3QsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtb3B0aW9uIix7a2V5Om4sYXR0cnM6e3ZhbHVlOmUudmFsdWUsbGFiZWw6ZS5sYWJlbH19KX0pLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6InNlYXJjaC1sZWZ0IixhdHRyczp7bGFiZWw6IueKtuaAgSJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiIifSxvbjp7Y2hhbmdlOmUuZ2V0U3ViTGl2ZUxpc3R9LG1vZGVsOnt2YWx1ZTplLnN1YkxpdmUuc3RhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuc3ViTGl2ZSwic3RhdGUiLG4pfSxleHByZXNzaW9uOiJzdWJMaXZlLnN0YXRlIn19LFt0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6IiIsbGFiZWw6IuWFqOmDqCJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZTowLGxhYmVsOiLlvoXkuIrnur8ifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MSxsYWJlbDoi5bey5LiK57q/In19KSxlLl92KCIgIiksdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjIsbGFiZWw6IuW3suS4i+e6vyJ9fSldLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLlvIDlp4vml7bpl7QifX0sW3QoImVsLWRhdGUtcGlja2VyIix7YXR0cnM6e3RpdGxlOmUuX2YoIkZvcm1hdERhdGUiKShlLnN1YkxpdmUuc3RhcnREYXRlLCJ5eXl5LU1NLWRkIGhoOm1tIiksdHlwZToiZGF0ZXRpbWUiLGZvcm1hdDoieXl5eS1NTS1kZCBISDptbSIscGxhY2Vob2xkZXI6IumAieaLqeaXtumXtCJ9LG9uOntjaGFuZ2U6ZS5nZXRTdWJMaXZlTGlzdH0sbW9kZWw6e3ZhbHVlOmUuc3ViTGl2ZS5zdGFydERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuc3ViTGl2ZSwic3RhcnREYXRlIixuKX0sZXhwcmVzc2lvbjoic3ViTGl2ZS5zdGFydERhdGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6ImRhdGUtbGVmdCIsc3RhdGljU3R5bGU6eyJtYXJnaW4tbGVmdCI6IjBweCJ9LGF0dHJzOntsYWJlbDoi57uT5p2f5pe26Ze0In19LFt0KCJlbC1kYXRlLXBpY2tlciIse2F0dHJzOnt0aXRsZTplLl9mKCJGb3JtYXREYXRlIikoZS5zdWJMaXZlLmVuZERhdGUsInl5eXktTU0tZGQgaGg6bW0iKSx0eXBlOiJkYXRldGltZSIsZm9ybWF0OiJ5eXl5LU1NLWRkIEhIOm1tIixwbGFjZWhvbGRlcjoi6YCJ5oup5pe26Ze0In0sb246e2NoYW5nZTplLmdldFN1YkxpdmVMaXN0fSxtb2RlbDp7dmFsdWU6ZS5zdWJMaXZlLmVuZERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuc3ViTGl2ZSwiZW5kRGF0ZSIsbil9LGV4cHJlc3Npb246InN1YkxpdmUuZW5kRGF0ZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1idXR0b24iLHtzdGF0aWNTdHlsZTp7Im1hcmdpbi1sZWZ0IjoiMTBweCJ9LGF0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmUuZ2V0U3ViTGl2ZUxpc3R9fSxbZS5fdigiXG4gICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgIiksdCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCJ9KV0pXSwxKV0sMSldLDEpLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoidGFibGUtbGlzdCJ9LFt0KCJlbC10YWJsZSIse3JlZjoiY2hhbm5lbFRhYmxlIixzdGF0aWNDbGFzczoid2hvbGUtdGFibGUiLGF0dHJzOntkYXRhOmUudGFibGVEYXRhLHN0cmlwZToiIiwibWluLWhlaWdodCI6IjQwMCJ9fSxbZS5fbChlLnRhYmxlSGVhZGVyLGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQoImVsLXRhYmxlLWNvbHVtbiIse2tleTpuLGF0dHJzOntwcm9wOmUucHJvcCxsYWJlbDplLmxhYmVsLHdpZHRoOmUud2lkdGgsZm9ybWF0dGVyOmUuZm9ybWF0dGVyLGFsaWduOiJjZW50ZXIiLGZpeGVkOiIiLCJzaG93LW92ZXJmbG93LXRvb2x0aXAiOiIifX0pfSksZS5fdigiICIpLHQoImVsLXRhYmxlLWNvbHVtbiIse2F0dHJzOntsYWJlbDoi5b2S5bGe6aKR6YGTIixhbGlnbjoiY2VudGVyIn0sc2NvcGVkU2xvdHM6ZS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24obil7cmV0dXJuW2Uuc2hvd051bGxUYWcobi5yb3cuY2hhbm5lbExpc3QpP3QoImVsLXRhZyIse2F0dHJzOntzaXplOiJtaW5pIn19LFtlLl92KCLml6AiKV0pOmUuX2UoKSxlLl92KCIgIiksdCgiZWwtdG9vbHRpcCIse2tleTpuLnJvdy52aWRlb2lkLHN0YXRpY0NsYXNzOiJpdGVtIixhdHRyczp7Y29udGVudDplLnNob3dDaGFubmVsQWxsTmFtZShuLnJvdy5jaGFubmVsTGlzdCksZWZmZWN0OiJkYXJrIixwbGFjZW1lbnQ6InRvcC1zdGFydCJ9fSxlLl9sKG4ucm93LmNoYW5uZWxMaXN0LGZ1bmN0aW9uKG4sYSl7cmV0dXJuIHQoImVsLXRhZyIse2tleTphLGF0dHJzOntzaXplOiJtaW5pIn19LFtlLl92KCJcbiAgICAgICAgICAgICAgIitlLl9zKGUuY2hhbm5lbFRhZ0NvbnRlbnQobikpKyJcbiAgICAgICAgICAgICIpXSl9KSwxKV19fV0pfSksZS5fdigiICIpLHQoImVsLXRhYmxlLWNvbHVtbiIse2F0dHJzOntsYWJlbDoi572u6aG254q25oCBIixhbGlnbjoiY2VudGVyIn0sc2NvcGVkU2xvdHM6ZS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24obil7cmV0dXJuW24ucm93LnRvcD90KCJlbC10b29sdGlwIix7c3RhdGljQ2xhc3M6Iml0ZW0iLGF0dHJzOntlZmZlY3Q6ImRhcmsiLGNvbnRlbnQ6IueCueWHu+WPlua2iOe9rumhtiIscGxhY2VtZW50OiJ0b3AifX0sW3QoImVsLXRhZyIse3N0YXRpY0NsYXNzOiJzZXRQb2ludGVyIixzdGF0aWNTdHlsZTp7d2lkdGg6IjYwcHgiLGNvbG9yOiIjNjk0ZWZmIn0sYXR0cnM6e3NpemU6Im1pbmkifSxuYXRpdmVPbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5zZXRTdWJMaXZlVG9wKG4ucm93KX19fSxbZS5fdigiXG4gICAgICAgICAgICAgIOWPlua2iOe9rumhtlxuICAgICAgICAgICAgIildKV0sMSk6dCgiZWwtdG9vbHRpcCIse3N0YXRpY0NsYXNzOiJpdGVtIixhdHRyczp7ZWZmZWN0OiJkYXJrIixjb250ZW50OiLngrnlh7vnva7pobYiLHBsYWNlbWVudDoidG9wIn19LFt0KCJlbC10YWciLHtzdGF0aWNDbGFzczoic2V0UG9pbnRlciIsc3RhdGljU3R5bGU6e3dpZHRoOiI2MHB4In0sYXR0cnM6e3NpemU6Im1pbmkifSxuYXRpdmVPbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5zZXRTdWJMaXZlVW5Ub3Aobi5yb3cpfX19LFtlLl92KCJcbiAgICAgICAgICAgICAg572u6aG2XG4gICAgICAgICAgICAiKV0pXSwxKV19fV0pfSksZS5fdigiICIpLHQoImVsLXRhYmxlLWNvbHVtbiIse2F0dHJzOntsYWJlbDoi5LiK56i/L+aSpOeovyIsYWxpZ246ImNlbnRlciJ9LHNjb3BlZFNsb3RzOmUuX3UoW3trZXk6ImRlZmF1bHQiLGZuOmZ1bmN0aW9uKG4pe3JldHVyblt0KCJzcGFuIix7c3RhdGljQ2xhc3M6Im1hbnUtY29udGFpbmVyIn0sW3QoInNwYW4iLHtjbGFzczpbIm1hbnUiLDEhPT1uLnJvdy5zdGF0ZSYmbi5yb3cuY2hhbm5lbExpc3QubGVuZ3RoPjA/Im1hbnUtdXAtYWN0aXZlIjoiIl0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UudXBTdWJMaXZlKG4ucm93KX19fSxbZS5fdigiXG4gICAgICAgICAgICAgIOS4iueov1xuICAgICAgICAgICAgIildKSxlLl92KCIgIiksdCgic3BhbiIse2NsYXNzOlsibWFudSIsMT09PW4ucm93LnN0YXRlPyJtYW51LWJhY2stYWN0aXZlIjoiIl0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuZG93blN1YkxpdmUobi5yb3cpfX19LFtlLl92KCJcbiAgICAgICAgICAgICAg5pKk56i/XG4gICAgICAgICAgICAiKV0pXSldfX1dKX0pLGUuX3YoIiAiKSx0KCJlbC10YWJsZS1jb2x1bW4iLHthdHRyczp7bGFiZWw6IuaTjeS9nCIsYWxpZ246ImNlbnRlciJ9LHNjb3BlZFNsb3RzOmUuX3UoW3trZXk6ImRlZmF1bHQiLGZuOmZ1bmN0aW9uKG4pe3JldHVyblt0KCJzcGFuIix7c3RhdGljQ2xhc3M6Im1hbnUtY29udGFpbmVyIn0sW3QoInNwYW4iLHtjbGFzczpbIm1hbnUiLDEhPT1uLnJvdy5zdGF0ZT8iZGVsZXRlLWFjdGl2ZSI6IiJdLG9uOntjbGljazpmdW5jdGlvbih0KXtlLnNldHRpbmdTdWJMaXZlKG4ucm93KX19fSxbZS5fdigiXG4gICAgICAgICAgICAgIOmFjee9rlxuICAgICAgICAgICAgIildKSxlLl92KCIgIiksdCgic3BhbiIse2NsYXNzOlsibWFudSIsMSE9PW4ucm93LnN0YXRlPyJkZWxldGUtYWN0aXZlIjoiIl0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuZGVsZXRlU3ViTGl2ZShuLnJvdyl9fX0sW2UuX3YoIlxuICAgICAgICAgICAgICDliKDpmaRcbiAgICAgICAgICAgICIpXSldKV19fV0pfSksZS5fdigiICIpLHQoImVsLXRhYmxlLWNvbHVtbiIse2F0dHJzOntmaXhlZDoicmlnaHQiLGxhYmVsOiLmnYPpmZDphY3nva4iLGFsaWduOiJjZW50ZXIiLHdpZHRoOiIxMTUifSxzY29wZWRTbG90czplLl91KFt7a2V5OiJkZWZhdWx0IixmbjpmdW5jdGlvbihuKXtyZXR1cm5bdCgiZWwtdG9vbHRpcCIse3N0YXRpY0NsYXNzOiJpdGVtIixhdHRyczp7ZWZmZWN0OiJkYXJrIixjb250ZW50OiLor4TorroiLHBsYWNlbWVudDoidG9wIn19LFt0KCJkaXYiLHtzdGF0aWNDbGFzczoiYWxsb3dfY29tbWVudCIsc3R5bGU6e2JhY2tncm91bmRDb2xvcjpuLnJvdy5hbGxvd19jb21tZW50PyIjZmZhNTA3IjoiI0I1QjhEOSJ9LG9uOntjbGljazpmdW5jdGlvbih0KXtlLmhhbmRsZUNvbW1lbnQobi5yb3cpfX19LFt0KCJpIix7c3RhdGljQ2xhc3M6Imljb25mb250IGljb24tbWFudS1jb21tZW50IixzdGF0aWNTdHlsZTp7Y29sb3I6IndoaXRlIn19KV0pXSksZS5fdigiICIpLHQoImVsLXRvb2x0aXAiLHtzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6e2VmZmVjdDoiZGFyayIsY29udGVudDoi5YiG5LqrIixwbGFjZW1lbnQ6InRvcCJ9fSxbdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImFsbG93X3NoYXJlIixzdHlsZTp7YmFja2dyb3VuZENvbG9yOm4ucm93LmFsbG93X3NoYXJlPyIjMTg4M0ZGIjoiI0I1QjhEOSJ9LG9uOntjbGljazpmdW5jdGlvbih0KXtlLmhhbmRsZVNoYXJlKG4ucm93KX19fSxbdCgiaSIse3N0YXRpY0NsYXNzOiJpY29uZm9udCBpY29uLXNoYXJlIixzdGF0aWNTdHlsZTp7Y29sb3I6IndoaXRlIn19KV0pXSksZS5fdigiICIpLHQoImVsLXRvb2x0aXAiLHtzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6e2VmZmVjdDoiZGFyayIsY29udGVudDoi54K56LWeIixwbGFjZW1lbnQ6InRvcCJ9fSxbdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImFsbG93X2xpa2UiLHN0eWxlOntiYWNrZ3JvdW5kQ29sb3I6bi5yb3cuYWxsb3dfbGlrZT8iI0YwMDgwOCI6IiNCNUI4RDkifSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVQcmFpc2Uobi5yb3cpfX19LFt0KCJpIix7c3RhdGljQ2xhc3M6Imljb25mb250IGljb24tcHJhaXNlIixzdGF0aWNTdHlsZTp7Y29sb3I6IndoaXRlIn19KV0pXSksZS5fdigiICIpLHQoImVsLXRvb2x0aXAiLHtzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6e2VmZmVjdDoiZGFyayIsY29udGVudDoi5pS26JePIixwbGFjZW1lbnQ6InRvcCJ9fSxbdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImFsbG93X2NvbGxlY3QiLHN0eWxlOntiYWNrZ3JvdW5kQ29sb3I6bi5yb3cuYWxsb3dfY29sbGVjdD8iIzY5NEVGRiI6IiNCNUI4RDkifSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVDb2xsZWN0KG4ucm93KX19fSxbdCgiaSIse3N0YXRpY0NsYXNzOiJpY29uZm9udCBpY29uLWNvbGxlY3QiLHN0YXRpY1N0eWxlOntjb2xvcjoid2hpdGUifX0pXSldKV19fV0pfSldLDIpLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoicGFnaW5hdGlvbiJ9LFt0KCJlbC1wYWdpbmF0aW9uIix7YXR0cnM6e3RvdGFsOmUudG90YWwsInBhZ2Utc2l6ZXMiOlsxMCwyMCwzMCw0MF0sYmFja2dyb3VuZDoiIixsYXlvdXQ6InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQifSxvbjp7InNpemUtY2hhbmdlIjplLmhhbmRsZVNpemVDaGFuZ2UsImN1cnJlbnQtY2hhbmdlIjplLmhhbmRsZUN1cnJlbnRDaGFuZ2V9fSldLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZGlhbG9nIix7YXR0cnM6e3Zpc2libGU6ZS5kaWFsb2dWaXNpYmxlLCJjdXN0b20tY2xhc3MiOiJjdXN0b20tZGlhbG9nIix0aXRsZToi54K55pKt5L+h5oGv6YWN572uIix3aWR0aDoiMzglIn0sb246eyJ1cGRhdGU6dmlzaWJsZSI6ZnVuY3Rpb24obil7ZS5kaWFsb2dWaXNpYmxlPW59LGNsb3NlOmUuY2xvc2VEaWFsb2d9fSxbdChlLmNvbXBvbmVudE5hbWUse3RhZzoiZGl2IixhdHRyczp7dmlkZW9pZDplLnZpZGVvaWQsIm1hbnUtdGl0bGUiOmUubWFudVRpdGxlfX0pXSwxKV0sMSl9O3lsLl93aXRoU3RyaXBwZWQ9ITA7dmFyIENsPXtyZW5kZXI6eWwsc3RhdGljUmVuZGVyRm5zOltdfSxfbD1DbDt2YXIgeGw9ITE7dmFyIHdsPXQoIlZVLzgiKSh2bCxfbCwhMSxmdW5jdGlvbihlKXt4bHx8KHQoIlcvUTMiKSx0KCI0bUN0IikpfSwiZGF0YS12LTI1MzRkZDAyIixudWxsKTt3bC5vcHRpb25zLl9fZmlsZT0ic3JjL2NvbXBvbmVudHMvbWFuYWdlU3VibGl2ZS9zdWJsaXZlTGlzdC52dWUiO3ZhciBGbD13bC5leHBvcnRzLGtsPXtjb21wb25lbnRzOntDaXJjbGVUaXRsZTplbn0sZGF0YTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsbj10aGlzLiRjcmVhdGVFbGVtZW50O3JldHVybntjaGFubmVsRm9ybTp7Y2hhbm5lbF9uYW1lOiIiLGNoYW5uZWxfdHlwZWlkOiIiLHN0YXRlOiIiLHNvcnQ6IjEiLHN0YXJ0RGF0ZToiIixlbmREYXRlOiIiLHBhcmVudF9jaGFubmVsaWQ6IiJ9LGNsaWNrQ2VsbEluZGV4Oi0xLHRhYmxlSGVhZGVyOlt7cHJvcDoiY2hhbm5lbF9uYW1lIixsYWJlbDoi6aKR6YGT5ZCNIn0se3Byb3A6InBhcmVudF9jaGFubmVsX25hbWUiLGxhYmVsOiLniLbnuqfpopHpgZMiLGZvcm1hdHRlcjpmdW5jdGlvbihlLG4sdCxhKXtyZXR1cm4gdHx8IuaXoCJ9fSx7cHJvcDoiY2hhbm5lbF90eXBlX25hbWUiLGxhYmVsOiLliIbnsbsifSx7cHJvcDoidXBkYXRldGltZSIsbGFiZWw6IuabtOaWsOaXpeacnyIsZm9ybWF0dGVyOmZ1bmN0aW9uKG4sdCxhLGkpe3JldHVybiBlLiRvcHRpb25zLmZpbHRlcnMuRm9ybWF0RGF0ZShhLCJ5eXl5LU1NLWRkIGhoOm1tIil9fSx7cHJvcDoiaWNvbl91cmwiLGxhYmVsOiLlm77moIfpu5jorqQiLGZvcm1hdHRlcjpmdW5jdGlvbihlLHQsYSxpKXtyZXR1cm4gbigiaW1nIix7Y2xhc3M6InRvcGljLXRhYmxlLXBpYyIsYXR0cnM6e3NyYzphfX0pfX0se3Byb3A6ImRlc2NyaXB0aW9uIixsYWJlbDoi6aKR6YGT5o+P6L+wIix3aWR0aDoiMTAwIn0se3Byb3A6InN0YXRlIixsYWJlbDoi54q25oCBIixmb3JtYXR0ZXI6ZnVuY3Rpb24oZSxuLHQsYSl7cmV0dXJuIDE9PT1wYXJzZUludCh0KT8i5ZCv55SoIjoi5YGc55SoIn19LHtwcm9wOiJmaXhlZCIsbGFiZWw6IuS9jee9ruWbuuWumiIsZm9ybWF0dGVyOmZ1bmN0aW9uKGUsbix0LGEpe3JldHVybiB0PyLlm7rlrpoiOiLkuI3lm7rlrpoifX0se3Byb3A6InNvcnQiLGxhYmVsOiLkvJjlhYjnuqciLGZvcm1hdHRlcjpmdW5jdGlvbih0LGEsaSxsKXtyZXR1cm4gbD09PWUuY2xpY2tDZWxsSW5kZXg/bigiaW5wdXQiLHthdHRyczp7dHlwZToidGV4dCIsaWQ6ImlucHV0IixhdXRvZm9jdXM6ImF1dG9mb2N1cyJ9LGNsYXNzOiJzZWxmLXNvcnQiLGRvbVByb3BzOnt2YWx1ZTppfX0pOm4oInNwYW4iLHtjbGFzczoic29ydC1jb250YWluZXIiLGF0dHJzOnsiZGF0YS1pZCI6bH19LFtpXSl9fV0sdGFibGVEYXRhOltdLGNoYW5uZWxUeXBlTGlzdDpbXSxzb3J0VmFsdWU6LTEscGFnZU5vOjEscGFnZVNpemU6MTAsdG90YWw6MCxwYXJlbnRDaGFubmVsTGlzdDpbXSxzZWxlY3RDaGFubmVsSWQ6IiJ9fSx3YXRjaDp7ImNoYW5uZWxGb3JtLmNoYW5uZWxfbmFtZSI6ZnVuY3Rpb24oZSl7dGhpcy5zZWFyY2hDaGFubmVsKCl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLmdldENoYW5uZWxMaXN0KCksdGhpcy5nZXRDaGFubmVsVHlwZSgpLHRoaXMuZ2V0UGFyZW50Q2hhbm5lbCgpLHRoaXMuJHJvb3QuZXZlbnRIdWIuJG9uKCJyZXNldC1vcHRpb25zIixmdW5jdGlvbigpe2UucmVzZXRPcHRpb25zKCl9KX0sYWN0aXZhdGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kcm91dGUubWV0YTtlLmhhc093blByb3BlcnR5KCJyZWZyZXNoIikmJmUucmVmcmVzaCYmKHRoaXMuZ2V0Q2hhbm5lbExpc3QoKSxkZWxldGUgdGhpcy4kcm91dGUubWV0YS5yZWZyZXNoKX0sYmVmb3JlUm91dGVMZWF2ZTpmdW5jdGlvbihlLG4sdCl7Ii9zdWJDaGFubmVsL2NyZWF0ZSIhPT1lLnBhdGgmJiIvc3ViTGl2ZS9saXN0IiE9PWUucGF0aHx8dGhpcy5yZXNldE9wdGlvbnMoKSx0KCl9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLiRyb290LmV2ZW50SHViLiRvZmYoInJlc2V0LW9wdGlvbnMiKX0sbWV0aG9kczp7cmVzZXRPcHRpb25zOmZ1bmN0aW9uKCl7dGhpcy5jaGFubmVsRm9ybT17Y2hhbm5lbF9uYW1lOiIiLGNoYW5uZWxfdHlwZWlkOiIiLHN0YXRlOiIiLHNvcnQ6IjEiLHN0YXJ0RGF0ZToiIixlbmREYXRlOiIiLHBhcmVudF9jaGFubmVsaWQ6IiJ9LHRoaXMucGFnZU5vPTEsdGhpcy5nZXRDaGFubmVsTGlzdCgpfSxnZXRDaGFubmVsTGlzdDpmdW5jdGlvbigpe3ZhciBlLG49dGhpczsoZT17cGFnZU5vOnRoaXMucGFnZU5vLHBhZ2VTaXplOnRoaXMucGFnZVNpemUsY2hhbm5lbF9uYW1lOnRoaXMuY2hhbm5lbEZvcm0uY2hhbm5lbF9uYW1lLGNoYW5uZWxfdHlwZWlkOnRoaXMuY2hhbm5lbEZvcm0uY2hhbm5lbF90eXBlaWQsc3RhdGU6dGhpcy5jaGFubmVsRm9ybS5zdGF0ZSx0aW1lU3RhcnQ6bmV3IERhdGUodGhpcy5jaGFubmVsRm9ybS5zdGFydERhdGUpLmdldFRpbWUoKXx8IiIsdGltZUVuZDpuZXcgRGF0ZSh0aGlzLmNoYW5uZWxGb3JtLmVuZERhdGUpLmdldFRpbWUoKXx8IiIscGFyZW50X2NoYW5uZWxpZDp0aGlzLmNoYW5uZWxGb3JtLnBhcmVudF9jaGFubmVsaWR9LGJlKCJtYW5hZ2VyL09uRGVtYW5kQ2hhbm5lbC9wYWdlIixlKSkudGhlbihmdW5jdGlvbihlKXtpZihlLmRhdGEuc3RhdHVzKXt2YXIgdD1lLmRhdGEucmVzdWx0O24udGFibGVEYXRhPXQubGlzdCxuLnRvdGFsPXQudG90YWx9fSl9LGhhbmRsZVNpemVDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5wYWdlU2l6ZT1lLHRoaXMuc2VhcmNoQ2hhbm5lbCgpfSxoYW5kbGVDdXJyZW50Q2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMucGFnZU5vPWUsdGhpcy5nZXRDaGFubmVsTGlzdCgpfSx0b2dnbGVBbGxTZWxlY3Rpb246ZnVuY3Rpb24oZSl7dGhpcy4kcmVmcy5jaGFubmVsVGFibGUudG9nZ2xlQWxsU2VsZWN0aW9uKCl9LGNlbGxDbGljazpmdW5jdGlvbihlLG4sdCxhKXt2YXIgaT10aGlzO2lmKGEudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygic29ydC1jb250YWluZXIiKSlpZigxIT09ZS5zdGF0ZSl7dmFyIGw9YS50YXJnZXQuZGF0YXNldC5pZDtsJiYodGhpcy5jbGlja0NlbGxJbmRleD1wYXJzZUludChsKSksdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXtkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIuZWwtdG9vbHRpcCA+IGlucHV0LnNlbGYtc29ydCIpLmZvckVhY2goZnVuY3Rpb24obil7biYmKGkuc2VsZWN0Q2hhbm5lbElkPWUuY2hhbm5lbGlkLG4uZm9jdXMoKSxuLm9ua2V5dXA9ZnVuY3Rpb24oZSl7bi52YWx1ZSYmKGkuc29ydFZhbHVlPXBhcnNlSW50KG4udmFsdWUpKX0pfSl9KX1lbHNlIHRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOiLlkK/nlKjnirbmgIHkuIvkuI3og73mjpLluo8hIn0pfSxjZWxsTW91c2VMZWF2ZTpmdW5jdGlvbihlLG4sdCxhKXt2YXIgaSxsPXRoaXM7aWYodGhpcy5jbGlja0NlbGxJbmRleD0tMSwtMT09PXRoaXMuc29ydFZhbHVlfHx0aGlzLnNlbGVjdENoYW5uZWxJZCE9PWUuY2hhbm5lbGlkKXJldHVybiExOyhpPXtjaGFubmVsOntjaGFubmVsaWQ6ZS5jaGFubmVsaWQsc29ydDp0aGlzLnNvcnRWYWx1ZX19LGJlKCJtYW5hZ2VyL09uRGVtYW5kQ2hhbm5lbC91cGRhdGVTb3J0IixpKSkudGhlbihmdW5jdGlvbihlKXtlLnN0YXR1cyYmKGwuZ2V0Q2hhbm5lbExpc3QoKSxsLnNvcnRWYWx1ZT0tMSl9KX0saGFuZGxlRWRpdDpmdW5jdGlvbihlKXsxIT09ZS5zdGF0ZT8oc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgiY2hhbm5lbGlkIixlLmNoYW5uZWxpZCksdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6Ii9zdWJDaGFubmVsL2VkaXQiLHF1ZXJ5OntwYWdlTm86dGhpcy5wYWdlTm99fSkpOnRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOiLlkK/nlKjnirbmgIHkuIvkuI3lj6/nvJbovpEhIn0pfSxjaGFuZ2VTdGF0ZTpmdW5jdGlvbihlKXt2YXIgbix0PXRoaXMsYT0wOzE9PT1lLnN0YXRlP2E9MDowPT09ZS5zdGF0ZSYmKGE9MSksKG49e2NoYW5uZWw6e2NoYW5uZWxpZDplLmNoYW5uZWxpZCxzdGF0ZTphfX0sYmUoIm1hbmFnZXIvT25EZW1hbmRDaGFubmVsL3VwZGF0ZVN0YXRlIixuKSkudGhlbihmdW5jdGlvbihlKXtlLnN0YXR1cyYmKDA9PT1hP3QuJG1lc3NhZ2Uoe3R5cGU6InN1Y2Nlc3MiLG1lc3NhZ2U6IuS/ruaUueeKtuaAgeS4uuWBnOeUqCJ9KTp0LiRtZXNzYWdlKHt0eXBlOiJzdWNjZXNzIixtZXNzYWdlOiLkv67mlLnnirbmgIHkuLrlkK/nlKgifSksdC5nZXRDaGFubmVsTGlzdCgpKX0pfSxoYW5kbGVEZWxldGU6ZnVuY3Rpb24oZSl7dmFyIG49dGhpczsxIT09ZS5zdGF0ZT90aGlzLiRjb25maXJtKCfmmK/lkKbliKDpmaQiJytlLmNoYW5uZWxfbmFtZSsnIj8nLCLmj5DnpLoiLHtjb25maXJtQnV0dG9uVGV4dDoi56Gu5a6aIixjYW5jZWxCdXR0b25UZXh0OiLlj5bmtogiLHR5cGU6Indhcm5pbmcifSkudGhlbihmdW5jdGlvbigpe3ZhciB0Oyh0PXtjaGFubmVsOntjaGFubmVsaWQ6ZS5jaGFubmVsaWR9fSxiZSgibWFuYWdlci9PbkRlbWFuZENoYW5uZWwvZGVsZXRlIix0KSkudGhlbihmdW5jdGlvbihlKXtlLmRhdGEuc3RhdHVzJiZuLiRtZXNzYWdlKHt0eXBlOiJzdWNjZXNzIixtZXNzYWdlOiLliKDpmaTmiJDlip8hIn0pLG4uZ2V0Q2hhbm5lbExpc3QoKX0pfSkuY2F0Y2goZnVuY3Rpb24oKXt9KTp0aGlzLiRtZXNzYWdlKHt0eXBlOiJlcnJvciIsbWVzc2FnZToi5ZCv55So54q25oCB5LiL5LiN5Y+v5Yig6ZmkISJ9KX0sZ2V0Q2hhbm5lbFR5cGU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2RsKCkudGhlbihmdW5jdGlvbihuKXt2YXIgdD1uLmRhdGE7dC5zdGF0dXMmJnQucmVzdWx0LmZvckVhY2goZnVuY3Rpb24obix0LGEpe3ZhciBpPXt9O2kubGFiZWw9bi5jaGFubmVsX3R5cGVfbmFtZSxpLnZhbHVlPW4uY2hhbm5lbF90eXBlaWQsZS5jaGFubmVsVHlwZUxpc3QucHVzaChpKX0pfSl9LHNlYXJjaENoYW5uZWw6ZnVuY3Rpb24oKXt0aGlzLnBhZ2VObz0xLHRoaXMuZ2V0Q2hhbm5lbExpc3QoKX0sZ2V0UGFyZW50Q2hhbm5lbDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7bWwoKS50aGVuKGZ1bmN0aW9uKG4pe3ZhciB0PW4uZGF0YTt0LnN0YXR1cyYmdC5yZXN1bHQuZm9yRWFjaChmdW5jdGlvbihuLHQsYSl7dmFyIGk9e307aS5sYWJlbD1uLmNoYW5uZWxfbmFtZSxpLnZhbHVlPW4uY2hhbm5lbGlkLGUucGFyZW50Q2hhbm5lbExpc3QucHVzaChpKX0pfSl9fX0sU2w9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJzdWItY2hhbm5lbCJ9LFt0KCJkaXYiLFt0KCJjaXJjbGUtdGl0bGUiLHtzdGF0aWNDbGFzczoiY2ljbGUtY29udHJvbGxlciIsYXR0cnM6eyJ0aXRsZS1uYW1lIjoi6aKR6YGT5YiX6KGoIn19KSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InNlYXJjaC1mb3JtLWNvbnRhaW5lciJ9LFt0KCJlbC1mb3JtIix7c3RhdGljQ2xhc3M6ImRlbW8tZm9ybS1pbmxpbmUiLGF0dHJzOntpbmxpbmU6ITAsbW9kZWw6ZS5jaGFubmVsRm9ybX19LFt0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IumikemBkyJ9fSxbdCgiZWwtaW5wdXQiLHthdHRyczp7Y2xlYXJhYmxlOiIifSxtb2RlbDp7dmFsdWU6ZS5jaGFubmVsRm9ybS5jaGFubmVsX25hbWUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuY2hhbm5lbEZvcm0sImNoYW5uZWxfbmFtZSIsbil9LGV4cHJlc3Npb246ImNoYW5uZWxGb3JtLmNoYW5uZWxfbmFtZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IueItue6p+mikemBkyIscHJvcDoicGFyZW50X2NoYW5uZWxfbmFtZSJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e2ZpbHRlcmFibGU6IiIsY2xlYXJhYmxlOiIiLHBsYWNlaG9sZGVyOiIifSxvbjp7Y2xlYXI6ZS5zZWFyY2hDaGFubmVsLGNoYW5nZTplLnNlYXJjaENoYW5uZWx9LG1vZGVsOnt2YWx1ZTplLmNoYW5uZWxGb3JtLnBhcmVudF9jaGFubmVsaWQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuY2hhbm5lbEZvcm0sInBhcmVudF9jaGFubmVsaWQiLG4pfSxleHByZXNzaW9uOiJjaGFubmVsRm9ybS5wYXJlbnRfY2hhbm5lbGlkIn19LGUuX2woZS5wYXJlbnRDaGFubmVsTGlzdCxmdW5jdGlvbihlLG4pe3JldHVybiB0KCJlbC1vcHRpb24iLHtrZXk6bixhdHRyczp7dmFsdWU6ZS52YWx1ZSxsYWJlbDplLmxhYmVsfX0pfSksMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoic2VhcmNoLWxlZnQiLGF0dHJzOntsYWJlbDoi5YiG57G7In19LFt0KCJlbC1zZWxlY3QiLHthdHRyczp7Y2xlYXJhYmxlOiIiLHBsYWNlaG9sZGVyOiIifSxvbjp7Y2xlYXI6ZS5zZWFyY2hDaGFubmVsLGNoYW5nZTplLnNlYXJjaENoYW5uZWx9LG1vZGVsOnt2YWx1ZTplLmNoYW5uZWxGb3JtLmNoYW5uZWxfdHlwZWlkLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNoYW5uZWxGb3JtLCJjaGFubmVsX3R5cGVpZCIsbil9LGV4cHJlc3Npb246ImNoYW5uZWxGb3JtLmNoYW5uZWxfdHlwZWlkIn19LGUuX2woZS5jaGFubmVsVHlwZUxpc3QsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtb3B0aW9uIix7a2V5Om4sYXR0cnM6e3ZhbHVlOmUudmFsdWUsbGFiZWw6ZS5sYWJlbH19KX0pLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6InNlYXJjaC1sZWZ0IixhdHRyczp7bGFiZWw6IueKtuaAgSJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiIifSxvbjp7Y2hhbmdlOmUuc2VhcmNoQ2hhbm5lbH0sbW9kZWw6e3ZhbHVlOmUuY2hhbm5lbEZvcm0uc3RhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuY2hhbm5lbEZvcm0sInN0YXRlIixuKX0sZXhwcmVzc2lvbjoiY2hhbm5lbEZvcm0uc3RhdGUifX0sW3QoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZToiIixsYWJlbDoi5YWo6YOoIn19KSxlLl92KCIgIiksdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjEsbGFiZWw6IuWQr+eUqCJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZTowLGxhYmVsOiLlgZznlKgifX0pXSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJkYXRlLWxlZnQiLGF0dHJzOntsYWJlbDoi5byA5aeL5pe26Ze0In19LFt0KCJlbC1kYXRlLXBpY2tlciIse2F0dHJzOnt0aXRsZTplLl9mKCJGb3JtYXREYXRlIikoZS5jaGFubmVsRm9ybS5zdGFydERhdGUsInl5eXktTU0tZGQgaGg6bW0iKSx0eXBlOiJkYXRldGltZSIsZm9ybWF0OiJ5eXl5LU1NLWRkIEhIOm1tIixwbGFjZWhvbGRlcjoi6YCJ5oup5pel5pyfIn0sb246e2NoYW5nZTplLnNlYXJjaENoYW5uZWx9LG1vZGVsOnt2YWx1ZTplLmNoYW5uZWxGb3JtLnN0YXJ0RGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jaGFubmVsRm9ybSwic3RhcnREYXRlIixuKX0sZXhwcmVzc2lvbjoiY2hhbm5lbEZvcm0uc3RhcnREYXRlIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJkYXRlLWxlZnQiLHN0YXRpY1N0eWxlOntsZWZ0OiIwIn0sYXR0cnM6e2xhYmVsOiLnu5PmnZ/ml7bpl7QifX0sW3QoImVsLWRhdGUtcGlja2VyIix7YXR0cnM6e3RpdGxlOmUuX2YoIkZvcm1hdERhdGUiKShlLmNoYW5uZWxGb3JtLmVuZERhdGUsInl5eXktTU0tZGQgaGg6bW0iKSxmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLHR5cGU6ImRhdGV0aW1lIixwbGFjZWhvbGRlcjoi6YCJ5oup5pel5pyfIn0sb246e2NoYW5nZTplLnNlYXJjaENoYW5uZWx9LG1vZGVsOnt2YWx1ZTplLmNoYW5uZWxGb3JtLmVuZERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuY2hhbm5lbEZvcm0sImVuZERhdGUiLG4pfSxleHByZXNzaW9uOiJjaGFubmVsRm9ybS5lbmREYXRlIn19KV0sMSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse3N0YXRpY1N0eWxlOnsibWFyZ2luLWxlZnQiOiI0MHB4In0sYXR0cnM6e3R5cGU6InByaW1hcnkifSxvbjp7Y2xpY2s6ZS5zZWFyY2hDaGFubmVsfX0sW2UuX3YoIlxuICAgICAgICAgIOafpeivolxuICAgICAgICAgICIpLHQoImkiLHtzdGF0aWNDbGFzczoiZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQifSldKSxlLl92KCIgIiksdCgicm91dGVyLWxpbmsiLHthdHRyczp7dG86Ii9zdWJDaGFubmVsL2NyZWF0ZSJ9fSxbdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InByaW1hcnkifX0sW2UuX3YoIlxuICAgICAgICAgICAg5re75Yqg6aKR6YGTXG4gICAgICAgICAgICAiKSx0KCJpIix7c3RhdGljQ2xhc3M6ImVsLWljb24tcGx1cyBlbC1pY29uLS1yaWdodCJ9KV0pXSwxKV0sMSldLDEpXSwxKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InRhYmxlLWxpc3QifSxbdCgiZWwtdGFibGUiLHtyZWY6ImNoYW5uZWxUYWJsZSIsc3RhdGljQ2xhc3M6Indob2xlLXRhYmxlIixhdHRyczp7ZGF0YTplLnRhYmxlRGF0YSxzdHJpcGU6IiIsIm1pbi1oZWlnaHQiOiI0MDAifSxvbjp7ImNlbGwtY2xpY2siOmUuY2VsbENsaWNrLCJjZWxsLW1vdXNlLWxlYXZlIjplLmNlbGxNb3VzZUxlYXZlfX0sW2UuX2woZS50YWJsZUhlYWRlcixmdW5jdGlvbihlLG4pe3JldHVybiB0KCJlbC10YWJsZS1jb2x1bW4iLHtrZXk6bixhdHRyczp7cHJvcDplLnByb3AsbGFiZWw6ZS5sYWJlbCx3aWR0aDplLndpZHRoLGZvcm1hdHRlcjplLmZvcm1hdHRlcixhbGlnbjoiY2VudGVyIixmaXhlZDoiIiwic2hvdy1vdmVyZmxvdy10b29sdGlwIjoiIn19KX0pLGUuX3YoIiAiKSx0KCJlbC10YWJsZS1jb2x1bW4iLHthdHRyczp7Zml4ZWQ6InJpZ2h0IixsYWJlbDoi5pON5L2cIixhbGlnbjoiY2VudGVyIix3aWR0aDoiMTAwIn0sc2NvcGVkU2xvdHM6ZS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24obil7cmV0dXJuW3QoImVsLXRvb2x0aXAiLHtzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6e2VmZmVjdDoiZGFyayIsY29udGVudDoi5L+u5pS554q25oCBIixwbGFjZW1lbnQ6InRvcCJ9fSxbdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InRleHQiLHNpemU6InNtYWxsIixpY29uOiJlbC1pY29uLXJlbW92ZS1vdXRsaW5lIn0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuY2hhbmdlU3RhdGUobi5yb3cpfX19KV0sMSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJ0ZXh0IixzaXplOiJzbWFsbCIsaWNvbjoiZWwtaWNvbi1lZGl0In0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuaGFuZGxlRWRpdChuLnJvdyl9fX0pLGUuX3YoIiAiKSx0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToidGV4dCIsc2l6ZToic21hbGwiLGljb246ImVsLWljb24tZGVsZXRlIn0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuaGFuZGxlRGVsZXRlKG4ucm93KX19fSldfX1dKX0pXSwyKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InBhZ2luYXRpb24ifSxbdCgiZWwtcGFnaW5hdGlvbiIse2F0dHJzOnt0b3RhbDplLnRvdGFsLCJwYWdlLXNpemVzIjpbMTAsMjAsMzAsNDBdLCJjdXJyZW50LXBhZ2UiOmUucGFnZU5vLGJhY2tncm91bmQ6IiIsbGF5b3V0OiJ0b3RhbCwgc2l6ZXMsIHByZXYsIHBhZ2VyLCBuZXh0In0sb246eyJzaXplLWNoYW5nZSI6ZS5oYW5kbGVTaXplQ2hhbmdlLCJjdXJyZW50LWNoYW5nZSI6ZS5oYW5kbGVDdXJyZW50Q2hhbmdlfX0pXSwxKV0sMSldKX07U2wuX3dpdGhTdHJpcHBlZD0hMDt2YXIgRWw9e3JlbmRlcjpTbCxzdGF0aWNSZW5kZXJGbnM6W119LERsPUVsO3ZhciBMbD0hMTt2YXIgQmw9dCgiVlUvOCIpKGtsLERsLCExLGZ1bmN0aW9uKGUpe0xsfHx0KCJJeWVYIil9LG51bGwsbnVsbCk7Qmwub3B0aW9ucy5fX2ZpbGU9InNyYy9jb21wb25lbnRzL21hbmFnZVN1YmxpdmUvc3ViQ2hhbm5lbC9jaGFubmVsTGlzdC52dWUiO3ZhciBNbD1CbC5leHBvcnRzLElsPXtjb21wb25lbnRzOntDaXJjbGVUaXRsZTplbn0sZGF0YTpmdW5jdGlvbigpe3JldHVybntpY29uTGlzdDpbXSxpY29uQ2hlY2tMaXN0OltdLGluZGV4OjB9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dGhpcy5nZXRJY29uTGlzdCgpfSxtZXRob2RzOntnZXRJY29uTGlzdDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7VnQoKS50aGVuKGZ1bmN0aW9uKG4pe2lmKG4uZGF0YS5zdGF0dXMpe2UuaWNvbkNoZWNrTGlzdD1bXSxlLmljb25MaXN0PW4uZGF0YS5yZXN1bHQ7Zm9yKHZhciB0PTA7dDxlLmljb25MaXN0Lmxlbmd0aDt0KyspZS5pY29uQ2hlY2tMaXN0LnB1c2goITEpfX0pfSxpY29uU2VsZWN0ZWQ6ZnVuY3Rpb24oZSxuKXt0aGlzLmluZGV4PWU7Zm9yKHZhciB0PTA7dDx0aGlzLmljb25MaXN0Lmxlbmd0aDt0KyspdGhpcy4kc2V0KHRoaXMuaWNvbkNoZWNrTGlzdCx0LCExKTt0aGlzLiRzZXQodGhpcy5pY29uQ2hlY2tMaXN0LGUsITApfSxzdWJtaXRJY29uOmZ1bmN0aW9uKCl7dGhpcy4kZW1pdCgic3VibWl0LWljb24iLHRoaXMuaWNvbkxpc3RbdGhpcy5pbmRleF0pfX19LFRsPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPWUuJGNyZWF0ZUVsZW1lbnQsdD1lLl9zZWxmLl9jfHxuO3JldHVybiB0KCJkaXYiLHtzdGF0aWNDbGFzczoiaWNvbi1jb250YWluZXIifSxbdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImNoYW5uZWwtaWNvbiJ9LGUuX2woZS5pY29uTGlzdCxmdW5jdGlvbihuLGEpe3JldHVybiB0KCJzcGFuIix7a2V5OmEsY2xhc3M6ZS5pY29uQ2hlY2tMaXN0W2FdPyJjbGljay1ib3JkZXIiOiJtb3Jlbi1ib3JkZXIiLG9uOntjbGljazpmdW5jdGlvbihuKXtlLmljb25TZWxlY3RlZChhLGUuaWNvbkNoZWNrTGlzdFthXSl9fX0sW3QoImltZyIse2F0dHJzOntzcmM6bn19KV0pfSksMCksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJpY29uLXN1Ym1pdCJ9LFt0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToicHJpbWFyeSJ9LG9uOntjbGljazplLnN1Ym1pdEljb259fSxbZS5fdigi56Gu5a6aIildKV0sMSldKX07VGwuX3dpdGhTdHJpcHBlZD0hMDt2YXIgJGw9e3JlbmRlcjpUbCxzdGF0aWNSZW5kZXJGbnM6W119LHpsPSRsO3ZhciBVbD0hMTt2YXIgTmw9dCgiVlUvOCIpKElsLHpsLCExLGZ1bmN0aW9uKGUpe1VsfHx0KCJXMDM3Iil9LCJkYXRhLXYtNTJlOTY4MzQiLG51bGwpO05sLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9tYW5hZ2VTdWJsaXZlL3N1YkNoYW5uZWwvY2hvb3NlSWNvbi52dWUiO3ZhciBSbD1ObC5leHBvcnRzLFZsPXtjb21wb25lbnRzOntDaXJjbGVUaXRsZTplbixDaG9vc2VJY29uOlJsfSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2NyZWF0ZUZyb206e2NoYW5uZWxfbmFtZToiIixwYXJlbnRfY2hhbm5lbF9uYW1lOiIiLHNvcnQ6IiIsaWNvbl91cmw6IiIsY2hhbm5lbF90eXBlX25hbWU6IiIsc3RhdGU6MCxkZXNjcmlwdGlvbjoiIixmaXhlZDohMSxwYXJlbnRfY2hhbm5lbGlkOiIiLGNoYW5uZWxfdHlwZWlkOiIifSxydWxlczp7Y2hhbm5lbF9uYW1lOlt7cmVxdWlyZWQ6ITAsbWVzc2FnZToi6K+36L6T5YWl6aKR6YGT5ZCN56ewIix0cmlnZ2VyOiJibHVyIn0se3ZhbGlkYXRvcjpmdW5jdGlvbihlLG4sdCl7cmV0dXJuIG4ubGVuZ3RoPjEwP3QobmV3IEVycm9yKCLpopHpgZPlkI3np7Dplb/luqbkuI3og73otoXov4cxMCIpKTp0KCl9LHRyaWdnZXI6ImNoYW5nZSJ9XSxzb3J0Olt7cmVxdWlyZWQ6ITAsbWVzc2FnZToi6K+36L6T5YWl5o6S5bqPIix0cmlnZ2VyOiJibHVyIn0se3R5cGU6Im51bWJlciIsbWVzc2FnZToi5o6S5bqP5b+F6aG75Li65pWw5a2XIn1dfSxjaGFubmVsVHlwZUxpc3Q6W10scGFyZW50Q2hhbm5lbExpc3Q6W3tsYWJlbDoi5pegIix2YWx1ZToiIn1dLGRpYWxvZ1Zpc2libGU6ITEsY29tcG9uZW50TmFtZToiIixmaXhlZERpc2FibGVkOiExfX0sY29tcHV0ZWQ6e2dldFVwbG9hZFVybDpmdW5jdGlvbigpe3JldHVybiBfZSgpfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuZ2V0Q2hhbm5lbFR5cGUoKSx0aGlzLmdldFBhcmVudENoYW5uZWwoKX0sbWV0aG9kczp7c3VibWl0Rm9ybTpmdW5jdGlvbihlKXt2YXIgbj10aGlzO3RoaXMuJHJlZnNbZV0udmFsaWRhdGUoZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuIGNvbnNvbGUubG9nKCJlcnJvciBzdWJtaXQhISIpLCExO3ZhciB0O24uY2hhbm5lbFR5cGVMaXN0LmZvckVhY2goZnVuY3Rpb24oZSx0LGEpe2UudmFsdWU9PT1uLmNyZWF0ZUZyb20uY2hhbm5lbF90eXBlaWQmJihuLmNyZWF0ZUZyb20uY2hhbm5lbF90eXBlX25hbWU9ZS5sYWJlbCl9KSxuLnBhcmVudENoYW5uZWxMaXN0LmZvckVhY2goZnVuY3Rpb24oZSx0LGEpe2UudmFsdWU9PT1uLmNyZWF0ZUZyb20ucGFyZW50X2NoYW5uZWxpZCYmKG4uY3JlYXRlRnJvbS5wYXJlbnRfY2hhbm5lbF9uYW1lPWUubGFiZWwpfSksKHQ9e2NoYW5uZWw6e3BhcmVudF9jaGFubmVsaWQ6bi5jcmVhdGVGcm9tLnBhcmVudF9jaGFubmVsaWQscGFyZW50X2NoYW5uZWxfbmFtZTpuLmNyZWF0ZUZyb20ucGFyZW50X2NoYW5uZWxfbmFtZSxjaGFubmVsX25hbWU6bi5jcmVhdGVGcm9tLmNoYW5uZWxfbmFtZSxjaGFubmVsX3R5cGVpZDpuLmNyZWF0ZUZyb20uY2hhbm5lbF90eXBlaWQsY2hhbm5lbF90eXBlX25hbWU6bi5jcmVhdGVGcm9tLmNoYW5uZWxfdHlwZV9uYW1lLGljb25fdXJsOm4uY3JlYXRlRnJvbS5pY29uX3VybCxzdGF0ZTpuLmNyZWF0ZUZyb20uc3RhdGUsZGVzY3JpcHRpb246bi5jcmVhdGVGcm9tLmRlc2NyaXB0aW9uLGZpeGVkOm4uY3JlYXRlRnJvbS5maXhlZCxzb3J0Om4uY3JlYXRlRnJvbS5zb3J0fX0sYmUoIm1hbmFnZXIvT25EZW1hbmRDaGFubmVsL2FkZCIsdCkpLnRoZW4oZnVuY3Rpb24oZSl7MjAwPT09ZS5zdGF0dXMmJihuLiRyb3V0ZXIucHVzaCh7cGF0aDoiL3N1YkNoYW5uZWwvbGlzdCJ9KSxuLiRub3RpZnkoe3RpdGxlOiLpgJrnn6UiLG1lc3NhZ2U6Iua3u+WKoOaIkOWKnyIsdHlwZToic3VjY2VzcyJ9KSl9KX0pfSxoYW5kbGVQY0F2YXRhclN1Y2Nlc3M6ZnVuY3Rpb24oZSxuKXtpZihlLnN0YXR1cyl7dmFyIHQ9ZS5yZXN1bHQ7dGhpcy5jcmVhdGVGcm9tLmljb25fdXJsPXR9fSxiZWZvcmVBdmF0YXJVcGxvYWQ6ZnVuY3Rpb24oZSl7dmFyIG49ZS50eXBlIGlueyJpbWFnZS9qcGVnIjohMCwiaW1hZ2UvcG5nIjohMCwiaW1hZ2UvanBnIjohMH0sdD1lLnNpemUvMTAyNC8xMDI0PDI7cmV0dXJuIG58fHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuivt+S4iuS8oOWbvueJh+agvOW8j+eahOaWh+S7tiEiKSx0fHx0aGlzLiRtZXNzYWdlLmVycm9yKCLkuIrkvKDlm77niYflpKflsI/kuI3og73otoXov4cgMk1CISIpLG4mJnR9LGdldENoYW5uZWxUeXBlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztkbCgpLnRoZW4oZnVuY3Rpb24obil7dmFyIHQ9bi5kYXRhO3Quc3RhdHVzJiZ0LnJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uKG4sdCxhKXswPT09dCYmKGUuY3JlYXRlRnJvbS5jaGFubmVsX3R5cGVpZD1uLmNoYW5uZWxfdHlwZWlkKTt2YXIgaT17fTtpLmxhYmVsPW4uY2hhbm5lbF90eXBlX25hbWUsaS52YWx1ZT1uLmNoYW5uZWxfdHlwZWlkLGUuY2hhbm5lbFR5cGVMaXN0LnB1c2goaSl9KX0pfSxnZXRQYXJlbnRDaGFubmVsOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczttbCgpLnRoZW4oZnVuY3Rpb24obil7dmFyIHQ9bi5kYXRhO3Quc3RhdHVzJiZ0LnJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uKG4sdCxhKXtpZihlLmNoYW5uZWxpZCE9PW4uY2hhbm5lbGlkKXt2YXIgaT17fTtpLmxhYmVsPW4uY2hhbm5lbF9uYW1lLGkudmFsdWU9bi5jaGFubmVsaWQsZS5wYXJlbnRDaGFubmVsTGlzdC5wdXNoKGkpfX0pfSl9LGNob29zZUljb246ZnVuY3Rpb24oKXt0aGlzLmRpYWxvZ1Zpc2libGU9ITAsdGhpcy5jb21wb25lbnROYW1lPSJDaG9vc2VJY29uIn0sY2xvc2VEaWFsb2c6ZnVuY3Rpb24oKXt0aGlzLmRpYWxvZ1Zpc2libGU9ITEsdGhpcy5jb21wb25lbnROYW1lPSIifSxzdWJtaXRJY29uOmZ1bmN0aW9uKGUpe3RoaXMuY3JlYXRlRnJvbS5pY29uX3VybD1lLHRoaXMuZGlhbG9nVmlzaWJsZT0hMSx0aGlzLmNvbXBvbmVudE5hbWU9IiJ9LGRpc2FibGVJc0ZpeGVkOmZ1bmN0aW9uKCl7dGhpcy5jcmVhdGVGcm9tLnBhcmVudF9jaGFubmVsaWQ/KHRoaXMuY3JlYXRlRnJvbS5maXhlZD0hMSx0aGlzLmZpeGVkRGlzYWJsZWQ9ITApOnRoaXMuZml4ZWREaXNhYmxlZD0hMX19fSxqbD1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1lLiRjcmVhdGVFbGVtZW50LHQ9ZS5fc2VsZi5fY3x8bjtyZXR1cm4gdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImNoYW5uZWwgY3JlYXRlIn0sW3QoImNpcmNsZS10aXRsZSIse3N0YXRpY0NsYXNzOiJjaWNsZS1jb250cm9sbGVyIixhdHRyczp7InRpdGxlLW5hbWUiOiLpopHpgZPmlrDlop4ifX0pLGUuX3YoIiAiKSx0KCJlbC1mb3JtIix7cmVmOiJjcmVhdGVGcm9tIixzdGF0aWNDbGFzczoicnVsZS1mb3JtIixhdHRyczp7bW9kZWw6ZS5jcmVhdGVGcm9tLHJ1bGVzOmUucnVsZXMsImxhYmVsLXdpZHRoIjoiMTAwcHgifX0sW3QoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi6aKR6YGT5ZCN56ewIixwcm9wOiJjaGFubmVsX25hbWUifX0sW3QoImVsLWlucHV0Iix7bW9kZWw6e3ZhbHVlOmUuY3JlYXRlRnJvbS5jaGFubmVsX25hbWUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuY3JlYXRlRnJvbSwiY2hhbm5lbF9uYW1lIiwic3RyaW5nIj09dHlwZW9mIG4/bi50cmltKCk6bil9LGV4cHJlc3Npb246ImNyZWF0ZUZyb20uY2hhbm5lbF9uYW1lIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi54i257qn6aKR6YGTIixwcm9wOiJwYXJlbnRfY2hhbm5lbF9uYW1lIn19LFt0KCJlbC1zZWxlY3QiLHthdHRyczp7ZmlsdGVyYWJsZToiIixwbGFjZWhvbGRlcjoiIn0sb246e2NoYW5nZTplLmRpc2FibGVJc0ZpeGVkfSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGcm9tLnBhcmVudF9jaGFubmVsaWQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuY3JlYXRlRnJvbSwicGFyZW50X2NoYW5uZWxpZCIsbil9LGV4cHJlc3Npb246ImNyZWF0ZUZyb20ucGFyZW50X2NoYW5uZWxpZCJ9fSxlLl9sKGUucGFyZW50Q2hhbm5lbExpc3QsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtb3B0aW9uIix7a2V5Om4sYXR0cnM6e3ZhbHVlOmUudmFsdWUsbGFiZWw6ZS5sYWJlbH19KX0pLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLlvZLlsZ7nsbvliKsiLHByb3A6ImNoYW5uZWxfdHlwZV9uYW1lIn19LFt0KCJlbC1zZWxlY3QiLHthdHRyczp7ZmlsdGVyYWJsZToiIixwbGFjZWhvbGRlcjoiIn0sbW9kZWw6e3ZhbHVlOmUuY3JlYXRlRnJvbS5jaGFubmVsX3R5cGVpZCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jcmVhdGVGcm9tLCJjaGFubmVsX3R5cGVpZCIsbil9LGV4cHJlc3Npb246ImNyZWF0ZUZyb20uY2hhbm5lbF90eXBlaWQifX0sZS5fbChlLmNoYW5uZWxUeXBlTGlzdCxmdW5jdGlvbihlLG4pe3JldHVybiB0KCJlbC1vcHRpb24iLHtrZXk6bixhdHRyczp7dmFsdWU6ZS52YWx1ZSxsYWJlbDplLmxhYmVsfX0pfSksMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6e2xhYmVsOiLlm77moIfphY3nva4ifX0sW3QoImRpdiIse3N0YXRpY0NsYXNzOiJpY29uLWNob29zZS1jb250YWluZXIifSxbdCgiZGl2Iix7c3RhdGljQ2xhc3M6Im1vcmVuLWljb24ifSxbdCgiaW1nIix7YXR0cnM6e3NyYzplLmNyZWF0ZUZyb20uaWNvbl91cmx9fSldKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InByaW1hcnkifSxvbjp7Y2xpY2s6ZS5jaG9vc2VJY29ufX0sW2UuX3YoIumAieaLqeWbvuaghyIpXSldLDEpXSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi54q25oCB6YCJ5oupIixwcm9wOiJzdGF0ZSJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiLor7fpgInmi6kifSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGcm9tLnN0YXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZyb20sInN0YXRlIixuKX0sZXhwcmVzc2lvbjoiY3JlYXRlRnJvbS5zdGF0ZSJ9fSxbdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjAsbGFiZWw6IuWBnOeUqCJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZToxLGxhYmVsOiLlkK/nlKgifX0pXSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi6aKR6YGT566A6L+wIn19LFt0KCJlbC1pbnB1dCIse2F0dHJzOnt0eXBlOiJ0ZXh0YXJlYSJ9LG1vZGVsOnt2YWx1ZTplLmNyZWF0ZUZyb20uZGVzY3JpcHRpb24sY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuY3JlYXRlRnJvbSwiZGVzY3JpcHRpb24iLG4pfSxleHByZXNzaW9uOiJjcmVhdGVGcm9tLmRlc2NyaXB0aW9uIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5piv5ZCm5Zu65a6aIixwcm9wOiJmaXhlZCJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e2Rpc2FibGVkOmUuZml4ZWREaXNhYmxlZCxwbGFjZWhvbGRlcjoi6K+36YCJ5oupIn0sbW9kZWw6e3ZhbHVlOmUuY3JlYXRlRnJvbS5maXhlZCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jcmVhdGVGcm9tLCJmaXhlZCIsbil9LGV4cHJlc3Npb246ImNyZWF0ZUZyb20uZml4ZWQifX0sW3QoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZTohMCxsYWJlbDoi5pivIn19KSxlLl92KCIgIiksdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOiExLGxhYmVsOiLlkKYifX0pXSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJzb3J0IixhdHRyczp7bGFiZWw6IuaOkuW6jyIscHJvcDoic29ydCJ9fSxbdCgiZWwtaW5wdXQiLHtzdGF0aWNTdHlsZTp7d2lkdGg6Ijc1JSJ9LG1vZGVsOnt2YWx1ZTplLmNyZWF0ZUZyb20uc29ydCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jcmVhdGVGcm9tLCJzb3J0IixlLl9uKG4pKX0sZXhwcmVzc2lvbjoiY3JlYXRlRnJvbS5zb3J0In19KSxlLl92KCIgIiksdCgic3BhbiIsW2UuX3YoIuaPkOekuu+8muaVsOWtl+i2iuWwj+i2iuW+gOWJjSIpXSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLFt0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToicHJpbWFyeSJ9LG9uOntjbGljazpmdW5jdGlvbihuKXtlLnN1Ym1pdEZvcm0oImNyZWF0ZUZyb20iKX19fSxbZS5fdigi5o+Q5LqkIildKSxlLl92KCIgIiksdCgicm91dGVyLWxpbmsiLHthdHRyczp7dG86Ii9zdWJDaGFubmVsL2xpc3QifX0sW3QoImVsLWJ1dHRvbiIsW2UuX3YoIuWPlua2iCIpXSldLDEpXSwxKV0sMSksZS5fdigiICIpLHQoImVsLWRpYWxvZyIse2F0dHJzOnt2aXNpYmxlOmUuZGlhbG9nVmlzaWJsZSx0aXRsZToi5Zu+5qCH6YCJ5oupIix3aWR0aDoiNDAlIn0sb246eyJ1cGRhdGU6dmlzaWJsZSI6ZnVuY3Rpb24obil7ZS5kaWFsb2dWaXNpYmxlPW59LGNsb3NlOmUuY2xvc2VEaWFsb2d9fSxbdChlLmNvbXBvbmVudE5hbWUse3RhZzoiZGl2Iixvbjp7InN1Ym1pdC1pY29uIjplLnN1Ym1pdEljb259fSldLDEpXSwxKX07amwuX3dpdGhTdHJpcHBlZD0hMDt2YXIgUGw9e3JlbmRlcjpqbCxzdGF0aWNSZW5kZXJGbnM6W119LEhsPVBsO3ZhciBRbD0hMTt2YXIgV2w9dCgiVlUvOCIpKFZsLEhsLCExLGZ1bmN0aW9uKGUpe1FsfHx0KCJpYnI4Iil9LCJkYXRhLXYtZmU0NjE1ZWEiLG51bGwpO1dsLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9tYW5hZ2VTdWJsaXZlL3N1YkNoYW5uZWwvY2hhbm5lbENyZWF0ZS52dWUiO3ZhciBPbD1XbC5leHBvcnRzLHFsPXtjb21wb25lbnRzOntDaXJjbGVUaXRsZTplbixDaG9vc2VJY29uOlJsfSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2VkaXRGcm9tOntjaGFubmVsX25hbWU6IiIscGFyZW50X2NoYW5uZWxfbmFtZToiIixwYXJlbnRfY2hhbm5lbGlkOiIiLHNvcnQ6MCxpY29uX3VybDoiIixjaGFubmVsX3R5cGVfbmFtZToiIixzdGF0ZToiIixkZXNjcmlwdGlvbjoiIixmaXhlZDoiIixjaGFubmVsX3R5cGVpZDoiIn0scnVsZXM6e2NoYW5uZWxfbmFtZTpbe3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+i+k+WFpemikemBk+WQjeensCIsdHJpZ2dlcjoiYmx1ciJ9LHt2YWxpZGF0b3I6ZnVuY3Rpb24oZSxuLHQpe3JldHVybiBuLmxlbmd0aD4xMD90KG5ldyBFcnJvcigi6aKR6YGT5ZCN56ew6ZW/5bqm5LiN6IO96LaF6L+HMTAiKSk6dCgpfSx0cmlnZ2VyOiJjaGFuZ2UifV0sc29ydDpbe3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+i+k+WFpeaOkuW6jyIsdHJpZ2dlcjoiYmx1ciJ9LHt0eXBlOiJudW1iZXIiLG1lc3NhZ2U6IuaOkuW6j+W/hemhu+S4uuaVsOWtlyJ9XX0sY2hhbm5lbFR5cGVMaXN0OltdLHBhcmVudENoYW5uZWxMaXN0Olt7bGFiZWw6IuaXoCIsdmFsdWU6IiJ9XSxjaGFubmVsaWQ6IiIsZGlzYWJsZWRDaG9vc2VQYXJlbnRDaGFubmVsOiExLGRpYWxvZ1Zpc2libGU6ITEsY29tcG9uZW50TmFtZToiIixpc1JlZnJlc2g6ITAsZml4ZWREaXNhYmxlZDohMX19LGNvbXB1dGVkOntnZXRVcGxvYWRVcmw6ZnVuY3Rpb24oKXtyZXR1cm4gX2UoKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLmdldEVkaXRJbmZvKCksdGhpcy5nZXRDaGFubmVsVHlwZSgpLHRoaXMuZ2V0UGFyZW50Q2hhbm5lbCgpfSxiZWZvcmVSb3V0ZUxlYXZlOmZ1bmN0aW9uKGUsbix0KXsiL3N1YkNoYW5uZWwvbGlzdCI9PT1lLnBhdGg/ZS5tZXRhLnJlZnJlc2g9dGhpcy5pc1JlZnJlc2g6Ii9zdWJDaGFubmVsL2NyZWF0ZSI9PT1lLnBhdGgmJnRoaXMuJHJvb3QuZXZlbnRIdWIuJGVtaXQoInJlc2V0LW9wdGlvbnMiKSx0KCl9LG1ldGhvZHM6e2dvdG9MaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1JlZnJlc2g9ITEsdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6Ii9zdWJDaGFubmVsL2xpc3QifSl9LGdldEVkaXRJbmZvOmZ1bmN0aW9uKCl7dmFyIGUsbj10aGlzO3RoaXMuY2hhbm5lbGlkPXNlc3Npb25TdG9yYWdlLmdldEl0ZW0oImNoYW5uZWxpZCIpLChlPXtjaGFubmVsOntjaGFubmVsaWQ6dGhpcy5jaGFubmVsaWR9fSxiZSgibWFuYWdlci9PbkRlbWFuZENoYW5uZWwvZ2V0Q2hhbm5lbEJ5SUQiLGUpKS50aGVuKGZ1bmN0aW9uKGUpe2lmKGUuZGF0YS5zdGF0dXMpe3ZhciB0PWUuZGF0YS5yZXN1bHQ7bi5lZGl0RnJvbS5jaGFubmVsX25hbWU9dC5jaGFubmVsX25hbWUsbi5lZGl0RnJvbS5wYXJlbnRfY2hhbm5lbF9uYW1lPXQucGFyZW50X2NoYW5uZWxfbmFtZSxuLmVkaXRGcm9tLnNvcnQ9dC5zb3J0LG4uZWRpdEZyb20uaWNvbl91cmw9dC5pY29uX3VybCxuLmVkaXRGcm9tLmNoYW5uZWxfdHlwZV9uYW1lPXQuY2hhbm5lbF90eXBlX25hbWUsbi5lZGl0RnJvbS5zdGF0ZT10LnN0YXRlLG4uZWRpdEZyb20uZGVzY3JpcHRpb249dC5kZXNjcmlwdGlvbixuLmVkaXRGcm9tLmZpeGVkPXQuZml4ZWQsbi5lZGl0RnJvbS5jaGFubmVsX3R5cGVpZD10LmNoYW5uZWxfdHlwZWlkLG4uZWRpdEZyb20ucGFyZW50X2NoYW5uZWxpZD10LnBhcmVudF9jaGFubmVsaWQsdC5jb3VudENoaWxkcmVuPjAmJihuLmRpc2FibGVkQ2hvb3NlUGFyZW50Q2hhbm5lbD0hMCksbi5kaXNhYmxlSXNGaXhlZCgpfX0pfSxzdWJtaXRGb3JtOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7dGhpcy4kcmVmc1tlXS52YWxpZGF0ZShmdW5jdGlvbihlKXtpZighZSlyZXR1cm4gY29uc29sZS5sb2coImVycm9yIHN1Ym1pdCEhIiksITE7dmFyIHQ7bi5jaGFubmVsVHlwZUxpc3QuZm9yRWFjaChmdW5jdGlvbihlLHQsYSl7ZS52YWx1ZT09PW4uZWRpdEZyb20uY2hhbm5lbF90eXBlaWQmJihuLmVkaXRGcm9tLmNoYW5uZWxfdHlwZV9uYW1lPWUubGFiZWwpfSksbi5wYXJlbnRDaGFubmVsTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGUsdCxhKXtlLnZhbHVlPT09bi5lZGl0RnJvbS5wYXJlbnRfY2hhbm5lbGlkJiYobi5lZGl0RnJvbS5wYXJlbnRfY2hhbm5lbF9uYW1lPWUubGFiZWwpfSksKHQ9e2NoYW5uZWw6e3BhcmVudF9jaGFubmVsaWQ6bi5lZGl0RnJvbS5wYXJlbnRfY2hhbm5lbGlkLHBhcmVudF9jaGFubmVsX25hbWU6bi5lZGl0RnJvbS5wYXJlbnRfY2hhbm5lbF9uYW1lLGNoYW5uZWxpZDpuLmNoYW5uZWxpZCxjaGFubmVsX25hbWU6bi5lZGl0RnJvbS5jaGFubmVsX25hbWUsY2hhbm5lbF90eXBlaWQ6bi5lZGl0RnJvbS5jaGFubmVsX3R5cGVpZCxjaGFubmVsX3R5cGVfbmFtZTpuLmVkaXRGcm9tLmNoYW5uZWxfdHlwZV9uYW1lLGljb25fdXJsOm4uZWRpdEZyb20uaWNvbl91cmwsc3RhdGU6bi5lZGl0RnJvbS5zdGF0ZSxkZXNjcmlwdGlvbjpuLmVkaXRGcm9tLmRlc2NyaXB0aW9uLGZpeGVkOm4uZWRpdEZyb20uZml4ZWQsc29ydDpuLmVkaXRGcm9tLnNvcnR9fSxiZSgibWFuYWdlci9PbkRlbWFuZENoYW5uZWwvdXBkYXRlIix0KSkudGhlbihmdW5jdGlvbihlKXsyMDA9PT1lLnN0YXR1cyYmKG4uJHJvdXRlci5wdXNoKHtwYXRoOiIvc3ViQ2hhbm5lbC9saXN0In0pLG4uJG5vdGlmeSh7dGl0bGU6IumAmuefpSIsbWVzc2FnZToi57yW6L6R5oiQ5YqfIix0eXBlOiJzdWNjZXNzIn0pKX0pfSl9LGhhbmRsZVBjQXZhdGFyU3VjY2VzczpmdW5jdGlvbihlLG4pe2lmKGUuc3RhdHVzKXt2YXIgdD1lLnJlc3VsdDt0aGlzLmVkaXRGcm9tLmljb25fdXJsPXR9fSxiZWZvcmVBdmF0YXJVcGxvYWQ6ZnVuY3Rpb24oZSl7dmFyIG49ZS50eXBlIGlueyJpbWFnZS9qcGVnIjohMCwiaW1hZ2UvcG5nIjohMCwiaW1hZ2UvanBnIjohMH0sdD1lLnNpemUvMTAyNC8xMDI0PDI7cmV0dXJuIG58fHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuivt+S4iuS8oOWbvueJh+agvOW8j+eahOaWh+S7tiEiKSx0fHx0aGlzLiRtZXNzYWdlLmVycm9yKCLkuIrkvKDlm77niYflpKflsI/kuI3og73otoXov4cgMk1CISIpLG4mJnR9LGdldENoYW5uZWxUeXBlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztkbCgpLnRoZW4oZnVuY3Rpb24obil7dmFyIHQ9bi5kYXRhO3Quc3RhdHVzJiZ0LnJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uKG4sdCxhKXswPT09dCYmKGUuZWRpdEZyb20uY2hhbm5lbF90eXBlaWQ9bi5jaGFubmVsX3R5cGVpZCk7dmFyIGk9e307aS5sYWJlbD1uLmNoYW5uZWxfdHlwZV9uYW1lLGkudmFsdWU9bi5jaGFubmVsX3R5cGVpZCxlLmNoYW5uZWxUeXBlTGlzdC5wdXNoKGkpfSl9KX0sZ2V0UGFyZW50Q2hhbm5lbDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7bWwoKS50aGVuKGZ1bmN0aW9uKG4pe3ZhciB0PW4uZGF0YTt0LnN0YXR1cyYmdC5yZXN1bHQuZm9yRWFjaChmdW5jdGlvbihuLHQsYSl7aWYoZS5jaGFubmVsaWQhPT1uLmNoYW5uZWxpZCl7dmFyIGk9e307aS5sYWJlbD1uLmNoYW5uZWxfbmFtZSxpLnZhbHVlPW4uY2hhbm5lbGlkLGUucGFyZW50Q2hhbm5lbExpc3QucHVzaChpKX19KX0pfSxjaG9vc2VJY29uOmZ1bmN0aW9uKCl7dGhpcy5kaWFsb2dWaXNpYmxlPSEwLHRoaXMuY29tcG9uZW50TmFtZT0iQ2hvb3NlSWNvbiJ9LGNsb3NlRGlhbG9nOmZ1bmN0aW9uKCl7dGhpcy5kaWFsb2dWaXNpYmxlPSExLHRoaXMuY29tcG9uZW50TmFtZT0iIn0sc3VibWl0SWNvbjpmdW5jdGlvbihlKXt0aGlzLmVkaXRGcm9tLmljb25fdXJsPWUsdGhpcy5kaWFsb2dWaXNpYmxlPSExLHRoaXMuY29tcG9uZW50TmFtZT0iIn0sZGlzYWJsZUlzRml4ZWQ6ZnVuY3Rpb24oKXt0aGlzLmVkaXRGcm9tLnBhcmVudF9jaGFubmVsaWQ/KHRoaXMuZWRpdEZyb20uZml4ZWQ9ITEsdGhpcy5maXhlZERpc2FibGVkPSEwKTp0aGlzLmZpeGVkRGlzYWJsZWQ9ITF9fX0sWWw9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJjaGFubmVsIGNyZWF0ZSJ9LFt0KCJjaXJjbGUtdGl0bGUiLHtzdGF0aWNDbGFzczoiY2ljbGUtY29udHJvbGxlciIsYXR0cnM6eyJ0aXRsZS1uYW1lIjoi6aKR6YGT57yW6L6RIn19KSxlLl92KCIgIiksdCgiZWwtZm9ybSIse3JlZjoiZWRpdEZyb20iLHN0YXRpY0NsYXNzOiJydWxlLWZvcm0iLGF0dHJzOnttb2RlbDplLmVkaXRGcm9tLHJ1bGVzOmUucnVsZXMsImxhYmVsLXdpZHRoIjoiMTAwcHgifX0sW3QoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi6aKR6YGT5ZCN56ewIixwcm9wOiJjaGFubmVsX25hbWUifX0sW3QoImVsLWlucHV0Iix7bW9kZWw6e3ZhbHVlOmUuZWRpdEZyb20uY2hhbm5lbF9uYW1lLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmVkaXRGcm9tLCJjaGFubmVsX25hbWUiLCJzdHJpbmciPT10eXBlb2Ygbj9uLnRyaW0oKTpuKX0sZXhwcmVzc2lvbjoiZWRpdEZyb20uY2hhbm5lbF9uYW1lIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi54i257qn6aKR6YGTIixwcm9wOiJwYXJlbnRfY2hhbm5lbF9uYW1lIn19LFt0KCJlbC1zZWxlY3QiLHthdHRyczp7ZGlzYWJsZWQ6ZS5kaXNhYmxlZENob29zZVBhcmVudENoYW5uZWwsZmlsdGVyYWJsZToiIixwbGFjZWhvbGRlcjoiIn0sb246e2NoYW5nZTplLmRpc2FibGVJc0ZpeGVkfSxtb2RlbDp7dmFsdWU6ZS5lZGl0RnJvbS5wYXJlbnRfY2hhbm5lbGlkLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmVkaXRGcm9tLCJwYXJlbnRfY2hhbm5lbGlkIixuKX0sZXhwcmVzc2lvbjoiZWRpdEZyb20ucGFyZW50X2NoYW5uZWxpZCJ9fSxlLl9sKGUucGFyZW50Q2hhbm5lbExpc3QsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtb3B0aW9uIix7a2V5Om4sYXR0cnM6e3ZhbHVlOmUudmFsdWUsbGFiZWw6ZS5sYWJlbH19KX0pLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLlvZLlsZ7nsbvliKsiLHByb3A6ImNoYW5uZWxfdHlwZV9uYW1lIn19LFt0KCJlbC1zZWxlY3QiLHthdHRyczp7ZmlsdGVyYWJsZToiIixwbGFjZWhvbGRlcjoiIn0sbW9kZWw6e3ZhbHVlOmUuZWRpdEZyb20uY2hhbm5lbF90eXBlaWQsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZWRpdEZyb20sImNoYW5uZWxfdHlwZWlkIixuKX0sZXhwcmVzc2lvbjoiZWRpdEZyb20uY2hhbm5lbF90eXBlaWQifX0sZS5fbChlLmNoYW5uZWxUeXBlTGlzdCxmdW5jdGlvbihlLG4pe3JldHVybiB0KCJlbC1vcHRpb24iLHtrZXk6bixhdHRyczp7dmFsdWU6ZS52YWx1ZSxsYWJlbDplLmxhYmVsfX0pfSksMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6e2xhYmVsOiLlm77moIfphY3nva4ifX0sW3QoImRpdiIse3N0YXRpY0NsYXNzOiJpY29uLWNob29zZS1jb250YWluZXIifSxbdCgiZGl2Iix7c3RhdGljQ2xhc3M6Im1vcmVuLWljb24ifSxbdCgiaW1nIix7YXR0cnM6e3NyYzplLmVkaXRGcm9tLmljb25fdXJsfX0pXSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmUuY2hvb3NlSWNvbn19LFtlLl92KCLpgInmi6nlm77moIciKV0pXSwxKV0pLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IueKtuaAgemAieaLqSIscHJvcDoic3RhdGUifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntwbGFjZWhvbGRlcjoi6K+36YCJ5oupIn0sbW9kZWw6e3ZhbHVlOmUuZWRpdEZyb20uc3RhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZWRpdEZyb20sInN0YXRlIixuKX0sZXhwcmVzc2lvbjoiZWRpdEZyb20uc3RhdGUifX0sW3QoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZToxLGxhYmVsOiLlkK/nlKgifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MCxsYWJlbDoi5YGc55SoIn19KV0sMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IumikemBk+eugOi/sCJ9fSxbdCgiZWwtaW5wdXQiLHthdHRyczp7dHlwZToidGV4dGFyZWEifSxtb2RlbDp7dmFsdWU6ZS5lZGl0RnJvbS5kZXNjcmlwdGlvbixjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5lZGl0RnJvbSwiZGVzY3JpcHRpb24iLG4pfSxleHByZXNzaW9uOiJlZGl0RnJvbS5kZXNjcmlwdGlvbiJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuaYr+WQpuWbuuWumiIscHJvcDoiZml4ZWQifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntkaXNhYmxlZDplLmZpeGVkRGlzYWJsZWQscGxhY2Vob2xkZXI6Iuivt+mAieaLqSJ9LG1vZGVsOnt2YWx1ZTplLmVkaXRGcm9tLmZpeGVkLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmVkaXRGcm9tLCJmaXhlZCIsbil9LGV4cHJlc3Npb246ImVkaXRGcm9tLmZpeGVkIn19LFt0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6ITAsbGFiZWw6IuaYryJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZTohMSxsYWJlbDoi5ZCmIn19KV0sMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoic29ydCIsYXR0cnM6e2xhYmVsOiLmjpLluo8iLHByb3A6InNvcnQifX0sW3QoImVsLWlucHV0Iix7c3RhdGljU3R5bGU6e3dpZHRoOiI3NSUifSxtb2RlbDp7dmFsdWU6ZS5lZGl0RnJvbS5zb3J0LGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmVkaXRGcm9tLCJzb3J0IixlLl9uKG4pKX0sZXhwcmVzc2lvbjoiZWRpdEZyb20uc29ydCJ9fSksZS5fdigiICIpLHQoInNwYW4iLFtlLl92KCLmj5DnpLrvvJrmlbDlrZfotorlsI/otorlvoDliY0iKV0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIixbdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InByaW1hcnkifSxvbjp7Y2xpY2s6ZnVuY3Rpb24obil7ZS5zdWJtaXRGb3JtKCJlZGl0RnJvbSIpfX19LFtlLl92KCLmj5DkuqQiKV0pLGUuX3YoIiAiKSx0KCJlbC1idXR0b24iLHtvbjp7Y2xpY2s6ZS5nb3RvTGlzdH19LFtlLl92KCLlj5bmtogiKV0pXSwxKV0sMSksZS5fdigiICIpLHQoImVsLWRpYWxvZyIse2F0dHJzOnt2aXNpYmxlOmUuZGlhbG9nVmlzaWJsZSx0aXRsZToi5Zu+5qCH6YCJ5oupIix3aWR0aDoiNDAlIn0sb246eyJ1cGRhdGU6dmlzaWJsZSI6ZnVuY3Rpb24obil7ZS5kaWFsb2dWaXNpYmxlPW59LGNsb3NlOmUuY2xvc2VEaWFsb2d9fSxbdChlLmNvbXBvbmVudE5hbWUse3RhZzoiZGl2Iixvbjp7InN1Ym1pdC1pY29uIjplLnN1Ym1pdEljb259fSldLDEpXSwxKX07WWwuX3dpdGhTdHJpcHBlZD0hMDt2YXIgWmw9e3JlbmRlcjpZbCxzdGF0aWNSZW5kZXJGbnM6W119LEdsPVpsO3ZhciBKbD0hMTt2YXIgWGw9dCgiVlUvOCIpKHFsLEdsLCExLGZ1bmN0aW9uKGUpe0psfHx0KCJBaVFIIil9LCJkYXRhLXYtNDU5NjA2NGUiLG51bGwpO1hsLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9tYW5hZ2VTdWJsaXZlL3N1YkNoYW5uZWwvY2hhbm5lbEVkaXQudnVlIjt2YXIgS2w9WGwuZXhwb3J0cztmdW5jdGlvbiBlbyhlKXtyZXR1cm4gYmUoIm1hbmFnZXIvTGl2ZUJyb2FkY2FzdC9wYWdlIixlKX12YXIgbm89e2NvbXBvbmVudHM6e0NpcmNsZVRpdGxlOmVufSxkYXRhOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPXRoaXMuJGNyZWF0ZUVsZW1lbnQ7cmV0dXJue2xpdmU6e2xpdmVfbmFtZToiIixzdGF0ZToiIixzdGFydERhdGU6IiIsZW5kRGF0ZToiIn0sY2hhbm5lbFR5cGVMaXN0OltdLHNwZWNpYWxMaXN0OltdLGNsaWNrQ2VsbEluZGV4Oi0xLHRhYmxlSGVhZGVyOlt7cHJvcDoibGl2ZV9uYW1lIixsYWJlbDoi5Li76aKYIn0se3Byb3A6ImNyZWF0ZXRpbWUiLGxhYmVsOiLliJvlu7rml6XmnJ8iLGZvcm1hdHRlcjpmdW5jdGlvbihuLHQsYSxpKXtyZXR1cm4gZS4kb3B0aW9ucy5maWx0ZXJzLkZvcm1hdERhdGUoYSwieXl5eS1NTS1kZCBoaDptbSIpfX0se3Byb3A6InVwZGF0ZXRpbWUiLGxhYmVsOiLmm7TmlrDml6XmnJ8iLGZvcm1hdHRlcjpmdW5jdGlvbihuLHQsYSxpKXtyZXR1cm4gZS4kb3B0aW9ucy5maWx0ZXJzLkZvcm1hdERhdGUoYSwieXl5eS1NTS1kZCBoaDptbSIpfX0se3Byb3A6ImxpdmVfaGVhZF91cmwiLGxhYmVsOiLlr7zop4blm74iLGZvcm1hdHRlcjpmdW5jdGlvbihlLHQsYSxpKXtyZXR1cm4gbigiaW1nIix7Y2xhc3M6InRvcGljLXRhYmxlLXBpYyIsYXR0cnM6e3NyYzphfX0pfX0se3Byb3A6ImV4cGlyeV9kYXRlX2VuZCIsbGFiZWw6IuebtOaSreWRqOacnyIsd2lkdGg6MjAwLGZvcm1hdHRlcjpmdW5jdGlvbihuLHQsYSxpKXtyZXR1cm4gZS4kb3B0aW9ucy5maWx0ZXJzLkZvcm1hdERhdGUobi5leHBpcnlfZGF0ZV9zdGFydCwieXl5eS1NTS1kZCBoaDptbSIpKyLoh7MiK2UuJG9wdGlvbnMuZmlsdGVycy5Gb3JtYXREYXRlKGEsInl5eXktTU0tZGQgaGg6bW0iKX19LHtwcm9wOiJsaXZlX3VybCIsbGFiZWw6Ium7mOiupOinhumikemTvuaOpSIsZm9ybWF0dGVyOmZ1bmN0aW9uKGUsdCxhLGkpe3JldHVybiBuKCJhIix7YXR0cnM6e2hyZWY6YSx0YXJnZXQ6Il9ibGFuayJ9fSxbYV0pfX0se3Byb3A6InNob3dTdGF0ZSIsbGFiZWw6IueKtuaAgSIsd2lkdGg6IjEwMCJ9XSx0YWJsZURhdGE6W10sY29tbWVudDohMSxzaGFyZTohMSxwcmFpc2U6ITEsY29sbGVjdDohMSxpbmRleDotMSxwYWdlTm86MSxwYWdlU2l6ZToxMCx0b3RhbDowLGRpYWxvZ1Zpc2libGU6ITF9fSx3YXRjaDp7ImxpdmUubGl2ZV9uYW1lIjpmdW5jdGlvbigpe3RoaXMuc2VhcmNoTGl2ZSgpfX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5nZXRMaXZlTGlzdCgpLHRoaXMuJHJvb3QuZXZlbnRIdWIuJG9uKCJyZXNldC1vcHRpb25zIixmdW5jdGlvbigpe2UucmVzZXRMaXZlT3B0aW9ucygpfSl9LGFjdGl2YXRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuJHJvdXRlLm1ldGE7ZS5oYXNPd25Qcm9wZXJ0eSgicmVmcmVzaCIpJiZlLnJlZnJlc2gmJih0aGlzLmdldExpdmVMaXN0KCksZGVsZXRlIHRoaXMuJHJvdXRlLm1ldGEucmVmcmVzaCl9LGJlZm9yZVJvdXRlTGVhdmU6ZnVuY3Rpb24oZSxuLHQpeyIvbGl2ZS9jcmVhdGUiPT09ZS5wYXRoJiZ0aGlzLnJlc2V0TGl2ZU9wdGlvbnMoKSx0KCl9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLiRyb290LmV2ZW50SHViLiRvZmYoInJlc2V0LW9wdGlvbnMiKX0sbWV0aG9kczp7Z2V0TGl2ZUxpc3Q6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49bnVsbCE9PXRoaXMubGl2ZS5zdGFydERhdGU/bmV3IERhdGUodGhpcy5saXZlLnN0YXJ0RGF0ZSkuZ2V0VGltZSgpOm51bGwsdD1udWxsIT09dGhpcy5saXZlLmVuZERhdGU/bmV3IERhdGUodGhpcy5saXZlLmVuZERhdGUpLmdldFRpbWUoKTpudWxsO2VvKHtwYWdlTm86dGhpcy5wYWdlTm8scGFnZVNpemU6dGhpcy5wYWdlU2l6ZSxsaXZlX25hbWU6dGhpcy5saXZlLmxpdmVfbmFtZSxzdGF0ZTp0aGlzLmxpdmUuc3RhdGUsdGltZVN0YXJ0Om4sdGltZUVuZDp0fSkudGhlbihmdW5jdGlvbihuKXtpZihuLmRhdGEuc3RhdHVzKXt2YXIgdD1uLmRhdGEucmVzdWx0O2UudGFibGVEYXRhPXQubGlzdCxlLnRvdGFsPXQudG90YWx9fSl9LGhhbmRsZVNpemVDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5wYWdlU2l6ZT1lLHRoaXMuc2VhcmNoTGl2ZSgpfSxoYW5kbGVDdXJyZW50Q2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMucGFnZU5vPWUsdGhpcy5nZXRMaXZlTGlzdCgpfSx1cE1hbnU6ZnVuY3Rpb24oZSl7dGhpcy51cGRhdGVMaXZlKGUubGl2ZWlkLCJzdGF0ZSIsMSl9LGRvd25NYW51OmZ1bmN0aW9uKGUpe3RoaXMudXBkYXRlTGl2ZShlLmxpdmVpZCwic3RhdGUiLDApfSxlZGl0TGl2ZTpmdW5jdGlvbihlKXsxPT09ZS5zdGF0ZT90aGlzLiRtZXNzYWdlKHt0eXBlOiJlcnJvciIsbWVzc2FnZToi5LiN5Y+v57yW6L6R5bey5LiK56i/55qE55u05pKtISJ9KTooc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgibGl2ZWlkIixlLmxpdmVpZCksdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6Ii9saXZlL2VkaXQifSkpfSxoYW5kbGVDb21tZW50OmZ1bmN0aW9uKGUpezEhPT1lLnN0YXRlP2UuYWxsb3dfY29tbWVudD90aGlzLnVwZGF0ZUxpdmUoZS5saXZlaWQsImFsbG93X2NvbW1lbnQiLCExKTp0aGlzLnVwZGF0ZUxpdmUoZS5saXZlaWQsImFsbG93X2NvbW1lbnQiLCEwKTp0aGlzLiRtZXNzYWdlKHt0eXBlOiJlcnJvciIsbWVzc2FnZToi5LiK56i/55qE55u05pKt5LiN5Y+v5pON5L2c6K+E6K665p2D6ZmQISJ9KX0saGFuZGxlU2hhcmU6ZnVuY3Rpb24oZSl7MSE9PWUuc3RhdGU/ZS5hbGxvd19zaGFyZT90aGlzLnVwZGF0ZUxpdmUoZS5saXZlaWQsImFsbG93X3NoYXJlIiwhMSk6dGhpcy51cGRhdGVMaXZlKGUubGl2ZWlkLCJhbGxvd19zaGFyZSIsITApOnRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOiLkuIrnqL/nmoTnm7Tmkq3kuI3lj6/mk43kvZzliIbkuqvmnYPpmZAhIn0pfSxoYW5kbGVQcmFpc2U6ZnVuY3Rpb24oZSl7MSE9PWUuc3RhdGU/ZS5hbGxvd19saWtlP3RoaXMudXBkYXRlTGl2ZShlLmxpdmVpZCwiYWxsb3dfbGlrZSIsITEpOnRoaXMudXBkYXRlTGl2ZShlLmxpdmVpZCwiYWxsb3dfbGlrZSIsITApOnRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOiLkuIrnqL/nmoTnm7Tmkq3kuI3lj6/mk43kvZzngrnotZ7mnYPpmZAhIn0pfSxoYW5kbGVDb2xsZWN0OmZ1bmN0aW9uKGUpezEhPT1lLnN0YXRlP2UuYWxsb3dfY29sbGVjdD90aGlzLnVwZGF0ZUxpdmUoZS5saXZlaWQsImFsbG93X2NvbGxlY3QiLCExKTp0aGlzLnVwZGF0ZUxpdmUoZS5saXZlaWQsImFsbG93X2NvbGxlY3QiLCEwKTp0aGlzLiRtZXNzYWdlKHt0eXBlOiJlcnJvciIsbWVzc2FnZToi5LiK56i/55qE55u05pKt5LiN5Y+v5pON5L2c5pS26JeP5p2D6ZmQISJ9KX0sc2V0VG9wOmZ1bmN0aW9uKGUpe3RoaXMudXBkYXRlTGl2ZShlLmxpdmVpZCwidG9wIiwhMCl9LHNldFVuVG9wOmZ1bmN0aW9uKGUpe3RoaXMudXBkYXRlTGl2ZShlLmxpdmVpZCwidG9wIiwhMSl9LGRlbGV0ZUxpdmU6ZnVuY3Rpb24oZSl7dmFyIG49dGhpczsxIT09ZS5zdGF0ZT90aGlzLiRjb25maXJtKCfmmK/lkKbliKDpmaQiJytlLmxpdmVfbmFtZSsnIj8nLCLmj5DnpLoiLHtjb25maXJtQnV0dG9uVGV4dDoi56Gu5a6aIixjYW5jZWxCdXR0b25UZXh0OiLlj5bmtogiLHR5cGU6Indhcm5pbmcifSkudGhlbihmdW5jdGlvbigpe3ZhciB0Oyh0PXtsaXZlQnJvYWRjYXN0OntsaXZlaWQ6ZS5saXZlaWR9fSxiZSgibWFuYWdlci9MaXZlQnJvYWRjYXN0L2RlbGV0ZSIsdCkpLnRoZW4oZnVuY3Rpb24oZSl7ZS5zdGF0dXMmJm4uJG1lc3NhZ2Uoe3R5cGU6InN1Y2Nlc3MiLG1lc3NhZ2U6IuWIoOmZpOaIkOWKnyEifSksbi5zZWFyY2hMaXZlKCl9KX0pLmNhdGNoKGZ1bmN0aW9uKCl7fSk6dGhpcy4kbWVzc2FnZSh7dHlwZToiZXJyb3IiLG1lc3NhZ2U6IuS4jeWPr+WIoOmZpOW3suS4iueov+eahOebtOaSrSEifSl9LHVwZGF0ZUxpdmU6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhLGk9dGhpczsoYT17bGl2ZUJyb2FkY2FzdDpDaSgpKHtsaXZlaWQ6ZX0sbix0KX0sYmUoIm1hbmFnZXIvTGl2ZUJyb2FkY2FzdC91cGRhdGVTdGF0ZSIsYSkpLnRoZW4oZnVuY3Rpb24oZSl7ZS5zdGF0dXMmJihpLiRtZXNzYWdlKHt0eXBlOiJzdWNjZXNzIixtZXNzYWdlOiLmk43kvZzmiJDlip8hIn0pLGkuc2VhcmNoTGl2ZSgpKX0pfSxjbG9zZURpYWxvZzpmdW5jdGlvbigpe3RoaXMuY29tcG9uZW50TmFtZT0iIn0sc2VhcmNoTGl2ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy4kb3B0aW9ucy5maWx0ZXJzLnN3YXBUaW1lKHRoaXMubGl2ZSk7dmFyIG49bnVsbCE9PXRoaXMubGl2ZS5zdGFydERhdGU/bmV3IERhdGUodGhpcy5saXZlLnN0YXJ0RGF0ZSkuZ2V0VGltZSgpOm51bGwsdD1udWxsIT09dGhpcy5saXZlLmVuZERhdGU/bmV3IERhdGUodGhpcy5saXZlLmVuZERhdGUpLmdldFRpbWUoKTpudWxsO2VvKHtwYWdlTm86dGhpcy5wYWdlTm8scGFnZVNpemU6dGhpcy5wYWdlU2l6ZSxsaXZlX25hbWU6dGhpcy5saXZlLmxpdmVfbmFtZSxzdGF0ZTp0aGlzLmxpdmUuc3RhdGUsdGltZVN0YXJ0Om4sdGltZUVuZDp0fSkudGhlbihmdW5jdGlvbihuKXtpZihuLmRhdGEuc3RhdHVzKXt2YXIgdD1uLmRhdGEucmVzdWx0O2UudGFibGVEYXRhPXQubGlzdCxlLnRvdGFsPXQudG90YWx9fSl9LHJlc2V0TGl2ZU9wdGlvbnM6ZnVuY3Rpb24oKXt0aGlzLmxpdmU9e2xpdmVfbmFtZToiIixzdGF0ZToiIixzdGFydERhdGU6IiIsZW5kRGF0ZToiIn0sdGhpcy5wYWdlTm89MX19fSx0bz1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1lLiRjcmVhdGVFbGVtZW50LHQ9ZS5fc2VsZi5fY3x8bjtyZXR1cm4gdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImxpdmUifSxbdCgiZGl2IixbdCgiY2lyY2xlLXRpdGxlIix7c3RhdGljQ2xhc3M6ImNpY2xlLWNvbnRyb2xsZXIiLGF0dHJzOnsidGl0bGUtbmFtZSI6IuebtOaSreeuoeeQhiJ9fSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJzZWFyY2gtZm9ybS1jb250YWluZXIifSxbdCgiZWwtZm9ybSIse3N0YXRpY0NsYXNzOiJkZW1vLWZvcm0taW5saW5lIixhdHRyczp7aW5saW5lOiEwLG1vZGVsOmUubGl2ZX19LFt0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuebtOaSreS4u+mimCJ9fSxbdCgiZWwtaW5wdXQiLHthdHRyczp7Y2xlYXJhYmxlOiIifSxtb2RlbDp7dmFsdWU6ZS5saXZlLmxpdmVfbmFtZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5saXZlLCJsaXZlX25hbWUiLG4pfSxleHByZXNzaW9uOiJsaXZlLmxpdmVfbmFtZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoic2VhcmNoLWxlZnQiLGF0dHJzOntsYWJlbDoi54q25oCBIn19LFt0KCJlbC1zZWxlY3QiLHthdHRyczp7cGxhY2Vob2xkZXI6IiJ9LG9uOntjaGFuZ2U6ZS5zZWFyY2hMaXZlfSxtb2RlbDp7dmFsdWU6ZS5saXZlLnN0YXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmxpdmUsInN0YXRlIixuKX0sZXhwcmVzc2lvbjoibGl2ZS5zdGF0ZSJ9fSxbdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOiIiLGxhYmVsOiLlhajpg6gifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MCxsYWJlbDoi5pKk6ZSAIn19KSxlLl92KCIgIiksdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjEsbGFiZWw6IuW+heaSrSJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZToyLGxhYmVsOiLnm7Tmkq3kuK0ifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MyxsYWJlbDoi5bey57uT5p2fIn19KV0sMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuW8gOWni+aXtumXtCJ9fSxbdCgiZWwtZGF0ZS1waWNrZXIiLHthdHRyczp7dGl0bGU6ZS5fZigiRm9ybWF0RGF0ZSIpKGUubGl2ZS5zdGFydERhdGUsInl5eXktTU0tZGQgaGg6bW0iKSx0eXBlOiJkYXRldGltZSIsZm9ybWF0OiJ5eXl5LU1NLWRkIEhIOm1tIixwbGFjZWhvbGRlcjoi6YCJ5oup5pe26Ze0In0sb246e2NoYW5nZTplLnNlYXJjaExpdmV9LG1vZGVsOnt2YWx1ZTplLmxpdmUuc3RhcnREYXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmxpdmUsInN0YXJ0RGF0ZSIsbil9LGV4cHJlc3Npb246ImxpdmUuc3RhcnREYXRlIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJkYXRlLWxlZnQiLGF0dHJzOntsYWJlbDoi57uT5p2f5pe26Ze0In19LFt0KCJlbC1kYXRlLXBpY2tlciIse2F0dHJzOnt0aXRsZTplLl9mKCJGb3JtYXREYXRlIikoZS5saXZlLmVuZERhdGUsInl5eXktTU0tZGQgaGg6bW0iKSx0eXBlOiJkYXRldGltZSIsZm9ybWF0OiJ5eXl5LU1NLWRkIEhIOm1tIixwbGFjZWhvbGRlcjoi6YCJ5oup5pe26Ze0In0sb246e2NoYW5nZTplLnNlYXJjaExpdmV9LG1vZGVsOnt2YWx1ZTplLmxpdmUuZW5kRGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5saXZlLCJlbmREYXRlIixuKX0sZXhwcmVzc2lvbjoibGl2ZS5lbmREYXRlIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJidG4tY29udGFpbmVyIn0sW3QoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmUuc2VhcmNoTGl2ZX19LFtlLl92KCJcbiAgICAgICAgICAgIOafpeivolxuICAgICAgICAgICAgIiksdCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCJ9KV0pLGUuX3YoIiAiKSx0KCJyb3V0ZXItbGluayIse2F0dHJzOnt0bzoiL2xpdmUvY3JlYXRlIn19LFt0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToicHJpbWFyeSJ9fSxbZS5fdigiXG4gICAgICAgICAgICAgIOa3u+WKoOebtOaSrVxuICAgICAgICAgICAgICAiKSx0KCJpIix7c3RhdGljQ2xhc3M6ImVsLWljb24tcGx1cyBlbC1pY29uLS1yaWdodCJ9KV0pXSwxKV0sMSldLDEpXSwxKV0sMSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJ0YWJsZS1saXN0In0sW3QoImVsLXRhYmxlIix7cmVmOiJjaGFubmVsVGFibGUiLHN0YXRpY0NsYXNzOiJ3aG9sZS10YWJsZSIsYXR0cnM6e2RhdGE6ZS50YWJsZURhdGEsc3RyaXBlOiIiLCJtaW4taGVpZ2h0IjoiNDAwIn19LFtlLl9sKGUudGFibGVIZWFkZXIsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtdGFibGUtY29sdW1uIix7a2V5Om4sYXR0cnM6e3Byb3A6ZS5wcm9wLGxhYmVsOmUubGFiZWwsd2lkdGg6ZS53aWR0aCxmb3JtYXR0ZXI6ZS5mb3JtYXR0ZXIsYWxpZ246ImNlbnRlciIsZml4ZWQ6IiIsInNob3ctb3ZlcmZsb3ctdG9vbHRpcCI6IiJ9fSl9KSxlLl92KCIgIiksdCgiZWwtdGFibGUtY29sdW1uIix7YXR0cnM6e2xhYmVsOiLnva7pobbnirbmgIEiLGFsaWduOiJjZW50ZXIifSxzY29wZWRTbG90czplLl91KFt7a2V5OiJkZWZhdWx0IixmbjpmdW5jdGlvbihuKXtyZXR1cm5bbi5yb3cudG9wP3QoImVsLXRvb2x0aXAiLHtzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6e2VmZmVjdDoiZGFyayIsY29udGVudDoi54K55Ye75Y+W5raI572u6aG2IixwbGFjZW1lbnQ6InRvcCJ9fSxbdCgiZWwtdGFnIix7c3RhdGljQ2xhc3M6InNldFBvaW50ZXIiLHN0YXRpY1N0eWxlOnt3aWR0aDoiNjBweCIsY29sb3I6IiM2OTRlZmYifSxhdHRyczp7c2l6ZToibWluaSJ9LG5hdGl2ZU9uOntjbGljazpmdW5jdGlvbih0KXtlLnNldFVuVG9wKG4ucm93KX19fSxbZS5fdigiXG4gICAgICAgICAgICAgIOWPlua2iOe9rumhtlxuICAgICAgICAgICAgIildKV0sMSk6dCgiZWwtdG9vbHRpcCIse3N0YXRpY0NsYXNzOiJpdGVtIixhdHRyczp7ZWZmZWN0OiJkYXJrIixjb250ZW50OiLngrnlh7vnva7pobYiLHBsYWNlbWVudDoidG9wIn19LFt0KCJlbC10YWciLHtzdGF0aWNDbGFzczoic2V0UG9pbnRlciIsc3RhdGljU3R5bGU6e3dpZHRoOiI2MHB4In0sYXR0cnM6e3NpemU6Im1pbmkifSxuYXRpdmVPbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5zZXRUb3Aobi5yb3cpfX19LFtlLl92KCJcbiAgICAgICAgICAgICAg572u6aG2XG4gICAgICAgICAgICAiKV0pXSwxKV19fV0pfSksZS5fdigiICIpLHQoImVsLXRhYmxlLWNvbHVtbiIse2F0dHJzOntsYWJlbDoi5pON5L2cIixhbGlnbjoiY2VudGVyIix3aWR0aDoiMjAwIn0sc2NvcGVkU2xvdHM6ZS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24obil7cmV0dXJuW3QoInNwYW4iLHtzdGF0aWNDbGFzczoibWFudS1jb250YWluZXIifSxbMD09PW4ucm93LnN0YXRlP3QoInNwYW4iLHtzdGF0aWNDbGFzczoibWFudSBkZWxldGUtYWN0aXZlIixvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS51cE1hbnUobi5yb3cpfX19LFtlLl92KCJcbiAgICAgICAgICAgICAg5LiK56i/XG4gICAgICAgICAgICAiKV0pOmUuX2UoKSxlLl92KCIgIiksMT09PW4ucm93LnN0YXRlP3QoInNwYW4iLHtzdGF0aWNDbGFzczoibWFudSBkZWxldGUtYWN0aXZlIixvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5kb3duTWFudShuLnJvdyl9fX0sW2UuX3YoIlxuICAgICAgICAgICAgICDmkqTnqL9cbiAgICAgICAgICAgICIpXSk6ZS5fZSgpLGUuX3YoIiAiKSx0KCJzcGFuIix7Y2xhc3M6WyJtYW51IiwxIT09bi5yb3cuc3RhdGU/ImRlbGV0ZS1hY3RpdmUiOiIiXSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5lZGl0TGl2ZShuLnJvdyl9fX0sW2UuX3YoIlxuICAgICAgICAgICAgICDnvJbovpFcbiAgICAgICAgICAgICIpXSksZS5fdigiICIpLHQoInNwYW4iLHtjbGFzczpbIm1hbnUiLDEhPT1uLnJvdy5zdGF0ZT8iZGVsZXRlLWFjdGl2ZSI6IiJdLG9uOntjbGljazpmdW5jdGlvbih0KXtlLmRlbGV0ZUxpdmUobi5yb3cpfX19LFtlLl92KCJcbiAgICAgICAgICAgICAg5Yig6ZmkXG4gICAgICAgICAgICAiKV0pXSldfX1dKX0pLGUuX3YoIiAiKSx0KCJlbC10YWJsZS1jb2x1bW4iLHthdHRyczp7Zml4ZWQ6InJpZ2h0IixsYWJlbDoi5p2D6ZmQ6YWN572uIixhbGlnbjoiY2VudGVyIix3aWR0aDoiMTE1In0sc2NvcGVkU2xvdHM6ZS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24obil7cmV0dXJuW3QoImVsLXRvb2x0aXAiLHtzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6e2VmZmVjdDoiZGFyayIsY29udGVudDoi6K+E6K66IixwbGFjZW1lbnQ6InRvcCJ9fSxbdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImFsbG93X2NvbW1lbnQiLHN0eWxlOntiYWNrZ3JvdW5kQ29sb3I6bi5yb3cuYWxsb3dfY29tbWVudD8iI2ZmYTUwNyI6IiNCNUI4RDkifSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVDb21tZW50KG4ucm93KX19fSxbdCgiaSIse3N0YXRpY0NsYXNzOiJpY29uZm9udCBpY29uLW1hbnUtY29tbWVudCIsc3RhdGljU3R5bGU6e2NvbG9yOiJ3aGl0ZSJ9fSldKV0pLGUuX3YoIiAiKSx0KCJlbC10b29sdGlwIix7c3RhdGljQ2xhc3M6Iml0ZW0iLGF0dHJzOntlZmZlY3Q6ImRhcmsiLGNvbnRlbnQ6IuWIhuS6qyIscGxhY2VtZW50OiJ0b3AifX0sW3QoImRpdiIse3N0YXRpY0NsYXNzOiJhbGxvd19zaGFyZSIsc3R5bGU6e2JhY2tncm91bmRDb2xvcjpuLnJvdy5hbGxvd19zaGFyZT8iIzE4ODNGRiI6IiNCNUI4RDkifSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVTaGFyZShuLnJvdyl9fX0sW3QoImkiLHtzdGF0aWNDbGFzczoiaWNvbmZvbnQgaWNvbi1zaGFyZSIsc3RhdGljU3R5bGU6e2NvbG9yOiJ3aGl0ZSJ9fSldKV0pLGUuX3YoIiAiKSx0KCJlbC10b29sdGlwIix7c3RhdGljQ2xhc3M6Iml0ZW0iLGF0dHJzOntlZmZlY3Q6ImRhcmsiLGNvbnRlbnQ6IueCuei1niIscGxhY2VtZW50OiJ0b3AifX0sW3QoImRpdiIse3N0YXRpY0NsYXNzOiJhbGxvd19saWtlIixzdHlsZTp7YmFja2dyb3VuZENvbG9yOm4ucm93LmFsbG93X2xpa2U/IiNGMDA4MDgiOiIjQjVCOEQ5In0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuaGFuZGxlUHJhaXNlKG4ucm93KX19fSxbdCgiaSIse3N0YXRpY0NsYXNzOiJpY29uZm9udCBpY29uLXByYWlzZSIsc3RhdGljU3R5bGU6e2NvbG9yOiJ3aGl0ZSJ9fSldKV0pLGUuX3YoIiAiKSx0KCJlbC10b29sdGlwIix7c3RhdGljQ2xhc3M6Iml0ZW0iLGF0dHJzOntlZmZlY3Q6ImRhcmsiLGNvbnRlbnQ6IuaUtuiXjyIscGxhY2VtZW50OiJ0b3AifX0sW3QoImRpdiIse3N0YXRpY0NsYXNzOiJhbGxvd19jb2xsZWN0IixzdHlsZTp7YmFja2dyb3VuZENvbG9yOm4ucm93LmFsbG93X2NvbGxlY3Q/IiM2OTRFRkYiOiIjQjVCOEQ5In0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuaGFuZGxlQ29sbGVjdChuLnJvdyl9fX0sW3QoImkiLHtzdGF0aWNDbGFzczoiaWNvbmZvbnQgaWNvbi1jb2xsZWN0IixzdGF0aWNTdHlsZTp7Y29sb3I6IndoaXRlIn19KV0pXSldfX1dKX0sW2UuX3YoIjg1XG4gICAgICAgICIpXSldLDIpLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoicGFnaW5hdGlvbiJ9LFt0KCJlbC1wYWdpbmF0aW9uIix7YXR0cnM6e3RvdGFsOmUudG90YWwsInBhZ2Utc2l6ZXMiOlsxMCwyMCwzMF0sImN1cnJlbnQtcGFnZSI6ZS5wYWdlTm8sYmFja2dyb3VuZDoiIixsYXlvdXQ6InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQifSxvbjp7InNpemUtY2hhbmdlIjplLmhhbmRsZVNpemVDaGFuZ2UsImN1cnJlbnQtY2hhbmdlIjplLmhhbmRsZUN1cnJlbnRDaGFuZ2V9fSldLDEpXSwxKV0pfTt0by5fd2l0aFN0cmlwcGVkPSEwO3ZhciBhbz17cmVuZGVyOnRvLHN0YXRpY1JlbmRlckZuczpbXX0saW89YW87dmFyIGxvPSExO3ZhciBvbz10KCJWVS84Iikobm8saW8sITEsZnVuY3Rpb24oZSl7bG98fCh0KCJSOVVSIiksdCgiaXkxMSIpKX0sImRhdGEtdi00M2RjMWJiMCIsbnVsbCk7b28ub3B0aW9ucy5fX2ZpbGU9InNyYy9jb21wb25lbnRzL21hbmFnZUxpdmUvbGl2ZUxpc3QudnVlIjt2YXIgc289b28uZXhwb3J0cyxybz17Y29tcG9uZW50czp7Q2lyY2xlVGl0bGU6ZW59LG1peGluczpbeGFdLGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57Y3JlYXRlRm9ybTp7bGl2ZV9uYW1lOiIiLGljb25fdXJsOiIiLHVybDoiIixpc1RvcDohMSxsaXZlUmFuZ2U6W25ldyBEYXRlLG5ldyBEYXRlXSxpc0NvbW1lbnQ6ITEsaXNTaGFyZTohMSxpc1ByYWlzZTohMSxpc0NvbGxlY3Q6ITEsc3RhdGU6MX0scnVsZXM6e2xpdmVfbmFtZTpbe3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+i+k+WFpeebtOaSreS4u+mimCIsdHJpZ2dlcjoiYmx1ciJ9XSx1cmw6W3t2YWxpZGF0b3I6ZnVuY3Rpb24oZSxuLHQpe2lmKCEvXigoaHR8Zil0cHM/KTpcL1wvKFtcd1wtXSsoXC5bXHdcLV0rKSpcLykqW1x3XC1dKyhcLltcd1wtXSspKlwvPyhcPyhbXHdcLVwuLEA/Xj0lJjpcL35cKyNdKikrKT8vLnRlc3QobikpcmV0dXJuIHQobmV3IEVycm9yKCLor7fovpPlhaXmraPnoa7nmoTlnLDlnYAiKSk7dCgpfSx0cmlnZ2VyOiJibHVyIn1dLGljb25fdXJsOlt7cmVxdWlyZWQ6ITAsbWVzc2FnZToi6K+35LiK5Lyg5Zu+54mHIix0cmlnZ2VyOiJibHVyIn1dfX19LGNvbXB1dGVkOntnZXRVcGxvYWRVcmw6ZnVuY3Rpb24oKXtyZXR1cm4gX2UoKX19LG1ldGhvZHM6e3N1Ym1pdEZvcm06ZnVuY3Rpb24oZSl7dmFyIG49dGhpczt0aGlzLiRyZWZzW2VdLnZhbGlkYXRlKGZ1bmN0aW9uKGUpe2lmKCFlKXJldHVybiBjb25zb2xlLmxvZygiZXJyb3Igc3VibWl0ISEiKSwhMTt2YXIgdDsodD17bGl2ZUJyb2FkY2FzdDp7bGl2ZV9uYW1lOm4uY3JlYXRlRm9ybS5saXZlX25hbWUsbGl2ZV9oZWFkX3VybDpuLmNyZWF0ZUZvcm0uaWNvbl91cmwsbGl2ZV91cmw6bi5jcmVhdGVGb3JtLnVybCxleHBpcnlfZGF0ZV9zdGFydDpuLmNyZWF0ZUZvcm0ubGl2ZVJhbmdlWzBdLmdldFRpbWUoKSxleHBpcnlfZGF0ZV9lbmQ6bi5jcmVhdGVGb3JtLmxpdmVSYW5nZVsxXS5nZXRUaW1lKCksdG9wOm4uY3JlYXRlRm9ybS5pc1RvcCxhbGxvd19jb21tZW50Om4uY3JlYXRlRm9ybS5pc0NvbW1lbnQsYWxsb3dfc2hhcmU6bi5jcmVhdGVGb3JtLmlzU2hhcmUsYWxsb3dfbGlrZTpuLmNyZWF0ZUZvcm0uaXNQcmFpc2UsYWxsb3dfY29sbGVjdDpuLmNyZWF0ZUZvcm0uaXNDb2xsZWN0LHN0YXRlOm4uY3JlYXRlRm9ybS5zdGF0ZX19LGJlKCJtYW5hZ2VyL0xpdmVCcm9hZGNhc3QvYWRkIix0KSkudGhlbihmdW5jdGlvbihlKXsyMDA9PT1lLnN0YXR1cyYmKG4uJHJvdXRlci5wdXNoKHtwYXRoOiIvbGl2ZS9saXN0In0pLG4uJG5vdGlmeSh7dGl0bGU6IumAmuefpSIsbWVzc2FnZToi5re75Yqg5oiQ5YqfIix0eXBlOiJzdWNjZXNzIn0pKX0pfSl9LGhhbmRsZVBjQXZhdGFyU3VjY2VzczpmdW5jdGlvbihlLG4pe2lmKGUuc3RhdHVzKXt2YXIgdD1lLnJlc3VsdDt0aGlzLmNyZWF0ZUZvcm0uaWNvbl91cmw9dH19LGJlZm9yZUF2YXRhclVwbG9hZDpmdW5jdGlvbihlKXt2YXIgbj1lLnR5cGUgaW57ImltYWdlL2pwZWciOiEwLCJpbWFnZS9wbmciOiEwLCJpbWFnZS9qcGciOiEwfSx0PWUuc2l6ZS8xMDI0LzEwMjQ8MjtyZXR1cm4gbnx8dGhpcy4kbWVzc2FnZS5lcnJvcigi6K+35LiK5Lyg5Zu+54mH5qC85byP55qE5paH5Lu2ISIpLHR8fHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuS4iuS8oOWbvueJh+Wkp+Wwj+S4jeiDvei2hei/hyAyTUIhIiksbiYmdH0sY2hvb3NlVGltZTpmdW5jdGlvbihlKXtSZSh0aGlzLHRoaXMuY3JlYXRlRm9ybS5saXZlUmFuZ2UsZSl9fX0sY289ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJjaGFubmVsIGNyZWF0ZSJ9LFt0KCJjaXJjbGUtdGl0bGUiLHtzdGF0aWNDbGFzczoiY2ljbGUtY29udHJvbGxlciIsYXR0cnM6eyJ0aXRsZS1uYW1lIjoi55u05pKt5paw5aKeIn19KSxlLl92KCIgIiksdCgiZWwtZm9ybSIse3JlZjoiY3JlYXRlRm9ybSIsc3RhdGljQ2xhc3M6InJ1bGUtZm9ybSIsYXR0cnM6e21vZGVsOmUuY3JlYXRlRm9ybSxydWxlczplLnJ1bGVzLCJsYWJlbC13aWR0aCI6IjEwMHB4In19LFt0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuebtOaSreS4u+mimCIscHJvcDoibGl2ZV9uYW1lIn19LFt0KCJlbC1pbnB1dCIse21vZGVsOnt2YWx1ZTplLmNyZWF0ZUZvcm0ubGl2ZV9uYW1lLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZvcm0sImxpdmVfbmFtZSIsInN0cmluZyI9PXR5cGVvZiBuP24udHJpbSgpOm4pfSxleHByZXNzaW9uOiJjcmVhdGVGb3JtLmxpdmVfbmFtZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6e2xhYmVsOiLlm77moIfphY3nva4iLHByb3A6Imljb25fdXJsIn19LFt0KCJlbC11cGxvYWQiLHtzdGF0aWNDbGFzczoiYXZhdGFyLXVwbG9hZGVyIixhdHRyczp7InNob3ctZmlsZS1saXN0IjohMSxhY3Rpb246ZS5nZXRVcGxvYWRVcmwsaGVhZGVyczplLnVwbG9hZEhlYWRlcnMsIm9uLXN1Y2Nlc3MiOmUuaGFuZGxlUGNBdmF0YXJTdWNjZXNzLCJiZWZvcmUtdXBsb2FkIjplLmJlZm9yZUF2YXRhclVwbG9hZH19LFtlLmNyZWF0ZUZvcm0uaWNvbl91cmw/dCgiaW1nIix7c3RhdGljQ2xhc3M6ImF2YXRhciIsYXR0cnM6e3NyYzplLmNyZWF0ZUZvcm0uaWNvbl91cmx9fSk6dCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXBsdXMgYXZhdGFyLXVwbG9hZGVyLWljb24ifSldKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi55u05pKt5ZGo5pyfIixwcm9wOiJjaGFubmVsX25hbWUifX0sW3QoImVsLWRhdGUtcGlja2VyIix7c3RhdGljU3R5bGU6e3dpZHRoOiIxMDAlIn0sYXR0cnM6e2NsZWFyYWJsZTohMSx0eXBlOiJkYXRldGltZXJhbmdlIixmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLCJyYW5nZS1zZXBhcmF0b3IiOiLoh7MiLCJzdGFydC1wbGFjZWhvbGRlciI6IuW8gOWni+aXpeacnyIsImVuZC1wbGFjZWhvbGRlciI6Iue7k+adn+aXpeacnyJ9LG9uOntjaGFuZ2U6ZS5jaG9vc2VUaW1lfSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGb3JtLmxpdmVSYW5nZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jcmVhdGVGb3JtLCJsaXZlUmFuZ2UiLG4pfSxleHByZXNzaW9uOiJjcmVhdGVGb3JtLmxpdmVSYW5nZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuWGheWuuemTvuaOpSIscHJvcDoidXJsIn19LFt0KCJlbC1pbnB1dCIse21vZGVsOnt2YWx1ZTplLmNyZWF0ZUZvcm0udXJsLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZvcm0sInVybCIsbil9LGV4cHJlc3Npb246ImNyZWF0ZUZvcm0udXJsIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5piv5ZCm572u6aG2Iixwcm9wOiJmaXhlZCJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiLor7fpgInmi6kifSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGb3JtLmlzVG9wLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZvcm0sImlzVG9wIixuKX0sZXhwcmVzc2lvbjoiY3JlYXRlRm9ybS5pc1RvcCJ9fSxbdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOiEwLGxhYmVsOiLmmK8ifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6ITEsbGFiZWw6IuWQpiJ9fSldLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLmnYPpmZDphY3nva4ifX0sW3QoImVsLWNoZWNrYm94Iix7YXR0cnM6e2xhYmVsOiLor4TorroifSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGb3JtLmlzQ29tbWVudCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jcmVhdGVGb3JtLCJpc0NvbW1lbnQiLG4pfSxleHByZXNzaW9uOiJjcmVhdGVGb3JtLmlzQ29tbWVudCJ9fSksZS5fdigiICIpLHQoImVsLWNoZWNrYm94Iix7YXR0cnM6e2xhYmVsOiLliIbkuqsiLG5hbWU6ImF1dGgifSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGb3JtLmlzU2hhcmUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuY3JlYXRlRm9ybSwiaXNTaGFyZSIsbil9LGV4cHJlc3Npb246ImNyZWF0ZUZvcm0uaXNTaGFyZSJ9fSksZS5fdigiICIpLHQoImVsLWNoZWNrYm94Iix7YXR0cnM6e2xhYmVsOiLmlLbol48iLG5hbWU6ImF1dGgifSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGb3JtLmlzQ29sbGVjdCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jcmVhdGVGb3JtLCJpc0NvbGxlY3QiLG4pfSxleHByZXNzaW9uOiJjcmVhdGVGb3JtLmlzQ29sbGVjdCJ9fSksZS5fdigiICIpLHQoImVsLWNoZWNrYm94Iix7YXR0cnM6e2xhYmVsOiLngrnotZ4iLG5hbWU6ImF1dGgifSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGb3JtLmlzUHJhaXNlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZvcm0sImlzUHJhaXNlIixuKX0sZXhwcmVzc2lvbjoiY3JlYXRlRm9ybS5pc1ByYWlzZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuaYr+WQpuS4iueovyJ9fSxbdCgiZWwtcmFkaW8tZ3JvdXAiLHttb2RlbDp7dmFsdWU6ZS5jcmVhdGVGb3JtLnN0YXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZvcm0sInN0YXRlIixuKX0sZXhwcmVzc2lvbjoiY3JlYXRlRm9ybS5zdGF0ZSJ9fSxbdCgiZWwtcmFkaW8iLHthdHRyczp7bGFiZWw6MX19LFtlLl92KCJcbiAgICAgICAgICDmmK9cbiAgICAgICAgIildKSxlLl92KCIgIiksdCgiZWwtcmFkaW8iLHthdHRyczp7bGFiZWw6MH19LFtlLl92KCJcbiAgICAgICAgICDlkKZcbiAgICAgICAgIildKV0sMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLFt0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToicHJpbWFyeSJ9LG9uOntjbGljazpmdW5jdGlvbihuKXtlLnN1Ym1pdEZvcm0oImNyZWF0ZUZvcm0iKX19fSxbZS5fdigi5o+Q5LqkIildKSxlLl92KCIgIiksdCgicm91dGVyLWxpbmsiLHthdHRyczp7dG86Ii9saXZlL2xpc3QifX0sW3QoImVsLWJ1dHRvbiIsW2UuX3YoIuWPlua2iCIpXSldLDEpXSwxKV0sMSldLDEpfTtjby5fd2l0aFN0cmlwcGVkPSEwO3ZhciBtbz17cmVuZGVyOmNvLHN0YXRpY1JlbmRlckZuczpbXX0scG89bW87dmFyIHVvPSExO3ZhciBobz10KCJWVS84Iikocm8scG8sITEsZnVuY3Rpb24oZSl7dW98fHQoIkp5RDAiKX0sImRhdGEtdi0xYzJkY2YwNiIsbnVsbCk7aG8ub3B0aW9ucy5fX2ZpbGU9InNyYy9jb21wb25lbnRzL21hbmFnZUxpdmUvbGl2ZUNyZWF0ZS52dWUiO3ZhciBnbz1oby5leHBvcnRzLEFvPXtjb21wb25lbnRzOntDaXJjbGVUaXRsZTplbn0sbWl4aW5zOlt4YV0sZGF0YTpmdW5jdGlvbigpe3JldHVybntjcmVhdGVGb3JtOntsaXZlX25hbWU6IiIsaWNvbl91cmw6IiIsdXJsOiIiLGlzVG9wOiExLGxpdmVSYW5nZTpbXSxpc0NvbW1lbnQ6ITEsaXNTaGFyZTohMSxpc1ByYWlzZTohMSxpc0NvbGxlY3Q6ITEsc3RhdGU6MX0scnVsZXM6e2xpdmVfbmFtZTpbe3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+i+k+WFpeebtOaSreS4u+mimCIsdHJpZ2dlcjoiYmx1ciJ9XSx1cmw6W3t2YWxpZGF0b3I6ZnVuY3Rpb24oZSxuLHQpe2lmKCEvXigoaHR8Zil0cHM/KTpcL1wvKFtcd1wtXSsoXC5bXHdcLV0rKSpcLykqW1x3XC1dKyhcLltcd1wtXSspKlwvPyhcPyhbXHdcLVwuLEA/Xj0lJjpcL35cKyNdKikrKT8vLnRlc3QobikpcmV0dXJuIHQobmV3IEVycm9yKCLor7fovpPlhaXmraPnoa7nmoTlnLDlnYAiKSk7dCgpfSx0cmlnZ2VyOiJibHVyIn1dLGljb25fdXJsOlt7cmVxdWlyZWQ6ITAsbWVzc2FnZToi6K+35LiK5Lyg5Zu+54mHIix0cmlnZ2VyOiJibHVyIn1dfSxsaXZlaWQ6IiIsaXNSZWZyZXNoOiEwfX0sY29tcHV0ZWQ6e2dldFVwbG9hZFVybDpmdW5jdGlvbigpe3JldHVybiBfZSgpfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuZ2V0TGl2ZUVkaXRJbmZvQnlJZCgpfSxiZWZvcmVSb3V0ZUxlYXZlOmZ1bmN0aW9uKGUsbix0KXsiL2xpdmUvbGlzdCI9PT1lLnBhdGg/ZS5tZXRhLnJlZnJlc2g9dGhpcy5pc1JlZnJlc2g6Ii9saXZlL2NyZWF0ZSI9PT1lLnBhdGgmJnRoaXMuJHJvb3QuZXZlbnRIdWIuJGVtaXQoInJlc2V0LW9wdGlvbnMiKSx0KCl9LG1ldGhvZHM6e2dldExpdmVFZGl0SW5mb0J5SWQ6ZnVuY3Rpb24oKXt2YXIgZSxuPXRoaXM7dGhpcy5saXZlaWQ9c2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgibGl2ZWlkIiksKGU9e2xpdmVCcm9hZGNhc3Q6e2xpdmVpZDp0aGlzLmxpdmVpZH19LGJlKCJtYW5hZ2VyL0xpdmVCcm9hZGNhc3QvZ2V0TGl2ZUJyb2FkY2FzdEJ5SUQiLGUpKS50aGVuKGZ1bmN0aW9uKGUpe2lmKGUuZGF0YS5zdGF0dXMpe3ZhciB0PVtdLGE9ZS5kYXRhLnJlc3VsdDtuLmNyZWF0ZUZvcm0ubGl2ZV9uYW1lPWEubGl2ZV9uYW1lLG4uY3JlYXRlRm9ybS5pY29uX3VybD1hLmxpdmVfaGVhZF91cmwsbi5jcmVhdGVGb3JtLnVybD1hLmxpdmVfdXJsLHRbMF09bmV3IERhdGUoYS5leHBpcnlfZGF0ZV9zdGFydCksdFsxXT1uZXcgRGF0ZShhLmV4cGlyeV9kYXRlX2VuZCksbi4kc2V0KG4uY3JlYXRlRm9ybSwibGl2ZVJhbmdlIix0KSxuLmNyZWF0ZUZvcm0uaXNUb3A9YS50b3Asbi5jcmVhdGVGb3JtLmlzQ29tbWVudD1hLmFsbG93X2NvbW1lbnQsbi5jcmVhdGVGb3JtLmlzU2hhcmU9YS5hbGxvd19zaGFyZSxuLmNyZWF0ZUZvcm0uaXNDb2xsZWN0PWEuYWxsb3dfY29sbGVjdCxuLmNyZWF0ZUZvcm0uaXNQcmFpc2U9YS5hbGxvd19saWtlLG4uY3JlYXRlRm9ybS5zdGF0ZT1hLnN0YXRlfX0pfSxzdWJtaXRGb3JtOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7dGhpcy4kcmVmc1tlXS52YWxpZGF0ZShmdW5jdGlvbihlKXtpZighZSlyZXR1cm4gY29uc29sZS5sb2coImVycm9yIHN1Ym1pdCEhIiksITE7dmFyIHQ7KHQ9e2xpdmVCcm9hZGNhc3Q6e2xpdmVpZDpuLmxpdmVpZCxsaXZlX25hbWU6bi5jcmVhdGVGb3JtLmxpdmVfbmFtZSxsaXZlX2hlYWRfdXJsOm4uY3JlYXRlRm9ybS5pY29uX3VybCxsaXZlX3VybDpuLmNyZWF0ZUZvcm0udXJsLGV4cGlyeV9kYXRlX3N0YXJ0Om4uY3JlYXRlRm9ybS5saXZlUmFuZ2VbMF0uZ2V0VGltZSgpLGV4cGlyeV9kYXRlX2VuZDpuLmNyZWF0ZUZvcm0ubGl2ZVJhbmdlWzFdLmdldFRpbWUoKSx0b3A6bi5jcmVhdGVGb3JtLmlzVG9wLGFsbG93X2NvbW1lbnQ6bi5jcmVhdGVGb3JtLmlzQ29tbWVudCxhbGxvd19zaGFyZTpuLmNyZWF0ZUZvcm0uaXNTaGFyZSxhbGxvd19saWtlOm4uY3JlYXRlRm9ybS5pc1ByYWlzZSxhbGxvd19jb2xsZWN0Om4uY3JlYXRlRm9ybS5pc0NvbGxlY3Qsc3RhdGU6bi5jcmVhdGVGb3JtLnN0YXRlfX0sYmUoIm1hbmFnZXIvTGl2ZUJyb2FkY2FzdC91cGRhdGUiLHQpKS50aGVuKGZ1bmN0aW9uKGUpezIwMD09PWUuc3RhdHVzJiYobi4kcm91dGVyLnB1c2goe3BhdGg6Ii9saXZlL2xpc3QifSksbi4kbm90aWZ5KHt0aXRsZToi6YCa55+lIixtZXNzYWdlOiLnvJbovpHmiJDlip8iLHR5cGU6InN1Y2Nlc3MifSkpfSl9KX0sZ290b0xpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUmVmcmVzaD0hMSx0aGlzLiRyb3V0ZXIucHVzaCh7cGF0aDoiL2xpdmUvbGlzdCJ9KX0saGFuZGxlUGNBdmF0YXJTdWNjZXNzOmZ1bmN0aW9uKGUsbil7aWYoZS5zdGF0dXMpe3ZhciB0PWUucmVzdWx0O3RoaXMuY3JlYXRlRm9ybS5pY29uX3VybD10fX0sYmVmb3JlQXZhdGFyVXBsb2FkOmZ1bmN0aW9uKGUpe3ZhciBuPWUudHlwZSBpbnsiaW1hZ2UvanBlZyI6ITAsImltYWdlL3BuZyI6ITAsImltYWdlL2pwZyI6ITB9LHQ9ZS5zaXplLzEwMjQvMTAyNDwyO3JldHVybiBufHx0aGlzLiRtZXNzYWdlLmVycm9yKCLor7fkuIrkvKDlm77niYfmoLzlvI/nmoTmlofku7YhIiksdHx8dGhpcy4kbWVzc2FnZS5lcnJvcigi5LiK5Lyg5Zu+54mH5aSn5bCP5LiN6IO96LaF6L+HIDJNQiEiKSxuJiZ0fX19LGZvPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPWUuJGNyZWF0ZUVsZW1lbnQsdD1lLl9zZWxmLl9jfHxuO3JldHVybiB0KCJkaXYiLHtzdGF0aWNDbGFzczoiY2hhbm5lbCBjcmVhdGUifSxbdCgiY2lyY2xlLXRpdGxlIix7c3RhdGljQ2xhc3M6ImNpY2xlLWNvbnRyb2xsZXIiLGF0dHJzOnsidGl0bGUtbmFtZSI6Iue8lui+keebtOaSrSJ9fSksZS5fdigiICIpLHQoImVsLWZvcm0iLHtyZWY6ImNyZWF0ZUZvcm0iLHN0YXRpY0NsYXNzOiJydWxlLWZvcm0iLGF0dHJzOnttb2RlbDplLmNyZWF0ZUZvcm0scnVsZXM6ZS5ydWxlcywibGFiZWwtd2lkdGgiOiIxMDBweCJ9fSxbdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLnm7Tmkq3kuLvpopgiLHByb3A6ImxpdmVfbmFtZSJ9fSxbdCgiZWwtaW5wdXQiLHttb2RlbDp7dmFsdWU6ZS5jcmVhdGVGb3JtLmxpdmVfbmFtZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jcmVhdGVGb3JtLCJsaXZlX25hbWUiLCJzdHJpbmciPT10eXBlb2Ygbj9uLnRyaW0oKTpuKX0sZXhwcmVzc2lvbjoiY3JlYXRlRm9ybS5saXZlX25hbWUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6Iml0ZW0iLGF0dHJzOntsYWJlbDoi5Zu+5qCH6YWN572uIixwcm9wOiJpY29uX3VybCJ9fSxbdCgiZWwtdXBsb2FkIix7c3RhdGljQ2xhc3M6ImF2YXRhci11cGxvYWRlciIsYXR0cnM6eyJzaG93LWZpbGUtbGlzdCI6ITEsYWN0aW9uOmUuZ2V0VXBsb2FkVXJsLGhlYWRlcnM6ZS51cGxvYWRIZWFkZXJzLCJvbi1zdWNjZXNzIjplLmhhbmRsZVBjQXZhdGFyU3VjY2VzcywiYmVmb3JlLXVwbG9hZCI6ZS5iZWZvcmVBdmF0YXJVcGxvYWR9fSxbZS5jcmVhdGVGb3JtLmljb25fdXJsP3QoImltZyIse3N0YXRpY0NsYXNzOiJhdmF0YXIiLGF0dHJzOntzcmM6ZS5jcmVhdGVGb3JtLmljb25fdXJsfX0pOnQoImkiLHtzdGF0aWNDbGFzczoiZWwtaWNvbi1wbHVzIGF2YXRhci11cGxvYWRlci1pY29uIn0pXSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuebtOaSreWRqOacnyIscHJvcDoiY2hhbm5lbF9uYW1lIn19LFt0KCJlbC1kYXRlLXBpY2tlciIse3N0YXRpY1N0eWxlOnt3aWR0aDoiMTAwJSJ9LGF0dHJzOntjbGVhcmFibGU6ITEsdHlwZToiZGF0ZXRpbWVyYW5nZSIsZm9ybWF0OiJ5eXl5LU1NLWRkIEhIOm1tIiwicmFuZ2Utc2VwYXJhdG9yIjoi6IezIiwic3RhcnQtcGxhY2Vob2xkZXIiOiLlvIDlp4vml6XmnJ8iLCJlbmQtcGxhY2Vob2xkZXIiOiLnu5PmnZ/ml6XmnJ8ifSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGb3JtLmxpdmVSYW5nZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jcmVhdGVGb3JtLCJsaXZlUmFuZ2UiLG4pfSxleHByZXNzaW9uOiJjcmVhdGVGb3JtLmxpdmVSYW5nZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuWGheWuuemTvuaOpSIscHJvcDoidXJsIn19LFt0KCJlbC1pbnB1dCIse21vZGVsOnt2YWx1ZTplLmNyZWF0ZUZvcm0udXJsLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZvcm0sInVybCIsbil9LGV4cHJlc3Npb246ImNyZWF0ZUZvcm0udXJsIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5piv5ZCm572u6aG2Iixwcm9wOiJmaXhlZCJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiLor7fpgInmi6kifSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGb3JtLmlzVG9wLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZvcm0sImlzVG9wIixuKX0sZXhwcmVzc2lvbjoiY3JlYXRlRm9ybS5pc1RvcCJ9fSxbdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOiEwLGxhYmVsOiLmmK8ifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6ITEsbGFiZWw6IuWQpiJ9fSldLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLmnYPpmZDphY3nva4ifX0sW3QoImVsLWNoZWNrYm94Iix7YXR0cnM6e2xhYmVsOiLor4TorroifSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGb3JtLmlzQ29tbWVudCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jcmVhdGVGb3JtLCJpc0NvbW1lbnQiLG4pfSxleHByZXNzaW9uOiJjcmVhdGVGb3JtLmlzQ29tbWVudCJ9fSksZS5fdigiICIpLHQoImVsLWNoZWNrYm94Iix7YXR0cnM6e2xhYmVsOiLliIbkuqsiLG5hbWU6ImF1dGgifSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGb3JtLmlzU2hhcmUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuY3JlYXRlRm9ybSwiaXNTaGFyZSIsbil9LGV4cHJlc3Npb246ImNyZWF0ZUZvcm0uaXNTaGFyZSJ9fSksZS5fdigiICIpLHQoImVsLWNoZWNrYm94Iix7YXR0cnM6e2xhYmVsOiLmlLbol48iLG5hbWU6ImF1dGgifSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGb3JtLmlzQ29sbGVjdCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jcmVhdGVGb3JtLCJpc0NvbGxlY3QiLG4pfSxleHByZXNzaW9uOiJjcmVhdGVGb3JtLmlzQ29sbGVjdCJ9fSksZS5fdigiICIpLHQoImVsLWNoZWNrYm94Iix7YXR0cnM6e2xhYmVsOiLngrnotZ4iLG5hbWU6ImF1dGgifSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGb3JtLmlzUHJhaXNlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZvcm0sImlzUHJhaXNlIixuKX0sZXhwcmVzc2lvbjoiY3JlYXRlRm9ybS5pc1ByYWlzZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuaYr+WQpuS4iueovyJ9fSxbdCgiZWwtcmFkaW8tZ3JvdXAiLHttb2RlbDp7dmFsdWU6ZS5jcmVhdGVGb3JtLnN0YXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZvcm0sInN0YXRlIixuKX0sZXhwcmVzc2lvbjoiY3JlYXRlRm9ybS5zdGF0ZSJ9fSxbdCgiZWwtcmFkaW8iLHthdHRyczp7bGFiZWw6MX19LFtlLl92KCJcbiAgICAgICAgICDmmK9cbiAgICAgICAgIildKSxlLl92KCIgIiksdCgiZWwtcmFkaW8iLHthdHRyczp7bGFiZWw6MH19LFtlLl92KCJcbiAgICAgICAgICDlkKZcbiAgICAgICAgIildKV0sMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLFt0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToicHJpbWFyeSJ9LG9uOntjbGljazpmdW5jdGlvbihuKXtlLnN1Ym1pdEZvcm0oImNyZWF0ZUZvcm0iKX19fSxbZS5fdigi5o+Q5LqkIildKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7b246e2NsaWNrOmUuZ290b0xpc3R9fSxbZS5fdigi5Y+W5raIIildKV0sMSldLDEpXSwxKX07Zm8uX3dpdGhTdHJpcHBlZD0hMDt2YXIgYm89e3JlbmRlcjpmbyxzdGF0aWNSZW5kZXJGbnM6W119LHZvPWJvO3ZhciB5bz0hMTt2YXIgQ289dCgiVlUvOCIpKEFvLHZvLCExLGZ1bmN0aW9uKGUpe3lvfHx0KCJDREoyIil9LCJkYXRhLXYtMjU0YmNjZDgiLG51bGwpO0NvLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9tYW5hZ2VMaXZlL2xpdmVFZGl0LnZ1ZSI7dmFyIF9vPUNvLmV4cG9ydHM7ZnVuY3Rpb24geG8oZSl7cmV0dXJuIGJlKCJtYW5hZ2VyL0FjdGl2aXR5L3R5cGVMaXN0IixlKX12YXIgd289e25hbWU6IkN1c3RvbUV2ZW50IixkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2N1c3RvbUV2ZW50TmFtZToiIixjdXN0b21FcnJvck1lc3NhZ2U6IiJ9fSxtZXRob2RzOntzdWJtaXRFdmVudDpmdW5jdGlvbigpe3ZhciBlLG49dGhpcztpZigiIj09PXRoaXMuY3VzdG9tRXZlbnROYW1lKXJldHVybiB0aGlzLmN1c3RvbUVycm9yTWVzc2FnZT0i5rOo5oSP77ya5ZCN56ew5LiN6IO95Li656m6IiwhMTsoZT17dHlwZTp7dHlwZV9uYW1lOnRoaXMuY3VzdG9tRXZlbnROYW1lfX0sYmUoIm1hbmFnZXIvQWN0aXZpdHkvYWRkVHlwZSIsZSkpLnRoZW4oZnVuY3Rpb24oZSl7ZS5zdGF0dXMmJihuLiRub3RpZnkoe3RpdGxlOiLpgJrnn6UiLG1lc3NhZ2U6Iua3u+WKoOaIkOWKnyIsdHlwZToic3VjY2VzcyJ9KSxuLiRlbWl0KCJzdWJtaXQtY3VzdG9tLWV2ZW50IixuLmN1c3RvbUV2ZW50TmFtZSkpfSl9LGNhbmNlbEN1c3RvbUV2ZW50OmZ1bmN0aW9uKCl7dGhpcy4kZW1pdCgiY2FuY2VsLWN1c3RvbS1ldmVudCIpfX19LEZvPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPWUuJGNyZWF0ZUVsZW1lbnQsdD1lLl9zZWxmLl9jfHxuO3JldHVybiB0KCJkaXYiLFt0KCJlbC1pbnB1dCIse2F0dHJzOntwbGFjZWhvbGRlcjoi6K+36L6T5YWl5pyN5Yqh57G75Z6L5ZCN56ewIn0sbW9kZWw6e3ZhbHVlOmUuY3VzdG9tRXZlbnROYW1lLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuY3VzdG9tRXZlbnROYW1lPW59LGV4cHJlc3Npb246ImN1c3RvbUV2ZW50TmFtZSJ9fSksZS5fdigiICIpLGUuY3VzdG9tRXJyb3JNZXNzYWdlP3QoImRpdiIse3N0YXRpY1N0eWxlOntjb2xvcjoicmVkIiwibWFyZ2luLXRvcCI6IjVweCJ9fSxbZS5fdihlLl9zKGUuY3VzdG9tRXJyb3JNZXNzYWdlKSldKTplLl9lKCksZS5fdigiICIpLHQoInNwYW4iLHtzdGF0aWNDbGFzczoiY3VzdG9tLWV2ZW50LWZvb3RlciJ9LFt0KCJlbC1idXR0b24iLHtvbjp7Y2xpY2s6ZS5jYW5jZWxDdXN0b21FdmVudH19LFtlLl92KCLlj5Yg5raIIildKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InByaW1hcnkifSxvbjp7Y2xpY2s6ZS5zdWJtaXRFdmVudH19LFtlLl92KCLnoa4g5a6aIildKV0sMSldLDEpfTtGby5fd2l0aFN0cmlwcGVkPSEwO3ZhciBrbz17cmVuZGVyOkZvLHN0YXRpY1JlbmRlckZuczpbXX0sU289a287dmFyIEVvPSExO3ZhciBEbz10KCJWVS84Iikod28sU28sITEsZnVuY3Rpb24oZSl7RW98fHQoIk91TjMiKX0sImRhdGEtdi0zYzQ1YmQyMiIsbnVsbCk7RG8ub3B0aW9ucy5fX2ZpbGU9InNyYy9jb21wb25lbnRzL21hbmFnZUV2ZW50L2N1c3RvbUV2ZW50LnZ1ZSI7dmFyIExvPURvLmV4cG9ydHMsQm89e2NvbXBvbmVudHM6e0N1c3RvbUV2ZW50OkxvfSxtaXhpbnM6W3hhXSxwcm9wczp7c2V0dGluZ0FjdGl2aXR5SWQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6IjAifX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntlZGl0RnJvbTp7YWN0aXZpdHlfbmFtZToiIixzb3J0OjAsaGVhZF9pbWc6IiIsYXBwX3VybDoiIixtYW5hZ2VyX3VybDoiIix0eXBlX25hbWU6IiIsc3RhdGU6IiIsZGVzY3JpcHRpb246IiIsZml4ZWQ6IiIsdHlwZWlkOiIiLGxpdmVSYW5nZTpbXSxuZWVkX2xvZ2luOiEwfSxydWxlczp7YWN0aXZpdHlfbmFtZTpbe3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+i+k+WFpemikemBk+WQjeensCIsdHJpZ2dlcjoiYmx1ciJ9LHt2YWxpZGF0b3I6ZnVuY3Rpb24oZSxuLHQpe3JldHVybiBuLmxlbmd0aD4xMD90KG5ldyBFcnJvcigi6aKR6YGT5ZCN56ew6ZW/5bqm5LiN6IO96LaF6L+HMTAiKSk6dCgpfSx0cmlnZ2VyOiJjaGFuZ2UifV0sc29ydDpbe3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+i+k+WFpeaOkuW6jyIsdHJpZ2dlcjoiYmx1ciJ9LHt0eXBlOiJudW1iZXIiLG1lc3NhZ2U6IuaOkuW6j+W/hemhu+S4uuaVsOWtlyJ9XSxoZWFkX2ltZzpbe3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+S4iuS8oOWbvueJhyIsdHJpZ2dlcjoiYmx1ciJ9XSxhcHBfdXJsOlt7dmFsaWRhdG9yOmZ1bmN0aW9uKGUsbix0KXtpZighL14oKGh0fGYpdHBzPyk6XC9cLyhbXHdcLV0rKFwuW1x3XC1dKykqXC8pKltcd1wtXSsoXC5bXHdcLV0rKSpcLz8oXD8oW1x3XC1cLixAP149JSY6XC9+XCsjXSopKyk/Ly50ZXN0KG4pKXJldHVybiB0KG5ldyBFcnJvcigi6K+36L6T5YWl5q2j56Gu55qE5Zyw5Z2AIikpO3QoKX0sdHJpZ2dlcjoiYmx1ciJ9XX0sZXZlbnRUeXBlTGlzdDpbXSxpc1JlZnJlc2g6ITAsY3VzdG9tVHlwZUlkOiIwOTk5IixkaWFsb2dWaXNpYmxlOiExLGNvbXBvbmVudE5hbWU6IiJ9fSxjb21wdXRlZDp7Z2V0VXBsb2FkVXJsOmZ1bmN0aW9uKCl7cmV0dXJuIF9lKCl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dGhpcy5nZXRFZGl0SW5mbygpLHRoaXMuZ2V0QWN0aXZpdHlUeXBlKCl9LGJlZm9yZVJvdXRlTGVhdmU6ZnVuY3Rpb24oZSxuLHQpeyIvc3ViQ2hhbm5lbC9saXN0Ij09PWUucGF0aD9lLm1ldGEucmVmcmVzaD10aGlzLmlzUmVmcmVzaDoiL3N1YkNoYW5uZWwvY3JlYXRlIj09PWUucGF0aCYmdGhpcy4kcm9vdC5ldmVudEh1Yi4kZW1pdCgicmVzZXQtb3B0aW9ucyIpLHQoKX0sbWV0aG9kczp7Y2FuY2VsOmZ1bmN0aW9uKCl7dGhpcy4kZW1pdCgiY2xvc2VEaWFsb2ciKX0sZ2V0RWRpdEluZm86ZnVuY3Rpb24oKXt2YXIgZSxuPXRoaXM7KGU9e2FjdGl2aXR5OnthY3Rpdml0eWlkOnRoaXMuc2V0dGluZ0FjdGl2aXR5SWR9fSxiZSgibWFuYWdlci9BY3Rpdml0eS9nZXRBY3Rpdml0eSIsZSkpLnRoZW4oZnVuY3Rpb24oZSl7aWYoZS5kYXRhLnN0YXR1cyl7dmFyIHQ9ZS5kYXRhLnJlc3VsdDtuLmVkaXRGcm9tLmxpdmVSYW5nZT1bXSxuLmVkaXRGcm9tLmFjdGl2aXR5X25hbWU9dC5hY3Rpdml0eV9uYW1lLG4uZWRpdEZyb20uc29ydD10LnNvcnQsbi5lZGl0RnJvbS5oZWFkX2ltZz10LmhlYWRfaW1nLG4uZWRpdEZyb20uYXBwX3VybD10LmFwcF91cmwsbi5lZGl0RnJvbS5tYW5hZ2VyX3VybD10Lm1hbmFnZXJfdXJsLG4uZWRpdEZyb20udHlwZV9uYW1lPXQudHlwZV9uYW1lLG4uZWRpdEZyb20uc3RhdGU9dC5zdGF0ZSxuLmVkaXRGcm9tLnR5cGVpZD10LnR5cGVpZCxuLmVkaXRGcm9tLm5lZWRfbG9naW49dC5uZWVkX2xvZ2luLG4uZWRpdEZyb20ubGl2ZVJhbmdlLnB1c2gobmV3IERhdGUodC5leHBpcnlfZGF0ZV9zdGFydCkpLG4uZWRpdEZyb20ubGl2ZVJhbmdlLnB1c2gobmV3IERhdGUodC5leHBpcnlfZGF0ZV9lbmQpKX19KX0sc3VibWl0Rm9ybTpmdW5jdGlvbihlKXt2YXIgbj10aGlzO3RoaXMuJHJlZnNbZV0udmFsaWRhdGUoZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuIGNvbnNvbGUubG9nKCJlcnJvciBzdWJtaXQhISIpLCExO3ZhciB0O24uZXZlbnRUeXBlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGUsdCxhKXtlLnZhbHVlPT09bi5lZGl0RnJvbS50eXBlaWQmJihuLmVkaXRGcm9tLnR5cGVfbmFtZT1lLmxhYmVsKX0pLCh0PXthY3Rpdml0eTp7YWN0aXZpdHlpZDpuLnNldHRpbmdBY3Rpdml0eUlkLGFjdGl2aXR5X25hbWU6bi5lZGl0RnJvbS5hY3Rpdml0eV9uYW1lLGhlYWRfaW1nOm4uZWRpdEZyb20uaGVhZF9pbWcsYXBwX3VybDpuLmVkaXRGcm9tLmFwcF91cmwsbWFuYWdlcl91cmw6bi5lZGl0RnJvbS5tYW5hZ2VyX3VybCx0eXBlaWQ6bi5lZGl0RnJvbS50eXBlaWQsdHlwZV9uYW1lOm4uZWRpdEZyb20udHlwZV9uYW1lLHN0YXRlOm4uZWRpdEZyb20uc3RhdGUsZXhwaXJ5X2RhdGVfc3RhcnQ6bi5lZGl0RnJvbS5saXZlUmFuZ2VbMF0uZ2V0VGltZSgpLGV4cGlyeV9kYXRlX2VuZDpuLmVkaXRGcm9tLmxpdmVSYW5nZVsxXS5nZXRUaW1lKCksc29ydDpuLmVkaXRGcm9tLnNvcnQsbmVlZF9sb2dpbjpuLmVkaXRGcm9tLm5lZWRfbG9naW59fSxiZSgibWFuYWdlci9BY3Rpdml0eS91cGRhdGUiLHQpKS50aGVuKGZ1bmN0aW9uKGUpezIwMD09PWUuc3RhdHVzJiYobi4kZW1pdCgiY2xvc2VEaWFsb2ciKSxuLiRub3RpZnkoe3RpdGxlOiLpgJrnn6UiLG1lc3NhZ2U6Iue8lui+keaIkOWKnyIsdHlwZToic3VjY2VzcyJ9KSl9KX0pfSxoYW5kbGVQY0F2YXRhclN1Y2Nlc3M6ZnVuY3Rpb24oZSxuKXtpZihlLnN0YXR1cyl7dmFyIHQ9ZS5yZXN1bHQ7dGhpcy5lZGl0RnJvbS5oZWFkX2ltZz10fX0sYmVmb3JlQXZhdGFyVXBsb2FkOmZ1bmN0aW9uKGUpe3ZhciBuPWUudHlwZSBpbnsiaW1hZ2UvanBlZyI6ITAsImltYWdlL3BuZyI6ITAsImltYWdlL2pwZyI6ITB9LHQ9ZS5zaXplLzEwMjQvMTAyNDwyO3JldHVybiBufHx0aGlzLiRtZXNzYWdlLmVycm9yKCLor7fkuIrkvKDlm77niYfmoLzlvI/nmoTmlofku7YhIiksdHx8dGhpcy4kbWVzc2FnZS5lcnJvcigi5LiK5Lyg5Zu+54mH5aSn5bCP5LiN6IO96LaF6L+HIDJNQiEiKSxuJiZ0fSxnZXRBY3Rpdml0eVR5cGU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuZXZlbnRUeXBlTGlzdD1bXSx4bygpLnRoZW4oZnVuY3Rpb24obil7dmFyIHQ9bi5kYXRhO2lmKHQuc3RhdHVzKXt0LnJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uKG4sdCxhKXtuLnR5cGVfbmFtZT09PWUuZWRpdEZyb20udHlwZWlkJiYoZS5lZGl0RnJvbS50eXBlaWQ9bi50eXBlaWQpO3ZhciBpPXt9O2kubGFiZWw9bi50eXBlX25hbWUsaS52YWx1ZT1uLnR5cGVpZCxlLmV2ZW50VHlwZUxpc3QucHVzaChpKX0pO3ZhciBhPXtsYWJlbDoi6Ieq5a6a5LmJIn07YS52YWx1ZT1lLmN1c3RvbVR5cGVJZCxlLmV2ZW50VHlwZUxpc3QucHVzaChhKX19KX0saGFuZGxlRXZlbnRUeXBlOmZ1bmN0aW9uKGUpe2U9PT10aGlzLmN1c3RvbVR5cGVJZCYmdGhpcy5oYW5kbGVDdXN0b21DbGljaygpfSxoYW5kbGVDdXN0b21DbGljazpmdW5jdGlvbigpe3RoaXMuZGlhbG9nVmlzaWJsZT0hMCx0aGlzLmNvbXBvbmVudE5hbWU9IkN1c3RvbUV2ZW50In0sY2xvc2VEaWFsb2c6ZnVuY3Rpb24oKXt0aGlzLmRpYWxvZ1Zpc2libGU9ITEsdGhpcy5jb21wb25lbnROYW1lPSIifSxzdWJtaXRDdXN0b21FdmVudDpmdW5jdGlvbihlKXt0aGlzLmNsb3NlRGlhbG9nKCksdGhpcy5nZXRBY3Rpdml0eVR5cGUoKSx0aGlzLmVkaXRGcm9tLnR5cGVpZD1lfSxjYW5jZWxDdXN0b21FdmVudDpmdW5jdGlvbigpe3RoaXMuY2xvc2VEaWFsb2coKX19fSxNbz1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1lLiRjcmVhdGVFbGVtZW50LHQ9ZS5fc2VsZi5fY3x8bjtyZXR1cm4gdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImV2ZW50LWVkaXQifSxbdCgiZWwtZm9ybSIse3JlZjoiZWRpdEZyb20iLHN0YXRpY0NsYXNzOiJydWxlLWZvcm0iLGF0dHJzOnttb2RlbDplLmVkaXRGcm9tLHJ1bGVzOmUucnVsZXMsImxhYmVsLXdpZHRoIjoiMTAwcHgifX0sW3QoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5rS75Yqo5ZCN56ewIixwcm9wOiJhY3Rpdml0eV9uYW1lIn19LFt0KCJlbC1pbnB1dCIse21vZGVsOnt2YWx1ZTplLmVkaXRGcm9tLmFjdGl2aXR5X25hbWUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZWRpdEZyb20sImFjdGl2aXR5X25hbWUiLCJzdHJpbmciPT10eXBlb2Ygbj9uLnRyaW0oKTpuKX0sZXhwcmVzc2lvbjoiZWRpdEZyb20uYWN0aXZpdHlfbmFtZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuW9kuWxnuexu+WIqyIscHJvcDoidHlwZV9uYW1lIn19LFt0KCJlbC1zZWxlY3QiLHthdHRyczp7ZmlsdGVyYWJsZToiIixwbGFjZWhvbGRlcjoiIixjbGVhcmFibGU6IiJ9LG9uOntjaGFuZ2U6ZnVuY3Rpb24obil7ZS5oYW5kbGVFdmVudFR5cGUoZS5lZGl0RnJvbS50eXBlaWQpfX0sbW9kZWw6e3ZhbHVlOmUuZWRpdEZyb20udHlwZWlkLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmVkaXRGcm9tLCJ0eXBlaWQiLG4pfSxleHByZXNzaW9uOiJlZGl0RnJvbS50eXBlaWQifX0sZS5fbChlLmV2ZW50VHlwZUxpc3QsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtb3B0aW9uIix7a2V5Om4sYXR0cnM6e3ZhbHVlOmUudmFsdWUsbGFiZWw6ZS5sYWJlbH19KX0pLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6Iml0ZW0iLGF0dHJzOntsYWJlbDoi5Zu+5qCH6YWN572uIixwcm9wOiJoZWFkX2ltZyJ9fSxbdCgiZWwtdXBsb2FkIix7c3RhdGljQ2xhc3M6ImF2YXRhci11cGxvYWRlciIsYXR0cnM6eyJzaG93LWZpbGUtbGlzdCI6ITEsYWN0aW9uOmUuZ2V0VXBsb2FkVXJsLGhlYWRlcnM6ZS51cGxvYWRIZWFkZXJzLCJvbi1zdWNjZXNzIjplLmhhbmRsZVBjQXZhdGFyU3VjY2VzcywiYmVmb3JlLXVwbG9hZCI6ZS5iZWZvcmVBdmF0YXJVcGxvYWR9fSxbZS5lZGl0RnJvbS5oZWFkX2ltZz90KCJpbWciLHtzdGF0aWNDbGFzczoiYXZhdGFyIixhdHRyczp7c3JjOmUuZWRpdEZyb20uaGVhZF9pbWd9fSk6dCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXBsdXMgYXZhdGFyLXVwbG9hZGVyLWljb24ifSldKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5YmN56uv6ZO+5o6lIixwcm9wOiJhcHBfdXJsIn19LFt0KCJlbC1pbnB1dCIse21vZGVsOnt2YWx1ZTplLmVkaXRGcm9tLmFwcF91cmwsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZWRpdEZyb20sImFwcF91cmwiLCJzdHJpbmciPT10eXBlb2Ygbj9uLnRyaW0oKTpuKX0sZXhwcmVzc2lvbjoiZWRpdEZyb20uYXBwX3VybCJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuWQjuerr+mTvuaOpSIscHJvcDoibWFuYWdlcl91cmwifX0sW3QoImVsLWlucHV0Iix7bW9kZWw6e3ZhbHVlOmUuZWRpdEZyb20ubWFuYWdlcl91cmwsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZWRpdEZyb20sIm1hbmFnZXJfdXJsIiwic3RyaW5nIj09dHlwZW9mIG4/bi50cmltKCk6bil9LGV4cHJlc3Npb246ImVkaXRGcm9tLm1hbmFnZXJfdXJsIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi54q25oCB6YCJ5oupIixwcm9wOiJzdGF0ZSJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiLor7fpgInmi6kifSxtb2RlbDp7dmFsdWU6ZS5lZGl0RnJvbS5zdGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5lZGl0RnJvbSwic3RhdGUiLG4pfSxleHByZXNzaW9uOiJlZGl0RnJvbS5zdGF0ZSJ9fSxbdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjEsbGFiZWw6IuWQr+eUqCJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZTowLGxhYmVsOiLlgZznlKgifX0pXSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5pyJ5pWI5pyfIn19LFt0KCJlbC1kYXRlLXBpY2tlciIse3N0YXRpY1N0eWxlOnt3aWR0aDoiMTAwJSJ9LGF0dHJzOntjbGVhcmFibGU6ITEsdHlwZToiZGF0ZXRpbWVyYW5nZSIsZm9ybWF0OiJ5eXl5LU1NLWRkIEhIOm1tIiwicmFuZ2Utc2VwYXJhdG9yIjoi6IezIiwic3RhcnQtcGxhY2Vob2xkZXIiOiLlvIDlp4vml6XmnJ8iLCJlbmQtcGxhY2Vob2xkZXIiOiLnu5PmnZ/ml6XmnJ8ifSxtb2RlbDp7dmFsdWU6ZS5lZGl0RnJvbS5saXZlUmFuZ2UsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZWRpdEZyb20sImxpdmVSYW5nZSIsbil9LGV4cHJlc3Npb246ImVkaXRGcm9tLmxpdmVSYW5nZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoic29ydCIsYXR0cnM6e2xhYmVsOiLpnIDopoHnmbvlvZUifX0sW3QoImVsLXJhZGlvLWdyb3VwIix7bW9kZWw6e3ZhbHVlOmUuZWRpdEZyb20ubmVlZF9sb2dpbixjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5lZGl0RnJvbSwibmVlZF9sb2dpbiIsbil9LGV4cHJlc3Npb246ImVkaXRGcm9tLm5lZWRfbG9naW4ifX0sW3QoImVsLXJhZGlvIix7YXR0cnM6e2xhYmVsOiEwfX0sW2UuX3YoIuaYryIpXSksZS5fdigiICIpLHQoImVsLXJhZGlvIix7YXR0cnM6e2xhYmVsOiExfX0sW2UuX3YoIuWQpiIpXSldLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6InNvcnQiLGF0dHJzOntsYWJlbDoi5o6S5bqPIixwcm9wOiJzb3J0In19LFt0KCJlbC1pbnB1dCIse3N0YXRpY1N0eWxlOnt3aWR0aDoiNzAlIn0sbW9kZWw6e3ZhbHVlOmUuZWRpdEZyb20uc29ydCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5lZGl0RnJvbSwic29ydCIsZS5fbihuKSl9LGV4cHJlc3Npb246ImVkaXRGcm9tLnNvcnQifX0pLGUuX3YoIiAiKSx0KCJzcGFuIixbZS5fdigi5o+Q56S677ya5pWw5a2X6LaK5bCP6LaK5b6A5YmNIildKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIsW3QoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmZ1bmN0aW9uKG4pe2Uuc3VibWl0Rm9ybSgiZWRpdEZyb20iKX19fSxbZS5fdigi5o+Q5LqkIildKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7b246e2NsaWNrOmUuY2FuY2VsfX0sW2UuX3YoIuWPlua2iCIpXSldLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZGlhbG9nIix7c3RhdGljU3R5bGU6e3BhZGRpbmc6IjIwcHggNTBweCAyMHB4IDUwcHgifSxhdHRyczp7dmlzaWJsZTplLmRpYWxvZ1Zpc2libGUsImFwcGVuZC10by1ib2R5IjoiIix0aXRsZToi6Ieq5a6a5LmJ5pyN5YqhIix3aWR0aDoiNDAlIn0sb246eyJ1cGRhdGU6dmlzaWJsZSI6ZnVuY3Rpb24obil7ZS5kaWFsb2dWaXNpYmxlPW59LGNsb3NlOmUuY2xvc2VEaWFsb2d9fSxbdChlLmNvbXBvbmVudE5hbWUse3RhZzoiZGl2Iixvbjp7InN1Ym1pdC1jdXN0b20tZXZlbnQiOmUuc3VibWl0Q3VzdG9tRXZlbnQsImNhbmNlbC1jdXN0b20tZXZlbnQiOmUuY2FuY2VsQ3VzdG9tRXZlbnR9fSldLDEpXSwxKX07TW8uX3dpdGhTdHJpcHBlZD0hMDt2YXIgSW89e3JlbmRlcjpNbyxzdGF0aWNSZW5kZXJGbnM6W119LFRvPUlvO3ZhciAkbz0hMTt2YXIgem89dCgiVlUvOCIpKEJvLFRvLCExLGZ1bmN0aW9uKGUpeyRvfHx0KCJZOEVzIil9LCJkYXRhLXYtNzg3ZjMxOGEiLG51bGwpO3pvLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9tYW5hZ2VFdmVudC9ldmVudEVkaXQudnVlIjt2YXIgVW89em8uZXhwb3J0cyxObz17Y29tcG9uZW50czp7Q2lyY2xlVGl0bGU6ZW4sRXZlbnRFZGl0OlVvfSxkYXRhOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPXRoaXMuJGNyZWF0ZUVsZW1lbnQ7cmV0dXJue2V2ZW50Rm9ybTp7YWN0aXZpdHlfbmFtZToiIix0eXBlX25hbWU6IiIsc2hvd1N0YXRlOiIiLHNvcnQ6IjEiLGVuZERhdGU6IiIsc3RhcnREYXRlOiIifSxjbGlja0NlbGxJbmRleDotMSxiYXRjaFByb2Nlc3M6MCx0YWJsZUhlYWRlcjpbe3Byb3A6ImFjdGl2aXR5X25hbWUiLGxhYmVsOiLmnI3liqHlkI3np7AifSx7cHJvcDoidHlwZV9uYW1lIixsYWJlbDoi57G75Z6LIn0se3Byb3A6ImhlYWRfaW1nIixsYWJlbDoi5Zu+5qCHIixmb3JtYXR0ZXI6ZnVuY3Rpb24oZSx0LGEsaSl7cmV0dXJuIG4oImltZyIse2NsYXNzOiJ0b3BpYy10YWJsZS1waWMiLGF0dHJzOntzcmM6YX19KX19LHtwcm9wOiJhcHBfdXJsIixsYWJlbDoi5YmN56uv6ZO+5o6lIixmb3JtYXR0ZXI6ZnVuY3Rpb24oZSx0LGEsaSl7cmV0dXJuIG4oImEiLHthdHRyczp7aHJlZjphLHRhcmdldDoiX2JsYW5rIn19LFthXSl9fSx7cHJvcDoibWFuYWdlcl91cmwiLGxhYmVsOiLlkI7nq6/pk77mjqUiLGZvcm1hdHRlcjpmdW5jdGlvbihlLHQsYSxpKXtpZigiIiE9PWEpe3ZhciBsPWErIj90b2tlbj0iK3Nlc3Npb25TdG9yYWdlLmdldEl0ZW0oInRva2VuIikrIiZjb21waWQ9IitzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCJjb21waWQiKSsiJnVzZXJjb2RlPSIrc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgidXNlcmNvZGUiKTtyZXR1cm4gbigiYSIse2F0dHJzOntocmVmOmwsdGFyZ2V0OiJfYmxhbmsifX0sW2xdKX1yZXR1cm4i5pegIn19LHtwcm9wOiJleHBpcnlfZGF0ZV9zdGFydCIsbGFiZWw6IuacieaViOacnyIsd2lkdGg6MjAwLGZvcm1hdHRlcjpmdW5jdGlvbihuLHQsYSxpKXtyZXR1cm4gZS4kb3B0aW9ucy5maWx0ZXJzLkZvcm1hdERhdGUoYSwieXl5eS1NTS1kZCBoaDptbSIpKyLoh7MiK2UuJG9wdGlvbnMuZmlsdGVycy5Gb3JtYXREYXRlKG4uZXhwaXJ5X2RhdGVfZW5kLCJ5eXl5LU1NLWRkIGhoOm1tIil9fSx7cHJvcDoiY3JlYXRldGltZSIsbGFiZWw6IuWIm+W7uuaXpeacnyIsZm9ybWF0dGVyOmZ1bmN0aW9uKG4sdCxhLGkpe3JldHVybiBlLiRvcHRpb25zLmZpbHRlcnMuRm9ybWF0RGF0ZShhLCJ5eXl5LU1NLWRkIGhoOm1tIil9fSx7cHJvcDoidXBkYXRldGltZSIsbGFiZWw6IuabtOaWsOaXpeacnyIsZm9ybWF0dGVyOmZ1bmN0aW9uKG4sdCxhLGkpe3JldHVybiBlLiRvcHRpb25zLmZpbHRlcnMuRm9ybWF0RGF0ZShhLCJ5eXl5LU1NLWRkIGhoOm1tIil9fSx7cHJvcDoic2hvd1N0YXRlIixsYWJlbDoi54q25oCBIn0se3Byb3A6InNvcnQiLGxhYmVsOiLkvJjlhYjnuqciLGZvcm1hdHRlcjpmdW5jdGlvbih0LGEsaSxsKXtyZXR1cm4gbD09PWUuY2xpY2tDZWxsSW5kZXg/bigiaW5wdXQiLHthdHRyczp7dHlwZToidGV4dCIsaWQ6ImlucHV0IixhdXRvZm9jdXM6ImF1dG9mb2N1cyJ9LGNsYXNzOiJzZWxmLXNvcnQiLGRvbVByb3BzOnt2YWx1ZTppfX0pOm4oInNwYW4iLHtjbGFzczoic29ydC1jb250YWluZXIiLGF0dHJzOnsiZGF0YS1pZCI6bH19LFtpXSl9fV0sdGFibGVEYXRhOltdLGV2ZW50VHlwZUxpc3Q6W10sc29ydFZhbHVlOi0xLHBhZ2VObzoxLHBhZ2VTaXplOjEwLHRvdGFsOjAsZGlhbG9nVmlzaWJsZTohMSxzZXR0aW5nQWN0aXZpdHlJZDoiMCIsY29tcG9uZW50TmFtZToiIixzZWxlY3RBY3Rpdml0eUlkOiIifX0sd2F0Y2g6eyJldmVudEZvcm0uYWN0aXZpdHlfbmFtZSI6ZnVuY3Rpb24oZSl7dGhpcy5nZXRBY3Rpdml0eUxpc3QoKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuZ2V0QWN0aXZpdHlMaXN0KCksdGhpcy5nZXRBY3Rpdml0eVR5cGUoKSx0aGlzLiRyb290LmV2ZW50SHViLiRvbigicmVzZXQtb3B0aW9ucyIsZnVuY3Rpb24oKXtlLnJlc2V0TGl2ZU9wdGlvbnMoKX0pfSxhY3RpdmF0ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLiRyb3V0ZS5tZXRhO2UuaGFzT3duUHJvcGVydHkoInJlZnJlc2giKSYmZS5yZWZyZXNoJiYodGhpcy5nZXRBY3Rpdml0eUxpc3QoKSxkZWxldGUgdGhpcy4kcm91dGUubWV0YS5yZWZyZXNoKX0sYmVmb3JlUm91dGVMZWF2ZTpmdW5jdGlvbihlLG4sdCl7Ii9ldmVudC9jcmVhdGUiIT09ZS5wYXRoJiYiL2V2ZW50L2xpc3QiIT09ZS5wYXRofHx0aGlzLnJlc2V0TGl2ZU9wdGlvbnMoKSx0KCl9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLiRyb290LmV2ZW50SHViLiRvZmYoInJlc2V0LW9wdGlvbnMiKX0sbWV0aG9kczp7cmVzZXRMaXZlT3B0aW9uczpmdW5jdGlvbigpe3RoaXMuZXZlbnRGb3JtPXthY3Rpdml0eV9uYW1lOiIiLHR5cGVfbmFtZToiIixoZWFkX2ltZzoiIixhcHBfdXJsOiIiLHR5cGVpZDoiIixzaG93U3RhdGU6IiIsc3RhdGU6IiIsc29ydDoiMSIsZW5kRGF0ZToiIixzdGFydERhdGU6IiJ9LHRoaXMucGFnZU5vPTEsdGhpcy5nZXRBY3Rpdml0eUxpc3QoKX0sZ2V0QWN0aXZpdHlMaXN0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiRvcHRpb25zLmZpbHRlcnMuc3dhcFRpbWUodGhpcy5ldmVudEZvcm0pO3ZhciBuLHQ9bnVsbCE9PXRoaXMuZXZlbnRGb3JtLnN0YXJ0RGF0ZT9uZXcgRGF0ZSh0aGlzLmV2ZW50Rm9ybS5zdGFydERhdGUpLmdldFRpbWUoKTpudWxsLGE9bnVsbCE9PXRoaXMuZXZlbnRGb3JtLmVuZERhdGU/bmV3IERhdGUodGhpcy5ldmVudEZvcm0uZW5kRGF0ZSkuZ2V0VGltZSgpOm51bGw7KG49e3BhZ2VObzp0aGlzLnBhZ2VObyxwYWdlU2l6ZTp0aGlzLnBhZ2VTaXplLGFjdGl2aXR5X25hbWU6dGhpcy5ldmVudEZvcm0uYWN0aXZpdHlfbmFtZSx0eXBlaWQ6dGhpcy5ldmVudEZvcm0udHlwZWlkLHN0YXRlOnRoaXMuZXZlbnRGb3JtLnN0YXRlLHRpbWVTdGFydDp0LHRpbWVFbmQ6YX0sYmUoIm1hbmFnZXIvQWN0aXZpdHkvcGFnZSIsbikpLnRoZW4oZnVuY3Rpb24obil7aWYobi5kYXRhLnN0YXR1cyl7dmFyIHQ9bi5kYXRhLnJlc3VsdDtlLnRhYmxlRGF0YT10Lmxpc3QsZS50b3RhbD10LnRvdGFsfX0pfSxoYW5kbGVTaXplQ2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMucGFnZVNpemU9ZSx0aGlzLmdldEFjdGl2aXR5TGlzdCgpfSxoYW5kbGVDdXJyZW50Q2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMucGFnZU5vPWUsdGhpcy5nZXRBY3Rpdml0eUxpc3QoKX0sdG9nZ2xlQWxsU2VsZWN0aW9uOmZ1bmN0aW9uKGUpe3RoaXMuJHJlZnMuY2hhbm5lbFRhYmxlLnRvZ2dsZUFsbFNlbGVjdGlvbigpfSxjZWxsQ2xpY2s6ZnVuY3Rpb24oZSxuLHQsYSl7dmFyIGk9dGhpcztpZihhLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoInNvcnQtY29udGFpbmVyIikpaWYoMSE9PWUuc3RhdGUpe3ZhciBsPWEudGFyZ2V0LmRhdGFzZXQuaWQ7bCYmKHRoaXMuY2xpY2tDZWxsSW5kZXg9cGFyc2VJbnQobCkpLHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCl7ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiLmVsLXRvb2x0aXAgPiBpbnB1dC5zZWxmLXNvcnQiKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe24mJihpLnNlbGVjdEFjdGl2aXR5SWQ9ZS5hY3Rpdml0eWlkLG4uZm9jdXMoKSxuLm9ua2V5dXA9ZnVuY3Rpb24oZSl7bi52YWx1ZSYmKGkuc29ydFZhbHVlPXBhcnNlSW50KG4udmFsdWUpKX0pfSl9KX1lbHNlIHRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOiLlkK/nlKjnirbmgIHkuIvkuI3og73mjpLluo8hIn0pfSxjbG9zZURpYWxvZzpmdW5jdGlvbigpe3RoaXMuY29tcG9uZW50TmFtZT0iIix0aGlzLmRpYWxvZ1Zpc2libGU9ITEsdGhpcy5nZXRBY3Rpdml0eUxpc3QoKX0sY2VsbE1vdXNlTGVhdmU6ZnVuY3Rpb24oZSxuLHQsYSl7dmFyIGksbD10aGlzO2lmKHRoaXMuY2xpY2tDZWxsSW5kZXg9LTEsLTE9PT10aGlzLnNvcnRWYWx1ZXx8dGhpcy5zZWxlY3RBY3Rpdml0eUlkIT09ZS5hY3Rpdml0eWlkKXJldHVybiExOyhpPXthY3Rpdml0eTp7YWN0aXZpdHlpZDplLmFjdGl2aXR5aWQsc29ydDp0aGlzLnNvcnRWYWx1ZX19LGJlKCJtYW5hZ2VyL0FjdGl2aXR5L3VwZGF0ZVNvcnQiLGkpKS50aGVuKGZ1bmN0aW9uKGUpe2Uuc3RhdHVzJiYobC5nZXRBY3Rpdml0eUxpc3QoKSxsLnNvcnRWYWx1ZT0tMSl9KX0saGFuZGxlRWRpdDpmdW5jdGlvbihlKXsxIT09ZS5zdGF0ZT8odGhpcy5kaWFsb2dWaXNpYmxlPSEwLHRoaXMuY29tcG9uZW50TmFtZT1Vbyx0aGlzLnNldHRpbmdBY3Rpdml0eUlkPWUuYWN0aXZpdHlpZCk6dGhpcy4kbWVzc2FnZSh7dHlwZToiZXJyb3IiLG1lc3NhZ2U6IuWQr+eUqOeKtuaAgeS4i+S4jeWPr+e8lui+kSEifSl9LGNoYW5nZVN0YXRlOmZ1bmN0aW9uKGUpe3ZhciBuLHQ9dGhpcyxhPTA7MT09PWUuc3RhdGU/YT0wOjA9PT1lLnN0YXRlJiYoYT0xKSwobj17YWN0aXZpdHk6e2FjdGl2aXR5aWQ6ZS5hY3Rpdml0eWlkLHN0YXRlOmF9fSxiZSgibWFuYWdlci9BY3Rpdml0eS91cGRhdGVTdGF0ZSIsbikpLnRoZW4oZnVuY3Rpb24oZSl7ZS5zdGF0dXMmJigwPT09YT90LiRtZXNzYWdlKHt0eXBlOiJzdWNjZXNzIixtZXNzYWdlOiLkv67mlLnnirbmgIHkuLrlgZznlKgifSk6dC4kbWVzc2FnZSh7dHlwZToic3VjY2VzcyIsbWVzc2FnZToi5L+u5pS554q25oCB5Li65ZCv55SoIn0pLHQuZ2V0QWN0aXZpdHlMaXN0KCkpfSl9LGhhbmRsZURlbGV0ZTpmdW5jdGlvbihlKXt2YXIgbj10aGlzOzEhPT1lLnN0YXRlP3RoaXMuJGNvbmZpcm0oJ+aYr+WQpuWIoOmZpCInK2UuYWN0aXZpdHlfbmFtZSsnIj8nLCLmj5DnpLoiLHtjb25maXJtQnV0dG9uVGV4dDoi56Gu5a6aIixjYW5jZWxCdXR0b25UZXh0OiLlj5bmtogiLHR5cGU6Indhcm5pbmcifSkudGhlbihmdW5jdGlvbigpe3ZhciB0Oyh0PXthY3Rpdml0eTp7YWN0aXZpdHlpZDplLmFjdGl2aXR5aWR9fSxiZSgibWFuYWdlci9BY3Rpdml0eS9kZWxldGUiLHQpKS50aGVuKGZ1bmN0aW9uKGUpe2UuZGF0YS5zdGF0dXMmJm4uJG1lc3NhZ2Uoe3R5cGU6InN1Y2Nlc3MiLG1lc3NhZ2U6IuWIoOmZpOaIkOWKnyEifSksbi5nZXRBY3Rpdml0eUxpc3QoKX0pfSkuY2F0Y2goZnVuY3Rpb24oKXt9KTp0aGlzLiRtZXNzYWdlKHt0eXBlOiJlcnJvciIsbWVzc2FnZToi5ZCv55So54q25oCB5LiL5LiN5Y+v5Yig6ZmkISJ9KX0sZ2V0QWN0aXZpdHlUeXBlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt4bygpLnRoZW4oZnVuY3Rpb24obil7dmFyIHQ9bi5kYXRhO3Quc3RhdHVzJiZ0LnJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uKG4sdCxhKXt2YXIgaT17fTtpLmxhYmVsPW4udHlwZV9uYW1lLGkudmFsdWU9bi50eXBlaWQsZS5ldmVudFR5cGVMaXN0LnB1c2goaSl9KX0pfX19LFJvPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPWUuJGNyZWF0ZUVsZW1lbnQsdD1lLl9zZWxmLl9jfHxuO3JldHVybiB0KCJkaXYiLHtzdGF0aWNDbGFzczoiZXZlbnQtbGlzdCJ9LFt0KCJkaXYiLFt0KCJjaXJjbGUtdGl0bGUiLHtzdGF0aWNDbGFzczoiY2ljbGUtY29udHJvbGxlciIsYXR0cnM6eyJ0aXRsZS1uYW1lIjoi5pyN5Yqh5YiX6KGoIn19KSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InNlYXJjaC1mb3JtLWNvbnRhaW5lciJ9LFt0KCJlbC1mb3JtIix7c3RhdGljQ2xhc3M6ImRlbW8tZm9ybS1pbmxpbmUiLGF0dHJzOntpbmxpbmU6ITAsbW9kZWw6ZS5ldmVudEZvcm19fSxbdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLmnI3liqHlkI3np7AifX0sW3QoImVsLWlucHV0Iix7YXR0cnM6e2NsZWFyYWJsZToiIn0sbW9kZWw6e3ZhbHVlOmUuZXZlbnRGb3JtLmFjdGl2aXR5X25hbWUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZXZlbnRGb3JtLCJhY3Rpdml0eV9uYW1lIixuKX0sZXhwcmVzc2lvbjoiZXZlbnRGb3JtLmFjdGl2aXR5X25hbWUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6InNlYXJjaC1sZWZ0IixhdHRyczp7bGFiZWw6Iuexu+WeiyJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e2NsZWFyYWJsZToiIixwbGFjZWhvbGRlcjoiIn0sb246e2NsZWFyOmUuZ2V0QWN0aXZpdHlMaXN0LGNoYW5nZTplLmdldEFjdGl2aXR5TGlzdH0sbW9kZWw6e3ZhbHVlOmUuZXZlbnRGb3JtLnR5cGVpZCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5ldmVudEZvcm0sInR5cGVpZCIsbil9LGV4cHJlc3Npb246ImV2ZW50Rm9ybS50eXBlaWQifX0sZS5fbChlLmV2ZW50VHlwZUxpc3QsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtb3B0aW9uIix7a2V5Om4sYXR0cnM6e3ZhbHVlOmUudmFsdWUsbGFiZWw6ZS5sYWJlbH19KX0pLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6InNlYXJjaC1sZWZ0IixhdHRyczp7bGFiZWw6IueKtuaAgSJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiIifSxvbjp7Y2hhbmdlOmUuZ2V0QWN0aXZpdHlMaXN0fSxtb2RlbDp7dmFsdWU6ZS5ldmVudEZvcm0uc3RhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZXZlbnRGb3JtLCJzdGF0ZSIsbil9LGV4cHJlc3Npb246ImV2ZW50Rm9ybS5zdGF0ZSJ9fSxbdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOiIiLGxhYmVsOiLlhajpg6gifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MSxsYWJlbDoi5pyq5byA5aeLIn19KSxlLl92KCIgIiksdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjIsbGFiZWw6Iui/m+ihjOS4rSJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZTozLGxhYmVsOiLlt7Lnu5PmnZ8ifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MCxsYWJlbDoi5YGc55SoIn19KV0sMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuW8gOWni+aXtumXtCJ9fSxbdCgiZWwtZGF0ZS1waWNrZXIiLHthdHRyczp7dGl0bGU6ZS5fZigiRm9ybWF0RGF0ZSIpKGUuZXZlbnRGb3JtLnN0YXJ0RGF0ZSwieXl5eS1NTS1kZCBoaDptbSIpLHR5cGU6ImRhdGV0aW1lIixmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLHBsYWNlaG9sZGVyOiLpgInmi6nml6XmnJ8ifSxvbjp7Y2hhbmdlOmUuZ2V0QWN0aXZpdHlMaXN0fSxtb2RlbDp7dmFsdWU6ZS5ldmVudEZvcm0uc3RhcnREYXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmV2ZW50Rm9ybSwic3RhcnREYXRlIixuKX0sZXhwcmVzc2lvbjoiZXZlbnRGb3JtLnN0YXJ0RGF0ZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNTdHlsZTp7Im1hcmdpbi1sZWZ0IjoiLTI4cHgifSxhdHRyczp7bGFiZWw6Iue7k+adn+aXtumXtCJ9fSxbdCgiZWwtZGF0ZS1waWNrZXIiLHthdHRyczp7dGl0bGU6ZS5fZigiRm9ybWF0RGF0ZSIpKGUuZXZlbnRGb3JtLmVuZERhdGUsInl5eXktTU0tZGQgaGg6bW0iKSxmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLHR5cGU6ImRhdGV0aW1lIixwbGFjZWhvbGRlcjoi6YCJ5oup5pel5pyfIn0sb246e2NoYW5nZTplLmdldEFjdGl2aXR5TGlzdH0sbW9kZWw6e3ZhbHVlOmUuZXZlbnRGb3JtLmVuZERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZXZlbnRGb3JtLCJlbmREYXRlIixuKX0sZXhwcmVzc2lvbjoiZXZlbnRGb3JtLmVuZERhdGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7c3RhdGljU3R5bGU6eyJtYXJnaW4tbGVmdCI6IjY4cHgifSxhdHRyczp7dHlwZToicHJpbWFyeSJ9LG9uOntjbGljazplLmdldEFjdGl2aXR5TGlzdH19LFtlLl92KCJcbiAgICAgICAgICDmn6Xor6JcbiAgICAgICAgICAiKSx0KCJpIix7c3RhdGljQ2xhc3M6ImVsLWljb24tc2VhcmNoIGVsLWljb24tLXJpZ2h0In0pXSksZS5fdigiICIpLHQoInJvdXRlci1saW5rIix7YXR0cnM6e3RvOiIvZXZlbnQvY3JlYXRlIn19LFt0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToicHJpbWFyeSJ9fSxbZS5fdigiXG4gICAgICAgICAgICDmnI3liqHmlrDlop5cbiAgICAgICAgICAgICIpLHQoImkiLHtzdGF0aWNDbGFzczoiZWwtaWNvbi1wbHVzIGVsLWljb24tLXJpZ2h0In0pXSldLDEpXSwxKV0sMSldLDEpLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoidGFibGUtbGlzdCJ9LFt0KCJlbC10YWJsZSIse3JlZjoiY2hhbm5lbFRhYmxlIixzdGF0aWNDbGFzczoid2hvbGUtdGFibGUiLGF0dHJzOntkYXRhOmUudGFibGVEYXRhLHN0cmlwZToiIiwibWluLWhlaWdodCI6IjQwMCJ9LG9uOnsiY2VsbC1jbGljayI6ZS5jZWxsQ2xpY2ssImNlbGwtbW91c2UtbGVhdmUiOmUuY2VsbE1vdXNlTGVhdmV9fSxbZS5fbChlLnRhYmxlSGVhZGVyLGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQoImVsLXRhYmxlLWNvbHVtbiIse2tleTpuLGF0dHJzOntwcm9wOmUucHJvcCxsYWJlbDplLmxhYmVsLHdpZHRoOmUud2lkdGgsZm9ybWF0dGVyOmUuZm9ybWF0dGVyLGFsaWduOiJjZW50ZXIiLGZpeGVkOiIiLCJzaG93LW92ZXJmbG93LXRvb2x0aXAiOiIifX0pfSksZS5fdigiICIpLHQoImVsLXRhYmxlLWNvbHVtbiIse2F0dHJzOntmaXhlZDoicmlnaHQiLGxhYmVsOiLmk43kvZwiLGFsaWduOiJjZW50ZXIiLHdpZHRoOiIxMDAifSxzY29wZWRTbG90czplLl91KFt7a2V5OiJkZWZhdWx0IixmbjpmdW5jdGlvbihuKXtyZXR1cm5bdCgiZWwtdG9vbHRpcCIse3N0YXRpY0NsYXNzOiJpdGVtIixhdHRyczp7ZWZmZWN0OiJkYXJrIixjb250ZW50OiLkv67mlLnnirbmgIEiLHBsYWNlbWVudDoidG9wIn19LFt0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToidGV4dCIsc2l6ZToic21hbGwiLGljb246ImVsLWljb24tcmVtb3ZlLW91dGxpbmUifSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5jaGFuZ2VTdGF0ZShuLnJvdyl9fX0pXSwxKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InRleHQiLHNpemU6InNtYWxsIixpY29uOiJlbC1pY29uLWVkaXQifSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVFZGl0KG4ucm93KX19fSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJ0ZXh0IixzaXplOiJzbWFsbCIsaWNvbjoiZWwtaWNvbi1kZWxldGUifSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5oYW5kbGVEZWxldGUobi5yb3cpfX19KV19fV0pfSldLDIpLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoicGFnaW5hdGlvbiJ9LFt0KCJlbC1wYWdpbmF0aW9uIix7YXR0cnM6e3RvdGFsOmUudG90YWwsInBhZ2Utc2l6ZXMiOlsxMCwyMCwzMCw0MF0sImN1cnJlbnQtcGFnZSI6ZS5wYWdlTm8sYmFja2dyb3VuZDoiIixsYXlvdXQ6InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQifSxvbjp7InNpemUtY2hhbmdlIjplLmhhbmRsZVNpemVDaGFuZ2UsImN1cnJlbnQtY2hhbmdlIjplLmhhbmRsZUN1cnJlbnRDaGFuZ2V9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1kaWFsb2ciLHthdHRyczp7dmlzaWJsZTplLmRpYWxvZ1Zpc2libGUsImN1c3RvbS1jbGFzcyI6ImN1c3RvbS1kaWFsb2ciLHRpdGxlOiLmnI3liqHnvJbovpEiLHdpZHRoOiI3MCUifSxvbjp7InVwZGF0ZTp2aXNpYmxlIjpmdW5jdGlvbihuKXtlLmRpYWxvZ1Zpc2libGU9bn0sY2xvc2U6ZS5jbG9zZURpYWxvZ319LFt0KGUuY29tcG9uZW50TmFtZSx7dGFnOiJkaXYiLGF0dHJzOnsic2V0dGluZy1hY3Rpdml0eS1pZCI6ZS5zZXR0aW5nQWN0aXZpdHlJZH0sb246e2Nsb3NlRGlhbG9nOmUuY2xvc2VEaWFsb2d9fSldLDEpXSwxKV0pfTtSby5fd2l0aFN0cmlwcGVkPSEwO3ZhciBWbz17cmVuZGVyOlJvLHN0YXRpY1JlbmRlckZuczpbXX0sam89Vm87dmFyIFBvPSExO3ZhciBIbz10KCJWVS84IikoTm8sam8sITEsZnVuY3Rpb24oZSl7UG98fHQoIm5LMCsiKX0sbnVsbCxudWxsKTtIby5vcHRpb25zLl9fZmlsZT0ic3JjL2NvbXBvbmVudHMvbWFuYWdlRXZlbnQvZXZlbnRMaXN0LnZ1ZSI7dmFyIFFvPUhvLmV4cG9ydHMsV289e2NvbXBvbmVudHM6e0NpcmNsZVRpdGxlOmVuLEN1c3RvbUV2ZW50OkxvfSxtaXhpbnM6W3hhXSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2NyZWF0ZUZyb206e2FjdGl2aXR5X25hbWU6IiIsc29ydDoiIixoZWFkX2ltZzoiIix1cmw6IiIsYXBwX3VybDoiIixtYW5hZ2VyX3VybDoiIix0eXBlX25hbWU6IiIsc3RhdGU6MCx0eXBlaWQ6IiIsbGl2ZVJhbmdlOltuZXcgRGF0ZSxuZXcgRGF0ZV0sbmVlZF9sb2dpbjohMH0scnVsZXM6e2FjdGl2aXR5X25hbWU6W3tyZXF1aXJlZDohMCxtZXNzYWdlOiLor7fovpPlhaXmnI3liqHlkI3np7AiLHRyaWdnZXI6ImJsdXIifV0sc29ydDpbe3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+i+k+WFpeaOkuW6jyIsdHJpZ2dlcjoiYmx1ciJ9LHt0eXBlOiJudW1iZXIiLG1lc3NhZ2U6IuaOkuW6j+W/hemhu+S4uuaVsOWtlyJ9XSxoZWFkX2ltZzpbe3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+S4iuS8oOWbvueJhyIsdHJpZ2dlcjoiYmx1ciJ9XSxhcHBfdXJsOlt7dmFsaWRhdG9yOmZ1bmN0aW9uKGUsbix0KXtpZighL14oKGh0fGYpdHBzPyk6XC9cLyhbXHdcLV0rKFwuW1x3XC1dKykqXC8pKltcd1wtXSsoXC5bXHdcLV0rKSpcLz8oXD8oW1x3XC1cLixAP149JSY6XC9+XCsjXSopKyk/Ly50ZXN0KG4pKXJldHVybiB0KG5ldyBFcnJvcigi6K+36L6T5YWl5q2j56Gu55qE5Zyw5Z2AIikpO3QoKX0sdHJpZ2dlcjoiYmx1ciJ9XX0sZXZlbnRUeXBlTGlzdDpbXSxkaWFsb2dWaXNpYmxlOiExLGNvbXBvbmVudE5hbWU6IiIsY3VzdG9tVHlwZUlkOiIwOTk5In19LGNvbXB1dGVkOntnZXRVcGxvYWRVcmw6ZnVuY3Rpb24oKXtyZXR1cm4gX2UoKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLmdldEFjdGl2aXR5VHlwZSgpfSxtZXRob2RzOntzdWJtaXRGb3JtOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7dGhpcy4kcmVmc1tlXS52YWxpZGF0ZShmdW5jdGlvbihlKXtpZighZSlyZXR1cm4gY29uc29sZS5sb2coImVycm9yIHN1Ym1pdCEhIiksITE7dmFyIHQ7bi5ldmVudFR5cGVMaXN0LmZvckVhY2goZnVuY3Rpb24oZSx0LGEpe2UudmFsdWU9PT1uLmNyZWF0ZUZyb20udHlwZWlkJiYobi5jcmVhdGVGcm9tLnR5cGVfbmFtZT1lLmxhYmVsKX0pLCh0PXthY3Rpdml0eTp7YWN0aXZpdHlfbmFtZTpuLmNyZWF0ZUZyb20uYWN0aXZpdHlfbmFtZSxoZWFkX2ltZzpuLmNyZWF0ZUZyb20uaGVhZF9pbWcsYXBwX3VybDpuLmNyZWF0ZUZyb20uYXBwX3VybCxtYW5hZ2VyX3VybDpuLmNyZWF0ZUZyb20ubWFuYWdlcl91cmwsdHlwZWlkOm4uY3JlYXRlRnJvbS50eXBlaWQsdHlwZV9uYW1lOm4uY3JlYXRlRnJvbS50eXBlX25hbWUsZXhwaXJ5X2RhdGVfc3RhcnQ6bi5jcmVhdGVGcm9tLmxpdmVSYW5nZVswXS5nZXRUaW1lKCksZXhwaXJ5X2RhdGVfZW5kOm4uY3JlYXRlRnJvbS5saXZlUmFuZ2VbMV0uZ2V0VGltZSgpLHN0YXRlOm4uY3JlYXRlRnJvbS5zdGF0ZSxzb3J0Om4uY3JlYXRlRnJvbS5zb3J0LG5lZWRfbG9naW46bi5jcmVhdGVGcm9tLm5lZWRfbG9naW59fSxiZSgibWFuYWdlci9BY3Rpdml0eS9hZGQiLHQpKS50aGVuKGZ1bmN0aW9uKGUpezIwMD09PWUuc3RhdHVzJiYobi4kcm91dGVyLnB1c2goe3BhdGg6Ii9ldmVudC9saXN0In0pLG4uJG5vdGlmeSh7dGl0bGU6IumAmuefpSIsbWVzc2FnZToi5re75Yqg5oiQ5YqfIix0eXBlOiJzdWNjZXNzIn0pKX0pfSl9LGhhbmRsZVBjQXZhdGFyU3VjY2VzczpmdW5jdGlvbihlLG4pe2lmKGUuc3RhdHVzKXt2YXIgdD1lLnJlc3VsdDt0aGlzLmNyZWF0ZUZyb20uaGVhZF9pbWc9dH19LGJlZm9yZUF2YXRhclVwbG9hZDpmdW5jdGlvbihlKXt2YXIgbj1lLnR5cGUgaW57ImltYWdlL2pwZWciOiEwLCJpbWFnZS9wbmciOiEwLCJpbWFnZS9qcGciOiEwfSx0PWUuc2l6ZS8xMDI0LzEwMjQ8MjtyZXR1cm4gbnx8dGhpcy4kbWVzc2FnZS5lcnJvcigi6K+35LiK5Lyg5Zu+54mH5qC85byP55qE5paH5Lu2ISIpLHR8fHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuS4iuS8oOWbvueJh+Wkp+Wwj+S4jeiDvei2hei/hyAyTUIhIiksbiYmdH0sZ2V0QWN0aXZpdHlUeXBlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLmV2ZW50VHlwZUxpc3Q9W10seG8oKS50aGVuKGZ1bmN0aW9uKG4pe3ZhciB0PW4uZGF0YTtpZih0LnN0YXR1cyl7dC5yZXN1bHQuZm9yRWFjaChmdW5jdGlvbihuLHQsYSl7bi50eXBlX25hbWU9PT1lLmNyZWF0ZUZyb20udHlwZWlkJiYoZS5jcmVhdGVGcm9tLnR5cGVpZD1uLnR5cGVpZCk7dmFyIGk9e307aS5sYWJlbD1uLnR5cGVfbmFtZSxpLnZhbHVlPW4udHlwZWlkLGUuZXZlbnRUeXBlTGlzdC5wdXNoKGkpfSk7dmFyIGE9e2xhYmVsOiLoh6rlrprkuYkifTthLnZhbHVlPWUuY3VzdG9tVHlwZUlkLGUuZXZlbnRUeXBlTGlzdC5wdXNoKGEpfX0pfSxjaG9vc2VUaW1lOmZ1bmN0aW9uKGUpe1JlKHRoaXMsdGhpcy5jcmVhdGVGcm9tLmxpdmVSYW5nZSxlKX0saGFuZGxlRXZlbnRUeXBlOmZ1bmN0aW9uKGUpe2U9PT10aGlzLmN1c3RvbVR5cGVJZCYmdGhpcy5oYW5kbGVDdXN0b21DbGljaygpfSxoYW5kbGVDdXN0b21DbGljazpmdW5jdGlvbigpe3RoaXMuZGlhbG9nVmlzaWJsZT0hMCx0aGlzLmNvbXBvbmVudE5hbWU9IkN1c3RvbUV2ZW50In0sY2xvc2VEaWFsb2c6ZnVuY3Rpb24oKXt0aGlzLmRpYWxvZ1Zpc2libGU9ITEsdGhpcy5jb21wb25lbnROYW1lPSIifSxzdWJtaXRDdXN0b21FdmVudDpmdW5jdGlvbihlKXt0aGlzLmNsb3NlRGlhbG9nKCksdGhpcy5nZXRBY3Rpdml0eVR5cGUoKSx0aGlzLmNyZWF0ZUZyb20udHlwZWlkPWV9LGNhbmNlbEN1c3RvbUV2ZW50OmZ1bmN0aW9uKCl7dGhpcy5jbG9zZURpYWxvZygpfX19LE9vPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPWUuJGNyZWF0ZUVsZW1lbnQsdD1lLl9zZWxmLl9jfHxuO3JldHVybiB0KCJkaXYiLHtzdGF0aWNDbGFzczoiY2hhbm5lbCBjcmVhdGUifSxbdCgiY2lyY2xlLXRpdGxlIix7c3RhdGljQ2xhc3M6ImNpY2xlLWNvbnRyb2xsZXIiLGF0dHJzOnsidGl0bGUtbmFtZSI6IuacjeWKoeaWsOWiniJ9fSksZS5fdigiICIpLHQoImVsLWZvcm0iLHtyZWY6ImNyZWF0ZUZyb20iLHN0YXRpY0NsYXNzOiJydWxlLWZvcm0iLGF0dHJzOnttb2RlbDplLmNyZWF0ZUZyb20scnVsZXM6ZS5ydWxlcywibGFiZWwtd2lkdGgiOiIxMDBweCJ9fSxbdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLmnI3liqHlkI3np7AiLHByb3A6ImFjdGl2aXR5X25hbWUifX0sW3QoImVsLWlucHV0Iix7bW9kZWw6e3ZhbHVlOmUuY3JlYXRlRnJvbS5hY3Rpdml0eV9uYW1lLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZyb20sImFjdGl2aXR5X25hbWUiLCJzdHJpbmciPT10eXBlb2Ygbj9uLnRyaW0oKTpuKX0sZXhwcmVzc2lvbjoiY3JlYXRlRnJvbS5hY3Rpdml0eV9uYW1lIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5b2S5bGe57G75YirIixwcm9wOiJ0eXBlX25hbWUifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntjbGVhcmFibGU6ITAscGxhY2Vob2xkZXI6IiJ9LG9uOntjaGFuZ2U6ZnVuY3Rpb24obil7ZS5oYW5kbGVFdmVudFR5cGUoZS5jcmVhdGVGcm9tLnR5cGVpZCl9fSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGcm9tLnR5cGVpZCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jcmVhdGVGcm9tLCJ0eXBlaWQiLG4pfSxleHByZXNzaW9uOiJjcmVhdGVGcm9tLnR5cGVpZCJ9fSxlLl9sKGUuZXZlbnRUeXBlTGlzdCxmdW5jdGlvbihlLG4pe3JldHVybiB0KCJlbC1vcHRpb24iLHtrZXk6bixhdHRyczp7dmFsdWU6ZS52YWx1ZSxsYWJlbDplLmxhYmVsfX0pfSksMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6e2xhYmVsOiLlm77moIfphY3nva4iLHByb3A6ImhlYWRfaW1nIn19LFt0KCJlbC11cGxvYWQiLHtzdGF0aWNDbGFzczoiYXZhdGFyLXVwbG9hZGVyIixhdHRyczp7InNob3ctZmlsZS1saXN0IjohMSxhY3Rpb246ZS5nZXRVcGxvYWRVcmwsaGVhZGVyczplLnVwbG9hZEhlYWRlcnMsIm9uLXN1Y2Nlc3MiOmUuaGFuZGxlUGNBdmF0YXJTdWNjZXNzLCJiZWZvcmUtdXBsb2FkIjplLmJlZm9yZUF2YXRhclVwbG9hZH19LFtlLmNyZWF0ZUZyb20uaGVhZF9pbWc/dCgiaW1nIix7c3RhdGljQ2xhc3M6ImF2YXRhciIsYXR0cnM6e3NyYzplLmNyZWF0ZUZyb20uaGVhZF9pbWd9fSk6dCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXBsdXMgYXZhdGFyLXVwbG9hZGVyLWljb24ifSldKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5YmN56uv6ZO+5o6lIixwcm9wOiJhcHBfdXJsIn19LFt0KCJlbC1pbnB1dCIse21vZGVsOnt2YWx1ZTplLmNyZWF0ZUZyb20uYXBwX3VybCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jcmVhdGVGcm9tLCJhcHBfdXJsIiwic3RyaW5nIj09dHlwZW9mIG4/bi50cmltKCk6bil9LGV4cHJlc3Npb246ImNyZWF0ZUZyb20uYXBwX3VybCJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuWQjuerr+mTvuaOpSIscHJvcDoibWFuYWdlcl91cmwifX0sW3QoImVsLWlucHV0Iix7bW9kZWw6e3ZhbHVlOmUuY3JlYXRlRnJvbS5tYW5hZ2VyX3VybCxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jcmVhdGVGcm9tLCJtYW5hZ2VyX3VybCIsInN0cmluZyI9PXR5cGVvZiBuP24udHJpbSgpOm4pfSxleHByZXNzaW9uOiJjcmVhdGVGcm9tLm1hbmFnZXJfdXJsIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi54q25oCB6YCJ5oupIixwcm9wOiJzdGF0ZSJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiLor7fpgInmi6kifSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGcm9tLnN0YXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZyb20sInN0YXRlIixuKX0sZXhwcmVzc2lvbjoiY3JlYXRlRnJvbS5zdGF0ZSJ9fSxbdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjEsbGFiZWw6IuWQr+eUqCJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZTowLGxhYmVsOiLlgZznlKgifX0pXSwxKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5pyJ5pWI5pyfIixwcm9wOiJsaXZlUmFuZ2UifX0sW3QoImVsLWRhdGUtcGlja2VyIix7c3RhdGljU3R5bGU6e3dpZHRoOiIxMDAlIn0sYXR0cnM6e2NsZWFyYWJsZTohMSx0eXBlOiJkYXRldGltZXJhbmdlIixmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLCJyYW5nZS1zZXBhcmF0b3IiOiLoh7MiLCJzdGFydC1wbGFjZWhvbGRlciI6IuW8gOWni+aXpeacnyIsImVuZC1wbGFjZWhvbGRlciI6Iue7k+adn+aXpeacnyJ9LG9uOntjaGFuZ2U6ZS5jaG9vc2VUaW1lfSxtb2RlbDp7dmFsdWU6ZS5jcmVhdGVGcm9tLmxpdmVSYW5nZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jcmVhdGVGcm9tLCJsaXZlUmFuZ2UiLG4pfSxleHByZXNzaW9uOiJjcmVhdGVGcm9tLmxpdmVSYW5nZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoic29ydCIsYXR0cnM6e2xhYmVsOiLpnIDopoHnmbvlvZUifX0sW3QoImVsLXJhZGlvLWdyb3VwIix7bW9kZWw6e3ZhbHVlOmUuY3JlYXRlRnJvbS5uZWVkX2xvZ2luLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZyb20sIm5lZWRfbG9naW4iLG4pfSxleHByZXNzaW9uOiJjcmVhdGVGcm9tLm5lZWRfbG9naW4ifX0sW3QoImVsLXJhZGlvIix7YXR0cnM6e2xhYmVsOiEwfX0sW2UuX3YoIuaYryIpXSksZS5fdigiICIpLHQoImVsLXJhZGlvIix7YXR0cnM6e2xhYmVsOiExfX0sW2UuX3YoIuWQpiIpXSldLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6InNvcnQiLGF0dHJzOntsYWJlbDoi5o6S5bqPIixwcm9wOiJzb3J0In19LFt0KCJlbC1pbnB1dCIse3N0YXRpY1N0eWxlOnt3aWR0aDoiNzUlIn0sbW9kZWw6e3ZhbHVlOmUuY3JlYXRlRnJvbS5zb3J0LGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNyZWF0ZUZyb20sInNvcnQiLGUuX24obikpfSxleHByZXNzaW9uOiJjcmVhdGVGcm9tLnNvcnQifX0pLGUuX3YoIiAiKSx0KCJzcGFuIixbZS5fdigi5o+Q56S677ya5pWw5a2X6LaK5bCP6LaK5b6A5YmNIildKV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIsW3QoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmZ1bmN0aW9uKG4pe2Uuc3VibWl0Rm9ybSgiY3JlYXRlRnJvbSIpfX19LFtlLl92KCLmj5DkuqQiKV0pLGUuX3YoIiAiKSx0KCJyb3V0ZXItbGluayIse2F0dHJzOnt0bzoiL2V2ZW50L2xpc3QifX0sW3QoImVsLWJ1dHRvbiIsW2UuX3YoIuWPlua2iCIpXSldLDEpXSwxKV0sMSksZS5fdigiICIpLHQoImVsLWRpYWxvZyIse3N0YXRpY1N0eWxlOntwYWRkaW5nOiIyMHB4IDUwcHggMjBweCA1MHB4In0sYXR0cnM6e3Zpc2libGU6ZS5kaWFsb2dWaXNpYmxlLHRpdGxlOiLoh6rlrprkuYnmnI3liqEiLHdpZHRoOiI0MCUifSxvbjp7InVwZGF0ZTp2aXNpYmxlIjpmdW5jdGlvbihuKXtlLmRpYWxvZ1Zpc2libGU9bn0sY2xvc2U6ZS5jbG9zZURpYWxvZ319LFt0KGUuY29tcG9uZW50TmFtZSx7dGFnOiJkaXYiLG9uOnsic3VibWl0LWN1c3RvbS1ldmVudCI6ZS5zdWJtaXRDdXN0b21FdmVudCwiY2FuY2VsLWN1c3RvbS1ldmVudCI6ZS5jYW5jZWxDdXN0b21FdmVudH19KV0sMSldLDEpfTtPby5fd2l0aFN0cmlwcGVkPSEwO3ZhciBxbz17cmVuZGVyOk9vLHN0YXRpY1JlbmRlckZuczpbXX0sWW89cW87dmFyIFpvPSExO3ZhciBHbz10KCJWVS84IikoV28sWW8sITEsZnVuY3Rpb24oZSl7Wm98fHQoInRrL28iKX0sImRhdGEtdi03MjZjYzE3YyIsbnVsbCk7R28ub3B0aW9ucy5fX2ZpbGU9InNyYy9jb21wb25lbnRzL21hbmFnZUV2ZW50L2V2ZW50Q3JlYXRlLnZ1ZSI7dmFyIEpvPUdvLmV4cG9ydHMsWG89e2NvbXBvbmVudHM6e0NpcmNsZVRpdGxlOmVufSxkYXRhOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPXRoaXMuJGNyZWF0ZUVsZW1lbnQ7cmV0dXJue3VzZXJFdmVudEZvcm06e2FjdGl2aXR5X25hbWU6IiIsbmlja25hbWU6IiIscGhvbmU6IiIsc3RhdGU6IiIsc29ydDoiMSIsc3RhcnREYXRlOiIiLGVuZERhdGU6IiJ9LHRhYmxlSGVhZGVyOlt7cHJvcDoiaGVhZF9pbWciLGxhYmVsOiLlm77moIciLGZvcm1hdHRlcjpmdW5jdGlvbihlLHQsYSxpKXtyZXR1cm4gbigiaW1nIix7Y2xhc3M6InRvcGljLXRhYmxlLXBpYyIsYXR0cnM6e3NyYzphfX0pfX0se3Byb3A6ImFjdGl2aXR5X25hbWUiLGxhYmVsOiLmtLvliqjlkI3np7AifSx7cHJvcDoidHlwZV9uYW1lIixsYWJlbDoi5rS75Yqo57G75Z6LIn0se3Byb3A6InNob3dTdGF0ZSIsbGFiZWw6IueKtuaAgSJ9LHtwcm9wOiJuaWNrbmFtZSIsbGFiZWw6IueUqOaIt+WQjeensCJ9LHtwcm9wOiJwaG9uZSIsbGFiZWw6IuazqOWGjOaJi+acuuWPtyJ9LHtwcm9wOiJleHBpcnlfZGF0ZV9zdGFydCIsbGFiZWw6IuWPguWKoOa0u+WKqOaXtumXtCIsd2lkdGg6MzAwLGZvcm1hdHRlcjpmdW5jdGlvbihuLHQsYSxpKXtyZXR1cm4gZS4kb3B0aW9ucy5maWx0ZXJzLkZvcm1hdERhdGUoYSwieXl5eS1NTS1kZCBoaDptbSIpKyLoh7MiK2UuJG9wdGlvbnMuZmlsdGVycy5Gb3JtYXREYXRlKG4uZXhwaXJ5X2RhdGVfZW5kLCJ5eXl5LU1NLWRkIGhoOm1tIil9fV0sdGFibGVEYXRhOltdLHBhZ2VObzoxLHBhZ2VTaXplOjEwLHRvdGFsOjB9fSx3YXRjaDp7InVzZXJFdmVudEZvcm0uYWN0aXZpdHlfbmFtZSI6ZnVuY3Rpb24oZSl7dGhpcy5nZXRwYWdlUGFydGljaXBhbnRzKCl9LCJ1c2VyRXZlbnRGb3JtLm5pY2tuYW1lIjpmdW5jdGlvbihlKXt0aGlzLmdldHBhZ2VQYXJ0aWNpcGFudHMoKX0sInVzZXJFdmVudEZvcm0ucGhvbmUiOmZ1bmN0aW9uKGUpe3RoaXMuZ2V0cGFnZVBhcnRpY2lwYW50cygpfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuZ2V0cGFnZVBhcnRpY2lwYW50cygpfSxtZXRob2RzOntnZXRwYWdlUGFydGljaXBhbnRzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiRvcHRpb25zLmZpbHRlcnMuc3dhcFRpbWUodGhpcy51c2VyRXZlbnRGb3JtKTt2YXIgbix0PW51bGwhPT10aGlzLnVzZXJFdmVudEZvcm0uc3RhcnREYXRlP25ldyBEYXRlKHRoaXMudXNlckV2ZW50Rm9ybS5zdGFydERhdGUpLmdldFRpbWUoKTpudWxsLGE9bnVsbCE9PXRoaXMudXNlckV2ZW50Rm9ybS5lbmREYXRlP25ldyBEYXRlKHRoaXMudXNlckV2ZW50Rm9ybS5lbmREYXRlKS5nZXRUaW1lKCk6bnVsbDsobj17cGFnZU5vOnRoaXMucGFnZU5vLHBhZ2VTaXplOnRoaXMucGFnZVNpemUsYWN0aXZpdHlfbmFtZTp0aGlzLnVzZXJFdmVudEZvcm0uYWN0aXZpdHlfbmFtZSxuaWNrbmFtZTp0aGlzLnVzZXJFdmVudEZvcm0ubmlja25hbWUscGhvbmU6dGhpcy51c2VyRXZlbnRGb3JtLnBob25lLHRpbWVTdGFydDp0LHRpbWVFbmQ6YX0sYmUoIm1hbmFnZXIvQWN0aXZpdHkvcGFnZVBhcnRpY2lwYW50cyIsbikpLnRoZW4oZnVuY3Rpb24obil7aWYobi5kYXRhLnN0YXR1cyl7dmFyIHQ9bi5kYXRhLnJlc3VsdDtlLnRhYmxlRGF0YT10Lmxpc3QsZS50b3RhbD10LnRvdGFsfX0pfSxoYW5kbGVTaXplQ2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMucGFnZVNpemU9ZSx0aGlzLmdldHBhZ2VQYXJ0aWNpcGFudHMoKX0saGFuZGxlQ3VycmVudENoYW5nZTpmdW5jdGlvbihlKXt0aGlzLnBhZ2VObz1lLHRoaXMuZ2V0cGFnZVBhcnRpY2lwYW50cygpfX19LEtvPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPWUuJGNyZWF0ZUVsZW1lbnQsdD1lLl9zZWxmLl9jfHxuO3JldHVybiB0KCJkaXYiLHtzdGF0aWNDbGFzczoidXNlci1ldmVudC1saXN0In0sW3QoImRpdiIsW3QoImNpcmNsZS10aXRsZSIse3N0YXRpY0NsYXNzOiJjaWNsZS1jb250cm9sbGVyIixhdHRyczp7InRpdGxlLW5hbWUiOiLnlKjmiLfmtLvliqjliJfooagifX0pLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoic2VhcmNoLWZvcm0tY29udGFpbmVyIn0sW3QoImVsLWZvcm0iLHtzdGF0aWNDbGFzczoiZGVtby1mb3JtLWlubGluZSIsYXR0cnM6e2lubGluZTohMCxtb2RlbDplLnVzZXJFdmVudEZvcm19fSxbdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLmtLvliqjlkI3np7AifX0sW3QoImVsLWlucHV0Iix7YXR0cnM6e2NsZWFyYWJsZToiIn0sb246e2NoYW5nZTplLmdldHBhZ2VQYXJ0aWNpcGFudHN9LG1vZGVsOnt2YWx1ZTplLnVzZXJFdmVudEZvcm0uYWN0aXZpdHlfbmFtZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS51c2VyRXZlbnRGb3JtLCJhY3Rpdml0eV9uYW1lIixuKX0sZXhwcmVzc2lvbjoidXNlckV2ZW50Rm9ybS5hY3Rpdml0eV9uYW1lIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi55So5oi35ZCNIn19LFt0KCJlbC1pbnB1dCIse2F0dHJzOntjbGVhcmFibGU6IiJ9LG9uOntjaGFuZ2U6ZS5nZXRwYWdlUGFydGljaXBhbnRzfSxtb2RlbDp7dmFsdWU6ZS51c2VyRXZlbnRGb3JtLm5pY2tuYW1lLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLnVzZXJFdmVudEZvcm0sIm5pY2tuYW1lIixuKX0sZXhwcmVzc2lvbjoidXNlckV2ZW50Rm9ybS5uaWNrbmFtZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuazqOWGjOaJi+acuuWPtyJ9fSxbdCgiZWwtaW5wdXQiLHthdHRyczp7Y2xlYXJhYmxlOiIifSxvbjp7Y2hhbmdlOmUuZ2V0cGFnZVBhcnRpY2lwYW50c30sbW9kZWw6e3ZhbHVlOmUudXNlckV2ZW50Rm9ybS5waG9uZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS51c2VyRXZlbnRGb3JtLCJwaG9uZSIsbil9LGV4cHJlc3Npb246InVzZXJFdmVudEZvcm0ucGhvbmUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLlvIDlp4vml7bpl7QifX0sW3QoImVsLWRhdGUtcGlja2VyIix7YXR0cnM6e3RpdGxlOmUuX2YoIkZvcm1hdERhdGUiKShlLnVzZXJFdmVudEZvcm0uc3RhcnREYXRlLCJ5eXl5LU1NLWRkIGhoOm1tIiksdHlwZToiZGF0ZXRpbWUiLGZvcm1hdDoieXl5eS1NTS1kZCBISDptbSIscGxhY2Vob2xkZXI6IumAieaLqeaXpeacnyIsY2xlYXJhYmxlOiIifSxvbjp7Y2hhbmdlOmUuZ2V0cGFnZVBhcnRpY2lwYW50c30sbW9kZWw6e3ZhbHVlOmUudXNlckV2ZW50Rm9ybS5zdGFydERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUudXNlckV2ZW50Rm9ybSwic3RhcnREYXRlIixuKX0sZXhwcmVzc2lvbjoidXNlckV2ZW50Rm9ybS5zdGFydERhdGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljU3R5bGU6eyJtYXJnaW4tbGVmdCI6Ii0xNHB4In0sYXR0cnM6e2xhYmVsOiLnu5PmnZ/ml7bpl7QifX0sW3QoImVsLWRhdGUtcGlja2VyIix7YXR0cnM6e3RpdGxlOmUuX2YoIkZvcm1hdERhdGUiKShlLnVzZXJFdmVudEZvcm0uZW5kRGF0ZSwieXl5eS1NTS1kZCBoaDptbSIpLGZvcm1hdDoieXl5eS1NTS1kZCBISDptbSIsdHlwZToiZGF0ZXRpbWUiLHBsYWNlaG9sZGVyOiLpgInmi6nml6XmnJ8iLGNsZWFyYWJsZToiIn0sb246e2NoYW5nZTplLmdldHBhZ2VQYXJ0aWNpcGFudHN9LG1vZGVsOnt2YWx1ZTplLnVzZXJFdmVudEZvcm0uZW5kRGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS51c2VyRXZlbnRGb3JtLCJlbmREYXRlIixuKX0sZXhwcmVzc2lvbjoidXNlckV2ZW50Rm9ybS5lbmREYXRlIn19KV0sMSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse3N0YXRpY1N0eWxlOnsibWFyZ2luLWxlZnQiOiI5NXB4In0sYXR0cnM6e3R5cGU6InByaW1hcnkifSxvbjp7Y2xpY2s6ZS5nZXRwYWdlUGFydGljaXBhbnRzfX0sW2UuX3YoIlxuICAgICAgICAgIOafpeivolxuICAgICAgICAgICIpLHQoImkiLHtzdGF0aWNDbGFzczoiZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQifSldKV0sMSldLDEpXSwxKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InRhYmxlLWxpc3QifSxbdCgiZWwtdGFibGUiLHtyZWY6InVzZXJFdmVudFRhYmxlIixzdGF0aWNDbGFzczoid2hvbGUtdGFibGUiLGF0dHJzOntkYXRhOmUudGFibGVEYXRhLHN0cmlwZToiIiwibWluLWhlaWdodCI6IjQwMCJ9fSxlLl9sKGUudGFibGVIZWFkZXIsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtdGFibGUtY29sdW1uIix7a2V5Om4sYXR0cnM6e3Byb3A6ZS5wcm9wLGxhYmVsOmUubGFiZWwsd2lkdGg6ZS53aWR0aCxmb3JtYXR0ZXI6ZS5mb3JtYXR0ZXIsYWxpZ246ImNlbnRlciIsZml4ZWQ6IiIsInNob3ctb3ZlcmZsb3ctdG9vbHRpcCI6IiJ9fSl9KSwxKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InBhZ2luYXRpb24ifSxbdCgiZWwtcGFnaW5hdGlvbiIse2F0dHJzOnt0b3RhbDplLnRvdGFsLCJwYWdlLXNpemVzIjpbMTAsMjAsMzAsNDBdLCJjdXJyZW50LXBhZ2UiOmUucGFnZU5vLGJhY2tncm91bmQ6IiIsbGF5b3V0OiJ0b3RhbCwgc2l6ZXMsIHByZXYsIHBhZ2VyLCBuZXh0In0sb246eyJzaXplLWNoYW5nZSI6ZS5oYW5kbGVTaXplQ2hhbmdlLCJjdXJyZW50LWNoYW5nZSI6ZS5oYW5kbGVDdXJyZW50Q2hhbmdlfX0pXSwxKV0sMSldKX07S28uX3dpdGhTdHJpcHBlZD0hMDt2YXIgZXM9e3JlbmRlcjpLbyxzdGF0aWNSZW5kZXJGbnM6W119LG5zPWVzO3ZhciB0cz0hMTt2YXIgYXM9dCgiVlUvOCIpKFhvLG5zLCExLGZ1bmN0aW9uKGUpe3RzfHx0KCJiRnZCIil9LG51bGwsbnVsbCk7YXMub3B0aW9ucy5fX2ZpbGU9InNyYy9jb21wb25lbnRzL21hbmFnZUV2ZW50L3VzZXJFdmVudExpc3QudnVlIjt2YXIgaXM9YXMuZXhwb3J0cztmdW5jdGlvbiBscyhlKXtyZXR1cm4gYmUoIm1hbmFnZXIvUGVybWlzc2lvbi90cmVlUGVybWlzc2lvbiIsZSl9ZnVuY3Rpb24gb3MoZSl7cmV0dXJuIGJlKCJtYW5hZ2VyL1Blcm1pc3Npb24vZ2V0Um9sZURldGFpbHMiLGUpfWZ1bmN0aW9uIHNzKGUpe3JldHVybiBiZSgibWFuYWdlci9PcmdVc2Vycy9nZXRVc2VyUm9sZXMiLGUpfXZhciBycz17Y29tcG9uZW50czp7Q2lyY2xlVGl0bGU6ZW59LGRhdGE6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49dGhpcy4kY3JlYXRlRWxlbWVudDtyZXR1cm57cnVsZUZvcm06e3VzZXJuYW1lOiIiLHBob25lOiIiLHN0YXRlOiIifSx0YWJsZUhlYWRlcjpbe3Byb3A6Im5pY2tuYW1lIixsYWJlbDoi5pi156ewIn0se3Byb3A6ImhlYWRfdXJsIixsYWJlbDoi5aS05YOPIixmb3JtYXR0ZXI6ZnVuY3Rpb24oZSx0LGEsaSl7cmV0dXJuIG4oImEiLHthdHRyczp7aHJlZjphLHRhcmdldDoiX2JsYW5rIn19LFtuKCJpbWciLHthdHRyczp7c3JjOmF9LGNsYXNzOiJ1c2VyLWhlYWQtaWNvbiJ9KV0pfX0se3Byb3A6InBob25lIixsYWJlbDoi55S16K+dIn0se3Byb3A6InNleCIsbGFiZWw6IuaAp+WIqyIsZm9ybWF0dGVyOmZ1bmN0aW9uKGUsbix0LGEpe3JldHVybiAxPT09dD8i55S3Ijoi5aWzIn19LHtwcm9wOiJhZ2UiLGxhYmVsOiLlubTpvoQifSx7cHJvcDoiY3JlYXRldGltZSIsbGFiZWw6IuazqOWGjOaXpeacnyIsZm9ybWF0dGVyOmZ1bmN0aW9uKG4sdCxhLGkpe3JldHVybiBlLiRvcHRpb25zLmZpbHRlcnMuRm9ybWF0RGF0ZShhLCJ5eXl5LU1NLWRkIGhoOm1tIil9fSx7cHJvcDoic3RhdGUiLGxhYmVsOiLnirbmgIEiLGZvcm1hdHRlcjpmdW5jdGlvbihlLG4sdCxhKXtyZXR1cm4gMT09PXBhcnNlSW50KHQpPyLlkK/nlKgiOiLlgZznlKgifX1dLHRhYmxlRGF0YTpbXSxwYWdlTm86MSxwYWdlU2l6ZToxMCx0b3RhbDowfX0sd2F0Y2g6eyJydWxlRm9ybS51c2VybmFtZSI6ZnVuY3Rpb24oZSl7dGhpcy5nZXRBcHBVc2VyTGlzdCgpfSwicnVsZUZvcm0ucGhvbmUiOmZ1bmN0aW9uKGUpe3RoaXMuZ2V0QXBwVXNlckxpc3QoKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLmdldEFwcFVzZXJMaXN0KCl9LG1ldGhvZHM6e2dldEFwcFVzZXJMaXN0OmZ1bmN0aW9uKCl7dmFyIGUsbj10aGlzOyhlPXtwYWdlTm86dGhpcy5wYWdlTm8scGFnZVNpemU6dGhpcy5wYWdlU2l6ZSxuaWNrbmFtZTp0aGlzLnJ1bGVGb3JtLnVzZXJuYW1lLHBob25lOnRoaXMucnVsZUZvcm0ucGhvbmUsc3RhdGU6dGhpcy5ydWxlRm9ybS5zdGF0ZX0sYmUoIm1hbmFnZXIvQXBwVXNlci9wYWdlIixlKSkudGhlbihmdW5jdGlvbihlKXtpZihlLnN0YXR1cyl7dmFyIHQ9ZS5kYXRhLnJlc3VsdDtuLnRhYmxlRGF0YT10Lmxpc3Qsbi50b3RhbD10LnRvdGFsfX0pfSxoYW5kbGVTaXplQ2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMucGFnZVNpemU9ZSx0aGlzLmdldEFwcFVzZXJMaXN0KCl9LGhhbmRsZUN1cnJlbnRDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5wYWdlTm89ZSx0aGlzLmdldEFwcFVzZXJMaXN0KCl9LHRvZ2dsZUNvdW50OmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7MT09PWUuc3RhdGU/dGhpcy4kY29uZmlybSgi56Gu5a6a6KaB5YGc55So6LSm5Y+3PyIsIuaPkOekuiIse2NvbmZpcm1CdXR0b25UZXh0OiLnoa7lrpoiLGNhbmNlbEJ1dHRvblRleHQ6IuWPlua2iCIsdHlwZToid2FybmluZyJ9KS50aGVuKGZ1bmN0aW9uKCl7bi5hcHBVc2VyVXBkYXRlU3RhdGUoZS51c2VyaWQsMCl9KS5jYXRjaChmdW5jdGlvbigpe30pOnRoaXMuJGNvbmZpcm0oIuehruWumuimgeWQr+eUqOi0puWPtz8iLCLmj5DnpLoiLHtjb25maXJtQnV0dG9uVGV4dDoi56Gu5a6aIixjYW5jZWxCdXR0b25UZXh0OiLlj5bmtogiLHR5cGU6Indhcm5pbmcifSkudGhlbihmdW5jdGlvbigpe24uYXBwVXNlclVwZGF0ZVN0YXRlKGUudXNlcmlkLDEpfSkuY2F0Y2goZnVuY3Rpb24oKXt9KX0sYXBwVXNlclVwZGF0ZVN0YXRlOmZ1bmN0aW9uKGUsbil7dmFyIHQsYT10aGlzOyh0PXthcHBVc2VyOnt1c2VyaWQ6ZSxzdGF0ZTpufX0sYmUoIm1hbmFnZXIvQXBwVXNlci91cGRhdGVTdGF0ZSIsdCkpLnRoZW4oZnVuY3Rpb24oZSl7ZS5kYXRhLnN0YXR1cyYmYS5nZXRBcHBVc2VyTGlzdCgpfSl9LHJlc2V0UGFzc3dvcmQ6ZnVuY3Rpb24oZSl7dmFyIG49dGhpczt0aGlzLiRjb25maXJtKCLnoa7lrpropoHph43nva7lr4bnoIE/Iiwi5o+Q56S6Iix7Y29uZmlybUJ1dHRvblRleHQ6IuehruWumiIsY2FuY2VsQnV0dG9uVGV4dDoi5Y+W5raIIix0eXBlOiJ3YXJuaW5nIn0pLnRoZW4oZnVuY3Rpb24oKXt2YXIgdDsodD17YXBwVXNlcjp7dXNlcmlkOmUudXNlcmlkfX0sYmUoIm1hbmFnZXIvQXBwVXNlci9yZXNldFBhc3N3b3JkIix0KSkudGhlbihmdW5jdGlvbihlKXtlLmRhdGEuc3RhdHVzJiZuLiRtZXNzYWdlKHt0eXBlOiJzdWNjZXNzIixtZXNzYWdlOiLph43nva7miJDlip8hIn0pfSl9KS5jYXRjaChmdW5jdGlvbigpe30pfX19LGNzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPWUuJGNyZWF0ZUVsZW1lbnQsdD1lLl9zZWxmLl9jfHxuO3JldHVybiB0KCJkaXYiLHtzdGF0aWNDbGFzczoidXNlci1saXN0In0sW3QoImRpdiIsW3QoImNpcmNsZS10aXRsZSIse3N0YXRpY0NsYXNzOiJjaWNsZS1jb250cm9sbGVyIixhdHRyczp7InRpdGxlLW5hbWUiOiLnlKjmiLfliJfooagifX0pLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoic2VhcmNoLWZvcm0tY29udGFpbmVyIn0sW3QoImVsLWZvcm0iLHtzdGF0aWNDbGFzczoiZGVtby1mb3JtLWlubGluZSIsYXR0cnM6e2lubGluZTohMCxtb2RlbDplLnJ1bGVGb3JtfX0sW3QoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi55So5oi35ZCNIn19LFt0KCJlbC1pbnB1dCIse2F0dHJzOntjbGVhcmFibGU6IiJ9LG1vZGVsOnt2YWx1ZTplLnJ1bGVGb3JtLnVzZXJuYW1lLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLnJ1bGVGb3JtLCJ1c2VybmFtZSIsbil9LGV4cHJlc3Npb246InJ1bGVGb3JtLnVzZXJuYW1lIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5rOo5YaM5omL5py65Y+3In19LFt0KCJlbC1pbnB1dCIse2F0dHJzOntjbGVhcmFibGU6IiJ9LG1vZGVsOnt2YWx1ZTplLnJ1bGVGb3JtLnBob25lLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLnJ1bGVGb3JtLCJwaG9uZSIsbil9LGV4cHJlc3Npb246InJ1bGVGb3JtLnBob25lIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJzZWFyY2gtbGVmdCIsYXR0cnM6e2xhYmVsOiLnirbmgIEifX0sW3QoImVsLXNlbGVjdCIse2F0dHJzOntwbGFjZWhvbGRlcjoiIn0sb246e2NoYW5nZTplLmdldEFwcFVzZXJMaXN0fSxtb2RlbDp7dmFsdWU6ZS5ydWxlRm9ybS5zdGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5ydWxlRm9ybSwic3RhdGUiLG4pfSxleHByZXNzaW9uOiJydWxlRm9ybS5zdGF0ZSJ9fSxbdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOiIiLGxhYmVsOiLlhajpg6gifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MSxsYWJlbDoi5ZCv55SoIn19KSxlLl92KCIgIiksdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjAsbGFiZWw6IuWBnOeUqCJ9fSldLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7c3RhdGljU3R5bGU6eyJtYXJnaW4tbGVmdCI6Ii0zMHB4In0sYXR0cnM6e3R5cGU6InByaW1hcnkifSxvbjp7Y2xpY2s6ZS5nZXRBcHBVc2VyTGlzdH19LFtlLl92KCJcbiAgICAgICAgICDmn6Xor6JcbiAgICAgICAgICAiKSx0KCJpIix7c3RhdGljQ2xhc3M6ImVsLWljb24tc2VhcmNoIGVsLWljb24tLXJpZ2h0In0pXSldLDEpXSwxKV0sMSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJ0YWJsZS1saXN0In0sW3QoImVsLXRhYmxlIix7cmVmOiJjaGFubmVsVGFibGUiLHN0YXRpY0NsYXNzOiJ3aG9sZS10YWJsZSIsYXR0cnM6e2RhdGE6ZS50YWJsZURhdGEsc3RyaXBlOiIiLCJtaW4taGVpZ2h0IjoiNDAwIn19LFtlLl9sKGUudGFibGVIZWFkZXIsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtdGFibGUtY29sdW1uIix7a2V5Om4sYXR0cnM6e3Byb3A6ZS5wcm9wLGxhYmVsOmUubGFiZWwsd2lkdGg6ZS53aWR0aCxmb3JtYXR0ZXI6ZS5mb3JtYXR0ZXIsYWxpZ246ImNlbnRlciIsZml4ZWQ6IiIsInNob3ctb3ZlcmZsb3ctdG9vbHRpcCI6IiJ9fSl9KSxlLl92KCIgIiksdCgiZWwtdGFibGUtY29sdW1uIix7YXR0cnM6e2ZpeGVkOiJyaWdodCIsbGFiZWw6IuaTjeS9nCIsYWxpZ246ImNlbnRlciIsd2lkdGg6IjI1MCJ9LHNjb3BlZFNsb3RzOmUuX3UoW3trZXk6ImRlZmF1bHQiLGZuOmZ1bmN0aW9uKG4pe3JldHVyblt0KCJzcGFuIixbdCgic3BhbiIse2NsYXNzOlsidXNlciIsMSE9PW4ucm93LnN0YXRlPyJkaXNhYmxlIjoiIl0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UudG9nZ2xlQ291bnQobi5yb3cpfX19LFtlLl92KCJcbiAgICAgICAgICAgICAgIitlLl9zKDEhPT1uLnJvdy5zdGF0ZT8i5ZCv55So6LSm5Y+3Ijoi5YGc55So6LSm5Y+3IikrIlxuICAgICAgICAgICAgIildKSxlLl92KCIgIiksdCgic3BhbiIse3N0YXRpY0NsYXNzOiJ1c2VyIHJlc2V0LXBhc3N3b3JkIixvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5yZXNldFBhc3N3b3JkKG4ucm93KX19fSxbZS5fdigiXG4gICAgICAgICAgICAgIOmHjee9ruWvhueggVxuICAgICAgICAgICAgIildKV0pXX19XSl9KV0sMiksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJwYWdpbmF0aW9uIn0sW3QoImVsLXBhZ2luYXRpb24iLHthdHRyczp7dG90YWw6ZS50b3RhbCwicGFnZS1zaXplcyI6WzEwLDIwLDMwLDQwXSxiYWNrZ3JvdW5kOiIiLGxheW91dDoidG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dCJ9LG9uOnsic2l6ZS1jaGFuZ2UiOmUuaGFuZGxlU2l6ZUNoYW5nZSwiY3VycmVudC1jaGFuZ2UiOmUuaGFuZGxlQ3VycmVudENoYW5nZX19KV0sMSldLDEpXSl9O2NzLl93aXRoU3RyaXBwZWQ9ITA7dmFyIG1zPXtyZW5kZXI6Y3Msc3RhdGljUmVuZGVyRm5zOltdfSxkcz1tczt2YXIgcHM9ITE7dmFyIHVzPXQoIlZVLzgiKShycyxkcywhMSxmdW5jdGlvbihlKXtwc3x8KHQoIktndDciKSx0KCJJVVd5IikpfSwiZGF0YS12LTY5MzU4NTg4IixudWxsKTt1cy5vcHRpb25zLl9fZmlsZT0ic3JjL2NvbXBvbmVudHMvbWFuYWdlVXNlci91c2VyTGlzdC52dWUiO3ZhciBocz11cy5leHBvcnRzLGdzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kY3JlYXRlRWxlbWVudDtyZXR1cm4odGhpcy5fc2VsZi5fY3x8ZSkoImRpdiIsW3RoaXMuX3YoIum7keeZveWQjeWNleeuoeeQhuWIl+ihqCIpXSl9O2dzLl93aXRoU3RyaXBwZWQ9ITA7dmFyIEFzPXtyZW5kZXI6Z3Msc3RhdGljUmVuZGVyRm5zOltdfSxmcz1Bczt2YXIgYnM9dCgiVlUvOCIpKG51bGwsZnMsITEsbnVsbCxudWxsLG51bGwpO2JzLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9tYW5hZ2VVc2VyL2JsYWNrV2hpdGVMaXN0LnZ1ZSI7dmFyIHZzPWJzLmV4cG9ydHM7ZnVuY3Rpb24geXMoZSl7cmV0dXJuIGJlKCJtYW5hZ2VyL0NvbW1lbnQvdG9wQ29tbWVudHMiLGUpfWZ1bmN0aW9uIENzKGUpe3JldHVybiBiZSgibWFuYWdlci9Db21tZW50L2RlbGV0ZUZvcmJpZGRlbkNvbW1lbnQiLGUpfXZhciBfcz17cHJvcHM6e2NvbW1lbnRpZDp7dHlwZTpTdHJpbmcsZGVmYXVsdDoiMCJ9fSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2F1ZGl0Rm9ybTp7dHlwZToxLGRlc2M6IiJ9fX0sbWV0aG9kczp7c3VibWl0OmZ1bmN0aW9uKCl7dmFyIGUsbj10aGlzOyhlPXtjb21tZW50Vm86e2NvbW1lbnRpZDp0aGlzLmNvbW1lbnRpZCxhdWRpdDp0aGlzLmF1ZGl0Rm9ybS50eXBlLGF1ZGl0X29waW5pb246dGhpcy5hdWRpdEZvcm0uZGVzY319LGJlKCJtYW5hZ2VyL0NvbW1lbnQvYXVkaXRDb21tZW50cyIsZSkpLnRoZW4oZnVuY3Rpb24oZSl7ZS5kYXRhLnN0YXR1cyYmbi4kbm90aWZ5KHt0aXRsZToi5oiQ5YqfIix0eXBlOiJzdWNjZXNzIixtZXNzYWdlOiLlrqHmoLjmiJDlip8ifSksbi4kZW1pdCgiY2xvc2UtZGlhbG9nIil9KX19fSx4cz1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1lLiRjcmVhdGVFbGVtZW50LHQ9ZS5fc2VsZi5fY3x8bjtyZXR1cm4gdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImF1ZGl0In0sW3QoImVsLWZvcm0iLHtyZWY6ImF1ZGl0Rm9ybSIsYXR0cnM6e21vZGVsOmUuYXVkaXRGb3JtLCJsYWJlbC13aWR0aCI6IjgwcHgifX0sW3QoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5b2S5bGe57G75YirIn19LFt0KCJlbC1zZWxlY3QiLHthdHRyczp7cGxhY2Vob2xkZXI6Iuivt+mAieaLqeaYr+WQpumAmui/hyJ9LG1vZGVsOnt2YWx1ZTplLmF1ZGl0Rm9ybS50eXBlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmF1ZGl0Rm9ybSwidHlwZSIsbil9LGV4cHJlc3Npb246ImF1ZGl0Rm9ybS50eXBlIn19LFt0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MSxsYWJlbDoi6YCa6L+HIn19KSxlLl92KCIgIiksdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjIsbGFiZWw6IuS4jemAmui/hyJ9fSldLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLlrqHmoLjmhI/op4EifX0sW3QoImVsLWlucHV0Iix7YXR0cnM6e3R5cGU6InRleHRhcmVhIn0sbW9kZWw6e3ZhbHVlOmUuYXVkaXRGb3JtLmRlc2MsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuYXVkaXRGb3JtLCJkZXNjIixuKX0sZXhwcmVzc2lvbjoiYXVkaXRGb3JtLmRlc2MifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiIifX0sW3QoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmUuc3VibWl0fX0sW2UuX3YoIuaPkOS6pCIpXSldLDEpXSwxKV0sMSl9O3hzLl93aXRoU3RyaXBwZWQ9ITA7dmFyIHdzPXtyZW5kZXI6eHMsc3RhdGljUmVuZGVyRm5zOltdfSxGcz13czt2YXIga3M9ITE7dmFyIFNzPXQoIlZVLzgiKShfcyxGcywhMSxmdW5jdGlvbihlKXtrc3x8KHQoIkJaWlgiKSx0KCJvMzQ0IikpfSwiZGF0YS12LTc0YTZiNWU2IixudWxsKTtTcy5vcHRpb25zLl9fZmlsZT0ic3JjL2NvbXBvbmVudHMvbWFuYWdlQ29tbWVudC9hdWRpdC52dWUiO3ZhciBFcz1Tcy5leHBvcnRzLERzPXtjb21wb25lbnRzOntDaXJjbGVUaXRsZTplbixBdWRpdDpFc30sZGF0YTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsbj10aGlzLiRjcmVhdGVFbGVtZW50O3JldHVybntjb21tZW50Ont1c2VyX25pY2tuYW1lOiIiLHR5cGU6IiIsdXNlcl9waG9uZToiIixzdGFydERhdGU6IiIsZW5kRGF0ZToiIix0aXRsZToiIn0sY2xpY2tDZWxsSW5kZXg6LTEsdGFibGVIZWFkZXI6W3twcm9wOiJ1c2VyX3Bob25lIixsYWJlbDoi55So5oi35L+h5oGvIixmb3JtYXR0ZXI6ZnVuY3Rpb24oZSx0LGEsaSl7cmV0dXJuIG4oImRpdiIsW24oInAiLFsi55So5oi35ZCNOiIsZS51c2VyX25pY2tuYW1lXSksbigicCIsWyLnlLXor506IixhXSldKX19LHtwcm9wOiJ0aXRsZSIsbGFiZWw6Iua6kOWGheWuuSIsZm9ybWF0dGVyOmZ1bmN0aW9uKGUsdCxhLGkpe3ZhciBsPSIiO3JldHVybiBsPTE9PT1lLnR5cGU/Iui1hOiuryI6Mj09PWUudHlwZT8i54K55pKtIjoi55u05pKtIixuKCJkaXYiLFtuKCJwIixbIuaooeWdlzoiLGxdKSxuKCJwIixbIuagh+mimDoiLGFdKV0pfX0se3Byb3A6ImNvbW1lbnRfY29udGVudCIsbGFiZWw6IuivhOS7t+WGheWuuSJ9LHtwcm9wOiJjcmVhdGV0aW1lIixsYWJlbDoi6K+E6K665pel5pyfIix3aWR0aDoyMDAsZm9ybWF0dGVyOmZ1bmN0aW9uKG4sdCxhLGkpe3JldHVybiBlLiRvcHRpb25zLmZpbHRlcnMuRm9ybWF0RGF0ZShhLCJ5eXl5LU1NLWRkIGhoOm1tIil9fSx7cHJvcDoiYXVkaXQiLGxhYmVsOiLnirbmgIEiLHdpZHRoOiIxMDAiLGZvcm1hdHRlcjpmdW5jdGlvbihlLG4sdCxhKXtyZXR1cm4gMD09PXQ/IuW+heWuoeaguCI6MT09PXQ/IuW3sumAmui/hyI6Mj09PXQ/IuacqumAmui/hyI6dm9pZCAwfX1dLHRhYmxlRGF0YTpbXSxiYXRjaFByb2Nlc3M6MSxwcm9jZXNzTGlzdDpbe3ZhbHVlOjEsbGFiZWw6IuWIoOmZpCJ9XSxpbmRleDotMSxwYWdlTm86MSxwYWdlU2l6ZToxMCx0b3RhbDowLGRpYWxvZ1Zpc2libGU6ITEsY29tcG9uZW50TmFtZToiIixzZWxmU2VsZWN0QWxsOiExLGNvdW50QXVkaXRXYWl0OiEwLGNvdW50QXVkaXRQYXNzOiExLGNvdW50QXVkaXROb3RQYXNzOiExLGNvdW50QXVkaXQ6ITEsY291bnRBdWRpdFdhaXROdW06MCxjb3VudEF1ZGl0UGFzc051bTowLGNvdW50QXVkaXROb3RQYXNzTnVtOjAsY291bnRBdWRpdE51bTowLGNvbW1lbnRpZDoiIixjb21tZW50TGlzdDpbXSxzZWxlY3RlZENvbW1lbnRJbmZvOnt9fX0sY29tcHV0ZWQ6e3Nob3dOdWxsVGFnOmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiFlfHxlLmxlbmd0aDw9MH19fSx3YXRjaDp7ImNvbW1lbnQudXNlcl9uaWNrbmFtZSI6ZnVuY3Rpb24oKXt0aGlzLmdldENvbW1lbnRMaXN0KCl9LCJjb21tZW50LnVzZXJfcGhvbmUiOmZ1bmN0aW9uKCl7dGhpcy5nZXRDb21tZW50TGlzdCgpfSwiY29tbWVudC50aXRsZSI6ZnVuY3Rpb24oKXt0aGlzLmdldENvbW1lbnRMaXN0KCl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dGhpcy5nZXRDb3VudENvbW1lbnRzKCksdGhpcy5nZXRDb21tZW50TGlzdCgpfSxtZXRob2RzOntnZXRDb3VudENvbW1lbnRzOmZ1bmN0aW9uKCl7dmFyIGUsbj10aGlzO2JlKCJtYW5hZ2VyL0NvbW1lbnQvY291bnRDb21tZW50cyIsZSkudGhlbihmdW5jdGlvbihlKXtpZihlLmRhdGEuc3RhdHVzKXt2YXIgdD1lLmRhdGEucmVzdWx0O24uY291bnRBdWRpdFdhaXROdW09dC5jb3VudEF1ZGl0V2FpdCxuLmNvdW50QXVkaXRQYXNzTnVtPXQuY291bnRBdWRpdFBhc3Msbi5jb3VudEF1ZGl0Tm90UGFzc051bT10LmNvdW50QXVkaXROb3RQYXNzLG4uY291bnRBdWRpdE51bT10LmNvdW50QXVkaXR9fSl9LGNoYW5nZUNvbW1lbnQ6ZnVuY3Rpb24oZSl7c3dpdGNoKGUpe2Nhc2UiY291bnRBdWRpdFdhaXQiOnRoaXMuY291bnRBdWRpdFdhaXQ9ITAsdGhpcy5jb3VudEF1ZGl0UGFzcz0hMSx0aGlzLmNvdW50QXVkaXROb3RQYXNzPSExLHRoaXMuY291bnRBdWRpdD0hMSx0aGlzLmdldENvbW1lbnRMaXN0KCk7YnJlYWs7Y2FzZSJjb3VudEF1ZGl0UGFzcyI6dGhpcy5jb3VudEF1ZGl0V2FpdD0hMSx0aGlzLmNvdW50QXVkaXRQYXNzPSEwLHRoaXMuY291bnRBdWRpdE5vdFBhc3M9ITEsdGhpcy5jb3VudEF1ZGl0PSExLHRoaXMuZ2V0Q29tbWVudExpc3QoKTticmVhaztjYXNlImNvdW50QXVkaXROb3RQYXNzIjp0aGlzLmNvdW50QXVkaXRXYWl0PSExLHRoaXMuY291bnRBdWRpdFBhc3M9ITEsdGhpcy5jb3VudEF1ZGl0Tm90UGFzcz0hMCx0aGlzLmNvdW50QXVkaXQ9ITEsdGhpcy5nZXRDb21tZW50TGlzdCgpO2JyZWFrO2Nhc2UiY291bnRBdWRpdCI6dGhpcy5jb3VudEF1ZGl0V2FpdD0hMSx0aGlzLmNvdW50QXVkaXRQYXNzPSExLHRoaXMuY291bnRBdWRpdE5vdFBhc3M9ITEsdGhpcy5jb3VudEF1ZGl0PSEwLHRoaXMuZ2V0Q29tbWVudExpc3QoKX19LGdldENvbW1lbnRMaXN0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPSIiO249dGhpcy5jb3VudEF1ZGl0V2FpdD8wOm4sbj10aGlzLmNvdW50QXVkaXRQYXNzPzE6bixuPXRoaXMuY291bnRBdWRpdE5vdFBhc3M/MjpuLHRoaXMuJG9wdGlvbnMuZmlsdGVycy5zd2FwVGltZSh0aGlzLmNvbW1lbnQpO3ZhciB0LGE9bnVsbCE9PXRoaXMuY29tbWVudC5zdGFydERhdGU/bmV3IERhdGUodGhpcy5jb21tZW50LnN0YXJ0RGF0ZSkuZ2V0VGltZSgpOm51bGwsaT1udWxsIT09dGhpcy5jb21tZW50LmVuZERhdGU/bmV3IERhdGUodGhpcy5jb21tZW50LmVuZERhdGUpLmdldFRpbWUoKTpudWxsOyh0PXtwYWdlTm86dGhpcy5wYWdlTm8scGFnZVNpemU6dGhpcy5wYWdlU2l6ZSx1c2VyX25pY2tuYW1lOnRoaXMuY29tbWVudC51c2VyX25pY2tuYW1lLHVzZXJfcGhvbmU6dGhpcy5jb21tZW50LnVzZXJfcGhvbmUsdHlwZTp0aGlzLmNvbW1lbnQudHlwZSx0aXRsZTp0aGlzLmNvbW1lbnQudGl0bGUsYXVkaXQ6bix0aW1lU3RhcnQ6YSx0aW1lRW5kOml9LGJlKCJtYW5hZ2VyL0NvbW1lbnQvcGFnZUNvbW1lbnRzIix0KSkudGhlbihmdW5jdGlvbihuKXtpZihuLmRhdGEuc3RhdHVzKXt2YXIgdD1uLmRhdGEucmVzdWx0O2UudGFibGVEYXRhPXQubGlzdCxlLnRvdGFsPXQudG90YWx9fSl9LGhhbmRsZVNpemVDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5wYWdlU2l6ZT1lLHRoaXMuZ2V0Q29tbWVudExpc3QoKX0saGFuZGxlQ3VycmVudENoYW5nZTpmdW5jdGlvbihlKXt0aGlzLnBhZ2VObz1lLHRoaXMuZ2V0Q29tbWVudExpc3QoKX0sc2VsZWN0QWxsOmZ1bmN0aW9uKGUpe2UubGVuZ3RoPjA/dGhpcy5zZWxmU2VsZWN0QWxsPSEwOnRoaXMuc2VsZlNlbGVjdEFsbD0hMX0sc2V0TWFudVVuVG9wOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7MT09PWUuYXVkaXQ/eXMoe2NvbW1lbnRWbzp7Y29tbWVudGlkOmUuY29tbWVudGlkLHRvcDohMH19KS50aGVuKGZ1bmN0aW9uKGUpe24uZ2V0Q29tbWVudExpc3QoKX0pOnRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOiLlrqHmoLjpgJrov4fnmoTor4TorrrmiY3og73nva7pobYhIn0pfSxzZXRNYW51VG9wOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7eXMoe2NvbW1lbnRWbzp7Y29tbWVudGlkOmUuY29tbWVudGlkLHRvcDohMX19KS50aGVuKGZ1bmN0aW9uKGUpe24uZ2V0Q29tbWVudExpc3QoKX0pfSxkZWxldGVDb21tZW50czpmdW5jdGlvbihlKXt2YXIgbj10aGlzO3RoaXMuJGNvbmZpcm0oJ+aYr+WQpuWIoOmZpCInK2UudXNlcl9uaWNrbmFtZSsnIueahOivhOiuuj8nLCLmj5DnpLoiLHtjb25maXJtQnV0dG9uVGV4dDoi56Gu5a6aIixjYW5jZWxCdXR0b25UZXh0OiLlj5bmtogiLHR5cGU6Indhcm5pbmcifSkudGhlbihmdW5jdGlvbigpe3ZhciB0Oyh0PXtjb21tZW50Vm86e2NvbW1lbnRpZDplLmNvbW1lbnRpZH19LGJlKCJtYW5hZ2VyL0NvbW1lbnQvZGVsZXRlQ29tbWVudHMiLHQpKS50aGVuKGZ1bmN0aW9uKGUpe2Uuc3RhdHVzJiZuLiRtZXNzYWdlKHt0eXBlOiJzdWNjZXNzIixtZXNzYWdlOiLliKDpmaTmiJDlip8hIn0pLG4uZ2V0Q29tbWVudExpc3QoKSxuLmdldENvdW50Q29tbWVudHMoKX0pfSkuY2F0Y2goZnVuY3Rpb24oKXt9KX0sZm9yYmlkZGVuVXNlcjpmdW5jdGlvbihlKXt2YXIgbix0PXRoaXM7ZS51c2VyX2ZvcmJpZGRlbj9Dcyh7Zm9yYmlkZGVuQ29tbWVudFZvOnt1c2VyaWQ6ZS51c2VyaWR9fSkudGhlbihmdW5jdGlvbihlKXtlLmRhdGEuc3RhdHVzJiYodC4kbWVzc2FnZSh7dHlwZToic3VjY2VzcyIsbWVzc2FnZToi5Y+W5raI56aB6KiA5oiQ5YqfIn0pLHQuZ2V0Q29tbWVudExpc3QoKSl9KToobj17Zm9yYmlkZGVuQ29tbWVudFZvOnt1c2VyaWQ6ZS51c2VyaWR9fSxiZSgibWFuYWdlci9Db21tZW50L2ZvcmJpZGRlblVzZXJDb21tZW50IixuKSkudGhlbihmdW5jdGlvbihlKXtlLmRhdGEuc3RhdHVzJiYodC4kbWVzc2FnZSh7dHlwZToic3VjY2VzcyIsbWVzc2FnZToi56aB6KiA5oiQ5YqfIn0pLHQuZ2V0Q29tbWVudExpc3QoKSl9KX0sbG9va0NvbW1lbnQ6ZnVuY3Rpb24oZSl7dGhpcy5jb21tZW50LnVzZXJfbmlja25hbWU9ZS51c2VyX25pY2tuYW1lLHRoaXMuY29tbWVudC51c2VyX3Bob25lPWUudXNlcl9waG9uZSx0aGlzLmdldENvbW1lbnRMaXN0KCl9LGF1ZGl0X29waW5pb246ZnVuY3Rpb24oZSl7dmFyIG49IiI7bj1lLmF1ZGl0X29waW5pb24/ZS5hdWRpdF9vcGluaW9uOiLmmoLml6DlrqHmoLjmhI/op4EiLHRoaXMuJGFsZXJ0KG4sIuWuoeaguOaEj+ingSIse2NvbmZpcm1CdXR0b25UZXh0OiLnoa7lrpoiLGNhbGxiYWNrOmZ1bmN0aW9uKGUpe319KX0sYXVkaXQ6ZnVuY3Rpb24oZSl7MD09PWUuYXVkaXQmJih0aGlzLmRpYWxvZ1Zpc2libGU9ITAsdGhpcy5jb21wb25lbnROYW1lPSJBdWRpdCIsdGhpcy5jb21tZW50aWQ9ZS5jb21tZW50aWQpfSxzZWxlY3Rpb25DaGFuZ2U6ZnVuY3Rpb24oZSl7dmFyIG49dGhpczt0aGlzLmNvbW1lbnRMaXN0PVtdLGUuZm9yRWFjaChmdW5jdGlvbihlLHQsYSl7bi5jb21tZW50TGlzdC5wdXNoKGUuY29tbWVudGlkKX0pLHRoaXMuc2VsZWN0ZWRDb21tZW50SW5mbz1lfSxkZWxldGVNYW55Q29tbWVudDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYodGhpcy5jb21tZW50TGlzdC5sZW5ndGg8PTApcmV0dXJuIHRoaXMuJG1lc3NhZ2Uoe3R5cGU6ImVycm9yIixtZXNzYWdlOiLor7foh7PlsJHpgInmi6nkuIDmnaHor4TorrohIn0pLCExO3ZhciBuPSfmgqjmiYDpgInmi6nnmoQ6Iic7dGhpcy5zZWxlY3RlZENvbW1lbnRJbmZvLmZvckVhY2goZnVuY3Rpb24oZSx0LGEpe24rPSIoIitlLnVzZXJfbmlja25hbWUrIikifSksdGhpcy4kY29uZmlybShuKyLnlKjmiLfor4TorrrljbPlsIbooqvliKDpmaQ/Iiwi5o+Q56S6Iix7Y29uZmlybUJ1dHRvblRleHQ6IuehruWumiIsY2FuY2VsQnV0dG9uVGV4dDoi5Y+W5raIIix0eXBlOiJ3YXJuaW5nIn0pLnRoZW4oZnVuY3Rpb24oKXt2YXIgbjsobj17aWRMaXN0OmUuY29tbWVudExpc3R9LGJlKCJtYW5hZ2VyL0NvbW1lbnQvYmF0Y2hEZWxldGVDb21tZW50cyIsbikpLnRoZW4oZnVuY3Rpb24obil7Y29uc29sZS5sb2cobiksbi5zdGF0dXMmJmUuJG1lc3NhZ2Uoe3R5cGU6InN1Y2Nlc3MiLG1lc3NhZ2U6IuaJuemHj+WIoOmZpOaIkOWKnyEifSksZS5nZXRDb21tZW50TGlzdCgpLGUuZ2V0Q291bnRDb21tZW50cygpfSl9KS5jYXRjaChmdW5jdGlvbigpe30pfSxjbG9zZURpYWxvZzpmdW5jdGlvbigpe3RoaXMuY29tcG9uZW50TmFtZT0iIix0aGlzLmRpYWxvZ1Zpc2libGU9ITEsdGhpcy5nZXRDb21tZW50TGlzdCgpLHRoaXMuZ2V0Q291bnRDb21tZW50cygpfSx0b2dnbGVBbGxTZWxlY3Rpb246ZnVuY3Rpb24oZSl7dGhpcy4kcmVmcy5jaGFubmVsVGFibGUudG9nZ2xlQWxsU2VsZWN0aW9uKCl9fX0sTHM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJjb29tbWVudC1saXN0In0sW3QoImRpdiIsW3QoImNpcmNsZS10aXRsZSIse3N0YXRpY0NsYXNzOiJjaWNsZS1jb250cm9sbGVyIixhdHRyczp7InRpdGxlLW5hbWUiOiLor4TorrrnrqHnkIYifX0pLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoiY29tbWVudC10b3AtaW5mbyJ9LFt0KCJkaXYiLHtjbGFzczpbImNvbW1lbnQtaW5mby1pdGVtIixlLmNvdW50QXVkaXRXYWl0PyJjb21tZW50LWFjdGl2ZS1iZyI6IiJdLG9uOntjbGljazpmdW5jdGlvbihuKXtlLmNoYW5nZUNvbW1lbnQoImNvdW50QXVkaXRXYWl0Iil9fX0sW3QoImRpdiIse3N0YXRpY0NsYXNzOiJib3gifSxbdCgic3BhbiIse2NsYXNzOlsiY29tbWVudC1pY29uLWNvbnRhaW5lciIsZS5jb3VudEF1ZGl0V2FpdD8iaWNvbi1jb250YWluZXItYmciOiJjb21tZW50LXNlYy1iZyJdfSxbdCgiaSIse3N0YXRpY0NsYXNzOiJpY29uZm9udCBpY29uLWRhaXNoZW5oZSIsc3R5bGU6e2NvbG9yOmUuY291bnRBdWRpdFdhaXQ/IiM2OTRFRkYiOiIifX0pXSksZS5fdigiICIpLHQoInNwYW4iLHtzdGF0aWNDbGFzczoiY29tbWVudC1kYXRhIn0sW3QoInNwYW4iLHtzdHlsZTp7Y29sb3I6ZS5jb3VudEF1ZGl0V2FpdD8id2hpdGUiOiJyZ2JhKDcxLDcxLDcxLDEpIn19LFtlLl92KGUuX3MoZS5jb3VudEF1ZGl0V2FpdE51bSkpXSksZS5fdigiICIpLHQoInNwYW4iLHtzdHlsZTp7Y29sb3I6ZS5jb3VudEF1ZGl0V2FpdD8id2hpdGUiOiJyZ2JhKDcxLDcxLDcxLDEpIn19LFtlLl92KCLlvoXlrqHmoLgiKV0pXSldKV0pLGUuX3YoIiAiKSx0KCJkaXYiLHtjbGFzczpbImNvbW1lbnQtaW5mby1pdGVtIixlLmNvdW50QXVkaXRQYXNzPyJjb21tZW50LWFjdGl2ZS1iZyI6IiJdLG9uOntjbGljazpmdW5jdGlvbihuKXtlLmNoYW5nZUNvbW1lbnQoImNvdW50QXVkaXRQYXNzIil9fX0sW3QoImRpdiIse3N0YXRpY0NsYXNzOiJib3gifSxbdCgic3BhbiIse2NsYXNzOlsiY29tbWVudC1pY29uLWNvbnRhaW5lciIsZS5jb3VudEF1ZGl0UGFzcz8iaWNvbi1jb250YWluZXItYmciOiJjb21tZW50LXRoci1iZyJdfSxbdCgiaSIse3N0YXRpY0NsYXNzOiJpY29uZm9udCBpY29uLWF1ZGl0IixzdHlsZTp7Y29sb3I6ZS5jb3VudEF1ZGl0UGFzcz8iIzY5NEVGRiI6IiJ9fSldKSxlLl92KCIgIiksdCgic3BhbiIse3N0YXRpY0NsYXNzOiJjb21tZW50LWRhdGEifSxbdCgic3BhbiIse3N0eWxlOntjb2xvcjplLmNvdW50QXVkaXRQYXNzPyJ3aGl0ZSI6InJnYmEoNzEsNzEsNzEsMSkifX0sW2UuX3YoZS5fcyhlLmNvdW50QXVkaXRQYXNzTnVtKSldKSxlLl92KCIgIiksdCgic3BhbiIse3N0eWxlOntjb2xvcjplLmNvdW50QXVkaXRQYXNzPyJ3aGl0ZSI6InJnYmEoNzEsNzEsNzEsMSkifX0sW2UuX3YoIuW3sumAmui/hyIpXSldKV0pXSksZS5fdigiICIpLHQoImRpdiIse2NsYXNzOlsiY29tbWVudC1pbmZvLWl0ZW0iLGUuY291bnRBdWRpdE5vdFBhc3M/ImNvbW1lbnQtYWN0aXZlLWJnIjoiIl0sb246e2NsaWNrOmZ1bmN0aW9uKG4pe2UuY2hhbmdlQ29tbWVudCgiY291bnRBdWRpdE5vdFBhc3MiKX19fSxbdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImJveCJ9LFt0KCJzcGFuIix7Y2xhc3M6WyJjb21tZW50LWljb24tY29udGFpbmVyIixlLmNvdW50QXVkaXROb3RQYXNzPyJpY29uLWNvbnRhaW5lci1iZyI6ImNvbW1lbnQtZm91ci1iZyJdfSxbdCgiaSIse3N0YXRpY0NsYXNzOiJpY29uZm9udCBpY29uLXlpc2hhbmNodSIsc3R5bGU6e2NvbG9yOmUuY291bnRBdWRpdE5vdFBhc3M/IiM2OTRFRkYiOiIifX0pXSksZS5fdigiICIpLHQoInNwYW4iLHtzdGF0aWNDbGFzczoiY29tbWVudC1kYXRhIn0sW3QoInNwYW4iLHtzdHlsZTp7Y29sb3I6ZS5jb3VudEF1ZGl0Tm90UGFzcz8id2hpdGUiOiJyZ2JhKDcxLDcxLDcxLDEpIn19LFtlLl92KGUuX3MoZS5jb3VudEF1ZGl0Tm90UGFzc051bSkpXSksZS5fdigiICIpLHQoInNwYW4iLHtzdHlsZTp7Y29sb3I6ZS5jb3VudEF1ZGl0Tm90UGFzcz8id2hpdGUiOiJyZ2JhKDcxLDcxLDcxLDEpIn19LFtlLl92KCLmnKrpgJrov4ciKV0pXSldKV0pLGUuX3YoIiAiKSx0KCJkaXYiLHtjbGFzczpbImNvbW1lbnQtaW5mby1pdGVtIixlLmNvdW50QXVkaXQ/ImNvbW1lbnQtYWN0aXZlLWJnIjoiIl0sb246e2NsaWNrOmZ1bmN0aW9uKG4pe2UuY2hhbmdlQ29tbWVudCgiY291bnRBdWRpdCIpfX19LFt0KCJkaXYiLHtzdGF0aWNDbGFzczoiYm94In0sW3QoInNwYW4iLHtjbGFzczpbImNvbW1lbnQtaWNvbi1jb250YWluZXIiLGUuY291bnRBdWRpdD8iaWNvbi1jb250YWluZXItYmciOiJjb21tZW50LWZpcnN0LWJnIl19LFt0KCJpIix7c3RhdGljQ2xhc3M6Imljb25mb250IGljb24tc3F1YXJlLXNvbGlkIixzdHlsZTp7Y29sb3I6ZS5jb3VudEF1ZGl0PyIjNjk0RUZGIjoiIn19KV0pLGUuX3YoIiAiKSx0KCJzcGFuIix7c3RhdGljQ2xhc3M6ImNvbW1lbnQtZGF0YSJ9LFt0KCJzcGFuIix7c3R5bGU6e2NvbG9yOmUuY291bnRBdWRpdD8id2hpdGUiOiJyZ2JhKDcxLDcxLDcxLDEpIn19LFtlLl92KGUuX3MoZS5jb3VudEF1ZGl0TnVtKSldKSxlLl92KCIgIiksdCgic3BhbiIse3N0eWxlOntjb2xvcjplLmNvdW50QXVkaXQ/IndoaXRlIjoicmdiYSg3MSw3MSw3MSwxKSJ9fSxbZS5fdigi5YWo6YOoIildKV0pXSldKV0pLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoic2VhcmNoLWZvcm0tY29udGFpbmVyIn0sW3QoImVsLWZvcm0iLHtzdGF0aWNDbGFzczoiZGVtby1mb3JtLWlubGluZSIsYXR0cnM6e2lubGluZTohMCxtb2RlbDplLmNvbW1lbnR9fSxbdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLnlKjmiLflkI0ifX0sW3QoImVsLWlucHV0Iix7YXR0cnM6e2NsZWFyYWJsZToiIn0sbW9kZWw6e3ZhbHVlOmUuY29tbWVudC51c2VyX25pY2tuYW1lLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNvbW1lbnQsInVzZXJfbmlja25hbWUiLG4pfSxleHByZXNzaW9uOiJjb21tZW50LnVzZXJfbmlja25hbWUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLms6jlhozmiYvmnLoifX0sW3QoImVsLWlucHV0Iix7YXR0cnM6e2NsZWFyYWJsZToiIn0sbW9kZWw6e3ZhbHVlOmUuY29tbWVudC51c2VyX3Bob25lLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNvbW1lbnQsInVzZXJfcGhvbmUiLG4pfSxleHByZXNzaW9uOiJjb21tZW50LnVzZXJfcGhvbmUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7YXR0cnM6e2xhYmVsOiLmoIfpopgifX0sW3QoImVsLWlucHV0Iix7YXR0cnM6e2NsZWFyYWJsZToiIn0sbW9kZWw6e3ZhbHVlOmUuY29tbWVudC50aXRsZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jb21tZW50LCJ0aXRsZSIsbil9LGV4cHJlc3Npb246ImNvbW1lbnQudGl0bGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6InNlYXJjaC1sZWZ0IixhdHRyczp7bGFiZWw6IuaooeWdlyJ9fSxbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiIifSxvbjp7Y2hhbmdlOmUuZ2V0Q29tbWVudExpc3R9LG1vZGVsOnt2YWx1ZTplLmNvbW1lbnQudHlwZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jb21tZW50LCJ0eXBlIixuKX0sZXhwcmVzc2lvbjoiY29tbWVudC50eXBlIn19LFt0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6IiIsbGFiZWw6IuWFqOmDqCJ9fSksZS5fdigiICIpLHQoImVsLW9wdGlvbiIse2F0dHJzOnt2YWx1ZToxLGxhYmVsOiLotYTorq8ifX0pLGUuX3YoIiAiKSx0KCJlbC1vcHRpb24iLHthdHRyczp7dmFsdWU6MixsYWJlbDoi54K55pKtIn19KSxlLl92KCIgIiksdCgiZWwtb3B0aW9uIix7YXR0cnM6e3ZhbHVlOjMsbGFiZWw6IuebtOaSrSJ9fSldLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljU3R5bGU6e3Bvc2l0aW9uOiJyZWxhdGl2ZSIsbGVmdDoiLTE1cHgifSxhdHRyczp7bGFiZWw6IuivhOiuuuaXtumXtCJ9fSxbdCgiZWwtZGF0ZS1waWNrZXIiLHthdHRyczp7dGl0bGU6ZS5fZigiRm9ybWF0RGF0ZSIpKGUuY29tbWVudC5zdGFydERhdGUsInl5eXktTU0tZGQgaGg6bW0iKSx0eXBlOiJkYXRldGltZSIsZm9ybWF0OiJ5eXl5LU1NLWRkIEhIOm1tIixwbGFjZWhvbGRlcjoi6YCJ5oup5pe26Ze0In0sb246e2NoYW5nZTplLmdldENvbW1lbnRMaXN0fSxtb2RlbDp7dmFsdWU6ZS5jb21tZW50LnN0YXJ0RGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5jb21tZW50LCJzdGFydERhdGUiLG4pfSxleHByZXNzaW9uOiJjb21tZW50LnN0YXJ0RGF0ZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNDbGFzczoiZGF0ZS1sZWZ0IixhdHRyczp7bGFiZWw6Iue7k+adn+aXtumXtCJ9fSxbdCgiZWwtZGF0ZS1waWNrZXIiLHthdHRyczp7dGl0bGU6ZS5fZigiRm9ybWF0RGF0ZSIpKGUuY29tbWVudC5lbmREYXRlLCJ5eXl5LU1NLWRkIGhoOm1tIiksdHlwZToiZGF0ZXRpbWUiLGZvcm1hdDoieXl5eS1NTS1kZCBISDptbSIscGxhY2Vob2xkZXI6IumAieaLqeaXtumXtCJ9LG9uOntjaGFuZ2U6ZS5nZXRDb21tZW50TGlzdH0sbW9kZWw6e3ZhbHVlOmUuY29tbWVudC5lbmREYXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmNvbW1lbnQsImVuZERhdGUiLG4pfSxleHByZXNzaW9uOiJjb21tZW50LmVuZERhdGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7c3RhdGljU3R5bGU6eyJtYXJnaW4tbGVmdCI6IjEycHgifSxhdHRyczp7dHlwZToicHJpbWFyeSJ9LG9uOntjbGljazplLmdldENvbW1lbnRMaXN0fX0sW2UuX3YoIlxuICAgICAgICAgIOafpeivolxuICAgICAgICAgICIpLHQoImkiLHtzdGF0aWNDbGFzczoiZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQifSldKV0sMSldLDEpXSwxKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InRhYmxlLWxpc3QifSxbdCgiZWwtdGFibGUiLHtyZWY6ImNoYW5uZWxUYWJsZSIsc3RhdGljQ2xhc3M6Indob2xlLXRhYmxlIixhdHRyczp7ZGF0YTplLnRhYmxlRGF0YSxzdHJpcGU6IiIsIm1pbi1oZWlnaHQiOiI0MDAifSxvbjp7InNlbGVjdC1hbGwiOmUuc2VsZWN0QWxsLCJzZWxlY3Rpb24tY2hhbmdlIjplLnNlbGVjdGlvbkNoYW5nZX19LFt0KCJlbC10YWJsZS1jb2x1bW4iLHthdHRyczp7dHlwZToic2VsZWN0aW9uIixhbGlnbjoiY2VudGVyIix3aWR0aDoiNTUifX0pLGUuX3YoIiAiKSxlLl9sKGUudGFibGVIZWFkZXIsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtdGFibGUtY29sdW1uIix7a2V5Om4sYXR0cnM6e3Byb3A6ZS5wcm9wLGxhYmVsOmUubGFiZWwsd2lkdGg6ZS53aWR0aCxmb3JtYXR0ZXI6ZS5mb3JtYXR0ZXIsYWxpZ246ImNlbnRlciIsZml4ZWQ6IiIsInNob3ctb3ZlcmZsb3ctdG9vbHRpcCI6IiJ9fSl9KSxlLl92KCIgIiksdCgiZWwtdGFibGUtY29sdW1uIix7YXR0cnM6e2xhYmVsOiLnva7pobbnirbmgIEiLGFsaWduOiJjZW50ZXIifSxzY29wZWRTbG90czplLl91KFt7a2V5OiJkZWZhdWx0IixmbjpmdW5jdGlvbihuKXtyZXR1cm5bbi5yb3cudG9wP3QoImVsLXRvb2x0aXAiLHtzdGF0aWNDbGFzczoiaXRlbSIsYXR0cnM6e2VmZmVjdDoiZGFyayIsY29udGVudDoi54K55Ye75Y+W5raI572u6aG2IixwbGFjZW1lbnQ6InRvcCJ9fSxbdCgiZWwtdGFnIix7c3RhdGljQ2xhc3M6InNldFBvaW50ZXIiLHN0YXRpY1N0eWxlOnt3aWR0aDoiNjBweCIsY29sb3I6IiM2OTRlZmYifSxhdHRyczp7c2l6ZToibWluaSJ9LG5hdGl2ZU9uOntjbGljazpmdW5jdGlvbih0KXtlLnNldE1hbnVUb3Aobi5yb3cpfX19LFtlLl92KCJcbiAgICAgICAgICAgICAg5Y+W5raI572u6aG2XG4gICAgICAgICAgICAiKV0pXSwxKTp0KCJlbC10b29sdGlwIix7c3RhdGljQ2xhc3M6Iml0ZW0iLGF0dHJzOntlZmZlY3Q6ImRhcmsiLGNvbnRlbnQ6IueCueWHu+e9rumhtiIscGxhY2VtZW50OiJ0b3AifX0sW3QoImVsLXRhZyIse3N0YXRpY0NsYXNzOiJzZXRQb2ludGVyIixzdGF0aWNTdHlsZTp7d2lkdGg6IjYwcHgifSxhdHRyczp7c2l6ZToibWluaSJ9LG5hdGl2ZU9uOntjbGljazpmdW5jdGlvbih0KXtlLnNldE1hbnVVblRvcChuLnJvdyl9fX0sW2UuX3YoIlxuICAgICAgICAgICAgICDnva7pobZcbiAgICAgICAgICAgICIpXSldLDEpXX19XSl9KSxlLl92KCIgIiksdCgiZWwtdGFibGUtY29sdW1uIix7YXR0cnM6e2xhYmVsOiLmk43kvZwiLGFsaWduOiJjZW50ZXIiLHdpZHRoOiIzNTAifSxzY29wZWRTbG90czplLl91KFt7a2V5OiJkZWZhdWx0IixmbjpmdW5jdGlvbihuKXtyZXR1cm5bdCgic3BhbiIse3N0YXRpY0NsYXNzOiJtYW51LWNvbnRhaW5lciJ9LFt0KCJzcGFuIix7c3RhdGljQ2xhc3M6Im1hbnUgZGVsZXRlLWFjdGl2ZSIsb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuYXVkaXQobi5yb3cpfX19LFtlLl92KCJcbiAgICAgICAgICAgICAgIitlLl9zKDA9PT1uLnJvdy5hdWRpdD8i5a6h5qC4Ijoi5bey5a6h5qC4IikrIlxuICAgICAgICAgICAgIildKSxlLl92KCIgIiksdCgic3BhbiIse2NsYXNzOlsibWFudSIsImRlbGV0ZS1hY3RpdmUiXSxvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5kZWxldGVDb21tZW50cyhuLnJvdyl9fX0sW2UuX3YoIlxuICAgICAgICAgICAgICDliKDpmaRcbiAgICAgICAgICAgICIpXSksZS5fdigiICIpLHQoInNwYW4iLHtjbGFzczpbIm1hbnUiLCJkZWxldGUtYWN0aXZlIl0sb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuZm9yYmlkZGVuVXNlcihuLnJvdyl9fX0sW2UuX3YoIlxuICAgICAgICAgICAgICAiK2UuX3Mobi5yb3cudXNlcl9mb3JiaWRkZW4/IuWPlua2iOemgeiogCI6IuemgeiogCIpKyJcbiAgICAgICAgICAgICIpXSksZS5fdigiICIpLHQoInNwYW4iLHtzdGF0aWNDbGFzczoibWFudSBjb21tZW50LWRldGFpbCIsb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UubG9va0NvbW1lbnQobi5yb3cpfX19LFtlLl92KCJcbiAgICAgICAgICAgICAg6K+E6K665p+l55yLXG4gICAgICAgICAgICAiKV0pLGUuX3YoIiAiKSx0KCJzcGFuIix7c3RhdGljQ2xhc3M6Im1hbnUgY29tbWVudC1kZXRhaWwiLG9uOntjbGljazpmdW5jdGlvbih0KXtlLmF1ZGl0X29waW5pb24obi5yb3cpfX19LFtlLl92KCJcbiAgICAgICAgICAgICAg5a6h5qC45oSP6KeBXG4gICAgICAgICAgICAiKV0pXSldfX1dKX0pXSwyKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InBhZ2luYXRpb24ifSxbdCgiZGl2IixbdCgiZWwtY2hlY2tib3giLHtvbjp7Y2hhbmdlOmUudG9nZ2xlQWxsU2VsZWN0aW9ufSxtb2RlbDp7dmFsdWU6ZS5zZWxmU2VsZWN0QWxsLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2Uuc2VsZlNlbGVjdEFsbD1ufSxleHByZXNzaW9uOiJzZWxmU2VsZWN0QWxsIn19LFtlLl92KCJcbiAgICAgICAgICDlhajpgIlcbiAgICAgICAgIildKSxlLl92KCIgIiksdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiLor7fpgInmi6kifSxtb2RlbDp7dmFsdWU6ZS5iYXRjaFByb2Nlc3MsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS5iYXRjaFByb2Nlc3M9bn0sZXhwcmVzc2lvbjoiYmF0Y2hQcm9jZXNzIn19LGUuX2woZS5wcm9jZXNzTGlzdCxmdW5jdGlvbihlKXtyZXR1cm4gdCgiZWwtb3B0aW9uIix7a2V5OmUudmFsdWUsYXR0cnM6e2xhYmVsOmUubGFiZWwsdmFsdWU6ZS52YWx1ZSxkaXNhYmxlZDplLmRpc2FibGVkfX0pfSksMSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmUuZGVsZXRlTWFueUNvbW1lbnR9fSxbZS5fdigi56Gu5a6aIildKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7ZGlyZWN0aXZlczpbe25hbWU6InNob3ciLHJhd05hbWU6InYtc2hvdyIsdmFsdWU6ITEsZXhwcmVzc2lvbjoiMSA9PT0gMiJ9XSxhdHRyczp7dHlwZToicHJpbWFyeSJ9fSxbZS5fdigi5a+85Ye65pWw5o2uIildKV0sMSksZS5fdigiICIpLHQoImVsLXBhZ2luYXRpb24iLHthdHRyczp7dG90YWw6ZS50b3RhbCwicGFnZS1zaXplcyI6WzEwLDIwLDMwLDQwXSxiYWNrZ3JvdW5kOiIiLGxheW91dDoidG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dCJ9LG9uOnsic2l6ZS1jaGFuZ2UiOmUuaGFuZGxlU2l6ZUNoYW5nZSwiY3VycmVudC1jaGFuZ2UiOmUuaGFuZGxlQ3VycmVudENoYW5nZX19KV0sMSldLDEpLGUuX3YoIiAiKSx0KCJlbC1kaWFsb2ciLHthdHRyczp7dmlzaWJsZTplLmRpYWxvZ1Zpc2libGUsImN1c3RvbS1jbGFzcyI6ImN1c3RvbS1kaWFsb2ciLHRpdGxlOiLlrqHmoLgiLHdpZHRoOiIzMCUifSxvbjp7InVwZGF0ZTp2aXNpYmxlIjpmdW5jdGlvbihuKXtlLmRpYWxvZ1Zpc2libGU9bn0sY2xvc2U6ZS5jbG9zZURpYWxvZ319LFt0KGUuY29tcG9uZW50TmFtZSx7dGFnOiJkaXYiLGF0dHJzOntjb21tZW50aWQ6ZS5jb21tZW50aWR9LG9uOnsiY2xvc2UtZGlhbG9nIjplLmNsb3NlRGlhbG9nfX0pXSwxKV0sMSl9O0xzLl93aXRoU3RyaXBwZWQ9ITA7dmFyIEJzPXtyZW5kZXI6THMsc3RhdGljUmVuZGVyRm5zOltdfSxNcz1Cczt2YXIgSXM9ITE7dmFyIFRzPXQoIlZVLzgiKShEcyxNcywhMSxmdW5jdGlvbihlKXtJc3x8KHQoIlp3YXciKSx0KCJRc3dZIikpfSwiZGF0YS12LTQ0NzY3MjY4IixudWxsKTtUcy5vcHRpb25zLl9fZmlsZT0ic3JjL2NvbXBvbmVudHMvbWFuYWdlQ29tbWVudC9jb21tZW50TGlzdC52dWUiO3ZhciAkcz1Ucy5leHBvcnRzLHpzPXtjb21wb25lbnRzOntDaXJjbGVUaXRsZTplbixBdWRpdDpFc30sZGF0YTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJue2ZvcmJpZGRlbkNvbW1lbnQ6e3VzZXJfbmlja25hbWU6IiIsdXNlcl9waG9uZToiIixzdGFydERhdGU6IiIsZW5kRGF0ZToiIn0sY2xpY2tDZWxsSW5kZXg6LTEsdGFibGVIZWFkZXI6W3twcm9wOiJ1c2VyX25pY2tuYW1lIixsYWJlbDoi5pi156ewIn0se3Byb3A6InVzZXJfcGhvbmUiLGxhYmVsOiLnlLXor50ifSx7cHJvcDoiY3JlYXRldGltZSIsbGFiZWw6IuemgeiogOW8gOWni+aXtumXtCIsd2lkdGg6MjAwLGZvcm1hdHRlcjpmdW5jdGlvbihuLHQsYSxpKXtyZXR1cm4gZS4kb3B0aW9ucy5maWx0ZXJzLkZvcm1hdERhdGUoYSwieXl5eS1NTS1kZCBoaDptbSIpfX1dLHRhYmxlRGF0YTpbXSxpbmRleDotMSxwYWdlTm86MSxwYWdlU2l6ZToxMCx0b3RhbDowLHNlbGZTZWxlY3RBbGw6ITEsY2FuY2VsRm9yYmlkZGVuQ29tbWVudExpc3Q6W10sc2VsZWN0aW9uRm9yYmlkZGVuOltdfX0sd2F0Y2g6eyJmb3JiaWRkZW5Db21tZW50LnVzZXJfbmlja25hbWUiOmZ1bmN0aW9uKCl7dGhpcy5nZXRGb3JiaWRkZW5Db21tZW50TGlzdCgpfSwiZm9yYmlkZGVuQ29tbWVudC51c2VyX3Bob25lIjpmdW5jdGlvbigpe3RoaXMuZ2V0Rm9yYmlkZGVuQ29tbWVudExpc3QoKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLmdldEZvcmJpZGRlbkNvbW1lbnRMaXN0KCl9LG1ldGhvZHM6e2dldEZvcmJpZGRlbkNvbW1lbnRMaXN0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiRvcHRpb25zLmZpbHRlcnMuc3dhcFRpbWUodGhpcy5mb3JiaWRkZW5Db21tZW50KTt2YXIgbix0PW51bGwhPT10aGlzLmZvcmJpZGRlbkNvbW1lbnQuc3RhcnREYXRlP25ldyBEYXRlKHRoaXMuZm9yYmlkZGVuQ29tbWVudC5zdGFydERhdGUpLmdldFRpbWUoKTpudWxsLGE9bnVsbCE9PXRoaXMuZm9yYmlkZGVuQ29tbWVudC5lbmREYXRlP25ldyBEYXRlKHRoaXMuZm9yYmlkZGVuQ29tbWVudC5lbmREYXRlKS5nZXRUaW1lKCk6bnVsbDsobj17cGFnZU5vOnRoaXMucGFnZU5vLHBhZ2VTaXplOnRoaXMucGFnZVNpemUsdXNlcl9uaWNrbmFtZTp0aGlzLmZvcmJpZGRlbkNvbW1lbnQudXNlcl9uaWNrbmFtZSx1c2VyX3Bob25lOnRoaXMuZm9yYmlkZGVuQ29tbWVudC51c2VyX3Bob25lLHRpbWVTdGFydDp0LHRpbWVFbmQ6YX0sYmUoIm1hbmFnZXIvQ29tbWVudC9wYWdlRm9yYmlkZGVuQ29tbWVudCIsbikpLnRoZW4oZnVuY3Rpb24obil7aWYobi5kYXRhLnN0YXR1cyl7dmFyIHQ9bi5kYXRhLnJlc3VsdDtlLnRhYmxlRGF0YT10Lmxpc3QsZS50b3RhbD10LnRvdGFsfX0pfSxoYW5kbGVTaXplQ2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMucGFnZVNpemU9ZSx0aGlzLmdldEZvcmJpZGRlbkNvbW1lbnRMaXN0KCl9LGhhbmRsZUN1cnJlbnRDaGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5wYWdlTm89ZSx0aGlzLmdldEZvcmJpZGRlbkNvbW1lbnRMaXN0KCl9LHNlbGVjdEFsbDpmdW5jdGlvbihlKXtlLmxlbmd0aD4wP3RoaXMuc2VsZlNlbGVjdEFsbD0hMDp0aGlzLnNlbGZTZWxlY3RBbGw9ITF9LHNlbGVjdGlvbkNoYW5nZTpmdW5jdGlvbihlKXt2YXIgbj10aGlzO3RoaXMuY2FuY2VsRm9yYmlkZGVuQ29tbWVudExpc3Q9W10sZS5mb3JFYWNoKGZ1bmN0aW9uKGUsdCxhKXtuLmNhbmNlbEZvcmJpZGRlbkNvbW1lbnRMaXN0LnB1c2goZS51c2VyaWQpfSksdGhpcy5zZWxlY3Rpb25Gb3JiaWRkZW49ZX0sY2FuY2VsRm9yYmlkZGVuOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7Q3Moe2ZvcmJpZGRlbkNvbW1lbnRWbzp7dXNlcmlkOmUudXNlcmlkfX0pLnRoZW4oZnVuY3Rpb24oZSl7ZS5kYXRhLnN0YXR1cyYmKG4uJG1lc3NhZ2Uoe3R5cGU6InN1Y2Nlc3MiLG1lc3NhZ2U6IuW3suWPlua2iOemgeiogCJ9KSxuLmdldEZvcmJpZGRlbkNvbW1lbnRMaXN0KCkpfSl9LGNhbmNlbE1hbnlGb3JiaWRkZW5Db21tZW50OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZih0aGlzLmNhbmNlbEZvcmJpZGRlbkNvbW1lbnRMaXN0Lmxlbmd0aDw9MClyZXR1cm4gdGhpcy4kbWVzc2FnZSh7dHlwZToiZXJyb3IiLG1lc3NhZ2U6Iuivt+iHs+WwkemAieaLqeS4gOS4queUqOaItyEifSksITE7dmFyIG49IuaCqOWNs+WwhuWPlua2iCI7dGhpcy5zZWxlY3Rpb25Gb3JiaWRkZW4uZm9yRWFjaChmdW5jdGlvbihlLHQsYSl7bis9IigiK2UudXNlcl9uaWNrbmFtZSsiKSJ9KSx0aGlzLiRjb25maXJtKG4rIueahOemgeiogD8iLCLmj5DnpLoiLHtjb25maXJtQnV0dG9uVGV4dDoi56Gu5a6aIixjYW5jZWxCdXR0b25UZXh0OiLlj5bmtogiLHR5cGU6Indhcm5pbmcifSkudGhlbihmdW5jdGlvbigpe3ZhciBuOyhuPXtpZExpc3Q6ZS5jYW5jZWxGb3JiaWRkZW5Db21tZW50TGlzdH0sYmUoIm1hbmFnZXIvQ29tbWVudC9iYXRjaERlbGV0ZUZvcmJpZGRlbkNvbW1lbnQiLG4pKS50aGVuKGZ1bmN0aW9uKG4pe24uZGF0YS5zdGF0dXMmJmUuJG1lc3NhZ2Uoe3R5cGU6InN1Y2Nlc3MiLG1lc3NhZ2U6IuaJuemHj+WPlua2iOemgeiogOaIkOWKnyEifSksZS5nZXRGb3JiaWRkZW5Db21tZW50TGlzdCgpfSl9KS5jYXRjaChmdW5jdGlvbigpe30pfSx0b2dnbGVBbGxTZWxlY3Rpb246ZnVuY3Rpb24oZSl7dGhpcy4kcmVmcy5jaGFubmVsVGFibGUudG9nZ2xlQWxsU2VsZWN0aW9uKCl9fX0sVXM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJsaW1pdCJ9LFt0KCJkaXYiLFt0KCJjaXJjbGUtdGl0bGUiLHtzdGF0aWNDbGFzczoiY2ljbGUtY29udHJvbGxlciIsYXR0cnM6eyJ0aXRsZS1uYW1lIjoi56aB6KiA566h55CGIn19KSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InNlYXJjaC1mb3JtLWNvbnRhaW5lciJ9LFt0KCJlbC1mb3JtIix7c3RhdGljQ2xhc3M6ImRlbW8tZm9ybS1pbmxpbmUiLGF0dHJzOntpbmxpbmU6ITAsbW9kZWw6ZS5mb3JiaWRkZW5Db21tZW50fX0sW3QoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi55So5oi35ZCNIn19LFt0KCJlbC1pbnB1dCIse2F0dHJzOntjbGVhcmFibGU6IiJ9LG1vZGVsOnt2YWx1ZTplLmZvcmJpZGRlbkNvbW1lbnQudXNlcl9uaWNrbmFtZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5mb3JiaWRkZW5Db21tZW50LCJ1c2VyX25pY2tuYW1lIixuKX0sZXhwcmVzc2lvbjoiZm9yYmlkZGVuQ29tbWVudC51c2VyX25pY2tuYW1lIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5rOo5YaM5omL5py6In19LFt0KCJlbC1pbnB1dCIse2F0dHJzOntjbGVhcmFibGU6IiJ9LG1vZGVsOnt2YWx1ZTplLmZvcmJpZGRlbkNvbW1lbnQudXNlcl9waG9uZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5mb3JiaWRkZW5Db21tZW50LCJ1c2VyX3Bob25lIixuKX0sZXhwcmVzc2lvbjoiZm9yYmlkZGVuQ29tbWVudC51c2VyX3Bob25lIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY1N0eWxlOntwb3NpdGlvbjoicmVsYXRpdmUifSxhdHRyczp7bGFiZWw6IuW8gOWni+aXtumXtCJ9fSxbdCgiZWwtZGF0ZS1waWNrZXIiLHthdHRyczp7dGl0bGU6ZS5fZigiRm9ybWF0RGF0ZSIpKGUuZm9yYmlkZGVuQ29tbWVudC5zdGFydERhdGUsInl5eXktTU0tZGQgaGg6bW0iKSx0eXBlOiJkYXRldGltZSIsZm9ybWF0OiJ5eXl5LU1NLWRkIEhIOm1tIixwbGFjZWhvbGRlcjoi6YCJ5oup5pe26Ze0In0sbW9kZWw6e3ZhbHVlOmUuZm9yYmlkZGVuQ29tbWVudC5zdGFydERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZm9yYmlkZGVuQ29tbWVudCwic3RhcnREYXRlIixuKX0sZXhwcmVzc2lvbjoiZm9yYmlkZGVuQ29tbWVudC5zdGFydERhdGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljU3R5bGU6eyJtYXJnaW4tbGVmdCI6Ii0xNHB4In0sYXR0cnM6e2xhYmVsOiLnu5PmnZ/ml7bpl7QifX0sW3QoImVsLWRhdGUtcGlja2VyIix7YXR0cnM6e3RpdGxlOmUuX2YoIkZvcm1hdERhdGUiKShlLmZvcmJpZGRlbkNvbW1lbnQuZW5kRGF0ZSwieXl5eS1NTS1kZCBoaDptbSIpLHR5cGU6ImRhdGV0aW1lIixmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLHBsYWNlaG9sZGVyOiLpgInmi6nml7bpl7QifSxtb2RlbDp7dmFsdWU6ZS5mb3JiaWRkZW5Db21tZW50LmVuZERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUuZm9yYmlkZGVuQ29tbWVudCwiZW5kRGF0ZSIsbil9LGV4cHJlc3Npb246ImZvcmJpZGRlbkNvbW1lbnQuZW5kRGF0ZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1idXR0b24iLHtzdGF0aWNTdHlsZTp7Im1hcmdpbi1sZWZ0IjoiODJweCJ9LGF0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmUuZ2V0Rm9yYmlkZGVuQ29tbWVudExpc3R9fSxbZS5fdigiXG4gICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgIiksdCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCJ9KV0pXSwxKV0sMSldLDEpLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoidGFibGUtbGlzdCJ9LFt0KCJlbC10YWJsZSIse3JlZjoiY2hhbm5lbFRhYmxlIixzdGF0aWNDbGFzczoid2hvbGUtdGFibGUiLGF0dHJzOntkYXRhOmUudGFibGVEYXRhLHN0cmlwZToiIiwibWluLWhlaWdodCI6IjQwMCJ9LG9uOnsic2VsZWN0LWFsbCI6ZS5zZWxlY3RBbGwsInNlbGVjdGlvbi1jaGFuZ2UiOmUuc2VsZWN0aW9uQ2hhbmdlfX0sW3QoImVsLXRhYmxlLWNvbHVtbiIse2F0dHJzOnt0eXBlOiJzZWxlY3Rpb24iLGFsaWduOiJjZW50ZXIiLHdpZHRoOiI1NSJ9fSksZS5fdigiICIpLGUuX2woZS50YWJsZUhlYWRlcixmdW5jdGlvbihlLG4pe3JldHVybiB0KCJlbC10YWJsZS1jb2x1bW4iLHtrZXk6bixhdHRyczp7cHJvcDplLnByb3AsbGFiZWw6ZS5sYWJlbCx3aWR0aDplLndpZHRoLGZvcm1hdHRlcjplLmZvcm1hdHRlcixhbGlnbjoiY2VudGVyIixmaXhlZDoiIiwic2hvdy1vdmVyZmxvdy10b29sdGlwIjoiIn19KX0pLGUuX3YoIiAiKSx0KCJlbC10YWJsZS1jb2x1bW4iLHthdHRyczp7bGFiZWw6IuaTjeS9nCIsYWxpZ246ImNlbnRlciIsd2lkdGg6IjI1MCJ9LHNjb3BlZFNsb3RzOmUuX3UoW3trZXk6ImRlZmF1bHQiLGZuOmZ1bmN0aW9uKG4pe3JldHVyblt0KCJzcGFuIix7c3RhdGljQ2xhc3M6Im1hbnUtY29udGFpbmVyIn0sW3QoInNwYW4iLHtzdGF0aWNDbGFzczoibWFudSBkZWxldGUtYWN0aXZlIixvbjp7Y2xpY2s6ZnVuY3Rpb24odCl7ZS5jYW5jZWxGb3JiaWRkZW4obi5yb3cpfX19LFtlLl92KCJcbiAgICAgICAgICAgICAg5Y+W5raI56aB6KiAXG4gICAgICAgICAgICAiKV0pXSldfX1dKX0pXSwyKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InBhZ2luYXRpb24ifSxbdCgiZGl2IixbdCgiZWwtY2hlY2tib3giLHtvbjp7Y2hhbmdlOmUudG9nZ2xlQWxsU2VsZWN0aW9ufSxtb2RlbDp7dmFsdWU6ZS5zZWxmU2VsZWN0QWxsLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2Uuc2VsZlNlbGVjdEFsbD1ufSxleHByZXNzaW9uOiJzZWxmU2VsZWN0QWxsIn19LFtlLl92KCJcbiAgICAgICAgICDlhajpgIlcbiAgICAgICAgIildKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InByaW1hcnkiLHNpemU6Im1lZGl1bSJ9LG9uOntjbGljazplLmNhbmNlbE1hbnlGb3JiaWRkZW5Db21tZW50fX0sW2UuX3YoIuaJuemHj+WPlua2iOemgeiogCIpXSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse2RpcmVjdGl2ZXM6W3tuYW1lOiJzaG93IixyYXdOYW1lOiJ2LXNob3ciLHZhbHVlOiExLGV4cHJlc3Npb246IjEgPT09IDIifV0sYXR0cnM6e3R5cGU6InByaW1hcnkiLHNpemU6Im1lZGl1bSJ9LG9uOntjbGljazplLmNhbmNlbE1hbnlGb3JiaWRkZW5Db21tZW50fX0sW2UuX3YoIuWvvOWHuuaVsOaNriIpXSldLDEpLGUuX3YoIiAiKSx0KCJlbC1wYWdpbmF0aW9uIix7YXR0cnM6e3RvdGFsOmUudG90YWwsInBhZ2Utc2l6ZXMiOlsxMCwyMCwzMCw0MF0sYmFja2dyb3VuZDoiIixsYXlvdXQ6InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQifSxvbjp7InNpemUtY2hhbmdlIjplLmhhbmRsZVNpemVDaGFuZ2UsImN1cnJlbnQtY2hhbmdlIjplLmhhbmRsZUN1cnJlbnRDaGFuZ2V9fSldLDEpXSwxKV0pfTtVcy5fd2l0aFN0cmlwcGVkPSEwO3ZhciBOcz17cmVuZGVyOlVzLHN0YXRpY1JlbmRlckZuczpbXX0sUnM9TnM7dmFyIFZzPSExO3ZhciBqcz10KCJWVS84IikoenMsUnMsITEsZnVuY3Rpb24oZSl7VnN8fCh0KCIzQnZTIiksdCgiRktCZSIpKX0sImRhdGEtdi00ZTc3YzQ4NCIsbnVsbCk7anMub3B0aW9ucy5fX2ZpbGU9InNyYy9jb21wb25lbnRzL21hbmFnZUNvbW1lbnQvbGltaXRMaXN0LnZ1ZSI7dmFyIFBzPWpzLmV4cG9ydHMsSHM9e25hbWU6IkFzc2lnblJvbGUiLHByb3BzOnt1c2VyY29kZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDoiIn0sdXNlcm5hbWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6IiJ9fSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2FsbFJvbGVMaXN0OltdfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuZ2V0VXNlckluZm8oKX0sbWV0aG9kczp7Y2FuY2VsOmZ1bmN0aW9uKCl7dGhpcy4kZW1pdCgiY2xvc2VEaWFsb2ciKX0sZ2V0VXNlckluZm86ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3NzKHtvcmdVc2Vyczp7dXNlcmNvZGU6dGhpcy51c2VyY29kZX19KS50aGVuKGZ1bmN0aW9uKG4pe24uZGF0YS5zdGF0dXMmJihlLmFsbFJvbGVMaXN0PW4uZGF0YS5yZXN1bHQpfSl9LGNob29zZVJvbGU6ZnVuY3Rpb24oZSxuKXt2YXIgdCxhPXRoaXM7KHQ9e2Fzc2lnbjp7dXNlcmNvZGU6dGhpcy51c2VyY29kZSxyb2xlaWQ6ZSxhc3NpZ25PckNhbmVsOm59fSxiZSgibWFuYWdlci9PcmdVc2Vycy9hc3NpZ25PckNhbmVsVXNlclJvbGUiLHQpKS50aGVuKGZ1bmN0aW9uKGUpe2UuZGF0YS5zdGF0dXMmJmEuJG1lc3NhZ2Uoe3R5cGU6InN1Y2Nlc3MiLG1lc3NhZ2U6IuWIhumFjeaIkOWKnyJ9KX0pfX19LFFzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPWUuJGNyZWF0ZUVsZW1lbnQsdD1lLl9zZWxmLl9jfHxuO3JldHVybiB0KCJkaXYiLHtzdGF0aWNDbGFzczoiYXNzaWduUm9sZSJ9LFt0KCJlbC1mb3JtIix7YXR0cnM6e2lubGluZTohMCxzaXplOiJzbWFsbCJ9fSxbdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljU3R5bGU6eyJtYXJnaW4tbGVmdCI6IjEzcHgifSxhdHRyczp7bGFiZWw6IueUqOaIt+WQjSJ9fSxbdCgic3BhbiIsW2UuX3YoZS5fcyhlLnVzZXJuYW1lKSldKV0pLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuinkuiJsuWIhumFjSJ9fSxlLl9sKGUuYWxsUm9sZUxpc3QsZnVuY3Rpb24obixhKXtyZXR1cm4gdCgiZWwtY2hlY2tib3giLHtrZXk6YSxvbjp7Y2hhbmdlOmZ1bmN0aW9uKHQpe2UuY2hvb3NlUm9sZShuLnJvbGVpZCxuLmlzQ2hlY2tlZCl9fSxtb2RlbDp7dmFsdWU6bi5pc0NoZWNrZWQsY2FsbGJhY2s6ZnVuY3Rpb24odCl7ZS4kc2V0KG4sImlzQ2hlY2tlZCIsdCl9LGV4cHJlc3Npb246Iml0ZW0uaXNDaGVja2VkIn19LFtlLl92KCJcbiAgICAgICAgIitlLl9zKG4ubmFtZSkrIlxuICAgICAgIildKX0pLDEpXSwxKV0sMSl9O1FzLl93aXRoU3RyaXBwZWQ9ITA7dmFyIFdzPXtyZW5kZXI6UXMsc3RhdGljUmVuZGVyRm5zOltdfSxPcz1Xczt2YXIgcXM9ITE7dmFyIFlzPXQoIlZVLzgiKShIcyxPcywhMSxmdW5jdGlvbihlKXtxc3x8KHQoIm8yU1oiKSx0KCJ1ZGN0IikpfSwiZGF0YS12LTRiYTExN2Q1IixudWxsKTtZcy5vcHRpb25zLl9fZmlsZT0ic3JjL2NvbXBvbmVudHMvbWFuYWdlU3lzdGVtVXNlci9hc3NpZ25Sb2xlLnZ1ZSI7dmFyIFpzPVlzLmV4cG9ydHMsR3M9e25hbWU6IkFzc2lnblJvbGUiLHByb3BzOnt1c2VyY29kZUxpc3Q6e3R5cGU6QXJyYXksZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybltdfX0sdXNlcm5hbWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6IiJ9fSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2FsbFJvbGVMaXN0OltdfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuZ2V0VXNlckluZm8oKX0sbWV0aG9kczp7Y2FuY2VsOmZ1bmN0aW9uKCl7dGhpcy4kZW1pdCgiY2xvc2VEaWFsb2ciKX0sZ2V0VXNlckluZm86ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3NzKHtvcmdVc2Vyczp7dXNlcmNvZGU6IiJ9fSkudGhlbihmdW5jdGlvbihuKXtuLmRhdGEuc3RhdHVzJiYoZS5hbGxSb2xlTGlzdD1uLmRhdGEucmVzdWx0KX0pfSxjaG9vc2VSb2xlOmZ1bmN0aW9uKGUsbil7dmFyIHQsYT10aGlzOyh0PXthc3NpZ246e3VzZXJjb2Rlczp0aGlzLnVzZXJjb2RlTGlzdCxyb2xlaWQ6ZSxhc3NpZ25PckNhbmVsOm59fSxiZSgibWFuYWdlci9PcmdVc2Vycy9iYXRjaEFzc2lnbk9yQ2FuZWxVc2VyUm9sZSIsdCkpLnRoZW4oZnVuY3Rpb24oZSl7ZS5kYXRhLnN0YXR1cyYmYS4kbWVzc2FnZSh7dHlwZToic3VjY2VzcyIsbWVzc2FnZToi5YiG6YWN5oiQ5YqfIn0pfSl9fX0sSnM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJhc3NpZ25Sb2xlIn0sW3QoImVsLWZvcm0iLHthdHRyczp7aW5saW5lOiEwLHNpemU6InNtYWxsIn19LFt0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNTdHlsZTp7Im1hcmdpbi1sZWZ0IjoiMTNweCJ9LGF0dHJzOntsYWJlbDoi55So5oi35ZCNIn19LFt0KCJzcGFuIixbZS5fdihlLl9zKGUudXNlcm5hbWUpKV0pXSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi6KeS6Imy5YiG6YWNIn19LGUuX2woZS5hbGxSb2xlTGlzdCxmdW5jdGlvbihuLGEpe3JldHVybiB0KCJlbC1jaGVja2JveCIse2tleTphLG9uOntjaGFuZ2U6ZnVuY3Rpb24odCl7ZS5jaG9vc2VSb2xlKG4ucm9sZWlkLG4uaXNDaGVja2VkKX19LG1vZGVsOnt2YWx1ZTpuLmlzQ2hlY2tlZCxjYWxsYmFjazpmdW5jdGlvbih0KXtlLiRzZXQobiwiaXNDaGVja2VkIix0KX0sZXhwcmVzc2lvbjoiaXRlbS5pc0NoZWNrZWQifX0sW2UuX3YoIlxuICAgICAgICAiK2UuX3Mobi5uYW1lKSsiXG4gICAgICAiKV0pfSksMSldLDEpXSwxKX07SnMuX3dpdGhTdHJpcHBlZD0hMDt2YXIgWHM9e3JlbmRlcjpKcyxzdGF0aWNSZW5kZXJGbnM6W119LEtzPVhzO3ZhciBlcj0hMTt2YXIgbnI9dCgiVlUvOCIpKEdzLEtzLCExLGZ1bmN0aW9uKGUpe2VyfHwodCgibmtpSCIpLHQoIkUyMG8iKSl9LCJkYXRhLXYtNWQyOWM3MTMiLG51bGwpO25yLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9tYW5hZ2VTeXN0ZW1Vc2VyL2Fzc2lnblJvbGVMaXN0LnZ1ZSI7dmFyIHRyPXtjb21wb25lbnRzOntDaXJjbGVUaXRsZTplbixBc3NpZ25Sb2xlOlpzLEFzc2lnblJvbGVMaXN0Om5yLmV4cG9ydHN9LGRhdGE6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybnttYW5hZ2VVc2VyOnt1c2VybmFtZToiIixzdGFydERhdGU6IiIsZW5kRGF0ZToiIn0sZGlhbG9nVmlzaWJsZTohMSxjb21wb25lbnROYW1lOiJBc3NpZ25Sb2xlIix0YWJsZUhlYWRlcjpbe3Byb3A6InVzZXJuYW1lIixsYWJlbDoi5oiQ5ZGY6LSm5Y+3In0se3Byb3A6InJvbGVMaXN0IixsYWJlbDoi6KeS6ImyIixmb3JtYXR0ZXI6ZnVuY3Rpb24oZSxuLHQsYSl7aWYodC5sZW5ndGg8PTApcmV0dXJuIuivpeeUqOaIt+aaguaXoOWIhumFjeinkuiJsiI7dmFyIGk9IiI7cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbihlLG4sdCl7biE9PXQubGVuZ3RoLTE/aSs9ZS5uYW1lKyIsIjppKz1lLm5hbWV9KSxpfX0se3Byb3A6InBob25lIixsYWJlbDoi5omL5py65Y+3In0se3Byb3A6ImVtYWlsIixsYWJlbDoi6YKu566x5Zyw5Z2AIn0se3Byb3A6ImNyZWF0ZWRhdGEiLGxhYmVsOiLmt7vliqDml7bpl7QiLGZvcm1hdHRlcjpmdW5jdGlvbihuLHQsYSxpKXtyZXR1cm4gZS4kb3B0aW9ucy5maWx0ZXJzLkZvcm1hdERhdGUoYSwieXl5eS1NTS1kZCBoaDptbSIpfX1dLHRhYmxlRGF0YTpbXSxwYWdlTm86MSxwYWdlU2l6ZToxMCx0b3RhbDowLHVzZXJjb2RlTGlzdDpbXSx1c2VyY29kZToiIix1c2VybmFtZToiIixzZWxlY3RSb3dzOltdfX0sd2F0Y2g6eyJtYW5hZ2VVc2VyLnVzZXJuYW1lIjpmdW5jdGlvbihlKXt0aGlzLmdldE1hbmFnZVVzZXJMaXN0KCl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dGhpcy5nZXRNYW5hZ2VVc2VyTGlzdCgpfSxtZXRob2RzOntnZXRNYW5hZ2VVc2VyTGlzdDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy4kb3B0aW9ucy5maWx0ZXJzLnN3YXBUaW1lKHRoaXMubWFuYWdlVXNlcik7dmFyIG4sdD1udWxsIT09dGhpcy5tYW5hZ2VVc2VyLnN0YXJ0RGF0ZT9uZXcgRGF0ZSh0aGlzLm1hbmFnZVVzZXIuc3RhcnREYXRlKS5nZXRUaW1lKCk6bnVsbCxhPW51bGwhPT10aGlzLm1hbmFnZVVzZXIuZW5kRGF0ZT9uZXcgRGF0ZSh0aGlzLm1hbmFnZVVzZXIuZW5kRGF0ZSkuZ2V0VGltZSgpOm51bGw7KG49e3BhZ2VObzp0aGlzLnBhZ2VObyxwYWdlU2l6ZTp0aGlzLnBhZ2VTaXplLG5hbWU6dGhpcy5tYW5hZ2VVc2VyLnVzZXJuYW1lLHRpbWVTdGFydDp0LHRpbWVFbmQ6YX0sYmUoIm1hbmFnZXIvT3JnVXNlcnMvcGFnZSIsbikpLnRoZW4oZnVuY3Rpb24obil7aWYobi5zdGF0dXMpe3ZhciB0PW4uZGF0YS5yZXN1bHQ7ZS50YWJsZURhdGE9dC5saXN0LGUudG90YWw9dC50b3RhbH19KX0sYXNzaWduUm9sZTpmdW5jdGlvbihlKXt0aGlzLmRpYWxvZ1Zpc2libGU9ITAsdGhpcy5jb21wb25lbnROYW1lPSJBc3NpZ25Sb2xlIix0aGlzLnVzZXJjb2RlPWUudXNlcmNvZGUsdGhpcy51c2VybmFtZT1lLnVzZXJuYW1lfSxhc3NpZ25Sb2xlTGlzdDpmdW5jdGlvbigpe3RoaXMuZGlhbG9nVmlzaWJsZT0hMCx0aGlzLmNvbXBvbmVudE5hbWU9IkFzc2lnblJvbGVMaXN0In0saGFuZGxlU2l6ZUNoYW5nZTpmdW5jdGlvbihlKXt0aGlzLnBhZ2VTaXplPWUsdGhpcy5nZXRNYW5hZ2VVc2VyTGlzdCgpfSxoYW5kbGVDdXJyZW50Q2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMucGFnZU5vPWUsdGhpcy5nZXRNYW5hZ2VVc2VyTGlzdCgpfSxjbG9zZURpYWxvZzpmdW5jdGlvbigpe3RoaXMuY29tcG9uZW50TmFtZT0iIix0aGlzLmRpYWxvZ1Zpc2libGU9ITEsdGhpcy5nZXRNYW5hZ2VVc2VyTGlzdCgpfSxzZWxlY3Rpb25DaGFuZ2U6ZnVuY3Rpb24oZSl7dmFyIG49dGhpczt0aGlzLnVzZXJjb2RlTGlzdD1bXSx0aGlzLnNlbGVjdFJvd3M9ZTt2YXIgdD0iIjtlLmZvckVhY2goZnVuY3Rpb24oZSxhLGkpe2E9PT1pLmxlbmd0aC0xP3QrPWUudXNlcm5hbWU6dCs9ZS51c2VybmFtZSsiLyIsbi51c2VyY29kZUxpc3QucHVzaChlLnVzZXJjb2RlKX0pLHRoaXMudXNlcm5hbWU9dH0scmVjb3ZlclNlbGVjdGlvbjpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5zZWxlY3RSb3dzLmZvckVhY2goZnVuY3Rpb24obil7ZS4kcmVmcy5jaGFubmVsVGFibGUudG9nZ2xlUm93U2VsZWN0aW9uKG4sITApfSl9fX0sYXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJ1c2VyLW1hbmFnZSJ9LFt0KCJkaXYiLFt0KCJjaXJjbGUtdGl0bGUiLHtzdGF0aWNDbGFzczoiY2ljbGUtY29udHJvbGxlciIsYXR0cnM6eyJ0aXRsZS1uYW1lIjoi57O757uf55So5oi3566h55CGIn19KSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InNlYXJjaC1mb3JtLWNvbnRhaW5lciJ9LFt0KCJlbC1mb3JtIix7c3RhdGljQ2xhc3M6ImRlbW8tZm9ybS1pbmxpbmUiLGF0dHJzOntpbmxpbmU6ITAsbW9kZWw6ZS5tYW5hZ2VVc2VyfX0sW3QoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi55So5oi35ZCNIn19LFt0KCJlbC1pbnB1dCIse2F0dHJzOntjbGVhcmFibGU6IiJ9LG1vZGVsOnt2YWx1ZTplLm1hbmFnZVVzZXIudXNlcm5hbWUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUubWFuYWdlVXNlciwidXNlcm5hbWUiLG4pfSxleHByZXNzaW9uOiJtYW5hZ2VVc2VyLnVzZXJuYW1lIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5byA5aeL5pe26Ze0In19LFt0KCJlbC1kYXRlLXBpY2tlciIse2F0dHJzOnt0aXRsZTplLl9mKCJGb3JtYXREYXRlIikoZS5tYW5hZ2VVc2VyLnN0YXJ0RGF0ZSwieXl5eS1NTS1kZCBoaDptbSIpLHR5cGU6ImRhdGV0aW1lIixmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLHBsYWNlaG9sZGVyOiLpgInmi6nml6XmnJ8ifSxvbjp7Y2hhbmdlOmUuZ2V0TWFuYWdlVXNlckxpc3R9LG1vZGVsOnt2YWx1ZTplLm1hbmFnZVVzZXIuc3RhcnREYXRlLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLm1hbmFnZVVzZXIsInN0YXJ0RGF0ZSIsbil9LGV4cHJlc3Npb246Im1hbmFnZVVzZXIuc3RhcnREYXRlIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi57uT5p2f5pe26Ze0In19LFt0KCJlbC1kYXRlLXBpY2tlciIse2F0dHJzOnt0aXRsZTplLl9mKCJGb3JtYXREYXRlIikoZS5tYW5hZ2VVc2VyLmVuZERhdGUsInl5eXktTU0tZGQgaGg6bW0iKSx0eXBlOiJkYXRldGltZSIsZm9ybWF0OiJ5eXl5LU1NLWRkIEhIOm1tIixwbGFjZWhvbGRlcjoi6YCJ5oup5pel5pyfIn0sb246e2NoYW5nZTplLmdldE1hbmFnZVVzZXJMaXN0fSxtb2RlbDp7dmFsdWU6ZS5tYW5hZ2VVc2VyLmVuZERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUubWFuYWdlVXNlciwiZW5kRGF0ZSIsbil9LGV4cHJlc3Npb246Im1hbmFnZVVzZXIuZW5kRGF0ZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToicHJpbWFyeSJ9LG9uOntjbGljazplLmdldE1hbmFnZVVzZXJMaXN0fX0sW2UuX3YoIlxuICAgICAgICAgIOafpeivolxuICAgICAgICAgICIpLHQoImkiLHtzdGF0aWNDbGFzczoiZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQifSldKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7YXR0cnM6e2Rpc2FibGVkOmUuc2VsZWN0Um93czw9MCx0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmUuYXNzaWduUm9sZUxpc3R9fSxbZS5fdigiXG4gICAgICAgICAg5YiG6YWN6KeS6ImyXG4gICAgICAgICAgIiksdCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLWVkaXQtb3V0bGluZSBlbC1pY29uLS1yaWdodCAifSldKV0sMSldLDEpXSwxKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InRhYmxlLWxpc3QifSxbdCgiZWwtdGFibGUiLHtyZWY6ImNoYW5uZWxUYWJsZSIsc3RhdGljQ2xhc3M6Indob2xlLXRhYmxlIixhdHRyczp7ZGF0YTplLnRhYmxlRGF0YSxzdHJpcGU6IiIsIm1pbi1oZWlnaHQiOiI0MDAifSxvbjp7InNlbGVjdGlvbi1jaGFuZ2UiOmUuc2VsZWN0aW9uQ2hhbmdlfX0sW3QoImVsLXRhYmxlLWNvbHVtbiIse2F0dHJzOnt0eXBlOiJzZWxlY3Rpb24iLGFsaWduOiJjZW50ZXIiLHdpZHRoOiI1NSJ9fSksZS5fdigiICIpLGUuX2woZS50YWJsZUhlYWRlcixmdW5jdGlvbihlLG4pe3JldHVybiB0KCJlbC10YWJsZS1jb2x1bW4iLHtrZXk6bixhdHRyczp7cHJvcDplLnByb3AsbGFiZWw6ZS5sYWJlbCx3aWR0aDplLndpZHRoLGZvcm1hdHRlcjplLmZvcm1hdHRlcixhbGlnbjoiY2VudGVyIixmaXhlZDoiIiwic2hvdy1vdmVyZmxvdy10b29sdGlwIjoiIn19KX0pLGUuX3YoIiAiKSx0KCJlbC10YWJsZS1jb2x1bW4iLHthdHRyczp7Zml4ZWQ6InJpZ2h0IixsYWJlbDoi5pON5L2cIixhbGlnbjoiY2VudGVyIix3aWR0aDoiMjUwIn0sc2NvcGVkU2xvdHM6ZS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24obil7cmV0dXJuW3QoInNwYW4iLFt0KCJzcGFuIix7c3RhdGljQ2xhc3M6InVzZXIgZWRpdCIsb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuYXNzaWduUm9sZShuLnJvdyl9fX0sW2UuX3YoIlxuICAgICAgICAgICAgICDliIbphY3op5LoibJcbiAgICAgICAgICAgICIpXSldKV19fV0pfSldLDIpLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoicGFnaW5hdGlvbiJ9LFt0KCJlbC1wYWdpbmF0aW9uIix7YXR0cnM6e3RvdGFsOmUudG90YWwsInBhZ2Utc2l6ZXMiOlsxMCwyMCwzMCw0MF0sYmFja2dyb3VuZDoiIixsYXlvdXQ6InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQifSxvbjp7InNpemUtY2hhbmdlIjplLmhhbmRsZVNpemVDaGFuZ2UsImN1cnJlbnQtY2hhbmdlIjplLmhhbmRsZUN1cnJlbnRDaGFuZ2V9fSldLDEpXSwxKSxlLl92KCIgIiksdCgiZWwtZGlhbG9nIix7YXR0cnM6e3Zpc2libGU6ZS5kaWFsb2dWaXNpYmxlLHRpdGxlOiLnlKjmiLfliIbphY3op5LoibIiLHdpZHRoOiIzMCUifSxvbjp7InVwZGF0ZTp2aXNpYmxlIjpmdW5jdGlvbihuKXtlLmRpYWxvZ1Zpc2libGU9bn0sY2xvc2U6ZS5jbG9zZURpYWxvZ319LFt0KGUuY29tcG9uZW50TmFtZSx7dGFnOiJkaXYiLGF0dHJzOnt1c2VyY29kZTplLnVzZXJjb2RlLCJ1c2VyY29kZS1saXN0IjplLnVzZXJjb2RlTGlzdCx1c2VybmFtZTplLnVzZXJuYW1lfSxvbjp7Y2xvc2VEaWFsb2c6ZS5jbG9zZURpYWxvZ319KV0sMSldLDEpfTthci5fd2l0aFN0cmlwcGVkPSEwO3ZhciBpcj17cmVuZGVyOmFyLHN0YXRpY1JlbmRlckZuczpbXX0sbHI9aXI7dmFyIG9yPSExO3ZhciBzcj10KCJWVS84IikodHIsbHIsITEsZnVuY3Rpb24oZSl7b3J8fCh0KCJnbTVyIiksdCgiSHR1biIpKX0sImRhdGEtdi00YzRiMzU0MCIsbnVsbCk7c3Iub3B0aW9ucy5fX2ZpbGU9InNyYy9jb21wb25lbnRzL21hbmFnZVN5c3RlbVVzZXIvdXNlck1hbmFnZS52dWUiO3ZhciBycj1zci5leHBvcnRzLGNyPXQoIml1YjUiKSxtcj10Lm4oY3IpLGRyPXtuYW1lOiJBZGRSb2xlIixjb21wb25lbnRzOnt0cmVlVHJhbnNmZXI6bXIuYX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntydWxlRm9ybTp7cm9sZV9uYW1lOiIifSxtb2RlOiJ0cmFuc2ZlciIsZnJvbURhdGE6W10sdG9EYXRhOltdLHRpdGxlOlsi5YWo6YOo5p2D6ZmQIiwi5bey6YCJ5oup5p2D6ZmQIl0scnVsZXM6e3JvbGVfbmFtZTpbe3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+i+k+WFpeinkuiJsuWQjeensCIsdHJpZ2dlcjoiYmx1ciJ9XX0saWRBcnI6W119fSxtb3VudGVkOmZ1bmN0aW9uKCl7dGhpcy5nZXRUcmVlUGVybWlzc2lvbigpfSxtZXRob2RzOntnZXRUcmVlUGVybWlzc2lvbjpmdW5jdGlvbigpe3ZhciBlPXRoaXM7bHMoKS50aGVuKGZ1bmN0aW9uKG4pe24uZGF0YS5zdGF0dXMmJihlLmZyb21EYXRhPW4uZGF0YS5yZXN1bHQpfSl9LGdldEFsbFNlbGVjdGVkSWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMudG9EYXRhLmZvckVhY2goZnVuY3Rpb24obix0LGEpe2UuaWRBcnIucHVzaChuLmlkKSxuLmNoaWxkcmVuLmxlbmd0aD4wJiZlLmdldENoaWxkcmVuSWQobi5jaGlsZHJlbil9KX0sZ2V0Q2hpbGRyZW5JZDpmdW5jdGlvbihlKXt2YXIgbj10aGlzO2UuZm9yRWFjaChmdW5jdGlvbihlLHQsYSl7bi5pZEFyci5wdXNoKGUuaWQpLGUuY2hpbGRyZW4ubGVuZ3RoPjAmJm4uZ2V0Q2hpbGRyZW5JZChlLmNoaWxkcmVuKX0pfSxvblN1Ym1pdDpmdW5jdGlvbihlKXt2YXIgbj10aGlzO3RoaXMuJHJlZnNbZV0udmFsaWRhdGUoZnVuY3Rpb24oZSl7cmV0dXJuIGU/bi50b0RhdGEubGVuZ3RoPD0wPyhuLiRub3RpZnkoe3R5cGU6ImVycm9yIix0aXRsZToi6ZSZ6K+vIixtZXNzYWdlOiLor7fkuLrop5LoibLphY3nva7mnYPpmZAifSksITEpOihuLmlkQXJyPVtdLG4uZ2V0QWxsU2VsZWN0ZWRJZCgpLHZvaWQodD17cm9sZTp7bmFtZTpuLnJ1bGVGb3JtLnJvbGVfbmFtZSxwZXJtaXNzaW9uaWRMaXN0Om4uaWRBcnJ9fSxiZSgibWFuYWdlci9QZXJtaXNzaW9uL2FkZFJvbGUiLHQpKS50aGVuKGZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKGUpLGUuZGF0YS5zdGF0dXMmJihuLiRub3RpZnkoe3R5cGU6InN1Y2Nlc3MiLHRpdGxlOiLmiJDlip8iLG1lc3NhZ2U6Iua3u+WKoOinkuiJsuaIkOWKnyJ9KSxuLiRlbWl0KCJjbG9zZURpYWxvZyIpKX0pKTooY29uc29sZS5sb2coImVycm9yIHN1Ym1pdCEhIiksITEpO3ZhciB0fSl9LGNhbmNlbDpmdW5jdGlvbigpe3RoaXMuJGVtaXQoImNsb3NlRGlhbG9nIil9LGFkZEF1dGg6ZnVuY3Rpb24oZSxuLHQpe3RoaXMudG9EYXRhPW59LHJlbW92ZUF1dGg6ZnVuY3Rpb24oZSxuLHQpe3RoaXMudG9EYXRhPW59fX0scHI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJhZGRVc2VyIn0sW3QoImVsLWZvcm0iLHtyZWY6InJ1bGVGb3JtIixhdHRyczp7bW9kZWw6ZS5ydWxlRm9ybSxydWxlczplLnJ1bGVzfX0sW3QoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi6KeS6Imy5ZCN56ewIixwcm9wOiJyb2xlX25hbWUifX0sW3QoImVsLWlucHV0Iix7c3RhdGljU3R5bGU6e3dpZHRoOiIyNjBweCJ9LGF0dHJzOntjbGVhcmFibGU6IiJ9LG1vZGVsOnt2YWx1ZTplLnJ1bGVGb3JtLnJvbGVfbmFtZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5ydWxlRm9ybSwicm9sZV9uYW1lIiwic3RyaW5nIj09dHlwZW9mIG4/bi50cmltKCk6bil9LGV4cHJlc3Npb246InJ1bGVGb3JtLnJvbGVfbmFtZSJ9fSldLDEpXSwxKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InRhYmxlLWxpc3RzIn0sW3QoInAiLHtzdGF0aWNTdHlsZTp7Im1hcmdpbi1ib3R0b20iOiIxMHB4In19LFtlLl92KCLmnYPpmZDphY3nva7vvJoiKV0pLGUuX3YoIiAiKSx0KCJ0cmVlLXRyYW5zZmVyIix7YXR0cnM6e3RpdGxlOmUudGl0bGUsZnJvbV9kYXRhOmUuZnJvbURhdGEsdG9fZGF0YTplLnRvRGF0YSwiZGVmYXVsdC1wcm9wcyI6e2xhYmVsOiJsYWJlbCJ9LG1vZGU6ZS5tb2RlLGZpbHRlcjohMSwib3Blbi1hbGwiOiIiLGhlaWdodDoiNDQwcHgifSxvbjp7YWRkQnRuOmUuYWRkQXV0aCxyZW1vdmVCdG46ZS5yZW1vdmVBdXRofX0pXSwxKSxlLl92KCIgIiksdCgiZWwtZm9ybS1pdGVtIix7c3RhdGljQ2xhc3M6InN1Ym1pdCIsc3RhdGljU3R5bGU6e3dpZHRoOiIxMDAlIn19LFt0KCJlbC1idXR0b24iLHtvbjp7Y2xpY2s6ZS5jYW5jZWx9fSxbZS5fdigi5Y+W5raIIildKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7YXR0cnM6e3R5cGU6InByaW1hcnkifSxvbjp7Y2xpY2s6ZnVuY3Rpb24obil7ZS5vblN1Ym1pdCgicnVsZUZvcm0iKX19fSxbZS5fdigi5o+Q5LqkIildKV0sMSldLDEpfTtwci5fd2l0aFN0cmlwcGVkPSEwO3ZhciB1cj17cmVuZGVyOnByLHN0YXRpY1JlbmRlckZuczpbXX0saHI9dXI7dmFyIGdyPSExO3ZhciBBcj10KCJWVS84IikoZHIsaHIsITEsZnVuY3Rpb24oZSl7Z3J8fCh0KCJ4SlFDIiksdCgiV0lnQyIpKX0sImRhdGEtdi00MGE4YWFiMyIsbnVsbCk7QXIub3B0aW9ucy5fX2ZpbGU9InNyYy9jb21wb25lbnRzL21hbmFnZVJvbGUvYWRkUm9sZS52dWUiO3ZhciBmcj1Bci5leHBvcnRzLGJyPXtuYW1lOiJBZGRSb2xlIixjb21wb25lbnRzOnt0cmVlVHJhbnNmZXI6bXIuYX0scHJvcHM6e3JvbGVpZDp7dHlwZTpTdHJpbmcsZGVmYXVsdDoiIn19LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57cnVsZUZvcm06e3JvbGVfbmFtZToiIn0sbW9kZToidHJhbnNmZXIiLGZyb21EYXRhOltdLHRvRGF0YTpbXSx0aXRsZTpbIuWFqOmDqOadg+mZkCIsIuW3sumAieaLqeadg+mZkCJdLHJ1bGVzOntyb2xlX25hbWU6W3tyZXF1aXJlZDohMCxtZXNzYWdlOiLor7fovpPlhaXop5LoibLlkI3np7AiLHRyaWdnZXI6ImJsdXIifV19LGlkQXJyOltdfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuZ2V0VHJlZVBlcm1pc3Npb24oKSx0aGlzLmdldFJvbGVEZXRhaWxzKCl9LG1ldGhvZHM6e2dldFRyZWVQZXJtaXNzaW9uOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztscygpLnRoZW4oZnVuY3Rpb24obil7bi5kYXRhLnN0YXR1cyYmKGUuZnJvbURhdGE9bi5kYXRhLnJlc3VsdCl9KX0sZ2V0Um9sZURldGFpbHM6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO29zKHtyb2xlOntyb2xlaWQ6dGhpcy5yb2xlaWR9fSkudGhlbihmdW5jdGlvbihuKXtpZihuLmRhdGEuc3RhdHVzKXt2YXIgdD1uLmRhdGEucmVzdWx0O2UucnVsZUZvcm0ucm9sZV9uYW1lPXQubmFtZSxlLnRvRGF0YT10LnRyZWVQZXJtaXNzaW9ufHxbXX19KX0sZ2V0QWxsU2VsZWN0ZWRJZDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy50b0RhdGEuZm9yRWFjaChmdW5jdGlvbihuLHQsYSl7ZS5pZEFyci5wdXNoKG4uaWQpLG4uY2hpbGRyZW4ubGVuZ3RoPjAmJmUuZ2V0Q2hpbGRyZW5JZChuLmNoaWxkcmVuKX0pfSxnZXRDaGlsZHJlbklkOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7ZS5mb3JFYWNoKGZ1bmN0aW9uKGUsdCxhKXtuLmlkQXJyLnB1c2goZS5pZCksZS5jaGlsZHJlbi5sZW5ndGg+MCYmbi5nZXRDaGlsZHJlbklkKGUuY2hpbGRyZW4pfSl9LG9uU3VibWl0OmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7dGhpcy4kcmVmc1tlXS52YWxpZGF0ZShmdW5jdGlvbihlKXtpZighZSlyZXR1cm4gY29uc29sZS5sb2coImVycm9yIHN1Ym1pdCEhIiksITE7dmFyIHQ7bi5pZEFycj1bXSxuLmdldEFsbFNlbGVjdGVkSWQoKSwodD17cm9sZTp7cm9sZWlkOm4ucm9sZWlkLG5hbWU6bi5ydWxlRm9ybS5yb2xlX25hbWUscGVybWlzc2lvbmlkTGlzdDpuLmlkQXJyfX0sYmUoIm1hbmFnZXIvUGVybWlzc2lvbi91cGRhdGVSb2xlIix0KSkudGhlbihmdW5jdGlvbihlKXtjb25zb2xlLmxvZyhlKSxlLmRhdGEuc3RhdHVzJiYobi4kbm90aWZ5KHt0eXBlOiJzdWNjZXNzIix0aXRsZToi5oiQ5YqfIixtZXNzYWdlOiLnvJbovpHop5LoibLmiJDlip8ifSksbi4kZW1pdCgiY2xvc2VEaWFsb2ciKSl9KX0pfSxjYW5jZWw6ZnVuY3Rpb24oKXt0aGlzLiRlbWl0KCJjbG9zZURpYWxvZyIpfSxhZGRBdXRoOmZ1bmN0aW9uKGUsbix0KXt0aGlzLnRvRGF0YT1ufSxyZW1vdmVBdXRoOmZ1bmN0aW9uKGUsbix0KXt0aGlzLnRvRGF0YT1ufX19LHZyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPWUuJGNyZWF0ZUVsZW1lbnQsdD1lLl9zZWxmLl9jfHxuO3JldHVybiB0KCJkaXYiLHtzdGF0aWNDbGFzczoiYWRkVXNlciJ9LFt0KCJlbC1mb3JtIix7cmVmOiJydWxlRm9ybSIsYXR0cnM6e21vZGVsOmUucnVsZUZvcm0scnVsZXM6ZS5ydWxlc319LFt0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuinkuiJsuWQjeensCIscHJvcDoicm9sZV9uYW1lIn19LFt0KCJlbC1pbnB1dCIse3N0YXRpY1N0eWxlOnt3aWR0aDoiMjYwcHgifSxhdHRyczp7Y2xlYXJhYmxlOiIifSxtb2RlbDp7dmFsdWU6ZS5ydWxlRm9ybS5yb2xlX25hbWUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUucnVsZUZvcm0sInJvbGVfbmFtZSIsInN0cmluZyI9PXR5cGVvZiBuP24udHJpbSgpOm4pfSxleHByZXNzaW9uOiJydWxlRm9ybS5yb2xlX25hbWUifX0pXSwxKV0sMSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJ0YWJsZS1saXN0cyJ9LFt0KCJwIix7c3RhdGljU3R5bGU6eyJtYXJnaW4tYm90dG9tIjoiMTBweCJ9fSxbZS5fdigi5p2D6ZmQ6YWN572u77yaIildKSxlLl92KCIgIiksdCgidHJlZS10cmFuc2ZlciIse2F0dHJzOnt0aXRsZTplLnRpdGxlLGZyb21fZGF0YTplLmZyb21EYXRhLHRvX2RhdGE6ZS50b0RhdGEsImRlZmF1bHQtcHJvcHMiOntsYWJlbDoibGFiZWwifSxtb2RlOmUubW9kZSxmaWx0ZXI6ITEsIm9wZW4tYWxsIjoiIixoZWlnaHQ6IjQ0MHB4In0sb246e2FkZEJ0bjplLmFkZEF1dGgscmVtb3ZlQnRuOmUucmVtb3ZlQXV0aH19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse3N0YXRpY0NsYXNzOiJzdWJtaXQiLHN0YXRpY1N0eWxlOnt3aWR0aDoiMTAwJSJ9fSxbdCgiZWwtYnV0dG9uIix7b246e2NsaWNrOmUuY2FuY2VsfX0sW2UuX3YoIuWPlua2iCIpXSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmZ1bmN0aW9uKG4pe2Uub25TdWJtaXQoInJ1bGVGb3JtIil9fX0sW2UuX3YoIuaPkOS6pCIpXSldLDEpXSwxKX07dnIuX3dpdGhTdHJpcHBlZD0hMDt2YXIgeXI9e3JlbmRlcjp2cixzdGF0aWNSZW5kZXJGbnM6W119LENyPXlyO3ZhciBfcj0hMTt2YXIgeHI9dCgiVlUvOCIpKGJyLENyLCExLGZ1bmN0aW9uKGUpe19yfHwodCgiR1puSCIpLHQoIkNFOVQiKSl9LCJkYXRhLXYtNTJjMjE1ZDQiLG51bGwpO3hyLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9tYW5hZ2VSb2xlL2VkaXRSb2xlLnZ1ZSI7dmFyIHdyPXhyLmV4cG9ydHMsRnI9e25hbWU6IkFkZFJvbGUiLGNvbXBvbmVudHM6e30scHJvcHM6e3JvbGVpZDp7dHlwZTpTdHJpbmcsZGVmYXVsdDoiIn19LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57cnVsZUZvcm06e3JvbGVfbmFtZToiIn0sdG9EYXRhOltdfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuZ2V0Um9sZURldGFpbHMoKX0sbWV0aG9kczp7Z2V0Um9sZURldGFpbHM6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO29zKHtyb2xlOntyb2xlaWQ6dGhpcy5yb2xlaWR9fSkudGhlbihmdW5jdGlvbihuKXtpZihuLmRhdGEuc3RhdHVzKXt2YXIgdD1uLmRhdGEucmVzdWx0O2UucnVsZUZvcm0ucm9sZV9uYW1lPXQubmFtZSxlLnRvRGF0YT10LnRyZWVQZXJtaXNzaW9ufHxbXX19KX0sY2FuY2VsOmZ1bmN0aW9uKCl7dGhpcy4kZW1pdCgiY2xvc2VEaWFsb2ciKX19fSxrcj1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1lLiRjcmVhdGVFbGVtZW50LHQ9ZS5fc2VsZi5fY3x8bjtyZXR1cm4gdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImFkZFVzZXIifSxbdCgiZWwtZm9ybSIse3JlZjoicnVsZUZvcm0iLGF0dHJzOnttb2RlbDplLnJ1bGVGb3JtfX0sW3QoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi6KeS6Imy5ZCN56ewIixwcm9wOiJyb2xlX25hbWUifX0sW3QoImVsLWlucHV0Iix7c3RhdGljU3R5bGU6e3dpZHRoOiIyNjBweCJ9LGF0dHJzOntkaXNhYmxlZDohMCxjbGVhcmFibGU6IiJ9LG1vZGVsOnt2YWx1ZTplLnJ1bGVGb3JtLnJvbGVfbmFtZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5ydWxlRm9ybSwicm9sZV9uYW1lIixuKX0sZXhwcmVzc2lvbjoicnVsZUZvcm0ucm9sZV9uYW1lIn19KV0sMSldLDEpLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoidGFibGUtbGlzdHMifSxbdCgicCIse3N0YXRpY1N0eWxlOnsibWFyZ2luLWJvdHRvbSI6IjEwcHgifX0sW2UuX3YoIuaLpeacieadg+mZkO+8miIpXSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJzZWxmLXRyZWUtc3R5bGUifSxbdCgiZWwtdHJlZSIse2F0dHJzOntkYXRhOmUudG9EYXRhLCJkZWZhdWx0LWV4cGFuZC1hbGwiOiEwfX0pXSwxKV0pXSwxKX07a3IuX3dpdGhTdHJpcHBlZD0hMDt2YXIgU3I9e3JlbmRlcjprcixzdGF0aWNSZW5kZXJGbnM6W119LEVyPVNyO3ZhciBEcj0hMTt2YXIgTHI9dCgiVlUvOCIpKEZyLEVyLCExLGZ1bmN0aW9uKGUpe0RyfHwodCgiMG00QiIpLHQoIjRJZFUiKSl9LCJkYXRhLXYtMjE4YTkyMWIiLG51bGwpO0xyLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9tYW5hZ2VSb2xlL2RldGFpbFJvbGUudnVlIjt2YXIgQnI9e2NvbXBvbmVudHM6e0NpcmNsZVRpdGxlOmVuLEFkZFJvbGU6ZnIsRWRpdFJvbGU6d3IsRGV0YWlsUm9sZTpMci5leHBvcnRzfSxkYXRhOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm57cm9sZUZvcm06e25hbWU6IiIsc3RhcnREYXRlOiIiLGVuZERhdGU6IiJ9LGRpYWxvZ1Zpc2libGU6ITEsY29tcG9uZW50TmFtZToiQWRkUm9sZSIsdGFibGVIZWFkZXI6W3twcm9wOiJuYW1lIixsYWJlbDoi6KeS6Imy5ZCN56ewIn0se3Byb3A6ImNyZWF0ZXRpbWUiLGxhYmVsOiLliJvlu7rml7bpl7QiLGZvcm1hdHRlcjpmdW5jdGlvbihuLHQsYSxpKXtyZXR1cm4gZS4kb3B0aW9ucy5maWx0ZXJzLkZvcm1hdERhdGUoYSwieXl5eS1NTS1kZCBoaDptbSIpfX1dLHRhYmxlRGF0YTpbXSxwYWdlTm86MSxwYWdlU2l6ZToxMCx0b3RhbDowLHJvbGVpZDoiIn19LHdhdGNoOnsicm9sZUZvcm0ubmFtZSI6ZnVuY3Rpb24oZSl7dGhpcy5nZXRSb2xlTGlzdCgpfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMuZ2V0Um91dGVyUGFyYW0oKSx0aGlzLmdldFJvbGVMaXN0KCl9LG1ldGhvZHM6e2dldFJvdXRlclBhcmFtOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kcm91dGUucXVlcnk7ZS5wYWdlTm8mJih0aGlzLnBhZ2VObz1wYXJzZUludChlLnBhZ2VObykpfSxjbG9zZURpYWxvZzpmdW5jdGlvbigpe3RoaXMuZGlhbG9nVmlzaWJsZT0hMSx0aGlzLmNvbXBvbmVudE5hbWU9IiIsdGhpcy5nZXRSb2xlTGlzdCgpfSxnZXRSb2xlTGlzdDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy4kb3B0aW9ucy5maWx0ZXJzLnN3YXBUaW1lKHRoaXMucm9sZUZvcm0pO3ZhciBuLHQ9bnVsbCE9PXRoaXMucm9sZUZvcm0uc3RhcnREYXRlP25ldyBEYXRlKHRoaXMucm9sZUZvcm0uc3RhcnREYXRlKS5nZXRUaW1lKCk6bnVsbCxhPW51bGwhPT10aGlzLnJvbGVGb3JtLmVuZERhdGU/bmV3IERhdGUodGhpcy5yb2xlRm9ybS5lbmREYXRlKS5nZXRUaW1lKCk6bnVsbDsobj17cGFnZU5vOnRoaXMucGFnZU5vLHBhZ2VTaXplOnRoaXMucGFnZVNpemUsbmFtZTp0aGlzLnJvbGVGb3JtLm5hbWUsdGltZVN0YXJ0OnQsdGltZUVuZDphfSxiZSgibWFuYWdlci9QZXJtaXNzaW9uL3BhZ2VSb2xlIixuKSkudGhlbihmdW5jdGlvbihuKXtpZihuLnN0YXR1cyl7dmFyIHQ9bi5kYXRhLnJlc3VsdDtlLnRhYmxlRGF0YT10Lmxpc3QsZS50b3RhbD10LnRvdGFsLGUucGFnZU5vPXQucGFnZU51bX19KX0saGFuZGxlU2l6ZUNoYW5nZTpmdW5jdGlvbihlKXt0aGlzLnBhZ2VTaXplPWUsdGhpcy5nZXRSb2xlTGlzdCgpfSxoYW5kbGVDdXJyZW50Q2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMucGFnZU5vPWUsdGhpcy5nZXRSb2xlTGlzdCgpfSxkZXRhaWxSb2xlOmZ1bmN0aW9uKGUpe3RoaXMuZGlhbG9nVmlzaWJsZT0hMCx0aGlzLmNvbXBvbmVudE5hbWU9IkRldGFpbFJvbGUiLHRoaXMucm9sZWlkPWUucm9sZWlkfSxoYW5kbGVFZGl0OmZ1bmN0aW9uKGUpe3RoaXMuY29tcG9uZW50TmFtZT0iRWRpdFJvbGUiLHRoaXMuZGlhbG9nVmlzaWJsZT0hMCx0aGlzLnJvbGVpZD1lLnJvbGVpZH0sYWRkUm9sZTpmdW5jdGlvbigpe3RoaXMuY29tcG9uZW50TmFtZT0iQWRkUm9sZSIsdGhpcy5kaWFsb2dWaXNpYmxlPSEwfSxoYW5kbGVEZWxldGU6ZnVuY3Rpb24oZSl7dmFyIG49dGhpczt0aGlzLiRjb25maXJtKCfmmK/lkKbliKDpmaQiJytlLm5hbWUrJyI/Jywi5o+Q56S6Iix7Y29uZmlybUJ1dHRvblRleHQ6IuehruWumiIsY2FuY2VsQnV0dG9uVGV4dDoi5Y+W5raIIix0eXBlOiJ3YXJuaW5nIn0pLnRoZW4oZnVuY3Rpb24oKXt2YXIgdDsodD17cm9sZTp7cm9sZWlkOmUucm9sZWlkfX0sYmUoIm1hbmFnZXIvUGVybWlzc2lvbi9kZWxldGVSb2xlIix0KSkudGhlbihmdW5jdGlvbihlKXtlLmRhdGEuc3RhdHVzJiZuLiRtZXNzYWdlKHt0eXBlOiJzdWNjZXNzIixtZXNzYWdlOiLliKDpmaTmiJDlip8hIn0pLG4uZ2V0Um9sZUxpc3QoKX0pfSkuY2F0Y2goZnVuY3Rpb24oKXt9KX19fSxNcj1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1lLiRjcmVhdGVFbGVtZW50LHQ9ZS5fc2VsZi5fY3x8bjtyZXR1cm4gdCgiZGl2Iix7c3RhdGljQ2xhc3M6InJvbGUtbWFuYWdlIn0sW3QoImRpdiIsW3QoImNpcmNsZS10aXRsZSIse3N0YXRpY0NsYXNzOiJjaWNsZS1jb250cm9sbGVyIixhdHRyczp7InRpdGxlLW5hbWUiOiLop5LoibLnrqHnkIYifX0pLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoic2VhcmNoLWZvcm0tY29udGFpbmVyIn0sW3QoImVsLWZvcm0iLHtzdGF0aWNDbGFzczoiZGVtby1mb3JtLWlubGluZSIsYXR0cnM6e2lubGluZTohMCxtb2RlbDplLnJvbGVGb3JtfX0sW3QoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi6KeS6Imy5ZCN56ewIn19LFt0KCJlbC1pbnB1dCIse2F0dHJzOntjbGVhcmFibGU6IiJ9LG1vZGVsOnt2YWx1ZTplLnJvbGVGb3JtLm5hbWUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUucm9sZUZvcm0sIm5hbWUiLG4pfSxleHByZXNzaW9uOiJyb2xlRm9ybS5uYW1lIn19KV0sMSksZS5fdigiICIpLHQoImVsLWZvcm0taXRlbSIse2F0dHJzOntsYWJlbDoi5byA5aeL5pe26Ze0In19LFt0KCJlbC1kYXRlLXBpY2tlciIse2F0dHJzOnt0aXRsZTplLl9mKCJGb3JtYXREYXRlIikoZS5yb2xlRm9ybS5zdGFydERhdGUsInl5eXktTU0tZGQgaGg6bW0iKSx0eXBlOiJkYXRldGltZSIsZm9ybWF0OiJ5eXl5LU1NLWRkIEhIOm1tIixwbGFjZWhvbGRlcjoi6YCJ5oup5pel5pyfIn0sb246e2NoYW5nZTplLmdldFJvbGVMaXN0fSxtb2RlbDp7dmFsdWU6ZS5yb2xlRm9ybS5zdGFydERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUucm9sZUZvcm0sInN0YXJ0RGF0ZSIsbil9LGV4cHJlc3Npb246InJvbGVGb3JtLnN0YXJ0RGF0ZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6Iue7k+adn+aXtumXtCJ9fSxbdCgiZWwtZGF0ZS1waWNrZXIiLHthdHRyczp7dGl0bGU6ZS5fZigiRm9ybWF0RGF0ZSIpKGUucm9sZUZvcm0uZW5kRGF0ZSwieXl5eS1NTS1kZCBoaDptbSIpLHR5cGU6ImRhdGV0aW1lIixmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLHBsYWNlaG9sZGVyOiLpgInmi6nml6XmnJ8ifSxvbjp7Y2hhbmdlOmUuZ2V0Um9sZUxpc3R9LG1vZGVsOnt2YWx1ZTplLnJvbGVGb3JtLmVuZERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUucm9sZUZvcm0sImVuZERhdGUiLG4pfSxleHByZXNzaW9uOiJyb2xlRm9ybS5lbmREYXRlIn19KV0sMSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse2F0dHJzOnt0eXBlOiJwcmltYXJ5In0sb246e2NsaWNrOmUuZ2V0Um9sZUxpc3R9fSxbZS5fdigiXG4gICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgIiksdCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCJ9KV0pLGUuX3YoIiAiKSx0KCJlbC1idXR0b24iLHthdHRyczp7dHlwZToicHJpbWFyeSJ9LG9uOntjbGljazplLmFkZFJvbGV9fSxbZS5fdigiXG4gICAgICAgICAg5re75YqgXG4gICAgICAgICAgIiksdCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXBsdXMgZWwtaWNvbi0tcmlnaHQifSldKSxlLl92KCIgIiksdCgiZWwtZGlhbG9nIix7YXR0cnM6e3Zpc2libGU6ZS5kaWFsb2dWaXNpYmxlLHRpdGxlOiLliJvlu7rop5LoibIiLHdpZHRoOiI2MCUifSxvbjp7InVwZGF0ZTp2aXNpYmxlIjpmdW5jdGlvbihuKXtlLmRpYWxvZ1Zpc2libGU9bn0sY2xvc2U6ZS5jbG9zZURpYWxvZ319LFt0KGUuY29tcG9uZW50TmFtZSx7dGFnOiJkaXYiLGF0dHJzOntyb2xlaWQ6ZS5yb2xlaWR9LG9uOntjbG9zZURpYWxvZzplLmNsb3NlRGlhbG9nfX0pXSwxKV0sMSldLDEpXSwxKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InRhYmxlLWxpc3QifSxbdCgiZWwtdGFibGUiLHtyZWY6ImNoYW5uZWxUYWJsZSIsc3RhdGljQ2xhc3M6Indob2xlLXRhYmxlIixhdHRyczp7ZGF0YTplLnRhYmxlRGF0YSxzdHJpcGU6IiIsIm1pbi1oZWlnaHQiOiI0MDAifX0sW2UuX2woZS50YWJsZUhlYWRlcixmdW5jdGlvbihlLG4pe3JldHVybiB0KCJlbC10YWJsZS1jb2x1bW4iLHtrZXk6bixhdHRyczp7cHJvcDplLnByb3AsbGFiZWw6ZS5sYWJlbCx3aWR0aDplLndpZHRoLGZvcm1hdHRlcjplLmZvcm1hdHRlcixhbGlnbjoiY2VudGVyIiwic2hvdy1vdmVyZmxvdy10b29sdGlwIjoiIn19KX0pLGUuX3YoIiAiKSx0KCJlbC10YWJsZS1jb2x1bW4iLHthdHRyczp7Zml4ZWQ6InJpZ2h0IixsYWJlbDoi5pON5L2cIixhbGlnbjoiY2VudGVyIix3aWR0aDoiMjAwIn0sc2NvcGVkU2xvdHM6ZS5fdShbe2tleToiZGVmYXVsdCIsZm46ZnVuY3Rpb24obil7cmV0dXJuW3QoInNwYW4iLFt0KCJzcGFuIix7c3RhdGljQ2xhc3M6InVzZXIgcmVzZXQtcGFzc3dvcmQiLG9uOntjbGljazpmdW5jdGlvbih0KXtlLmRldGFpbFJvbGUobi5yb3cpfX19LFtlLl92KCJcbiAgICAgICAgICAgICAg5p+l55yLXG4gICAgICAgICAgICAiKV0pLGUuX3YoIiAiKSx0KCJzcGFuIix7c3RhdGljQ2xhc3M6InVzZXIgZWRpdCIsb246e2NsaWNrOmZ1bmN0aW9uKHQpe2UuaGFuZGxlRWRpdChuLnJvdyl9fX0sW2UuX3YoIlxuICAgICAgICAgICAgICDnvJbovpFcbiAgICAgICAgICAgICIpXSksZS5fdigiICIpLHQoInNwYW4iLHtzdGF0aWNDbGFzczoidXNlciBkZWxldGUiLG9uOntjbGljazpmdW5jdGlvbih0KXtlLmhhbmRsZURlbGV0ZShuLnJvdyl9fX0sW2UuX3YoIlxuICAgICAgICAgICAgICDliKDpmaRcbiAgICAgICAgICAgICIpXSldKV19fV0pfSldLDIpLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoicGFnaW5hdGlvbiJ9LFt0KCJlbC1wYWdpbmF0aW9uIix7YXR0cnM6e3RvdGFsOmUudG90YWwsInBhZ2Utc2l6ZXMiOlsxMCwyMCwzMCw0MF0sYmFja2dyb3VuZDoiIixsYXlvdXQ6InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQifSxvbjp7InNpemUtY2hhbmdlIjplLmhhbmRsZVNpemVDaGFuZ2UsImN1cnJlbnQtY2hhbmdlIjplLmhhbmRsZUN1cnJlbnRDaGFuZ2V9fSldLDEpXSwxKV0pfTtNci5fd2l0aFN0cmlwcGVkPSEwO3ZhciBJcj17cmVuZGVyOk1yLHN0YXRpY1JlbmRlckZuczpbXX0sVHI9SXI7dmFyICRyPSExO3ZhciB6cj10KCJWVS84IikoQnIsVHIsITEsZnVuY3Rpb24oZSl7JHJ8fCh0KCJidGNzIiksdCgiMmFFYyIpKX0sImRhdGEtdi0zYjU3YzUyZiIsbnVsbCk7enIub3B0aW9ucy5fX2ZpbGU9InNyYy9jb21wb25lbnRzL21hbmFnZVJvbGUvcm9sZU1hbmFnZS52dWUiO3ZhciBVcj16ci5leHBvcnRzO3ZhciBOcj17Y29tcG9uZW50czp7Q2lyY2xlVGl0bGU6ZW59LGRhdGE6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybntydWxlRm9ybTp7dXNlcm5hbWU6IiIsb3BlcmF0aW9uQ29udGVudDoiIixzdGFydERhdGU6IiIsZW5kRGF0ZToiIn0sdGFibGVIZWFkZXI6W3twcm9wOiJsb2dpZCIsbGFiZWw6IuaXpeW/l+e8luWPtyIsd2lkdGg6MTgwfSx7cHJvcDoidXNlcm5hbWUiLGxhYmVsOiLmk43kvZzkurrlkZgiLHdpZHRoOjEyMH0se3Byb3A6ImNyZWF0ZXRpbWUiLGxhYmVsOiLmk43kvZzml6XmnJ8iLHdpZHRoOjE0MCxmb3JtYXR0ZXI6ZnVuY3Rpb24obix0LGEsaSl7cmV0dXJuIGUuJG9wdGlvbnMuZmlsdGVycy5Gb3JtYXREYXRlKGEsInl5eXktTU0tZGQgaGg6bW0iKX19LHtwcm9wOiJpcEFkZHJlc3MiLGxhYmVsOiJJUOWcsOWdgCIsd2lkdGg6MTgwfSx7cHJvcDoib3BlcmF0aW9uQ29udGVudCIsbGFiZWw6IuaTjeS9nOS6i+S7tiJ9XSx0YWJsZURhdGE6W10scGFnZU5vOjEscGFnZVNpemU6MTAsdG90YWw6MCxiYXRjaFByb2Nlc3M6IiIscHJvY2Vzc0xpc3Q6W3t2YWx1ZToid2VlayIsbGFiZWw6IuS4gOWRqOS5i+WJjSJ9LHt2YWx1ZToibW9udGgiLGxhYmVsOiLkuIDkuKrmnIjkuYvliY0ifSx7dmFsdWU6ImhhbGZZZWFyIixsYWJlbDoi5Y2K5bm05LmL5YmNIn0se3ZhbHVlOiJ5ZWFyIixsYWJlbDoi5LiA5bm05LmL5YmNIn1dfX0sd2F0Y2g6eyJydWxlRm9ybS51c2VybmFtZSI6ZnVuY3Rpb24oZSl7dGhpcy5nZXRMb2dMaXN0KCl9LCJydWxlRm9ybS5vcGVyYXRpb25Db250ZW50IjpmdW5jdGlvbihlKXt0aGlzLmdldExvZ0xpc3QoKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLmdldExvZ0xpc3QoKX0sbWV0aG9kczp7Z2V0TG9nTGlzdDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy4kb3B0aW9ucy5maWx0ZXJzLnN3YXBUaW1lKHRoaXMucnVsZUZvcm0pO3ZhciBuPW51bGwhPT10aGlzLnJ1bGVGb3JtLnN0YXJ0RGF0ZT9uZXcgRGF0ZSh0aGlzLnJ1bGVGb3JtLnN0YXJ0RGF0ZSkuZ2V0VGltZSgpOm51bGwsdD1udWxsIT09dGhpcy5ydWxlRm9ybS5lbmREYXRlP25ldyBEYXRlKHRoaXMucnVsZUZvcm0uZW5kRGF0ZSkuZ2V0VGltZSgpOm51bGw7KGZ1bmN0aW9uKGUpe3JldHVybiBiZSgibWFuYWdlci9PcGVyYXRpb25Mb2cvcGFnZSIsZSl9KSh7cGFnZU5vOnRoaXMucGFnZU5vLHBhZ2VTaXplOnRoaXMucGFnZVNpemUsdXNlcm5hbWU6dGhpcy5ydWxlRm9ybS51c2VybmFtZSxvcGVyYXRpb25Db250ZW50OnRoaXMucnVsZUZvcm0ub3BlcmF0aW9uQ29udGVudCx0aW1lU3RhcnQ6bix0aW1lRW5kOnR9KS50aGVuKGZ1bmN0aW9uKG4pe2lmKG4uc3RhdHVzKXt2YXIgdD1uLmRhdGEucmVzdWx0O2UudGFibGVEYXRhPXQubGlzdCxlLnRvdGFsPXQudG90YWwsZS5wYWdlTm89dC5wYWdlTnVtfX0pfSxoYW5kbGVTaXplQ2hhbmdlOmZ1bmN0aW9uKGUpe3RoaXMucGFnZVNpemU9ZSx0aGlzLmdldExvZ0xpc3QoKX0saGFuZGxlQ3VycmVudENoYW5nZTpmdW5jdGlvbihlKXt0aGlzLnBhZ2VObz1lLHRoaXMuZ2V0TG9nTGlzdCgpfSxjbGVhckxvZzpmdW5jdGlvbihlKXt2YXIgbj10aGlzO3RoaXMuJGNvbmZpcm0oIuaYr+WQpua4hemZpOaXpeW/lz8iLCLmj5DnpLoiLHtjb25maXJtQnV0dG9uVGV4dDoi56Gu5a6aIixjYW5jZWxCdXR0b25UZXh0OiLlj5bmtogiLHR5cGU6Indhcm5pbmcifSkudGhlbihmdW5jdGlvbigpe3N3aXRjaChlKXtjYXNlIndlZWsiOm4uZGVsZXRlTG9nKHtkYXlzOjcsbW9udGhzOm51bGwseWVhcnM6bnVsbH0pO2JyZWFrO2Nhc2UibW9udGgiOm4uZGVsZXRlTG9nKHtkYXlzOm51bGwsbW9udGhzOjEseWVhcnM6bnVsbH0pO2JyZWFrO2Nhc2UiaGFsZlllYXIiOm4uZGVsZXRlTG9nKHtkYXlzOm51bGwsbW9udGhzOjYseWVhcnM6bnVsbH0pO2JyZWFrO2Nhc2UieWVhciI6bi5kZWxldGVMb2coe2RheXM6bnVsbCxtb250aHM6bnVsbCx5ZWFyczoxfSl9fSkuY2F0Y2goZnVuY3Rpb24oZSl7Y29uc29sZS5sb2coZSl9KX0sZGVsZXRlTG9nOmZ1bmN0aW9uKGUpe3ZhciBuLHQ9dGhpczsobj1lLGJlKCJtYW5hZ2VyL09wZXJhdGlvbkxvZy9kZWxldGUiLG4pKS50aGVuKGZ1bmN0aW9uKGUpe2UuZGF0YS5zdGF0dXMmJih0LiRub3RpZnkoe3R5cGU6InN1Y2Nlc3MiLHRpdGxlOiLmj5DnpLoiLG1lc3NhZ2U6Iua4hemZpOaIkOWKnyEifSksdC5nZXRMb2dMaXN0KCkpfSl9fX0sUnI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJsb2ctc3RhdGlzdGljcyJ9LFt0KCJkaXYiLFt0KCJjaXJjbGUtdGl0bGUiLHtzdGF0aWNDbGFzczoiY2ljbGUtY29udHJvbGxlciIsYXR0cnM6eyJ0aXRsZS1uYW1lIjoi5pel5b+X57uf6K6h566h55CGIn19KSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InNlYXJjaC1mb3JtLWNvbnRhaW5lciJ9LFt0KCJlbC1mb3JtIix7c3RhdGljQ2xhc3M6ImRlbW8tZm9ybS1pbmxpbmUiLGF0dHJzOntpbmxpbmU6ITAsbW9kZWw6ZS5ydWxlRm9ybX19LFt0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuaTjeS9nOS6uuWRmCJ9fSxbdCgiZWwtaW5wdXQiLHthdHRyczp7Y2xlYXJhYmxlOiIifSxtb2RlbDp7dmFsdWU6ZS5ydWxlRm9ybS51c2VybmFtZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5ydWxlRm9ybSwidXNlcm5hbWUiLG4pfSxleHByZXNzaW9uOiJydWxlRm9ybS51c2VybmFtZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuaTjeS9nOS6i+S7tiJ9fSxbdCgiZWwtaW5wdXQiLHthdHRyczp7Y2xlYXJhYmxlOiIifSxtb2RlbDp7dmFsdWU6ZS5ydWxlRm9ybS5vcGVyYXRpb25Db250ZW50LGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLnJ1bGVGb3JtLCJvcGVyYXRpb25Db250ZW50IixuKX0sZXhwcmVzc2lvbjoicnVsZUZvcm0ub3BlcmF0aW9uQ29udGVudCJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHthdHRyczp7bGFiZWw6IuaTjeS9nOW8gOWni+aXpeacnyJ9fSxbdCgiZWwtZGF0ZS1waWNrZXIiLHthdHRyczp7dGl0bGU6ZS5fZigiRm9ybWF0RGF0ZSIpKGUucnVsZUZvcm0uc3RhcnREYXRlLCJ5eXl5LU1NLWRkIGhoOm1tIiksdHlwZToiZGF0ZXRpbWUiLGZvcm1hdDoieXl5eS1NTS1kZCBISDptbSIscGxhY2Vob2xkZXI6IumAieaLqeaXpeacnyJ9LG9uOntjaGFuZ2U6ZS5nZXRMb2dMaXN0fSxtb2RlbDp7dmFsdWU6ZS5ydWxlRm9ybS5zdGFydERhdGUsY2FsbGJhY2s6ZnVuY3Rpb24obil7ZS4kc2V0KGUucnVsZUZvcm0sInN0YXJ0RGF0ZSIsbil9LGV4cHJlc3Npb246InJ1bGVGb3JtLnN0YXJ0RGF0ZSJ9fSldLDEpLGUuX3YoIiAiKSx0KCJlbC1mb3JtLWl0ZW0iLHtzdGF0aWNTdHlsZTp7Im1hcmdpbi1sZWZ0IjoiLTI4cHgifSxhdHRyczp7bGFiZWw6IuaTjeS9nOe7k+adn+aXpeacnyJ9fSxbdCgiZWwtZGF0ZS1waWNrZXIiLHthdHRyczp7dGl0bGU6ZS5fZigiRm9ybWF0RGF0ZSIpKGUucnVsZUZvcm0uZW5kRGF0ZSwieXl5eS1NTS1kZCBoaDptbSIpLHR5cGU6ImRhdGV0aW1lIixmb3JtYXQ6Inl5eXktTU0tZGQgSEg6bW0iLHBsYWNlaG9sZGVyOiLpgInmi6nml6XmnJ8ifSxvbjp7Y2hhbmdlOmUuZ2V0TG9nTGlzdH0sbW9kZWw6e3ZhbHVlOmUucnVsZUZvcm0uZW5kRGF0ZSxjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5ydWxlRm9ybSwiZW5kRGF0ZSIsbil9LGV4cHJlc3Npb246InJ1bGVGb3JtLmVuZERhdGUifX0pXSwxKSxlLl92KCIgIiksdCgiZWwtYnV0dG9uIix7c3RhdGljU3R5bGU6eyJtYXJnaW4tbGVmdCI6Ijk4cHgifSxhdHRyczp7dHlwZToicHJpbWFyeSJ9LG9uOntjbGljazplLmdldExvZ0xpc3R9fSxbZS5fdigiXG4gICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgIiksdCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCJ9KV0pXSwxKV0sMSldLDEpLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoidGFibGUtbGlzdCJ9LFt0KCJlbC10YWJsZSIse3JlZjoiY2hhbm5lbFRhYmxlIixzdGF0aWNDbGFzczoid2hvbGUtdGFibGUiLGF0dHJzOntkYXRhOmUudGFibGVEYXRhLHN0cmlwZToiIiwibWluLWhlaWdodCI6IjQwMCJ9fSxlLl9sKGUudGFibGVIZWFkZXIsZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCgiZWwtdGFibGUtY29sdW1uIix7a2V5Om4sYXR0cnM6e3Byb3A6ZS5wcm9wLGxhYmVsOmUubGFiZWwsd2lkdGg6ZS53aWR0aCxmb3JtYXR0ZXI6ZS5mb3JtYXR0ZXIsYWxpZ246ImNlbnRlciIsInNob3ctb3ZlcmZsb3ctdG9vbHRpcCI6IiJ9fSl9KSwxKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6InBhZ2luYXRpb24ifSxbdCgiZGl2IixbdCgiZWwtc2VsZWN0Iix7YXR0cnM6e3BsYWNlaG9sZGVyOiLmuIXpmaTml6Xlv5cifSxvbjp7Y2hhbmdlOmUuY2xlYXJMb2d9LG1vZGVsOnt2YWx1ZTplLmJhdGNoUHJvY2VzcyxjYWxsYmFjazpmdW5jdGlvbihuKXtlLmJhdGNoUHJvY2Vzcz1ufSxleHByZXNzaW9uOiJiYXRjaFByb2Nlc3MifX0sZS5fbChlLnByb2Nlc3NMaXN0LGZ1bmN0aW9uKGUpe3JldHVybiB0KCJlbC1vcHRpb24iLHtrZXk6ZS52YWx1ZSxhdHRyczp7bGFiZWw6ZS5sYWJlbCx2YWx1ZTplLnZhbHVlLGRpc2FibGVkOmUuZGlzYWJsZWR9fSl9KSwxKV0sMSksZS5fdigiICIpLHQoImVsLXBhZ2luYXRpb24iLHthdHRyczp7dG90YWw6ZS50b3RhbCwicGFnZS1zaXplcyI6WzEwLDIwLDMwLDQwXSxiYWNrZ3JvdW5kOiIiLGxheW91dDoidG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dCJ9LG9uOnsic2l6ZS1jaGFuZ2UiOmUuaGFuZGxlU2l6ZUNoYW5nZSwiY3VycmVudC1jaGFuZ2UiOmUuaGFuZGxlQ3VycmVudENoYW5nZX19KV0sMSldLDEpXSl9O1JyLl93aXRoU3RyaXBwZWQ9ITA7dmFyIFZyPXtyZW5kZXI6UnIsc3RhdGljUmVuZGVyRm5zOltdfSxqcj1Wcjt2YXIgUHI9ITE7dmFyIEhyPXQoIlZVLzgiKShOcixqciwhMSxmdW5jdGlvbihlKXtQcnx8KHQoIk5YVE4iKSx0KCJ2MHF0IikpfSwiZGF0YS12LTcwMjMxYmI3IixudWxsKTtIci5vcHRpb25zLl9fZmlsZT0ic3JjL2NvbXBvbmVudHMvbWFuYWdlTG9nL2xvZ1N0YXRpc3RpY3MudnVlIjt2YXIgUXI9SHIuZXhwb3J0cyxXcj10KCJjL1RyIiksT3I9dC5uKFdyKTtmdW5jdGlvbiBxcihlKXtyZXR1cm4gYmUoIm1hbmFnZXIvQXBwQmFzZUNvbmZpZ3VyYXRpb24vZ2V0QnlDb21waWQiLGUpfWZ1bmN0aW9uIFlyKGUpe3JldHVybiBiZSgibWFuYWdlci9BcHBCYXNlQ29uZmlndXJhdGlvbi9zYXZlIixlKX12YXIgWnI9e25hbWU6Ik15VXBsb2FkIixtaXhpbnM6W3hhXSxwcm9wczp7dXBsb2FkSXRlbTp7dHlwZTpPYmplY3QsZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybnt9fX0sYWxpZ246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6IiJ9LHVwbG9hZFVybDp7dHlwZTpTdHJpbmcsZGVmYXVsdDoiIn19LGNvbXB1dGVkOntnZXRVcGxvYWRVcmw6ZnVuY3Rpb24oKXtyZXR1cm4gX2UoKX0sY2hvb3NlVXJsOmZ1bmN0aW9uKCl7cmV0dXJuImxlZnQiPT09dGhpcy5hbGlnbj90aGlzLnVwbG9hZEl0ZW0uaWNvbjoicmlnaHQiPT09dGhpcy5hbGlnbj90aGlzLnVwbG9hZEl0ZW0uaWNvbl9zZWxlY3Q6dGhpcy51cGxvYWRVcmx9fSxtZXRob2RzOntoYW5kbGVQaWN0dXJlQ2FyZFByZXZpZXc6ZnVuY3Rpb24oZSl7dGhpcy5kaWFsb2dJbWFnZVVybD1lLnVybCx0aGlzLiRlbWl0KCJvcGVuLWRpYWxvZyIsdGhpcy5kaWFsb2dJbWFnZVVybCl9LGhhbmRsZVJlbW92ZTpmdW5jdGlvbihlLG4pe2lmKGUuc3RhdHVzKXsibGVmdCI9PT10aGlzLmFsaWduP3RoaXMuJHNldCh0aGlzLnVwbG9hZEl0ZW0sImljb24iLG51bGwpOiJyaWdodCI9PT10aGlzLmFsaWduP3RoaXMuJHNldCh0aGlzLnVwbG9hZEl0ZW0sImljb25fc2VsZWN0IixudWxsKTp0aGlzLiRzZXQodGhpcy51cGxvYWRJdGVtLCJ1cmwiLG51bGwpfX0saGFuZGxlUGNBdmF0YXJTdWNjZXNzOmZ1bmN0aW9uKGUsbix0KXtpZihlLnN0YXR1cyl7dmFyIGE9ZS5yZXN1bHQ7ImxlZnQiPT09dGhpcy5hbGlnbj90aGlzLiRzZXQodGhpcy51cGxvYWRJdGVtLCJpY29uIixhKToicmlnaHQiPT09dGhpcy5hbGlnbj90aGlzLiRzZXQodGhpcy51cGxvYWRJdGVtLCJpY29uX3NlbGVjdCIsYSk6dGhpcy4kc2V0KHRoaXMudXBsb2FkSXRlbSwidXJsIixhKX19LGJlZm9yZUF2YXRhclVwbG9hZDpmdW5jdGlvbihlKXt2YXIgbj1lLnR5cGUgaW57ImltYWdlL2pwZWciOiEwLCJpbWFnZS9wbmciOiEwLCJpbWFnZS9qcGciOiEwfSx0PWUuc2l6ZS8xMDI0LzEwMjQ8MTtyZXR1cm4gbnx8dGhpcy4kbWVzc2FnZS5lcnJvcigi6K+35LiK5Lyg5LiA5byg5Zu+54mHISIpLHR8fHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuS4iuS8oOWbvueJh+Wkp+Wwj+S4jeiDvei2hei/hyAxTUIhIiksbiYmdH19fSxHcj1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1lLiRjcmVhdGVFbGVtZW50LHQ9ZS5fc2VsZi5fY3x8bjtyZXR1cm4gdCgiZWwtdXBsb2FkIix7YXR0cnM6eyJvbi1wcmV2aWV3IjplLmhhbmRsZVBpY3R1cmVDYXJkUHJldmlldyxhY3Rpb246ZS5nZXRVcGxvYWRVcmwsaGVhZGVyczplLnVwbG9hZEhlYWRlcnMsIm9uLXJlbW92ZSI6ZS5oYW5kbGVSZW1vdmUsImZpbGUtbGlzdCI6ZS5jaG9vc2VVcmw/W3t1cmw6ZS5jaG9vc2VVcmx9XTpbXSwib24tc3VjY2VzcyI6ZS5oYW5kbGVQY0F2YXRhclN1Y2Nlc3MsImJlZm9yZS11cGxvYWQiOmUuYmVmb3JlQXZhdGFyVXBsb2FkLGxpbWl0OjEsImxpc3QtdHlwZSI6InBpY3R1cmUtY2FyZCJ9fSxbdCgiaSIse3N0YXRpY0NsYXNzOiJlbC1pY29uLXBsdXMifSldKX07R3IuX3dpdGhTdHJpcHBlZD0hMDt2YXIgSnI9e3JlbmRlcjpHcixzdGF0aWNSZW5kZXJGbnM6W119LFhyPUpyO3ZhciBLcj0hMTt2YXIgZWM9dCgiVlUvOCIpKFpyLFhyLCExLGZ1bmN0aW9uKGUpe0tyfHx0KCJKelVHIil9LCJkYXRhLXYtNWMxZTczMjQiLG51bGwpO2VjLm9wdGlvbnMuX19maWxlPSJzcmMvY29tcG9uZW50cy9jb21tb25zL215VXBsb2FkLnZ1ZSI7dmFyIG5jPXtjb21wb25lbnRzOntDaXJjbGVUaXRsZTplbixNeVVwbG9hZDplYy5leHBvcnRzfSxtaXhpbnM6W3hhXSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2VkaXRGb3JtOntjaGFubmVsX3NlbGVjdF9jb2xvcjoicmVkIixzcGVjaWFsX2ljb25fY29sb3I6InJlZCIsdG9wX2ljb25fY29sb3I6InJlZCIsbWVudWxpc3Q6W10sZGlzYWJsZWQ6ITAsZGF0YToiIn0sZnJhbWVMaXN0Olt7bmFtZToi6aG26YOo6IOM5pmvIix1cmw6IiJ9LHtuYW1lOiLmiJHnmoTog4zmma8iLHVybDoiIn0se25hbWU6IuiHquWumuS5ieWbvuaghyIsdXJsOiIifSx7bmFtZToi5pCc57Si5Zu+5qCHIix1cmw6IiJ9LHtuYW1lOiLog4zmma9sb2dvIix1cmw6IiJ9XSxsb2dpbkxpc3Q6W3tuYW1lOiLnmbvlvZXog4zmma8iLHVybDoiIn0se25hbWU6IueZu+W9lWxvZ28iLHVybDoiIn0se25hbWU6IueZu+W9leaMiemSriIsdXJsOiIifSx7bmFtZToi5rOo5YaM5oyJ6ZKuIix1cmw6IiJ9LHtuYW1lOiLotKblj7dpY29uIix1cmw6IiJ9LHtuYW1lOiLlr4bnoIFpY29uIix1cmw6IiJ9XSxkaWFsb2dWaXNpYmxlOiExLGRpYWxvZ0ltYWdlVXJsOiIiLGNvdW50QXVkaXRXYWl0OiEwLHJ1bGVzOntoZWFkX2ltZzpbe3JlcXVpcmVkOiEwLG1lc3NhZ2U6Iuivt+S4iuS8oOWbvueJhyIsdHJpZ2dlcjoiYmx1ciJ9XX19fSxjb21wdXRlZDp7Z2V0VXBsb2FkVXJsOmZ1bmN0aW9uKCl7cmV0dXJuIF9lKCl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dGhpcy5nZXRCYXNpc0J5SUQoKX0sbWV0aG9kczp7Z2V0QmFzaXNCeUlEOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztxcigpLnRoZW4oZnVuY3Rpb24obil7aWYobi5kYXRhLnN0YXR1cyl7ZS5lZGl0Rm9ybS5kYXRhPW4uZGF0YS5yZXN1bHQ7dmFyIHQ9bi5kYXRhLnJlc3VsdDtmb3IodmFyIGEgaW4gY29uc29sZS5sb2codCksdC5tZW51KXQubWVudVthXS5kaXNhYmxlZD0hMDtlLmVkaXRGb3JtLm1lbnVsaXN0PXQubWVudSxlLiRzZXQoZS5mcmFtZUxpc3RbMF0sInVybCIsdC5mcmFtZS50b3BfYmdfdXJsKSxlLiRzZXQoZS5mcmFtZUxpc3RbMV0sInVybCIsdC5mcmFtZS5jZW50ZXJfYmdfdXJsKSxlLiRzZXQoZS5mcmFtZUxpc3RbMl0sInVybCIsdC5mcmFtZS5pY29uX3NlbGVjdF91cmwpLGUuJHNldChlLmZyYW1lTGlzdFszXSwidXJsIix0LmZyYW1lLnNlYXJjaF9pY29uKSxlLiRzZXQoZS5mcmFtZUxpc3RbNF0sInVybCIsdC5mcmFtZS5iZ19sb2dvX3VybCksZS4kc2V0KGUubG9naW5MaXN0WzBdLCJ1cmwiLHQubG9naW5QYWdlLmxvZ2luX2JnX3VybCksZS4kc2V0KGUubG9naW5MaXN0WzFdLCJ1cmwiLHQubG9naW5QYWdlLmxvZ2luX2xvZ29fdXJsKSxlLiRzZXQoZS5sb2dpbkxpc3RbMl0sInVybCIsdC5sb2dpblBhZ2UubG9naW5fYnRuX3VybCksZS4kc2V0KGUubG9naW5MaXN0WzNdLCJ1cmwiLHQubG9naW5QYWdlLnJlZ2lzdGVyX2J0bl91cmwpLGUuJHNldChlLmxvZ2luTGlzdFs0XSwidXJsIix0LmxvZ2luUGFnZS51c2VybmFtZV9pY29uKSxlLiRzZXQoZS5sb2dpbkxpc3RbNV0sInVybCIsdC5sb2dpblBhZ2UucGFzc3dvcmRfaWNvbiksZS5lZGl0Rm9ybS5jaGFubmVsX3NlbGVjdF9jb2xvcj10LmZyYW1lLmNoYW5uZWxfc2VsZWN0X2NvbG9yLGUuZWRpdEZvcm0uc3BlY2lhbF9pY29uX2NvbG9yPXQuY29udGVudC5zcGVjaWFsX2ljb25fY29sb3IsZS5lZGl0Rm9ybS50b3BfaWNvbl9jb2xvcj10LmNvbnRlbnQudG9wX2ljb25fY29sb3J9fSl9LGVkaXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGUgaW4gdGhpcy5lZGl0Rm9ybS5kYXRhLm1lbnUpInBlcnNvbmFsQ2VudGVyIiE9PWUmJih0aGlzLmVkaXRGb3JtLmRhdGEubWVudVtlXS5kaXNhYmxlZD0hMSk7T3IoKShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIubWVudSAuZWwtdXBsb2FkLWxpc3RfX2l0ZW0tZGVsZXRlIikpLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5zdHlsZS5kaXNwbGF5PSJpbmxpbmUtYmxvY2sifSksdGhpcy5jb3VudEF1ZGl0V2FpdD0hMX0sY2FuY2VsOmZ1bmN0aW9uKCl7T3IoKShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIubWVudSAuZWwtdXBsb2FkLWxpc3RfX2l0ZW0tZGVsZXRlIikpLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5zdHlsZS5kaXNwbGF5PSJub25lIn0pLHRoaXMuY291bnRBdWRpdFdhaXQ9ITAsdGhpcy5nZXRCYXNpc0J5SUQoKX0sb3BlbkRpYWxvZzpmdW5jdGlvbihlKXt0aGlzLmRpYWxvZ0ltYWdlVXJsPWUsdGhpcy5kaWFsb2dWaXNpYmxlPSEwfSxzdWJtaXRNZW51OmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7dGhpcy4kcmVmc1tlXS52YWxpZGF0ZShmdW5jdGlvbihlKXtpZighZSlyZXR1cm4gY29uc29sZS5sb2coImVycm9yIHN1Ym1pdCEhIiksITE7WXIoe2NvbmZpZ3VyYXRpb246e3VwZGF0ZUNvbmZpZ3VyYXRpb246Im1lbnUiLG1lbnU6e25ld3M6e2lzdXNlOm4uZWRpdEZvcm0ubWVudWxpc3QubmV3cy5pc3VzZSxuYW1lOm4uZWRpdEZvcm0ubWVudWxpc3QubmV3cy5uYW1lLGljb246bi5lZGl0Rm9ybS5tZW51bGlzdC5uZXdzLmljb24saWNvbl9zZWxlY3Q6bi5lZGl0Rm9ybS5tZW51bGlzdC5uZXdzLmljb25fc2VsZWN0fSxvbkRlbWFuZDp7aXN1c2U6bi5lZGl0Rm9ybS5tZW51bGlzdC5vbkRlbWFuZC5pc3VzZSxuYW1lOm4uZWRpdEZvcm0ubWVudWxpc3Qub25EZW1hbmQubmFtZSxpY29uOm4uZWRpdEZvcm0ubWVudWxpc3Qub25EZW1hbmQuaWNvbixpY29uX3NlbGVjdDpuLmVkaXRGb3JtLm1lbnVsaXN0Lm9uRGVtYW5kLmljb25fc2VsZWN0fSxsaXZlQnJvYWRjYXN0Ontpc3VzZTpuLmVkaXRGb3JtLm1lbnVsaXN0LmxpdmVCcm9hZGNhc3QuaXN1c2UsbmFtZTpuLmVkaXRGb3JtLm1lbnVsaXN0LmxpdmVCcm9hZGNhc3QubmFtZSxpY29uOm4uZWRpdEZvcm0ubWVudWxpc3QubGl2ZUJyb2FkY2FzdC5pY29uLGljb25fc2VsZWN0Om4uZWRpdEZvcm0ubWVudWxpc3QubGl2ZUJyb2FkY2FzdC5pY29uX3NlbGVjdH0sc2VydmljZTp7aXN1c2U6bi5lZGl0Rm9ybS5tZW51bGlzdC5zZXJ2aWNlLmlzdXNlLG5hbWU6bi5lZGl0Rm9ybS5tZW51bGlzdC5zZXJ2aWNlLm5hbWUsaWNvbjpuLmVkaXRGb3JtLm1lbnVsaXN0LnNlcnZpY2UuaWNvbixpY29uX3NlbGVjdDpuLmVkaXRGb3JtLm1lbnVsaXN0LnNlcnZpY2UuaWNvbl9zZWxlY3R9LGVfY29tbWVyY2U6e2lzdXNlOm4uZWRpdEZvcm0ubWVudWxpc3QuZV9jb21tZXJjZS5pc3VzZSxuYW1lOm4uZWRpdEZvcm0ubWVudWxpc3QuZV9jb21tZXJjZS5uYW1lLGljb246bi5lZGl0Rm9ybS5tZW51bGlzdC5lX2NvbW1lcmNlLmljb24saWNvbl9zZWxlY3Q6bi5lZGl0Rm9ybS5tZW51bGlzdC5lX2NvbW1lcmNlLmljb25fc2VsZWN0fSxpbnRlcmFjdGlvbjp7aXN1c2U6bi5lZGl0Rm9ybS5tZW51bGlzdC5pbnRlcmFjdGlvbi5pc3VzZSxuYW1lOm4uZWRpdEZvcm0ubWVudWxpc3QuaW50ZXJhY3Rpb24ubmFtZSxpY29uOm4uZWRpdEZvcm0ubWVudWxpc3QuaW50ZXJhY3Rpb24uaWNvbixpY29uX3NlbGVjdDpuLmVkaXRGb3JtLm1lbnVsaXN0LmludGVyYWN0aW9uLmljb25fc2VsZWN0fSxwZXJzb25hbENlbnRlcjp7aXN1c2U6bi5lZGl0Rm9ybS5tZW51bGlzdC5wZXJzb25hbENlbnRlci5pc3VzZSxuYW1lOm4uZWRpdEZvcm0ubWVudWxpc3QucGVyc29uYWxDZW50ZXIubmFtZSxpY29uOm4uZWRpdEZvcm0ubWVudWxpc3QucGVyc29uYWxDZW50ZXIuaWNvbixpY29uX3NlbGVjdDpuLmVkaXRGb3JtLm1lbnVsaXN0LnBlcnNvbmFsQ2VudGVyLmljb25fc2VsZWN0fX19fSkudGhlbihmdW5jdGlvbihlKXsyMDA9PT1lLnN0YXR1cyYmKE9yKCkoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiLm1lbnUgLmVsLXVwbG9hZC1saXN0X19pdGVtLWRlbGV0ZSIpKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2Uuc3R5bGUuZGlzcGxheT0ibm9uZSJ9KSxuLmdldEJhc2lzQnlJRCgpLG4uY291bnRBdWRpdFdhaXQ9ITAsbi4kbm90aWZ5KHt0aXRsZToi6YCa55+lIixtZXNzYWdlOiLmm7TmlLnmiJDlip8iLHR5cGU6InN1Y2Nlc3MifSkpfSl9KX0sc3VibWl0RnJhbWU6ZnVuY3Rpb24oZSl7dmFyIG49dGhpczt0aGlzLiRyZWZzW2VdLnZhbGlkYXRlKGZ1bmN0aW9uKGUpe2lmKCFlKXJldHVybiBjb25zb2xlLmxvZygiZXJyb3Igc3VibWl0ISEiKSwhMTtZcih7Y29uZmlndXJhdGlvbjp7dXBkYXRlQ29uZmlndXJhdGlvbjoiZnJhbWUiLGZyYW1lOnt0b3BfYmdfdXJsOm4uZnJhbWVMaXN0WzBdLnVybCxjZW50ZXJfYmdfdXJsOm4uZnJhbWVMaXN0WzFdLnVybCxpY29uX3NlbGVjdF91cmw6bi5mcmFtZUxpc3RbMl0udXJsLHNlYXJjaF9pY29uOm4uZnJhbWVMaXN0WzNdLnVybCxiZ19sb2dvX3VybDpuLmZyYW1lTGlzdFs0XS51cmwsY2hhbm5lbF9zZWxlY3RfY29sb3I6bi5lZGl0Rm9ybS5jaGFubmVsX3NlbGVjdF9jb2xvcn19fSkudGhlbihmdW5jdGlvbihlKXsyMDA9PT1lLnN0YXR1cyYmKHFyKCkudGhlbihmdW5jdGlvbihlKXtpZihlLmRhdGEuc3RhdHVzKXt2YXIgdD1lLmRhdGEucmVzdWx0O24uJHNldChuLmZyYW1lTGlzdFswXSwidXJsIix0LmZyYW1lLnRvcF9iZ191cmwpLG4uJHNldChuLmZyYW1lTGlzdFsxXSwidXJsIix0LmZyYW1lLmNlbnRlcl9iZ191cmwpLG4uJHNldChuLmZyYW1lTGlzdFsyXSwidXJsIix0LmZyYW1lLmljb25fc2VsZWN0X3VybCksbi4kc2V0KG4uZnJhbWVMaXN0WzNdLCJ1cmwiLHQuZnJhbWUuc2VhcmNoX2ljb24pLG4uJHNldChuLmZyYW1lTGlzdFs0XSwidXJsIix0LmZyYW1lLmJnX2xvZ29fdXJsKSxuLmVkaXRGb3JtLmNoYW5uZWxfc2VsZWN0X2NvbG9yPXQuZnJhbWUuY2hhbm5lbF9zZWxlY3RfY29sb3J9fSksbi4kbm90aWZ5KHt0aXRsZToi6YCa55+lIixtZXNzYWdlOiLmm7TmlLnmiJDlip8iLHR5cGU6InN1Y2Nlc3MifSkpfSl9KX0sc3VibWl0Q29udGVudDpmdW5jdGlvbihlKXt2YXIgbj10aGlzO3RoaXMuJHJlZnNbZV0udmFsaWRhdGUoZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuIGNvbnNvbGUubG9nKCJlcnJvciBzdWJtaXQhISIpLCExO1lyKHtjb25maWd1cmF0aW9uOnt1cGRhdGVDb25maWd1cmF0aW9uOiJjb250ZW50Iixjb250ZW50OntzcGVjaWFsX2ljb25fY29sb3I6bi5lZGl0Rm9ybS5zcGVjaWFsX2ljb25fY29sb3IsdG9wX2ljb25fY29sb3I6bi5lZGl0Rm9ybS50b3BfaWNvbl9jb2xvcn19fSkudGhlbihmdW5jdGlvbihlKXsyMDA9PT1lLnN0YXR1cyYmKHFyKCkudGhlbihmdW5jdGlvbihlKXtpZihlLmRhdGEuc3RhdHVzKXt2YXIgdD1lLmRhdGEucmVzdWx0O24uZWRpdEZvcm0uc3BlY2lhbF9pY29uX2NvbG9yPXQuY29udGVudC5zcGVjaWFsX2ljb25fY29sb3Isbi5lZGl0Rm9ybS50b3BfaWNvbl9jb2xvcj10LmNvbnRlbnQudG9wX2ljb25fY29sb3J9fSksbi4kbm90aWZ5KHt0aXRsZToi6YCa55+lIixtZXNzYWdlOiLmm7TmlLnmiJDlip8iLHR5cGU6InN1Y2Nlc3MifSkpfSl9KX0sc3VibWl0TG9naW46ZnVuY3Rpb24oZSl7dmFyIG49dGhpczt0aGlzLiRyZWZzW2VdLnZhbGlkYXRlKGZ1bmN0aW9uKGUpe2lmKCFlKXJldHVybiBjb25zb2xlLmxvZygiZXJyb3Igc3VibWl0ISEiKSwhMTtZcih7Y29uZmlndXJhdGlvbjp7dXBkYXRlQ29uZmlndXJhdGlvbjoibG9naW5QYWdlIixsb2dpblBhZ2U6e2xvZ2luX2JnX3VybDpuLmxvZ2luTGlzdFswXS51cmwsbG9naW5fbG9nb191cmw6bi5sb2dpbkxpc3RbMV0udXJsLGxvZ2luX2J0bl91cmw6bi5sb2dpbkxpc3RbMl0udXJsLHJlZ2lzdGVyX2J0bl91cmw6bi5sb2dpbkxpc3RbM10udXJsLHVzZXJuYW1lX2ljb246bi5sb2dpbkxpc3RbNF0udXJsLHBhc3N3b3JkX2ljb246bi5sb2dpbkxpc3RbNV0udXJsfX19KS50aGVuKGZ1bmN0aW9uKGUpezIwMD09PWUuc3RhdHVzJiYocXIoKS50aGVuKGZ1bmN0aW9uKGUpe2lmKGUuZGF0YS5zdGF0dXMpe3ZhciB0PWUuZGF0YS5yZXN1bHQ7bi4kc2V0KG4ubG9naW5MaXN0WzBdLCJ1cmwiLHQubG9naW5QYWdlLmxvZ2luX2JnX3VybCksbi4kc2V0KG4ubG9naW5MaXN0WzFdLCJ1cmwiLHQubG9naW5QYWdlLmxvZ2luX2xvZ29fdXJsKSxuLiRzZXQobi5sb2dpbkxpc3RbMl0sInVybCIsdC5sb2dpblBhZ2UubG9naW5fYnRuX3VybCksbi4kc2V0KG4ubG9naW5MaXN0WzNdLCJ1cmwiLHQubG9naW5QYWdlLnJlZ2lzdGVyX2J0bl91cmwpLG4uJHNldChuLmxvZ2luTGlzdFs0XSwidXJsIix0LmxvZ2luUGFnZS51c2VybmFtZV9pY29uKSxuLiRzZXQobi5sb2dpbkxpc3RbNV0sInVybCIsdC5sb2dpblBhZ2UucGFzc3dvcmRfaWNvbil9fSksbi4kbm90aWZ5KHt0aXRsZToi6YCa55+lIixtZXNzYWdlOiLmm7TmlLnmiJDlip8iLHR5cGU6InN1Y2Nlc3MifSkpfSl9KX0saGFuZGxlUGNBdmF0YXJTdWNjZXNzOmZ1bmN0aW9uKGUsbix0KXtpZihjb25zb2xlLmxvZyhlKSxlLnN0YXR1cyl7dmFyIGE9ZS5yZXN1bHQ7ImxlZnQiPT09dGhpcy5hbGlnbj90aGlzLiRzZXQodGhpcy51cGxvYWRJdGVtLCJpY29uIixhKTp0aGlzLiRzZXQodGhpcy51cGxvYWRJdGVtLCJpY29uX3NlbGVjdCIsYSl9fSxiZWZvcmVBdmF0YXJVcGxvYWQ6ZnVuY3Rpb24oZSl7dmFyIG49ZS50eXBlIGlueyJpbWFnZS9qcGVnIjohMCwiaW1hZ2UvcG5nIjohMCwiaW1hZ2UvanBnIjohMH0sdD1lLnNpemUvMTAyNC8xMDI0PDE7cmV0dXJuIG58fHRoaXMuJG1lc3NhZ2UuZXJyb3IoIuivt+S4iuS8oOS4gOW8oOWbvueJhyEiKSx0fHx0aGlzLiRtZXNzYWdlLmVycm9yKCLkuIrkvKDlm77niYflpKflsI/kuI3og73otoXov4cgMU1CISIpLG4mJnR9fX0sdGM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49ZS4kY3JlYXRlRWxlbWVudCx0PWUuX3NlbGYuX2N8fG47cmV0dXJuIHQoImRpdiIse3N0YXRpY0NsYXNzOiJiYXNpcyJ9LFt0KCJlbC1mb3JtIix7cmVmOiJlZGl0Rm9ybSIsc3RhdGljQ2xhc3M6ImRlbW8tcnVsZUZvcm0iLGF0dHJzOnttb2RlbDplLmVkaXRGb3JtLHJ1bGVzOmUucnVsZXMsImxhYmVsLXdpZHRoIjoiMTAwcHgifX0sW3QoImRpdiIse3N0YXRpY0NsYXNzOiJtZW51In0sW3QoImNpcmNsZS10aXRsZSIse3N0YXRpY0NsYXNzOiJjaXJjbGUtdGl0bGUiLGF0dHJzOnsidGl0bGUtbmFtZSI6IuiPnOWNlemFjee9riJ9fSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJtZW51LWJveCJ9LGUuX2woZS5lZGl0Rm9ybS5tZW51bGlzdCxmdW5jdGlvbihuLGEpe3JldHVybiB0KCJkaXYiLHtrZXk6YSxzdGF0aWNDbGFzczoiYm94LWxlZnQifSxbdCgiZWwtY2hlY2tib3giLHthdHRyczp7ZGlzYWJsZWQ6bi5kaXNhYmxlZH0sbW9kZWw6e3ZhbHVlOm4uaXN1c2UsY2FsbGJhY2s6ZnVuY3Rpb24odCl7ZS4kc2V0KG4sImlzdXNlIix0KX0sZXhwcmVzc2lvbjoiaXRlbS5pc3VzZSJ9fSxbdCgiZGl2Iix7Y2xhc3M6WyJ0aXRsZSIsZS5jb3VudEF1ZGl0V2FpdD8iYmxvY2siOiJub25lIl19LFtlLl92KCIgIitlLl9zKG4ubmFtZSkrIiAiKV0pLGUuX3YoIiAiKSx0KCJpbnB1dCIse2RpcmVjdGl2ZXM6W3tuYW1lOiJtb2RlbCIscmF3TmFtZToidi1tb2RlbCIsdmFsdWU6bi5uYW1lLGV4cHJlc3Npb246Iml0ZW0ubmFtZSJ9XSxjbGFzczpbImlucHV0IixlLmNvdW50QXVkaXRXYWl0PyJpbnB1dC1ub25lIjoiaW5wdXQtYmxvY2siXSxhdHRyczp7ZGlzYWJsZWQ6bi5kaXNhYmxlZCxtaW5sZW5ndGg6IjEiLG1heGxlbmd0aDoiMyIsdHlwZToidGV4dCJ9LGRvbVByb3BzOnt2YWx1ZTpuLm5hbWV9LG9uOntpbnB1dDpmdW5jdGlvbih0KXt0LnRhcmdldC5jb21wb3Npbmd8fGUuJHNldChuLCJuYW1lIix0LnRhcmdldC52YWx1ZSl9fX0pXSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJpbWctYm94In0sW3QoImRpdiIse3N0YXRpY1N0eWxlOnt3aWR0aDoiNjBweCIsaGVpZ2h0OiI2MHB4IixvdmVyZmxvdzoiaGlkZGVuIn19LFt0KCJteS11cGxvYWQiLHthdHRyczp7InVwbG9hZC1pdGVtIjpuLGFsaWduOiJsZWZ0In0sb246eyJvcGVuLWRpYWxvZyI6ZS5vcGVuRGlhbG9nfX0pLGUuX3YoIiAiKSx0KCJlbC1kaWFsb2ciLHthdHRyczp7dmlzaWJsZTplLmRpYWxvZ1Zpc2libGV9LG9uOnsidXBkYXRlOnZpc2libGUiOmZ1bmN0aW9uKG4pe2UuZGlhbG9nVmlzaWJsZT1ufX19LFt0KCJpbWciLHthdHRyczp7c3JjOmUuZGlhbG9nSW1hZ2VVcmwsYWx0OiIifX0pXSldLDEpLGUuX3YoIiAiKSx0KCJzcGFuIixbZS5fdigi6buY6K6k5Zu+IildKV0pLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoiaW1nLWJveCJ9LFt0KCJkaXYiLHtzdGF0aWNTdHlsZTp7d2lkdGg6IjYwcHgiLGhlaWdodDoiNjBweCIsb3ZlcmZsb3c6ImhpZGRlbiJ9fSxbdCgibXktdXBsb2FkIix7YXR0cnM6eyJ1cGxvYWQtaWQiOm4uaWQsInVwbG9hZC1pdGVtIjpuLGFsaWduOiJyaWdodCJ9LG9uOnsib3Blbi1kaWFsb2ciOmUub3BlbkRpYWxvZ319KV0sMSksZS5fdigiICIpLHQoInNwYW4iLFtlLl92KCLpgInkuK3lm74iKV0pXSldLDEpfSksMCksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJlZGl0In0sW3QoImVsLWJ1dHRvbiIse2NsYXNzOlsiIixlLmNvdW50QXVkaXRXYWl0PyJibG9jayI6Im5vbmUiXSxzdGF0aWNTdHlsZTp7Im1hcmdpbi1sZWZ0IjoiOTAlIiwiZm9udC1zaXplIjoiMTRweCJ9LGF0dHJzOnt0eXBlOiJwcmltYXJ5IixzaXplOiJzbWFsbCJ9LG9uOntjbGljazpmdW5jdGlvbihuKXtlLmVkaXQoKX19fSxbZS5fdigi57yW6L6RIildKSxlLl92KCIgIiksdCgiZGl2Iix7Y2xhc3M6WyJzYXZlIixlLmNvdW50QXVkaXRXYWl0PyJub25lIjoiYmxvY2siXX0sW3QoImVsLWJ1dHRvbiIse3N0YXRpY1N0eWxlOnsiZm9udC1zaXplIjoiMTRweCJ9LGF0dHJzOnt0eXBlOiJwcmltYXJ5IixzaXplOiJzbWFsbCJ9LG9uOntjbGljazpmdW5jdGlvbihuKXtlLnN1Ym1pdE1lbnUoImVkaXRGb3JtIil9fX0sW2UuX3YoIuS/neWtmCIpXSksZS5fdigiICIpLHQoImVsLWJ1dHRvbiIse3N0YXRpY1N0eWxlOnsiZm9udC1zaXplIjoiMTRweCJ9LGF0dHJzOnt0eXBlOiJpbmZvIixzaXplOiJzbWFsbCJ9LG9uOntjbGljazpmdW5jdGlvbihuKXtlLmNhbmNlbCgpfX19LFtlLl92KCLlj5bmtogiKV0pXSwxKV0sMSldLDEpLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoiZnJhbWUifSxbdCgiY2lyY2xlLXRpdGxlIix7c3RhdGljQ2xhc3M6ImNpcmNsZS10aXRsZSIsYXR0cnM6eyJ0aXRsZS1uYW1lIjoi5qGG5p625YaF5a65In19KSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImZyYW1lLWJveCJ9LGUuX2woZS5mcmFtZUxpc3QsZnVuY3Rpb24obixhKXtyZXR1cm4gdCgiZGl2Iix7a2V5OmEsc3RhdGljQ2xhc3M6ImJveC1sZWZ0In0sW3QoImRpdiIse3N0YXRpY0NsYXNzOiJmcmFtZXdvcmstdGl0bGUifSxbZS5fdihlLl9zKG4ubmFtZSkpXSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJpbWctYm94In0sW3QoImRpdiIse3N0YXRpY1N0eWxlOnt3aWR0aDoiNjBweCIsaGVpZ2h0OiI2MHB4IixvdmVyZmxvdzoiaGlkZGVuIn19LFt0KCJteS11cGxvYWQiLHthdHRyczp7InVwbG9hZC1pdGVtIjpuLCJ1cGxvYWQtdXJsIjpuLnVybH0sb246eyJ1cGRhdGU6dXBsb2FkVXJsIjpmdW5jdGlvbih0KXtlLiRzZXQobiwidXJsIix0KX0sIm9wZW4tZGlhbG9nIjplLm9wZW5EaWFsb2d9fSldLDEpXSldKX0pLDApLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoiZnJhbWUtYm94In0sW3QoImRpdiIse3N0YXRpY0NsYXNzOiJib3gtbGVmdCJ9LFt0KCJkaXYiLHtzdGF0aWNDbGFzczoiZnJhbWV3b3JrLXRpdGxlIn0sW2UuX3YoIumikemBk+mAieS4reminOiJsiIpXSksZS5fdigiICIpLHQoImVsLWNvbG9yLXBpY2tlciIse3N0YXRpY0NsYXNzOiJpbWctYm94Iixtb2RlbDp7dmFsdWU6ZS5lZGl0Rm9ybS5jaGFubmVsX3NlbGVjdF9jb2xvcixjYWxsYmFjazpmdW5jdGlvbihuKXtlLiRzZXQoZS5lZGl0Rm9ybSwiY2hhbm5lbF9zZWxlY3RfY29sb3IiLG4pfSxleHByZXNzaW9uOiJlZGl0Rm9ybS5jaGFubmVsX3NlbGVjdF9jb2xvciJ9fSldLDEpXSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJlZGl0In0sW3QoImVsLWJ1dHRvbiIse3N0YXRpY1N0eWxlOnsibWFyZ2luLWxlZnQiOiI5MCUiLCJmb250LXNpemUiOiIxNHB4In0sYXR0cnM6e3R5cGU6InByaW1hcnkiLHNpemU6InNtYWxsIn0sb246e2NsaWNrOmZ1bmN0aW9uKG4pe2Uuc3VibWl0RnJhbWUoImVkaXRGb3JtIil9fX0sW2UuX3YoIuS/neWtmCIpXSldLDEpXSwxKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImZyYW1lIGNvbnRlbnQifSxbdCgiY2lyY2xlLXRpdGxlIix7c3RhdGljQ2xhc3M6ImNpcmNsZS10aXRsZSIsYXR0cnM6eyJ0aXRsZS1uYW1lIjoi5YaF5a655qCH6K+GIn19KSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImZyYW1lLWJveCJ9LFt0KCJkaXYiLHtzdGF0aWNDbGFzczoiYm94LWxlZnQifSxbdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImZyYW1ld29yay10aXRsZSJ9LFtlLl92KCLkuJPpopjlm77moIfpopzoibIiKV0pLGUuX3YoIiAiKSx0KCJlbC1jb2xvci1waWNrZXIiLHtzdGF0aWNDbGFzczoiaW1nLWJveCIsbW9kZWw6e3ZhbHVlOmUuZWRpdEZvcm0uc3BlY2lhbF9pY29uX2NvbG9yLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmVkaXRGb3JtLCJzcGVjaWFsX2ljb25fY29sb3IiLG4pfSxleHByZXNzaW9uOiJlZGl0Rm9ybS5zcGVjaWFsX2ljb25fY29sb3IifX0pXSwxKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImJveC1sZWZ0In0sW3QoImRpdiIse3N0YXRpY0NsYXNzOiJmcmFtZXdvcmstdGl0bGUifSxbZS5fdigi572u6aG25Zu+5qCH6aKc6ImyIildKSxlLl92KCIgIiksdCgiZWwtY29sb3ItcGlja2VyIix7c3RhdGljQ2xhc3M6ImltZy1ib3giLG1vZGVsOnt2YWx1ZTplLmVkaXRGb3JtLnRvcF9pY29uX2NvbG9yLGNhbGxiYWNrOmZ1bmN0aW9uKG4pe2UuJHNldChlLmVkaXRGb3JtLCJ0b3BfaWNvbl9jb2xvciIsbil9LGV4cHJlc3Npb246ImVkaXRGb3JtLnRvcF9pY29uX2NvbG9yIn19KV0sMSldKSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImVkaXQifSxbdCgiZWwtYnV0dG9uIix7c3RhdGljU3R5bGU6eyJtYXJnaW4tbGVmdCI6IjkwJSIsImZvbnQtc2l6ZSI6IjE0cHgifSxhdHRyczp7dHlwZToicHJpbWFyeSIsc2l6ZToic21hbGwifSxvbjp7Y2xpY2s6ZnVuY3Rpb24obil7ZS5zdWJtaXRDb250ZW50KCJlZGl0Rm9ybSIpfX19LFtlLl92KCLkv53lrZgiKV0pXSwxKV0sMSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJmcmFtZSBsb2dpblBhZ2UifSxbdCgiY2lyY2xlLXRpdGxlIix7c3RhdGljQ2xhc3M6ImNpcmNsZS10aXRsZSIsYXR0cnM6eyJ0aXRsZS1uYW1lIjoi55m75b2V6aG1In19KSxlLl92KCIgIiksdCgiZGl2Iix7c3RhdGljQ2xhc3M6ImZyYW1lLWJveCJ9LGUuX2woZS5sb2dpbkxpc3QsZnVuY3Rpb24obixhKXtyZXR1cm4gdCgiZGl2Iix7a2V5OmEsc3RhdGljQ2xhc3M6ImJveC1sZWZ0In0sW3QoImRpdiIse3N0YXRpY0NsYXNzOiJmcmFtZXdvcmstdGl0bGUifSxbZS5fdihlLl9zKG4ubmFtZSkpXSksZS5fdigiICIpLHQoImRpdiIse3N0YXRpY0NsYXNzOiJpbWctYm94In0sW3QoImRpdiIse3N0YXRpY1N0eWxlOnt3aWR0aDoiNjBweCIsaGVpZ2h0OiI2MHB4IixvdmVyZmxvdzoiaGlkZGVuIn19LFt0KCJteS11cGxvYWQiLHthdHRyczp7InVwbG9hZC1pdGVtIjpuLCJ1cGxvYWQtdXJsIjpuLnVybH0sb246eyJ1cGRhdGU6dXBsb2FkVXJsIjpmdW5jdGlvbih0KXtlLiRzZXQobiwidXJsIix0KX0sIm9wZW4tZGlhbG9nIjplLm9wZW5EaWFsb2d9fSldLDEpXSldKX0pLDApLGUuX3YoIiAiKSx0KCJkaXYiLHtzdGF0aWNDbGFzczoiZWRpdCJ9LFt0KCJlbC1idXR0b24iLHtzdGF0aWNTdHlsZTp7Im1hcmdpbi1sZWZ0IjoiOTAlIiwiZm9udC1zaXplIjoiMTRweCJ9LGF0dHJzOnt0eXBlOiJwcmltYXJ5IixzaXplOiJzbWFsbCJ9LG9uOntjbGljazpmdW5jdGlvbihuKXtlLnN1Ym1pdExvZ2luKCJlZGl0Rm9ybSIpfX19LFtlLl92KCLkv53lrZgiKV0pXSwxKV0sMSldKV0sMSl9O3RjLl93aXRoU3RyaXBwZWQ9ITA7dmFyIGFjPXtyZW5kZXI6dGMsc3RhdGljUmVuZGVyRm5zOltdfSxpYz1hYzt2YXIgbGM9ITE7dmFyIG9jPXQoIlZVLzgiKShuYyxpYywhMSxmdW5jdGlvbihlKXtsY3x8KHQoIk83MFYiKSx0KCJuSXMxIikpfSwiZGF0YS12LTcyNDc0NzQ0IixudWxsKTtvYy5vcHRpb25zLl9fZmlsZT0ic3JjL2NvbXBvbmVudHMvbWFuYWdlQmFzaXMvYmFzaXNDb25maWd1cmF0aW9uLnZ1ZSI7dmFyIHNjPW9jLmV4cG9ydHM7aWUuZGVmYXVsdC51c2UocWUuYSk7dmFyIHJjPVt7cGF0aDoiLyIsY29tcG9uZW50OlVlLHJlZGlyZWN0OiIvaG9tZSJ9LHtwYXRoOiIvaG9tZSIsY29tcG9uZW50OkNufSx7cGF0aDoiL21hbmFnZUNoYW5uZWwiLGNvbXBvbmVudDprbixyZWRpcmVjdDoiL21hbmFnZUNoYW5uZWwvbGlzdCIsY2hpbGRyZW46W3twYXRoOiJsaXN0Iixjb21wb25lbnQ6cXQsbWV0YTp7a2VlcEFsaXZlOiEwfX0se3BhdGg6ImNyZWF0ZSIsY29tcG9uZW50OnNhfSx7cGF0aDoiZWRpdCIsbmFtZToiY2hhbm5lbEVkaXQiLGNvbXBvbmVudDpoYX1dfSx7cGF0aDoiL21hbmFnZVNsaWRlIixjb21wb25lbnQ6Qm4scmVkaXJlY3Q6Ii9tYW5hZ2VTbGlkZS9saXN0IixjaGlsZHJlbjpbe3BhdGg6Imxpc3QiLGNvbXBvbmVudDpRYSxtZXRhOntrZWVwQWxpdmU6ITB9fSx7cGF0aDoiY3JlYXRlIixjb21wb25lbnQ6cGl9LHtwYXRoOiJlZGl0IixuYW1lOiJzbGlkZUVkaXQiLGNvbXBvbmVudDp2aX1dfSx7cGF0aDoiL21hbmFnZVRvcGljIixjb21wb25lbnQ6em4scmVkaXJlY3Q6Ii9tYW5hZ2VUb3BpYy9saXN0IixjaGlsZHJlbjpbe3BhdGg6Imxpc3QiLGNvbXBvbmVudDpfYSxtZXRhOntrZWVwQWxpdmU6ITB9fSx7cGF0aDoiY3JlYXRlIixjb21wb25lbnQ6TGF9LHtwYXRoOiJlZGl0IixuYW1lOiJ0b3BpY0VkaXQiLGNvbXBvbmVudDpVYX1dfSx7cGF0aDoiL21hbmFnZU1hbnVzY3JpcHQiLGNvbXBvbmVudDpqbixyZWRpcmVjdDoiL21hbmFnZU1hbnVzY3JpcHQvbGlzdCIsY2hpbGRyZW46W3twYXRoOiJsaXN0Iixjb21wb25lbnQ6JGl9XX0se3BhdGg6Ii9zdWJMaXZlIixjb21wb25lbnQ6Sm4scmVkaXJlY3Q6Ii9zdWJMaXZlL2xpc3QiLGNoaWxkcmVuOlt7cGF0aDoibGlzdCIsY29tcG9uZW50OkZsfV19LHtwYXRoOiIvc3ViQ2hhbm5lbCIsY29tcG9uZW50OkpuLHJlZGlyZWN0OiIvc3ViQ2hhbm5lbC9saXN0IixjaGlsZHJlbjpbe3BhdGg6Imxpc3QiLGNvbXBvbmVudDpNbCxtZXRhOntrZWVwQWxpdmU6ITB9fSx7cGF0aDoiY3JlYXRlIixjb21wb25lbnQ6T2x9LHtwYXRoOiJlZGl0Iixjb21wb25lbnQ6S2x9XX0se3BhdGg6Ii9saXZlIixjb21wb25lbnQ6dHQscmVkaXJlY3Q6Ii9saXZlL2xpc3QiLGNoaWxkcmVuOlt7cGF0aDoibGlzdCIsY29tcG9uZW50OnNvLG1ldGE6e2tlZXBBbGl2ZTohMH19LHtwYXRoOiJjcmVhdGUiLGNvbXBvbmVudDpnb30se3BhdGg6ImVkaXQiLGNvbXBvbmVudDpfb31dfSx7cGF0aDoiL2V2ZW50Iixjb21wb25lbnQ6c3QscmVkaXJlY3Q6Ii9ldmVudC9saXN0IixjaGlsZHJlbjpbe3BhdGg6Imxpc3QiLGNvbXBvbmVudDpRb30se3BhdGg6InVzZXJFdmVudExpc3QiLGNvbXBvbmVudDppc30se3BhdGg6ImNyZWF0ZSIsY29tcG9uZW50OkpvfSx7cGF0aDoiZWRpdCIsY29tcG9uZW50OlVvfV19LHtwYXRoOiIvdXNlciIsY29tcG9uZW50OnB0LHJlZGlyZWN0OiIvdXNlci9saXN0IixjaGlsZHJlbjpbe3BhdGg6Imxpc3QiLGNvbXBvbmVudDpoc30se3BhdGg6ImJsYWNrLXdoaXRlIixjb21wb25lbnQ6dnN9XX0se3BhdGg6Ii9jb21tZW50Iixjb21wb25lbnQ6ZnQscmVkaXJlY3Q6Ii9jb21tZW50L2xpc3QiLGNoaWxkcmVuOlt7cGF0aDoibGlzdCIsY29tcG9uZW50OiRzfSx7cGF0aDoibGltaXQiLGNvbXBvbmVudDpQc31dfSx7cGF0aDoiL21hbmFnZVN0YXJ0cGFnZSIsY29tcG9uZW50Ok9uLHJlZGlyZWN0OiIvbWFuYWdlU3RhcnRwYWdlL2xpc3QiLGNoaWxkcmVuOlt7cGF0aDoibGlzdCIsY29tcG9uZW50OlBpLG1ldGE6e2tlZXBBbGl2ZTohMH19LHtwYXRoOiJjcmVhdGUiLGNvbXBvbmVudDpaaX0se3BhdGg6ImVkaXQiLG5hbWU6InN0YXJ0cGFnZUVkaXQiLGNvbXBvbmVudDpjbH0se3BhdGg6ImlubmVyQWR2ZXJFZGl0IixuYW1lOiJpbm5lckFkdmVyRWRpdCIsY29tcG9uZW50OnRsfV19LHtwYXRoOiIvbWFuYWdlU3lzdGVtVXNlciIsY29tcG9uZW50Ol90LHJlZGlyZWN0OiIvbWFuYWdlU3lzdGVtVXNlci9zeXN0ZW1Vc2VyIixjaGlsZHJlbjpbe3BhdGg6InN5c3RlbVVzZXIiLGNvbXBvbmVudDpycn1dfSx7cGF0aDoiL21hbmFnZVJvbGUiLGNvbXBvbmVudDpTdCxyZWRpcmVjdDoiL21hbmFnZVJvbGUvcm9sZSIsY2hpbGRyZW46W3twYXRoOiJyb2xlIixjb21wb25lbnQ6VXJ9XX0se3BhdGg6Ii9tYW5hZ2VMb2ciLGNvbXBvbmVudDpNdCxyZWRpcmVjdDoiL21hbmFnZUxvZy9sb2dTdGF0aXN0aWNzIixjaGlsZHJlbjpbe3BhdGg6ImxvZ1N0YXRpc3RpY3MiLGNvbXBvbmVudDpRcn1dfSx7cGF0aDoiL21hbmFnZUJhc2lzIixjb21wb25lbnQ6VXQscmVkaXJlY3Q6Ii9tYW5hZ2VCYXNpcy9iYXNpcyIsY2hpbGRyZW46W3twYXRoOiJiYXNpcyIsY29tcG9uZW50OnNjfV19XSxjYz1uZXcgcWUuYSh7bW9kZToiaGFzaCIscm91dGVzOnJjfSksbWM9ZnVuY3Rpb24oZSxuKXtpZigiIj09PWV8fG51bGw9PT1lKXJldHVybiExO3ZhciB0PXsiTSsiOihlPWUgaW5zdGFuY2VvZiBEYXRlP2U6bmV3IERhdGUoZSkpLmdldE1vbnRoKCkrMSwiZCsiOmUuZ2V0RGF0ZSgpLCJoKyI6ZS5nZXRIb3VycygpLCJtKyI6ZS5nZXRNaW51dGVzKCksInMrIjplLmdldFNlY29uZHMoKX07Zm9yKHZhciBhIGluLyh5KykvLnRlc3QobikmJihuPW4ucmVwbGFjZShSZWdFeHAuJDEsKGUuZ2V0RnVsbFllYXIoKSsiIikuc3Vic3RyaW5nKDQtUmVnRXhwLiQxLmxlbmd0aCkpKSx0KWlmKG5ldyBSZWdFeHAoIigiK2ErIikiKS50ZXN0KG4pKXt2YXIgaT0iMDAiK3RbYV07bj1uLnJlcGxhY2UoUmVnRXhwLiQxLDE9PT1SZWdFeHAuJDEubGVuZ3RoP3RbYV06aS5zdWJzdHJpbmcoaS5sZW5ndGgtMikpfXJldHVybiBufSxkYz1mdW5jdGlvbigpe3ZhciBlPW5ldyBEYXRlO3JldHVybiBlLnNldE1vbnRoKGUuZ2V0TW9udGgoKS0xKSxlfSxwYz1mdW5jdGlvbihlKXtpZigiIj09PWUuZW5kRGF0ZXx8bnVsbD09PWUuZW5kRGF0ZSlyZXR1cm4hMTtpZihuZXcgRGF0ZShlLnN0YXJ0RGF0ZSkuZ2V0VGltZSgpPm5ldyBEYXRlKGUuZW5kRGF0ZSkuZ2V0VGltZSgpKXt2YXIgbj1lLnN0YXJ0RGF0ZTtlLnN0YXJ0RGF0ZT1lLmVuZERhdGUsZS5lbmREYXRlPW59fTt0KCJ6MktPIiksdCgid00zeiIpLHQoIkFYL0MiKSx0KCJwMzY5Iik7aWUuZGVmYXVsdC51c2UoYWUuYSksaWUuZGVmYXVsdC51c2UobmUuYSksaWUuZGVmYXVsdC51c2UoSy5hKSxpZS5kZWZhdWx0LnVzZShKLmEpLGllLmRlZmF1bHQudXNlKFouYSksaWUuZGVmYXVsdC51c2UocS5hKSxpZS5kZWZhdWx0LnVzZShXLmEpLGllLmRlZmF1bHQudXNlKEguYSksaWUuZGVmYXVsdC51c2Uoai5hKSxpZS5kZWZhdWx0LnVzZShSLmEpLGllLmRlZmF1bHQudXNlKFUuYSksaWUuZGVmYXVsdC51c2UoJC5hKSxpZS5kZWZhdWx0LnVzZShJLmEpLGllLmRlZmF1bHQudXNlKEIuYSksaWUuZGVmYXVsdC51c2UoRC5hKSxpZS5kZWZhdWx0LnVzZShTLmEpLGllLmRlZmF1bHQudXNlKEYuYSksaWUuZGVmYXVsdC51c2UoVy5hKSxpZS5kZWZhdWx0LnVzZSh4LmEpLGllLmRlZmF1bHQudXNlKEMuYSksaWUuZGVmYXVsdC51c2Uodi5hKSxpZS5kZWZhdWx0LnVzZShmLmEpLGllLmRlZmF1bHQudXNlKGcuYSksaWUuZGVmYXVsdC51c2UodS5hKSxpZS5kZWZhdWx0LmNvbmZpZy5wcm9kdWN0aW9uVGlwPSExLGllLmRlZmF1bHQucHJvdG90eXBlLiRjb25maXJtPWQuYS5jb25maXJtLGllLmRlZmF1bHQucHJvdG90eXBlLiRtZXNzYWdlPWMuYSxpZS5kZWZhdWx0LnByb3RvdHlwZS4kbm90aWZ5PXMuYSxpZS5kZWZhdWx0LnByb3RvdHlwZS4kYWxlcnQ9ZC5hLmFsZXJ0LGwoKShhKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBpZS5kZWZhdWx0LmZpbHRlcihlLGFbZV0pfSksaWUuZGVmYXVsdC51c2UobGUuYSk7dmFyIHVjPW5ldyBsZS5hLlN0b3JlKG9lKTtuZXcgaWUuZGVmYXVsdCh7ZWw6IiNhcHAiLHJvdXRlcjpjYyxzdG9yZTp1Yyxjb21wb25lbnRzOntBcHA6T2UsQWRkTWFudXNjcmlwdDpsaSxBZGRUb3BpYzpKYSxBc3NpZ25Sb2xlOlpzLEFkZFJvbGU6ZnJ9LGRhdGE6e2V2ZW50SHViOm5ldyBpZS5kZWZhdWx0fSx0ZW1wbGF0ZToiPEFwcC8+In0pfSxOWFROOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCIvdUJpIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoImUwOTY2YTFhIixhLCExLHt9KX0sTzcwVjpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgiVUhnVSIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCIwZDRjZGJhMCIsYSwhMSx7fSl9LE9TeWw6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi5wYWdpbmF0aW9uW2RhdGEtdi0zYjU3YzUyZl17XG4gIC13ZWJraXQtYm94LXBhY2s6IGVuZDtcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGVuZDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xufVxuLnVzZXJbZGF0YS12LTNiNTdjNTJmXXtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogMzBweDtcbiAgaGVpZ2h0OiAyMHB4O1xuICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgcGFkZGluZzogMXB4IDVweCAycHggNXB4O1xuICBjb2xvcjogcmdiYSgxODEsIDE4NCwgMjE3LCAxKTtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuLmVkaXRbZGF0YS12LTNiNTdjNTJmXXtcbiAgYm9yZGVyOiAxcHggc29saWQgIzE4ODNGRjtcbiAgY29sb3I6IzE4ODNGRjtcbn1cbi5yZXNldC1wYXNzd29yZFtkYXRhLXYtM2I1N2M1MmZde1xuICBib3JkZXI6IDFweCBzb2xpZCAjNjk0RUZGO1xuICBjb2xvcjojNjk0RUZGO1xufVxuLmRlbGV0ZVtkYXRhLXYtM2I1N2M1MmZde1xuICBib3JkZXI6MXB4IHNvbGlkICNGMDA4MDg7XG4gIGNvbG9yOiAjRjAwODA4O1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VSb2xlL3NyYy9jb21wb25lbnRzL21hbmFnZVJvbGUvcm9sZU1hbmFnZS52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBNlBBO0VBQ0Esc0JBQUE7TUFBQSxtQkFBQTtVQUFBLDBCQUFBO0NBQ0E7QUFDQTtFQUNBLHNCQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSx3Q0FBQTtFQUNBLG9CQUFBO0VBQ0EsZ0JBQUE7RUFDQSx5QkFBQTtFQUNBLDhCQUFBO0VBQ0EsZ0JBQUE7Q0FDQTtBQUNBO0VBQ0EsMEJBQUE7RUFDQSxjQUFBO0NBQ0E7QUFDQTtFQUNBLDBCQUFBO0VBQ0EsY0FBQTtDQUNBO0FBQ0E7RUFDQSx5QkFBQTtFQUNBLGVBQUE7Q0FDQSIsZmlsZToicm9sZU1hbmFnZS52dWUiLHNvdXJjZXNDb250ZW50OlsnPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSJyb2xlLW1hbmFnZSI+XG4gICAgPGRpdj5cbiAgICAgIDxjaXJjbGUtdGl0bGVcbiAgICAgICAgdGl0bGUtbmFtZT0i6KeS6Imy566h55CGIlxuICAgICAgICBjbGFzcz0iY2ljbGUtY29udHJvbGxlciJcbiAgICAgIC8+XG4gICAgICA8ZGl2IGNsYXNzPSJzZWFyY2gtZm9ybS1jb250YWluZXIiPlxuICAgICAgICA8ZWwtZm9ybVxuICAgICAgICAgIDppbmxpbmU9InRydWUiXG4gICAgICAgICAgOm1vZGVsPSJyb2xlRm9ybSJcbiAgICAgICAgICBjbGFzcz0iZGVtby1mb3JtLWlubGluZSI+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i6KeS6Imy5ZCN56ewIj5cbiAgICAgICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgICAgICB2LW1vZGVsPSJyb2xlRm9ybS5uYW1lIlxuICAgICAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLlvIDlp4vml7bpl7QiPlxuICAgICAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgICAgIDp0aXRsZT0icm9sZUZvcm0uc3RhcnREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9InJvbGVGb3JtLnN0YXJ0RGF0ZSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXpeacnyJcbiAgICAgICAgICAgICAgQGNoYW5nZT0iZ2V0Um9sZUxpc3QiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i57uT5p2f5pe26Ze0Ij5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9InJvbGVGb3JtLmVuZERhdGUgfCBGb3JtYXREYXRlKFwneXl5eS1NTS1kZCBoaDptbVwnKSJcbiAgICAgICAgICAgICAgdi1tb2RlbD0icm9sZUZvcm0uZW5kRGF0ZSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXpeacnyJcbiAgICAgICAgICAgICAgQGNoYW5nZT0iZ2V0Um9sZUxpc3QiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgICAgQGNsaWNrPSJnZXRSb2xlTGlzdCI+XG4gICAgICAgICAgICDmn6Xor6JcbiAgICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCIvPlxuICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgICBAY2xpY2s9ImFkZFJvbGUiPlxuICAgICAgICAgICAg5re75YqgXG4gICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1wbHVzIGVsLWljb24tLXJpZ2h0Ii8+XG4gICAgICAgICAgPC9lbC1idXR0b24+XG4gICAgICAgICAgPGVsLWRpYWxvZ1xuICAgICAgICAgICAgOnZpc2libGUuc3luYz0iZGlhbG9nVmlzaWJsZSJcbiAgICAgICAgICAgIHRpdGxlPSLliJvlu7rop5LoibIiXG4gICAgICAgICAgICB3aWR0aD0iNjAlIlxuICAgICAgICAgICAgQGNsb3NlPSJjbG9zZURpYWxvZyI+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIDppcz0iY29tcG9uZW50TmFtZSJcbiAgICAgICAgICAgICAgOnJvbGVpZD0icm9sZWlkIlxuICAgICAgICAgICAgICBAY2xvc2VEaWFsb2c9ImNsb3NlRGlhbG9nIi8+XG4gICAgICAgICAgPC9lbC1kaWFsb2c+XG4gICAgICAgIDwvZWwtZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9InRhYmxlLWxpc3QiPlxuICAgICAgPGVsLXRhYmxlXG4gICAgICAgIHJlZj0iY2hhbm5lbFRhYmxlIlxuICAgICAgICA6ZGF0YT0idGFibGVEYXRhIlxuICAgICAgICBzdHJpcGVcbiAgICAgICAgY2xhc3M9Indob2xlLXRhYmxlIlxuICAgICAgICBtaW4taGVpZ2h0PSI0MDAiPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gdGFibGVIZWFkZXIiXG4gICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgOnByb3A9Iml0ZW0ucHJvcCJcbiAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiXG4gICAgICAgICAgOndpZHRoPSJpdGVtLndpZHRoIlxuICAgICAgICAgIDpmb3JtYXR0ZXI9Iml0ZW0uZm9ybWF0dGVyIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgc2hvdy1vdmVyZmxvdy10b29sdGlwXG4gICAgICAgIC8+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBmaXhlZD0icmlnaHQiXG4gICAgICAgICAgbGFiZWw9IuaTjeS9nCJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIHdpZHRoPSIyMDAiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjbGFzcz0idXNlciByZXNldC1wYXNzd29yZCJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImRldGFpbFJvbGUoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg5p+l55yLXG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjbGFzcz0idXNlciBlZGl0IlxuICAgICAgICAgICAgICAgIEBjbGljaz0iaGFuZGxlRWRpdChzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAgICDnvJbovpFcbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzPSJ1c2VyIGRlbGV0ZSJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImhhbmRsZURlbGV0ZShzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAgICDliKDpmaRcbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgPC9lbC10YWJsZT5cbiAgICAgIDxkaXYgY2xhc3M9InBhZ2luYXRpb24iPlxuICAgICAgICA8ZWwtcGFnaW5hdGlvblxuICAgICAgICAgIDp0b3RhbD0idG90YWwiXG4gICAgICAgICAgOnBhZ2Utc2l6ZXM9IlsxMCwgMjAsIDMwLCA0MF0iXG4gICAgICAgICAgYmFja2dyb3VuZFxuICAgICAgICAgIGxheW91dD0idG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dCJcbiAgICAgICAgICBAc2l6ZS1jaGFuZ2U9ImhhbmRsZVNpemVDaGFuZ2UiXG4gICAgICAgICAgQGN1cnJlbnQtY2hhbmdlPSJoYW5kbGVDdXJyZW50Q2hhbmdlIi8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCBDaXJjbGVUaXRsZSBmcm9tIFwnQC9jb21wb25lbnRzL2NvbW1vbnMvY2lyY2xlVGl0bGVcJ1xuaW1wb3J0IEFkZFJvbGUgZnJvbSBcJ0AvY29tcG9uZW50cy9tYW5hZ2VSb2xlL2FkZFJvbGVcJ1xuaW1wb3J0IEVkaXRSb2xlIGZyb20gXCdAL2NvbXBvbmVudHMvbWFuYWdlUm9sZS9lZGl0Um9sZVwnXG5pbXBvcnQgRGV0YWlsUm9sZSBmcm9tIFwnQC9jb21wb25lbnRzL21hbmFnZVJvbGUvZGV0YWlsUm9sZVwnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9zeXN0ZW1Vc2Vyc0FwaVwnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBDaXJjbGVUaXRsZSxcbiAgICBBZGRSb2xlLFxuICAgIEVkaXRSb2xlLFxuICAgIERldGFpbFJvbGVcbiAgfSxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvbGVGb3JtOiB7XG4gICAgICAgIG5hbWU6IFwnXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJ1xuICAgICAgfSxcbiAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlLFxuICAgICAgY29tcG9uZW50TmFtZTogXCdBZGRSb2xlXCcsXG4gICAgICB0YWJsZUhlYWRlcjogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCduYW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn6KeS6Imy5ZCN56ewXCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnY3JlYXRldGltZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+WIm+W7uuaXtumXtFwnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnRm9ybWF0RGF0ZVwnXShjZWxsVmFsdWUsIFwneXl5eS1NTS1kZCBoaDptbVwnKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIHRhYmxlRGF0YTogW10sXG4gICAgICBwYWdlTm86IDEsXG4gICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICB0b3RhbDogMCxcbiAgICAgIHJvbGVpZDogXCdcJ1xuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBcJ3JvbGVGb3JtLm5hbWVcJyAodmFsKSB7XG4gICAgICB0aGlzLmdldFJvbGVMaXN0KClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuZ2V0Um91dGVyUGFyYW0oKVxuICAgIC8qKiDojrflj5bpopHpgZPliJfooaggKiovXG4gICAgdGhpcy5nZXRSb2xlTGlzdCgpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBnZXRSb3V0ZXJQYXJhbSAoKSB7XG4gICAgICBsZXQgcXVlcnkgPSB0aGlzLiRyb3V0ZS5xdWVyeVxuICAgICAgaWYgKHF1ZXJ5LnBhZ2VObykge1xuICAgICAgICB0aGlzLnBhZ2VObyA9IHBhcnNlSW50KHF1ZXJ5LnBhZ2VObylcbiAgICAgIH1cbiAgICB9LFxuICAgIGNsb3NlRGlhbG9nICgpIHtcbiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IGZhbHNlXG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ1wnXG4gICAgICB0aGlzLmdldFJvbGVMaXN0KClcbiAgICB9LFxuICAgIGdldFJvbGVMaXN0ICgpIHtcbiAgICAgIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ3N3YXBUaW1lXCddKHRoaXMucm9sZUZvcm0pXG4gICAgICBsZXQgdGltZVN0YXJ0ID0gdGhpcy5yb2xlRm9ybS5zdGFydERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLnJvbGVGb3JtLnN0YXJ0RGF0ZSkuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgbGV0IHRpbWVFbmQgPSB0aGlzLnJvbGVGb3JtLmVuZERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLnJvbGVGb3JtLmVuZERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIEFjdGlvbnMuZ2V0Um9sZUxpc3Qoe1xuICAgICAgICBcJ3BhZ2VOb1wnOiB0aGlzLnBhZ2VObyxcbiAgICAgICAgXCdwYWdlU2l6ZVwnOiB0aGlzLnBhZ2VTaXplLFxuICAgICAgICBcJ25hbWVcJzogdGhpcy5yb2xlRm9ybS5uYW1lLFxuICAgICAgICBcJ3RpbWVTdGFydFwnOiB0aW1lU3RhcnQsXG4gICAgICAgIFwndGltZUVuZFwnOiB0aW1lRW5kXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgbGlzdERhdGEgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICB0aGlzLnRhYmxlRGF0YSA9IGxpc3REYXRhLmxpc3RcbiAgICAgICAgICB0aGlzLnRvdGFsID0gbGlzdERhdGEudG90YWxcbiAgICAgICAgICB0aGlzLnBhZ2VObyA9IGxpc3REYXRhLnBhZ2VOdW1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGhhbmRsZVNpemVDaGFuZ2UgKHBhZ2VTaXplKSB7XG4gICAgICB0aGlzLnBhZ2VTaXplID0gcGFnZVNpemVcbiAgICAgIHRoaXMuZ2V0Um9sZUxpc3QoKVxuICAgIH0sXG4gICAgaGFuZGxlQ3VycmVudENoYW5nZSAocGFnZUluZGV4KSB7XG4gICAgICB0aGlzLnBhZ2VObyA9IHBhZ2VJbmRleFxuICAgICAgdGhpcy5nZXRSb2xlTGlzdCgpXG4gICAgfSxcbiAgICAvKiog5p+l55yL6KeS6Imy5p2D6ZmQICoqL1xuICAgIGRldGFpbFJvbGUgKHJvdykge1xuICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gdHJ1ZVxuICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gXCdEZXRhaWxSb2xlXCdcbiAgICAgIHRoaXMucm9sZWlkID0gcm93LnJvbGVpZFxuICAgIH0sXG4gICAgLyoqIOe8lui+keaXtuiOt+WPluWNleWFg+agvOaVsOaNriAqKi9cbiAgICBoYW5kbGVFZGl0OiBmdW5jdGlvbiAocm93KSB7XG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ0VkaXRSb2xlXCdcbiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IHRydWVcbiAgICAgIHRoaXMucm9sZWlkID0gcm93LnJvbGVpZFxuICAgICAgLy8gc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcJ3JvbGVpZFwnLCByb3cucm9sZWlkKVxuICAgICAgLy8gdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6IFwnL21hbmFnZUNoYW5uZWwvZWRpdFwnLCBxdWVyeToge1wncGFnZU5vXCc6IHRoaXMucGFnZU5vfX0pXG4gICAgfSxcbiAgICBhZGRSb2xlICgpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50TmFtZSA9IFwnQWRkUm9sZVwnXG4gICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSB0cnVlXG4gICAgfSxcbiAgICAvKiog5Yig6Zmk6KeS6ImyICoqL1xuICAgIGhhbmRsZURlbGV0ZSAocm93KSB7XG4gICAgICB0aGlzLiRjb25maXJtKFwn5piv5ZCm5Yig6ZmkIlwnICsgcm93Lm5hbWUgKyBcJyI/XCcsIFwn5o+Q56S6XCcsIHtcbiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwn56Gu5a6aXCcsXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwn5Y+W5raIXCcsXG4gICAgICAgIHR5cGU6IFwnd2FybmluZ1wnXG4gICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgQWN0aW9ucy5kZWxldGVSb2xlKHtcbiAgICAgICAgICBcJ3JvbGVcJzoge1xuICAgICAgICAgICAgXCdyb2xlaWRcJzogcm93LnJvbGVpZFxuICAgICAgICAgIH1cbiAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+WIoOmZpOaIkOWKnyFcJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5nZXRSb2xlTGlzdCgpXG4gICAgICAgIH0pXG4gICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLnBhZ2luYXRpb257XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgfVxuICAudXNlcntcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6IDMwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIGJvcmRlcjoxcHggc29saWQgcmdiYSgxODEsIDE4NCwgMjE3LCAxKTtcbiAgICBib3JkZXItcmFkaXVzOiAyMHB4O1xuICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICBwYWRkaW5nOiAxcHggNXB4IDJweCA1cHg7XG4gICAgY29sb3I6IHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG4gIC5lZGl0e1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICMxODgzRkY7XG4gICAgY29sb3I6IzE4ODNGRjtcbiAgfVxuICAucmVzZXQtcGFzc3dvcmR7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzY5NEVGRjtcbiAgICBjb2xvcjojNjk0RUZGO1xuICB9XG4gIC5kZWxldGV7XG4gICAgYm9yZGVyOjFweCBzb2xpZCAjRjAwODA4O1xuICAgIGNvbG9yOiAjRjAwODA4O1xuICB9XG48L3N0eWxlPlxuPHN0eWxlPlxuICAucm9sZS1tYW5hZ2UgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICB3aWR0aDogNjAlO1xuICB9XG4gIC5yb2xlLW1hbmFnZSAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAyNSU7XG4gIH1cbjwvc3R5bGU+XG4nXSxzb3VyY2VSb290OiIifV0pfSxPWElYOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uZWwtZGlhbG9nX19oZWFkZXJ7XG4gIHBhZGRpbmc6IDEzcHggMzBweCAxM3B4O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI0MwQkVGRjtcbiAgYmFja2dyb3VuZC1jb2xvcjogI0Y3RkFGRjtcbn1cbi5lbC1kaWFsb2dfX3RpdGxlIHtcbiAgbGluZS1oZWlnaHQ6IDE3cHg7XG4gIGZvbnQtc2l6ZTogMTdweDtcbiAgY29sb3I6ICMzMDMxMzM7XG59XG4uZWwtZGlhbG9nX19oZWFkZXJidG4ge1xuICB0b3A6IDEzcHg7XG59XG4uZWwtZGlhbG9nX19ib2R5IHtcbiAgcGFkZGluZzogMjBweCA2MHB4IDBweCA2MHB4O1xufVxuLmFkZFVzZXIgLmVsLWZvcm0ge1xuICBtYXJnaW4tdG9wOiAxNXB4O1xufVxuLmFkZFVzZXIgLmVsLWZvcm0taXRlbSB7XG4gIHdpZHRoOiAxMDAlO1xufVxuLmFkZFVzZXIgLnN1Ym1pdCAuZWwtZm9ybS1pdGVtX19jb250ZW50e1xuICBmbG9hdDogcmlnaHQ7XG4gIHdpZHRoOiAxNjBweDtcbn1cbi5zZWxlY3Qtcm9sZSB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICM2OTRFRkY7XG4gIGJhY2tncm91bmQtY29sb3I6ICNFQkY1RkY7XG4gIGNvbG9yOiAjNjk0RUZGO1xuICBwYWRkaW5nOjhweCAyMnB4IDhweCAyMnB4O1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG59XG4uYWRkVXNlciAuZWwtc2VsZWN0IHtcbiAgd2lkdGg6IDEwMCU7XG59XG4udGFibGUtbGlzdHMge1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuLnRhYmxlLWxpc3RzIHRoZWFkIHRyIHRoIHtcbiAgYmFja2dyb3VuZDogIzcxNkJGRjtcbiAgY29sb3I6IHdoaXRlO1xuICBib3JkZXItY29sb3I6IzcxNkJGRiA7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbi5zZWxmLXRyZWUtc3R5bGUge1xuICBtYXJnaW4tbGVmdDogNjBweDtcbiAgcGFkZGluZy1ib3R0b206IDUwcHg7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZVJvbGUvc3JjL2NvbXBvbmVudHMvbWFuYWdlUm9sZS9kZXRhaWxSb2xlLnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUF3RkE7RUFDQSx3QkFBQTtFQUNBLGlDQUFBO0VBQ0EsMEJBQUE7Q0FDQTtBQUNBO0VBQ0Esa0JBQUE7RUFDQSxnQkFBQTtFQUNBLGVBQUE7Q0FDQTtBQUNBO0VBQ0EsVUFBQTtDQUNBO0FBQ0E7RUFDQSw0QkFBQTtDQUNBO0FBQ0E7RUFDQSxpQkFBQTtDQUNBO0FBQ0E7RUFDQSxZQUFBO0NBQ0E7QUFDQTtFQUNBLGFBQUE7RUFDQSxhQUFBO0NBQ0E7QUFDQTtFQUNBLDBCQUFBO0VBQ0EsMEJBQUE7RUFDQSxlQUFBO0VBQ0EsMEJBQUE7RUFDQSxtQkFBQTtDQUNBO0FBQ0E7RUFDQSxZQUFBO0NBQ0E7QUFDQTtFQUNBLGlCQUFBO0NBQ0E7QUFDQTtFQUNBLG9CQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsbUJBQUE7Q0FDQTtBQUNBO0VBQ0Esa0JBQUE7RUFDQSxxQkFBQTtDQUNBIixmaWxlOiJkZXRhaWxSb2xlLnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9ImFkZFVzZXIiPlxuICAgIDxlbC1mb3JtXG4gICAgICByZWY9InJ1bGVGb3JtIlxuICAgICAgOm1vZGVsPSJydWxlRm9ybSI+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLop5LoibLlkI3np7AiXG4gICAgICAgIHByb3A9InJvbGVfbmFtZSI+XG4gICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgIHYtbW9kZWw9InJ1bGVGb3JtLnJvbGVfbmFtZSJcbiAgICAgICAgICA6ZGlzYWJsZWQ9InRydWUiXG4gICAgICAgICAgc3R5bGU9IndpZHRoOjI2MHB4OyJcbiAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgPC9lbC1mb3JtPlxuICAgIDxkaXYgY2xhc3M9InRhYmxlLWxpc3RzIj5cbiAgICAgIDxwIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAxMHB4OyI+5oul5pyJ5p2D6ZmQ77yaPC9wPlxuICAgICAgPGRpdiBjbGFzcz0ic2VsZi10cmVlLXN0eWxlIj5cbiAgICAgICAgPGVsLXRyZWVcbiAgICAgICAgICA6ZGF0YT0idG9EYXRhIlxuICAgICAgICAgIDpkZWZhdWx0LWV4cGFuZC1hbGw9InRydWUiLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tIFwnQC9hcGkvc3lzdGVtVXNlcnNBcGlcJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiBcJ0FkZFJvbGVcJyxcbiAgY29tcG9uZW50czoge1xuICB9LFxuICBwcm9wczoge1xuICAgIHJvbGVpZDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogXCdcJ1xuICAgIH1cbiAgfSxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJ1bGVGb3JtOiB7XG4gICAgICAgIHJvbGVfbmFtZTogXCdcJ1xuICAgICAgfSxcbiAgICAgIHRvRGF0YTogW11cbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIC8qKiDojrflj5bnvJbovpHkv6Hmga8gKiovXG4gICAgdGhpcy5nZXRSb2xlRGV0YWlscygpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBnZXRSb2xlRGV0YWlscyAoKSB7XG4gICAgICBBY3Rpb25zLmdldFJvbGVEZXRhaWxzKHtcbiAgICAgICAgXCdyb2xlXCc6IHtcbiAgICAgICAgICBcJ3JvbGVpZFwnOiB0aGlzLnJvbGVpZFxuICAgICAgICB9XG4gICAgICB9KS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMucnVsZUZvcm0ucm9sZV9uYW1lID0gZGF0YS5uYW1lXG4gICAgICAgICAgdGhpcy50b0RhdGEgPSBkYXRhLnRyZWVQZXJtaXNzaW9uIHx8IFtdXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBjYW5jZWwgKCkge1xuICAgICAgdGhpcy4kZW1pdChcJ2Nsb3NlRGlhbG9nXCcpXG4gICAgfVxuICB9XG5cbn1cbjxcL3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbiAgLmVsLWJ1dHRvbi0tcHJpbWFyeSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzcxNkJGRjtcbiAgICBib3JkZXItY29sb3I6ICM3MTZCRkY7XG4gIH1cbiAgLmVsLWJ1dHRvbi0tZGVmYXVsdCB7XG4gICAgY29sb3I6ICM3MTZCRkYgO1xuICAgIGJvcmRlci1jb2xvcjogIzcxNkJGRjtcbiAgfVxuICAuYWRkVXNlciAuZWwtY2hlY2tib3gge1xuICAgIGZsb2F0OiBsZWZ0O1xuICB9XG4gIC5hZGRVc2VyIC5jaGVjay1hbGwge1xuICAgIG1hcmdpbi1yaWdodDogMzBweDtcbiAgfVxuPC9zdHlsZT5cbjxzdHlsZT5cbiAgLmVsLWRpYWxvZ19faGVhZGVye1xuICAgIHBhZGRpbmc6IDEzcHggMzBweCAxM3B4O1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjQzBCRUZGO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNGN0ZBRkY7XG4gIH1cbiAgLmVsLWRpYWxvZ19fdGl0bGUge1xuICAgIGxpbmUtaGVpZ2h0OiAxN3B4O1xuICAgIGZvbnQtc2l6ZTogMTdweDtcbiAgICBjb2xvcjogIzMwMzEzMztcbiAgfVxuICAuZWwtZGlhbG9nX19oZWFkZXJidG4ge1xuICAgIHRvcDogMTNweDtcbiAgfVxuICAuZWwtZGlhbG9nX19ib2R5IHtcbiAgICBwYWRkaW5nOiAyMHB4IDYwcHggMHB4IDYwcHg7XG4gIH1cbiAgLmFkZFVzZXIgLmVsLWZvcm0ge1xuICAgIG1hcmdpbi10b3A6IDE1cHg7XG4gIH1cbiAgLmFkZFVzZXIgLmVsLWZvcm0taXRlbSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbiAgLmFkZFVzZXIgLnN1Ym1pdCAuZWwtZm9ybS1pdGVtX19jb250ZW50e1xuICAgIGZsb2F0OiByaWdodDtcbiAgICB3aWR0aDogMTYwcHg7XG4gIH1cbiAgLnNlbGVjdC1yb2xlIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNjk0RUZGO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNFQkY1RkY7XG4gICAgY29sb3I6ICM2OTRFRkY7XG4gICAgcGFkZGluZzo4cHggMjJweCA4cHggMjJweDtcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIH1cbiAgLmFkZFVzZXIgLmVsLXNlbGVjdCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbiAgLnRhYmxlLWxpc3RzIHtcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICB9XG4gIC50YWJsZS1saXN0cyB0aGVhZCB0ciB0aCB7XG4gICAgYmFja2dyb3VuZDogIzcxNkJGRjtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgYm9yZGVyLWNvbG9yOiM3MTZCRkYgO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgfVxuICAuc2VsZi10cmVlLXN0eWxlIHtcbiAgICBtYXJnaW4tbGVmdDogNjBweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogNTBweDtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LE9hRHc6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi5jdXN0b20tZXZlbnQtZm9vdGVyW2RhdGEtdi0zYzQ1YmQyMl17XG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgZGlzcGxheTogZmxleDtcbiAgLXdlYmtpdC1ib3gtcGFjazogZW5kO1xuICAgICAgLW1zLWZsZXgtcGFjazogZW5kO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZUV2ZW50L3NyYy9jb21wb25lbnRzL21hbmFnZUV2ZW50L2N1c3RvbUV2ZW50LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUF1REE7RUFDQSxxQkFBQTtFQUFBLHFCQUFBO0VBQUEsY0FBQTtFQUNBLHNCQUFBO01BQUEsbUJBQUE7VUFBQSwwQkFBQTtFQUNBLGlCQUFBO0NBQ0EiLGZpbGU6ImN1c3RvbUV2ZW50LnZ1ZSIsc291cmNlc0NvbnRlbnQ6WyI8dGVtcGxhdGU+XG4gIDxkaXY+XG4gICAgPGVsLWlucHV0XG4gICAgICB2LW1vZGVsPVwiY3VzdG9tRXZlbnROYW1lXCJcbiAgICAgIHBsYWNlaG9sZGVyPVwi6K+36L6T5YWl5pyN5Yqh57G75Z6L5ZCN56ewXCIvPlxuICAgIDxkaXZcbiAgICAgIHYtaWY9XCJjdXN0b21FcnJvck1lc3NhZ2VcIlxuICAgICAgc3R5bGU9XCJjb2xvcjogcmVkO21hcmdpbi10b3A6IDVweDtcIj57eyBjdXN0b21FcnJvck1lc3NhZ2UgfX08L2Rpdj5cbiAgICA8c3BhbiBjbGFzcz1cImN1c3RvbS1ldmVudC1mb290ZXJcIj5cbiAgICAgIDxlbC1idXR0b24gQGNsaWNrPVwiY2FuY2VsQ3VzdG9tRXZlbnRcIj7lj5Yg5raIPC9lbC1idXR0b24+XG4gICAgICA8ZWwtYnV0dG9uIFxuICAgICAgICB0eXBlPVwicHJpbWFyeVwiIFxuICAgICAgICBAY2xpY2s9XCJzdWJtaXRFdmVudFwiPuehriDlrpo8L2VsLWJ1dHRvbj5cbiAgICA8L3NwYW4+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gJ0AvYXBpL2V2ZW50QXBpJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnQ3VzdG9tRXZlbnQnLFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY3VzdG9tRXZlbnROYW1lOiAnJyxcbiAgICAgIGN1c3RvbUVycm9yTWVzc2FnZTogJydcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBzdWJtaXRFdmVudCAoKSB7XG4gICAgICBpZiAodGhpcy5jdXN0b21FdmVudE5hbWUgPT09ICcnKSB7XG4gICAgICAgIHRoaXMuY3VzdG9tRXJyb3JNZXNzYWdlID0gJ+azqOaEj++8muWQjeensOS4jeiDveS4uuepuidcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBBY3Rpb25zLmFkZEN1c3RvbUV2ZW50VHlwZSh7XG4gICAgICAgICd0eXBlJzoge1xuICAgICAgICAgICd0eXBlX25hbWUnOiB0aGlzLmN1c3RvbUV2ZW50TmFtZVxuICAgICAgICB9XG4gICAgICB9KS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgICAgdGhpcy4kbm90aWZ5KHtcbiAgICAgICAgICAgIHRpdGxlOiAn6YCa55+lJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICfmt7vliqDmiJDlip8nLFxuICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnXG4gICAgICAgICAgfSlcbiAgICAgICAgICB0aGlzLiRlbWl0KCdzdWJtaXQtY3VzdG9tLWV2ZW50JywgdGhpcy5jdXN0b21FdmVudE5hbWUpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBjYW5jZWxDdXN0b21FdmVudCAoKSB7XG4gICAgICB0aGlzLiRlbWl0KCdjYW5jZWwtY3VzdG9tLWV2ZW50JylcbiAgICB9XG4gIH1cbn1cbjxcL3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbi5jdXN0b20tZXZlbnQtZm9vdGVye1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICBtYXJnaW4tdG9wOiAyMHB4O1xufVxuPC9zdHlsZT5cbiJdLHNvdXJjZVJvb3Q6IiJ9XSl9LE91TjM6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoIk9hRHciKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiYjlkNWNhNTQiLGEsITEse30pfSxQeWZzOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4ucGFnaW5hdGlvbltkYXRhLXYtNjkzNTg1ODhde1xuICAtd2Via2l0LWJveC1wYWNrOiBlbmQ7XG4gICAgICAtbXMtZmxleC1wYWNrOiBlbmQ7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbn1cbi51c2VyW2RhdGEtdi02OTM1ODU4OF17XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgaGVpZ2h0OiAyMHB4O1xuICBib3JkZXI6MXB4IHNvbGlkICNGMDA4MDg7XG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgcGFkZGluZzogMXB4IDVweCAycHggNXB4O1xuICBjb2xvcjojRjAwODA4O1xuICB3aWR0aDogNjBweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuLnJlc2V0LXBhc3N3b3JkW2RhdGEtdi02OTM1ODU4OF17XG4gIGJvcmRlcjogMXB4IHNvbGlkICMxODgzRkY7XG4gIGNvbG9yOiMxODgzRkY7XG4gIHdpZHRoOiA2MHB4O1xufVxuLmRpc2FibGVbZGF0YS12LTY5MzU4NTg4XXtcbiAgYm9yZGVyOiAxcHggc29saWQgIzY5NEVGRjtcbiAgY29sb3I6IzY5NEVGRjtcbiAgd2lkdGg6IDYwcHg7XG59XG4udXNlci1oZWFkLWljb25bZGF0YS12LTY5MzU4NTg4XXtcbiAgd2lkdGg6IDUwcHg7XG4gIGhlaWdodDogNTBweDtcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlVXNlci9zcmMvY29tcG9uZW50cy9tYW5hZ2VVc2VyL3VzZXJMaXN0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUE0UUE7RUFDQSxzQkFBQTtNQUFBLG1CQUFBO1VBQUEsMEJBQUE7Q0FDQTtBQUNBO0VBQ0Esc0JBQUE7RUFDQSxhQUFBO0VBQ0EseUJBQUE7RUFDQSxvQkFBQTtFQUNBLGdCQUFBO0VBQ0EseUJBQUE7RUFDQSxjQUFBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0NBQ0E7QUFDQTtFQUNBLDBCQUFBO0VBQ0EsY0FBQTtFQUNBLFlBQUE7Q0FDQTtBQUNBO0VBQ0EsMEJBQUE7RUFDQSxjQUFBO0VBQ0EsWUFBQTtDQUNBO0FBQ0E7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG9CQUFBO0NBQ0EiLGZpbGU6InVzZXJMaXN0LnZ1ZSIsc291cmNlc0NvbnRlbnQ6WyI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJ1c2VyLWxpc3RcIj5cbiAgICA8ZGl2PlxuICAgICAgPGNpcmNsZS10aXRsZVxuICAgICAgICB0aXRsZS1uYW1lPVwi55So5oi35YiX6KGoXCJcbiAgICAgICAgY2xhc3M9XCJjaWNsZS1jb250cm9sbGVyXCJcbiAgICAgIC8+XG4gICAgICA8ZGl2IGNsYXNzPVwic2VhcmNoLWZvcm0tY29udGFpbmVyXCI+XG4gICAgICAgIDxlbC1mb3JtXG4gICAgICAgICAgOmlubGluZT1cInRydWVcIlxuICAgICAgICAgIDptb2RlbD1cInJ1bGVGb3JtXCJcbiAgICAgICAgICBjbGFzcz1cImRlbW8tZm9ybS1pbmxpbmVcIj5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPVwi55So5oi35ZCNXCI+XG4gICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgdi1tb2RlbD1cInJ1bGVGb3JtLnVzZXJuYW1lXCJcbiAgICAgICAgICAgICAgY2xlYXJhYmxlLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPVwi5rOo5YaM5omL5py65Y+3XCI+XG4gICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgdi1tb2RlbD1cInJ1bGVGb3JtLnBob25lXCJcbiAgICAgICAgICAgICAgY2xlYXJhYmxlLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD1cIueKtuaAgVwiXG4gICAgICAgICAgICBjbGFzcz1cInNlYXJjaC1sZWZ0XCI+XG4gICAgICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgICAgIHYtbW9kZWw9XCJydWxlRm9ybS5zdGF0ZVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiXCJcbiAgICAgICAgICAgICAgQGNoYW5nZT1cImdldEFwcFVzZXJMaXN0XCI+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICB2YWx1ZT1cIlwiXG4gICAgICAgICAgICAgICAgbGFiZWw9XCLlhajpg6hcIi8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9XCIxXCJcbiAgICAgICAgICAgICAgICBsYWJlbD1cIuWQr+eUqFwiLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT1cIjBcIlxuICAgICAgICAgICAgICAgIGxhYmVsPVwi5YGc55SoXCIvPlxuICAgICAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgc3R5bGU9XCJtYXJnaW4tbGVmdDogLTMwcHhcIlxuICAgICAgICAgICAgQGNsaWNrPVwiZ2V0QXBwVXNlckxpc3RcIj5cbiAgICAgICAgICAgIOafpeivolxuICAgICAgICAgICAgPGkgY2xhc3M9XCJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodFwiLz5cbiAgICAgICAgICA8L2VsLWJ1dHRvbj5cbiAgICAgICAgPC9lbC1mb3JtPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInRhYmxlLWxpc3RcIj5cbiAgICAgIDxlbC10YWJsZVxuICAgICAgICByZWY9XCJjaGFubmVsVGFibGVcIlxuICAgICAgICA6ZGF0YT1cInRhYmxlRGF0YVwiXG4gICAgICAgIHN0cmlwZVxuICAgICAgICBjbGFzcz1cIndob2xlLXRhYmxlXCJcbiAgICAgICAgbWluLWhlaWdodD1cIjQwMFwiPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgdi1mb3I9XCIoaXRlbSwgaW5kZXgpIGluIHRhYmxlSGVhZGVyXCJcbiAgICAgICAgICA6a2V5PVwiaW5kZXhcIlxuICAgICAgICAgIDpwcm9wPVwiaXRlbS5wcm9wXCJcbiAgICAgICAgICA6bGFiZWw9XCJpdGVtLmxhYmVsXCJcbiAgICAgICAgICA6d2lkdGg9XCJpdGVtLndpZHRoXCJcbiAgICAgICAgICA6Zm9ybWF0dGVyPVwiaXRlbS5mb3JtYXR0ZXJcIlxuICAgICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgICBmaXhlZFxuICAgICAgICAgIHNob3ctb3ZlcmZsb3ctdG9vbHRpcFxuICAgICAgICAvPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgZml4ZWQ9XCJyaWdodFwiXG4gICAgICAgICAgbGFiZWw9XCLmk43kvZxcIlxuICAgICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgICB3aWR0aD1cIjI1MFwiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPVwic2NvcGVcIj5cbiAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIDpjbGFzcz1cIlsndXNlcicsIHNjb3BlLnJvdy5zdGF0ZSAhPT0gMSA/ICdkaXNhYmxlJzogJyddXCJcbiAgICAgICAgICAgICAgICBAY2xpY2s9XCJ0b2dnbGVDb3VudChzY29wZS5yb3cpXCI+XG4gICAgICAgICAgICAgICAge3sgc2NvcGUucm93LnN0YXRlICE9PSAxID8gJ+WQr+eUqOi0puWPtyc6ICflgZznlKjotKblj7cnIH19XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjbGFzcz1cInVzZXIgcmVzZXQtcGFzc3dvcmRcIlxuICAgICAgICAgICAgICAgIEBjbGljaz1cInJlc2V0UGFzc3dvcmQoc2NvcGUucm93KVwiPlxuICAgICAgICAgICAgICAgIOmHjee9ruWvhueggVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+XG4gICAgICA8L2VsLXRhYmxlPlxuICAgICAgPGRpdiBjbGFzcz1cInBhZ2luYXRpb25cIj5cbiAgICAgICAgPGVsLXBhZ2luYXRpb25cbiAgICAgICAgICA6dG90YWw9XCJ0b3RhbFwiXG4gICAgICAgICAgOnBhZ2Utc2l6ZXM9XCJbMTAsIDIwLCAzMCwgNDBdXCJcbiAgICAgICAgICBiYWNrZ3JvdW5kXG4gICAgICAgICAgbGF5b3V0PVwidG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dFwiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPVwiaGFuZGxlU2l6ZUNoYW5nZVwiXG4gICAgICAgICAgQGN1cnJlbnQtY2hhbmdlPVwiaGFuZGxlQ3VycmVudENoYW5nZVwiLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IENpcmNsZVRpdGxlIGZyb20gJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlJ1xuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tICdAL2FwaS9zeXN0ZW1Vc2Vyc0FwaSdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlXG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBydWxlRm9ybToge1xuICAgICAgICB1c2VybmFtZTogJycsXG4gICAgICAgIHBob25lOiAnJyxcbiAgICAgICAgc3RhdGU6ICcnXG4gICAgICB9LFxuICAgICAgdGFibGVIZWFkZXI6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6ICduaWNrbmFtZScsXG4gICAgICAgICAgbGFiZWw6ICfmmLXnp7AnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiAnaGVhZF91cmwnLFxuICAgICAgICAgIGxhYmVsOiAn5aS05YOPJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxhIGhyZWY9e2NlbGxWYWx1ZX0gdGFyZ2V0PVwiX2JsYW5rXCI+PGltZyBzcmM9e2NlbGxWYWx1ZX0gY2xhc3M9XCJ1c2VyLWhlYWQtaWNvblwiLz48L2E+XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogJ3Bob25lJyxcbiAgICAgICAgICBsYWJlbDogJ+eUteivnSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6ICdzZXgnLFxuICAgICAgICAgIGxhYmVsOiAn5oCn5YirJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNlbGxWYWx1ZSA9PT0gMSkge1xuICAgICAgICAgICAgICByZXR1cm4gJ+eUtydcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiAn5aWzJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6ICdhZ2UnLFxuICAgICAgICAgIGxhYmVsOiAn5bm06b6EJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogJ2NyZWF0ZXRpbWUnLFxuICAgICAgICAgIGxhYmVsOiAn5rOo5YaM5pel5pyfJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1snRm9ybWF0RGF0ZSddKGNlbGxWYWx1ZSwgJ3l5eXktTU0tZGQgaGg6bW0nKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6ICdzdGF0ZScsXG4gICAgICAgICAgbGFiZWw6ICfnirbmgIEnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAocGFyc2VJbnQoY2VsbFZhbHVlKSA9PT0gMSkge1xuICAgICAgICAgICAgICByZXR1cm4gJ+WQr+eUqCdcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiAn5YGc55SoJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIHRhYmxlRGF0YTogW10sXG4gICAgICBwYWdlTm86IDEsXG4gICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICB0b3RhbDogMFxuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICAncnVsZUZvcm0udXNlcm5hbWUnICh2YWwpIHtcbiAgICAgIHRoaXMuZ2V0QXBwVXNlckxpc3QoKVxuICAgIH0sXG4gICAgJ3J1bGVGb3JtLnBob25lJyAodmFsKSB7XG4gICAgICB0aGlzLmdldEFwcFVzZXJMaXN0KClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIC8qKiDojrflj5bnlKjmiLfliJfooaggKiovXG4gICAgdGhpcy5nZXRBcHBVc2VyTGlzdCgpXG4gICAgLyoqIOiOt+WPlumikemBk+exu+WeiyAqKi9cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldEFwcFVzZXJMaXN0ICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0QXBwVXNlckxpc3Qoe1xuICAgICAgICAncGFnZU5vJzogdGhpcy5wYWdlTm8sXG4gICAgICAgICdwYWdlU2l6ZSc6IHRoaXMucGFnZVNpemUsXG4gICAgICAgICduaWNrbmFtZSc6IHRoaXMucnVsZUZvcm0udXNlcm5hbWUsXG4gICAgICAgICdwaG9uZSc6IHRoaXMucnVsZUZvcm0ucGhvbmUsXG4gICAgICAgICdzdGF0ZSc6IHRoaXMucnVsZUZvcm0uc3RhdGVcbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgIGxldCBsaXN0RGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gbGlzdERhdGEubGlzdFxuICAgICAgICAgIHRoaXMudG90YWwgPSBsaXN0RGF0YS50b3RhbFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgaGFuZGxlU2l6ZUNoYW5nZSAocGFnZVNpemUpIHtcbiAgICAgIHRoaXMucGFnZVNpemUgPSBwYWdlU2l6ZVxuICAgICAgdGhpcy5nZXRBcHBVc2VyTGlzdCgpXG4gICAgfSxcbiAgICBoYW5kbGVDdXJyZW50Q2hhbmdlIChwYWdlSW5kZXgpIHtcbiAgICAgIHRoaXMucGFnZU5vID0gcGFnZUluZGV4XG4gICAgICB0aGlzLmdldEFwcFVzZXJMaXN0KClcbiAgICB9LFxuICAgIC8qKiDlgZznlKgsIOWQr+eUqOi0puWPtyAqKi9cbiAgICB0b2dnbGVDb3VudCAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlID09PSAxKSB7XG4gICAgICAgIHRoaXMuJGNvbmZpcm0oJ+ehruWumuimgeWBnOeUqOi0puWPtz8nLCAn5o+Q56S6Jywge1xuICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn56Gu5a6aJyxcbiAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAn5Y+W5raIJyxcbiAgICAgICAgICB0eXBlOiAnd2FybmluZydcbiAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5hcHBVc2VyVXBkYXRlU3RhdGUocm93LnVzZXJpZCwgMClcbiAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kY29uZmlybSgn56Gu5a6a6KaB5ZCv55So6LSm5Y+3PycsICfmj5DnpLonLCB7XG4gICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfnoa7lrponLFxuICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognLFxuICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJ1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLmFwcFVzZXJVcGRhdGVTdGF0ZShyb3cudXNlcmlkLCAxKVxuICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICBhcHBVc2VyVXBkYXRlU3RhdGUgKHVzZXJpZCwgc3RhdGUpIHtcbiAgICAgIEFjdGlvbnMuYXBwVXNlclVwZGF0ZVN0YXRlKHtcbiAgICAgICAgJ2FwcFVzZXInOiB7XG4gICAgICAgICAgJ3VzZXJpZCc6IHVzZXJpZCxcbiAgICAgICAgICAnc3RhdGUnOiBzdGF0ZVxuICAgICAgICB9XG4gICAgICB9KS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLmdldEFwcFVzZXJMaXN0KClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDph43nva7lr4bnoIEgKiovXG4gICAgcmVzZXRQYXNzd29yZCAocm93KSB7XG4gICAgICB0aGlzLiRjb25maXJtKCfnoa7lrpropoHph43nva7lr4bnoIE/JywgJ+aPkOekuicsIHtcbiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfnoa7lrponLFxuICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAn5Y+W5raIJyxcbiAgICAgICAgdHlwZTogJ3dhcm5pbmcnXG4gICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgQWN0aW9ucy5yZXNldFBhc3N3b3JkKHtcbiAgICAgICAgICAnYXBwVXNlcic6IHtcbiAgICAgICAgICAgICd1c2VyaWQnOiByb3cudXNlcmlkXG4gICAgICAgICAgfVxuICAgICAgICB9KS50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ+mHjee9ruaIkOWKnyEnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG48XC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuICAucGFnaW5hdGlvbntcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICB9XG4gIC51c2Vye1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBoZWlnaHQ6IDIwcHg7XG4gICAgYm9yZGVyOjFweCBzb2xpZCAjRjAwODA4O1xuICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gICAgZm9udC1zaXplOiAxM3B4O1xuICAgIHBhZGRpbmc6IDFweCA1cHggMnB4IDVweDtcbiAgICBjb2xvcjojRjAwODA4O1xuICAgIHdpZHRoOiA2MHB4O1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuICAucmVzZXQtcGFzc3dvcmR7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzE4ODNGRjtcbiAgICBjb2xvcjojMTg4M0ZGO1xuICAgIHdpZHRoOiA2MHB4O1xuICB9XG4gIC5kaXNhYmxle1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM2OTRFRkY7XG4gICAgY29sb3I6IzY5NEVGRjtcbiAgICB3aWR0aDogNjBweDtcbiAgfVxuICAudXNlci1oZWFkLWljb257XG4gICAgd2lkdGg6IDUwcHg7XG4gICAgaGVpZ2h0OiA1MHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gIH1cbjwvc3R5bGU+XG48c3R5bGU+XG4gIC51c2VyLWxpc3QgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICB3aWR0aDogNjUlO1xuICB9XG4gIC51c2VyLWxpc3QgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtIHtcbiAgICB3aWR0aDogMjclO1xuICAgIG1hcmdpbi1sZWZ0OiAtMTVweDtcbiAgfVxuPC9zdHlsZT5cbiJdLHNvdXJjZVJvb3Q6IiJ9XSl9LFFzd1k6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoIjFtQXIiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiMTQ5MmI0NGEiLGEsITEse30pfSxSMkdvOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCI1Y2dWIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjAxODExOTdiIixhLCExLHt9KX0sUjlVUjpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgiMjFjcSIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCIxNzg3YzM4MCIsYSwhMSx7fSl9LFJXalk6ZnVuY3Rpb24oZSxuKXt9LFJxTmk6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi5jaWNsZS1jb250cm9sbGVyW2RhdGEtdi03MmU5MGIxY10ge1xuICBtYXJnaW4tdG9wOiA0JTtcbn1cbi5jcmVhdGUgLnNvcnQgc3BhbltkYXRhLXYtNzJlOTBiMWNde1xuICBjb2xvcjogIzkwOTA5MDtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlQ2hhbm5lbC9zcmMvY29tcG9uZW50cy9tYW5hZ2VDaGFubmVsL2NoYW5uZWxFZGl0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUEyV0E7RUFDQSxlQUFBO0NBQ0E7QUFDQTtFQUNBLGVBQUE7Q0FDQSIsZmlsZToiY2hhbm5lbEVkaXQudnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0iY2hhbm5lbCBjcmVhdGUiPlxuICAgIDxjaXJjbGUtdGl0bGVcbiAgICAgIHRpdGxlLW5hbWU9IumikemBk+e8lui+kSJcbiAgICAgIGNsYXNzPSJjaWNsZS1jb250cm9sbGVyIlxuICAgIC8+XG4gICAgPGVsLWZvcm1cbiAgICAgIHJlZj0iZWRpdEZyb20iXG4gICAgICA6bW9kZWw9ImVkaXRGcm9tIlxuICAgICAgOnJ1bGVzPSJydWxlcyJcbiAgICAgIGxhYmVsLXdpZHRoPSIxMDBweCJcbiAgICAgIGNsYXNzPSJydWxlLWZvcm0iPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i6aKR6YGT5ZCN56ewIlxuICAgICAgICBwcm9wPSJjaGFubmVsX25hbWUiPlxuICAgICAgICA8ZWwtaW5wdXQgdi1tb2RlbC50cmltPSJlZGl0RnJvbS5jaGFubmVsX25hbWUiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i54i257qn6aKR6YGTIlxuICAgICAgICBwcm9wPSJwYXJlbnRfY2hhbm5lbF9uYW1lIj5cbiAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgIHYtbW9kZWw9ImVkaXRGcm9tLnBhcmVudF9jaGFubmVsaWQiXG4gICAgICAgICAgOmRpc2FibGVkPSJkaXNhYmxlZENob29zZVBhcmVudENoYW5uZWwiXG4gICAgICAgICAgZmlsdGVyYWJsZVxuICAgICAgICAgIHBsYWNlaG9sZGVyPSIiXG4gICAgICAgICAgQGNoYW5nZT0iZGlzYWJsZUlzRml4ZWQiPlxuICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIHBhcmVudENoYW5uZWxMaXN0IlxuICAgICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgICA6dmFsdWU9Iml0ZW0udmFsdWUiXG4gICAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiLz5cbiAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuW9kuWxnuexu+WIqyJcbiAgICAgICAgcHJvcD0iY2hhbm5lbF90eXBlX25hbWUiPlxuICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgdi1tb2RlbD0iZWRpdEZyb20uY2hhbm5lbF90eXBlaWQiXG4gICAgICAgICAgZmlsdGVyYWJsZVxuICAgICAgICAgIHBsYWNlaG9sZGVyPSIiPlxuICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIGNoYW5uZWxUeXBlTGlzdCJcbiAgICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgICAgOnZhbHVlPSJpdGVtLnZhbHVlIlxuICAgICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIi8+XG4gICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLlm77moIfphY3nva4iXG4gICAgICAgIGNsYXNzPSJpdGVtIj5cbiAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi1jaG9vc2UtY29udGFpbmVyIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb3Jlbi1pY29uIj5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgOnNyYz0iZWRpdEZyb20uaWNvbl91cmwiPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgICBAY2xpY2s9ImNob29zZUljb24iPumAieaLqeWbvuaghzwvZWwtYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i54q25oCB6YCJ5oupIlxuICAgICAgICBwcm9wPSJzdGF0ZSI+XG4gICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICB2LW1vZGVsPSJlZGl0RnJvbS5zdGF0ZSJcbiAgICAgICAgICBwbGFjZWhvbGRlcj0i6K+36YCJ5oupIj5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICA6dmFsdWU9IjEiXG4gICAgICAgICAgICBsYWJlbD0i5ZCv55SoIi8+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgOnZhbHVlPSIwIlxuICAgICAgICAgICAgbGFiZWw9IuWBnOeUqCIvPlxuICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i6aKR6YGT566A6L+wIj5cbiAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgdi1tb2RlbD0iZWRpdEZyb20uZGVzY3JpcHRpb24iXG4gICAgICAgICAgdHlwZT0idGV4dGFyZWEiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5piv5ZCm5Zu65a6aIlxuICAgICAgICBwcm9wPSJmaXhlZCI+XG4gICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICA6ZGlzYWJsZWQ9ImZpeGVkRGlzYWJsZWQiXG4gICAgICAgICAgdi1tb2RlbD0iZWRpdEZyb20uZml4ZWQiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+mAieaLqSI+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgOnZhbHVlPSJ0cnVlIlxuICAgICAgICAgICAgbGFiZWw9IuaYryIvPlxuICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgIDp2YWx1ZT0iZmFsc2UiXG4gICAgICAgICAgICBsYWJlbD0i5ZCmIi8+XG4gICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLmjpLluo8iXG4gICAgICAgIGNsYXNzPSJzb3J0IlxuICAgICAgICBwcm9wPSJzb3J0Ij5cbiAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgdi1tb2RlbC5udW1iZXI9ImVkaXRGcm9tLnNvcnQiXG4gICAgICAgICAgc3R5bGU9IndpZHRoOiA3NSUiLz5cbiAgICAgICAgPHNwYW4+5o+Q56S677ya5pWw5a2X6LaK5bCP6LaK5b6A5YmNPC9zcGFuPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtPlxuICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICBAY2xpY2s9InN1Ym1pdEZvcm0oXCdlZGl0RnJvbVwnKSI+5o+Q5LqkPC9lbC1idXR0b24+XG4gICAgICAgIDxlbC1idXR0b24gQGNsaWNrPSJnb3RvTGlzdCI+5Y+W5raIPC9lbC1idXR0b24+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICA8L2VsLWZvcm0+XG4gICAgPGVsLWRpYWxvZ1xuICAgICAgOnZpc2libGUuc3luYz0iZGlhbG9nVmlzaWJsZSJcbiAgICAgIHRpdGxlPSLlm77moIfpgInmi6kiXG4gICAgICB3aWR0aD0iNDAlIlxuICAgICAgQGNsb3NlPSJjbG9zZURpYWxvZyI+XG4gICAgICA8ZGl2XG4gICAgICAgIDppcz0iY29tcG9uZW50TmFtZSJcbiAgICAgICAgQHN1Ym1pdC1pY29uPSJzdWJtaXRJY29uIi8+XG4gICAgPC9lbC1kaWFsb2c+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlXCdcbmltcG9ydCBDaG9vc2VJY29uIGZyb20gXCdAL2NvbXBvbmVudHMvbWFuYWdlQ2hhbm5lbC9jaG9vc2VJY29uXCdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL2NoYW5uZWxBcGlcJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQ2lyY2xlVGl0bGUsXG4gICAgQ2hvb3NlSWNvblxuICB9LFxuICBkYXRhICgpIHtcbiAgICBsZXQgY2hlY2tDaGFubmVsTmFtZUxlbmd0aCA9IChydWxlLCB2YWx1ZSwgY2FsbGJhY2spID0+IHtcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAxMCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKFwn6aKR6YGT5ZCN56ew6ZW/5bqm5LiN6IO96LaF6L+HMTBcJykpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgZWRpdEZyb206IHtcbiAgICAgICAgY2hhbm5lbF9uYW1lOiBcJ1wnLFxuICAgICAgICBwYXJlbnRfY2hhbm5lbF9uYW1lOiBcJ1wnLFxuICAgICAgICBwYXJlbnRfY2hhbm5lbGlkOiBcJ1wnLFxuICAgICAgICBzb3J0OiAwLFxuICAgICAgICBpY29uX3VybDogXCcvc3RhdGljL2ltZy9tb3Jlbi5qcGdcJyxcbiAgICAgICAgY2hhbm5lbF90eXBlX25hbWU6IFwnXCcsXG4gICAgICAgIHN0YXRlOiBcJ1wnLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCdcJyxcbiAgICAgICAgZml4ZWQ6IFwnXCcsXG4gICAgICAgIGNoYW5uZWxfdHlwZWlkOiBcJ1wnXG4gICAgICB9LFxuICAgICAgcnVsZXM6IHtcbiAgICAgICAgY2hhbm5lbF9uYW1lOiBbXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogXCfor7fovpPlhaXpopHpgZPlkI3np7BcJywgdHJpZ2dlcjogXCdibHVyXCcgfSxcbiAgICAgICAgICB7IHZhbGlkYXRvcjogY2hlY2tDaGFubmVsTmFtZUxlbmd0aCwgdHJpZ2dlcjogXCdjaGFuZ2VcJyB9XG4gICAgICAgIF0sXG4gICAgICAgIHNvcnQ6IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+i+k+WFpeaOkuW6j1wnLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9LFxuICAgICAgICAgIHsgdHlwZTogXCdudW1iZXJcJywgbWVzc2FnZTogXCfmjpLluo/lv4XpobvkuLrmlbDlrZdcJyB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBjaGFubmVsVHlwZUxpc3Q6IFtdLFxuICAgICAgcGFyZW50Q2hhbm5lbExpc3Q6IFtcbiAgICAgICAge1xuICAgICAgICAgIGxhYmVsOiBcJ+aXoFwnLFxuICAgICAgICAgIHZhbHVlOiBcJ1wnXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBjaGFubmVsaWQ6IFwnXCcsXG4gICAgICBkaXNhYmxlZENob29zZVBhcmVudENoYW5uZWw6IGZhbHNlLFxuICAgICAgZGlhbG9nVmlzaWJsZTogZmFsc2UsXG4gICAgICBjb21wb25lbnROYW1lOiBcJ1wnLFxuICAgICAgaXNSZWZyZXNoOiB0cnVlLFxuICAgICAgZml4ZWREaXNhYmxlZDogZmFsc2VcbiAgICB9XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgZ2V0VXBsb2FkVXJsICgpIHtcbiAgICAgIHJldHVybiBBY3Rpb25zLnVwbG9hZFBpY3R1cmUoKVxuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBcJ2VkaXRGcm9tLmNoYW5uZWxfbmFtZVwnOiB7XG4gICAgICBpbW1lZGlhdGU6IHRydWUsXG4gICAgICBoYW5kbGVyIChuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICB0aGlzLmVkaXRGcm9tLmNoYW5uZWxfbmFtZSA9IG5ld1ZhbC50cmltKClcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuZ2V0RWRpdEluZm8oKVxuICAgIHRoaXMuZ2V0Q2hhbm5lbFR5cGUoKVxuICAgIHRoaXMuZ2V0UGFyZW50Q2hhbm5lbCgpXG4gIH0sXG4gIGJlZm9yZVJvdXRlTGVhdmUgKHRvLCBmcm9tLCBuZXh0KSB7XG4gICAgaWYgKHRvLnBhdGggPT09IFwnL21hbmFnZUNoYW5uZWwvbGlzdFwnKSB7XG4gICAgICB0by5tZXRhLnJlZnJlc2ggPSB0aGlzLmlzUmVmcmVzaFxuICAgIH0gZWxzZSBpZiAodG8ucGF0aCA9PT0gXCcvbWFuYWdlQ2hhbm5lbC9jcmVhdGVcJykge1xuICAgICAgdGhpcy4kcm9vdC5ldmVudEh1Yi4kZW1pdChcJ3Jlc2V0LW9wdGlvbnNcJylcbiAgICB9XG4gICAgbmV4dCgpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBnb3RvTGlzdCAoKSB7XG4gICAgICB0aGlzLmlzUmVmcmVzaCA9IGZhbHNlXG4gICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7cGF0aDogXCcvbWFuYWdlQ2hhbm5lbC9saXN0XCd9KVxuICAgIH0sXG4gICAgZ2V0RWRpdEluZm8gKCkge1xuICAgICAgdGhpcy5jaGFubmVsaWQgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwnY2hhbm5lbGlkXCcpXG4gICAgICBBY3Rpb25zLmdldENoYW5uZWxCeUlEKHtcbiAgICAgICAgXCdjaGFubmVsXCc6IHtcbiAgICAgICAgICBcJ2NoYW5uZWxpZFwnOiB0aGlzLmNoYW5uZWxpZFxuICAgICAgICB9XG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy5lZGl0RnJvbS5jaGFubmVsX25hbWUgPSBkYXRhLmNoYW5uZWxfbmFtZVxuICAgICAgICAgIHRoaXMuZWRpdEZyb20ucGFyZW50X2NoYW5uZWxfbmFtZSA9IGRhdGEucGFyZW50X2NoYW5uZWxfbmFtZVxuICAgICAgICAgIHRoaXMuZWRpdEZyb20uc29ydCA9IGRhdGEuc29ydFxuICAgICAgICAgIHRoaXMuZWRpdEZyb20uaWNvbl91cmwgPSBkYXRhLmljb25fdXJsXG4gICAgICAgICAgdGhpcy5lZGl0RnJvbS5jaGFubmVsX3R5cGVfbmFtZSA9IGRhdGEuY2hhbm5lbF90eXBlX25hbWVcbiAgICAgICAgICB0aGlzLmVkaXRGcm9tLnN0YXRlID0gZGF0YS5zdGF0ZVxuICAgICAgICAgIHRoaXMuZWRpdEZyb20uZGVzY3JpcHRpb24gPSBkYXRhLmRlc2NyaXB0aW9uXG4gICAgICAgICAgdGhpcy5lZGl0RnJvbS5maXhlZCA9IGRhdGEuZml4ZWRcbiAgICAgICAgICB0aGlzLmVkaXRGcm9tLmNoYW5uZWxfdHlwZWlkID0gZGF0YS5jaGFubmVsX3R5cGVpZFxuICAgICAgICAgIHRoaXMuZWRpdEZyb20ucGFyZW50X2NoYW5uZWxpZCA9IGRhdGEucGFyZW50X2NoYW5uZWxpZFxuICAgICAgICAgIGlmIChkYXRhLmNvdW50Q2hpbGRyZW4gPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkQ2hvb3NlUGFyZW50Q2hhbm5lbCA9IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5kaXNhYmxlSXNGaXhlZCgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBzdWJtaXRGb3JtIChmb3JtTmFtZSkge1xuICAgICAgdGhpcy4kcmVmc1tmb3JtTmFtZV0udmFsaWRhdGUoKHZhbGlkKSA9PiB7XG4gICAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICAgIHRoaXMuY2hhbm5lbFR5cGVMaXN0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtLnZhbHVlID09PSB0aGlzLmVkaXRGcm9tLmNoYW5uZWxfdHlwZWlkKSB7XG4gICAgICAgICAgICAgIHRoaXMuZWRpdEZyb20uY2hhbm5lbF90eXBlX25hbWUgPSBpdGVtLmxhYmVsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICB0aGlzLnBhcmVudENoYW5uZWxMaXN0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtLnZhbHVlID09PSB0aGlzLmVkaXRGcm9tLnBhcmVudF9jaGFubmVsaWQpIHtcbiAgICAgICAgICAgICAgdGhpcy5lZGl0RnJvbS5wYXJlbnRfY2hhbm5lbF9uYW1lID0gaXRlbS5sYWJlbFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgQWN0aW9ucy5lZGl0Q2hhbm5lbCh7XG4gICAgICAgICAgICBcJ2NoYW5uZWxcJzoge1xuICAgICAgICAgICAgICBcJ3BhcmVudF9jaGFubmVsaWRcJzogdGhpcy5lZGl0RnJvbS5wYXJlbnRfY2hhbm5lbGlkLFxuICAgICAgICAgICAgICBcJ3BhcmVudF9jaGFubmVsX25hbWVcJzogdGhpcy5lZGl0RnJvbS5wYXJlbnRfY2hhbm5lbF9uYW1lLFxuICAgICAgICAgICAgICBcJ2NoYW5uZWxpZFwnOiB0aGlzLmNoYW5uZWxpZCxcbiAgICAgICAgICAgICAgXCdjaGFubmVsX25hbWVcJzogdGhpcy5lZGl0RnJvbS5jaGFubmVsX25hbWUsXG4gICAgICAgICAgICAgIFwnY2hhbm5lbF90eXBlaWRcJzogdGhpcy5lZGl0RnJvbS5jaGFubmVsX3R5cGVpZCxcbiAgICAgICAgICAgICAgXCdjaGFubmVsX3R5cGVfbmFtZVwnOiB0aGlzLmVkaXRGcm9tLmNoYW5uZWxfdHlwZV9uYW1lLFxuICAgICAgICAgICAgICBcJ2ljb25fdXJsXCc6IHRoaXMuZWRpdEZyb20uaWNvbl91cmwsXG4gICAgICAgICAgICAgIFwnc3RhdGVcJzogdGhpcy5lZGl0RnJvbS5zdGF0ZSxcbiAgICAgICAgICAgICAgXCdkZXNjcmlwdGlvblwnOiB0aGlzLmVkaXRGcm9tLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICBcJ2ZpeGVkXCc6IHRoaXMuZWRpdEZyb20uZml4ZWQsXG4gICAgICAgICAgICAgIFwnc29ydFwnOiB0aGlzLmVkaXRGcm9tLnNvcnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6IFwnL21hbmFnZUNoYW5uZWwvbGlzdFwnfSlcbiAgICAgICAgICAgICAgdGhpcy4kbm90aWZ5KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCfpgJrnn6VcJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+e8lui+keaIkOWKn1wnLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcJ2Vycm9yIHN1Ym1pdCEhXCcpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBoYW5kbGVQY0F2YXRhclN1Y2Nlc3MgKHJlcywgZmlsZSkge1xuICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgbGV0IGltYWdlVXJsID0gcmVzLnJlc3VsdFxuICAgICAgICB0aGlzLmVkaXRGcm9tLmljb25fdXJsID0gaW1hZ2VVcmxcbiAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZUF2YXRhclVwbG9hZCAoZmlsZSkge1xuICAgICAgbGV0IGltYWdlT2JqID0ge1xuICAgICAgICBcJ2ltYWdlL2pwZWdcJzogdHJ1ZSxcbiAgICAgICAgXCdpbWFnZS9wbmdcJzogdHJ1ZSxcbiAgICAgICAgXCdpbWFnZS9qcGdcJzogdHJ1ZVxuICAgICAgfVxuICAgICAgY29uc3QgaXNJbWFnZSA9IGZpbGUudHlwZSBpbiBpbWFnZU9ialxuICAgICAgY29uc3QgaXNMdDJNID0gZmlsZS5zaXplIC8gMTAyNCAvIDEwMjQgPCAyXG4gICAgICBpZiAoIWlzSW1hZ2UpIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihcJ+ivt+S4iuS8oOWbvueJh+agvOW8j+eahOaWh+S7tiFcJylcbiAgICAgIH1cbiAgICAgIGlmICghaXNMdDJNKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoXCfkuIrkvKDlm77niYflpKflsI/kuI3og73otoXov4cgMk1CIVwnKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlzSW1hZ2UgJiYgaXNMdDJNXG4gICAgfSxcbiAgICAvKiog6I635Y+W6aKR6YGT57G75YirICoqL1xuICAgIGdldENoYW5uZWxUeXBlICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0Q2hhbm5lbFR5cGUoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YVxuICAgICAgICBpZiAoZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gZGF0YS5yZXN1bHRcbiAgICAgICAgICByZXN1bHQuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgIC8qKiDpu5jorqTpgInmi6nkuIDkuKrnsbvlnosgKiovXG4gICAgICAgICAgICAgIHRoaXMuZWRpdEZyb20uY2hhbm5lbF90eXBlaWQgPSBpdGVtLmNoYW5uZWxfdHlwZWlkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbmV3SXRlbSA9IHt9XG4gICAgICAgICAgICBuZXdJdGVtLmxhYmVsID0gaXRlbS5jaGFubmVsX3R5cGVfbmFtZVxuICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uY2hhbm5lbF90eXBlaWRcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbFR5cGVMaXN0LnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOiOt+WPlueItumikemBkyAqKi9cbiAgICBnZXRQYXJlbnRDaGFubmVsICgpIHtcbiAgICAgIEFjdGlvbnMubGlzdFVzYWJsZVBhcmVudENoYW5uZWwoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YVxuICAgICAgICBpZiAoZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gZGF0YS5yZXN1bHRcbiAgICAgICAgICByZXN1bHQuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhbm5lbGlkICE9PSBpdGVtLmNoYW5uZWxpZCkge1xuICAgICAgICAgICAgICBsZXQgbmV3SXRlbSA9IHt9XG4gICAgICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBpdGVtLmNoYW5uZWxfbmFtZVxuICAgICAgICAgICAgICBuZXdJdGVtLnZhbHVlID0gaXRlbS5jaGFubmVsaWRcbiAgICAgICAgICAgICAgdGhpcy5wYXJlbnRDaGFubmVsTGlzdC5wdXNoKG5ld0l0ZW0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGNsb3NlRGlhbG9nICgpIHtcbiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IGZhbHNlXG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ1wnXG4gICAgfSxcbiAgICAvKiog6YCJ5Y+W5Zu+5qCHICoqL1xuICAgIGNob29zZUljb24gKCkge1xuICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gdHJ1ZVxuICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gXCdDaG9vc2VJY29uXCdcbiAgICB9LFxuICAgIC8qKiDnoa7lrprlm77moIcgKiovXG4gICAgc3VibWl0SWNvbiAoaWNvblVybCkge1xuICAgICAgdGhpcy5lZGl0RnJvbS5pY29uX3VybCA9IGljb25VcmxcbiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IGZhbHNlXG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ1wnXG4gICAgfSxcbiAgICAvKiog56aB55So5piv5ZCm5Zu65a6a5oyJ6ZKuLCDlubborqnlhbbpu5jorqTkuLrlkKYgKiovXG4gICAgZGlzYWJsZUlzRml4ZWQgKCkge1xuICAgICAgaWYgKHRoaXMuZWRpdEZyb20ucGFyZW50X2NoYW5uZWxpZCkge1xuICAgICAgICB0aGlzLmVkaXRGcm9tLmZpeGVkID0gZmFsc2VcbiAgICAgICAgdGhpcy5maXhlZERpc2FibGVkID0gdHJ1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5maXhlZERpc2FibGVkID0gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5jaWNsZS1jb250cm9sbGVyIHtcbiAgICBtYXJnaW4tdG9wOiA0JTtcbiAgfVxuICAuY3JlYXRlIC5zb3J0IHNwYW57XG4gICAgY29sb3I6ICM5MDkwOTA7XG4gIH1cbjwvc3R5bGU+XG4nXSxzb3VyY2VSb290OiIifV0pfSxTQUFPOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uZWwtYnV0dG9uLS1wcmltYXJ5W2RhdGEtdi01ZDI5YzcxM10ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzE2QkZGO1xuICBib3JkZXItY29sb3I6ICM3MTZCRkY7XG59XG4uZWwtYnV0dG9uLS1kZWZhdWx0W2RhdGEtdi01ZDI5YzcxM10ge1xuICBjb2xvcjogIzcxNkJGRiA7XG4gIGJvcmRlci1jb2xvcjogIzcxNkJGRjtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlU3lzdGVtVXNlci9zcmMvY29tcG9uZW50cy9tYW5hZ2VTeXN0ZW1Vc2VyL2Fzc2lnblJvbGVMaXN0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUFtRkE7RUFDQSwwQkFBQTtFQUNBLHNCQUFBO0NBQ0E7QUFDQTtFQUNBLGdCQUFBO0VBQ0Esc0JBQUE7Q0FDQSIsZmlsZToiYXNzaWduUm9sZUxpc3QudnVlIixzb3VyY2VzQ29udGVudDpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImFzc2lnblJvbGVcIj5cbiAgICA8ZWwtZm9ybVxuICAgICAgOmlubGluZT1cInRydWVcIlxuICAgICAgc2l6ZT1cInNtYWxsXCI+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPVwi55So5oi35ZCNXCJcbiAgICAgICAgc3R5bGU9XCJtYXJnaW4tbGVmdDogMTNweDtcIj5cbiAgICAgICAgPHNwYW4+e3sgdXNlcm5hbWUgfX08L3NwYW4+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCLop5LoibLliIbphY1cIj5cbiAgICAgICAgPGVsLWNoZWNrYm94XG4gICAgICAgICAgdi1mb3I9XCIoaXRlbSwgaW5kZXgpIGluIGFsbFJvbGVMaXN0XCJcbiAgICAgICAgICA6a2V5PVwiaW5kZXhcIlxuICAgICAgICAgIHYtbW9kZWw9XCJpdGVtLmlzQ2hlY2tlZFwiXG4gICAgICAgICAgQGNoYW5nZT1cImNob29zZVJvbGUoaXRlbS5yb2xlaWQsIGl0ZW0uaXNDaGVja2VkKVwiPlxuICAgICAgICAgIHt7IGl0ZW0ubmFtZSB9fVxuICAgICAgICA8L2VsLWNoZWNrYm94PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgPC9lbC1mb3JtPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tICdAL2FwaS9zeXN0ZW1Vc2Vyc0FwaSdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ0Fzc2lnblJvbGUnLFxuICBwcm9wczoge1xuICAgIHVzZXJjb2RlTGlzdDoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBbXVxuICAgICAgfVxuICAgIH0sXG4gICAgdXNlcm5hbWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfVxuICB9LFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYWxsUm9sZUxpc3Q6IFtdXG4gICAgfVxuICB9LFxuICBtb3VudGVkICgpIHtcbiAgICAvKiog6I635Y+W55So5oi35L+h5oGvICoqL1xuICAgIHRoaXMuZ2V0VXNlckluZm8oKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgY2FuY2VsICgpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ2Nsb3NlRGlhbG9nJylcbiAgICB9LFxuICAgIGdldFVzZXJJbmZvICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0VXNlclJvbGVzKHtcbiAgICAgICAgJ29yZ1VzZXJzJzoge1xuICAgICAgICAgICd1c2VyY29kZSc6ICcnXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIHRoaXMuYWxsUm9sZUxpc3QgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDnu5nnlKjmiLfliIbphY3mnYPpmZAgKiovXG4gICAgY2hvb3NlUm9sZSAocm9sZWlkLCBpc0NoZWNrZWQpIHtcbiAgICAgIEFjdGlvbnMuYXNzaWduUm9sZUxpc3Qoe1xuICAgICAgICAnYXNzaWduJzoge1xuICAgICAgICAgICd1c2VyY29kZXMnOiB0aGlzLnVzZXJjb2RlTGlzdCxcbiAgICAgICAgICAncm9sZWlkJzogcm9sZWlkLFxuICAgICAgICAgICdhc3NpZ25PckNhbmVsJzogaXNDaGVja2VkXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgbWVzc2FnZTogJ+WIhumFjeaIkOWKnydcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLmVsLWJ1dHRvbi0tcHJpbWFyeSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzcxNkJGRjtcbiAgICBib3JkZXItY29sb3I6ICM3MTZCRkY7XG4gIH1cbiAgLmVsLWJ1dHRvbi0tZGVmYXVsdCB7XG4gICAgY29sb3I6ICM3MTZCRkYgO1xuICAgIGJvcmRlci1jb2xvcjogIzcxNkJGRjtcbiAgfVxuPC9zdHlsZT5cbjxzdHlsZT5cbiAgLmVsLWRpYWxvZ19faGVhZGVye1xuICAgIHBhZGRpbmc6IDEzcHggMzBweCAxM3B4O1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjQzBCRUZGO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNGN0ZBRkY7XG4gIH1cbiAgLmVsLWRpYWxvZ19fdGl0bGUge1xuICAgIGxpbmUtaGVpZ2h0OiAxN3B4O1xuICAgIGZvbnQtc2l6ZTogMTdweDtcbiAgICBjb2xvcjogIzMwMzEzMztcbiAgfVxuICAuZWwtZGlhbG9nX19oZWFkZXJidG4ge1xuICAgIHRvcDogMTNweDtcbiAgfVxuICAuZWwtZGlhbG9nX19ib2R5IHtcbiAgICBwYWRkaW5nOiAyMHB4IDYwcHggMHB4IDYwcHg7XG4gIH1cbiAgLmFzc2lnblJvbGUgLmVsLWZvcm0ge1xuICAgIG1hcmdpbi10b3A6IDE1cHg7XG4gIH1cbiAgLmFzc2lnblJvbGUgLnN1Ym1pdCAuZWwtZm9ybS1pdGVtX19jb250ZW50e1xuICAgIGZsb2F0OiByaWdodDtcbiAgICB3aWR0aDogMTYwcHg7XG4gIH1cbiAgLnNlbGVjdC1yb2xlIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNjk0RUZGO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNFQkY1RkY7XG4gICAgY29sb3I6ICM2OTRFRkY7XG4gICAgcGFkZGluZzo4cHggMjJweCA4cHggMjJweDtcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIH1cbiAgLmFzc2lnblJvbGUgLmVsLXNlbGVjdCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbiAgLmFzc2lnblJvbGUgLmVsLWZvcm0taXRlbSB7XG4gICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcbiAgfVxuICAuYXNzaWduUm9sZSAuZWwtY2hlY2tib3grLmVsLWNoZWNrYm94e1xuICAgIHdpZHRoOiAyMDBweDtcbiAgICBtYXJnaW4tbGVmdDogMHB4O1xuICB9XG4gIC8qLmFzc2lnblJvbGUgLmVsLWZvcm0taXRlbSAqL1xuPC9zdHlsZT5cbiJdLHNvdXJjZVJvb3Q6IiJ9XSl9LFQwc006ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi5zdWItY2hhbm5lbCAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICB3aWR0aDogNjAlO1xufVxuLnN1Yi1jaGFubmVsIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmVsLWZvcm0taXRlbSB7XG4gIHdpZHRoOiAyMCU7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZVN1YmxpdmUvc3ViQ2hhbm5lbC9zcmMvY29tcG9uZW50cy9tYW5hZ2VTdWJsaXZlL3N1YkNoYW5uZWwvY2hhbm5lbExpc3QudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQTJmQTtFQUNBLFdBQUE7Q0FDQTtBQUNBO0VBQ0EsV0FBQTtDQUNBIixmaWxlOiJjaGFubmVsTGlzdC52dWUiLHNvdXJjZXNDb250ZW50OlsnPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSJzdWItY2hhbm5lbCI+XG4gICAgPGRpdj5cbiAgICAgIDxjaXJjbGUtdGl0bGVcbiAgICAgICAgdGl0bGUtbmFtZT0i6aKR6YGT5YiX6KGoIlxuICAgICAgICBjbGFzcz0iY2ljbGUtY29udHJvbGxlciJcbiAgICAgIC8+XG4gICAgICA8ZGl2IGNsYXNzPSJzZWFyY2gtZm9ybS1jb250YWluZXIiPlxuICAgICAgICA8ZWwtZm9ybVxuICAgICAgICAgIDppbmxpbmU9InRydWUiXG4gICAgICAgICAgOm1vZGVsPSJjaGFubmVsRm9ybSJcbiAgICAgICAgICBjbGFzcz0iZGVtby1mb3JtLWlubGluZSI+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i6aKR6YGTIj5cbiAgICAgICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgICAgICB2LW1vZGVsPSJjaGFubmVsRm9ybS5jaGFubmVsX25hbWUiXG4gICAgICAgICAgICAgIGNsZWFyYWJsZS8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9IueItue6p+mikemBkyJcbiAgICAgICAgICAgIHByb3A9InBhcmVudF9jaGFubmVsX25hbWUiPlxuICAgICAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgICAgICB2LW1vZGVsPSJjaGFubmVsRm9ybS5wYXJlbnRfY2hhbm5lbGlkIlxuICAgICAgICAgICAgICBmaWx0ZXJhYmxlXG4gICAgICAgICAgICAgIGNsZWFyYWJsZVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgICAgICBAY2xlYXI9InNlYXJjaENoYW5uZWwiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaENoYW5uZWwiPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gcGFyZW50Q2hhbm5lbExpc3QiXG4gICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgICAgICAgOnZhbHVlPSJpdGVtLnZhbHVlIlxuICAgICAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLliIbnsbsiXG4gICAgICAgICAgICBjbGFzcz0ic2VhcmNoLWxlZnQiPlxuICAgICAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgICAgICB2LW1vZGVsPSJjaGFubmVsRm9ybS5jaGFubmVsX3R5cGVpZCJcbiAgICAgICAgICAgICAgY2xlYXJhYmxlXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSIiXG4gICAgICAgICAgICAgIEBjbGVhcj0ic2VhcmNoQ2hhbm5lbCJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoQ2hhbm5lbCI+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBjaGFubmVsVHlwZUxpc3QiXG4gICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgICAgICAgOnZhbHVlPSJpdGVtLnZhbHVlIlxuICAgICAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9IueKtuaAgSJcbiAgICAgICAgICAgIGNsYXNzPSJzZWFyY2gtbGVmdCI+XG4gICAgICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgICAgIHYtbW9kZWw9ImNoYW5uZWxGb3JtLnN0YXRlIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hDaGFubmVsIj5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIHZhbHVlPSIiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuWFqOmDqCIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPSIxIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlkK/nlKgiLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMCJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5YGc55SoIi8+XG4gICAgICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i5byA5aeL5pe26Ze0IlxuICAgICAgICAgICAgY2xhc3M9ImRhdGUtbGVmdCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPSJjaGFubmVsRm9ybS5zdGFydERhdGUgfCBGb3JtYXREYXRlKFwneXl5eS1NTS1kZCBoaDptbVwnKSJcbiAgICAgICAgICAgICAgdi1tb2RlbD0iY2hhbm5lbEZvcm0uc3RhcnREYXRlIlxuICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pel5pyfIlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hDaGFubmVsIi8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9Iue7k+adn+aXtumXtCJcbiAgICAgICAgICAgIGNsYXNzPSJkYXRlLWxlZnQiXG4gICAgICAgICAgICBzdHlsZT0ibGVmdDogMDsiPlxuICAgICAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgICAgIDp0aXRsZT0iY2hhbm5lbEZvcm0uZW5kRGF0ZSB8IEZvcm1hdERhdGUoXCd5eXl5LU1NLWRkIGhoOm1tXCcpIlxuICAgICAgICAgICAgICB2LW1vZGVsPSJjaGFubmVsRm9ybS5lbmREYXRlIlxuICAgICAgICAgICAgICBmb3JtYXQ9Inl5eXktTU0tZGQgSEg6bW0iXG4gICAgICAgICAgICAgIHR5cGU9ImRhdGV0aW1lIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pel5pyfIlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hDaGFubmVsIi8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogNDBweCJcbiAgICAgICAgICAgIEBjbGljaz0ic2VhcmNoQ2hhbm5lbCI+XG4gICAgICAgICAgICDmn6Xor6JcbiAgICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCIvPlxuICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICAgIDxyb3V0ZXItbGluayB0bz0iL3N1YkNoYW5uZWwvY3JlYXRlIj5cbiAgICAgICAgICAgIDxlbC1idXR0b24gdHlwZT0icHJpbWFyeSI+XG4gICAgICAgICAgICAgIOa3u+WKoOmikemBk1xuICAgICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1wbHVzIGVsLWljb24tLXJpZ2h0Ii8+XG4gICAgICAgICAgICA8L2VsLWJ1dHRvbj5cbiAgICAgICAgICA8L3JvdXRlci1saW5rPlxuICAgICAgICA8L2VsLWZvcm0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1saXN0Ij5cbiAgICAgIDxlbC10YWJsZVxuICAgICAgICByZWY9ImNoYW5uZWxUYWJsZSJcbiAgICAgICAgOmRhdGE9InRhYmxlRGF0YSJcbiAgICAgICAgc3RyaXBlXG4gICAgICAgIGNsYXNzPSJ3aG9sZS10YWJsZSJcbiAgICAgICAgbWluLWhlaWdodD0iNDAwIlxuICAgICAgICBAY2VsbC1jbGljaz0iY2VsbENsaWNrIlxuICAgICAgICBAY2VsbC1tb3VzZS1sZWF2ZT0iY2VsbE1vdXNlTGVhdmUiPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gdGFibGVIZWFkZXIiXG4gICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgOnByb3A9Iml0ZW0ucHJvcCJcbiAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiXG4gICAgICAgICAgOndpZHRoPSJpdGVtLndpZHRoIlxuICAgICAgICAgIDpmb3JtYXR0ZXI9Iml0ZW0uZm9ybWF0dGVyIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgZml4ZWRcbiAgICAgICAgICBzaG93LW92ZXJmbG93LXRvb2x0aXBcbiAgICAgICAgLz5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGZpeGVkPSJyaWdodCJcbiAgICAgICAgICBsYWJlbD0i5pON5L2cIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgd2lkdGg9IjEwMCI+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9IuS/ruaUueeKtuaAgSJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3AiPlxuICAgICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgICAgdHlwZT0idGV4dCJcbiAgICAgICAgICAgICAgICBzaXplPSJzbWFsbCJcbiAgICAgICAgICAgICAgICBpY29uPSJlbC1pY29uLXJlbW92ZS1vdXRsaW5lIlxuICAgICAgICAgICAgICAgIEBjbGljaz0iY2hhbmdlU3RhdGUoc2NvcGUucm93KSIvPlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IlxuICAgICAgICAgICAgICBzaXplPSJzbWFsbCJcbiAgICAgICAgICAgICAgaWNvbj0iZWwtaWNvbi1lZGl0IlxuICAgICAgICAgICAgICBAY2xpY2s9ImhhbmRsZUVkaXQoc2NvcGUucm93KSIvPlxuICAgICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IlxuICAgICAgICAgICAgICBzaXplPSJzbWFsbCJcbiAgICAgICAgICAgICAgaWNvbj0iZWwtaWNvbi1kZWxldGUiXG4gICAgICAgICAgICAgIEBjbGljaz0iaGFuZGxlRGVsZXRlKHNjb3BlLnJvdykiLz5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgIDwvZWwtdGFibGU+XG4gICAgICA8ZGl2IGNsYXNzPSJwYWdpbmF0aW9uIj5cbiAgICAgICAgPGVsLXBhZ2luYXRpb25cbiAgICAgICAgICA6dG90YWw9InRvdGFsIlxuICAgICAgICAgIDpwYWdlLXNpemVzPSJbMTAsIDIwLCAzMCwgNDBdIlxuICAgICAgICAgIDpjdXJyZW50LXBhZ2U9InBhZ2VObyJcbiAgICAgICAgICBiYWNrZ3JvdW5kXG4gICAgICAgICAgbGF5b3V0PSJ0b3RhbCwgc2l6ZXMsIHByZXYsIHBhZ2VyLCBuZXh0IlxuICAgICAgICAgIEBzaXplLWNoYW5nZT0iaGFuZGxlU2l6ZUNoYW5nZSJcbiAgICAgICAgICBAY3VycmVudC1jaGFuZ2U9ImhhbmRsZUN1cnJlbnRDaGFuZ2UiLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IENpcmNsZVRpdGxlIGZyb20gXCdAL2NvbXBvbmVudHMvY29tbW9ucy9jaXJjbGVUaXRsZVwnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9kZW1hbmQtY2hhbm5lbFwnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBDaXJjbGVUaXRsZVxuICB9LFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2hhbm5lbEZvcm06IHtcbiAgICAgICAgY2hhbm5lbF9uYW1lOiBcJ1wnLFxuICAgICAgICBjaGFubmVsX3R5cGVpZDogXCdcJyxcbiAgICAgICAgc3RhdGU6IFwnXCcsXG4gICAgICAgIHNvcnQ6IFwnMVwnLFxuICAgICAgICBzdGFydERhdGU6IFwnXCcsXG4gICAgICAgIGVuZERhdGU6IFwnXCcsXG4gICAgICAgIHBhcmVudF9jaGFubmVsaWQ6IFwnXCdcbiAgICAgIH0sXG4gICAgICBjbGlja0NlbGxJbmRleDogLTEsXG4gICAgICB0YWJsZUhlYWRlcjogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdjaGFubmVsX25hbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfpopHpgZPlkI1cJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdwYXJlbnRfY2hhbm5lbF9uYW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn54i257qn6aKR6YGTXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2wsIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmICghY2VsbFZhbHVlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBcJ+aXoFwnXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gY2VsbFZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdjaGFubmVsX3R5cGVfbmFtZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+WIhuexu1wnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3VwZGF0ZXRpbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfmm7TmlrDml6XmnJ9cJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10oY2VsbFZhbHVlLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2ljb25fdXJsXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5Zu+5qCH6buY6K6kXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8aW1nIGNsYXNzPVwndG9waWMtdGFibGUtcGljXCcgc3JjPXtjZWxsVmFsdWV9Lz5cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2Rlc2NyaXB0aW9uXCcsXG4gICAgICAgICAgbGFiZWw6IFwn6aKR6YGT5o+P6L+wXCcsXG4gICAgICAgICAgd2lkdGg6IFwnMTAwXCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnc3RhdGVcJyxcbiAgICAgICAgICBsYWJlbDogXCfnirbmgIFcJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBhcnNlSW50KGNlbGxWYWx1ZSkgPT09IDEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwn5ZCv55SoXCdcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBcJ+WBnOeUqFwnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdmaXhlZFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+S9jee9ruWbuuWumlwnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoY2VsbFZhbHVlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBcJ+WbuuWumlwnXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gXCfkuI3lm7rlrppcJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnc29ydFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+S8mOWFiOe6p1wnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMuY2xpY2tDZWxsSW5kZXgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDxpbnB1dCB0eXBlPVwndGV4dFwnIGlkPSJpbnB1dCIgY2xhc3M9XCdzZWxmLXNvcnRcJyB2YWx1ZT0ge2NlbGxWYWx1ZX0gYXV0b2ZvY3VzPSJhdXRvZm9jdXMiIC8+XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gPHNwYW4gY2xhc3M9XCdzb3J0LWNvbnRhaW5lclwnIGRhdGEtaWQ9e2luZGV4fT57Y2VsbFZhbHVlfTwvc3Bhbj5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICB0YWJsZURhdGE6IFtdLFxuICAgICAgY2hhbm5lbFR5cGVMaXN0OiBbXSxcbiAgICAgIHNvcnRWYWx1ZTogLTEsXG4gICAgICBwYWdlTm86IDEsXG4gICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICB0b3RhbDogMCxcbiAgICAgIHBhcmVudENoYW5uZWxMaXN0OiBbXSxcbiAgICAgIHNlbGVjdENoYW5uZWxJZDogXCdcJyAvLyDngrnlh7vmjpLluo/ooYznmoRjaGFubmVsaWRcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgXCdjaGFubmVsRm9ybS5jaGFubmVsX25hbWVcJyAodmFsKSB7XG4gICAgICB0aGlzLnNlYXJjaENoYW5uZWwoKVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgLyoqIOWIhumhteiOt+WPlumikemBk+WIl+ihqCAqKi9cbiAgICB0aGlzLmdldENoYW5uZWxMaXN0KClcbiAgICAvKiog6I635Y+W6aKR6YGT57G75Z6LICoqL1xuICAgIHRoaXMuZ2V0Q2hhbm5lbFR5cGUoKVxuICAgIHRoaXMuZ2V0UGFyZW50Q2hhbm5lbCgpXG5cbiAgICB0aGlzLiRyb290LmV2ZW50SHViLiRvbihcJ3Jlc2V0LW9wdGlvbnNcJywgKCkgPT4ge1xuICAgICAgdGhpcy5yZXNldE9wdGlvbnMoKVxuICAgIH0pXG4gIH0sXG4gIGFjdGl2YXRlZCAoKSB7XG4gICAgbGV0IG1ldGEgPSB0aGlzLiRyb3V0ZS5tZXRhXG4gICAgaWYgKG1ldGEuaGFzT3duUHJvcGVydHkoXCdyZWZyZXNoXCcpICYmIG1ldGEucmVmcmVzaCkge1xuICAgICAgdGhpcy5nZXRDaGFubmVsTGlzdCgpXG4gICAgICBkZWxldGUgdGhpcy4kcm91dGUubWV0YS5yZWZyZXNoXG4gICAgfVxuICB9LFxuICBiZWZvcmVSb3V0ZUxlYXZlICh0bywgZnJvbSwgbmV4dCkge1xuICAgIGlmICh0by5wYXRoID09PSBcJy9zdWJDaGFubmVsL2NyZWF0ZVwnIHx8IHRvLnBhdGggPT09IFwnL3N1YkxpdmUvbGlzdFwnKSB7XG4gICAgICB0aGlzLnJlc2V0T3B0aW9ucygpXG4gICAgfVxuICAgIG5leHQoKVxuICB9LFxuICBiZWZvcmVEZXN0cm95ICgpIHtcbiAgICB0aGlzLiRyb290LmV2ZW50SHViLiRvZmYoXCdyZXNldC1vcHRpb25zXCcpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICByZXNldE9wdGlvbnMgKCkge1xuICAgICAgdGhpcy5jaGFubmVsRm9ybSA9IHtcbiAgICAgICAgY2hhbm5lbF9uYW1lOiBcJ1wnLFxuICAgICAgICBjaGFubmVsX3R5cGVpZDogXCdcJyxcbiAgICAgICAgc3RhdGU6IFwnXCcsXG4gICAgICAgIHNvcnQ6IFwnMVwnLFxuICAgICAgICBzdGFydERhdGU6IFwnXCcsXG4gICAgICAgIGVuZERhdGU6IFwnXCcsXG4gICAgICAgIHBhcmVudF9jaGFubmVsaWQ6IFwnXCdcbiAgICAgIH1cbiAgICAgIHRoaXMucGFnZU5vID0gMVxuICAgICAgdGhpcy5nZXRDaGFubmVsTGlzdCgpXG4gICAgfSxcbiAgICBnZXRDaGFubmVsTGlzdCAoKSB7XG4gICAgICBBY3Rpb25zLmdldENoYW5uZWxMaXN0KHtcbiAgICAgICAgXCdwYWdlTm9cJzogdGhpcy5wYWdlTm8sXG4gICAgICAgIFwncGFnZVNpemVcJzogdGhpcy5wYWdlU2l6ZSxcbiAgICAgICAgXCdjaGFubmVsX25hbWVcJzogdGhpcy5jaGFubmVsRm9ybS5jaGFubmVsX25hbWUsXG4gICAgICAgIFwnY2hhbm5lbF90eXBlaWRcJzogdGhpcy5jaGFubmVsRm9ybS5jaGFubmVsX3R5cGVpZCxcbiAgICAgICAgXCdzdGF0ZVwnOiB0aGlzLmNoYW5uZWxGb3JtLnN0YXRlLFxuICAgICAgICBcJ3RpbWVTdGFydFwnOiBuZXcgRGF0ZSh0aGlzLmNoYW5uZWxGb3JtLnN0YXJ0RGF0ZSkuZ2V0VGltZSgpIHx8IFwnXCcsXG4gICAgICAgIFwndGltZUVuZFwnOiBuZXcgRGF0ZSh0aGlzLmNoYW5uZWxGb3JtLmVuZERhdGUpLmdldFRpbWUoKSB8fCBcJ1wnLFxuICAgICAgICBcJ3BhcmVudF9jaGFubmVsaWRcJzogdGhpcy5jaGFubmVsRm9ybS5wYXJlbnRfY2hhbm5lbGlkXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBsaXN0RGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gbGlzdERhdGEubGlzdFxuICAgICAgICAgIHRoaXMudG90YWwgPSBsaXN0RGF0YS50b3RhbFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgaGFuZGxlU2l6ZUNoYW5nZSAocGFnZVNpemUpIHtcbiAgICAgIHRoaXMucGFnZVNpemUgPSBwYWdlU2l6ZVxuICAgICAgdGhpcy5zZWFyY2hDaGFubmVsKClcbiAgICB9LFxuICAgIGhhbmRsZUN1cnJlbnRDaGFuZ2UgKHBhZ2VJbmRleCkge1xuICAgICAgdGhpcy5wYWdlTm8gPSBwYWdlSW5kZXhcbiAgICAgIHRoaXMuZ2V0Q2hhbm5lbExpc3QoKVxuICAgIH0sXG4gICAgdG9nZ2xlQWxsU2VsZWN0aW9uIChlKSB7XG4gICAgICB0aGlzLiRyZWZzLmNoYW5uZWxUYWJsZS50b2dnbGVBbGxTZWxlY3Rpb24oKVxuICAgIH0sXG4gICAgLyoqIOWNleWFg+agvOiiq+eCueWHuyAqKi9cbiAgICBjZWxsQ2xpY2sgKHJvdywgY29sdW1uLCBjZWxsLCBldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCdzb3J0LWNvbnRhaW5lclwnKSkge1xuICAgICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgICAgbGV0IGlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuaWRcbiAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xpY2tDZWxsSW5kZXggPSBwYXJzZUludChpZClcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGlucHV0RWxlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCcuZWwtdG9vbHRpcCA+IGlucHV0LnNlbGYtc29ydFwnKVxuICAgICAgICAgICAgaW5wdXRFbGVzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RDaGFubmVsSWQgPSByb3cuY2hhbm5lbGlkXG4gICAgICAgICAgICAgICAgZWxlbWVudC5mb2N1cygpXG4gICAgICAgICAgICAgICAgZWxlbWVudC5vbmtleXVwID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc29ydFZhbHVlID0gcGFyc2VJbnQoZWxlbWVudC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwn5ZCv55So54q25oCB5LiL5LiN6IO95o6S5bqPIVwnXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOemu+W8gOWNleWFg+agvCAqKi9cbiAgICBjZWxsTW91c2VMZWF2ZSAocm93LCBjb2x1bW4sIGNlbGwsIGV2ZW50KSB7XG4gICAgICAvKiog6YeN572u5Y2V5YWD5qC854q25oCBICoqL1xuICAgICAgdGhpcy5jbGlja0NlbGxJbmRleCA9IC0xXG4gICAgICBpZiAodGhpcy5zb3J0VmFsdWUgPT09IC0xIHx8IHRoaXMuc2VsZWN0Q2hhbm5lbElkICE9PSByb3cuY2hhbm5lbGlkKSByZXR1cm4gZmFsc2VcbiAgICAgIC8qKiDkv67mlLnmjpLluo8gKiovXG4gICAgICBBY3Rpb25zLmNoYW5nZUNoYW5uZWxTb3J0KHtcbiAgICAgICAgXCdjaGFubmVsXCc6IHtcbiAgICAgICAgICBcJ2NoYW5uZWxpZFwnOiByb3cuY2hhbm5lbGlkLFxuICAgICAgICAgIFwnc29ydFwnOiB0aGlzLnNvcnRWYWx1ZVxuICAgICAgICB9XG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLmdldENoYW5uZWxMaXN0KClcbiAgICAgICAgICB0aGlzLnNvcnRWYWx1ZSA9IC0xXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog57yW6L6R5pe26I635Y+W5Y2V5YWD5qC85pWw5o2uICoqL1xuICAgIGhhbmRsZUVkaXQ6IGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcJ2NoYW5uZWxpZFwnLCByb3cuY2hhbm5lbGlkKVxuICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7cGF0aDogXCcvc3ViQ2hhbm5lbC9lZGl0XCcsIHF1ZXJ5OiB7XCdwYWdlTm9cJzogdGhpcy5wYWdlTm99fSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+WQr+eUqOeKtuaAgeS4i+S4jeWPr+e8lui+kSFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOS/ruaUueeKtuaAgSAqKi9cbiAgICBjaGFuZ2VTdGF0ZSAocm93KSB7XG4gICAgICBsZXQgc3RhdGUgPSAwXG4gICAgICBpZiAocm93LnN0YXRlID09PSAxKSB7XG4gICAgICAgIHN0YXRlID0gMFxuICAgICAgfSBlbHNlIGlmIChyb3cuc3RhdGUgPT09IDApIHtcbiAgICAgICAgc3RhdGUgPSAxXG4gICAgICB9XG4gICAgICBBY3Rpb25zLmNoYW5nZUNoYW5uZWxTdGF0ZSh7XG4gICAgICAgIFwnY2hhbm5lbFwnOiB7XG4gICAgICAgICAgXCdjaGFubmVsaWRcJzogcm93LmNoYW5uZWxpZCxcbiAgICAgICAgICBcJ3N0YXRlXCc6IHN0YXRlXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+S/ruaUueeKtuaAgeS4uuWBnOeUqFwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCcsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IFwn5L+u5pS554q25oCB5Li65ZCv55SoXCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZ2V0Q2hhbm5lbExpc3QoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOWIoOmZpOmikemBkyAqKi9cbiAgICBoYW5kbGVEZWxldGUgKHJvdykge1xuICAgICAgaWYgKHJvdy5zdGF0ZSAhPT0gMSkge1xuICAgICAgICB0aGlzLiRjb25maXJtKFwn5piv5ZCm5Yig6ZmkIlwnICsgcm93LmNoYW5uZWxfbmFtZSArIFwnIj9cJywgXCfmj5DnpLpcJywge1xuICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcJ+ehruWumlwnLFxuICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwn5Y+W5raIXCcsXG4gICAgICAgICAgdHlwZTogXCd3YXJuaW5nXCdcbiAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgQWN0aW9ucy5kZWxldGVDaGFubmVsKHtcbiAgICAgICAgICAgIFwnY2hhbm5lbFwnOiB7XG4gICAgICAgICAgICAgIFwnY2hhbm5lbGlkXCc6IHJvdy5jaGFubmVsaWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCcsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCfliKDpmaTmiJDlip8hXCdcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ2V0Q2hhbm5lbExpc3QoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+WQr+eUqOeKtuaAgeS4i+S4jeWPr+WIoOmZpCFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOiOt+WPlumikemBk+exu+WIqyAqKi9cbiAgICBnZXRDaGFubmVsVHlwZSAoKSB7XG4gICAgICBBY3Rpb25zLmdldENoYW5uZWxUeXBlKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGFcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGxldCBuZXdJdGVtID0ge31cbiAgICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBpdGVtLmNoYW5uZWxfdHlwZV9uYW1lXG4gICAgICAgICAgICBuZXdJdGVtLnZhbHVlID0gaXRlbS5jaGFubmVsX3R5cGVpZFxuICAgICAgICAgICAgdGhpcy5jaGFubmVsVHlwZUxpc3QucHVzaChuZXdJdGVtKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog5pCc57Si6aKR6YGTICoqL1xuICAgIHNlYXJjaENoYW5uZWwgKCkge1xuICAgICAgdGhpcy5wYWdlTm8gPSAxXG4gICAgICB0aGlzLmdldENoYW5uZWxMaXN0KClcbiAgICB9LFxuICAgIC8qKiDojrflj5bniLbpopHpgZMgKiovXG4gICAgZ2V0UGFyZW50Q2hhbm5lbCAoKSB7XG4gICAgICBBY3Rpb25zLmxpc3RVc2FibGVQYXJlbnRDaGFubmVsKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGFcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGxldCBuZXdJdGVtID0ge31cbiAgICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBpdGVtLmNoYW5uZWxfbmFtZVxuICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uY2hhbm5lbGlkXG4gICAgICAgICAgICB0aGlzLnBhcmVudENoYW5uZWxMaXN0LnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlPlxuICAuc3ViLWNoYW5uZWwgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICB3aWR0aDogNjAlO1xuICB9XG4gIC5zdWItY2hhbm5lbCAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAyMCU7XG4gIH1cbjwvc3R5bGU+XG4nXSxzb3VyY2VSb290OiIifV0pfSxURDdGOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCI4Q3BHIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjc5MjI5YzBkIixhLCExLHt9KX0sVEZJbTpmdW5jdGlvbihlLG4pe30sVUV3NDpmdW5jdGlvbihlLG4pe2UuZXhwb3J0cz0iZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFEd0FBQUE4Q0FZQUFBQTYvTmx5QUFBQUdYUkZXSFJUYjJaMGQyRnlaUUJCWkc5aVpTQkpiV0ZuWlZKbFlXUjVjY2xsUEFBQUF5WnBWRmgwV0UxTU9tTnZiUzVoWkc5aVpTNTRiWEFBQUFBQUFEdy9lSEJoWTJ0bGRDQmlaV2RwYmowaTc3dS9JaUJwWkQwaVZ6Vk5NRTF3UTJWb2FVaDZjbVZUZWs1VVkzcHJZemxrSWo4K0lEeDRPbmh0Y0cxbGRHRWdlRzFzYm5NNmVEMGlZV1J2WW1VNmJuTTZiV1YwWVM4aUlIZzZlRzF3ZEdzOUlrRmtiMkpsSUZoTlVDQkRiM0psSURVdU5pMWpNRFkzSURjNUxqRTFOemMwTnl3Z01qQXhOUzh3TXk4ek1DMHlNem8wTURvME1pQWdJQ0FnSUNBZ0lqNGdQSEprWmpwU1JFWWdlRzFzYm5NNmNtUm1QU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh4T1RrNUx6QXlMekl5TFhKa1ppMXplVzUwWVhndGJuTWpJajRnUEhKa1pqcEVaWE5qY21sd2RHbHZiaUJ5WkdZNllXSnZkWFE5SWlJZ2VHMXNibk02ZUcxd1BTSm9kSFJ3T2k4dmJuTXVZV1J2WW1VdVkyOXRMM2hoY0M4eExqQXZJaUI0Yld4dWN6cDRiWEJOVFQwaWFIUjBjRG92TDI1ekxtRmtiMkpsTG1OdmJTOTRZWEF2TVM0d0wyMXRMeUlnZUcxc2JuTTZjM1JTWldZOUltaDBkSEE2THk5dWN5NWhaRzlpWlM1amIyMHZlR0Z3THpFdU1DOXpWSGx3WlM5U1pYTnZkWEpqWlZKbFppTWlJSGh0Y0RwRGNtVmhkRzl5Vkc5dmJEMGlRV1J2WW1VZ1VHaHZkRzl6YUc5d0lFTkRJREl3TVRVZ0tGZHBibVJ2ZDNNcElpQjRiWEJOVFRwSmJuTjBZVzVqWlVsRVBTSjRiWEF1YVdsa09qTTVOVUZETURoRE5URkJSakV4UlRjNU1FWkNRVVV5TWpJNU1qTXhNVGhGSWlCNGJYQk5UVHBFYjJOMWJXVnVkRWxFUFNKNGJYQXVaR2xrT2pNNU5VRkRNRGhFTlRGQlJqRXhSVGM1TUVaQ1FVVXlNakk1TWpNeE1UaEZJajRnUEhodGNFMU5Pa1JsY21sMlpXUkdjbTl0SUhOMFVtVm1PbWx1YzNSaGJtTmxTVVE5SW5odGNDNXBhV1E2TXprMVFVTXdPRUUxTVVGR01URkZOemt3UmtKQlJUSXlNamt5TXpFeE9FVWlJSE4wVW1WbU9tUnZZM1Z0Wlc1MFNVUTlJbmh0Y0M1a2FXUTZNemsxUVVNd09FSTFNVUZHTVRGRk56a3dSa0pCUlRJeU1qa3lNekV4T0VVaUx6NGdQQzl5WkdZNlJHVnpZM0pwY0hScGIyNCtJRHd2Y21SbU9sSkVSajRnUEM5NE9uaHRjRzFsZEdFK0lEdy9lSEJoWTJ0bGRDQmxibVE5SW5JaVB6NjZsWWJGQUFBRm0wbEVRVlI0MnR4YlhXd1ZSUlNldTJJc3BVRkZyRldSSDAxcUd6U1dGbDZBL2hBeFdoR1NOcElZcXc4bVZQeHArbUlhYlV4TlVCK1VScU5RVkt4dnBsRkR2SUpLcVlJUmk3NFlDbzNhMERRQkNraHNRRTBncGRVbXRIN0hlNjRkbHQyOVAyZG03OHBKdmd3cGQ4NmNiMmRuNXB3eloyUEtranpRT1RVSFRSVlFBWlFBeFVBUlVBRGs4OC9HZ0ZGZ0JCZ0NCb0Urb0xlbk1mYW5EYnRpaGtrdVFOTUExQVBsQXYxVHdDRWdEblNCL0luSUVBWkowbEVMdEFEVnBoOGlrLzhPYUFmMmdQeFV6Z2lEN0VOb1hnSEtWRGpTRDdTQjlKZWhFZ2JSUldnNmdBZFZicVFiYUFMeDQ5WUpnK3dHTkZ1QW1TcTNNZzQwZy9RSFZnaUQ2Q3cwMjNsVGlwSjBBUnRCL0lJeHdpQjdNNXJkd0JJVlRUa01yQUhwMzhTRVFYWWVtdjNBSFNyYWNoU29BZWxmc3liTU0zdmdmMEJXSjEwWk5OT3hGR3YyZ0tIWGVJeDFrUmRGVHNRRWNEV3dnRDJ4S3MzN012RjZWL3F0NlJrQkhiY2JJSHNFZUEzNE5HaFR3Y09sSGY5aDREbmdIdUdZUzlqMng5S2VZVDU2T29VeitnTHdEb2hlek9Ba2NORFEyRzhDczRURUc3Mk9ySmlQVXpFZ09HZHAwNmpGWUw4SVBMaFNkaTRXQ3MvcHhXN254UEg0WVllQTdHbGdwWVFzQ2ZyVFVxZ0VUZ3JVekdRdS9qUE12dkVYV1E1QUc5RnlHTnRuTVBxNkc4MlBRSjVBelZyZDk0NjVvcDVEZ2tDQW5QcFhMY1RWRklWdEZnWWM1Y2tvUzMrbGF3VmtLWUIvdzlMWitqWndTdEMvakxsZHRvWmJCRW83OEFUSGJiQ0YzZ2tPVmlUU2NnbGh6bFJVQ3hSK1pObURrdXF2Wm83L3pYQ0RJQmx3Q3JOd3pDWmI2S2ZkZjBpWTZHalFDZGNMbFAwVWtwODhJT3ovTDBlSHM0dmxBa1cvaDBUNGpMQi9PWEYxMkhHWDVMYW1RaUk4S2V4UEhLc2NqbFlrY2wxSWhHOHdvS09DQ0pjSWxaU0dSTGpFaEE0aVhDeFVjaWZXeGswMm1mSStjNWNCVmNWRXVNaUFvdldXWjdmZUo5REpWSXBJU1lFQlJjOXdMR3RqZG1temVkYVF1Z0xIVUdxRjF2RVRsbWIzVVdYdVppUGY1S3kwWXpibUc1N2RXOUM4WlZLbncra1lFM0k5c0JOR1htdUlMS1Y0ZGdGekRmSWRJOEtqQmhWU0FtMHZqQzAwc0N0L0RTdzF2RHhHSFk1bFRjb3lTaVRBNkh1ekpFdWVINlZhbDF2WUQwWWNZUlRpSjdjQysyQjhIRmlXSnRFSzRCT1Z1QXVlcit6SUVPV2xCeTJlbjNVRUVEbkNyMmd5RVg4ZW1NM0VhQWUrMzVCamtVb0daN0FSdHFVMFJCYzBTUHFJY0M5SFBDWktGVWpQUWVBYmJUYlBacWpqUmpWOUJiT2FXMU8yOWNaNC9Sd1VSazNuZ0cxQVowOWpiTmp3V2J3UVRTTjdXNUlqcncrMkxVMDZIbkhCVTZOazkrMVE5cUpwc3B6ZUdTYmROQVkvMUd6ajczZ3lLRTRtOFk1bitPcFFCdUlSR1BOdG1Jc1F0cTVDOHpGUW1PSEVMS0x5SnowUlQ0YlhwS21BN21GWDI1alJERjd6ZlNyOWUrdjlzSFdWY29WYzdXbDJwcVI0VGE3SUpsOXpucHgwRS9UdHVpK2RsRDBxY1MwUkpIOEI2MUtWRllSRW1teFl4ellGU1Q5enU1UXczNzIwcGVqY2l0LzFxNGdJMjlLYTRtZHRldldlNDFKQXQyemRQaDNwQ25TcmlwNXNaZHU4cE50ZHRlY1ZEemVweEdXeVd6WmxjcHNmNGl5VFRaczgvbXVjdWFoQXdueGozdXo2ODJuQldSMkd4TmxHWFpxOVNoTWRuNmRHdFJGZDJwL0lQY3lMTU9FOGx3dmI1VmVTR0pUaTJjaHhxZUtJWmdmT3YveW9NV1diZHFqcHZOZGh0dDFUTWkxTW8zL1g0ZW45RVJHeWRCdnhtVXJVZ3lRZG91d0swelNsN3RMRFlUNkxmODR4V2FyLytGeE5WL3JJU3c5ZE02MFhsMUtSMmZQQXV4aGdNbVNpdEF5ZkJsNVgwN1ZjNW9wTHRZRzh5b2UvQjU3Q1FBTWhrVjJNNWoxZ3BiNUJLZFBsdzY1QjNRWGk1TVY4Q0x5TVFZOWFJa3JMNlNYZ2NjMW11d1hpTGdPOFBnR1laQy90ZmZad0xncEpYc1g2bitSV1AxSEMrd1RBWlpUZlJ4NjBpKzhGdmdKK0FJNmxlZ0JNa0lMOEZTcVIxTHRQWFg0bm5KdVBQRnlHcHZNWno5OHFrUjJsY080OGcyUTI0emFWdVArOXhpZDRqOFpuUEI3a3Ivd1B0UUxJUi9KVHZIOEVHQUNBcmVWZkpDTjE5d0FBQUFCSlJVNUVya0pnZ2c9PSJ9LFVHVVQ6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi5jaWNsZS1jb250cm9sbGVyW2RhdGEtdi00YTJkNzE4Y10ge1xuICBtYXJnaW4tdG9wOiA0JTtcbn1cbi5zZWFyY2gtZm9ybS1jb250YWluZXJbZGF0YS12LTRhMmQ3MThjXSB7XG4gIHBhZGRpbmctbGVmdDogNS4yJTtcbn1cbi5kYXRlLWxlZnRbZGF0YS12LTRhMmQ3MThjXSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbGVmdDogNDVweDtcbn1cbi50YWJsZS1saXN0W2RhdGEtdi00YTJkNzE4Y10ge1xuICBtaW4taGVpZ2h0OiA0MDBweDtcbiAgcGFkZGluZzogMCAzLjIlIDAgMy4yJTtcbiAgbWFyZ2luLXRvcDogMzBweDtcbn1cbi53aG9sZS10YWJsZVtkYXRhLXYtNGEyZDcxOGNdIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjE4LCAyMjIsIDIyMywgMSk7XG4gIG1pbi1oZWlnaHQ6IDI1dnc7XG59XG4ucGFnaW5hdGlvbltkYXRhLXYtNGEyZDcxOGNdIHtcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICBkaXNwbGF5OiBmbGV4O1xuICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xuICAgICAgLW1zLWZsZXgtcGFjazoganVzdGlmeTtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIG1hcmdpbi10b3A6IDEwcHg7XG59XG4uYnRuLWNvbnRhaW5lcltkYXRhLXYtNGEyZDcxOGNdIHtcbiAgd2lkdGg6IDIzJSAhaW1wb3J0YW50O1xuICBmbG9hdDogcmlnaHQ7XG4gIG1hcmdpbi1yaWdodDogMjJweDtcbn1cbi5zZWxmLXNvcnRbZGF0YS12LTRhMmQ3MThjXXtcbiAgd2lkdGg6MzBweDtcbn1cbi5zb3J0LWNvbnRhaW5lcltkYXRhLXYtNGEyZDcxOGNde1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdpZHRoOjQzcHg7XG4gIGhlaWdodDogMzFweDtcbiAgYmFja2dyb3VuZDogcmdiYSgyNDYsIDI0NiwgMjQ2LCAxKTtcbiAgY29sb3I6cmdiYSgyNTUsIDE2NSwgNywgMSk7XG4gIGxpbmUtaGVpZ2h0OiAzMXB4O1xufVxuLnNob3ctc29ydFtkYXRhLXYtNGEyZDcxOGNde1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG4uaGlkZS1zb3J0W2RhdGEtdi00YTJkNzE4Y117XG4gIGRpc3BsYXk6IG5vbmU7XG59XG4ucGFnaW5hdGlvbltkYXRhLXYtNGEyZDcxOGNdIHtcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIC13ZWJraXQtYm94LXBhY2s6IGVuZDtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlU3RhcnRwYWdlL3NyYy9jb21wb25lbnRzL21hbmFnZVN0YXJ0cGFnZS9zdGFydHBhZ2VMaXN0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUFrWEE7RUFDQSxlQUFBO0NBQ0E7QUFDQTtFQUNBLG1CQUFBO0NBQ0E7QUFDQTtFQUNBLG1CQUFBO0VBQ0EsV0FBQTtDQUNBO0FBQ0E7RUFDQSxrQkFBQTtFQUNBLHVCQUFBO0VBQ0EsaUJBQUE7Q0FDQTtBQUNBO0VBQ0EsWUFBQTtFQUNBLHlDQUFBO0VBQ0EsaUJBQUE7Q0FDQTtBQUNBO0VBQ0EscUJBQUE7RUFBQSxxQkFBQTtFQUFBLGNBQUE7RUFDQSwwQkFBQTtNQUFBLHVCQUFBO1VBQUEsK0JBQUE7RUFDQSxpQkFBQTtDQUNBO0FBQ0E7RUFDQSxzQkFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtDQUNBO0FBQ0E7RUFDQSxXQUFBO0NBQ0E7QUFFQTtFQUNBLHNCQUFBO0VBQ0EsV0FBQTtFQUNBLGFBQUE7RUFDQSxtQ0FBQTtFQUNBLDJCQUFBO0VBQ0Esa0JBQUE7Q0FDQTtBQUNBO0VBQ0Esc0JBQUE7Q0FDQTtBQUNBO0VBQ0EsY0FBQTtDQUNBO0FBQ0E7RUFDQSxxQkFBQTtFQUNBLHNCQUFBO0NBQ0EiLGZpbGU6InN0YXJ0cGFnZUxpc3QudnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0ic3RhcnRwYWdlLWxpc3QiPlxuICAgIDxkaXY+XG4gICAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICAgIHRpdGxlLW5hbWU9IuW5v+WRiumhteeuoeeQhiJcbiAgICAgICAgY2xhc3M9ImNpY2xlLWNvbnRyb2xsZXIiXG4gICAgICAvPlxuICAgICAgPGRpdiBjbGFzcz0ic2VhcmNoLWZvcm0tY29udGFpbmVyIj5cbiAgICAgICAgPGVsLWZvcm1cbiAgICAgICAgICA6aW5saW5lPSJ0cnVlIlxuICAgICAgICAgIDptb2RlbD0iU3RhcnRwYWdlRm9ybSJcbiAgICAgICAgICBjbGFzcz0iZGVtby1mb3JtLWlubGluZSI+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9IueKtuaAgSJcbiAgICAgICAgICAgIGNsYXNzPSJzZWFyY2gtbGVmdCI+XG4gICAgICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgICAgIHYtbW9kZWw9IlN0YXJ0cGFnZUZvcm0uc3RhdGUiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSIiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaFN0YXJ0cGFnZSI+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICB2YWx1ZT0iIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlhajpg6giLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMCJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5b6F5LiK57q/Ii8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9IjEiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuS9v+eUqOS4rSIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPSIyIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlt7LkuIvnur8iLz5cbiAgICAgICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLlvIDlp4vml7bpl7QiXG4gICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IC03MHB4Ij5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9IlN0YXJ0cGFnZUZvcm0uc3RhcnREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9IlN0YXJ0cGFnZUZvcm0uc3RhcnREYXRlIlxuICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pel5pyfIlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hTdGFydHBhZ2UiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i57uT5p2f5pe26Ze0Ij5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9IlN0YXJ0cGFnZUZvcm0uZW5kRGF0ZSB8IEZvcm1hdERhdGUoXCd5eXl5LU1NLWRkIGhoOm1tXCcpIlxuICAgICAgICAgICAgICB2LW1vZGVsPSJTdGFydHBhZ2VGb3JtLmVuZERhdGUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLpgInmi6nml6XmnJ8iXG4gICAgICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaFN0YXJ0cGFnZSIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgICBAY2xpY2s9InNlYXJjaFN0YXJ0cGFnZSI+XG4gICAgICAgICAgICDmkJzntKJcbiAgICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCIvPlxuICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICAgIDxyb3V0ZXItbGluayB0bz0iL21hbmFnZVN0YXJ0cGFnZS9jcmVhdGUiPlxuICAgICAgICAgICAgPGVsLWJ1dHRvbiB0eXBlPSJwcmltYXJ5Ij5cbiAgICAgICAgICAgICAg5re75Yqg5ZCv5Yqo6aG1XG4gICAgICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLXBsdXMgZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICAgIDwvcm91dGVyLWxpbms+XG4gICAgICAgIDwvZWwtZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9InRhYmxlLWxpc3QiPlxuICAgICAgPGVsLXRhYmxlXG4gICAgICAgIHJlZj0ic2xpZGVUYWJsZSJcbiAgICAgICAgOmRhdGE9InRhYmxlRGF0YSJcbiAgICAgICAgc3RyaXBlXG4gICAgICAgIGNsYXNzPSJ3aG9sZS10YWJsZSJcbiAgICAgICAgbWluLWhlaWdodD0iNDAwIlxuICAgICAgICBAY2VsbC1jbGljaz0iY2VsbENsaWNrIlxuICAgICAgICBAY2VsbC1tb3VzZS1sZWF2ZT0iY2VsbE1vdXNlTGVhdmUiPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gdGFibGVIZWFkZXIiXG4gICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgOnByb3A9Iml0ZW0ucHJvcCJcbiAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiXG4gICAgICAgICAgOndpZHRoPSJpdGVtLndpZHRoIlxuICAgICAgICAgIDpmb3JtYXR0ZXI9Iml0ZW0uZm9ybWF0dGVyIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgZml4ZWRcbiAgICAgICAgICBzaG93LW92ZXJmbG93LXRvb2x0aXBcbiAgICAgICAgLz5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGZpeGVkPSJyaWdodCJcbiAgICAgICAgICBsYWJlbD0i5pON5L2cIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgd2lkdGg9IjEwMCI+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj5cbiAgICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgICAgdHlwZT0idGV4dCJcbiAgICAgICAgICAgICAgc2l6ZT0ic21hbGwiXG4gICAgICAgICAgICAgIGljb249ImVsLWljb24tZWRpdCJcbiAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVFZGl0KHNjb3BlLnJvdykiLz5cbiAgICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgICAgdHlwZT0idGV4dCJcbiAgICAgICAgICAgICAgc2l6ZT0ic21hbGwiXG4gICAgICAgICAgICAgIGljb249ImVsLWljb24tZGVsZXRlIlxuICAgICAgICAgICAgICBAY2xpY2s9ImhhbmRsZURlbGV0ZShzY29wZS5yb3cpIi8+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+XG4gICAgICA8L2VsLXRhYmxlPlxuICAgICAgPGRpdiBjbGFzcz0icGFnaW5hdGlvbiI+XG4gICAgICAgIDxlbC1wYWdpbmF0aW9uXG4gICAgICAgICAgOnRvdGFsPSJ0b3RhbCJcbiAgICAgICAgICA6cGFnZS1zaXplcz0iWzEwLCAyMCwgMzAsIDQwXSJcbiAgICAgICAgICA6Y3VycmVudC1wYWdlPSJwYWdlTm8iXG4gICAgICAgICAgYmFja2dyb3VuZFxuICAgICAgICAgIGxheW91dD0idG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dCJcbiAgICAgICAgICBAc2l6ZS1jaGFuZ2U9ImhhbmRsZVNpemVDaGFuZ2UiXG4gICAgICAgICAgQGN1cnJlbnQtY2hhbmdlPSJoYW5kbGVDdXJyZW50Q2hhbmdlIi8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCBDaXJjbGVUaXRsZSBmcm9tIFwnQC9jb21wb25lbnRzL2NvbW1vbnMvY2lyY2xlVGl0bGVcJ1xuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tIFwnQC9hcGkvc3RhcnRwYWdlQXBpXCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlXG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBTdGFydHBhZ2VGb3JtOiB7XG4gICAgICAgIHN0YXRlOiBcJ1wnLFxuICAgICAgICByZWdpb246IFwnXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJyxcbiAgICAgICAgc29ydDogXCcxXCdcbiAgICAgIH0sXG4gICAgICBjbGlja0NlbGxJbmRleDogLTEsXG4gICAgICBzb3J0VmFsdWU6IC0xLFxuICAgICAgcGFnZU5vOiAxLFxuICAgICAgcGFnZVNpemU6IDEwLFxuICAgICAgdG90YWw6IDAsXG4gICAgICB0YWJsZUhlYWRlcjogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdpbWdfdXJsXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5ZCv5Yqo6aG15Zu+54mHXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8aW1nIGNsYXNzPVwndG9waWMtdGFibGUtcGljXCcgc3JjPXtjZWxsVmFsdWV9Lz5cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3VwZGF0ZXRpbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfmm7TmlrDml6XmnJ9cJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10oY2VsbFZhbHVlLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3Jlc2lkZW5jZV90aW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn6am755WZ5pe26Ze0XCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnaW1nX3VybFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+WbvueJh+WcsOWdgFwnLFxuICAgICAgICAgIHdpZHRoOiBcJzEwMFwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2p1bXBfdXJsXCcsXG4gICAgICAgICAgbGFiZWw6IFwn6ZO+5o6l5Zyw5Z2AXCcsXG4gICAgICAgICAgd2lkdGg6IFwnMTAwXCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuXG4gICAgICAgICAgcHJvcDogXCdleHBpcnlfZGF0ZV9zdGFydFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+W8gOWni+aXpeacn1wnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnRm9ybWF0RGF0ZVwnXShjZWxsVmFsdWUsIFwneXl5eS1NTS1kZCBoaDptbVwnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnZXhwaXJ5X2RhdGVfZW5kXCcsXG4gICAgICAgICAgbGFiZWw6IFwn57uT5p2f5pel5pyfXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdzdGF0ZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+eKtuaAgVwnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAocGFyc2VJbnQoY2VsbFZhbHVlKSA9PT0gMSkge1xuICAgICAgICAgICAgICByZXR1cm4gXCfkvb/nlKjkuK1cJ1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZUludChjZWxsVmFsdWUpID09PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiBcJ+W+heS4iue6v1wnXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gXCflt7LkuIvnur9cJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnc29ydFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+aOkuW6j1wnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMuY2xpY2tDZWxsSW5kZXgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDxpbnB1dCB0eXBlPVwndGV4dFwnIGNsYXNzPVwnc2VsZi1zb3J0XCcgaWQ9e2luZGV4fSB2YWx1ZT0ge2NlbGxWYWx1ZX0gYXV0b2ZvY3VzPSJhdXRvZm9jdXMiIC8+XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gPHNwYW4gY2xhc3M9XCdzb3J0LWNvbnRhaW5lclwnIGRhdGEtaWQ9e2luZGV4fT57Y2VsbFZhbHVlfTwvc3Bhbj5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICB0YWJsZURhdGE6IFtdLFxuICAgICAgYmF0Y2hQcm9jZXNzOiAxLFxuICAgICAgcHJvY2Vzc0xpc3Q6IFtcbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlOiAxLFxuICAgICAgICAgIGxhYmVsOiBcJ+aJuemHj+aTjeS9nFwnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogMixcbiAgICAgICAgICBsYWJlbDogXCflhbbku5ZcJ1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgc2VsZWN0QWRJZDogXCdcJ1xuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgLyoqIOiOt+WPluWQr+WKqOmhteWIl+ihqCAqKi9cbiAgICB0aGlzLmdldFN0YXJ0cGFnZWxMaXN0KClcblxuICAgIHRoaXMuJHJvb3QuZXZlbnRIdWIuJG9uKFwncmVzZXQtb3B0aW9uc1wnLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlc2V0T3B0aW9ucygpXG4gICAgfSlcbiAgfSxcbiAgYWN0aXZhdGVkICgpIHtcbiAgICBsZXQgbWV0YSA9IHRoaXMuJHJvdXRlLm1ldGFcbiAgICBpZiAobWV0YS5oYXNPd25Qcm9wZXJ0eShcJ3JlZnJlc2hcJykgJiYgbWV0YS5yZWZyZXNoKSB7XG4gICAgICB0aGlzLmdldFN0YXJ0cGFnZWxMaXN0KClcbiAgICAgIGRlbGV0ZSB0aGlzLiRyb3V0ZS5tZXRhLnJlZnJlc2hcbiAgICB9XG4gIH0sXG4gIGJlZm9yZVJvdXRlTGVhdmUgKHRvLCBmcm9tLCBuZXh0KSB7XG4gICAgaWYgKHRvLnBhdGggPT09IFwnL21hbmFnZVN0YXJ0cGFnZS9jcmVhdGVcJykge1xuICAgICAgdGhpcy5yZXNldE9wdGlvbnMoKVxuICAgIH1cbiAgICBuZXh0KClcbiAgfSxcbiAgYmVmb3JlRGVzdHJveSAoKSB7XG4gICAgdGhpcy4kcm9vdC5ldmVudEh1Yi4kb2ZmKFwncmVzZXQtb3B0aW9uc1wnKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgcmVzZXRPcHRpb25zICgpIHtcbiAgICAgIHRoaXMuU3RhcnRwYWdlRm9ybSA9IHtcbiAgICAgICAgc3RhdGU6IFwnXCcsXG4gICAgICAgIHJlZ2lvbjogXCdcJyxcbiAgICAgICAgc3RhcnREYXRlOiBcJ1wnLFxuICAgICAgICBlbmREYXRlOiBcJ1wnLFxuICAgICAgICBzb3J0OiBcJzFcJ1xuICAgICAgfVxuICAgICAgdGhpcy5wYWdlTm8gPSAxXG4gICAgICB0aGlzLmdldFN0YXJ0cGFnZWxMaXN0KClcbiAgICB9LFxuICAgIC8qKiDliIbpobXojrflj5blkK/liqjpobXliJfooaggKiovXG4gICAgZ2V0U3RhcnRwYWdlbExpc3QgKCkge1xuICAgICAgbGV0IHRpbWVTdGFydCA9IHRoaXMuU3RhcnRwYWdlRm9ybS5zdGFydERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLlN0YXJ0cGFnZUZvcm0uc3RhcnREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBsZXQgdGltZUVuZCA9IHRoaXMuU3RhcnRwYWdlRm9ybS5lbmREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5TdGFydHBhZ2VGb3JtLmVuZERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIGxldCBvcHRpb24gPSB7XG4gICAgICAgIFwncGFnZU5vXCc6IHRoaXMucGFnZU5vLFxuICAgICAgICBcJ3BhZ2VTaXplXCc6IHRoaXMucGFnZVNpemUsXG4gICAgICAgIFwnc3RhdGVcJzogdGhpcy5TdGFydHBhZ2VGb3JtLnN0YXRlLFxuICAgICAgICBcJ3RpbWVTdGFydFwnOiB0aW1lU3RhcnQsXG4gICAgICAgIFwndGltZUVuZFwnOiB0aW1lRW5kXG4gICAgICB9XG4gICAgICBBY3Rpb25zLmdldFN0YXJ0cGFnZWxMaXN0KG9wdGlvbikudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGxpc3REYXRhID0gcmVzLmRhdGEucmVzdWx0Lmxpc3RcbiAgICAgICAgICB0aGlzLnRhYmxlRGF0YSA9IGxpc3REYXRhXG4gICAgICAgICAgdGhpcy50b3RhbCA9IGxpc3REYXRhLnRvdGFsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog5pCc57Si5ZCv5Yqo6aG1ICoqL1xuICAgIHNlYXJjaFN0YXJ0cGFnZSAoKSB7XG4gICAgICB0aGlzLnBhZ2VObyA9IDFcbiAgICAgIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ3N3YXBUaW1lXCddKHRoaXMuU3RhcnRwYWdlRm9ybSlcbiAgICAgIHRoaXMuZ2V0U3RhcnRwYWdlbExpc3QoKVxuICAgIH0sXG4gICAgLyoqIOWIoOmZpOWQr+WKqOmhtSAqKi9cbiAgICBoYW5kbGVEZWxldGUgKHJvdykge1xuICAgICAgdGhpcy4kY29uZmlybShcJ+aYr+WQpuWIoOmZpOivpeW5v+WRiumhtT9cJywgXCfmj5DnpLpcJywge1xuICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCfnoa7lrppcJyxcbiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCflj5bmtohcJyxcbiAgICAgICAgdHlwZTogXCd3YXJuaW5nXCdcbiAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICBBY3Rpb25zLmRlbGV0ZVN0YXJ0cGFnZSh7XG4gICAgICAgICAgXCdhcHBBZHZcJzoge1xuICAgICAgICAgICAgXCdhZGlkXCc6IHJvdy5hZGlkXG4gICAgICAgICAgfVxuICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpXG4gICAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+WIoOmZpOaIkOWKnyFcJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5nZXRTdGFydHBhZ2VsTGlzdCgpXG4gICAgICAgIH0pXG4gICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOe8lui+keaXtuiOt+WPluWNleWFg+agvOaVsOaNriAqKi9cbiAgICBoYW5kbGVFZGl0OiBmdW5jdGlvbiAocm93KSB7XG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwnYWRpZFwnLCByb3cuYWRpZClcbiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHtuYW1lOiBcJ3N0YXJ0cGFnZUVkaXRcJywgcGFyYW1zOiByb3d9KVxuICAgIH0sXG4gICAgaGFuZGxlU2l6ZUNoYW5nZSAocGFnZVNpemUpIHtcbiAgICAgIHRoaXMucGFnZVNpemUgPSBwYWdlU2l6ZVxuICAgICAgdGhpcy5zZWFyY2hTdGFydHBhZ2UoKVxuICAgIH0sXG4gICAgaGFuZGxlQ3VycmVudENoYW5nZSAocGFnZUluZGV4KSB7XG4gICAgICB0aGlzLnBhZ2VObyA9IHBhZ2VJbmRleFxuICAgICAgdGhpcy5nZXRTdGFydHBhZ2VsTGlzdCgpXG4gICAgfSxcbiAgICB0b2dnbGVBbGxTZWxlY3Rpb24gKGUpIHtcbiAgICAgIHRoaXMuJHJlZnMuc2xpZGVUYWJsZS50b2dnbGVBbGxTZWxlY3Rpb24oKVxuICAgIH0sXG4gICAgLyoqIOWNleWFg+agvOiiq+eCueWHuyAqKi9cbiAgICBjZWxsQ2xpY2sgKHJvdywgY29sdW1uLCBjZWxsLCBldmVudCkge1xuICAgICAgbGV0IGlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuaWRcbiAgICAgIGlmIChpZCkge1xuICAgICAgICB0aGlzLmNsaWNrQ2VsbEluZGV4ID0gcGFyc2VJbnQoaWQpXG4gICAgICB9XG4gICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIGxldCBpbnB1dEVsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwnLmVsLXRvb2x0aXAgPiBpbnB1dC5zZWxmLXNvcnRcJylcbiAgICAgICAgaW5wdXRFbGVzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0QWRJZCA9IHJvdy5hZGlkXG4gICAgICAgICAgICBlbGVtZW50LmZvY3VzKClcbiAgICAgICAgICAgIGVsZW1lbnQub25rZXl1cCA9IChlKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChlbGVtZW50LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zb3J0VmFsdWUgPSBwYXJzZUludChlbGVtZW50LnZhbHVlKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDnprvlvIDljZXlhYPmoLwgKiovXG4gICAgY2VsbE1vdXNlTGVhdmUgKHJvdywgY29sdW1uLCBjZWxsLCBldmVudCkge1xuICAgICAgLyoqIOmHjee9ruWNleWFg+agvOeKtuaAgSAqKi9cbiAgICAgIHRoaXMuY2xpY2tDZWxsSW5kZXggPSAtMVxuICAgICAgaWYgKHRoaXMuc29ydFZhbHVlID09PSAtMSB8fCB0aGlzLnNlbGVjdEFkSWQgIT09IHJvdy5hZGlkKSByZXR1cm4gZmFsc2VcbiAgICAgIC8qKiDkv67mlLnmjpLluo8gKiovXG4gICAgICBBY3Rpb25zLmNoYW5nZVN0YXJ0cGFnZVNvcnQoe1xuICAgICAgICBcJ2FwcEFkdlwnOiB7XG4gICAgICAgICAgXCdhZGlkXCc6IHJvdy5hZGlkLFxuICAgICAgICAgIFwnc29ydFwnOiB0aGlzLnNvcnRWYWx1ZVxuICAgICAgICB9XG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLmdldFN0YXJ0cGFnZWxMaXN0KClcbiAgICAgICAgICB0aGlzLnNvcnRWYWx1ZSA9IC0xXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5jaWNsZS1jb250cm9sbGVyIHtcbiAgICBtYXJnaW4tdG9wOiA0JTtcbiAgfVxuICAuc2VhcmNoLWZvcm0tY29udGFpbmVyIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDUuMiU7XG4gIH1cbiAgLmRhdGUtbGVmdCB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGxlZnQ6IDQ1cHg7XG4gIH1cbiAgLnRhYmxlLWxpc3Qge1xuICAgIG1pbi1oZWlnaHQ6IDQwMHB4O1xuICAgIHBhZGRpbmc6IDAgMy4yJSAwIDMuMiU7XG4gICAgbWFyZ2luLXRvcDogMzBweDtcbiAgfVxuICAud2hvbGUtdGFibGUge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjE4LCAyMjIsIDIyMywgMSk7XG4gICAgbWluLWhlaWdodDogMjV2dztcbiAgfVxuICAucGFnaW5hdGlvbiB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgfVxuICAuYnRuLWNvbnRhaW5lciB7XG4gICAgd2lkdGg6IDIzJSAhaW1wb3J0YW50O1xuICAgIGZsb2F0OiByaWdodDtcbiAgICBtYXJnaW4tcmlnaHQ6IDIycHg7XG4gIH1cbiAgLnNlbGYtc29ydHtcbiAgICB3aWR0aDozMHB4O1xuICB9XG5cbiAgLnNvcnQtY29udGFpbmVye1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB3aWR0aDo0M3B4O1xuICAgIGhlaWdodDogMzFweDtcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI0NiwgMjQ2LCAyNDYsIDEpO1xuICAgIGNvbG9yOnJnYmEoMjU1LCAxNjUsIDcsIDEpO1xuICAgIGxpbmUtaGVpZ2h0OiAzMXB4O1xuICB9XG4gIC5zaG93LXNvcnR7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB9XG4gIC5oaWRlLXNvcnR7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuICAucGFnaW5hdGlvbiB7XG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgLXdlYmtpdC1ib3gtcGFjazogZW5kO1xuICB9XG48L3N0eWxlPlxuPHN0eWxlPlxuICAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1yYW5nZS1lZGl0b3IgLmVsLXJhbmdlLWlucHV0e1xuICAgIHdpZHRoOjUwJTtcbiAgfVxuICAuc3RhcnRwYWdlLWxpc3QgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICB3aWR0aDogNjAlO1xuICB9XG4gIC5zdGFydHBhZ2UtbGlzdCAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAzMyU7XG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICB9XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sVUhnVTpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLmJhc2lzW2RhdGEtdi03MjQ3NDc0NF0ge1xuICBwYWRkaW5nOjAgMjhweCA0MHB4IDI4cHg7XG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcbn1cbi5iYXNpcyAuYXZhdGFyLXVwbG9hZGVyLWljb25bZGF0YS12LTcyNDc0NzQ0XSB7XG4gIGZvbnQtc2l6ZTogMjhweDtcbiAgY29sb3I6ICM4YzkzOWQ7XG4gIHdpZHRoOiA2MHB4O1xuICBoZWlnaHQ6IDYwcHg7XG4gIGxpbmUtaGVpZ2h0OiA2MHB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4uYmFzaXMgLnNhdmVbZGF0YS12LTcyNDc0NzQ0XSB7XG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgZGlzcGxheTogZmxleDtcbiAgbWFyZ2luLWxlZnQ6IDg1JTtcbn1cbi5iYXNpcyAuY2lyY2xlLXRpdGxlW2RhdGEtdi03MjQ3NDc0NF0ge1xuICBtYXJnaW4tbGVmdDogMDtcbn1cbi5iYXNpcyAubWVudVtkYXRhLXYtNzI0NzQ3NDRdIHtcbiAgcGFkZGluZzoxMHB4O1xuICBtYXJnaW4tdG9wOiA0MHB4O1xuICBib3JkZXI6MXB4IHNvbGlkICNEQURFREY7XG4gIGJvcmRlci1yYWRpdXM6IDVweDtcbn1cbi5iYXNpcyAubWVudSAubWVudS1ib3hbZGF0YS12LTcyNDc0NzQ0XSB7XG4gICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICAgZGlzcGxheTogZmxleDtcbiAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XG4gICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgIHBhZGRpbmc6IDAgMCAyMHB4IDQwcHg7XG4gICAtbXMtZmxleC13cmFwOiB3cmFwO1xuICAgICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgIG1hcmdpbi1sZWZ0OiAtMTMwcHg7XG59XG4uYmFzaXMgLm1lbnUgLm1lbnUtYm94IC5ib3gtbGVmdFtkYXRhLXYtNzI0NzQ3NDRdIHtcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICBkaXNwbGF5OiBmbGV4O1xuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xuICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiAwIDAgMjBweCAwO1xuICBtYXJnaW4tbGVmdDogMTMwcHg7XG59XG4uYmFzaXMgLmZyYW1lW2RhdGEtdi03MjQ3NDc0NF0ge1xuICBwYWRkaW5nOjEwcHg7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG4gIGJvcmRlcjoxcHggc29saWQgI0RBREVERjtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xufVxuLmJhc2lzIC5mcmFtZSAuZnJhbWUtYm94W2RhdGEtdi03MjQ3NDc0NF0ge1xuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XG4gICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIC1tcy1mbGV4LXdyYXA6IHdyYXA7XG4gICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gIHBhZGRpbmc6IDAgMCAyMHB4IDQwcHg7XG4gIG1hcmdpbi1sZWZ0OiAtMjYwcHg7XG59XG4uYmFzaXMgLmZyYW1lIC5mcmFtZS1ib3ggLmJveC1sZWZ0W2RhdGEtdi03MjQ3NDc0NF0ge1xuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XG4gICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHBhZGRpbmc6IDAgMCAyMHB4IDA7XG4gIG1hcmdpbi1sZWZ0OiAyNjBweDtcbn1cbi5iYXNpcyAuZnJhbWUgLmZyYW1lLWJveCAuYm94LWxlZnQgLmZyYW1ld29yay10aXRsZVtkYXRhLXYtNzI0NzQ3NDRdIHtcbiAgY29sb3I6ICMzMzM7XG4gIGZvbnQtc2l6ZTogMTRweDtcbn1cbi5mcmFtZS1ib3ggLmJveC1sZWZ0IC5pbWctYm94W2RhdGEtdi03MjQ3NDc0NF0ge1xuICBtYXJnaW4tbGVmdDogMjBweDtcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICBkaXNwbGF5OiBmbGV4O1xuICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xuICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcbiAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XG4gICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG4uYmFzaXMgLmNvbnRlbnRbZGF0YS12LTcyNDc0NzQ0XSB7XG4gIHBhZGRpbmc6MTBweDtcbiAgbWFyZ2luLXRvcDogNDBweDtcbiAgYm9yZGVyOjFweCBzb2xpZCAjREFERURGO1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG59XG4uYmFzaXMgLmNvbnRlbnQgLmNvbnRlbnQtYm94W2RhdGEtdi03MjQ3NDc0NF0ge1xuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XG4gICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHBhZGRpbmc6IDAgMCAyMHB4IDQwcHg7XG59XG4ubWVudS1ib3ggLmJveC1sZWZ0IC50aXRsZVtkYXRhLXYtNzI0NzQ3NDRdIHtcbiAgd2lkdGg6IDUwcHg7XG59XG4uYmFzaXMgLmJsb2NrW2RhdGEtdi03MjQ3NDc0NF0ge1xuICAgZGlzcGxheTogYmxvY2s7XG59XG4uYmFzaXMgLm5vbmVbZGF0YS12LTcyNDc0NzQ0XSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG4ubWVudS1ib3ggLmJveC1sZWZ0IC5pbnB1dC1ibG9ja1tkYXRhLXYtNzI0NzQ3NDRdIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGJvcmRlcjogMXB4IHNvbGlkICM0MDlFRkY7XG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBib3JkZXItcmFkaXVzOiAycHg7XG59XG4ubWVudS1ib3ggLmJveC1sZWZ0IC5pbnB1dC1ub25lW2RhdGEtdi03MjQ3NDc0NF0ge1xuICBkaXNwbGF5OiBub25lO1xuICBib3JkZXI6IG5vbmU7XG59XG4ubWVudS1ib3ggLmJveC1sZWZ0IC5pbnB1dFtkYXRhLXYtNzI0NzQ3NDRdIHtcbiAgd2lkdGg6IDUwcHg7XG59XG4ubWVudS1ib3ggLmF2YXRhci11cGxvYWRlcltkYXRhLXYtNzI0NzQ3NDRdIHtcbiAgd2lkdGg6IDYwcHg7XG4gIGhlaWdodDogNjBweDtcbn1cbi5tZW51LWJveCAuYm94LWxlZnQgLmltZy1ib3hbZGF0YS12LTcyNDc0NzQ0XSB7XG4gIG1hcmdpbi1yaWdodDogMjBweDtcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICBkaXNwbGF5OiBmbGV4O1xuICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xuICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcbiAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XG4gICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG4ubWVudS1ib3ggLmJveDEgLmltZy1ib3hbZGF0YS12LTcyNDc0NzQ0XSB7XG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xuICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbi5tZW51LWJveCAuaW1nLWJveCBzcGFuW2RhdGEtdi03MjQ3NDc0NF0ge1xuICBjb2xvcjogYmxhY2s7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgbWFyZ2luLXRvcDogOHB4O1xufVxuLmJhc2lzIC5lZGl0W2RhdGEtdi03MjQ3NDc0NF0ge1xuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gIGRpc3BsYXk6IGZsZXg7XG59XG4uaW1nLWF2YXRhcltkYXRhLXYtNzI0NzQ3NDRdIHtcbiAgd2lkdGg6IDYwcHg7XG4gIGhlaWdodDogNjBweDtcbiAgZGlzcGxheTogYmxvY2s7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZUJhc2lzL3NyYy9jb21wb25lbnRzL21hbmFnZUJhc2lzL2Jhc2lzQ29uZmlndXJhdGlvbi52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBb2hCQTtFQUNBLHlCQUFBO0VBQ0EsbUJBQUE7Q0FDQTtBQUNBO0VBQ0EsZ0JBQUE7RUFDQSxlQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxrQkFBQTtFQUNBLG1CQUFBO0NBQ0E7QUFDQTtFQUNBLHFCQUFBO0VBQUEscUJBQUE7RUFBQSxjQUFBO0VBQ0EsaUJBQUE7Q0FDQTtBQUNBO0VBQ0EsZUFBQTtDQUNBO0FBQ0E7RUFDQSxhQUFBO0VBQ0EsaUJBQUE7RUFDQSx5QkFBQTtFQUNBLG1CQUFBO0NBQ0E7QUFDQTtHQUNBLHFCQUFBO0dBQUEscUJBQUE7R0FBQSxjQUFBO0dBQ0EsMEJBQUE7T0FBQSx1QkFBQTtXQUFBLG9CQUFBO0dBQ0EsdUJBQUE7R0FDQSxvQkFBQTtPQUFBLGdCQUFBO0dBQ0Esb0JBQUE7Q0FDQTtBQUNBO0VBQ0EscUJBQUE7RUFBQSxxQkFBQTtFQUFBLGNBQUE7RUFDQSwwQkFBQTtNQUFBLHVCQUFBO1VBQUEsb0JBQUE7RUFDQSxvQkFBQTtFQUNBLG1CQUFBO0NBQ0E7QUFDQTtFQUNBLGFBQUE7RUFDQSxpQkFBQTtFQUNBLHlCQUFBO0VBQ0EsbUJBQUE7Q0FDQTtBQUNBO0VBQ0EscUJBQUE7RUFBQSxxQkFBQTtFQUFBLGNBQUE7RUFDQSwwQkFBQTtNQUFBLHVCQUFBO1VBQUEsb0JBQUE7RUFDQSxvQkFBQTtNQUFBLGdCQUFBO0VBQ0EsdUJBQUE7RUFDQSxvQkFBQTtDQUNBO0FBQ0E7RUFDQSxxQkFBQTtFQUFBLHFCQUFBO0VBQUEsY0FBQTtFQUNBLDBCQUFBO01BQUEsdUJBQUE7VUFBQSxvQkFBQTtFQUNBLG9CQUFBO0VBQ0EsbUJBQUE7Q0FDQTtBQUNBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0NBQ0E7QUFDQTtFQUNBLGtCQUFBO0VBQ0EscUJBQUE7RUFBQSxxQkFBQTtFQUFBLGNBQUE7RUFDQSw2QkFBQTtFQUFBLDhCQUFBO01BQUEsMkJBQUE7VUFBQSx1QkFBQTtFQUNBLDBCQUFBO01BQUEsdUJBQUE7VUFBQSxvQkFBQTtDQUNBO0FBQ0E7RUFDQSxhQUFBO0VBQ0EsaUJBQUE7RUFDQSx5QkFBQTtFQUNBLG1CQUFBO0NBQ0E7QUFDQTtFQUNBLHFCQUFBO0VBQUEscUJBQUE7RUFBQSxjQUFBO0VBQ0EsMEJBQUE7TUFBQSx1QkFBQTtVQUFBLG9CQUFBO0VBQ0EsdUJBQUE7Q0FDQTtBQUNBO0VBQ0EsWUFBQTtDQUNBO0FBQ0E7R0FDQSxlQUFBO0NBQ0E7QUFDQTtFQUNBLGNBQUE7Q0FDQTtBQUNBO0VBQ0EsZUFBQTtFQUNBLDBCQUFBO0VBQ0EsK0JBQUE7VUFBQSx1QkFBQTtFQUNBLG1CQUFBO0NBQ0E7QUFDQTtFQUNBLGNBQUE7RUFDQSxhQUFBO0NBQ0E7QUFDQTtFQUNBLFlBQUE7Q0FDQTtBQUNBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7Q0FDQTtBQUNBO0VBQ0EsbUJBQUE7RUFDQSxxQkFBQTtFQUFBLHFCQUFBO0VBQUEsY0FBQTtFQUNBLDZCQUFBO0VBQUEsOEJBQUE7TUFBQSwyQkFBQTtVQUFBLHVCQUFBO0VBQ0EsMEJBQUE7TUFBQSx1QkFBQTtVQUFBLG9CQUFBO0NBQ0E7QUFDQTtFQUNBLGtCQUFBO0VBQ0EscUJBQUE7RUFBQSxxQkFBQTtFQUFBLGNBQUE7RUFDQSw2QkFBQTtFQUFBLDhCQUFBO01BQUEsMkJBQUE7VUFBQSx1QkFBQTtFQUNBLDBCQUFBO01BQUEsdUJBQUE7VUFBQSxvQkFBQTtDQUNBO0FBQ0E7RUFDQSxhQUFBO0VBQ0EsZ0JBQUE7RUFDQSxnQkFBQTtDQUNBO0FBQ0E7RUFDQSxxQkFBQTtFQUFBLHFCQUFBO0VBQUEsY0FBQTtDQUNBO0FBQ0E7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLGVBQUE7Q0FDQSIsZmlsZToiYmFzaXNDb25maWd1cmF0aW9uLnZ1ZSIsc291cmNlc0NvbnRlbnQ6WyI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJiYXNpc1wiPlxuICAgIDxlbC1mb3JtXG4gICAgICByZWY9XCJlZGl0Rm9ybVwiXG4gICAgICA6bW9kZWw9XCJlZGl0Rm9ybVwiXG4gICAgICA6cnVsZXM9XCJydWxlc1wiXG4gICAgICBsYWJlbC13aWR0aD1cIjEwMHB4XCJcbiAgICAgIGNsYXNzPVwiZGVtby1ydWxlRm9ybVwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm1lbnVcIj5cbiAgICAgICAgPGNpcmNsZS10aXRsZVxuICAgICAgICAgIHRpdGxlLW5hbWU9XCLoj5zljZXphY3nva5cIlxuICAgICAgICAgIGNsYXNzPVwiY2lyY2xlLXRpdGxlXCIvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibWVudS1ib3hcIj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICB2LWZvcj1cIihpdGVtLGluZGV4KSBpbiBlZGl0Rm9ybS5tZW51bGlzdFwiXG4gICAgICAgICAgICA6a2V5PVwiaW5kZXhcIlxuICAgICAgICAgICAgY2xhc3M9XCJib3gtbGVmdFwiPlxuICAgICAgICAgICAgPGVsLWNoZWNrYm94XG4gICAgICAgICAgICAgIHYtbW9kZWw9XCJpdGVtLmlzdXNlXCJcbiAgICAgICAgICAgICAgOmRpc2FibGVkPVwiaXRlbS5kaXNhYmxlZFwiPlxuICAgICAgICAgICAgICA8ZGl2IDpjbGFzcz1cIlsndGl0bGUnLCBjb3VudEF1ZGl0V2FpdCA/ICdibG9jayc6ICdub25lJ11cIj4ge3sgaXRlbS5uYW1lIH19IDwvZGl2PlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICA6Y2xhc3M9XCJbJ2lucHV0JywgY291bnRBdWRpdFdhaXQgPyAnaW5wdXQtbm9uZSc6ICdpbnB1dC1ibG9jayddXCJcbiAgICAgICAgICAgICAgICB2LW1vZGVsPVwiaXRlbS5uYW1lXCJcbiAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XCJpdGVtLmRpc2FibGVkXCJcbiAgICAgICAgICAgICAgICBtaW5sZW5ndGg9XCIxXCJcbiAgICAgICAgICAgICAgICBtYXhsZW5ndGg9XCIzXCJcbiAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiPlxuICAgICAgICAgICAgPC9lbC1jaGVja2JveD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbWctYm94XCI+XG4gICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJ3aWR0aDogNjBweDtoZWlnaHQ6IDYwcHg7b3ZlcmZsb3c6IGhpZGRlblwiPlxuICAgICAgICAgICAgICAgIDxteS11cGxvYWRcbiAgICAgICAgICAgICAgICAgIDp1cGxvYWQtaXRlbT1cIml0ZW1cIlxuICAgICAgICAgICAgICAgICAgYWxpZ249XCJsZWZ0XCJcbiAgICAgICAgICAgICAgICAgIEBvcGVuLWRpYWxvZz1cIm9wZW5EaWFsb2dcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGVsLWRpYWxvZ1xuICAgICAgICAgICAgICAgICAgOnZpc2libGUuc3luYz1cImRpYWxvZ1Zpc2libGVcIj5cbiAgICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgICAgOnNyYz1cImRpYWxvZ0ltYWdlVXJsXCJcbiAgICAgICAgICAgICAgICAgICAgYWx0PVwiXCI+XG4gICAgICAgICAgICAgICAgPC9lbC1kaWFsb2c+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8c3Bhbj7pu5jorqTlm748L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbWctYm94XCI+XG4gICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJ3aWR0aDogNjBweDtoZWlnaHQ6IDYwcHg7b3ZlcmZsb3c6IGhpZGRlblwiPlxuICAgICAgICAgICAgICAgIDxteS11cGxvYWRcbiAgICAgICAgICAgICAgICAgIDp1cGxvYWQtaWQ9XCJpdGVtLmlkXCJcbiAgICAgICAgICAgICAgICAgIDp1cGxvYWQtaXRlbT1cIml0ZW1cIlxuICAgICAgICAgICAgICAgICAgYWxpZ249XCJyaWdodFwiXG4gICAgICAgICAgICAgICAgICBAb3Blbi1kaWFsb2c9XCJvcGVuRGlhbG9nXCIvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPHNwYW4+6YCJ5Lit5Zu+PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZWRpdFwiPlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIDpjbGFzcz1cIlsnJywgY291bnRBdWRpdFdhaXQgPyAnYmxvY2snOiAnbm9uZSddXCJcbiAgICAgICAgICAgIHN0eWxlPVwibWFyZ2luLWxlZnQ6IDkwJTtmb250LXNpemU6IDE0cHhcIlxuICAgICAgICAgICAgdHlwZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICAgIEBjbGljaz1cImVkaXQoKVwiPue8lui+kTwvZWwtYnV0dG9uPlxuICAgICAgICAgIDxkaXYgOmNsYXNzPVwiWydzYXZlJywgY291bnRBdWRpdFdhaXQgPyAnbm9uZSc6ICdibG9jayddXCI+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgc3R5bGU9XCJmb250LXNpemU6IDE0cHhcIlxuICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgICAgICBAY2xpY2s9XCJzdWJtaXRNZW51KCdlZGl0Rm9ybScpXCI+5L+d5a2YPC9lbC1idXR0b24+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9XCJpbmZvXCJcbiAgICAgICAgICAgICAgc3R5bGU9XCJmb250LXNpemU6IDE0cHhcIlxuICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgICAgICBAY2xpY2s9XCJjYW5jZWwoKVwiPuWPlua2iDwvZWwtYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImZyYW1lXCI+XG4gICAgICAgIDxjaXJjbGUtdGl0bGVcbiAgICAgICAgICB0aXRsZS1uYW1lPVwi5qGG5p625YaF5a65XCJcbiAgICAgICAgICBjbGFzcz1cImNpcmNsZS10aXRsZVwiLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZyYW1lLWJveFwiPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIHYtZm9yPVwiKGl0ZW0saW5kZXgpIGluIGZyYW1lTGlzdFwiXG4gICAgICAgICAgICA6a2V5PVwiaW5kZXhcIlxuICAgICAgICAgICAgY2xhc3M9XCJib3gtbGVmdFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZyYW1ld29yay10aXRsZVwiPnt7IGl0ZW0ubmFtZSB9fTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImltZy1ib3hcIj5cbiAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cIndpZHRoOiA2MHB4O2hlaWdodDogNjBweDtvdmVyZmxvdzogaGlkZGVuXCI+XG4gICAgICAgICAgICAgICAgPG15LXVwbG9hZFxuICAgICAgICAgICAgICAgICAgOnVwbG9hZC1pdGVtPVwiaXRlbVwiXG4gICAgICAgICAgICAgICAgICA6dXBsb2FkLXVybC5zeW5jPVwiaXRlbS51cmxcIlxuICAgICAgICAgICAgICAgICAgQG9wZW4tZGlhbG9nPVwib3BlbkRpYWxvZ1wiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmcmFtZS1ib3hcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiYm94LWxlZnRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmcmFtZXdvcmstdGl0bGVcIj7popHpgZPpgInkuK3popzoibI8L2Rpdj5cbiAgICAgICAgICAgIDxlbC1jb2xvci1waWNrZXJcbiAgICAgICAgICAgICAgdi1tb2RlbD1cImVkaXRGb3JtLmNoYW5uZWxfc2VsZWN0X2NvbG9yXCJcbiAgICAgICAgICAgICAgY2xhc3M9XCJpbWctYm94XCIvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImVkaXRcIj5cbiAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICBzdHlsZT1cIm1hcmdpbi1sZWZ0OiA5MCU7Zm9udC1zaXplOiAxNHB4XCJcbiAgICAgICAgICAgIHR5cGU9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgICAgICBAY2xpY2s9XCJzdWJtaXRGcmFtZSgnZWRpdEZvcm0nKVwiPuS/neWtmDwvZWwtYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImZyYW1lIGNvbnRlbnRcIj5cbiAgICAgICAgPGNpcmNsZS10aXRsZVxuICAgICAgICAgIHRpdGxlLW5hbWU9XCLlhoXlrrnmoIfor4ZcIlxuICAgICAgICAgIGNsYXNzPVwiY2lyY2xlLXRpdGxlXCIvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZnJhbWUtYm94XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJveC1sZWZ0XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZnJhbWV3b3JrLXRpdGxlXCI+5LiT6aKY5Zu+5qCH6aKc6ImyPC9kaXY+XG4gICAgICAgICAgICA8ZWwtY29sb3ItcGlja2VyXG4gICAgICAgICAgICAgIHYtbW9kZWw9XCJlZGl0Rm9ybS5zcGVjaWFsX2ljb25fY29sb3JcIlxuICAgICAgICAgICAgICBjbGFzcz1cImltZy1ib3hcIi8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJveC1sZWZ0XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZnJhbWV3b3JrLXRpdGxlXCI+572u6aG25Zu+5qCH6aKc6ImyPC9kaXY+XG4gICAgICAgICAgICA8ZWwtY29sb3ItcGlja2VyXG4gICAgICAgICAgICAgIHYtbW9kZWw9XCJlZGl0Rm9ybS50b3BfaWNvbl9jb2xvclwiXG4gICAgICAgICAgICAgIGNsYXNzPVwiaW1nLWJveFwiLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJlZGl0XCI+XG4gICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgc3R5bGU9XCJtYXJnaW4tbGVmdDogOTAlO2ZvbnQtc2l6ZTogMTRweFwiXG4gICAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgICAgQGNsaWNrPVwic3VibWl0Q29udGVudCgnZWRpdEZvcm0nKVwiPuS/neWtmDwvZWwtYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImZyYW1lIGxvZ2luUGFnZVwiPlxuICAgICAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICAgICAgdGl0bGUtbmFtZT1cIueZu+W9lemhtVwiXG4gICAgICAgICAgY2xhc3M9XCJjaXJjbGUtdGl0bGVcIi8+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmcmFtZS1ib3hcIj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICB2LWZvcj1cIihpdGVtLGluZGV4KSBpbiBsb2dpbkxpc3RcIlxuICAgICAgICAgICAgOmtleT1cImluZGV4XCJcbiAgICAgICAgICAgIGNsYXNzPVwiYm94LWxlZnRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmcmFtZXdvcmstdGl0bGVcIj57eyBpdGVtLm5hbWUgfX08L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbWctYm94XCI+XG4gICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJ3aWR0aDogNjBweDtoZWlnaHQ6IDYwcHg7b3ZlcmZsb3c6IGhpZGRlblwiPlxuICAgICAgICAgICAgICAgIDxteS11cGxvYWRcbiAgICAgICAgICAgICAgICAgIDp1cGxvYWQtaXRlbT1cIml0ZW1cIlxuICAgICAgICAgICAgICAgICAgOnVwbG9hZC11cmwuc3luYz1cIml0ZW0udXJsXCJcbiAgICAgICAgICAgICAgICAgIEBvcGVuLWRpYWxvZz1cIm9wZW5EaWFsb2dcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZWRpdFwiPlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIHN0eWxlPVwibWFyZ2luLWxlZnQ6IDkwJTtmb250LXNpemU6IDE0cHhcIlxuICAgICAgICAgICAgdHlwZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICAgIEBjbGljaz1cInN1Ym1pdExvZ2luKCdlZGl0Rm9ybScpXCI+5L+d5a2YPC9lbC1idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9lbC1mb3JtPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IENpcmNsZVRpdGxlIGZyb20gJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlJ1xuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tICdAL2FwaS9iYXNpc0FwaSdcbmltcG9ydCB1cGxvYWRIZWFkZXJzIGZyb20gJ0AvbWl4aW5zJ1xuaW1wb3J0IE15VXBsb2FkIGZyb20gJ0AvY29tcG9uZW50cy9jb21tb25zL215VXBsb2FkJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQ2lyY2xlVGl0bGUsXG4gICAgTXlVcGxvYWRcbiAgfSxcbiAgbWl4aW5zOiBbdXBsb2FkSGVhZGVyc10sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBlZGl0Rm9ybToge1xuICAgICAgICBjaGFubmVsX3NlbGVjdF9jb2xvcjogJ3JlZCcsXG4gICAgICAgIHNwZWNpYWxfaWNvbl9jb2xvcjogJ3JlZCcsXG4gICAgICAgIHRvcF9pY29uX2NvbG9yOiAncmVkJyxcbiAgICAgICAgbWVudWxpc3Q6IFtdLFxuICAgICAgICBkaXNhYmxlZDogdHJ1ZSxcbiAgICAgICAgZGF0YTogJydcbiAgICAgIH0sXG4gICAgICBmcmFtZUxpc3Q6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfpobbpg6jog4zmma8nLFxuICAgICAgICAgIHVybDogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfmiJHnmoTog4zmma8nLFxuICAgICAgICAgIHVybDogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfoh6rlrprkuYnlm77moIcnLFxuICAgICAgICAgIHVybDogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfmkJzntKLlm77moIcnLFxuICAgICAgICAgIHVybDogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfog4zmma9sb2dvJyxcbiAgICAgICAgICB1cmw6ICcnXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBsb2dpbkxpc3Q6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfnmbvlvZXog4zmma8nLFxuICAgICAgICAgIHVybDogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfnmbvlvZVsb2dvJyxcbiAgICAgICAgICB1cmw6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAn55m75b2V5oyJ6ZKuJyxcbiAgICAgICAgICB1cmw6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAn5rOo5YaM5oyJ6ZKuJyxcbiAgICAgICAgICB1cmw6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAn6LSm5Y+3aWNvbicsXG4gICAgICAgICAgdXJsOiAnJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ+WvhueggWljb24nLFxuICAgICAgICAgIHVybDogJydcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlLFxuICAgICAgZGlhbG9nSW1hZ2VVcmw6ICcnLFxuICAgICAgY291bnRBdWRpdFdhaXQ6IHRydWUsXG4gICAgICBydWxlczoge1xuICAgICAgICBoZWFkX2ltZzogW1xuICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICfor7fkuIrkvKDlm77niYcnLCB0cmlnZ2VyOiAnYmx1cicgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGdldFVwbG9hZFVybCAoKSB7XG4gICAgICByZXR1cm4gQWN0aW9ucy51cGxvYWRQaWN0dXJlKClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuZ2V0QmFzaXNCeUlEKClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldEJhc2lzQnlJRCAoKSB7XG4gICAgICBBY3Rpb25zLmdldEJhc2lzQnlJRCgpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgdGhpcy5lZGl0Rm9ybS5kYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKVxuICAgICAgICAgIGZvciAodmFyIGl0ZW0gaW4gZGF0YS5tZW51KSB7XG4gICAgICAgICAgICBkYXRhLm1lbnVbaXRlbV0uZGlzYWJsZWQgPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZWRpdEZvcm0ubWVudWxpc3QgPSBkYXRhLm1lbnVcbiAgICAgICAgICB0aGlzLiRzZXQodGhpcy5mcmFtZUxpc3RbMF0sICd1cmwnLCBkYXRhLmZyYW1lLnRvcF9iZ191cmwpXG4gICAgICAgICAgdGhpcy4kc2V0KHRoaXMuZnJhbWVMaXN0WzFdLCAndXJsJywgZGF0YS5mcmFtZS5jZW50ZXJfYmdfdXJsKVxuICAgICAgICAgIHRoaXMuJHNldCh0aGlzLmZyYW1lTGlzdFsyXSwgJ3VybCcsIGRhdGEuZnJhbWUuaWNvbl9zZWxlY3RfdXJsKVxuICAgICAgICAgIHRoaXMuJHNldCh0aGlzLmZyYW1lTGlzdFszXSwgJ3VybCcsIGRhdGEuZnJhbWUuc2VhcmNoX2ljb24pXG4gICAgICAgICAgdGhpcy4kc2V0KHRoaXMuZnJhbWVMaXN0WzRdLCAndXJsJywgZGF0YS5mcmFtZS5iZ19sb2dvX3VybClcbiAgICAgICAgICB0aGlzLiRzZXQodGhpcy5sb2dpbkxpc3RbMF0sICd1cmwnLCBkYXRhLmxvZ2luUGFnZS5sb2dpbl9iZ191cmwpXG4gICAgICAgICAgdGhpcy4kc2V0KHRoaXMubG9naW5MaXN0WzFdLCAndXJsJywgZGF0YS5sb2dpblBhZ2UubG9naW5fbG9nb191cmwpXG4gICAgICAgICAgdGhpcy4kc2V0KHRoaXMubG9naW5MaXN0WzJdLCAndXJsJywgZGF0YS5sb2dpblBhZ2UubG9naW5fYnRuX3VybClcbiAgICAgICAgICB0aGlzLiRzZXQodGhpcy5sb2dpbkxpc3RbM10sICd1cmwnLCBkYXRhLmxvZ2luUGFnZS5yZWdpc3Rlcl9idG5fdXJsKVxuICAgICAgICAgIHRoaXMuJHNldCh0aGlzLmxvZ2luTGlzdFs0XSwgJ3VybCcsIGRhdGEubG9naW5QYWdlLnVzZXJuYW1lX2ljb24pXG4gICAgICAgICAgdGhpcy4kc2V0KHRoaXMubG9naW5MaXN0WzVdLCAndXJsJywgZGF0YS5sb2dpblBhZ2UucGFzc3dvcmRfaWNvbilcbiAgICAgICAgICB0aGlzLmVkaXRGb3JtLmNoYW5uZWxfc2VsZWN0X2NvbG9yID0gZGF0YS5mcmFtZS5jaGFubmVsX3NlbGVjdF9jb2xvclxuICAgICAgICAgIHRoaXMuZWRpdEZvcm0uc3BlY2lhbF9pY29uX2NvbG9yID0gZGF0YS5jb250ZW50LnNwZWNpYWxfaWNvbl9jb2xvclxuICAgICAgICAgIHRoaXMuZWRpdEZvcm0udG9wX2ljb25fY29sb3IgPSBkYXRhLmNvbnRlbnQudG9wX2ljb25fY29sb3JcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGVkaXQgKCkge1xuICAgICAgZm9yICh2YXIgaXRlbSBpbiB0aGlzLmVkaXRGb3JtLmRhdGEubWVudSkge1xuICAgICAgICBpZiAoaXRlbSAhPT0gJ3BlcnNvbmFsQ2VudGVyJykge1xuICAgICAgICAgIHRoaXMuZWRpdEZvcm0uZGF0YS5tZW51W2l0ZW1dLmRpc2FibGVkID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IGRlbGV0ZUJ0bkxpc3QgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51IC5lbC11cGxvYWQtbGlzdF9faXRlbS1kZWxldGUnKSlcbiAgICAgIGRlbGV0ZUJ0bkxpc3QuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jaydcbiAgICAgIH0pXG4gICAgICB0aGlzLmNvdW50QXVkaXRXYWl0ID0gZmFsc2VcbiAgICB9LFxuICAgIGNhbmNlbCAoKSB7XG4gICAgICBsZXQgZGVsZXRlQnRuTGlzdCA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1lbnUgLmVsLXVwbG9hZC1saXN0X19pdGVtLWRlbGV0ZScpKVxuICAgICAgZGVsZXRlQnRuTGlzdC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgIH0pXG4gICAgICB0aGlzLmNvdW50QXVkaXRXYWl0ID0gdHJ1ZVxuICAgICAgdGhpcy5nZXRCYXNpc0J5SUQoKVxuICAgIH0sXG4gICAgb3BlbkRpYWxvZyAoZGF0YTEpIHtcbiAgICAgIHRoaXMuZGlhbG9nSW1hZ2VVcmwgPSBkYXRhMVxuICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gdHJ1ZVxuICAgIH0sXG4gICAgc3VibWl0TWVudSAoZm9ybU5hbWUpIHtcbiAgICAgIHRoaXMuJHJlZnNbZm9ybU5hbWVdLnZhbGlkYXRlKCh2YWxpZCkgPT4ge1xuICAgICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgICBsZXQgbWVudSA9IHtcbiAgICAgICAgICAgICduZXdzJzoge1xuICAgICAgICAgICAgICAnaXN1c2UnOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0Lm5ld3MuaXN1c2UsXG4gICAgICAgICAgICAgICduYW1lJzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5uZXdzLm5hbWUsXG4gICAgICAgICAgICAgICdpY29uJzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5uZXdzLmljb24sXG4gICAgICAgICAgICAgICdpY29uX3NlbGVjdCc6IHRoaXMuZWRpdEZvcm0ubWVudWxpc3QubmV3cy5pY29uX3NlbGVjdFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdvbkRlbWFuZCc6IHtcbiAgICAgICAgICAgICAgJ2lzdXNlJzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5vbkRlbWFuZC5pc3VzZSxcbiAgICAgICAgICAgICAgJ25hbWUnOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0Lm9uRGVtYW5kLm5hbWUsXG4gICAgICAgICAgICAgICdpY29uJzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5vbkRlbWFuZC5pY29uLFxuICAgICAgICAgICAgICAnaWNvbl9zZWxlY3QnOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0Lm9uRGVtYW5kLmljb25fc2VsZWN0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2xpdmVCcm9hZGNhc3QnOiB7XG4gICAgICAgICAgICAgICdpc3VzZSc6IHRoaXMuZWRpdEZvcm0ubWVudWxpc3QubGl2ZUJyb2FkY2FzdC5pc3VzZSxcbiAgICAgICAgICAgICAgJ25hbWUnOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0LmxpdmVCcm9hZGNhc3QubmFtZSxcbiAgICAgICAgICAgICAgJ2ljb24nOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0LmxpdmVCcm9hZGNhc3QuaWNvbixcbiAgICAgICAgICAgICAgJ2ljb25fc2VsZWN0JzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5saXZlQnJvYWRjYXN0Lmljb25fc2VsZWN0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ3NlcnZpY2UnOiB7XG4gICAgICAgICAgICAgICdpc3VzZSc6IHRoaXMuZWRpdEZvcm0ubWVudWxpc3Quc2VydmljZS5pc3VzZSxcbiAgICAgICAgICAgICAgJ25hbWUnOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0LnNlcnZpY2UubmFtZSxcbiAgICAgICAgICAgICAgJ2ljb24nOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0LnNlcnZpY2UuaWNvbixcbiAgICAgICAgICAgICAgJ2ljb25fc2VsZWN0JzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5zZXJ2aWNlLmljb25fc2VsZWN0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2VfY29tbWVyY2UnOiB7XG4gICAgICAgICAgICAgICdpc3VzZSc6IHRoaXMuZWRpdEZvcm0ubWVudWxpc3QuZV9jb21tZXJjZS5pc3VzZSxcbiAgICAgICAgICAgICAgJ25hbWUnOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0LmVfY29tbWVyY2UubmFtZSxcbiAgICAgICAgICAgICAgJ2ljb24nOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0LmVfY29tbWVyY2UuaWNvbixcbiAgICAgICAgICAgICAgJ2ljb25fc2VsZWN0JzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5lX2NvbW1lcmNlLmljb25fc2VsZWN0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2ludGVyYWN0aW9uJzoge1xuICAgICAgICAgICAgICAnaXN1c2UnOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0LmludGVyYWN0aW9uLmlzdXNlLFxuICAgICAgICAgICAgICAnbmFtZSc6IHRoaXMuZWRpdEZvcm0ubWVudWxpc3QuaW50ZXJhY3Rpb24ubmFtZSxcbiAgICAgICAgICAgICAgJ2ljb24nOiB0aGlzLmVkaXRGb3JtLm1lbnVsaXN0LmludGVyYWN0aW9uLmljb24sXG4gICAgICAgICAgICAgICdpY29uX3NlbGVjdCc6IHRoaXMuZWRpdEZvcm0ubWVudWxpc3QuaW50ZXJhY3Rpb24uaWNvbl9zZWxlY3RcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAncGVyc29uYWxDZW50ZXInOiB7XG4gICAgICAgICAgICAgICdpc3VzZSc6IHRoaXMuZWRpdEZvcm0ubWVudWxpc3QucGVyc29uYWxDZW50ZXIuaXN1c2UsXG4gICAgICAgICAgICAgICduYW1lJzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5wZXJzb25hbENlbnRlci5uYW1lLFxuICAgICAgICAgICAgICAnaWNvbic6IHRoaXMuZWRpdEZvcm0ubWVudWxpc3QucGVyc29uYWxDZW50ZXIuaWNvbixcbiAgICAgICAgICAgICAgJ2ljb25fc2VsZWN0JzogdGhpcy5lZGl0Rm9ybS5tZW51bGlzdC5wZXJzb25hbENlbnRlci5pY29uX3NlbGVjdFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBBY3Rpb25zLnNhdmVCYXNpcyh7XG4gICAgICAgICAgICAnY29uZmlndXJhdGlvbic6IHtcbiAgICAgICAgICAgICAgJ3VwZGF0ZUNvbmZpZ3VyYXRpb24nOiAnbWVudScsXG4gICAgICAgICAgICAgICdtZW51JzogbWVudVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICBsZXQgZGVsZXRlQnRuTGlzdCA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1lbnUgLmVsLXVwbG9hZC1saXN0X19pdGVtLWRlbGV0ZScpKVxuICAgICAgICAgICAgICBkZWxldGVCdG5MaXN0LmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIHRoaXMuZ2V0QmFzaXNCeUlEKClcbiAgICAgICAgICAgICAgdGhpcy5jb3VudEF1ZGl0V2FpdCA9IHRydWVcbiAgICAgICAgICAgICAgdGhpcy4kbm90aWZ5KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+mAmuefpScsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ+abtOaUueaIkOWKnycsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3Igc3VibWl0ISEnKVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgc3VibWl0RnJhbWUgKGZvcm1OYW1lKSB7XG4gICAgICB0aGlzLiRyZWZzW2Zvcm1OYW1lXS52YWxpZGF0ZSgodmFsaWQpID0+IHtcbiAgICAgICAgaWYgKHZhbGlkKSB7XG4gICAgICAgICAgQWN0aW9ucy5zYXZlQmFzaXMoe1xuICAgICAgICAgICAgJ2NvbmZpZ3VyYXRpb24nOiB7XG4gICAgICAgICAgICAgICd1cGRhdGVDb25maWd1cmF0aW9uJzogJ2ZyYW1lJyxcbiAgICAgICAgICAgICAgJ2ZyYW1lJzoge1xuICAgICAgICAgICAgICAgICd0b3BfYmdfdXJsJzogdGhpcy5mcmFtZUxpc3RbMF0udXJsLFxuICAgICAgICAgICAgICAgICdjZW50ZXJfYmdfdXJsJzogdGhpcy5mcmFtZUxpc3RbMV0udXJsLFxuICAgICAgICAgICAgICAgICdpY29uX3NlbGVjdF91cmwnOiB0aGlzLmZyYW1lTGlzdFsyXS51cmwsXG4gICAgICAgICAgICAgICAgJ3NlYXJjaF9pY29uJzogdGhpcy5mcmFtZUxpc3RbM10udXJsLFxuICAgICAgICAgICAgICAgICdiZ19sb2dvX3VybCc6IHRoaXMuZnJhbWVMaXN0WzRdLnVybCxcbiAgICAgICAgICAgICAgICAnY2hhbm5lbF9zZWxlY3RfY29sb3InOiB0aGlzLmVkaXRGb3JtLmNoYW5uZWxfc2VsZWN0X2NvbG9yXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgQWN0aW9ucy5nZXRCYXNpc0J5SUQoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMuZnJhbWVMaXN0WzBdLCAndXJsJywgZGF0YS5mcmFtZS50b3BfYmdfdXJsKVxuICAgICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMuZnJhbWVMaXN0WzFdLCAndXJsJywgZGF0YS5mcmFtZS5jZW50ZXJfYmdfdXJsKVxuICAgICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMuZnJhbWVMaXN0WzJdLCAndXJsJywgZGF0YS5mcmFtZS5pY29uX3NlbGVjdF91cmwpXG4gICAgICAgICAgICAgICAgICB0aGlzLiRzZXQodGhpcy5mcmFtZUxpc3RbM10sICd1cmwnLCBkYXRhLmZyYW1lLnNlYXJjaF9pY29uKVxuICAgICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMuZnJhbWVMaXN0WzRdLCAndXJsJywgZGF0YS5mcmFtZS5iZ19sb2dvX3VybClcbiAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdEZvcm0uY2hhbm5lbF9zZWxlY3RfY29sb3IgPSBkYXRhLmZyYW1lLmNoYW5uZWxfc2VsZWN0X2NvbG9yXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB0aGlzLiRub3RpZnkoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiAn6YCa55+lJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAn5pu05pS55oiQ5YqfJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcydcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBzdWJtaXQhIScpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBzdWJtaXRDb250ZW50IChmb3JtTmFtZSkge1xuICAgICAgdGhpcy4kcmVmc1tmb3JtTmFtZV0udmFsaWRhdGUoKHZhbGlkKSA9PiB7XG4gICAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICAgIEFjdGlvbnMuc2F2ZUJhc2lzKHtcbiAgICAgICAgICAgICdjb25maWd1cmF0aW9uJzoge1xuICAgICAgICAgICAgICAndXBkYXRlQ29uZmlndXJhdGlvbic6ICdjb250ZW50JyxcbiAgICAgICAgICAgICAgJ2NvbnRlbnQnOiB7XG4gICAgICAgICAgICAgICAgJ3NwZWNpYWxfaWNvbl9jb2xvcic6IHRoaXMuZWRpdEZvcm0uc3BlY2lhbF9pY29uX2NvbG9yLFxuICAgICAgICAgICAgICAgICd0b3BfaWNvbl9jb2xvcic6IHRoaXMuZWRpdEZvcm0udG9wX2ljb25fY29sb3JcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICBBY3Rpb25zLmdldEJhc2lzQnlJRCgpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgICAgICAgICB0aGlzLmVkaXRGb3JtLnNwZWNpYWxfaWNvbl9jb2xvciA9IGRhdGEuY29udGVudC5zcGVjaWFsX2ljb25fY29sb3JcbiAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdEZvcm0udG9wX2ljb25fY29sb3IgPSBkYXRhLmNvbnRlbnQudG9wX2ljb25fY29sb3JcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIHRoaXMuJG5vdGlmeSh7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICfpgJrnn6UnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICfmm7TmlLnmiJDlip8nLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yIHN1Ym1pdCEhJylcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIHN1Ym1pdExvZ2luIChmb3JtTmFtZSkge1xuICAgICAgdGhpcy4kcmVmc1tmb3JtTmFtZV0udmFsaWRhdGUoKHZhbGlkKSA9PiB7XG4gICAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICAgIEFjdGlvbnMuc2F2ZUJhc2lzKHtcbiAgICAgICAgICAgICdjb25maWd1cmF0aW9uJzoge1xuICAgICAgICAgICAgICAndXBkYXRlQ29uZmlndXJhdGlvbic6ICdsb2dpblBhZ2UnLFxuICAgICAgICAgICAgICAnbG9naW5QYWdlJzoge1xuICAgICAgICAgICAgICAgICdsb2dpbl9iZ191cmwnOiB0aGlzLmxvZ2luTGlzdFswXS51cmwsXG4gICAgICAgICAgICAgICAgJ2xvZ2luX2xvZ29fdXJsJzogdGhpcy5sb2dpbkxpc3RbMV0udXJsLFxuICAgICAgICAgICAgICAgICdsb2dpbl9idG5fdXJsJzogdGhpcy5sb2dpbkxpc3RbMl0udXJsLFxuICAgICAgICAgICAgICAgICdyZWdpc3Rlcl9idG5fdXJsJzogdGhpcy5sb2dpbkxpc3RbM10udXJsLFxuICAgICAgICAgICAgICAgICd1c2VybmFtZV9pY29uJzogdGhpcy5sb2dpbkxpc3RbNF0udXJsLFxuICAgICAgICAgICAgICAgICdwYXNzd29yZF9pY29uJzogdGhpcy5sb2dpbkxpc3RbNV0udXJsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgQWN0aW9ucy5nZXRCYXNpc0J5SUQoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMubG9naW5MaXN0WzBdLCAndXJsJywgZGF0YS5sb2dpblBhZ2UubG9naW5fYmdfdXJsKVxuICAgICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMubG9naW5MaXN0WzFdLCAndXJsJywgZGF0YS5sb2dpblBhZ2UubG9naW5fbG9nb191cmwpXG4gICAgICAgICAgICAgICAgICB0aGlzLiRzZXQodGhpcy5sb2dpbkxpc3RbMl0sICd1cmwnLCBkYXRhLmxvZ2luUGFnZS5sb2dpbl9idG5fdXJsKVxuICAgICAgICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMubG9naW5MaXN0WzNdLCAndXJsJywgZGF0YS5sb2dpblBhZ2UucmVnaXN0ZXJfYnRuX3VybClcbiAgICAgICAgICAgICAgICAgIHRoaXMuJHNldCh0aGlzLmxvZ2luTGlzdFs0XSwgJ3VybCcsIGRhdGEubG9naW5QYWdlLnVzZXJuYW1lX2ljb24pXG4gICAgICAgICAgICAgICAgICB0aGlzLiRzZXQodGhpcy5sb2dpbkxpc3RbNV0sICd1cmwnLCBkYXRhLmxvZ2luUGFnZS5wYXNzd29yZF9pY29uKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgdGhpcy4kbm90aWZ5KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+mAmuefpScsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ+abtOaUueaIkOWKnycsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3Igc3VibWl0ISEnKVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgaGFuZGxlUGNBdmF0YXJTdWNjZXNzIChyZXMsIGZpbGUsIGZpbGVMaXN0KSB7XG4gICAgICBjb25zb2xlLmxvZyhyZXMpXG4gICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICBsZXQgaW1hZ2VVcmwgPSByZXMucmVzdWx0XG4gICAgICAgIGlmICh0aGlzLmFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgICB0aGlzLiRzZXQodGhpcy51cGxvYWRJdGVtLCAnaWNvbicsIGltYWdlVXJsKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnZ2VyXG4gICAgICAgICAgdGhpcy4kc2V0KHRoaXMudXBsb2FkSXRlbSwgJ2ljb25fc2VsZWN0JywgaW1hZ2VVcmwpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZUF2YXRhclVwbG9hZCAoZmlsZSkge1xuICAgICAgbGV0IGltYWdlT2JqID0ge1xuICAgICAgICAnaW1hZ2UvanBlZyc6IHRydWUsXG4gICAgICAgICdpbWFnZS9wbmcnOiB0cnVlLFxuICAgICAgICAnaW1hZ2UvanBnJzogdHJ1ZVxuICAgICAgfVxuICAgICAgY29uc3QgaXNJbWFnZSA9IGZpbGUudHlwZSBpbiBpbWFnZU9ialxuICAgICAgY29uc3QgaXNMdDFNID0gZmlsZS5zaXplIC8gMTAyNCAvIDEwMjQgPCAxXG4gICAgICBpZiAoIWlzSW1hZ2UpIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcign6K+35LiK5Lyg5LiA5byg5Zu+54mHIScpXG4gICAgICB9XG4gICAgICBpZiAoIWlzTHQxTSkge1xuICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfkuIrkvKDlm77niYflpKflsI/kuI3og73otoXov4cgMU1CIScpXG4gICAgICB9XG4gICAgICByZXR1cm4gaXNJbWFnZSAmJiBpc0x0MU1cbiAgICB9XG4gIH1cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5iYXNpcyB7XG4gICAgcGFkZGluZzowIDI4cHggNDBweCAyOHB4O1xuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcbiAgfVxuICAuYmFzaXMgLmF2YXRhci11cGxvYWRlci1pY29uIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgY29sb3I6ICM4YzkzOWQ7XG4gICAgd2lkdGg6IDYwcHg7XG4gICAgaGVpZ2h0OiA2MHB4O1xuICAgIGxpbmUtaGVpZ2h0OiA2MHB4O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgfVxuICAuYmFzaXMgLnNhdmUge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbWFyZ2luLWxlZnQ6IDg1JTtcbiAgfVxuICAuYmFzaXMgLmNpcmNsZS10aXRsZSB7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gIH1cbiAgLmJhc2lzIC5tZW51IHtcbiAgICBwYWRkaW5nOjEwcHg7XG4gICAgbWFyZ2luLXRvcDogNDBweDtcbiAgICBib3JkZXI6MXB4IHNvbGlkICNEQURFREY7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICB9XG4gIC5iYXNpcyAubWVudSAubWVudS1ib3gge1xuICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICBwYWRkaW5nOiAwIDAgMjBweCA0MHB4O1xuICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgIG1hcmdpbi1sZWZ0OiAtMTMwcHg7XG4gICB9XG4gIC5iYXNpcyAubWVudSAubWVudS1ib3ggLmJveC1sZWZ0IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgcGFkZGluZzogMCAwIDIwcHggMDtcbiAgICBtYXJnaW4tbGVmdDogMTMwcHg7XG4gIH1cbiAgLmJhc2lzIC5mcmFtZSB7XG4gICAgcGFkZGluZzoxMHB4O1xuICAgIG1hcmdpbi10b3A6IDQwcHg7XG4gICAgYm9yZGVyOjFweCBzb2xpZCAjREFERURGO1xuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgfVxuICAuYmFzaXMgLmZyYW1lIC5mcmFtZS1ib3gge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgcGFkZGluZzogMCAwIDIwcHggNDBweDtcbiAgICBtYXJnaW4tbGVmdDogLTI2MHB4O1xuICB9XG4gIC5iYXNpcyAuZnJhbWUgLmZyYW1lLWJveCAuYm94LWxlZnQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwYWRkaW5nOiAwIDAgMjBweCAwO1xuICAgIG1hcmdpbi1sZWZ0OiAyNjBweDtcbiAgfVxuICAuYmFzaXMgLmZyYW1lIC5mcmFtZS1ib3ggLmJveC1sZWZ0IC5mcmFtZXdvcmstdGl0bGUge1xuICAgIGNvbG9yOiAjMzMzO1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgfVxuICAuZnJhbWUtYm94IC5ib3gtbGVmdCAuaW1nLWJveCB7XG4gICAgbWFyZ2luLWxlZnQ6IDIwcHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cbiAgLmJhc2lzIC5jb250ZW50IHtcbiAgICBwYWRkaW5nOjEwcHg7XG4gICAgbWFyZ2luLXRvcDogNDBweDtcbiAgICBib3JkZXI6MXB4IHNvbGlkICNEQURFREY7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICB9XG4gIC5iYXNpcyAuY29udGVudCAuY29udGVudC1ib3gge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwYWRkaW5nOiAwIDAgMjBweCA0MHB4O1xuICB9XG4gIC5tZW51LWJveCAuYm94LWxlZnQgLnRpdGxlIHtcbiAgICB3aWR0aDogNTBweDtcbiAgfVxuICAuYmFzaXMgLmJsb2NrIHtcbiAgICAgZGlzcGxheTogYmxvY2s7XG4gICB9XG4gIC5iYXNpcyAubm9uZSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuICAubWVudS1ib3ggLmJveC1sZWZ0IC5pbnB1dC1ibG9jayB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzQwOUVGRjtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgfVxuICAubWVudS1ib3ggLmJveC1sZWZ0IC5pbnB1dC1ub25lIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIGJvcmRlcjogbm9uZTtcbiAgfVxuICAubWVudS1ib3ggLmJveC1sZWZ0IC5pbnB1dCB7XG4gICAgd2lkdGg6IDUwcHg7XG4gIH1cbiAgLm1lbnUtYm94IC5hdmF0YXItdXBsb2FkZXIge1xuICAgIHdpZHRoOiA2MHB4O1xuICAgIGhlaWdodDogNjBweDtcbiAgfVxuICAubWVudS1ib3ggLmJveC1sZWZ0IC5pbWctYm94IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cbiAgLm1lbnUtYm94IC5ib3gxIC5pbWctYm94IHtcbiAgICBtYXJnaW4tbGVmdDogMjBweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuICAubWVudS1ib3ggLmltZy1ib3ggc3BhbiB7XG4gICAgY29sb3I6IGJsYWNrO1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICBtYXJnaW4tdG9wOiA4cHg7XG4gIH1cbiAgLmJhc2lzIC5lZGl0IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICB9XG4gIC5pbWctYXZhdGFyIHtcbiAgICB3aWR0aDogNjBweDtcbiAgICBoZWlnaHQ6IDYwcHg7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbjwvc3R5bGU+XG48c3R5bGU+XG4gIC5iYXNpcyAuZWwtdXBsb2FkLS1waWN0dXJlLWNhcmQge1xuICAgIHdpZHRoOiA2MHB4O1xuICAgIGhlaWdodDogNjBweDtcbiAgICBsaW5lLWhlaWdodDogNjVweDtcbiAgfVxuICAuYmFzaXMgLmVsLXVwbG9hZC1saXN0LS1waWN0dXJlLWNhcmQgLmVsLXVwbG9hZC1saXN0X19pdGVtIHtcbiAgICB3aWR0aDogNjBweDtcbiAgICBoZWlnaHQ6IDYwcHg7XG4gIH1cbiAgLmJhc2lzIC5lbC1kaWFsb2dfX2hlYWRlciB7XG4gICAgcGFkZGluZzogMDtcbiAgfVxuICAuYmFzaXMgLmVsLWRpYWxvZ19fYm9keSB7XG4gICAgcGFkZGluZzogMzBweDtcbiAgICBoZWlnaHQ6IDI0MHB4O1xuICAgIGNvbG9yOiAjNjA2MjY2O1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIH1cbiAgLmJhc2lzIC5lbC1kaWFsb2dfX2JvZHkgaW1nIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cbiAgLmJhc2lzIC5lbC1kaWFsb2cge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtYXJnaW46IDAgYXV0byA2MHB4O1xuICAgIHdpZHRoOiAzMDBweDtcbiAgICBoZWlnaHQ6IDMwMHB4O1xuICB9XG4gIC5iYXNpcyAuZWwtZGlhbG9nX19oZWFkZXJidG4ge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDEwcHg7XG4gICAgcmlnaHQ6IDEwcHg7XG4gIH1cbiAgLmJhc2lzIC5tZW51IC5tZW51LWJveCAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICBtYXJnaW4tbGVmdDogMCAhaW1wb3J0YW50O1xuICB9XG4gIC5iYXNpcyAuZnJhbWUgLmZyYW1lLWJveCAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICBtYXJnaW4tbGVmdDogNDVweCAhaW1wb3J0YW50O1xuICB9XG4gIC5iYXNpcyAuZnJhbWUgLmZyYW1lLWJveCAuZWwtZm9ybS1pdGVtX19sYWJlbCB7XG4gICAgd2lkdGg6IDQwcHggIWltcG9ydGFudDtcbiAgfVxuICAuYmFzaXMgLmZyYW1lIC5mcmFtZS1ib3ggLmVsLWZvcm0taXRlbSB7XG4gICAgbWFyZ2luLWJvdHRvbTogMCAhaW1wb3J0YW50O1xuICB9XG4gIC5iYXNpcyAuZWwtY2hlY2tib3hfX2lucHV0LmlzLWNoZWNrZWQgLmVsLWNoZWNrYm94X19pbm5lciwgLmVsLWNoZWNrYm94X19pbnB1dC5pcy1pbmRldGVybWluYXRlIC5lbC1jaGVja2JveF9faW5uZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM2OTRFRkY7XG4gICAgYm9yZGVyLWNvbG9yOiAjNjk0RUZGO1xuICB9XG4gIC5iYXNpcyAuZWwtY2hlY2tib3hfX2lucHV0LmlzLWNoZWNrZWQrLmVsLWNoZWNrYm94X19sYWJlbCB7XG4gICAgY29sb3I6ICM2OTRFRkY7XG4gIH1cbiAgLmJhc2lzIC5tZW51IC5lbC11cGxvYWQtbGlzdC0tcGljdHVyZS1jYXJkIC5lbC11cGxvYWQtbGlzdF9faXRlbS1hY3Rpb25zIC5lbC11cGxvYWQtbGlzdF9faXRlbS1kZWxldGUge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbjwvc3R5bGU+XG4iXSxzb3VyY2VSb290OiIifV0pfSxVSHpqOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uc2VhcmNoLWZvcm0tY29udGFpbmVyIC5idG4tY29udGFpbmVyIC5lbC1idXR0b257XG4gIHBhZGRpbmc6IDEycHggMTBweDtcbn1cbi5zZWFyY2gtZm9ybS1jb250YWluZXIgLmJ0bi1jb250YWluZXIgLmVsLWljb24tLXJpZ2h0e1xuICBtYXJnaW46IDA7XG59XG4uY3VzdG9tLWRpYWxvZyAuZWwtZGlhbG9nX19oZWFkZXJ7XG4gIC8qcGFkZGluZzogMDsqL1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSgxOTIsMTkwLDI1NSwxKTtcbn1cbi5lbC10b29sdGlwX19wb3BwZXJ7XG4gIG1heC13aWR0aDogMzAwcHg7XG59XG4ubGltaXQgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgd2lkdGg6IDcwJSAhaW1wb3J0YW50O1xufVxuLmxpbWl0IC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmVsLWZvcm0taXRlbSB7XG4gIHdpZHRoOiAzMCUgIWltcG9ydGFudDtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlQ29tbWVudC9zcmMvY29tcG9uZW50cy9tYW5hZ2VDb21tZW50L2xpbWl0TGlzdC52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBb1RBO0VBQ0EsbUJBQUE7Q0FDQTtBQUNBO0VBQ0EsVUFBQTtDQUNBO0FBQ0E7RUFDQSxlQUFBO0VBQ0EsNkNBQUE7Q0FDQTtBQUNBO0VBQ0EsaUJBQUE7Q0FDQTtBQUNBO0VBQ0Esc0JBQUE7Q0FDQTtBQUNBO0VBQ0Esc0JBQUE7Q0FDQSIsZmlsZToibGltaXRMaXN0LnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9ImxpbWl0Ij5cbiAgICA8ZGl2PlxuICAgICAgPGNpcmNsZS10aXRsZVxuICAgICAgICB0aXRsZS1uYW1lPSLnpoHoqIDnrqHnkIYiXG4gICAgICAgIGNsYXNzPSJjaWNsZS1jb250cm9sbGVyIlxuICAgICAgLz5cbiAgICAgIDxkaXYgY2xhc3M9InNlYXJjaC1mb3JtLWNvbnRhaW5lciI+XG4gICAgICAgIDxlbC1mb3JtXG4gICAgICAgICAgOmlubGluZT0idHJ1ZSJcbiAgICAgICAgICA6bW9kZWw9ImZvcmJpZGRlbkNvbW1lbnQiXG4gICAgICAgICAgY2xhc3M9ImRlbW8tZm9ybS1pbmxpbmUiPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IueUqOaIt+WQjSI+XG4gICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgdi1tb2RlbD0iZm9yYmlkZGVuQ29tbWVudC51c2VyX25pY2tuYW1lIlxuICAgICAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuazqOWGjOaJi+acuiI+XG4gICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgdi1tb2RlbD0iZm9yYmlkZGVuQ29tbWVudC51c2VyX3Bob25lIlxuICAgICAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLlvIDlp4vml7bpl7QiXG4gICAgICAgICAgICBzdHlsZT0icG9zaXRpb246IHJlbGF0aXZlIj5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9ImZvcmJpZGRlbkNvbW1lbnQuc3RhcnREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9ImZvcmJpZGRlbkNvbW1lbnQuc3RhcnREYXRlIlxuICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pe26Ze0Ii8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9Iue7k+adn+aXtumXtCJcbiAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogLTE0cHgiPlxuICAgICAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgICAgIDp0aXRsZT0iZm9yYmlkZGVuQ29tbWVudC5lbmREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9ImZvcmJpZGRlbkNvbW1lbnQuZW5kRGF0ZSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXtumXtCIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IDgycHgiXG4gICAgICAgICAgICBAY2xpY2s9ImdldEZvcmJpZGRlbkNvbW1lbnRMaXN0Ij5cbiAgICAgICAgICAgIOafpeivolxuICAgICAgICAgICAgPGkgY2xhc3M9ImVsLWljb24tc2VhcmNoIGVsLWljb24tLXJpZ2h0Ii8+XG4gICAgICAgICAgPC9lbC1idXR0b24+XG4gICAgICAgIDwvZWwtZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9InRhYmxlLWxpc3QiPlxuICAgICAgPGVsLXRhYmxlXG4gICAgICAgIHJlZj0iY2hhbm5lbFRhYmxlIlxuICAgICAgICA6ZGF0YT0idGFibGVEYXRhIlxuICAgICAgICBzdHJpcGVcbiAgICAgICAgY2xhc3M9Indob2xlLXRhYmxlIlxuICAgICAgICBtaW4taGVpZ2h0PSI0MDAiXG4gICAgICAgIEBzZWxlY3QtYWxsPSJzZWxlY3RBbGwiXG4gICAgICAgIEBzZWxlY3Rpb24tY2hhbmdlPSJzZWxlY3Rpb25DaGFuZ2UiPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgdHlwZT0ic2VsZWN0aW9uIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgd2lkdGg9IjU1Ii8+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiB0YWJsZUhlYWRlciJcbiAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICA6cHJvcD0iaXRlbS5wcm9wIlxuICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCJcbiAgICAgICAgICA6d2lkdGg9Iml0ZW0ud2lkdGgiXG4gICAgICAgICAgOmZvcm1hdHRlcj0iaXRlbS5mb3JtYXR0ZXIiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICBmaXhlZFxuICAgICAgICAgIHNob3ctb3ZlcmZsb3ctdG9vbHRpcFxuICAgICAgICAvPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgbGFiZWw9IuaTjeS9nCJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIHdpZHRoPSIyNTAiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWFudS1jb250YWluZXIiPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzPSJtYW51IGRlbGV0ZS1hY3RpdmUiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJjYW5jZWxGb3JiaWRkZW4oc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg5Y+W5raI56aB6KiAXG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgIDwvZWwtdGFibGU+XG4gICAgICA8ZGl2IGNsYXNzPSJwYWdpbmF0aW9uIj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8ZWwtY2hlY2tib3hcbiAgICAgICAgICAgIHYtbW9kZWw9InNlbGZTZWxlY3RBbGwiXG4gICAgICAgICAgICBAY2hhbmdlPSJ0b2dnbGVBbGxTZWxlY3Rpb24iPlxuICAgICAgICAgICAg5YWo6YCJXG4gICAgICAgICAgPC9lbC1jaGVja2JveD5cbiAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgICAgc2l6ZT0ibWVkaXVtIlxuICAgICAgICAgICAgQGNsaWNrPSJjYW5jZWxNYW55Rm9yYmlkZGVuQ29tbWVudCI+5om56YeP5Y+W5raI56aB6KiAPC9lbC1idXR0b24+XG4gICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgdi1zaG93PSIxID09PSAyIlxuICAgICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICAgIHNpemU9Im1lZGl1bSJcbiAgICAgICAgICAgIEBjbGljaz0iY2FuY2VsTWFueUZvcmJpZGRlbkNvbW1lbnQiPuWvvOWHuuaVsOaNrjwvZWwtYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGVsLXBhZ2luYXRpb25cbiAgICAgICAgICA6dG90YWw9InRvdGFsIlxuICAgICAgICAgIDpwYWdlLXNpemVzPSJbMTAsIDIwLCAzMCwgNDBdIlxuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICBsYXlvdXQ9InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPSJoYW5kbGVTaXplQ2hhbmdlIlxuICAgICAgICAgIEBjdXJyZW50LWNoYW5nZT0iaGFuZGxlQ3VycmVudENoYW5nZSIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlXCdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL2NvbW1lbnRBcGlcJ1xuaW1wb3J0IEF1ZGl0IGZyb20gXCcuL2F1ZGl0XCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlLFxuICAgIEF1ZGl0XG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JiaWRkZW5Db21tZW50OiB7XG4gICAgICAgIHVzZXJfbmlja25hbWU6IFwnXCcsXG4gICAgICAgIHVzZXJfcGhvbmU6IFwnXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJ1xuICAgICAgfSxcbiAgICAgIGNsaWNrQ2VsbEluZGV4OiAtMSxcbiAgICAgIHRhYmxlSGVhZGVyOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3VzZXJfbmlja25hbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfmmLXnp7BcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCd1c2VyX3Bob25lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn55S16K+dXCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnY3JlYXRldGltZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+emgeiogOW8gOWni+aXtumXtFwnLFxuICAgICAgICAgIHdpZHRoOiAyMDAsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgdGFibGVEYXRhOiBbXSxcbiAgICAgIGluZGV4OiAtMSxcbiAgICAgIHBhZ2VObzogMSxcbiAgICAgIHBhZ2VTaXplOiAxMCxcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgc2VsZlNlbGVjdEFsbDogZmFsc2UsIC8vIOiHquWumuS5ieeahOWFqOmAiVxuICAgICAgY2FuY2VsRm9yYmlkZGVuQ29tbWVudExpc3Q6IFtdLFxuICAgICAgc2VsZWN0aW9uRm9yYmlkZGVuOiBbXVxuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBcJ2ZvcmJpZGRlbkNvbW1lbnQudXNlcl9uaWNrbmFtZVwnICgpIHtcbiAgICAgIHRoaXMuZ2V0Rm9yYmlkZGVuQ29tbWVudExpc3QoKVxuICAgIH0sXG4gICAgXCdmb3JiaWRkZW5Db21tZW50LnVzZXJfcGhvbmVcJyAoKSB7XG4gICAgICB0aGlzLmdldEZvcmJpZGRlbkNvbW1lbnRMaXN0KClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuZ2V0Rm9yYmlkZGVuQ29tbWVudExpc3QoKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLyoqIOiOt+WPluemgeiogOWIl+ihqCAqKi9cbiAgICBnZXRGb3JiaWRkZW5Db21tZW50TGlzdCAoKSB7XG4gICAgICB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdzd2FwVGltZVwnXSh0aGlzLmZvcmJpZGRlbkNvbW1lbnQpXG4gICAgICBsZXQgdGltZVN0YXJ0ID0gdGhpcy5mb3JiaWRkZW5Db21tZW50LnN0YXJ0RGF0ZSAhPT0gbnVsbCA/IG5ldyBEYXRlKHRoaXMuZm9yYmlkZGVuQ29tbWVudC5zdGFydERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIGxldCB0aW1lRW5kID0gdGhpcy5mb3JiaWRkZW5Db21tZW50LmVuZERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLmZvcmJpZGRlbkNvbW1lbnQuZW5kRGF0ZSkuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgQWN0aW9ucy5nZXRQYWdlRm9yYmlkZGVuQ29tbWVudCh7XG4gICAgICAgIFwncGFnZU5vXCc6IHRoaXMucGFnZU5vLFxuICAgICAgICBcJ3BhZ2VTaXplXCc6IHRoaXMucGFnZVNpemUsXG4gICAgICAgIFwndXNlcl9uaWNrbmFtZVwnOiB0aGlzLmZvcmJpZGRlbkNvbW1lbnQudXNlcl9uaWNrbmFtZSxcbiAgICAgICAgXCd1c2VyX3Bob25lXCc6IHRoaXMuZm9yYmlkZGVuQ29tbWVudC51c2VyX3Bob25lLFxuICAgICAgICBcJ3RpbWVTdGFydFwnOiB0aW1lU3RhcnQsXG4gICAgICAgIFwndGltZUVuZFwnOiB0aW1lRW5kXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy50YWJsZURhdGEgPSBkYXRhLmxpc3RcbiAgICAgICAgICB0aGlzLnRvdGFsID0gZGF0YS50b3RhbFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgaGFuZGxlU2l6ZUNoYW5nZSAocGFnZVNpemUpIHtcbiAgICAgIHRoaXMucGFnZVNpemUgPSBwYWdlU2l6ZVxuICAgICAgdGhpcy5nZXRGb3JiaWRkZW5Db21tZW50TGlzdCgpXG4gICAgfSxcbiAgICBoYW5kbGVDdXJyZW50Q2hhbmdlIChwYWdlSW5kZXgpIHtcbiAgICAgIHRoaXMucGFnZU5vID0gcGFnZUluZGV4XG4gICAgICB0aGlzLmdldEZvcmJpZGRlbkNvbW1lbnRMaXN0KClcbiAgICB9LFxuICAgIC8qKiDojrflj5blhajpgInnmoTmlbDmja4gKiovXG4gICAgc2VsZWN0QWxsIChlKSB7XG4gICAgICBpZiAoZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuc2VsZlNlbGVjdEFsbCA9IHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2VsZlNlbGVjdEFsbCA9IGZhbHNlXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog6I635Y+W5omA5pyJ6YCJ5oup55qE56i/5Lu2SUQgKiovXG4gICAgc2VsZWN0aW9uQ2hhbmdlIChzZWxlY3Rpb24pIHtcbiAgICAgIHRoaXMuY2FuY2VsRm9yYmlkZGVuQ29tbWVudExpc3QgPSBbXVxuICAgICAgc2VsZWN0aW9uLmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgdGhpcy5jYW5jZWxGb3JiaWRkZW5Db21tZW50TGlzdC5wdXNoKGl0ZW0udXNlcmlkKVxuICAgICAgfSlcbiAgICAgIHRoaXMuc2VsZWN0aW9uRm9yYmlkZGVuID0gc2VsZWN0aW9uXG4gICAgfSxcbiAgICAvKiog5Y+W5raI56aB6KiAICoqL1xuICAgIGNhbmNlbEZvcmJpZGRlbiAocm93KSB7XG4gICAgICBBY3Rpb25zLmNhbmNlbEZvcmJpZGRlbkNvbW1lbnQoe1xuICAgICAgICBcJ2ZvcmJpZGRlbkNvbW1lbnRWb1wnOiB7XG4gICAgICAgICAgXCd1c2VyaWRcJzogcm93LnVzZXJpZFxuICAgICAgICB9XG4gICAgICB9KS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgbWVzc2FnZTogXCflt7Llj5bmtojnpoHoqIBcJ1xuICAgICAgICAgIH0pXG4gICAgICAgICAgdGhpcy5nZXRGb3JiaWRkZW5Db21tZW50TGlzdCgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog5om56YeP5Y+W5raI56aB6KiAICoqL1xuICAgIGNhbmNlbE1hbnlGb3JiaWRkZW5Db21tZW50ICgpIHtcbiAgICAgIGlmICh0aGlzLmNhbmNlbEZvcmJpZGRlbkNvbW1lbnRMaXN0Lmxlbmd0aCA8PSAwKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+ivt+iHs+WwkemAieaLqeS4gOS4queUqOaItyFcJ1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGxldCB0aXBDb250ZW50ID0gXCfmgqjljbPlsIblj5bmtohcJ1xuICAgICAgLyoqIOW3suS4iue6v+eahOeov+S7tuS4jeWPr+WIoOmZpOeahOaPkOekuiAqKi9cbiAgICAgIHRoaXMuc2VsZWN0aW9uRm9yYmlkZGVuLmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgdGlwQ29udGVudCArPSBcJyhcJyArIGl0ZW0udXNlcl9uaWNrbmFtZSArIFwnKVwnXG4gICAgICB9KVxuICAgICAgdGhpcy4kY29uZmlybSh0aXBDb250ZW50ICsgXCfnmoTnpoHoqIA/XCcsIFwn5o+Q56S6XCcsIHtcbiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwn56Gu5a6aXCcsXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwn5Y+W5raIXCcsXG4gICAgICAgIHR5cGU6IFwnd2FybmluZ1wnXG4gICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgQWN0aW9ucy5iYXRjaERlbGV0ZUZvcmJpZGRlbkNvbW1lbnQoe1xuICAgICAgICAgIFwnaWRMaXN0XCc6IHRoaXMuY2FuY2VsRm9yYmlkZGVuQ29tbWVudExpc3RcbiAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+aJuemHj+WPlua2iOemgeiogOaIkOWKnyFcJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5nZXRGb3JiaWRkZW5Db21tZW50TGlzdCgpXG4gICAgICAgIH0pXG4gICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICB9KVxuICAgIH0sXG4gICAgdG9nZ2xlQWxsU2VsZWN0aW9uIChlKSB7XG4gICAgICB0aGlzLiRyZWZzLmNoYW5uZWxUYWJsZS50b2dnbGVBbGxTZWxlY3Rpb24oKVxuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLnBhZ2luYXRpb257XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICB9XG4gIC5saW1pdCAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAyMCU7XG4gIH1cbiAgLm1hbnV7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIGhlaWdodDogMjBweDtcbiAgICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gICAgYm9yZGVyLXJhZGl1czogMjBweDtcbiAgICBmb250LXNpemU6IDEzcHg7XG4gICAgcGFkZGluZzogMXB4IDVweCAycHggNXB4O1xuICAgIGNvbG9yOiByZ2JhKDE4MSwgMTg0LCAyMTcsIDEpO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuICAubWFudS11cC1hY3RpdmV7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyMzEsIDEyNSwgMCwgMSk7XG4gICAgY29sb3I6cmdiYSgyMzEsIDEyNSwgMCwgMSk7XG4gIH1cbiAgLm1hbnUtYmFjay1hY3RpdmV7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyNDAsIDgsIDgsIDEpO1xuICAgIGNvbG9yOnJnYmEoMjQwLCA4LCA4LCAxKTtcbiAgfVxuICAuZGVsZXRlLWFjdGl2ZXtcbiAgICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTA1LCA3OCwgMjU1LCAxKTtcbiAgICBjb2xvcjogcmdiYSgxMDUsIDc4LCAyNTUsIDEpO1xuICB9XG48L3N0eWxlPlxuPHN0eWxlPlxuICAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5idG4tY29udGFpbmVyIC5lbC1idXR0b257XG4gICAgcGFkZGluZzogMTJweCAxMHB4O1xuICB9XG4gIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmJ0bi1jb250YWluZXIgLmVsLWljb24tLXJpZ2h0e1xuICAgIG1hcmdpbjogMDtcbiAgfVxuICAuY3VzdG9tLWRpYWxvZyAuZWwtZGlhbG9nX19oZWFkZXJ7XG4gICAgLypwYWRkaW5nOiAwOyovXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMTkyLDE5MCwyNTUsMSk7XG4gIH1cbiAgLmVsLXRvb2x0aXBfX3BvcHBlcntcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xuICB9XG4gIC5saW1pdCAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICAgIHdpZHRoOiA3MCUgIWltcG9ydGFudDtcbiAgfVxuICAubGltaXQgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtIHtcbiAgICB3aWR0aDogMzAlICFpbXBvcnRhbnQ7XG4gIH1cbjwvc3R5bGU+XG4nXSxzb3VyY2VSb290OiIifV0pfSxVS0ROOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1yYW5nZS1lZGl0b3IgLmVsLXJhbmdlLWlucHV0e1xuICB3aWR0aDo1MCU7XG59XG4uc3RhcnRwYWdlLWxpc3QgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgd2lkdGg6IDYwJTtcbn1cbi5zdGFydHBhZ2UtbGlzdCAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICB3aWR0aDogMzMlO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZVN0YXJ0cGFnZS9zcmMvY29tcG9uZW50cy9tYW5hZ2VTdGFydHBhZ2Uvc3RhcnRwYWdlTGlzdC52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBd2FBO0VBQ0EsVUFBQTtDQUNBO0FBQ0E7RUFDQSxXQUFBO0NBQ0E7QUFDQTtFQUNBLFdBQUE7RUFDQSxtQkFBQTtDQUNBIixmaWxlOiJzdGFydHBhZ2VMaXN0LnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9InN0YXJ0cGFnZS1saXN0Ij5cbiAgICA8ZGl2PlxuICAgICAgPGNpcmNsZS10aXRsZVxuICAgICAgICB0aXRsZS1uYW1lPSLlub/lkYrpobXnrqHnkIYiXG4gICAgICAgIGNsYXNzPSJjaWNsZS1jb250cm9sbGVyIlxuICAgICAgLz5cbiAgICAgIDxkaXYgY2xhc3M9InNlYXJjaC1mb3JtLWNvbnRhaW5lciI+XG4gICAgICAgIDxlbC1mb3JtXG4gICAgICAgICAgOmlubGluZT0idHJ1ZSJcbiAgICAgICAgICA6bW9kZWw9IlN0YXJ0cGFnZUZvcm0iXG4gICAgICAgICAgY2xhc3M9ImRlbW8tZm9ybS1pbmxpbmUiPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLnirbmgIEiXG4gICAgICAgICAgICBjbGFzcz0ic2VhcmNoLWxlZnQiPlxuICAgICAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgICAgICB2LW1vZGVsPSJTdGFydHBhZ2VGb3JtLnN0YXRlIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hTdGFydHBhZ2UiPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgdmFsdWU9IiJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5YWo6YOoIi8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9IjAiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuW+heS4iue6vyIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPSIxIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLkvb/nlKjkuK0iLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMiJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5bey5LiL57q/Ii8+XG4gICAgICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i5byA5aeL5pe26Ze0IlxuICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAtNzBweCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPSJTdGFydHBhZ2VGb3JtLnN0YXJ0RGF0ZSB8IEZvcm1hdERhdGUoXCd5eXl5LU1NLWRkIGhoOm1tXCcpIlxuICAgICAgICAgICAgICB2LW1vZGVsPSJTdGFydHBhZ2VGb3JtLnN0YXJ0RGF0ZSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXpeacnyJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoU3RhcnRwYWdlIi8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9Iue7k+adn+aXtumXtCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPSJTdGFydHBhZ2VGb3JtLmVuZERhdGUgfCBGb3JtYXREYXRlKFwneXl5eS1NTS1kZCBoaDptbVwnKSJcbiAgICAgICAgICAgICAgdi1tb2RlbD0iU3RhcnRwYWdlRm9ybS5lbmREYXRlIlxuICAgICAgICAgICAgICBmb3JtYXQ9Inl5eXktTU0tZGQgSEg6bW0iXG4gICAgICAgICAgICAgIHR5cGU9ImRhdGV0aW1lIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pel5pyfIlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hTdGFydHBhZ2UiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgICAgQGNsaWNrPSJzZWFyY2hTdGFydHBhZ2UiPlxuICAgICAgICAgICAg5pCc57SiXG4gICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICA8L2VsLWJ1dHRvbj5cbiAgICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9tYW5hZ2VTdGFydHBhZ2UvY3JlYXRlIj5cbiAgICAgICAgICAgIDxlbC1idXR0b24gdHlwZT0icHJpbWFyeSI+XG4gICAgICAgICAgICAgIOa3u+WKoOWQr+WKqOmhtVxuICAgICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1wbHVzIGVsLWljb24tLXJpZ2h0Ii8+XG4gICAgICAgICAgICA8L2VsLWJ1dHRvbj5cbiAgICAgICAgICA8L3JvdXRlci1saW5rPlxuICAgICAgICA8L2VsLWZvcm0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1saXN0Ij5cbiAgICAgIDxlbC10YWJsZVxuICAgICAgICByZWY9InNsaWRlVGFibGUiXG4gICAgICAgIDpkYXRhPSJ0YWJsZURhdGEiXG4gICAgICAgIHN0cmlwZVxuICAgICAgICBjbGFzcz0id2hvbGUtdGFibGUiXG4gICAgICAgIG1pbi1oZWlnaHQ9IjQwMCJcbiAgICAgICAgQGNlbGwtY2xpY2s9ImNlbGxDbGljayJcbiAgICAgICAgQGNlbGwtbW91c2UtbGVhdmU9ImNlbGxNb3VzZUxlYXZlIj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIHRhYmxlSGVhZGVyIlxuICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgIDpwcm9wPSJpdGVtLnByb3AiXG4gICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIlxuICAgICAgICAgIDp3aWR0aD0iaXRlbS53aWR0aCJcbiAgICAgICAgICA6Zm9ybWF0dGVyPSJpdGVtLmZvcm1hdHRlciJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIGZpeGVkXG4gICAgICAgICAgc2hvdy1vdmVyZmxvdy10b29sdGlwXG4gICAgICAgIC8+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBmaXhlZD0icmlnaHQiXG4gICAgICAgICAgbGFiZWw9IuaTjeS9nCJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIHdpZHRoPSIxMDAiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9InRleHQiXG4gICAgICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgICAgICBpY29uPSJlbC1pY29uLWVkaXQiXG4gICAgICAgICAgICAgIEBjbGljaz0iaGFuZGxlRWRpdChzY29wZS5yb3cpIi8+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9InRleHQiXG4gICAgICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgICAgICBpY29uPSJlbC1pY29uLWRlbGV0ZSJcbiAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVEZWxldGUoc2NvcGUucm93KSIvPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgPC9lbC10YWJsZT5cbiAgICAgIDxkaXYgY2xhc3M9InBhZ2luYXRpb24iPlxuICAgICAgICA8ZWwtcGFnaW5hdGlvblxuICAgICAgICAgIDp0b3RhbD0idG90YWwiXG4gICAgICAgICAgOnBhZ2Utc2l6ZXM9IlsxMCwgMjAsIDMwLCA0MF0iXG4gICAgICAgICAgOmN1cnJlbnQtcGFnZT0icGFnZU5vIlxuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICBsYXlvdXQ9InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPSJoYW5kbGVTaXplQ2hhbmdlIlxuICAgICAgICAgIEBjdXJyZW50LWNoYW5nZT0iaGFuZGxlQ3VycmVudENoYW5nZSIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlXCdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL3N0YXJ0cGFnZUFwaVwnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBDaXJjbGVUaXRsZVxuICB9LFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgU3RhcnRwYWdlRm9ybToge1xuICAgICAgICBzdGF0ZTogXCdcJyxcbiAgICAgICAgcmVnaW9uOiBcJ1wnLFxuICAgICAgICBzdGFydERhdGU6IFwnXCcsXG4gICAgICAgIGVuZERhdGU6IFwnXCcsXG4gICAgICAgIHNvcnQ6IFwnMVwnXG4gICAgICB9LFxuICAgICAgY2xpY2tDZWxsSW5kZXg6IC0xLFxuICAgICAgc29ydFZhbHVlOiAtMSxcbiAgICAgIHBhZ2VObzogMSxcbiAgICAgIHBhZ2VTaXplOiAxMCxcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgdGFibGVIZWFkZXI6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnaW1nX3VybFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+WQr+WKqOmhteWbvueJh1wnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gPGltZyBjbGFzcz1cJ3RvcGljLXRhYmxlLXBpY1wnIHNyYz17Y2VsbFZhbHVlfS8+XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCd1cGRhdGV0aW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5pu05paw5pel5pyfXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdyZXNpZGVuY2VfdGltZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+mpu+eVmeaXtumXtFwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2ltZ191cmxcJyxcbiAgICAgICAgICBsYWJlbDogXCflm77niYflnLDlnYBcJyxcbiAgICAgICAgICB3aWR0aDogXCcxMDBcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdqdW1wX3VybFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+mTvuaOpeWcsOWdgFwnLFxuICAgICAgICAgIHdpZHRoOiBcJzEwMFwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcblxuICAgICAgICAgIHByb3A6IFwnZXhwaXJ5X2RhdGVfc3RhcnRcJyxcbiAgICAgICAgICBsYWJlbDogXCflvIDlp4vml6XmnJ9cJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10oY2VsbFZhbHVlLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2V4cGlyeV9kYXRlX2VuZFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+e7k+adn+aXpeacn1wnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnRm9ybWF0RGF0ZVwnXShjZWxsVmFsdWUsIFwneXl5eS1NTS1kZCBoaDptbVwnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnc3RhdGVcJyxcbiAgICAgICAgICBsYWJlbDogXCfnirbmgIFcJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBhcnNlSW50KGNlbGxWYWx1ZSkgPT09IDEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwn5L2/55So5LitXCdcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VJbnQoY2VsbFZhbHVlKSA9PT0gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gXCflvoXkuIrnur9cJ1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwn5bey5LiL57q/XCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3NvcnRcJyxcbiAgICAgICAgICBsYWJlbDogXCfmjpLluo9cJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSB0aGlzLmNsaWNrQ2VsbEluZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybiA8aW5wdXQgdHlwZT1cJ3RleHRcJyBjbGFzcz1cJ3NlbGYtc29ydFwnIGlkPXtpbmRleH0gdmFsdWU9IHtjZWxsVmFsdWV9IGF1dG9mb2N1cz0iYXV0b2ZvY3VzIiAvPlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDxzcGFuIGNsYXNzPVwnc29ydC1jb250YWluZXJcJyBkYXRhLWlkPXtpbmRleH0+e2NlbGxWYWx1ZX08L3NwYW4+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgdGFibGVEYXRhOiBbXSxcbiAgICAgIGJhdGNoUHJvY2VzczogMSxcbiAgICAgIHByb2Nlc3NMaXN0OiBbXG4gICAgICAgIHtcbiAgICAgICAgICB2YWx1ZTogMSxcbiAgICAgICAgICBsYWJlbDogXCfmibnph4/mk43kvZxcJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6IDIsXG4gICAgICAgICAgbGFiZWw6IFwn5YW25LuWXCdcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIHNlbGVjdEFkSWQ6IFwnXCdcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIC8qKiDojrflj5blkK/liqjpobXliJfooaggKiovXG4gICAgdGhpcy5nZXRTdGFydHBhZ2VsTGlzdCgpXG5cbiAgICB0aGlzLiRyb290LmV2ZW50SHViLiRvbihcJ3Jlc2V0LW9wdGlvbnNcJywgKCkgPT4ge1xuICAgICAgdGhpcy5yZXNldE9wdGlvbnMoKVxuICAgIH0pXG4gIH0sXG4gIGFjdGl2YXRlZCAoKSB7XG4gICAgbGV0IG1ldGEgPSB0aGlzLiRyb3V0ZS5tZXRhXG4gICAgaWYgKG1ldGEuaGFzT3duUHJvcGVydHkoXCdyZWZyZXNoXCcpICYmIG1ldGEucmVmcmVzaCkge1xuICAgICAgdGhpcy5nZXRTdGFydHBhZ2VsTGlzdCgpXG4gICAgICBkZWxldGUgdGhpcy4kcm91dGUubWV0YS5yZWZyZXNoXG4gICAgfVxuICB9LFxuICBiZWZvcmVSb3V0ZUxlYXZlICh0bywgZnJvbSwgbmV4dCkge1xuICAgIGlmICh0by5wYXRoID09PSBcJy9tYW5hZ2VTdGFydHBhZ2UvY3JlYXRlXCcpIHtcbiAgICAgIHRoaXMucmVzZXRPcHRpb25zKClcbiAgICB9XG4gICAgbmV4dCgpXG4gIH0sXG4gIGJlZm9yZURlc3Ryb3kgKCkge1xuICAgIHRoaXMuJHJvb3QuZXZlbnRIdWIuJG9mZihcJ3Jlc2V0LW9wdGlvbnNcJylcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHJlc2V0T3B0aW9ucyAoKSB7XG4gICAgICB0aGlzLlN0YXJ0cGFnZUZvcm0gPSB7XG4gICAgICAgIHN0YXRlOiBcJ1wnLFxuICAgICAgICByZWdpb246IFwnXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJyxcbiAgICAgICAgc29ydDogXCcxXCdcbiAgICAgIH1cbiAgICAgIHRoaXMucGFnZU5vID0gMVxuICAgICAgdGhpcy5nZXRTdGFydHBhZ2VsTGlzdCgpXG4gICAgfSxcbiAgICAvKiog5YiG6aG16I635Y+W5ZCv5Yqo6aG15YiX6KGoICoqL1xuICAgIGdldFN0YXJ0cGFnZWxMaXN0ICgpIHtcbiAgICAgIGxldCB0aW1lU3RhcnQgPSB0aGlzLlN0YXJ0cGFnZUZvcm0uc3RhcnREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5TdGFydHBhZ2VGb3JtLnN0YXJ0RGF0ZSkuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgbGV0IHRpbWVFbmQgPSB0aGlzLlN0YXJ0cGFnZUZvcm0uZW5kRGF0ZSAhPT0gbnVsbCA/IG5ldyBEYXRlKHRoaXMuU3RhcnRwYWdlRm9ybS5lbmREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBsZXQgb3B0aW9uID0ge1xuICAgICAgICBcJ3BhZ2VOb1wnOiB0aGlzLnBhZ2VObyxcbiAgICAgICAgXCdwYWdlU2l6ZVwnOiB0aGlzLnBhZ2VTaXplLFxuICAgICAgICBcJ3N0YXRlXCc6IHRoaXMuU3RhcnRwYWdlRm9ybS5zdGF0ZSxcbiAgICAgICAgXCd0aW1lU3RhcnRcJzogdGltZVN0YXJ0LFxuICAgICAgICBcJ3RpbWVFbmRcJzogdGltZUVuZFxuICAgICAgfVxuICAgICAgQWN0aW9ucy5nZXRTdGFydHBhZ2VsTGlzdChvcHRpb24pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgIGxldCBsaXN0RGF0YSA9IHJlcy5kYXRhLnJlc3VsdC5saXN0XG4gICAgICAgICAgdGhpcy50YWJsZURhdGEgPSBsaXN0RGF0YVxuICAgICAgICAgIHRoaXMudG90YWwgPSBsaXN0RGF0YS50b3RhbFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOaQnOe0ouWQr+WKqOmhtSAqKi9cbiAgICBzZWFyY2hTdGFydHBhZ2UgKCkge1xuICAgICAgdGhpcy5wYWdlTm8gPSAxXG4gICAgICB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdzd2FwVGltZVwnXSh0aGlzLlN0YXJ0cGFnZUZvcm0pXG4gICAgICB0aGlzLmdldFN0YXJ0cGFnZWxMaXN0KClcbiAgICB9LFxuICAgIC8qKiDliKDpmaTlkK/liqjpobUgKiovXG4gICAgaGFuZGxlRGVsZXRlIChyb3cpIHtcbiAgICAgIHRoaXMuJGNvbmZpcm0oXCfmmK/lkKbliKDpmaTor6Xlub/lkYrpobU/XCcsIFwn5o+Q56S6XCcsIHtcbiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwn56Gu5a6aXCcsXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwn5Y+W5raIXCcsXG4gICAgICAgIHR5cGU6IFwnd2FybmluZ1wnXG4gICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgQWN0aW9ucy5kZWxldGVTdGFydHBhZ2Uoe1xuICAgICAgICAgIFwnYXBwQWR2XCc6IHtcbiAgICAgICAgICAgIFwnYWRpZFwnOiByb3cuYWRpZFxuICAgICAgICAgIH1cbiAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2cocmVzKVxuICAgICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogXCfliKDpmaTmiJDlip8hXCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZ2V0U3RhcnRwYWdlbExpc3QoKVxuICAgICAgICB9KVxuICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDnvJbovpHml7bojrflj5bljZXlhYPmoLzmlbDmja4gKiovXG4gICAgaGFuZGxlRWRpdDogZnVuY3Rpb24gKHJvdykge1xuICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcJ2FkaWRcJywgcm93LmFkaWQpXG4gICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7bmFtZTogXCdzdGFydHBhZ2VFZGl0XCcsIHBhcmFtczogcm93fSlcbiAgICB9LFxuICAgIGhhbmRsZVNpemVDaGFuZ2UgKHBhZ2VTaXplKSB7XG4gICAgICB0aGlzLnBhZ2VTaXplID0gcGFnZVNpemVcbiAgICAgIHRoaXMuc2VhcmNoU3RhcnRwYWdlKClcbiAgICB9LFxuICAgIGhhbmRsZUN1cnJlbnRDaGFuZ2UgKHBhZ2VJbmRleCkge1xuICAgICAgdGhpcy5wYWdlTm8gPSBwYWdlSW5kZXhcbiAgICAgIHRoaXMuZ2V0U3RhcnRwYWdlbExpc3QoKVxuICAgIH0sXG4gICAgdG9nZ2xlQWxsU2VsZWN0aW9uIChlKSB7XG4gICAgICB0aGlzLiRyZWZzLnNsaWRlVGFibGUudG9nZ2xlQWxsU2VsZWN0aW9uKClcbiAgICB9LFxuICAgIC8qKiDljZXlhYPmoLzooqvngrnlh7sgKiovXG4gICAgY2VsbENsaWNrIChyb3csIGNvbHVtbiwgY2VsbCwgZXZlbnQpIHtcbiAgICAgIGxldCBpZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmlkXG4gICAgICBpZiAoaWQpIHtcbiAgICAgICAgdGhpcy5jbGlja0NlbGxJbmRleCA9IHBhcnNlSW50KGlkKVxuICAgICAgfVxuICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBsZXQgaW5wdXRFbGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcJy5lbC10b29sdGlwID4gaW5wdXQuc2VsZi1zb3J0XCcpXG4gICAgICAgIGlucHV0RWxlcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdEFkSWQgPSByb3cuYWRpZFxuICAgICAgICAgICAgZWxlbWVudC5mb2N1cygpXG4gICAgICAgICAgICBlbGVtZW50Lm9ua2V5dXAgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICBpZiAoZWxlbWVudC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc29ydFZhbHVlID0gcGFyc2VJbnQoZWxlbWVudC52YWx1ZSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog56a75byA5Y2V5YWD5qC8ICoqL1xuICAgIGNlbGxNb3VzZUxlYXZlIChyb3csIGNvbHVtbiwgY2VsbCwgZXZlbnQpIHtcbiAgICAgIC8qKiDph43nva7ljZXlhYPmoLznirbmgIEgKiovXG4gICAgICB0aGlzLmNsaWNrQ2VsbEluZGV4ID0gLTFcbiAgICAgIGlmICh0aGlzLnNvcnRWYWx1ZSA9PT0gLTEgfHwgdGhpcy5zZWxlY3RBZElkICE9PSByb3cuYWRpZCkgcmV0dXJuIGZhbHNlXG4gICAgICAvKiog5L+u5pS55o6S5bqPICoqL1xuICAgICAgQWN0aW9ucy5jaGFuZ2VTdGFydHBhZ2VTb3J0KHtcbiAgICAgICAgXCdhcHBBZHZcJzoge1xuICAgICAgICAgIFwnYWRpZFwnOiByb3cuYWRpZCxcbiAgICAgICAgICBcJ3NvcnRcJzogdGhpcy5zb3J0VmFsdWVcbiAgICAgICAgfVxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgICAgdGhpcy5nZXRTdGFydHBhZ2VsTGlzdCgpXG4gICAgICAgICAgdGhpcy5zb3J0VmFsdWUgPSAtMVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG59XG48XC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuICAuY2ljbGUtY29udHJvbGxlciB7XG4gICAgbWFyZ2luLXRvcDogNCU7XG4gIH1cbiAgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciB7XG4gICAgcGFkZGluZy1sZWZ0OiA1LjIlO1xuICB9XG4gIC5kYXRlLWxlZnQge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBsZWZ0OiA0NXB4O1xuICB9XG4gIC50YWJsZS1saXN0IHtcbiAgICBtaW4taGVpZ2h0OiA0MDBweDtcbiAgICBwYWRkaW5nOiAwIDMuMiUgMCAzLjIlO1xuICAgIG1hcmdpbi10b3A6IDMwcHg7XG4gIH1cbiAgLndob2xlLXRhYmxlIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDIxOCwgMjIyLCAyMjMsIDEpO1xuICAgIG1pbi1oZWlnaHQ6IDI1dnc7XG4gIH1cbiAgLnBhZ2luYXRpb24ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gIH1cbiAgLmJ0bi1jb250YWluZXIge1xuICAgIHdpZHRoOiAyMyUgIWltcG9ydGFudDtcbiAgICBmbG9hdDogcmlnaHQ7XG4gICAgbWFyZ2luLXJpZ2h0OiAyMnB4O1xuICB9XG4gIC5zZWxmLXNvcnR7XG4gICAgd2lkdGg6MzBweDtcbiAgfVxuXG4gIC5zb3J0LWNvbnRhaW5lcntcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6NDNweDtcbiAgICBoZWlnaHQ6IDMxcHg7XG4gICAgYmFja2dyb3VuZDogcmdiYSgyNDYsIDI0NiwgMjQ2LCAxKTtcbiAgICBjb2xvcjpyZ2JhKDI1NSwgMTY1LCA3LCAxKTtcbiAgICBsaW5lLWhlaWdodDogMzFweDtcbiAgfVxuICAuc2hvdy1zb3J0e1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgfVxuICAuaGlkZS1zb3J0e1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbiAgLnBhZ2luYXRpb24ge1xuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgIC13ZWJraXQtYm94LXBhY2s6IGVuZDtcbiAgfVxuPC9zdHlsZT5cbjxzdHlsZT5cbiAgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtcmFuZ2UtZWRpdG9yIC5lbC1yYW5nZS1pbnB1dHtcbiAgICB3aWR0aDo1MCU7XG4gIH1cbiAgLnN0YXJ0cGFnZS1saXN0IC5lbC1mb3JtLS1pbmxpbmUgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gICAgd2lkdGg6IDYwJTtcbiAgfVxuICAuc3RhcnRwYWdlLWxpc3QgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtIHtcbiAgICB3aWR0aDogMzMlO1xuICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LFVoSG06ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoIjZOemsiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiMzc2ZTRkZTMiLGEsITEse30pfSxWTVRWOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uY2ljbGUtY29udHJvbGxlcltkYXRhLXYtZmU0NjE1ZWFdIHtcbiAgbWFyZ2luLXRvcDogNCU7XG59XG4uY3JlYXRlIC5zb3J0IHNwYW5bZGF0YS12LWZlNDYxNWVhXXtcbiAgY29sb3I6ICM5MDkwOTA7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZVN1YmxpdmUvc3ViQ2hhbm5lbC9zcmMvY29tcG9uZW50cy9tYW5hZ2VTdWJsaXZlL3N1YkNoYW5uZWwvY2hhbm5lbENyZWF0ZS52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBMFRBO0VBQ0EsZUFBQTtDQUNBO0FBQ0E7RUFDQSxlQUFBO0NBQ0EiLGZpbGU6ImNoYW5uZWxDcmVhdGUudnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0iY2hhbm5lbCBjcmVhdGUiPlxuICAgIDxjaXJjbGUtdGl0bGVcbiAgICAgIHRpdGxlLW5hbWU9IumikemBk+aWsOWiniJcbiAgICAgIGNsYXNzPSJjaWNsZS1jb250cm9sbGVyIlxuICAgIC8+XG4gICAgPGVsLWZvcm1cbiAgICAgIHJlZj0iY3JlYXRlRnJvbSJcbiAgICAgIDptb2RlbD0iY3JlYXRlRnJvbSJcbiAgICAgIDpydWxlcz0icnVsZXMiXG4gICAgICBsYWJlbC13aWR0aD0iMTAwcHgiXG4gICAgICBjbGFzcz0icnVsZS1mb3JtIj5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IumikemBk+WQjeensCJcbiAgICAgICAgcHJvcD0iY2hhbm5lbF9uYW1lIj5cbiAgICAgICAgPGVsLWlucHV0IHYtbW9kZWwudHJpbT0iY3JlYXRlRnJvbS5jaGFubmVsX25hbWUiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i54i257qn6aKR6YGTIlxuICAgICAgICBwcm9wPSJwYXJlbnRfY2hhbm5lbF9uYW1lIj5cbiAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgIHYtbW9kZWw9ImNyZWF0ZUZyb20ucGFyZW50X2NoYW5uZWxpZCJcbiAgICAgICAgICBmaWx0ZXJhYmxlXG4gICAgICAgICAgcGxhY2Vob2xkZXI9IiJcbiAgICAgICAgICBAY2hhbmdlPSJkaXNhYmxlSXNGaXhlZCI+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gcGFyZW50Q2hhbm5lbExpc3QiXG4gICAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSJcbiAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5b2S5bGe57G75YirIlxuICAgICAgICBwcm9wPSJjaGFubmVsX3R5cGVfbmFtZSI+XG4gICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICB2LW1vZGVsPSJjcmVhdGVGcm9tLmNoYW5uZWxfdHlwZWlkIlxuICAgICAgICAgIGZpbHRlcmFibGVcbiAgICAgICAgICBwbGFjZWhvbGRlcj0iIj5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBjaGFubmVsVHlwZUxpc3QiXG4gICAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSJcbiAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5Zu+5qCH6YWN572uIlxuICAgICAgICBjbGFzcz0iaXRlbSI+XG4gICAgICAgIDxkaXYgY2xhc3M9Imljb24tY2hvb3NlLWNvbnRhaW5lciI+XG4gICAgICAgICAgPGRpdiBjbGFzcz0ibW9yZW4taWNvbiI+XG4gICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgIDpzcmM9ImNyZWF0ZUZyb20uaWNvbl91cmwiPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgICBAY2xpY2s9ImNob29zZUljb24iPumAieaLqeWbvuaghzwvZWwtYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i54q25oCB6YCJ5oupIlxuICAgICAgICBwcm9wPSJzdGF0ZSI+XG4gICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICB2LW1vZGVsPSJjcmVhdGVGcm9tLnN0YXRlIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fpgInmi6kiPlxuICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgIDp2YWx1ZT0iMCJcbiAgICAgICAgICAgIGxhYmVsPSLlgZznlKgiLz5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICA6dmFsdWU9IjEiXG4gICAgICAgICAgICBsYWJlbD0i5ZCv55SoIi8+XG4gICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLpopHpgZPnroDov7AiPlxuICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICB2LW1vZGVsPSJjcmVhdGVGcm9tLmRlc2NyaXB0aW9uIlxuICAgICAgICAgIHR5cGU9InRleHRhcmVhIi8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuaYr+WQpuWbuuWumiJcbiAgICAgICAgcHJvcD0iZml4ZWQiPlxuICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgOmRpc2FibGVkPSJmaXhlZERpc2FibGVkIlxuICAgICAgICAgIHYtbW9kZWw9ImNyZWF0ZUZyb20uZml4ZWQiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+mAieaLqSI+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgOnZhbHVlPSJ0cnVlIlxuICAgICAgICAgICAgbGFiZWw9IuaYryIvPlxuICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgIDp2YWx1ZT0iZmFsc2UiXG4gICAgICAgICAgICBsYWJlbD0i5ZCmIi8+XG4gICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLmjpLluo8iXG4gICAgICAgIGNsYXNzPSJzb3J0IlxuICAgICAgICBwcm9wPSJzb3J0Ij5cbiAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgdi1tb2RlbC5udW1iZXI9ImNyZWF0ZUZyb20uc29ydCJcbiAgICAgICAgICBzdHlsZT0id2lkdGg6IDc1JSIvPlxuICAgICAgICA8c3Bhbj7mj5DnpLrvvJrmlbDlrZfotorlsI/otorlvoDliY08L3NwYW4+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW0+XG4gICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgIEBjbGljaz0ic3VibWl0Rm9ybShcJ2NyZWF0ZUZyb21cJykiPuaPkOS6pDwvZWwtYnV0dG9uPlxuICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9zdWJDaGFubmVsL2xpc3QiPlxuICAgICAgICAgIDxlbC1idXR0b24+5Y+W5raIPC9lbC1idXR0b24+XG4gICAgICAgIDwvcm91dGVyLWxpbms+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICA8L2VsLWZvcm0+XG4gICAgPGVsLWRpYWxvZ1xuICAgICAgOnZpc2libGUuc3luYz0iZGlhbG9nVmlzaWJsZSJcbiAgICAgIHRpdGxlPSLlm77moIfpgInmi6kiXG4gICAgICB3aWR0aD0iNDAlIlxuICAgICAgQGNsb3NlPSJjbG9zZURpYWxvZyI+XG4gICAgICA8ZGl2XG4gICAgICAgIDppcz0iY29tcG9uZW50TmFtZSJcbiAgICAgICAgQHN1Ym1pdC1pY29uPSJzdWJtaXRJY29uIi8+XG4gICAgPC9lbC1kaWFsb2c+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlXCdcbmltcG9ydCBDaG9vc2VJY29uIGZyb20gXCcuL2Nob29zZUljb25cJ1xuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tIFwnQC9hcGkvZGVtYW5kLWNoYW5uZWxcJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQ2lyY2xlVGl0bGUsXG4gICAgQ2hvb3NlSWNvblxuICB9LFxuICBkYXRhICgpIHtcbiAgICBsZXQgY2hlY2tDaGFubmVsTmFtZUxlbmd0aCA9IChydWxlLCB2YWx1ZSwgY2FsbGJhY2spID0+IHtcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAxMCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKFwn6aKR6YGT5ZCN56ew6ZW/5bqm5LiN6IO96LaF6L+HMTBcJykpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgY3JlYXRlRnJvbToge1xuICAgICAgICBjaGFubmVsX25hbWU6IFwnXCcsXG4gICAgICAgIHBhcmVudF9jaGFubmVsX25hbWU6IFwnXCcsXG4gICAgICAgIHNvcnQ6IFwnXCcsXG4gICAgICAgIGljb25fdXJsOiBcJ1wnLFxuICAgICAgICBjaGFubmVsX3R5cGVfbmFtZTogXCdcJyxcbiAgICAgICAgc3RhdGU6IDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcJ1wnLFxuICAgICAgICBmaXhlZDogZmFsc2UsXG4gICAgICAgIHBhcmVudF9jaGFubmVsaWQ6IFwnXCcsXG4gICAgICAgIGNoYW5uZWxfdHlwZWlkOiBcJ1wnXG4gICAgICB9LFxuICAgICAgcnVsZXM6IHtcbiAgICAgICAgY2hhbm5lbF9uYW1lOiBbXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogXCfor7fovpPlhaXpopHpgZPlkI3np7BcJywgdHJpZ2dlcjogXCdibHVyXCcgfSxcbiAgICAgICAgICB7IHZhbGlkYXRvcjogY2hlY2tDaGFubmVsTmFtZUxlbmd0aCwgdHJpZ2dlcjogXCdjaGFuZ2VcJyB9XG4gICAgICAgIF0sXG4gICAgICAgIHNvcnQ6IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+i+k+WFpeaOkuW6j1wnLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9LFxuICAgICAgICAgIHsgdHlwZTogXCdudW1iZXJcJywgbWVzc2FnZTogXCfmjpLluo/lv4XpobvkuLrmlbDlrZdcJyB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBjaGFubmVsVHlwZUxpc3Q6IFtdLFxuICAgICAgcGFyZW50Q2hhbm5lbExpc3Q6IFtcbiAgICAgICAge1xuICAgICAgICAgIGxhYmVsOiBcJ+aXoFwnLFxuICAgICAgICAgIHZhbHVlOiBcJ1wnXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBkaWFsb2dWaXNpYmxlOiBmYWxzZSxcbiAgICAgIGNvbXBvbmVudE5hbWU6IFwnXCcsXG4gICAgICBmaXhlZERpc2FibGVkOiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBnZXRVcGxvYWRVcmwgKCkge1xuICAgICAgcmV0dXJuIEFjdGlvbnMudXBsb2FkUGljdHVyZSgpXG4gICAgfVxuICB9LFxuICBtb3VudGVkICgpIHtcbiAgICB0aGlzLmdldENoYW5uZWxUeXBlKClcbiAgICB0aGlzLmdldFBhcmVudENoYW5uZWwoKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgc3VibWl0Rm9ybSAoZm9ybU5hbWUpIHtcbiAgICAgIHRoaXMuJHJlZnNbZm9ybU5hbWVdLnZhbGlkYXRlKCh2YWxpZCkgPT4ge1xuICAgICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgICB0aGlzLmNoYW5uZWxUeXBlTGlzdC5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXRlbS52YWx1ZSA9PT0gdGhpcy5jcmVhdGVGcm9tLmNoYW5uZWxfdHlwZWlkKSB7XG4gICAgICAgICAgICAgIHRoaXMuY3JlYXRlRnJvbS5jaGFubmVsX3R5cGVfbmFtZSA9IGl0ZW0ubGFiZWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIHRoaXMucGFyZW50Q2hhbm5lbExpc3QuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICAgICAgaWYgKGl0ZW0udmFsdWUgPT09IHRoaXMuY3JlYXRlRnJvbS5wYXJlbnRfY2hhbm5lbGlkKSB7XG4gICAgICAgICAgICAgIHRoaXMuY3JlYXRlRnJvbS5wYXJlbnRfY2hhbm5lbF9uYW1lID0gaXRlbS5sYWJlbFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgQWN0aW9ucy5hZGRDaGFubmVsKHtcbiAgICAgICAgICAgIFwnY2hhbm5lbFwnOiB7XG4gICAgICAgICAgICAgIFwncGFyZW50X2NoYW5uZWxpZFwnOiB0aGlzLmNyZWF0ZUZyb20ucGFyZW50X2NoYW5uZWxpZCxcbiAgICAgICAgICAgICAgXCdwYXJlbnRfY2hhbm5lbF9uYW1lXCc6IHRoaXMuY3JlYXRlRnJvbS5wYXJlbnRfY2hhbm5lbF9uYW1lLFxuICAgICAgICAgICAgICBcJ2NoYW5uZWxfbmFtZVwnOiB0aGlzLmNyZWF0ZUZyb20uY2hhbm5lbF9uYW1lLFxuICAgICAgICAgICAgICBcJ2NoYW5uZWxfdHlwZWlkXCc6IHRoaXMuY3JlYXRlRnJvbS5jaGFubmVsX3R5cGVpZCxcbiAgICAgICAgICAgICAgXCdjaGFubmVsX3R5cGVfbmFtZVwnOiB0aGlzLmNyZWF0ZUZyb20uY2hhbm5lbF90eXBlX25hbWUsXG4gICAgICAgICAgICAgIFwnaWNvbl91cmxcJzogdGhpcy5jcmVhdGVGcm9tLmljb25fdXJsLFxuICAgICAgICAgICAgICBcJ3N0YXRlXCc6IHRoaXMuY3JlYXRlRnJvbS5zdGF0ZSxcbiAgICAgICAgICAgICAgXCdkZXNjcmlwdGlvblwnOiB0aGlzLmNyZWF0ZUZyb20uZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgIFwnZml4ZWRcJzogdGhpcy5jcmVhdGVGcm9tLmZpeGVkLFxuICAgICAgICAgICAgICBcJ3NvcnRcJzogdGhpcy5jcmVhdGVGcm9tLnNvcnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6IFwnL3N1YkNoYW5uZWwvbGlzdFwnfSlcbiAgICAgICAgICAgICAgdGhpcy4kbm90aWZ5KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCfpgJrnn6VcJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+a3u+WKoOaIkOWKn1wnLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcJ2Vycm9yIHN1Ym1pdCEhXCcpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBoYW5kbGVQY0F2YXRhclN1Y2Nlc3MgKHJlcywgZmlsZSkge1xuICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgbGV0IGltYWdlVXJsID0gcmVzLnJlc3VsdFxuICAgICAgICB0aGlzLmNyZWF0ZUZyb20uaWNvbl91cmwgPSBpbWFnZVVybFxuICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlQXZhdGFyVXBsb2FkIChmaWxlKSB7XG4gICAgICBsZXQgaW1hZ2VPYmogPSB7XG4gICAgICAgIFwnaW1hZ2UvanBlZ1wnOiB0cnVlLFxuICAgICAgICBcJ2ltYWdlL3BuZ1wnOiB0cnVlLFxuICAgICAgICBcJ2ltYWdlL2pwZ1wnOiB0cnVlXG4gICAgICB9XG4gICAgICBjb25zdCBpc0ltYWdlID0gZmlsZS50eXBlIGluIGltYWdlT2JqXG4gICAgICBjb25zdCBpc0x0Mk0gPSBmaWxlLnNpemUgLyAxMDI0IC8gMTAyNCA8IDJcbiAgICAgIGlmICghaXNJbWFnZSkge1xuICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKFwn6K+35LiK5Lyg5Zu+54mH5qC85byP55qE5paH5Lu2IVwnKVxuICAgICAgfVxuICAgICAgaWYgKCFpc0x0Mk0pIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihcJ+S4iuS8oOWbvueJh+Wkp+Wwj+S4jeiDvei2hei/hyAyTUIhXCcpXG4gICAgICB9XG4gICAgICByZXR1cm4gaXNJbWFnZSAmJiBpc0x0Mk1cbiAgICB9LFxuICAgIC8qKiDojrflj5bpopHpgZPnsbvliKsgKiovXG4gICAgZ2V0Q2hhbm5lbFR5cGUgKCkge1xuICAgICAgQWN0aW9ucy5nZXRDaGFubmVsVHlwZSgpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhXG4gICAgICAgIGlmIChkYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCByZXN1bHQgPSBkYXRhLnJlc3VsdFxuICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgLyoqIOm7mOiupOmAieaLqeS4gOS4quexu+WeiyAqKi9cbiAgICAgICAgICAgICAgdGhpcy5jcmVhdGVGcm9tLmNoYW5uZWxfdHlwZWlkID0gaXRlbS5jaGFubmVsX3R5cGVpZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG5ld0l0ZW0gPSB7fVxuICAgICAgICAgICAgbmV3SXRlbS5sYWJlbCA9IGl0ZW0uY2hhbm5lbF90eXBlX25hbWVcbiAgICAgICAgICAgIG5ld0l0ZW0udmFsdWUgPSBpdGVtLmNoYW5uZWxfdHlwZWlkXG4gICAgICAgICAgICB0aGlzLmNoYW5uZWxUeXBlTGlzdC5wdXNoKG5ld0l0ZW0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDojrflj5bniLbpopHpgZMgKiovXG4gICAgZ2V0UGFyZW50Q2hhbm5lbCAoKSB7XG4gICAgICBBY3Rpb25zLmxpc3RVc2FibGVQYXJlbnRDaGFubmVsKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGFcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoYW5uZWxpZCAhPT0gaXRlbS5jaGFubmVsaWQpIHtcbiAgICAgICAgICAgICAgbGV0IG5ld0l0ZW0gPSB7fVxuICAgICAgICAgICAgICBuZXdJdGVtLmxhYmVsID0gaXRlbS5jaGFubmVsX25hbWVcbiAgICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uY2hhbm5lbGlkXG4gICAgICAgICAgICAgIHRoaXMucGFyZW50Q2hhbm5lbExpc3QucHVzaChuZXdJdGVtKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog6YCJ5Y+W5Zu+5qCHICoqL1xuICAgIGNob29zZUljb24gKCkge1xuICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gdHJ1ZVxuICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gXCdDaG9vc2VJY29uXCdcbiAgICB9LFxuICAgIGNsb3NlRGlhbG9nICgpIHtcbiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IGZhbHNlXG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ1wnXG4gICAgfSxcbiAgICAvKiog56Gu5a6a5Zu+5qCHICoqL1xuICAgIHN1Ym1pdEljb24gKGljb25VcmwpIHtcbiAgICAgIHRoaXMuY3JlYXRlRnJvbS5pY29uX3VybCA9IGljb25VcmxcbiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IGZhbHNlXG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ1wnXG4gICAgfSxcbiAgICAvKiog56aB55So5piv5ZCm5Zu65a6a5oyJ6ZKuLCDlubborqnlhbbpu5jorqTkuLrlkKYgKiovXG4gICAgZGlzYWJsZUlzRml4ZWQgKCkge1xuICAgICAgaWYgKHRoaXMuY3JlYXRlRnJvbS5wYXJlbnRfY2hhbm5lbGlkKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlRnJvbS5maXhlZCA9IGZhbHNlXG4gICAgICAgIHRoaXMuZml4ZWREaXNhYmxlZCA9IHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZml4ZWREaXNhYmxlZCA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5jaWNsZS1jb250cm9sbGVyIHtcbiAgICBtYXJnaW4tdG9wOiA0JTtcbiAgfVxuICAuY3JlYXRlIC5zb3J0IHNwYW57XG4gICAgY29sb3I6ICM5MDkwOTA7XG4gIH1cbjwvc3R5bGU+XG4nXSxzb3VyY2VSb290OiIifV0pfSwiVy9RMyI6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoInZyZzUiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiNGZiMjU0MTUiLGEsITEse30pfSxXMDM3OmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCIyNzNzIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjE5MTEzMGQ4IixhLCExLHt9KX0sV0lnQzpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgibTI2YyIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCIzMzRmYzI0MyIsYSwhMSx7fSl9LFdaekE6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoIm5lNVoiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiNjgyYmRkNTIiLGEsITEse30pfSxXZFFROmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJScU5pIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjViZTYyM2JmIixhLCExLHt9KX0sV3paRjpmdW5jdGlvbihlLG4pe30sIlgra3kiOmZ1bmN0aW9uKGUsbil7fSxYTkR0OmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4udGl0bGUtY2xhc3NbZGF0YS12LTY4NGZlMTEyXXtcbiAgbWFyZ2luLWxlZnQ6IDI0cHg7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZU1hbnVzY3JpcHQvc3JjL2NvbXBvbmVudHMvbWFuYWdlTWFudXNjcmlwdC9zZXR0aW5nTWFudS52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBdUtBO0VBQ0Esa0JBQUE7Q0FDQSIsZmlsZToic2V0dGluZ01hbnUudnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdj5cbiAgICA8ZGl2IGNsYXNzPSJ0aXRsZS1jbGFzcyI+XG4gICAgICDnqL/ku7bkuLvpopg6XG4gICAgICA8c3BhbiB2LWlmPSIhaXNTaG93SW5wdXQiPlxuICAgICAgICB7eyBzdWJtaXRNYW51VGl0bGUgfX1cbiAgICAgICAgPGFcbiAgICAgICAgICBzdHlsZT0iY29sb3I6Ymx1ZTtjdXJzb3I6IHBvaW50ZXIiXG4gICAgICAgICAgQGNsaWNrPSJzaG93SW5wdXQiPuS/ruaUuTwvYT5cbiAgICAgIDwvc3Bhbj5cbiAgICAgIDxzcGFuIHYtaWY9ImlzU2hvd0lucHV0Ij5cbiAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgcmVmPSJtYW51SW5wdXQiXG4gICAgICAgICAgdi1tb2RlbD0ic3VibWl0TWFudVRpdGxlIlxuICAgICAgICAgIHN0eWxlPSJ3aWR0aDo0MDBweCJcbiAgICAgICAgICB0eXBlPSJ0ZXh0IlxuICAgICAgICAgIEBibHVyPSJoaWRlSW5wdXRBbmRTdWJtaXQiLz5cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1saXN0Ij5cbiAgICAgIDxlbC10YWJsZVxuICAgICAgICByZWY9ImNoYW5uZWxUYWJsZSJcbiAgICAgICAgOmRhdGE9InRhYmxlRGF0YSJcbiAgICAgICAgc3RyaXBlXG4gICAgICAgIGNsYXNzPSJ3aG9sZS10YWJsZSJcbiAgICAgICAgbWluLWhlaWdodD0iNDAwIj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIHByb3A9ImNoYW5uZWxfbmFtZSJcbiAgICAgICAgICBsYWJlbD0i5b2S5bGe6aKR6YGTIlxuICAgICAgICAgIGFsaWduPSJsZWZ0IlxuICAgICAgICAgIGZpeGVkPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8ZWwtY2hlY2tib3hcbiAgICAgICAgICAgICAgdi1tb2RlbD0ic2NvcGUucm93LmlzQ2hlY2tlZCJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2V0Q2hhbm5lbEJ0bihzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAge3sgc2NvcGUucm93LmNoYW5uZWxfbmFtZSB9fVxuICAgICAgICAgICAgPC9lbC1jaGVja2JveD5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIHByb3A9InBhcmVudF9jaGFubmVsX25hbWUiXG4gICAgICAgICAgbGFiZWw9IuW9kuWxnuS4k+mimCJcbiAgICAgICAgICBhbGlnbj0ibGVmdCJcbiAgICAgICAgICBmaXhlZD5cbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPHBcbiAgICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gc2NvcGUucm93LnNwZWNpYWxMaXN0IlxuICAgICAgICAgICAgICA6a2V5PSJpbmRleCI+XG4gICAgICAgICAgICAgIDxlbC1jaGVja2JveFxuICAgICAgICAgICAgICAgIHYtbW9kZWw9Iml0ZW0uaXNDaGVja2VkIlxuICAgICAgICAgICAgICAgIDp0aXRsZT0iaXRlbS5zcGVjaWFsX25hbWUiXG4gICAgICAgICAgICAgICAgQGNoYW5nZT0ic2V0U3BlY2lhbEJ0bihpdGVtKSI+XG4gICAgICAgICAgICAgICAge3sgc3ViU3RyU3BlY2lhbExlbmd0aChpdGVtLnNwZWNpYWxfbmFtZSkgfX1cbiAgICAgICAgICAgICAgPC9lbC1jaGVja2JveD5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgIDwvZWwtdGFibGU+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9tYW51U2NyaXB0QXBpXCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcHJvcHM6IHtcbiAgICBzZXR0aW5nQXJ0aWNsZUlkOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBcJzBcJ1xuICAgIH0sXG4gICAgbWFudVRpdGxlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBcJ+aXoFwnXG4gICAgfVxuICB9LFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGFibGVEYXRhOiBbXSxcbiAgICAgIGNoYW5uZWxHcm91cDogW10sXG4gICAgICBpc1Nob3dJbnB1dDogZmFsc2UsXG4gICAgICBzdWJtaXRNYW51VGl0bGU6IHRoaXMubWFudVRpdGxlXG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIHN1YlN0clNwZWNpYWxMZW5ndGggKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICAgIGlmIChjb250ZW50Lmxlbmd0aCA+IDIzKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRlbnQuc3Vic3RyaW5nKDAsIDIzKSArIFwnLi4uXCdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gY29udGVudFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBtb3VudGVkICgpIHtcbiAgICB0aGlzLmdldFNldHRpbmdNYW51TGlzdCgpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBnZXRTZXR0aW5nTWFudUxpc3QgKCkge1xuICAgICAgQWN0aW9ucy5saXN0VXNhYmxlQ2hhbm5lbEFuZFNwZWNhbCh7XG4gICAgICAgIFwnYXJ0aWNsZVwnOiB7XG4gICAgICAgICAgXCdhcnRpY2xlaWRcJzogdGhpcy5zZXR0aW5nQXJ0aWNsZUlkXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICB0aGlzLnRhYmxlRGF0YSA9IGRhdGFcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDorr7nva7miYDlsZ7popHpgZPnmoTphY3nva4gKiovXG4gICAgc2V0Q2hhbm5lbEJ0biAocm93KSB7XG4gICAgICBBY3Rpb25zLmNoYW5uZWxDaGVja2JveCh7XG4gICAgICAgIFwnYXJ0aWNsZWlkXCc6IHRoaXMuc2V0dGluZ0FydGljbGVJZCxcbiAgICAgICAgXCdjaGFubmVsaWRcJzogcm93LmNoYW5uZWxpZCxcbiAgICAgICAgXCdzYXZlT3JEZWxcJzogcm93LmlzQ2hlY2tlZFxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwn6YWN572u5oiQ5YqfIVwnXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDphY3nva7kuJPpopjnmoTngrnlh7sgKiovXG4gICAgc2V0U3BlY2lhbEJ0biAoaXRlbSkge1xuICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgQWN0aW9ucy5zcGVjaWFsQ2hlY2tib3goe1xuICAgICAgICAgIFwnYXJ0aWNsZWlkXCc6IHRoaXMuc2V0dGluZ0FydGljbGVJZCxcbiAgICAgICAgICBcJ3NwZWNpYWxpZFwnOiBpdGVtLnNwZWNpYWxpZCxcbiAgICAgICAgICBcJ3NhdmVPckRlbFwnOiBpdGVtLmlzQ2hlY2tlZFxuICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+mFjee9ruaIkOWKnyFcJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICBzaG93SW5wdXQgKCkge1xuICAgICAgdGhpcy5pc1Nob3dJbnB1dCA9IHRydWVcbiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy4kcmVmcy5tYW51SW5wdXQuZm9jdXMoKVxuICAgICAgfSlcbiAgICB9LFxuICAgIGhpZGVJbnB1dEFuZFN1Ym1pdCAoKSB7XG4gICAgICB0aGlzLmlzU2hvd0lucHV0ID0gZmFsc2VcbiAgICAgIEFjdGlvbnMudXBkYXRhTWFudU5hbWUoe1xuICAgICAgICBcJ2FydGljbGVcJzoge1xuICAgICAgICAgIFwnYXJ0aWNsZWlkXCc6IHRoaXMuc2V0dGluZ0FydGljbGVJZCxcbiAgICAgICAgICBcJ3RpdGxlXCc6IHRoaXMuc3VibWl0TWFudVRpdGxlXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgbWVzc2FnZTogXCfkv67mlLnmiJDlip8hXCdcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLnRpdGxlLWNsYXNze1xuICAgIG1hcmdpbi1sZWZ0OiAyNHB4O1xuICB9XG48L3N0eWxlPlxuPHN0eWxlPlxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LFhWenY6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi5zZWFyY2gtZm9ybS1jb250YWluZXIgLmVsLXJhbmdlLWVkaXRvciAuZWwtcmFuZ2UtaW5wdXR7XG4gIHdpZHRoOjUwJTtcbn1cbi50b3BpYyAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICB3aWR0aDogNjAlO1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VUb3BpYy9zcmMvY29tcG9uZW50cy9tYW5hZ2VUb3BpYy90b3BpY0xpc3QudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQW9kQTtFQUNBLFVBQUE7Q0FDQTtBQUNBO0VBQ0EsV0FBQTtDQUNBIixmaWxlOiJ0b3BpY0xpc3QudnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0idG9waWMiPlxuICAgIDxkaXY+XG4gICAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICAgIHRpdGxlLW5hbWU9IuS4k+mimOeuoeeQhiJcbiAgICAgICAgY2xhc3M9ImNpY2xlLWNvbnRyb2xsZXIiXG4gICAgICAvPlxuICAgICAgPGRpdiBjbGFzcz0ic2VhcmNoLWZvcm0tY29udGFpbmVyIj5cbiAgICAgICAgPGVsLWZvcm1cbiAgICAgICAgICA6aW5saW5lPSJ0cnVlIlxuICAgICAgICAgIDptb2RlbD0idG9waWNGb3JtIlxuICAgICAgICAgIGNsYXNzPSJkZW1vLWZvcm0taW5saW5lIj5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLpopHpgZMiPlxuICAgICAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgICAgICB2LW1vZGVsPSJ0b3BpY0Zvcm0uY2hhbm5lbGlkIlxuICAgICAgICAgICAgICBmaWx0ZXJhYmxlXG4gICAgICAgICAgICAgIGNsZWFyYWJsZVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgICAgICBAY2xlYXI9InNlYXJjaFNwZWNpYWwiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaFNwZWNpYWwiPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gbGlzdFVzYWJsZUNoYW5uZWwiXG4gICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgICAgICAgOnZhbHVlPSJpdGVtLnZhbHVlIlxuICAgICAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5LiT6aKYIj5cbiAgICAgICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgICAgICB2LW1vZGVsPSJ0b3BpY0Zvcm0uc3BlY2lhbF9uYW1lIi8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9IueKtuaAgSJcbiAgICAgICAgICAgIGNsYXNzPSJzZWFyY2gtbGVmdCI+XG4gICAgICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgICAgIHYtbW9kZWw9InRvcGljRm9ybS5zdGF0ZSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IiJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoU3BlY2lhbCI+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICB2YWx1ZT0iIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlhajpg6giLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMSJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5b6F5LiK57q/Ii8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9IjIiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuW3suS4iue6vyIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPSIzIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLov4fmnJ8iLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMCJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5YGc55SoIi8+XG4gICAgICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i5byA5aeL5pe26Ze0IlxuICAgICAgICAgICAgY2xhc3M9ImRhdGUtbGVmdCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPSJ0b3BpY0Zvcm0uc3RhcnREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9InRvcGljRm9ybS5zdGFydERhdGUiXG4gICAgICAgICAgICAgIHR5cGU9ImRhdGV0aW1lIlxuICAgICAgICAgICAgICBmb3JtYXQ9Inl5eXktTU0tZGQgSEg6bW0iXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLpgInmi6nml6XmnJ8iXG4gICAgICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaFNwZWNpYWwiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i57uT5p2f5pe26Ze0IlxuICAgICAgICAgICAgY2xhc3M9ImRhdGUtbGVmdCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPSJ0b3BpY0Zvcm0uZW5kRGF0ZSB8IEZvcm1hdERhdGUoXCd5eXl5LU1NLWRkIGhoOm1tXCcpIlxuICAgICAgICAgICAgICB2LW1vZGVsPSJ0b3BpY0Zvcm0uZW5kRGF0ZSJcbiAgICAgICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXpeacnyJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoU3BlY2lhbCIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IDQwcHgiXG4gICAgICAgICAgICBAY2xpY2s9InNlYXJjaFNwZWNpYWwiPlxuICAgICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICA8L2VsLWJ1dHRvbj5cbiAgICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9tYW5hZ2VUb3BpYy9jcmVhdGUiPlxuICAgICAgICAgICAgPGVsLWJ1dHRvbiB0eXBlPSJwcmltYXJ5Ij5cbiAgICAgICAgICAgICAg5re75Yqg5LiT6aKYXG4gICAgICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLXBsdXMgZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICAgIDwvcm91dGVyLWxpbms+XG4gICAgICAgIDwvZWwtZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9InRhYmxlLWxpc3QiPlxuICAgICAgPGVsLXRhYmxlXG4gICAgICAgIHJlZj0iY2hhbm5lbFRhYmxlIlxuICAgICAgICA6ZGF0YT0idGFibGVEYXRhIlxuICAgICAgICBzdHJpcGVcbiAgICAgICAgY2xhc3M9Indob2xlLXRhYmxlIlxuICAgICAgICBtaW4taGVpZ2h0PSI0MDAiXG4gICAgICAgIEBjZWxsLWNsaWNrPSJjZWxsQ2xpY2siXG4gICAgICAgIEBjZWxsLW1vdXNlLWxlYXZlPSJjZWxsTW91c2VMZWF2ZSI+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiB0YWJsZUhlYWRlciJcbiAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICA6cHJvcD0iaXRlbS5wcm9wIlxuICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCJcbiAgICAgICAgICA6d2lkdGg9Iml0ZW0ud2lkdGgiXG4gICAgICAgICAgOmZvcm1hdHRlcj0iaXRlbS5mb3JtYXR0ZXIiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICBmaXhlZFxuICAgICAgICAgIHNob3ctb3ZlcmZsb3ctdG9vbHRpcFxuICAgICAgICAvPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgZml4ZWQ9InJpZ2h0IlxuICAgICAgICAgIGxhYmVsPSLmk43kvZwiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICB3aWR0aD0iMTAwIj5cbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgY29udGVudD0i5L+u5pS554q25oCBIlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcCI+XG4gICAgICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IlxuICAgICAgICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgICAgICAgIGljb249ImVsLWljb24tcmVtb3ZlLW91dGxpbmUiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJjaGFuZ2VTdGF0ZShzY29wZS5yb3cpIi8+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9InRleHQiXG4gICAgICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgICAgICBpY29uPSJlbC1pY29uLWVkaXQiXG4gICAgICAgICAgICAgIEBjbGljaz0iaGFuZGxlRWRpdChzY29wZS5yb3cpIi8+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9InRleHQiXG4gICAgICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgICAgICBpY29uPSJlbC1pY29uLWRlbGV0ZSJcbiAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVEZWxldGUoc2NvcGUucm93KSIvPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgPC9lbC10YWJsZT5cbiAgICAgIDxkaXYgY2xhc3M9InBhZ2luYXRpb24iPlxuICAgICAgICA8ZWwtcGFnaW5hdGlvblxuICAgICAgICAgIDp0b3RhbD0idG90YWwiXG4gICAgICAgICAgOnBhZ2Utc2l6ZXM9IlsxMCwgMjAsIDMwLCA0MF0iXG4gICAgICAgICAgOmN1cnJlbnQtcGFnZT0icGFnZU5vIlxuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICBsYXlvdXQ9InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPSJoYW5kbGVTaXplQ2hhbmdlIlxuICAgICAgICAgIEBjdXJyZW50LWNoYW5nZT0iaGFuZGxlQ3VycmVudENoYW5nZSIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlXCdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL3RvcGljQXBpXCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlXG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0b3BpY0Zvcm06IHtcbiAgICAgICAgY2hhbm5lbGlkOiBcJ1wnLFxuICAgICAgICBjaGFubmVsX25hbWU6IFwnXCcsXG4gICAgICAgIHNwZWNpYWxfbmFtZTogXCdcJyxcbiAgICAgICAgZGF0ZXJhbmdlOiBbXSxcbiAgICAgICAgc3RhdGU6IFwnXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJ1xuICAgICAgfSxcbiAgICAgIGNsaWNrQ2VsbEluZGV4OiAtMSxcbiAgICAgIHRhYmxlSGVhZGVyOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3NwZWNpYWxfbmFtZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+S4k+mimOWQjeensFwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3VwZGF0ZXRpbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfmm7TmlrDml6XmnJ9cJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10oY2VsbFZhbHVlLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2NoYW5uZWxfbmFtZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+W9kuWxnumikemBk1wnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3NwZWNpYWxfaGVhZF91cmxcJyxcbiAgICAgICAgICBsYWJlbDogXCflm77niYdcJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxpbWcgY2xhc3M9XCd0b3BpYy10YWJsZS1waWNcJyBzcmM9e2NlbGxWYWx1ZX0vPlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnZXhwaXJ5X2RhdGVfc3RhcnRcJyxcbiAgICAgICAgICBsYWJlbDogXCfmnInmlYjmnJ8t5aeLXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdleHBpcnlfZGF0ZV9lbmRcJyxcbiAgICAgICAgICBsYWJlbDogXCfmnInmlYjmnJ8t57uIXCcsXG4gICAgICAgICAgd2lkdGg6IDEyMCxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10oY2VsbFZhbHVlLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3Nob3dTdGF0ZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+eKtuaAgVwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3NvcnRcJyxcbiAgICAgICAgICBsYWJlbDogXCfmjpLluo9cJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSB0aGlzLmNsaWNrQ2VsbEluZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybiA8aW5wdXQgdHlwZT1cJ3RleHRcJyBjbGFzcz1cJ3NlbGYtc29ydFwnIGlkPXtpbmRleH0gdmFsdWU9IHtjZWxsVmFsdWV9IGF1dG9mb2N1cz0iYXV0b2ZvY3VzIiAvPlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDxzcGFuIGNsYXNzPVwnc29ydC1jb250YWluZXJcJyBkYXRhLWlkPXtpbmRleH0+e2NlbGxWYWx1ZX08L3NwYW4+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgdGFibGVEYXRhOiBbXSxcbiAgICAgIHNvcnRWYWx1ZTogLTEsXG4gICAgICBwYWdlTm86IDEsXG4gICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICB0b3RhbDogMCxcbiAgICAgIGxpc3RVc2FibGVDaGFubmVsOiBbXSwgLy8g5Y+v55So55qE6aKR6YGT5YiX6KGoXG4gICAgICBzZWxlY3RTcGVjaWFsSWQ6IFwnXCcgLy8g54K55Ye75o6S5bqP6KGM55qEY2hhbm5lbGlkXG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIFwndG9waWNGb3JtLnN0YXRlXCcgKCkge1xuICAgICAgdGhpcy5zZWFyY2hTcGVjaWFsKClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIC8qKiDojrflj5bkuJPpopjliJfooaggKiovXG4gICAgdGhpcy5nZXRUb3BpY0xpc3QoKVxuICAgIC8qKiDojrflj5blj6/nlKjpopHpgZPliJfooagqKi9cbiAgICB0aGlzLmdldExpc3RVc2FibGVDaGFubmVsKClcblxuICAgIHRoaXMuJHJvb3QuZXZlbnRIdWIuJG9uKFwncmVzZXQtb3B0aW9uc1wnLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlc2V0T3B0aW9ucygpXG4gICAgfSlcbiAgfSxcbiAgYWN0aXZhdGVkICgpIHtcbiAgICBsZXQgbWV0YSA9IHRoaXMuJHJvdXRlLm1ldGFcbiAgICBpZiAobWV0YS5oYXNPd25Qcm9wZXJ0eShcJ3JlZnJlc2hcJykgJiYgbWV0YS5yZWZyZXNoKSB7XG4gICAgICB0aGlzLmdldFRvcGljTGlzdCgpXG4gICAgICBkZWxldGUgdGhpcy4kcm91dGUubWV0YS5yZWZyZXNoXG4gICAgfVxuICB9LFxuICBiZWZvcmVSb3V0ZUxlYXZlICh0bywgZnJvbSwgbmV4dCkge1xuICAgIGlmICh0by5wYXRoID09PSBcJy9tYW5hZ2VUb3BpYy9jcmVhdGVcJykge1xuICAgICAgdGhpcy5yZXNldE9wdGlvbnMoKVxuICAgIH1cbiAgICBuZXh0KClcbiAgfSxcbiAgYmVmb3JlRGVzdHJveSAoKSB7XG4gICAgdGhpcy4kcm9vdC5ldmVudEh1Yi4kb2ZmKFwncmVzZXQtb3B0aW9uc1wnKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgcmVzZXRPcHRpb25zICgpIHtcbiAgICAgIHRoaXMudG9waWNGb3JtID0ge1xuICAgICAgICBjaGFubmVsaWQ6IFwnXCcsXG4gICAgICAgIGNoYW5uZWxfbmFtZTogXCdcJyxcbiAgICAgICAgc3BlY2lhbF9uYW1lOiBcJ1wnLFxuICAgICAgICBkYXRlcmFuZ2U6IFtdLFxuICAgICAgICBzdGF0ZTogXCdcJyxcbiAgICAgICAgc3RhcnREYXRlOiBcJ1wnLFxuICAgICAgICBlbmREYXRlOiBcJ1wnXG4gICAgICB9XG4gICAgICB0aGlzLnBhZ2VObyA9IDFcbiAgICAgIHRoaXMuZ2V0VG9waWNMaXN0KClcbiAgICB9LFxuICAgIGhhbmRsZVNpemVDaGFuZ2UgKHBhZ2VTaXplKSB7XG4gICAgICB0aGlzLnBhZ2VTaXplID0gcGFnZVNpemVcbiAgICAgIHRoaXMuc2VhcmNoU3BlY2lhbCgpXG4gICAgfSxcbiAgICBoYW5kbGVDdXJyZW50Q2hhbmdlIChwYWdlSW5kZXgpIHtcbiAgICAgIHRoaXMucGFnZU5vID0gcGFnZUluZGV4XG4gICAgICB0aGlzLmdldFRvcGljTGlzdCgpXG4gICAgfSxcbiAgICB0b2dnbGVBbGxTZWxlY3Rpb24gKGUpIHtcbiAgICAgIHRoaXMuJHJlZnMuY2hhbm5lbFRhYmxlLnRvZ2dsZUFsbFNlbGVjdGlvbigpXG4gICAgfSxcbiAgICAvKiog5Y2V5YWD5qC86KKr54K55Ye7ICoqL1xuICAgIGNlbGxDbGljayAocm93LCBjb2x1bW4sIGNlbGwsIGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcJ3NvcnQtY29udGFpbmVyXCcpKSB7XG4gICAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgICBsZXQgaWQgPSBldmVudC50YXJnZXQuZGF0YXNldC5pZFxuICAgICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgdGhpcy5jbGlja0NlbGxJbmRleCA9IHBhcnNlSW50KGlkKVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICBsZXQgaW5wdXRFbGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcJy5lbC10b29sdGlwID4gaW5wdXQuc2VsZi1zb3J0XCcpXG4gICAgICAgICAgICBpbnB1dEVsZXMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdFNwZWNpYWxJZCA9IHJvdy5zcGVjaWFsaWRcbiAgICAgICAgICAgICAgICBlbGVtZW50LmZvY3VzKClcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm9ua2V5dXAgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3J0VmFsdWUgPSBwYXJzZUludChlbGVtZW50LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgICAgbWVzc2FnZTogXCflkK/nlKjnirbmgIHkuIvkuI3og73mjpLluo8hXCdcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog56a75byA5Y2V5YWD5qC8ICoqL1xuICAgIGNlbGxNb3VzZUxlYXZlIChyb3cpIHtcbiAgICAgIC8qKiDph43nva7ljZXlhYPmoLznirbmgIEgKiovXG4gICAgICB0aGlzLmNsaWNrQ2VsbEluZGV4ID0gLTFcbiAgICAgIGlmICh0aGlzLnNvcnRWYWx1ZSA9PT0gLTEgfHwgdGhpcy5zZWxlY3RTcGVjaWFsSWQgIT09IHJvdy5zcGVjaWFsaWQpIHJldHVybiBmYWxzZVxuICAgICAgLyoqIOS/ruaUueaOkuW6jyAqKi9cbiAgICAgIEFjdGlvbnMuY2hhbmdlU3BlY2lhbFNvcnQoe1xuICAgICAgICBcJ3NwZWNpYWxcJzoge1xuICAgICAgICAgIFwnc3BlY2lhbGlkXCc6IHJvdy5zcGVjaWFsaWQsXG4gICAgICAgICAgXCdzb3J0XCc6IHRoaXMuc29ydFZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgIHRoaXMuZ2V0VG9waWNMaXN0KClcbiAgICAgICAgICB0aGlzLnNvcnRWYWx1ZSA9IC0xXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog6I635Y+W5LiT6aKY5YiX6KGoICoqL1xuICAgIGdldFRvcGljTGlzdCAoKSB7XG4gICAgICBsZXQgdGltZVN0YXJ0ID0gdGhpcy50b3BpY0Zvcm0uc3RhcnREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy50b3BpY0Zvcm0uc3RhcnREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBsZXQgdGltZUVuZCA9IHRoaXMudG9waWNGb3JtLmVuZERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLnRvcGljRm9ybS5lbmREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBBY3Rpb25zLmdldFRvcGljTGlzdCh7XG4gICAgICAgIFwncGFnZU5vXCc6IHRoaXMucGFnZU5vLFxuICAgICAgICBcJ3BhZ2VTaXplXCc6IHRoaXMucGFnZVNpemUsXG4gICAgICAgIFwnY2hhbm5lbGlkXCc6IHRoaXMudG9waWNGb3JtLmNoYW5uZWxpZCxcbiAgICAgICAgXCdzcGVjaWFsX25hbWVcJzogdGhpcy50b3BpY0Zvcm0uc3BlY2lhbF9uYW1lLFxuICAgICAgICBcJ3N0YXRlXCc6IHRoaXMudG9waWNGb3JtLnN0YXRlLFxuICAgICAgICBcJ3RpbWVTdGFydFwnOiB0aW1lU3RhcnQsXG4gICAgICAgIFwndGltZUVuZFwnOiB0aW1lRW5kXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBsaXN0RGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gbGlzdERhdGEubGlzdFxuICAgICAgICAgIHRoaXMudG90YWwgPSBsaXN0RGF0YS50b3RhbFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOiOt+WPluWNleWFg+agvOaVsOaNriAqKi9cbiAgICBoYW5kbGVFZGl0OiBmdW5jdGlvbiAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCdzcGVjaWFsaWRcJywgcm93LnNwZWNpYWxpZClcbiAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6IFwnL21hbmFnZVRvcGljL2VkaXRcJ30pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCflkK/nlKjnirbmgIHkuIvkuI3lj6/nvJbovpEhXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDkv67mlLnnirbmgIEgKiovXG4gICAgY2hhbmdlU3RhdGUgKHJvdykge1xuICAgICAgbGV0IHN0YXRlID0gMFxuICAgICAgaWYgKHJvdy5zdGF0ZSA9PT0gMSkge1xuICAgICAgICBzdGF0ZSA9IDBcbiAgICAgIH0gZWxzZSBpZiAocm93LnN0YXRlID09PSAwKSB7XG4gICAgICAgIHN0YXRlID0gMVxuICAgICAgfVxuICAgICAgQWN0aW9ucy5jaGFuZ2VTcGVjaWFsU3RhdGUoe1xuICAgICAgICBcJ3NwZWNpYWxcJzoge1xuICAgICAgICAgIFwnc3BlY2lhbGlkXCc6IHJvdy5zcGVjaWFsaWQsXG4gICAgICAgICAgXCdzdGF0ZVwnOiBzdGF0ZVxuICAgICAgICB9XG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogXCfkv67mlLnnirbmgIHkuLrlgZznlKhcJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+S/ruaUueeKtuaAgeS4uuWQr+eUqFwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmdldFRvcGljTGlzdCgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog5Yig6Zmk5LiT6aKYICoqL1xuICAgIGhhbmRsZURlbGV0ZSAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIHRoaXMuJGNvbmZpcm0oXCfmmK/lkKbliKDpmaQiXCcgKyByb3cuc3BlY2lhbF9uYW1lICsgXCciP1wnLCBcJ+aPkOekulwnLCB7XG4gICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwn56Gu5a6aXCcsXG4gICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCflj5bmtohcJyxcbiAgICAgICAgICB0eXBlOiBcJ3dhcm5pbmdcJ1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICBBY3Rpb25zLmRlbGV0ZVNwZWNpYWwoe1xuICAgICAgICAgICAgXCdzcGVjaWFsXCc6IHtcbiAgICAgICAgICAgICAgXCdzcGVjaWFsaWRcJzogcm93LnNwZWNpYWxpZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+WIoOmZpOaIkOWKnyFcJ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nZXRUb3BpY0xpc3QoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+WQr+eUqOeKtuaAgeS4i+S4jeWPr+WIoOmZpCFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOaQnOe0ouS4k+mimCAqKi9cbiAgICBzZWFyY2hTcGVjaWFsICgpIHtcbiAgICAgIHRoaXMucGFnZU5vID0gMVxuICAgICAgdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnc3dhcFRpbWVcJ10odGhpcy50b3BpY0Zvcm0pXG4gICAgICB0aGlzLmdldFRvcGljTGlzdCgpXG4gICAgfSxcbiAgICBnZXRMaXN0VXNhYmxlQ2hhbm5lbCAoKSB7XG4gICAgICBBY3Rpb25zLmdldExpc3RVc2FibGVDaGFubmVsKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGxldCBuZXdJdGVtID0ge31cbiAgICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBpdGVtLmNoYW5uZWxfbmFtZVxuICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uY2hhbm5lbGlkXG4gICAgICAgICAgICB0aGlzLmxpc3RVc2FibGVDaGFubmVsLnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLnRvcGljIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmVsLWZvcm0taXRlbSB7XG4gICAgd2lkdGg6IDI1JTtcbiAgfVxuICAudG9waWMgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZGF0ZS1lZGl0b3Ige1xuICAgIHdpZHRoOiAyMDBweDtcbiAgfVxuICAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW0sIC5lbC1mb3JtLS1pbmxpbmUgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gICAgd2lkdGg6IDYzJTtcbiAgfVxuPC9zdHlsZT5cbjxzdHlsZT5cbiAgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtcmFuZ2UtZWRpdG9yIC5lbC1yYW5nZS1pbnB1dHtcbiAgICB3aWR0aDo1MCU7XG4gIH1cbiAgLnRvcGljIC5lbC1mb3JtLS1pbmxpbmUgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gICAgd2lkdGg6IDYwJTtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LFk4RXM6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoImxFeFAiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiNjY1OWVkMTIiLGEsITEse30pfSxZTngwOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uY2ljbGUtY29udHJvbGxlcltkYXRhLXYtNjI4NTUzZjJdIHtcbiAgbWFyZ2luLXRvcDogNCU7XG59XG4uY3JlYXRlIC5zb3J0IHNwYW5bZGF0YS12LTYyODU1M2YyXXtcbiAgY29sb3I6ICM5MDkwOTA7XG59XG4uY3JlYXRlIC5yZXNpZGVuY2VfdGltZSBzcGFuW2RhdGEtdi02Mjg1NTNmMl17XG4gIGNvbG9yOiAjOTA5MDkwO1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VTdGFydHBhZ2Uvc3JjL2NvbXBvbmVudHMvbWFuYWdlU3RhcnRwYWdlL2lubmVyQWR2ZXJFZGl0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUFvSUE7RUFDQSxlQUFBO0NBQ0E7QUFDQTtFQUNBLGVBQUE7Q0FDQTtBQUNBO0VBQ0EsZUFBQTtDQUNBIixmaWxlOiJpbm5lckFkdmVyRWRpdC52dWUiLHNvdXJjZXNDb250ZW50OlsnPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSJzdGFydHBhZ2UgY3JlYXRlIj5cbiAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICB0aXRsZS1uYW1lPSLlhoXltYzlub/lkYrpobXnrqHnkIYiXG4gICAgICBjbGFzcz0iY2ljbGUtY29udHJvbGxlciJcbiAgICAvPlxuICAgIDxlbC1mb3JtXG4gICAgICByZWY9ImVkaXRGb3JtIlxuICAgICAgOm1vZGVsPSJlZGl0Rm9ybSJcbiAgICAgIGxhYmVsLXdpZHRoPSIxMDBweCJcbiAgICAgIGNsYXNzPSJydWxlLWZvcm0iPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgbGFiZWw9IuWbvuagh+mFjee9riIgPlxuICAgICAgICA8ZWwtdXBsb2FkXG4gICAgICAgICAgOmFjdGlvbj0iZ2V0VXBsb2FkVXJsIlxuICAgICAgICAgIDpoZWFkZXJzPSJ1cGxvYWRIZWFkZXJzIlxuICAgICAgICAgIDpzaG93LWZpbGUtbGlzdD0iZmFsc2UiXG4gICAgICAgICAgOm9uLXN1Y2Nlc3M9ImhhbmRsZVBjQXZhdGFyU3VjY2VzcyJcbiAgICAgICAgICA6YmVmb3JlLXVwbG9hZD0iYmVmb3JlQXZhdGFyVXBsb2FkIlxuICAgICAgICAgIGNsYXNzPSJhdmF0YXItdXBsb2FkZXIiPlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIHYtaWY9ImVkaXRGb3JtLmltZ191cmwiXG4gICAgICAgICAgICA6c3JjPSJlZGl0Rm9ybS5pbWdfdXJsIlxuICAgICAgICAgICAgY2xhc3M9ImF2YXRhciI+XG4gICAgICAgICAgPGlcbiAgICAgICAgICAgIHYtZWxzZVxuICAgICAgICAgICAgY2xhc3M9ImVsLWljb24tcGx1cyBhdmF0YXItdXBsb2FkZXItaWNvbiIvPlxuICAgICAgICA8L2VsLXVwbG9hZD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i6ZO+5o6l5Zyw5Z2AIj5cbiAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgdi1tb2RlbD0iZWRpdEZvcm0uanVtcF91cmwiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbT5cbiAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgQGNsaWNrPSJzdWJtaXRGb3JtIj7mj5DkuqQ8L2VsLWJ1dHRvbj5cbiAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgIHR5cGU9ImRhbmdlciJcbiAgICAgICAgICBAY2xpY2s9ImNsZWFySW5uZXJQYWdlIj7muIXpmaQ8L2VsLWJ1dHRvbj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgIDwvZWwtZm9ybT5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCBDaXJjbGVUaXRsZSBmcm9tIFwnQC9jb21wb25lbnRzL2NvbW1vbnMvY2lyY2xlVGl0bGVcJ1xuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tIFwnQC9hcGkvc3RhcnRwYWdlQXBpXCdcbmltcG9ydCB1cGxvYWRIZWFkZXJzIGZyb20gXCdAL21peGluc1wnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBDaXJjbGVUaXRsZVxuICB9LFxuICBtaXhpbnM6IFt1cGxvYWRIZWFkZXJzXSxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVkaXRGb3JtOiB7XG4gICAgICAgIGltZ191cmw6IFwnXCcsXG4gICAgICAgIGNoYW5uZWxCZWxvbmc6IFwnMVwnLFxuICAgICAgICBqdW1wX3VybDogXCdcJ1xuICAgICAgfSxcbiAgICAgIGFkaWQ6IFwnXCcsXG4gICAgICBpc1JlZnJlc2g6IHRydWVcbiAgICB9XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgZ2V0VXBsb2FkVXJsICgpIHtcbiAgICAgIHJldHVybiBBY3Rpb25zLnVwbG9hZFBpY3R1cmUoKVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgdGhpcy5nZXRFZGl0SW5mbygpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBnZXRFZGl0SW5mbyAoKSB7XG4gICAgICBBY3Rpb25zLmdldElubmVyUGFnZSgpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKHJlcy5kYXRhKVxuICAgICAgICAgIHRoaXMuZWRpdEZvcm0uaW1nX3VybCA9IHJlcy5kYXRhLnJlc3VsdC5iZ191cmxcbiAgICAgICAgICB0aGlzLmVkaXRGb3JtLmp1bXBfdXJsID0gcmVzLmRhdGEucmVzdWx0Lmp1bXBfdXJsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBzdWJtaXRGb3JtICgpIHtcbiAgICAgIEFjdGlvbnMuc2F2ZUlubmVyQWR2ZXIoe1xuICAgICAgICBcJ2VtYmVkZGVkXCc6IHtcbiAgICAgICAgICBcJ3RpdGxlXCc6IFwnXCcsXG4gICAgICAgICAgXCdiZ191cmxcJzogdGhpcy5lZGl0Rm9ybS5pbWdfdXJsLFxuICAgICAgICAgIFwnanVtcF91cmxcJzogdGhpcy5lZGl0Rm9ybS5qdW1wX3VybFxuICAgICAgICB9XG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgIHRoaXMuJG5vdGlmeSh7XG4gICAgICAgICAgICB0aXRsZTogXCfpgJrnn6VcJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwn5L+d5a2Y5oiQ5YqfXCcsXG4gICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJ1xuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBjbGVhcklubmVyUGFnZSAoKSB7XG4gICAgICB0aGlzLmVkaXRGb3JtLmltZ191cmwgPSBcJ1wnXG4gICAgICB0aGlzLmVkaXRGb3JtLmp1bXBfdXJsID0gXCdcJ1xuICAgICAgdGhpcy5zdWJtaXRGb3JtKClcbiAgICB9LFxuICAgIGhhbmRsZVBjQXZhdGFyU3VjY2VzcyAocmVzLCBmaWxlKSB7XG4gICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICBsZXQgaW1hZ2VVcmwgPSByZXMucmVzdWx0XG4gICAgICAgIHRoaXMuZWRpdEZvcm0uaW1nX3VybCA9IGltYWdlVXJsXG4gICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVBdmF0YXJVcGxvYWQgKGZpbGUpIHtcbiAgICAgIGxldCBpbWFnZU9iaiA9IHtcbiAgICAgICAgXCdpbWFnZS9qcGVnXCc6IHRydWUsXG4gICAgICAgIFwnaW1hZ2UvcG5nXCc6IHRydWUsXG4gICAgICAgIFwnaW1hZ2UvanBnXCc6IHRydWVcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlzSW1hZ2UgPSBmaWxlLnR5cGUgaW4gaW1hZ2VPYmpcbiAgICAgIGNvbnN0IGlzTHQyTSA9IGZpbGUuc2l6ZSAvIDEwMjQgLyAxMDI0IDwgMlxuICAgICAgaWYgKCFpc0ltYWdlKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoXCfor7fkuIrkvKDlm77niYfmoLzlvI/nmoTmlofku7YhXCcpXG4gICAgICB9XG4gICAgICBpZiAoIWlzTHQyTSkge1xuICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKFwn5LiK5Lyg5Zu+54mH5aSn5bCP5LiN6IO96LaF6L+HIDJNQiFcJylcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0ltYWdlICYmIGlzTHQyTVxuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLmNpY2xlLWNvbnRyb2xsZXIge1xuICAgIG1hcmdpbi10b3A6IDQlO1xuICB9XG4gIC5jcmVhdGUgLnNvcnQgc3BhbntcbiAgICBjb2xvcjogIzkwOTA5MDtcbiAgfVxuICAuY3JlYXRlIC5yZXNpZGVuY2VfdGltZSBzcGFue1xuICAgIGNvbG9yOiAjOTA5MDkwO1xuICB9XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sWXE0SjpmdW5jdGlvbihlLG4pe30sWmFRdzpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLmVsLWJ1dHRvbi0tcHJpbWFyeVtkYXRhLXYtNGJhMTE3ZDVdIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzcxNkJGRjtcbiAgYm9yZGVyLWNvbG9yOiAjNzE2QkZGO1xufVxuLmVsLWJ1dHRvbi0tZGVmYXVsdFtkYXRhLXYtNGJhMTE3ZDVdIHtcbiAgY29sb3I6ICM3MTZCRkYgO1xuICBib3JkZXItY29sb3I6ICM3MTZCRkY7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZVN5c3RlbVVzZXIvc3JjL2NvbXBvbmVudHMvbWFuYWdlU3lzdGVtVXNlci9hc3NpZ25Sb2xlLnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUFtRkE7RUFDQSwwQkFBQTtFQUNBLHNCQUFBO0NBQ0E7QUFDQTtFQUNBLGdCQUFBO0VBQ0Esc0JBQUE7Q0FDQSIsZmlsZToiYXNzaWduUm9sZS52dWUiLHNvdXJjZXNDb250ZW50OlsiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiYXNzaWduUm9sZVwiPlxuICAgIDxlbC1mb3JtXG4gICAgICA6aW5saW5lPVwidHJ1ZVwiXG4gICAgICBzaXplPVwic21hbGxcIj5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9XCLnlKjmiLflkI1cIlxuICAgICAgICBzdHlsZT1cIm1hcmdpbi1sZWZ0OiAxM3B4O1wiPlxuICAgICAgICA8c3Bhbj57eyB1c2VybmFtZSB9fTwvc3Bhbj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cIuinkuiJsuWIhumFjVwiPlxuICAgICAgICA8ZWwtY2hlY2tib3hcbiAgICAgICAgICB2LWZvcj1cIihpdGVtLCBpbmRleCkgaW4gYWxsUm9sZUxpc3RcIlxuICAgICAgICAgIDprZXk9XCJpbmRleFwiXG4gICAgICAgICAgdi1tb2RlbD1cIml0ZW0uaXNDaGVja2VkXCJcbiAgICAgICAgICBAY2hhbmdlPVwiY2hvb3NlUm9sZShpdGVtLnJvbGVpZCwgaXRlbS5pc0NoZWNrZWQpXCI+XG4gICAgICAgICAge3sgaXRlbS5uYW1lIH19XG4gICAgICAgIDwvZWwtY2hlY2tib3g+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICA8L2VsLWZvcm0+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gJ0AvYXBpL3N5c3RlbVVzZXJzQXBpJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnQXNzaWduUm9sZScsXG4gIHByb3BzOiB7XG4gICAgdXNlcmNvZGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICB1c2VybmFtZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJydcbiAgICB9XG5cbiAgfSxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFsbFJvbGVMaXN0OiBbXVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgLyoqIOiOt+WPlueUqOaIt+S/oeaBryAqKi9cbiAgICB0aGlzLmdldFVzZXJJbmZvKClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGNhbmNlbCAoKSB7XG4gICAgICB0aGlzLiRlbWl0KCdjbG9zZURpYWxvZycpXG4gICAgfSxcbiAgICBnZXRVc2VySW5mbyAoKSB7XG4gICAgICBBY3Rpb25zLmdldFVzZXJSb2xlcyh7XG4gICAgICAgICdvcmdVc2Vycyc6IHtcbiAgICAgICAgICAndXNlcmNvZGUnOiB0aGlzLnVzZXJjb2RlXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIHRoaXMuYWxsUm9sZUxpc3QgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDnu5nnlKjmiLfliIbphY3mnYPpmZAgKiovXG4gICAgY2hvb3NlUm9sZSAocm9sZWlkLCBpc0NoZWNrZWQpIHtcbiAgICAgIEFjdGlvbnMuYXNzaWduT3JDYW5lbFVzZXJSb2xlKHtcbiAgICAgICAgJ2Fzc2lnbic6IHtcbiAgICAgICAgICAndXNlcmNvZGUnOiB0aGlzLnVzZXJjb2RlLFxuICAgICAgICAgICdyb2xlaWQnOiByb2xlaWQsXG4gICAgICAgICAgJ2Fzc2lnbk9yQ2FuZWwnOiBpc0NoZWNrZWRcbiAgICAgICAgfVxuICAgICAgfSkudGhlbihyZXMgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgICBtZXNzYWdlOiAn5YiG6YWN5oiQ5YqfJ1xuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5lbC1idXR0b24tLXByaW1hcnkge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM3MTZCRkY7XG4gICAgYm9yZGVyLWNvbG9yOiAjNzE2QkZGO1xuICB9XG4gIC5lbC1idXR0b24tLWRlZmF1bHQge1xuICAgIGNvbG9yOiAjNzE2QkZGIDtcbiAgICBib3JkZXItY29sb3I6ICM3MTZCRkY7XG4gIH1cbjwvc3R5bGU+XG48c3R5bGU+XG4gIC5lbC1kaWFsb2dfX2hlYWRlcntcbiAgICBwYWRkaW5nOiAxM3B4IDMwcHggMTNweDtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI0MwQkVGRjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjdGQUZGO1xuICB9XG4gIC5lbC1kaWFsb2dfX3RpdGxlIHtcbiAgICBsaW5lLWhlaWdodDogMTdweDtcbiAgICBmb250LXNpemU6IDE3cHg7XG4gICAgY29sb3I6ICMzMDMxMzM7XG4gIH1cbiAgLmVsLWRpYWxvZ19faGVhZGVyYnRuIHtcbiAgICB0b3A6IDEzcHg7XG4gIH1cbiAgLmVsLWRpYWxvZ19fYm9keSB7XG4gICAgcGFkZGluZzogMjBweCA2MHB4IDBweCA2MHB4O1xuICB9XG4gIC5hc3NpZ25Sb2xlIC5lbC1mb3JtIHtcbiAgICBtYXJnaW4tdG9wOiAxNXB4O1xuICB9XG4gIC5hc3NpZ25Sb2xlIC5zdWJtaXQgLmVsLWZvcm0taXRlbV9fY29udGVudHtcbiAgICBmbG9hdDogcmlnaHQ7XG4gICAgd2lkdGg6IDE2MHB4O1xuICB9XG4gIC5zZWxlY3Qtcm9sZSB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzY5NEVGRjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUJGNUZGO1xuICAgIGNvbG9yOiAjNjk0RUZGO1xuICAgIHBhZGRpbmc6OHB4IDIycHggOHB4IDIycHg7XG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICB9XG4gIC5hc3NpZ25Sb2xlIC5lbC1zZWxlY3Qge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG4gIC5hc3NpZ25Sb2xlIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG4gIH1cbiAgLmFzc2lnblJvbGUgLmVsLWNoZWNrYm94Ky5lbC1jaGVja2JveHtcbiAgICB3aWR0aDogMjAwcHg7XG4gICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgfVxuICAvKi5hc3NpZ25Sb2xlIC5lbC1mb3JtLWl0ZW0gKi9cbjwvc3R5bGU+XG4iXSxzb3VyY2VSb290OiIifV0pfSxadDFiOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4ucGFnaW5hdGlvbltkYXRhLXYtNGM0YjM1NDBde1xuICAtd2Via2l0LWJveC1wYWNrOiBlbmQ7XG4gICAgICAtbXMtZmxleC1wYWNrOiBlbmQ7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbn1cbi51c2VyW2RhdGEtdi00YzRiMzU0MF17XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgd2lkdGg6IGF1dG87XG4gIGhlaWdodDogMjBweDtcbiAgYm9yZGVyOjFweCBzb2xpZCByZ2JhKDE4MSwgMTg0LCAyMTcsIDEpO1xuICBib3JkZXItcmFkaXVzOiAyMHB4O1xuICBmb250LXNpemU6IDEzcHg7XG4gIHBhZGRpbmc6IDFweCA1cHggMnB4IDVweDtcbiAgY29sb3I6IHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbi5lZGl0W2RhdGEtdi00YzRiMzU0MF17XG4gIGJvcmRlcjogMXB4IHNvbGlkICMxODgzRkY7XG4gIGNvbG9yOiMxODgzRkY7XG59XG4ucmVzZXQtcGFzc3dvcmRbZGF0YS12LTRjNGIzNTQwXXtcbiAgYm9yZGVyOiAxcHggc29saWQgIzY5NEVGRjtcbiAgY29sb3I6IzY5NEVGRjtcbiAgd2lkdGg6IDYwcHg7XG59XG4uZGVsZXRlW2RhdGEtdi00YzRiMzU0MF17XG4gIGJvcmRlcjoxcHggc29saWQgI0YwMDgwODtcbiAgY29sb3I6ICNGMDA4MDg7XG59XG4uZGlzYWJsZVtkYXRhLXYtNGM0YjM1NDBde1xuICBib3JkZXI6IDFweCBzb2xpZCAjRTc3RDAwO1xuICBjb2xvcjojRTc3RDAwO1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VTeXN0ZW1Vc2VyL3NyYy9jb21wb25lbnRzL21hbmFnZVN5c3RlbVVzZXIvdXNlck1hbmFnZS52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBa1FBO0VBQ0Esc0JBQUE7TUFBQSxtQkFBQTtVQUFBLDBCQUFBO0NBQ0E7QUFDQTtFQUNBLHNCQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSx3Q0FBQTtFQUNBLG9CQUFBO0VBQ0EsZ0JBQUE7RUFDQSx5QkFBQTtFQUNBLDhCQUFBO0VBQ0EsZ0JBQUE7Q0FDQTtBQUNBO0VBQ0EsMEJBQUE7RUFDQSxjQUFBO0NBQ0E7QUFDQTtFQUNBLDBCQUFBO0VBQ0EsY0FBQTtFQUNBLFlBQUE7Q0FDQTtBQUNBO0VBQ0EseUJBQUE7RUFDQSxlQUFBO0NBQ0E7QUFDQTtFQUNBLDBCQUFBO0VBQ0EsY0FBQTtDQUNBIixmaWxlOiJ1c2VyTWFuYWdlLnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9InVzZXItbWFuYWdlIj5cbiAgICA8ZGl2PlxuICAgICAgPGNpcmNsZS10aXRsZVxuICAgICAgICB0aXRsZS1uYW1lPSLns7vnu5/nlKjmiLfnrqHnkIYiXG4gICAgICAgIGNsYXNzPSJjaWNsZS1jb250cm9sbGVyIlxuICAgICAgLz5cbiAgICAgIDxkaXYgY2xhc3M9InNlYXJjaC1mb3JtLWNvbnRhaW5lciI+XG4gICAgICAgIDxlbC1mb3JtXG4gICAgICAgICAgOmlubGluZT0idHJ1ZSJcbiAgICAgICAgICA6bW9kZWw9Im1hbmFnZVVzZXIiXG4gICAgICAgICAgY2xhc3M9ImRlbW8tZm9ybS1pbmxpbmUiPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IueUqOaIt+WQjSI+XG4gICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgdi1tb2RlbD0ibWFuYWdlVXNlci51c2VybmFtZSJcbiAgICAgICAgICAgICAgY2xlYXJhYmxlLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i5byA5aeL5pe26Ze0Ij5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9Im1hbmFnZVVzZXIuc3RhcnREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9Im1hbmFnZVVzZXIuc3RhcnREYXRlIlxuICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pel5pyfIlxuICAgICAgICAgICAgICBAY2hhbmdlPSJnZXRNYW5hZ2VVc2VyTGlzdCIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLnu5PmnZ/ml7bpl7QiPlxuICAgICAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgICAgIDp0aXRsZT0ibWFuYWdlVXNlci5lbmREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9Im1hbmFnZVVzZXIuZW5kRGF0ZSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXpeacnyJcbiAgICAgICAgICAgICAgQGNoYW5nZT0iZ2V0TWFuYWdlVXNlckxpc3QiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgICAgQGNsaWNrPSJnZXRNYW5hZ2VVc2VyTGlzdCI+XG4gICAgICAgICAgICDmn6Xor6JcbiAgICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCIvPlxuICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIDpkaXNhYmxlZD0ic2VsZWN0Um93cyA8PSAwIlxuICAgICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICAgIEBjbGljaz0iYXNzaWduUm9sZUxpc3QiPlxuICAgICAgICAgICAg5YiG6YWN6KeS6ImyXG4gICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1lZGl0LW91dGxpbmUgZWwtaWNvbi0tcmlnaHQgIi8+XG4gICAgICAgICAgPC9lbC1idXR0b24+XG4gICAgICAgIDwvZWwtZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9InRhYmxlLWxpc3QiPlxuICAgICAgPGVsLXRhYmxlXG4gICAgICAgIHJlZj0iY2hhbm5lbFRhYmxlIlxuICAgICAgICA6ZGF0YT0idGFibGVEYXRhIlxuICAgICAgICBzdHJpcGVcbiAgICAgICAgY2xhc3M9Indob2xlLXRhYmxlIlxuICAgICAgICBtaW4taGVpZ2h0PSI0MDAiXG4gICAgICAgIEBzZWxlY3Rpb24tY2hhbmdlPSJzZWxlY3Rpb25DaGFuZ2UiPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgdHlwZT0ic2VsZWN0aW9uIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgd2lkdGg9IjU1Ii8+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiB0YWJsZUhlYWRlciJcbiAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICA6cHJvcD0iaXRlbS5wcm9wIlxuICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCJcbiAgICAgICAgICA6d2lkdGg9Iml0ZW0ud2lkdGgiXG4gICAgICAgICAgOmZvcm1hdHRlcj0iaXRlbS5mb3JtYXR0ZXIiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICBmaXhlZFxuICAgICAgICAgIHNob3ctb3ZlcmZsb3ctdG9vbHRpcFxuICAgICAgICAvPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgZml4ZWQ9InJpZ2h0IlxuICAgICAgICAgIGxhYmVsPSLmk43kvZwiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICB3aWR0aD0iMjUwIj5cbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgY2xhc3M9InVzZXIgZWRpdCJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImFzc2lnblJvbGUoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg5YiG6YWN6KeS6ImyXG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgIDwvZWwtdGFibGU+XG4gICAgICA8ZGl2IGNsYXNzPSJwYWdpbmF0aW9uIj5cbiAgICAgICAgPGVsLXBhZ2luYXRpb25cbiAgICAgICAgICA6dG90YWw9InRvdGFsIlxuICAgICAgICAgIDpwYWdlLXNpemVzPSJbMTAsIDIwLCAzMCwgNDBdIlxuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICBsYXlvdXQ9InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPSJoYW5kbGVTaXplQ2hhbmdlIlxuICAgICAgICAgIEBjdXJyZW50LWNoYW5nZT0iaGFuZGxlQ3VycmVudENoYW5nZSIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGVsLWRpYWxvZ1xuICAgICAgOnZpc2libGUuc3luYz0iZGlhbG9nVmlzaWJsZSJcbiAgICAgIHRpdGxlPSLnlKjmiLfliIbphY3op5LoibIiXG4gICAgICB3aWR0aD0iMzAlIlxuICAgICAgQGNsb3NlPSJjbG9zZURpYWxvZyI+XG4gICAgICA8ZGl2XG4gICAgICAgIDppcz0iY29tcG9uZW50TmFtZSJcbiAgICAgICAgOnVzZXJjb2RlPSJ1c2VyY29kZSJcbiAgICAgICAgOnVzZXJjb2RlLWxpc3Q9InVzZXJjb2RlTGlzdCJcbiAgICAgICAgOnVzZXJuYW1lPSJ1c2VybmFtZSJcbiAgICAgICAgQGNsb3NlRGlhbG9nPSJjbG9zZURpYWxvZyIvPlxuICAgIDwvZWwtZGlhbG9nPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IENpcmNsZVRpdGxlIGZyb20gXCdAL2NvbXBvbmVudHMvY29tbW9ucy9jaXJjbGVUaXRsZVwnXG5pbXBvcnQgQXNzaWduUm9sZSBmcm9tIFwnQC9jb21wb25lbnRzL21hbmFnZVN5c3RlbVVzZXIvYXNzaWduUm9sZVwnXG5pbXBvcnQgQXNzaWduUm9sZUxpc3QgZnJvbSBcJ0AvY29tcG9uZW50cy9tYW5hZ2VTeXN0ZW1Vc2VyL2Fzc2lnblJvbGVMaXN0XCdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL3N5c3RlbVVzZXJzQXBpXCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlLFxuICAgIEFzc2lnblJvbGUsXG4gICAgQXNzaWduUm9sZUxpc3RcbiAgfSxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1hbmFnZVVzZXI6IHtcbiAgICAgICAgdXNlcm5hbWU6IFwnXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJ1xuICAgICAgfSxcbiAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlLFxuICAgICAgY29tcG9uZW50TmFtZTogXCdBc3NpZ25Sb2xlXCcsXG4gICAgICB0YWJsZUhlYWRlcjogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCd1c2VybmFtZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+aIkOWRmOi0puWPt1wnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3JvbGVMaXN0XCcsXG4gICAgICAgICAgbGFiZWw6IFwn6KeS6ImyXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChjZWxsVmFsdWUubGVuZ3RoIDw9IDApIHJldHVybiBcJ+ivpeeUqOaIt+aaguaXoOWIhumFjeinkuiJslwnXG4gICAgICAgICAgICBsZXQgdG9vbFRpcCA9IFwnXCdcbiAgICAgICAgICAgIGNlbGxWYWx1ZS5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gYXJyLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICB0b29sVGlwICs9IGl0ZW0ubmFtZSArIFwnLFwnXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9vbFRpcCArPSBpdGVtLm5hbWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJldHVybiB0b29sVGlwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdwaG9uZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+aJi+acuuWPt1wnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2VtYWlsXCcsXG4gICAgICAgICAgbGFiZWw6IFwn6YKu566x5Zyw5Z2AXCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnY3JlYXRlZGF0YVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+a3u+WKoOaXtumXtFwnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnRm9ybWF0RGF0ZVwnXShjZWxsVmFsdWUsIFwneXl5eS1NTS1kZCBoaDptbVwnKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIHRhYmxlRGF0YTogW10sXG4gICAgICBwYWdlTm86IDEsXG4gICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICB0b3RhbDogMCxcbiAgICAgIHVzZXJjb2RlTGlzdDogW10sXG4gICAgICB1c2VyY29kZTogXCdcJyxcbiAgICAgIHVzZXJuYW1lOiBcJ1wnLFxuICAgICAgc2VsZWN0Um93czogW11cbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgXCdtYW5hZ2VVc2VyLnVzZXJuYW1lXCcgKHZhbCkge1xuICAgICAgdGhpcy5nZXRNYW5hZ2VVc2VyTGlzdCgpXG4gICAgfVxuICB9LFxuICBtb3VudGVkICgpIHtcbiAgICB0aGlzLmdldE1hbmFnZVVzZXJMaXN0KClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldE1hbmFnZVVzZXJMaXN0ICgpIHtcbiAgICAgIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ3N3YXBUaW1lXCddKHRoaXMubWFuYWdlVXNlcilcbiAgICAgIGxldCB0aW1lU3RhcnQgPSB0aGlzLm1hbmFnZVVzZXIuc3RhcnREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5tYW5hZ2VVc2VyLnN0YXJ0RGF0ZSkuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgbGV0IHRpbWVFbmQgPSB0aGlzLm1hbmFnZVVzZXIuZW5kRGF0ZSAhPT0gbnVsbCA/IG5ldyBEYXRlKHRoaXMubWFuYWdlVXNlci5lbmREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBBY3Rpb25zLmdldE1hbmFnZVVzZXJMaXN0KHtcbiAgICAgICAgXCdwYWdlTm9cJzogdGhpcy5wYWdlTm8sXG4gICAgICAgIFwncGFnZVNpemVcJzogdGhpcy5wYWdlU2l6ZSxcbiAgICAgICAgXCduYW1lXCc6IHRoaXMubWFuYWdlVXNlci51c2VybmFtZSxcbiAgICAgICAgXCd0aW1lU3RhcnRcJzogdGltZVN0YXJ0LFxuICAgICAgICBcJ3RpbWVFbmRcJzogdGltZUVuZFxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGxpc3REYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy50YWJsZURhdGEgPSBsaXN0RGF0YS5saXN0XG4gICAgICAgICAgdGhpcy50b3RhbCA9IGxpc3REYXRhLnRvdGFsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBhc3NpZ25Sb2xlIChyb3cpIHtcbiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IHRydWVcbiAgICAgIHRoaXMuY29tcG9uZW50TmFtZSA9IFwnQXNzaWduUm9sZVwnXG4gICAgICB0aGlzLnVzZXJjb2RlID0gcm93LnVzZXJjb2RlXG4gICAgICB0aGlzLnVzZXJuYW1lID0gcm93LnVzZXJuYW1lXG4gICAgfSxcbiAgICBhc3NpZ25Sb2xlTGlzdCAoKSB7XG4gICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSB0cnVlXG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ0Fzc2lnblJvbGVMaXN0XCdcbiAgICB9LFxuICAgIGhhbmRsZVNpemVDaGFuZ2UgKHBhZ2VTaXplKSB7XG4gICAgICB0aGlzLnBhZ2VTaXplID0gcGFnZVNpemVcbiAgICAgIHRoaXMuZ2V0TWFuYWdlVXNlckxpc3QoKVxuICAgIH0sXG4gICAgaGFuZGxlQ3VycmVudENoYW5nZSAocGFnZUluZGV4KSB7XG4gICAgICB0aGlzLnBhZ2VObyA9IHBhZ2VJbmRleFxuICAgICAgdGhpcy5nZXRNYW5hZ2VVc2VyTGlzdCgpXG4gICAgfSxcbiAgICBjbG9zZURpYWxvZyAoKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ1wnXG4gICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSBmYWxzZVxuICAgICAgdGhpcy5nZXRNYW5hZ2VVc2VyTGlzdCgpXG4gICAgfSxcbiAgICAvKiog6I635Y+W5omA5pyJ6YCJ5oup55qE56i/5Lu2SUQgKiovXG4gICAgc2VsZWN0aW9uQ2hhbmdlIChzZWxlY3Rpb24pIHtcbiAgICAgIC8vIHRoaXMucmVjb3ZlclNlbGVjdGlvbigpXG4gICAgICB0aGlzLnVzZXJjb2RlTGlzdCA9IFtdXG4gICAgICB0aGlzLnNlbGVjdFJvd3MgPSBzZWxlY3Rpb25cbiAgICAgIGxldCB1c2VybmFtZUNvbnRhY3QgPSBcJ1wnXG4gICAgICBzZWxlY3Rpb24uZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICBpZiAoaW5kZXggPT09IGFyci5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgdXNlcm5hbWVDb250YWN0ICs9IGl0ZW0udXNlcm5hbWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1c2VybmFtZUNvbnRhY3QgKz0gaXRlbS51c2VybmFtZSArIFwnL1wnXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51c2VyY29kZUxpc3QucHVzaChpdGVtLnVzZXJjb2RlKVxuICAgICAgfSlcbiAgICAgIHRoaXMudXNlcm5hbWUgPSB1c2VybmFtZUNvbnRhY3RcbiAgICB9LFxuICAgIHJlY292ZXJTZWxlY3Rpb24gKCkge1xuICAgICAgdGhpcy5zZWxlY3RSb3dzLmZvckVhY2goKHJvdykgPT4ge1xuICAgICAgICB0aGlzLiRyZWZzLmNoYW5uZWxUYWJsZS50b2dnbGVSb3dTZWxlY3Rpb24ocm93LCB0cnVlKVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5wYWdpbmF0aW9ue1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gIH1cbiAgLnVzZXJ7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIGhlaWdodDogMjBweDtcbiAgICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gICAgYm9yZGVyLXJhZGl1czogMjBweDtcbiAgICBmb250LXNpemU6IDEzcHg7XG4gICAgcGFkZGluZzogMXB4IDVweCAycHggNXB4O1xuICAgIGNvbG9yOiByZ2JhKDE4MSwgMTg0LCAyMTcsIDEpO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuICAuZWRpdHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMTg4M0ZGO1xuICAgIGNvbG9yOiMxODgzRkY7XG4gIH1cbiAgLnJlc2V0LXBhc3N3b3Jke1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM2OTRFRkY7XG4gICAgY29sb3I6IzY5NEVGRjtcbiAgICB3aWR0aDogNjBweDtcbiAgfVxuICAuZGVsZXRle1xuICAgIGJvcmRlcjoxcHggc29saWQgI0YwMDgwODtcbiAgICBjb2xvcjogI0YwMDgwODtcbiAgfVxuICAuZGlzYWJsZXtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjRTc3RDAwO1xuICAgIGNvbG9yOiNFNzdEMDA7XG4gIH1cbjwvc3R5bGU+XG48c3R5bGU+XG4gIC51c2VyLW1hbmFnZSAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICAgIHdpZHRoOiAxNjBweDtcbiAgfVxuICAudXNlci1tYW5hZ2UgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtIHtcbiAgICB3aWR0aDogMjUlO1xuICB9XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sWndhdzpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgicW85MCIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCIwZDJjMjU1MiIsYSwhMSx7fSl9LCJhQytUIjpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgiTGZULyIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCIzMTQ1MDRiYyIsYSwhMSx7fSl9LGFJUG06ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOltdLG5hbWVzOltdLG1hcHBpbmdzOiIiLGZpbGU6InNldHRpbmdNYW51LnZ1ZSIsc291cmNlUm9vdDoiIn1dKX0sYXVJVzpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuYnRuLWNvbnRhaW5lciAuZWwtYnV0dG9ue1xuICBwYWRkaW5nOiAxMnB4IDEwcHg7XG59XG4uc2VhcmNoLWZvcm0tY29udGFpbmVyIC5idG4tY29udGFpbmVyIC5lbC1pY29uLS1yaWdodHtcbiAgbWFyZ2luOiAwO1xufVxuLmN1c3RvbS1kaWFsb2cgLmVsLWRpYWxvZ19faGVhZGVye1xuICAvKnBhZGRpbmc6IDA7Ki9cbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMTkyLDE5MCwyNTUsMSk7XG59XG4uZWwtdG9vbHRpcF9fcG9wcGVye1xuICBtYXgtd2lkdGg6IDMwMHB4O1xufVxuLnN1YmxpdmUgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgd2lkdGg6IDYwJTtcbn1cbi5zdWJsaXZlIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmVsLWZvcm0taXRlbSB7XG4gIHdpZHRoOiAyMCU7XG59XG4uc3VibGl2ZSAuYWxsb3dfY29tbWVudCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmE1MDc7XG4gIHdpZHRoOiAyMHB4O1xuICBoZWlnaHQ6IDIwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgLW1vei1ib3JkZXItcmFkaXVzOiA1MCU7XG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xuICBmbG9hdDogbGVmdDtcbiAgbWFyZ2luLWxlZnQ6IDNweDtcbn1cbi5zdWJsaXZlIC5hbGxvd19zaGFyZSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMxODgzRkY7XG4gIHdpZHRoOiAyMHB4O1xuICBoZWlnaHQ6IDIwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgLW1vei1ib3JkZXItcmFkaXVzOiA1MCU7XG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xuICBmbG9hdDogbGVmdDtcbiAgbWFyZ2luLWxlZnQ6IDNweDtcbn1cbi5zdWJsaXZlIC5hbGxvd19saWtlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI0YwMDgwODtcbiAgd2lkdGg6IDIwcHg7XG4gIGhlaWdodDogMjBweDtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAtbW96LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA1MCU7XG4gIGZsb2F0OiBsZWZ0O1xuICBtYXJnaW4tbGVmdDogM3B4O1xufVxuLnN1YmxpdmUgLmFsbG93X2NvbGxlY3Qge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjk0RUZGO1xuICB3aWR0aDogMjBweDtcbiAgaGVpZ2h0OiAyMHB4O1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIC1tb3otYm9yZGVyLXJhZGl1czogNTAlO1xuICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgZmxvYXQ6IGxlZnQ7XG4gIG1hcmdpbi1sZWZ0OiAzcHg7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZVN1YmxpdmUvc3JjL2NvbXBvbmVudHMvbWFuYWdlU3VibGl2ZS9zdWJsaXZlTGlzdC52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBb3JCQTtFQUNBLG1CQUFBO0NBQ0E7QUFDQTtFQUNBLFVBQUE7Q0FDQTtBQUNBO0VBQ0EsZUFBQTtFQUNBLDZDQUFBO0NBQ0E7QUFDQTtFQUNBLGlCQUFBO0NBQ0E7QUFDQTtFQUNBLFdBQUE7Q0FDQTtBQUNBO0VBQ0EsV0FBQTtDQUNBO0FBQ0E7RUFDQSwwQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx3QkFBQTtFQUNBLDJCQUFBO0VBQ0EsWUFBQTtFQUNBLGlCQUFBO0NBQ0E7QUFDQTtFQUNBLDBCQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtFQUNBLHdCQUFBO0VBQ0EsMkJBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7Q0FDQTtBQUNBO0VBQ0EsMEJBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0Esd0JBQUE7RUFDQSwyQkFBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtDQUNBO0FBQ0E7RUFDQSwwQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx3QkFBQTtFQUNBLDJCQUFBO0VBQ0EsWUFBQTtFQUNBLGlCQUFBO0NBQ0EiLGZpbGU6InN1YmxpdmVMaXN0LnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9InN1YmxpdmUiPlxuICAgIDxkaXY+XG4gICAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICAgIHRpdGxlLW5hbWU9IueCueaSreeuoeeQhiJcbiAgICAgICAgY2xhc3M9ImNpY2xlLWNvbnRyb2xsZXIiXG4gICAgICAvPlxuICAgICAgPGRpdiBjbGFzcz0ic2VhcmNoLWZvcm0tY29udGFpbmVyIj5cbiAgICAgICAgPGVsLWZvcm1cbiAgICAgICAgICA6aW5saW5lPSJ0cnVlIlxuICAgICAgICAgIDptb2RlbD0ic3ViTGl2ZSJcbiAgICAgICAgICBjbGFzcz0iZGVtby1mb3JtLWlubGluZSI+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9Iueov+S7tuS4u+mimCJcbiAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogLTI5cHgiPlxuICAgICAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgICAgIHYtbW9kZWw9InN1YkxpdmUudGl0bGUiXG4gICAgICAgICAgICAgIGNsZWFyYWJsZS8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9IumikemBkyJcbiAgICAgICAgICAgIHByb3A9ImNoYW5uZWxpZCI+XG4gICAgICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgICAgIHYtbW9kZWw9InN1YkxpdmUuY2hhbm5lbGlkIlxuICAgICAgICAgICAgICBmaWx0ZXJhYmxlXG4gICAgICAgICAgICAgIGNsZWFyYWJsZVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgICAgICBAY2xlYXI9ImdldFN1YkxpdmVMaXN0IlxuICAgICAgICAgICAgICBAY2hhbmdlPSJnZXRTdWJMaXZlTGlzdCI+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBjaGFubmVsVHlwZUxpc3QiXG4gICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgICAgICAgOnZhbHVlPSJpdGVtLnZhbHVlIlxuICAgICAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9IueKtuaAgSJcbiAgICAgICAgICAgIGNsYXNzPSJzZWFyY2gtbGVmdCI+XG4gICAgICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgICAgIHYtbW9kZWw9InN1YkxpdmUuc3RhdGUiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSIiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9ImdldFN1YkxpdmVMaXN0Ij5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIHZhbHVlPSIiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuWFqOmDqCIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPSIwIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlvoXkuIrnur8iLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMSJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5bey5LiK57q/Ii8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9IjIiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuW3suS4i+e6vyIvPlxuICAgICAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9IuW8gOWni+aXtumXtCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPSJzdWJMaXZlLnN0YXJ0RGF0ZSB8IEZvcm1hdERhdGUoXCd5eXl5LU1NLWRkIGhoOm1tXCcpIlxuICAgICAgICAgICAgICB2LW1vZGVsPSJzdWJMaXZlLnN0YXJ0RGF0ZSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXtumXtCJcbiAgICAgICAgICAgICAgQGNoYW5nZT0iZ2V0U3ViTGl2ZUxpc3QiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i57uT5p2f5pe26Ze0IlxuICAgICAgICAgICAgY2xhc3M9ImRhdGUtbGVmdCJcbiAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDowcHgiPlxuICAgICAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgICAgIDp0aXRsZT0ic3ViTGl2ZS5lbmREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9InN1YkxpdmUuZW5kRGF0ZSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXtumXtCJcbiAgICAgICAgICAgICAgQGNoYW5nZT0iZ2V0U3ViTGl2ZUxpc3QiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAxMHB4IlxuICAgICAgICAgICAgQGNsaWNrPSJnZXRTdWJMaXZlTGlzdCI+XG4gICAgICAgICAgICDmn6Xor6JcbiAgICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCIvPlxuICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICA8L2VsLWZvcm0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1saXN0Ij5cbiAgICAgIDxlbC10YWJsZVxuICAgICAgICByZWY9ImNoYW5uZWxUYWJsZSJcbiAgICAgICAgOmRhdGE9InRhYmxlRGF0YSJcbiAgICAgICAgc3RyaXBlXG4gICAgICAgIGNsYXNzPSJ3aG9sZS10YWJsZSJcbiAgICAgICAgbWluLWhlaWdodD0iNDAwIj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIHRhYmxlSGVhZGVyIlxuICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgIDpwcm9wPSJpdGVtLnByb3AiXG4gICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIlxuICAgICAgICAgIDp3aWR0aD0iaXRlbS53aWR0aCJcbiAgICAgICAgICA6Zm9ybWF0dGVyPSJpdGVtLmZvcm1hdHRlciJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIGZpeGVkXG4gICAgICAgICAgc2hvdy1vdmVyZmxvdy10b29sdGlwXG4gICAgICAgIC8+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBsYWJlbD0i5b2S5bGe6aKR6YGTIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8ZWwtdGFnXG4gICAgICAgICAgICAgIHYtaWY9InNob3dOdWxsVGFnKHNjb3BlLnJvdy5jaGFubmVsTGlzdCkiXG4gICAgICAgICAgICAgIHNpemU9Im1pbmkiPuaXoDwvZWwtdGFnPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgOmNvbnRlbnQ9InNob3dDaGFubmVsQWxsTmFtZShzY29wZS5yb3cuY2hhbm5lbExpc3QpIlxuICAgICAgICAgICAgICA6a2V5PSJzY29wZS5yb3cudmlkZW9pZCJcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3Atc3RhcnQiPlxuICAgICAgICAgICAgICA8ZWwtdGFnXG4gICAgICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gc2NvcGUucm93LmNoYW5uZWxMaXN0IlxuICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgICAgICAgIHNpemU9Im1pbmkiPlxuICAgICAgICAgICAgICAgIHt7IGNoYW5uZWxUYWdDb250ZW50KGl0ZW0pIH19XG4gICAgICAgICAgICAgIDwvZWwtdGFnPlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgbGFiZWw9Iue9rumhtueKtuaAgSJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIj5cbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgdi1pZj0iIXNjb3BlLnJvdy50b3AiXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9IueCueWHu+e9rumhtiJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3AiPlxuICAgICAgICAgICAgICA8ZWwtdGFnXG4gICAgICAgICAgICAgICAgc2l6ZT0ibWluaSJcbiAgICAgICAgICAgICAgICBjbGFzcz0ic2V0UG9pbnRlciJcbiAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6NjBweDsiXG4gICAgICAgICAgICAgICAgQGNsaWNrLm5hdGl2ZT0ic2V0U3ViTGl2ZVVuVG9wKHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIOe9rumhtlxuICAgICAgICAgICAgICA8L2VsLXRhZz5cbiAgICAgICAgICAgIDwvZWwtdG9vbHRpcD5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIHYtZWxzZVxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBjb250ZW50PSLngrnlh7vlj5bmtojnva7pobYiXG4gICAgICAgICAgICAgIHBsYWNlbWVudD0idG9wIj5cbiAgICAgICAgICAgICAgPGVsLXRhZ1xuICAgICAgICAgICAgICAgIHNpemU9Im1pbmkiXG4gICAgICAgICAgICAgICAgY2xhc3M9InNldFBvaW50ZXIiXG4gICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjYwcHg7Y29sb3I6IzY5NGVmZiJcbiAgICAgICAgICAgICAgICBAY2xpY2submF0aXZlPSJzZXRTdWJMaXZlVG9wKHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIOWPlua2iOe9rumhtlxuICAgICAgICAgICAgICA8L2VsLXRhZz5cbiAgICAgICAgICAgIDwvZWwtdG9vbHRpcD5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGxhYmVsPSLkuIrnqL8v5pKk56i/IlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWFudS1jb250YWluZXIiPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIDpjbGFzcz0iW1wnbWFudVwnLCBzY29wZS5yb3cuc3RhdGUgIT09IDEgJiYgc2NvcGUucm93LmNoYW5uZWxMaXN0Lmxlbmd0aCA+IDAgPyBcJ21hbnUtdXAtYWN0aXZlXCc6IFwnXCddIlxuICAgICAgICAgICAgICAgIEBjbGljaz0idXBTdWJMaXZlKHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIOS4iueov1xuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgOmNsYXNzPSJbXCdtYW51XCcsIHNjb3BlLnJvdy5zdGF0ZSA9PT0gMSA/IFwnbWFudS1iYWNrLWFjdGl2ZVwnOiBcJ1wnXSJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImRvd25TdWJMaXZlKHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIOaSpOeov1xuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBsYWJlbD0i5pON5L2cIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWFudS1jb250YWluZXIiPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIDpjbGFzcz0iW1wnbWFudVwnLCBzY29wZS5yb3cuc3RhdGUgIT09IDEgPyBcJ2RlbGV0ZS1hY3RpdmVcJzogXCdcJ10iXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJzZXR0aW5nU3ViTGl2ZShzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAgICDphY3nva5cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIDpjbGFzcz0iW1wnbWFudVwnLCBzY29wZS5yb3cuc3RhdGUgIT09IDEgPyBcJ2RlbGV0ZS1hY3RpdmVcJzogXCdcJ10iXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJkZWxldGVTdWJMaXZlKHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIOWIoOmZpFxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBmaXhlZD0icmlnaHQiXG4gICAgICAgICAgbGFiZWw9Iuadg+mZkOmFjee9riJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIHdpZHRoPSIxMTUiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBjb250ZW50PSLor4TorroiXG4gICAgICAgICAgICAgIHBsYWNlbWVudD0idG9wIj5cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIDpzdHlsZT0ie2JhY2tncm91bmRDb2xvcjogc2NvcGUucm93LmFsbG93X2NvbW1lbnQgPyBcJyNmZmE1MDdcJzogXCcjQjVCOEQ5XCd9IlxuICAgICAgICAgICAgICAgIGNsYXNzPSJhbGxvd19jb21tZW50IlxuICAgICAgICAgICAgICAgIEBjbGljaz0iaGFuZGxlQ29tbWVudChzY29wZS5yb3cpIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogd2hpdGUiXG4gICAgICAgICAgICAgICAgICBjbGFzcz0iaWNvbmZvbnQgaWNvbi1tYW51LWNvbW1lbnQiLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBjb250ZW50PSLliIbkuqsiXG4gICAgICAgICAgICAgIHBsYWNlbWVudD0idG9wIj5cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIDpzdHlsZT0ie2JhY2tncm91bmRDb2xvcjogc2NvcGUucm93LmFsbG93X3NoYXJlID8gXCcjMTg4M0ZGXCc6IFwnI0I1QjhEOVwnfSJcbiAgICAgICAgICAgICAgICBjbGFzcz0iYWxsb3dfc2hhcmUiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVTaGFyZShzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAgICA8aVxuICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiB3aGl0ZSJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29uZm9udCBpY29uLXNoYXJlIi8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgY29udGVudD0i54K56LWeIlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcCI+XG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICA6c3R5bGU9IntiYWNrZ3JvdW5kQ29sb3I6IHNjb3BlLnJvdy5hbGxvd19saWtlID8gXCcjRjAwODA4XCc6IFwnI0I1QjhEOVwnfSJcbiAgICAgICAgICAgICAgICBjbGFzcz0iYWxsb3dfbGlrZSJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImhhbmRsZVByYWlzZShzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAgICA8aVxuICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiB3aGl0ZSJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29uZm9udCBpY29uLXByYWlzZSIvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZWwtdG9vbHRpcD5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9IuaUtuiXjyJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3AiPlxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgOnN0eWxlPSJ7YmFja2dyb3VuZENvbG9yOiBzY29wZS5yb3cuYWxsb3dfY29sbGVjdCA/IFwnIzY5NEVGRlwnOiBcJyNCNUI4RDlcJ30iXG4gICAgICAgICAgICAgICAgY2xhc3M9ImFsbG93X2NvbGxlY3QiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVDb2xsZWN0KHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIDxpXG4gICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IHdoaXRlIlxuICAgICAgICAgICAgICAgICAgY2xhc3M9Imljb25mb250IGljb24tY29sbGVjdCIvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZWwtdG9vbHRpcD5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgIDwvZWwtdGFibGU+XG4gICAgICA8ZGl2IGNsYXNzPSJwYWdpbmF0aW9uIj5cbiAgICAgICAgPGVsLXBhZ2luYXRpb25cbiAgICAgICAgICA6dG90YWw9InRvdGFsIlxuICAgICAgICAgIDpwYWdlLXNpemVzPSJbMTAsIDIwLCAzMCwgNDBdIlxuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICBsYXlvdXQ9InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPSJoYW5kbGVTaXplQ2hhbmdlIlxuICAgICAgICAgIEBjdXJyZW50LWNoYW5nZT0iaGFuZGxlQ3VycmVudENoYW5nZSIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGVsLWRpYWxvZ1xuICAgICAgOnZpc2libGUuc3luYz0iZGlhbG9nVmlzaWJsZSJcbiAgICAgIGN1c3RvbS1jbGFzcz0iY3VzdG9tLWRpYWxvZyJcbiAgICAgIHRpdGxlPSLngrnmkq3kv6Hmga/phY3nva4iXG4gICAgICB3aWR0aD0iMzglIlxuICAgICAgQGNsb3NlPSJjbG9zZURpYWxvZyI+XG4gICAgICA8ZGl2XG4gICAgICAgIDppcz0iY29tcG9uZW50TmFtZSJcbiAgICAgICAgOnZpZGVvaWQ9InZpZGVvaWQiXG4gICAgICAgIDptYW51LXRpdGxlPSJtYW51VGl0bGUiLz5cbiAgICA8L2VsLWRpYWxvZz5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCBDaXJjbGVUaXRsZSBmcm9tIFwnQC9jb21wb25lbnRzL2NvbW1vbnMvY2lyY2xlVGl0bGVcJ1xuaW1wb3J0IFNldHRpbmdNYW51IGZyb20gXCcuL3NldHRpbmdNYW51XCdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL2RlbWFuZC1jaGFubmVsXCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlLFxuICAgIFNldHRpbmdNYW51XG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdWJMaXZlOiB7XG4gICAgICAgIGNoYW5uZWxfbmFtZTogXCdcJyxcbiAgICAgICAgc3RhdGU6IFwnXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJyxcbiAgICAgICAgY2hhbm5lbGlkOiBcJ1wnLFxuICAgICAgICB0aXRsZTogXCdcJ1xuICAgICAgfSxcbiAgICAgIGNoYW5uZWxUeXBlTGlzdDogW10sIC8vIOaJgOWxnumikemBk+WIl+ihqFxuICAgICAgY2xpY2tDZWxsSW5kZXg6IC0xLFxuICAgICAgdGFibGVIZWFkZXI6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwndGl0bGVcJyxcbiAgICAgICAgICBsYWJlbDogXCfnqL/ku7bkuLvpophcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdjcmVhdGV0aW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5o6o6YCB5pel5pyfXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCd1cGRhdGV0aW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5pu05paw5pel5pyfXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdkaWdlc3RcJyxcbiAgICAgICAgICBsYWJlbDogXCfnqL/ku7blhoXlrrlcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdwbGF5X3VybFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+m7mOiupOinhumikemTvuaOpVwnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gPGEgaHJlZj17Y2VsbFZhbHVlfSB0YXJnZXQ9XCdfYmxhbmtcJz57Y2VsbFZhbHVlfTwvYT5cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3N0YXRlXCcsXG4gICAgICAgICAgbGFiZWw6IFwn54q25oCBXCcsXG4gICAgICAgICAgd2lkdGg6IFwnMTAwXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChjZWxsVmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwn5b6F5LiK57q/XCdcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2VsbFZhbHVlID09PSAxKSB7XG4gICAgICAgICAgICAgIHJldHVybiBcJ+W3suS4iue6v1wnXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNlbGxWYWx1ZSA9PT0gMikge1xuICAgICAgICAgICAgICByZXR1cm4gXCflt7LkuIvnur9cJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIHRhYmxlRGF0YTogW10sXG4gICAgICBjb21tZW50OiBmYWxzZSxcbiAgICAgIHNoYXJlOiBmYWxzZSxcbiAgICAgIHByYWlzZTogZmFsc2UsXG4gICAgICBjb2xsZWN0OiBmYWxzZSxcbiAgICAgIGluZGV4OiAtMSxcbiAgICAgIHBhZ2VObzogMSxcbiAgICAgIHBhZ2VTaXplOiAxMCxcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgZGlhbG9nVmlzaWJsZTogZmFsc2UsXG4gICAgICBjb21wb25lbnROYW1lOiBcJ1wnLFxuICAgICAgdmlkZW9pZDogXCcwXCcsXG4gICAgICBtYW51VGl0bGU6IFwnXCcgLy8g56i/5Lu25Li76aKYLCDkvKDnu5nlrZDnu4Tku7ZcbiAgICB9XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgc2hvd051bGxUYWcgKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgaWYgKCFhcnIpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGVsc2UgaWYgKGFyci5sZW5ndGggPD0gMCkge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNoYW5uZWxUYWdDb250ZW50ICgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgIGlmIChjb250ZW50LmNoYW5uZWxfbmFtZSA9PT0gXCdcJykge1xuICAgICAgICAgICAgcmV0dXJuIFwn5pegXCdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQuY2hhbm5lbF9uYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcJ+aXoFwnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNob3dDaGFubmVsQWxsTmFtZSAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFycikge1xuICAgICAgICBsZXQgdGl0bGUgPSBcJ1wnXG4gICAgICAgIGFyci5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgaWYgKGluZGV4ICE9PSBhcnIubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgdGl0bGUgKz0gaXRlbS5jaGFubmVsX25hbWUgKyBcJyxcJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aXRsZSArPSBpdGVtLmNoYW5uZWxfbmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHRpdGxlXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIFwnc3ViTGl2ZS50aXRsZVwnICgpIHtcbiAgICAgIHRoaXMuZ2V0U3ViTGl2ZUxpc3QoKVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgdGhpcy5nZXRTdWJMaXZlTGlzdCgpXG4gICAgdGhpcy5nZXRMaXN0VXNhYmxlQ2hhbm5lbCgpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKiog6I635Y+W56i/5Lu25YiX6KGoICoqL1xuICAgIGdldFN1YkxpdmVMaXN0ICgpIHtcbiAgICAgIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ3N3YXBUaW1lXCddKHRoaXMuc3ViTGl2ZSlcbiAgICAgIGxldCB0aW1lU3RhcnQgPSB0aGlzLnN1YkxpdmUuc3RhcnREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5zdWJMaXZlLnN0YXJ0RGF0ZSkuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgbGV0IHRpbWVFbmQgPSB0aGlzLnN1YkxpdmUuZW5kRGF0ZSAhPT0gbnVsbCA/IG5ldyBEYXRlKHRoaXMuc3ViTGl2ZS5lbmREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBBY3Rpb25zLmdldFN1YkxpdmVMaXN0KHtcbiAgICAgICAgXCdwYWdlTm9cJzogdGhpcy5wYWdlTm8sXG4gICAgICAgIFwncGFnZVNpemVcJzogdGhpcy5wYWdlU2l6ZSxcbiAgICAgICAgXCdjaGFubmVsaWRcJzogdGhpcy5zdWJMaXZlLmNoYW5uZWxpZCxcbiAgICAgICAgXCd0aXRsZVwnOiB0aGlzLnN1YkxpdmUudGl0bGUsXG4gICAgICAgIFwnc3RhdGVcJzogdGhpcy5zdWJMaXZlLnN0YXRlLFxuICAgICAgICBcJ3RpbWVTdGFydFwnOiB0aW1lU3RhcnQsXG4gICAgICAgIFwndGltZUVuZFwnOiB0aW1lRW5kXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgY29uc29sZS5sb2coZGF0YSlcbiAgICAgICAgICB0aGlzLnRhYmxlRGF0YSA9IGRhdGEubGlzdFxuICAgICAgICAgIHRoaXMudG90YWwgPSBkYXRhLnRvdGFsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog6I635Y+W6aKR6YGT57G75YirICoqL1xuICAgIGdldExpc3RVc2FibGVDaGFubmVsICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0U3ViTGl2ZVVzYWJsZUNoYW5ubmVsKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGFcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGxldCBuZXdJdGVtID0ge31cbiAgICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBpdGVtLmNoYW5uZWxfbmFtZVxuICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uY2hhbm5lbGlkXG4gICAgICAgICAgICB0aGlzLmNoYW5uZWxUeXBlTGlzdC5wdXNoKG5ld0l0ZW0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGhhbmRsZVNpemVDaGFuZ2UgKHBhZ2VTaXplKSB7XG4gICAgICB0aGlzLnBhZ2VTaXplID0gcGFnZVNpemVcbiAgICAgIHRoaXMuZ2V0U3ViTGl2ZUxpc3QoKVxuICAgIH0sXG4gICAgaGFuZGxlQ3VycmVudENoYW5nZSAocGFnZUluZGV4KSB7XG4gICAgICB0aGlzLnBhZ2VObyA9IHBhZ2VJbmRleFxuICAgICAgdGhpcy5nZXRTdWJMaXZlTGlzdCgpXG4gICAgfSxcbiAgICAvKiog6K+E6K665p2D6ZmQICoqL1xuICAgIGhhbmRsZUNvbW1lbnQgKHJvdykge1xuICAgICAgaWYgKHJvdy5zdGF0ZSAhPT0gMSkge1xuICAgICAgICBpZiAocm93LmFsbG93X2NvbW1lbnQpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVN1YkxpdmUocm93LnZpZGVvaWQsIFwnYWxsb3dfY29tbWVudFwnLCBmYWxzZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVN1YkxpdmUocm93LnZpZGVvaWQsIFwnYWxsb3dfY29tbWVudFwnLCB0cnVlKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCflt7LkuIrnur/nqL/ku7bkuI3lj6/mk43kvZzor4TorrrmnYPpmZAhXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDliIbkuqvmnYPpmZAgKiovXG4gICAgaGFuZGxlU2hhcmUgKHJvdykge1xuICAgICAgaWYgKHJvdy5zdGF0ZSAhPT0gMSkge1xuICAgICAgICBpZiAocm93LmFsbG93X3NoYXJlKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVTdWJMaXZlKHJvdy52aWRlb2lkLCBcJ2FsbG93X3NoYXJlXCcsIGZhbHNlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudXBkYXRlU3ViTGl2ZShyb3cudmlkZW9pZCwgXCdhbGxvd19zaGFyZVwnLCB0cnVlKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCflt7LkuIrnur/nqL/ku7bkuI3lj6/mk43kvZzliIbkuqvmnYPpmZAhXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDngrnotZ7mnYPpmZAgKiovXG4gICAgaGFuZGxlUHJhaXNlIChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgaWYgKHJvdy5hbGxvd19saWtlKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVTdWJMaXZlKHJvdy52aWRlb2lkLCBcJ2FsbG93X2xpa2VcJywgZmFsc2UpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVTdWJMaXZlKHJvdy52aWRlb2lkLCBcJ2FsbG93X2xpa2VcJywgdHJ1ZSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn5bey5LiK57q/56i/5Lu25LiN5Y+v5pON5L2c54K56LWe5p2D6ZmQIVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog5pS26JeP5p2D6ZmQICoqL1xuICAgIGhhbmRsZUNvbGxlY3QgKHJvdykge1xuICAgICAgaWYgKHJvdy5zdGF0ZSAhPT0gMSkge1xuICAgICAgICBpZiAocm93LmFsbG93X2NvbGxlY3QpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVN1YkxpdmUocm93LnZpZGVvaWQsIFwnYWxsb3dfY29sbGVjdFwnLCBmYWxzZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVN1YkxpdmUocm93LnZpZGVvaWQsIFwnYWxsb3dfY29sbGVjdFwnLCB0cnVlKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCflt7LkuIrnur/nqL/ku7bkuI3lj6/mk43kvZzmlLbol4/mnYPpmZAhXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDnva7pobYgKiovXG4gICAgc2V0U3ViTGl2ZVVuVG9wIChyb3cpIHtcbiAgICAgIHRoaXMudXBkYXRlU3ViTGl2ZShyb3cudmlkZW9pZCwgXCd0b3BcJywgdHJ1ZSlcbiAgICB9LFxuICAgIC8qKiDlj5bmtojnva7pobYgKiovXG4gICAgc2V0U3ViTGl2ZVRvcCAocm93KSB7XG4gICAgICB0aGlzLnVwZGF0ZVN1YkxpdmUocm93LnZpZGVvaWQsIFwndG9wXCcsIGZhbHNlKVxuICAgIH0sXG4gICAgLyoqIOS4iueovyAqKi9cbiAgICB1cFN1YkxpdmUgKHJvdykge1xuICAgICAgaWYgKHJvdy5jaGFubmVsTGlzdC5sZW5ndGggPD0gMCkge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCfor6XnqL/ku7bov5jmsqHmnInphY3nva7popHpgZMsIOS4jeiDveS4iueovyFcJ1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGlmIChyb3cuc3RhdGUgPT09IDAgfHwgcm93LnN0YXRlID09PSAyKSB7XG4gICAgICAgIHRoaXMuJGNvbmZpcm0oXCfnoa7lrpropoHkuIrnqL/lkJc/XCcsIFwn5o+Q56S6XCcsIHtcbiAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCfnoa7lrppcJyxcbiAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcJ+WPlua2iFwnLFxuICAgICAgICAgIHR5cGU6IFwnd2FybmluZ1wnXG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMudXBkYXRlU3ViTGl2ZShyb3cudmlkZW9pZCwgXCdzdGF0ZVwnLCAxKVxuICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCfor6XnqL/ku7blt7LkuIrnur8hXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDmkqTnqL8gKiovXG4gICAgZG93blN1YkxpdmUgKHJvdykge1xuICAgICAgaWYgKHJvdy5zdGF0ZSA9PT0gMSkge1xuICAgICAgICB0aGlzLiRjb25maXJtKFwn56Gu5a6a6KaB5pKk56i/5ZCXP1wnLCBcJ+aPkOekulwnLCB7XG4gICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwn56Gu5a6aXCcsXG4gICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCflj5bmtohcJyxcbiAgICAgICAgICB0eXBlOiBcJ3dhcm5pbmdcJ1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVN1YkxpdmUocm93LnZpZGVvaWQsIFwnc3RhdGVcJywgMilcbiAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn6K+l56i/5Lu26L+Y5pyq5LiK56i/IVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog6YWN572u54K55pKtICoqL1xuICAgIHNldHRpbmdTdWJMaXZlIChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gdHJ1ZVxuICAgICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBTZXR0aW5nTWFudVxuICAgICAgICB0aGlzLnZpZGVvaWQgPSByb3cudmlkZW9pZFxuICAgICAgICB0aGlzLm1hbnVUaXRsZSA9IHJvdy50aXRsZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn6K+35pKk56i/5ZCO5YaN6YWN572uIVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog5Yig6Zmk56i/5Lu2ICoqL1xuICAgIGRlbGV0ZVN1YkxpdmUgKHJvdykge1xuICAgICAgaWYgKHJvdy5zdGF0ZSAhPT0gMSkge1xuICAgICAgICB0aGlzLiRjb25maXJtKFwn5piv5ZCm5Yig6ZmkIlwnICsgcm93LnRpdGxlICsgXCciP1wnLCBcJ+aPkOekulwnLCB7XG4gICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwn56Gu5a6aXCcsXG4gICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCflj5bmtohcJyxcbiAgICAgICAgICB0eXBlOiBcJ3dhcm5pbmdcJ1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICBBY3Rpb25zLmRlbGV0ZVN1YkxpdmUoe1xuICAgICAgICAgICAgXCd2aWRlb1wnOiB7XG4gICAgICAgICAgICAgIFwndmlkZW9pZFwnOiByb3cudmlkZW9pZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCcsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCfliKDpmaTmiJDlip8hXCdcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ2V0U3ViTGl2ZUxpc3QoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+W3suS4iue6v+eov+S7tuS4jeWPr+WIoOmZpCFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICAgKiDngrnmkq3mk43kvZznmoTlhazlhbHmjqXlj6NcbiAgICAgICAqIEBwYXJhbSBhcnRpY2xlaWQg5paH56ugSURcbiAgICAgICAqIEBwYXJhbSBrZXkg5pu05paw5a2X5q615ZCNXG4gICAgICAgKiBAcGFyYW0gdmFsdWUg5YC8XG4gICAgICAgKi9cbiAgICB1cGRhdGVTdWJMaXZlICh2aWRlb2lkLCBrZXksIHZhbHVlKSB7XG4gICAgICBBY3Rpb25zLnVwZGF0ZVN1YkxpdmUoe1xuICAgICAgICBcJ3ZpZGVvXCc6IHtcbiAgICAgICAgICBcJ3ZpZGVvaWRcJzogdmlkZW9pZCxcbiAgICAgICAgICBba2V5XTogdmFsdWVcbiAgICAgICAgfVxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwn5pON5L2c5oiQ5YqfIVwnXG4gICAgICAgICAgfSlcbiAgICAgICAgICB0aGlzLmdldFN1YkxpdmVMaXN0KClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDojrflj5bmiYDmnInpgInmi6nnmoTnqL/ku7ZJRCAqKi9cbiAgICBzZWxlY3Rpb25DaGFuZ2UgKHNlbGVjdGlvbikge1xuICAgICAgdGhpcy5hcnRpY2xlaWRMaXN0ID0gW11cbiAgICAgIHNlbGVjdGlvbi5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgIHRoaXMuYXJ0aWNsZWlkTGlzdC5wdXNoKGl0ZW0uYXJ0aWNsZWlkKVxuICAgICAgfSlcbiAgICAgIHRoaXMuc2VsZWN0ZWRNYW51SW5mbyA9IHNlbGVjdGlvblxuICAgIH0sXG4gICAgLyoqIOWFs+mXreWvueivneahhiAqKi9cbiAgICBjbG9zZURpYWxvZyAoKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ1wnXG4gICAgICB0aGlzLmdldFN1YkxpdmVMaXN0KClcbiAgICB9XG4gIH1cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5wYWdpbmF0aW9ue1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgfVxuICAubWFudXtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6IDMwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIGJvcmRlcjoxcHggc29saWQgcmdiYSgxODEsIDE4NCwgMjE3LCAxKTtcbiAgICBib3JkZXItcmFkaXVzOiAyMHB4O1xuICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICBwYWRkaW5nOiAxcHggNXB4IDJweCA1cHg7XG4gICAgY29sb3I6IHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG4gIC5tYW51LXVwLWFjdGl2ZXtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDIzMSwgMTI1LCAwLCAxKTtcbiAgICBjb2xvcjpyZ2JhKDIzMSwgMTI1LCAwLCAxKTtcbiAgfVxuICAubWFudS1iYWNrLWFjdGl2ZXtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI0MCwgOCwgOCwgMSk7XG4gICAgY29sb3I6cmdiYSgyNDAsIDgsIDgsIDEpO1xuICB9XG4gIC5kZWxldGUtYWN0aXZle1xuICAgIGJvcmRlcjoxcHggc29saWQgcmdiYSgxMDUsIDc4LCAyNTUsIDEpO1xuICAgIGNvbG9yOiByZ2JhKDEwNSwgNzgsIDI1NSwgMSk7XG4gIH1cbiAgLmRhdGUtbGVmdHtcbiAgICBtYXJnaW4tbGVmdDogMjhweDtcbiAgfVxuICAucGFnaW5hdGlvbiB7XG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgLXdlYmtpdC1ib3gtcGFjazogZW5kO1xuICB9XG48L3N0eWxlPlxuPHN0eWxlPlxuICAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5idG4tY29udGFpbmVyIC5lbC1idXR0b257XG4gICAgcGFkZGluZzogMTJweCAxMHB4O1xuICB9XG4gIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmJ0bi1jb250YWluZXIgLmVsLWljb24tLXJpZ2h0e1xuICAgIG1hcmdpbjogMDtcbiAgfVxuICAuY3VzdG9tLWRpYWxvZyAuZWwtZGlhbG9nX19oZWFkZXJ7XG4gICAgLypwYWRkaW5nOiAwOyovXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMTkyLDE5MCwyNTUsMSk7XG4gIH1cbiAgLmVsLXRvb2x0aXBfX3BvcHBlcntcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xuICB9XG4gIC5zdWJsaXZlIC5lbC1mb3JtLS1pbmxpbmUgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gICAgd2lkdGg6IDYwJTtcbiAgfVxuICAuc3VibGl2ZSAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAyMCU7XG4gIH1cbiAgLnN1YmxpdmUgLmFsbG93X2NvbW1lbnQge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmE1MDc7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtbW96LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBtYXJnaW4tbGVmdDogM3B4O1xuICB9XG4gIC5zdWJsaXZlIC5hbGxvd19zaGFyZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE4ODNGRjtcbiAgICB3aWR0aDogMjBweDtcbiAgICBoZWlnaHQ6IDIwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC1tb3otYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIG1hcmdpbi1sZWZ0OiAzcHg7XG4gIH1cbiAgLnN1YmxpdmUgLmFsbG93X2xpa2Uge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNGMDA4MDg7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtbW96LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBtYXJnaW4tbGVmdDogM3B4O1xuICB9XG4gIC5zdWJsaXZlIC5hbGxvd19jb2xsZWN0IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjk0RUZGO1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgLW1vei1ib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gICAgbWFyZ2luLWxlZnQ6IDNweDtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LGJGdkI6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoImJVZkQiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiOTJjOWRhNWUiLGEsITEse30pfSxiUGJKOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4udGFibGUtbGlzdFtkYXRhLXYtMjkwYzYzMDRdIHtcbiAgbWluLWhlaWdodDogNDAwcHg7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG4gIHBhZGRpbmc6IDBweDtcbn1cbi53aG9sZS10YWJsZVtkYXRhLXYtMjkwYzYzMDRdIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjE4LCAyMjIsIDIyMywgMSk7XG4gIG1pbi1oZWlnaHQ6IDI1dnc7XG59XG4ucGFnaW5hdGlvbltkYXRhLXYtMjkwYzYzMDRdIHtcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICBkaXNwbGF5OiBmbGV4O1xuICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xuICAgICAgLW1zLWZsZXgtcGFjazoganVzdGlmeTtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIG1hcmdpbi10b3A6IDEwcHg7XG59XG4uYWRkVXJsIC5idG4tY29udGFpbmVyW2RhdGEtdi0yOTBjNjMwNF0ge1xuICB3aWR0aDogMjMlICFpbXBvcnRhbnQ7XG4gIGxlZnQ6IDBweDtcbn1cblxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VTbGlkZS9zcmMvY29tcG9uZW50cy9tYW5hZ2VTbGlkZS9hZGRNYW51c2NyaXB0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUEyWUE7RUFDQSxrQkFBQTtFQUNBLGlCQUFBO0VBQ0EsYUFBQTtDQUNBO0FBQ0E7RUFDQSxZQUFBO0VBQ0EseUNBQUE7RUFDQSxpQkFBQTtDQUNBO0FBQ0E7RUFDQSxxQkFBQTtFQUFBLHFCQUFBO0VBQUEsY0FBQTtFQUNBLDBCQUFBO01BQUEsdUJBQUE7VUFBQSwrQkFBQTtFQUNBLGlCQUFBO0NBQ0E7QUFDQTtFQUNBLHNCQUFBO0VBQ0EsVUFBQTtDQUNBIixmaWxlOiJhZGRNYW51c2NyaXB0LnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9ImFkZFVybCI+XG4gICAgPGVsLWZvcm1cbiAgICAgIDppbmxpbmU9InRydWUiXG4gICAgICA6bW9kZWw9Im1hbnVTY3JpcHQiXG4gICAgICBzaXplPSJzbWFsbCJcbiAgICAgIGNsYXNzPSJkZW1vLWZvcm0taW5saW5lIj5cbiAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9Iueov+S7tuS4u+mimCI+XG4gICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgIHYtbW9kZWw9Im1hbnVTY3JpcHQudGl0bGUiXG4gICAgICAgICAgY2xlYXJhYmxlLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5b2S5bGe6aKR6YGTIj5cbiAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgIHYtbW9kZWw9Im1hbnVTY3JpcHQuY2hhbm5lbGlkIlxuICAgICAgICAgIGZpbHRlcmFibGVcbiAgICAgICAgICBjbGVhcmFibGVcbiAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaE1hbnVTY3JpcHQiXG4gICAgICAgICAgQGNsZWFyPSJzZWFyY2hNYW51U2NyaXB0Ij5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBjaGFubmVsVHlwZUxpc3QiXG4gICAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSJcbiAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5b2S5bGe5LiT6aKYIj5cbiAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgIHYtbW9kZWw9Im1hbnVTY3JpcHQuc3BlY2lhbGlkIlxuICAgICAgICAgIGZpbHRlcmFibGVcbiAgICAgICAgICBjbGVhcmFibGVcbiAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaE1hbnVTY3JpcHQiXG4gICAgICAgICAgQGNsZWFyPSJzZWFyY2hNYW51U2NyaXB0Ij5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBzcGVjaWFsTGlzdCJcbiAgICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgICAgOnZhbHVlPSJpdGVtLnZhbHVlIlxuICAgICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIi8+XG4gICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLlvIDlp4vml7bpl7QiXG4gICAgICAgIGNsYXNzPSJkYXRlLWxlZnQiPlxuICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICA6dGl0bGU9Im1hbnVTY3JpcHQuc3RhcnREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgdi1tb2RlbD0ibWFudVNjcmlwdC5zdGFydERhdGUiXG4gICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPSLpgInmi6nml7bpl7QiXG4gICAgICAgICAgQGNoYW5nZT0ic2VhcmNoTWFudVNjcmlwdCIvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLnu5PmnZ/ml7bpl7QiXG4gICAgICAgIGNsYXNzPSJkYXRlLWxlZnQiPlxuICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICA6dGl0bGU9Im1hbnVTY3JpcHQuZW5kRGF0ZSB8IEZvcm1hdERhdGUoXCd5eXl5LU1NLWRkIGhoOm1tXCcpIlxuICAgICAgICAgIHYtbW9kZWw9Im1hbnVTY3JpcHQuZW5kRGF0ZSJcbiAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICBmb3JtYXQ9Inl5eXktTU0tZGQgSEg6bW0iXG4gICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXtumXtCJcbiAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hNYW51U2NyaXB0Ii8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW0gY2xhc3M9ImJ0bi1jb250YWluZXIiPlxuICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICBAY2xpY2s9InNlYXJjaE1hbnVTY3JpcHQiPlxuICAgICAgICAgIOafpeivolxuICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCIvPlxuICAgICAgICA8L2VsLWJ1dHRvbj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgIDwvZWwtZm9ybT5cbiAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1saXN0Ij5cbiAgICAgIDxlbC10YWJsZVxuICAgICAgICByZWY9ImFkZE1hbnUiXG4gICAgICAgIDpkYXRhPSJ0YWJsZURhdGEiXG4gICAgICAgIHN0cmlwZVxuICAgICAgICBzaXplPSJzbWFsbCAiXG4gICAgICAgIGNsYXNzPSJ3aG9sZS10YWJsZSJcbiAgICAgICAgbWluLWhlaWdodD0iNDAwIlxuICAgICAgICBAc2VsZWN0PSJzZWxlY3QiXG4gICAgICAgIEBzZWxlY3QtYWxsPSJzZWxlY3RBbGwiPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgdHlwZT0ic2VsZWN0aW9uIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgd2lkdGg9IjU1Ii8+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiB0YWJsZUhlYWRlciJcbiAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICA6cHJvcD0iaXRlbS5wcm9wIlxuICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCJcbiAgICAgICAgICA6d2lkdGg9Iml0ZW0ud2lkdGgiXG4gICAgICAgICAgOmZvcm1hdHRlcj0iaXRlbS5mb3JtYXR0ZXIiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICBmaXhlZFxuICAgICAgICAgIHNob3ctb3ZlcmZsb3ctdG9vbHRpcFxuICAgICAgICAvPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgbGFiZWw9IuW9kuWxnumikemBkyJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIj5cbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPGVsLXRhZ1xuICAgICAgICAgICAgICB2LWlmPSJzaG93TnVsbFRhZyhzY29wZS5yb3cuYXJ0aWNsZUNoYW5uZWxMaXN0KSJcbiAgICAgICAgICAgICAgc2l6ZT0ibWluaSI+5pegPC9lbC10YWc+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICA6Y29udGVudD0ic2hvd0NoYW5uZWxBbGxOYW1lKHNjb3BlLnJvdy5hcnRpY2xlQ2hhbm5lbExpc3QpIlxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcC1zdGFydCI+XG4gICAgICAgICAgICAgIDxlbC10YWdcbiAgICAgICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBzY29wZS5yb3cuYXJ0aWNsZUNoYW5uZWxMaXN0IlxuICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgICAgICAgIHNpemU9Im1pbmkiPlxuICAgICAgICAgICAgICAgIHt7IGNoYW5uZWxUYWdDb250ZW50KGl0ZW0pIH19XG4gICAgICAgICAgICAgIDwvZWwtdGFnPlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgbGFiZWw9IuW9kuWxnuS4k+mimCJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIj5cbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPGVsLXRhZ1xuICAgICAgICAgICAgICB2LWlmPSJzaG93TnVsbFRhZyhzY29wZS5yb3cuYXJ0aWNsZVNwZWNpYWxMaXN0KSJcbiAgICAgICAgICAgICAgc2l6ZT0ibWluaSI+5pegPC9lbC10YWc+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICA6dmlzaWJsZS1hcnJvdz0iZmFsc2UiXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIHBsYWNlbWVudD0idG9wLXN0YXJ0Ij5cbiAgICAgICAgICAgICAgPGRpdiBzbG90PSJjb250ZW50Ij57eyBzaG93U3BlY2lhbEFsbE5hbWUoc2NvcGUucm93LmFydGljbGVTcGVjaWFsTGlzdCkgfX08L2Rpdj5cbiAgICAgICAgICAgICAgPGVsLXRhZ1xuICAgICAgICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIHNjb3BlLnJvdy5hcnRpY2xlU3BlY2lhbExpc3QiXG4gICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgICAgICAgc2l6ZT0ibWluaSI+XG4gICAgICAgICAgICAgICAge3sgc3BlY2lhbFRhZ0NvbnRlbnQoaXRlbSkgfX1cbiAgICAgICAgICAgICAgPC9lbC10YWc+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBsYWJlbD0i572u6aG254q25oCBIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8ZWwtdGFnXG4gICAgICAgICAgICAgIHYtaWY9IiFzY29wZS5yb3cudG9wIlxuICAgICAgICAgICAgICBzaXplPSJtaW5pIlxuICAgICAgICAgICAgICBjbGFzcz0ic2V0UG9pbnRlciI+XG4gICAgICAgICAgICAgIOacque9rumhtlxuICAgICAgICAgICAgPC9lbC10YWc+XG4gICAgICAgICAgICA8ZWwtdGFnXG4gICAgICAgICAgICAgIHYtZWxzZVxuICAgICAgICAgICAgICBzaXplPSJtaW5pIlxuICAgICAgICAgICAgICBjbGFzcz0ic2V0UG9pbnRlciI+XG4gICAgICAgICAgICAgIOW3sue9rumhtlxuICAgICAgICAgICAgPC9lbC10YWc+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+XG4gICAgICA8L2VsLXRhYmxlPlxuICAgICAgPGRpdiBjbGFzcz0icGFnaW5hdGlvbiI+XG4gICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgIEBjbGljaz0ibm90aWZ5UGFyZW50U2VsZWN0ZWRSb3ciPuehruWumjwvZWwtYnV0dG9uPlxuICAgICAgICA8ZWwtcGFnaW5hdGlvblxuICAgICAgICAgIDp0b3RhbD0idG90YWwiXG4gICAgICAgICAgOnBhZ2Utc2l6ZXM9IlsxMCwgMjAsIDMwLCA0MF0iXG4gICAgICAgICAgYmFja2dyb3VuZFxuICAgICAgICAgIGxheW91dD0idG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dCJcbiAgICAgICAgICBAc2l6ZS1jaGFuZ2U9ImhhbmRsZVNpemVDaGFuZ2UiXG4gICAgICAgICAgQGN1cnJlbnQtY2hhbmdlPSJoYW5kbGVDdXJyZW50Q2hhbmdlIi8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL21hbnVTY3JpcHRBcGlcJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiBcJ0FkZE1hbnVzY3JpcHRcJyxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1hbnVTY3JpcHQ6IHtcbiAgICAgICAgY2hhbm5lbF9uYW1lOiBcJ1wnLFxuICAgICAgICBzdGF0ZTogXCdcJyxcbiAgICAgICAgc29ydDogXCcxXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJyxcbiAgICAgICAgY2hhbm5lbGlkOiBcJ1wnLFxuICAgICAgICB0aXRsZTogXCdcJyxcbiAgICAgICAgc3BlY2lhbGlkOiBcJ1wnXG4gICAgICB9LFxuICAgICAgY2xpY2tDZWxsSW5kZXg6IC0xLFxuICAgICAgdGFibGVIZWFkZXI6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwndGl0bGVcJyxcbiAgICAgICAgICBsYWJlbDogXCfnqL/ku7bkuLvpophcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdjcmVhdGV0aW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5o6o6YCB5pel5pyfXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdhcnRpY2xlX3VybFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+eov+S7tuWGheWuuVwnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gPGEgaHJlZj17Y2VsbFZhbHVlfSB0YXJnZXQ9XCdfYmxhbmtcJz7mn6XnnIvnqL/ku7blhoXlrrk8L2E+XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgY2hhbm5lbFR5cGVMaXN0OiBbXSwgLy8g5omA5bGe6aKR6YGT5YiX6KGoXG4gICAgICBzcGVjaWFsTGlzdDogW10sXG4gICAgICB0YWJsZURhdGE6IFtdLFxuICAgICAgcGFnZU5vOiAxLFxuICAgICAgcGFnZVNpemU6IDEwLFxuICAgICAgdG90YWw6IDAsXG4gICAgICBzZWxlY3RSb3c6IHt9IC8vIOW3sumAieaLqeeahOihjFxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBzaG93TnVsbFRhZyAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFycikge1xuICAgICAgICBpZiAoIWFycikge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gZWxzZSBpZiAoYXJyLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY2hhbm5lbFRhZ0NvbnRlbnQgKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgICAgaWYgKGNvbnRlbnQuY2hhbm5lbF9uYW1lID09PSBcJ1wnKSB7XG4gICAgICAgICAgICByZXR1cm4gXCfml6BcJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGVudC5jaGFubmVsX25hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwn5pegXCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc3BlY2lhbFRhZ0NvbnRlbnQgKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgICAgaWYgKGNvbnRlbnQuc3BlY2lhbF9uYW1lID09PSBcJ1wnKSB7XG4gICAgICAgICAgICByZXR1cm4gXCfml6BcJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGVudC5zcGVjaWFsX25hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwn5pegXCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc2hvd0NoYW5uZWxBbGxOYW1lICgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJyKSB7XG4gICAgICAgIGxldCB0aXRsZSA9IFwnXCdcbiAgICAgICAgYXJyLmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICBpZiAoaW5kZXggIT09IGFyci5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICB0aXRsZSArPSBpdGVtLmNoYW5uZWxfbmFtZSArIFwnLFwnXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpdGxlICs9IGl0ZW0uY2hhbm5lbF9uYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gdGl0bGVcbiAgICAgIH1cbiAgICB9LFxuICAgIHNob3dTcGVjaWFsQWxsTmFtZSAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFycikge1xuICAgICAgICBsZXQgdGl0bGUgPSBcJ1wnXG4gICAgICAgIGFyci5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgaWYgKGluZGV4ICE9PSBhcnIubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgdGl0bGUgKz0gXCfjgIpcJyArIGl0ZW0uc3BlY2lhbF9uYW1lICsgXCfjgItcJyArIFwnXCdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGl0bGUgKz0gXCfjgIpcJyArIGl0ZW0uc3BlY2lhbF9uYW1lICsgXCfjgItcJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHRpdGxlXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIFwnbWFudVNjcmlwdC50aXRsZVwnICgpIHtcbiAgICAgIHRoaXMuc2VhcmNoTWFudVNjcmlwdCgpXG4gICAgfVxuICB9LFxuICBtb3VudGVkICgpIHtcbiAgICB0aGlzLmdldE11bnVTY3JpcHRMaXN0KClcbiAgICB0aGlzLmdldExpc3RVc2FibGVDaGFubmVsKClcbiAgICB0aGlzLmdldExpc3RVc2FibGVTcGVjaWFsKClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIC8qKiDojrflj5bnqL/ku7bliJfooaggKiovXG4gICAgZ2V0TXVudVNjcmlwdExpc3QgKCkge1xuICAgICAgQWN0aW9ucy5nZXRNYW51U2NyaXB0TGlzdCh7XG4gICAgICAgIFwncGFnZU5vXCc6IHRoaXMucGFnZU5vLFxuICAgICAgICBcJ3BhZ2VTaXplXCc6IHRoaXMucGFnZVNpemUsXG4gICAgICAgIFwnc3RhdGVcJzogMVxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gZGF0YS5saXN0XG4gICAgICAgICAgdGhpcy50b3RhbCA9IGRhdGEudG90YWxcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDojrflj5bpopHpgZPnsbvliKsgKiovXG4gICAgZ2V0TGlzdFVzYWJsZUNoYW5uZWwgKCkge1xuICAgICAgQWN0aW9ucy5nZXRMaXN0VXNhYmxlQ2hhbm5lbCgpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhXG4gICAgICAgIGlmIChkYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCByZXN1bHQgPSBkYXRhLnJlc3VsdFxuICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgICBsZXQgbmV3SXRlbSA9IHt9XG4gICAgICAgICAgICBuZXdJdGVtLmxhYmVsID0gaXRlbS5jaGFubmVsX25hbWVcbiAgICAgICAgICAgIG5ld0l0ZW0udmFsdWUgPSBpdGVtLmNoYW5uZWxpZFxuICAgICAgICAgICAgdGhpcy5jaGFubmVsVHlwZUxpc3QucHVzaChuZXdJdGVtKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog6I635Y+W5LiT6aKY5YiX6KGoICoqL1xuICAgIGdldExpc3RVc2FibGVTcGVjaWFsICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0TGlzdFVzYWJsZVNwZWNpYWwoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YVxuICAgICAgICBpZiAoZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gZGF0YS5yZXN1bHRcbiAgICAgICAgICByZXN1bHQuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICAgICAgbGV0IG5ld0l0ZW0gPSB7fVxuICAgICAgICAgICAgbmV3SXRlbS5sYWJlbCA9IGl0ZW0uc3BlY2lhbF9uYW1lXG4gICAgICAgICAgICBuZXdJdGVtLnZhbHVlID0gaXRlbS5zcGVjaWFsaWRcbiAgICAgICAgICAgIHRoaXMuc3BlY2lhbExpc3QucHVzaChuZXdJdGVtKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog5pCc57Si56i/5Lu2ICoqL1xuICAgIHNlYXJjaE1hbnVTY3JpcHQgKCkge1xuICAgICAgdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnc3dhcFRpbWVcJ10odGhpcy5tYW51U2NyaXB0KVxuICAgICAgbGV0IHRpbWVTdGFydCA9IHRoaXMubWFudVNjcmlwdC5zdGFydERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLm1hbnVTY3JpcHQuc3RhcnREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBsZXQgdGltZUVuZCA9IHRoaXMubWFudVNjcmlwdC5lbmREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5tYW51U2NyaXB0LmVuZERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIEFjdGlvbnMuZ2V0TWFudVNjcmlwdExpc3Qoe1xuICAgICAgICBcJ3BhZ2VOb1wnOiB0aGlzLnBhZ2VObyxcbiAgICAgICAgXCdwYWdlU2l6ZVwnOiB0aGlzLnBhZ2VTaXplLFxuICAgICAgICBcJ2NoYW5uZWxpZFwnOiB0aGlzLm1hbnVTY3JpcHQuY2hhbm5lbGlkLFxuICAgICAgICBcJ3NwZWNpYWxpZFwnOiB0aGlzLm1hbnVTY3JpcHQuc3BlY2lhbGlkLFxuICAgICAgICBcJ3RpdGxlXCc6IHRoaXMubWFudVNjcmlwdC50aXRsZSxcbiAgICAgICAgXCdzdGF0ZVwnOiAxLFxuICAgICAgICBcJ3RpbWVTdGFydFwnOiB0aW1lU3RhcnQsXG4gICAgICAgIFwndGltZUVuZFwnOiB0aW1lRW5kXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy50YWJsZURhdGEgPSBkYXRhLmxpc3RcbiAgICAgICAgICB0aGlzLnRvdGFsID0gZGF0YS50b3RhbFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgb25TdWJtaXQgKCkge1xuICAgICAgY29uc29sZS5sb2coXCdzdWJtaXQhXCcpXG4gICAgfSxcbiAgICBoYW5kbGVTaXplQ2hhbmdlIChwYWdlU2l6ZSkge1xuICAgICAgdGhpcy5wYWdlU2l6ZSA9IHBhZ2VTaXplXG4gICAgICB0aGlzLnNlYXJjaE1hbnVTY3JpcHQoKVxuICAgIH0sXG4gICAgaGFuZGxlQ3VycmVudENoYW5nZSAocGFnZUluZGV4KSB7XG4gICAgICB0aGlzLnBhZ2VObyA9IHBhZ2VJbmRleFxuICAgICAgdGhpcy5zZWFyY2hNYW51U2NyaXB0KClcbiAgICB9LFxuICAgIC8qKiDljZXpgIkgKiovXG4gICAgc2VsZWN0IChzZWxlY3Rpb24sIHJvdykge1xuICAgICAgdGhpcy5zZWxlY3RSb3cgPSByb3dcbiAgICAgIGlmIChzZWxlY3Rpb24ubGVuZ3RoID4gMSkge1xuICAgICAgICBzZWxlY3Rpb24uc2hpZnQoKVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOWFqOmAiSAqKi9cbiAgICBzZWxlY3RBbGwgKHNlbGVjdGlvbikge1xuICAgICAgdGhpcy4kcmVmcy5hZGRNYW51LmNsZWFyU2VsZWN0aW9uKClcbiAgICAgIHRoaXMuc2VsZWN0Um93ID0ge31cbiAgICB9LFxuICAgIC8qKiDpgJrnn6XniLbnu4Tku7bpgInmi6nkuoblk6rooYzkuJPpopggKiovXG4gICAgbm90aWZ5UGFyZW50U2VsZWN0ZWRSb3cgKCkge1xuICAgICAgdGhpcy4kZW1pdChcJ3NlbGVjdGVkLXJvd1wnLCB0aGlzLnNlbGVjdFJvdylcbiAgICB9XG4gIH1cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC50YWJsZS1saXN0IHtcbiAgICBtaW4taGVpZ2h0OiA0MDBweDtcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIHBhZGRpbmc6IDBweDtcbiAgfVxuICAud2hvbGUtdGFibGUge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjE4LCAyMjIsIDIyMywgMSk7XG4gICAgbWluLWhlaWdodDogMjV2dztcbiAgfVxuICAucGFnaW5hdGlvbiB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgfVxuICAuYWRkVXJsIC5idG4tY29udGFpbmVyIHtcbiAgICB3aWR0aDogMjMlICFpbXBvcnRhbnQ7XG4gICAgbGVmdDogMHB4O1xuICB9XG5cbjwvc3R5bGU+XG48c3R5bGU+XG4gIC5lbC1kaWFsb2dfX2hlYWRlcntcbiAgICBwYWRkaW5nOiAxM3B4IDMwcHggMTNweDtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI0MwQkVGRjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjdGQUZGO1xuICB9XG4gIC5lbC1kaWFsb2dfX3RpdGxlIHtcbiAgICBsaW5lLWhlaWdodDogMTdweDtcbiAgICBmb250LXNpemU6IDE3cHg7XG4gICAgY29sb3I6ICMzMDMxMzM7XG4gIH1cbiAgLmVsLWRpYWxvZ19faGVhZGVyYnRuIHtcbiAgICB0b3A6IDEzcHg7XG4gIH1cbiAgLmVsLWRpYWxvZ19fYm9keSB7XG4gICAgcGFkZGluZzogMjBweCA2MHB4O1xuICB9XG4gIC5hZGRVcmwgLmVsLWZvcm0taXRlbSB7XG4gICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICB9XG4gIC5hZGRVcmwgLmVsLWZvcm0ge1xuICAgIG1hcmdpbi10b3A6IDE1cHg7XG4gIH1cbiAgLmFkZFVybCAuZWwtZGF0ZS1lZGl0b3J7XG4gICAgd2lkdGg6IDg1JTtcbiAgfVxuICAuYWRkVXJsIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAzMCU7XG4gICAgbWFyZ2luLXJpZ2h0OiAzJTtcbiAgfVxuICAuYWRkVXJsIC5kYXRlLWxlZnQge1xuICAgIGxlZnQ6IDBweDtcbiAgfVxuICAuYWRkVXJsIC5lbC1yYW5nZS1lZGl0b3IgLmVsLXJhbmdlLWlucHV0e1xuICAgIHdpZHRoOjUwJTtcbiAgfVxuICAuYWRkVXJsIC5idG4tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG4gLmVsLXRvb2x0aXBfX3BvcHBlcntcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xuICB9XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sYlJZeTpmdW5jdGlvbihlLG4pe30sYlVmRDpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLnVzZXItZXZlbnQtbGlzdCAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICB3aWR0aDogNjAlO1xufVxuLnVzZXItZXZlbnQtbGlzdCAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICB3aWR0aDogMjUlO1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VFdmVudC9zcmMvY29tcG9uZW50cy9tYW5hZ2VFdmVudC91c2VyRXZlbnRMaXN0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUE4TUE7RUFDQSxXQUFBO0NBQ0E7QUFDQTtFQUNBLFdBQUE7Q0FDQSIsZmlsZToidXNlckV2ZW50TGlzdC52dWUiLHNvdXJjZXNDb250ZW50OlsnPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSJ1c2VyLWV2ZW50LWxpc3QiPlxuICAgIDxkaXY+XG4gICAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICAgIHRpdGxlLW5hbWU9IueUqOaIt+a0u+WKqOWIl+ihqCJcbiAgICAgICAgY2xhc3M9ImNpY2xlLWNvbnRyb2xsZXIiXG4gICAgICAvPlxuICAgICAgPGRpdiBjbGFzcz0ic2VhcmNoLWZvcm0tY29udGFpbmVyIj5cbiAgICAgICAgPGVsLWZvcm1cbiAgICAgICAgICA6aW5saW5lPSJ0cnVlIlxuICAgICAgICAgIDptb2RlbD0idXNlckV2ZW50Rm9ybSJcbiAgICAgICAgICBjbGFzcz0iZGVtby1mb3JtLWlubGluZSI+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5rS75Yqo5ZCN56ewIj5cbiAgICAgICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgICAgICB2LW1vZGVsPSJ1c2VyRXZlbnRGb3JtLmFjdGl2aXR5X25hbWUiXG4gICAgICAgICAgICAgIGNsZWFyYWJsZVxuICAgICAgICAgICAgICBAY2hhbmdlPSJnZXRwYWdlUGFydGljaXBhbnRzIi8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i55So5oi35ZCNIj5cbiAgICAgICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgICAgICB2LW1vZGVsPSJ1c2VyRXZlbnRGb3JtLm5pY2tuYW1lIlxuICAgICAgICAgICAgICBjbGVhcmFibGVcbiAgICAgICAgICAgICAgQGNoYW5nZT0iZ2V0cGFnZVBhcnRpY2lwYW50cyIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuazqOWGjOaJi+acuuWPtyI+XG4gICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgdi1tb2RlbD0idXNlckV2ZW50Rm9ybS5waG9uZSJcbiAgICAgICAgICAgICAgY2xlYXJhYmxlXG4gICAgICAgICAgICAgIEBjaGFuZ2U9ImdldHBhZ2VQYXJ0aWNpcGFudHMiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i5byA5aeL5pe26Ze0Ij5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9InVzZXJFdmVudEZvcm0uc3RhcnREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9InVzZXJFdmVudEZvcm0uc3RhcnREYXRlIlxuICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pel5pyfIlxuICAgICAgICAgICAgICBjbGVhcmFibGVcbiAgICAgICAgICAgICAgQGNoYW5nZT0iZ2V0cGFnZVBhcnRpY2lwYW50cyIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLnu5PmnZ/ml7bpl7QiXG4gICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IC0xNHB4OyI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPSJ1c2VyRXZlbnRGb3JtLmVuZERhdGUgfCBGb3JtYXREYXRlKFwneXl5eS1NTS1kZCBoaDptbVwnKSJcbiAgICAgICAgICAgICAgdi1tb2RlbD0idXNlckV2ZW50Rm9ybS5lbmREYXRlIlxuICAgICAgICAgICAgICBmb3JtYXQ9Inl5eXktTU0tZGQgSEg6bW0iXG4gICAgICAgICAgICAgIHR5cGU9ImRhdGV0aW1lIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pel5pyfIlxuICAgICAgICAgICAgICBjbGVhcmFibGVcbiAgICAgICAgICAgICAgQGNoYW5nZT0iZ2V0cGFnZVBhcnRpY2lwYW50cyIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IDk1cHgiXG4gICAgICAgICAgICBAY2xpY2s9ImdldHBhZ2VQYXJ0aWNpcGFudHMiPlxuICAgICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICA8L2VsLWJ1dHRvbj5cbiAgICAgICAgPC9lbC1mb3JtPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz0idGFibGUtbGlzdCI+XG4gICAgICA8ZWwtdGFibGVcbiAgICAgICAgcmVmPSJ1c2VyRXZlbnRUYWJsZSJcbiAgICAgICAgOmRhdGE9InRhYmxlRGF0YSJcbiAgICAgICAgc3RyaXBlXG4gICAgICAgIGNsYXNzPSJ3aG9sZS10YWJsZSJcbiAgICAgICAgbWluLWhlaWdodD0iNDAwIj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIHRhYmxlSGVhZGVyIlxuICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgIDpwcm9wPSJpdGVtLnByb3AiXG4gICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIlxuICAgICAgICAgIDp3aWR0aD0iaXRlbS53aWR0aCJcbiAgICAgICAgICA6Zm9ybWF0dGVyPSJpdGVtLmZvcm1hdHRlciJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIGZpeGVkXG4gICAgICAgICAgc2hvdy1vdmVyZmxvdy10b29sdGlwXG4gICAgICAgIC8+XG4gICAgICA8L2VsLXRhYmxlPlxuICAgICAgPGRpdiBjbGFzcz0icGFnaW5hdGlvbiI+XG4gICAgICAgIDxlbC1wYWdpbmF0aW9uXG4gICAgICAgICAgOnRvdGFsPSJ0b3RhbCJcbiAgICAgICAgICA6cGFnZS1zaXplcz0iWzEwLCAyMCwgMzAsIDQwXSJcbiAgICAgICAgICA6Y3VycmVudC1wYWdlPSJwYWdlTm8iXG4gICAgICAgICAgYmFja2dyb3VuZFxuICAgICAgICAgIGxheW91dD0idG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dCJcbiAgICAgICAgICBAc2l6ZS1jaGFuZ2U9ImhhbmRsZVNpemVDaGFuZ2UiXG4gICAgICAgICAgQGN1cnJlbnQtY2hhbmdlPSJoYW5kbGVDdXJyZW50Q2hhbmdlIi8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCBDaXJjbGVUaXRsZSBmcm9tIFwnQC9jb21wb25lbnRzL2NvbW1vbnMvY2lyY2xlVGl0bGVcJ1xuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tIFwnQC9hcGkvZXZlbnRBcGlcJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQ2lyY2xlVGl0bGVcbiAgfSxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZXJFdmVudEZvcm06IHtcbiAgICAgICAgYWN0aXZpdHlfbmFtZTogXCdcJyxcbiAgICAgICAgbmlja25hbWU6IFwnXCcsXG4gICAgICAgIHBob25lOiBcJ1wnLFxuICAgICAgICBzdGF0ZTogXCdcJyxcbiAgICAgICAgc29ydDogXCcxXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJ1xuICAgICAgfSxcbiAgICAgIHRhYmxlSGVhZGVyOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2hlYWRfaW1nXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5Zu+5qCHXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8aW1nIGNsYXNzPVwndG9waWMtdGFibGUtcGljXCcgc3JjPXtjZWxsVmFsdWV9Lz5cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2FjdGl2aXR5X25hbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfmtLvliqjlkI3np7BcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCd0eXBlX25hbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfmtLvliqjnsbvlnotcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdzaG93U3RhdGVcJyxcbiAgICAgICAgICBsYWJlbDogXCfnirbmgIFcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCduaWNrbmFtZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+eUqOaIt+WQjeensFwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3Bob25lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5rOo5YaM5omL5py65Y+3XCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnZXhwaXJ5X2RhdGVfc3RhcnRcJyxcbiAgICAgICAgICBsYWJlbDogXCflj4LliqDmtLvliqjml7bpl7RcJyxcbiAgICAgICAgICB3aWR0aDogMzAwLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgc3RhcnREYXRlID0gdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnRm9ybWF0RGF0ZVwnXShjZWxsVmFsdWUsIFwneXl5eS1NTS1kZCBoaDptbVwnKVxuICAgICAgICAgICAgbGV0IGVuZERhdGUgPSB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKHJvdy5leHBpcnlfZGF0ZV9lbmQsIFwneXl5eS1NTS1kZCBoaDptbVwnKVxuICAgICAgICAgICAgcmV0dXJuIHN0YXJ0RGF0ZSArIFwn6IezXCcgKyBlbmREYXRlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgdGFibGVEYXRhOiBbXSxcbiAgICAgIHBhZ2VObzogMSxcbiAgICAgIHBhZ2VTaXplOiAxMCxcbiAgICAgIHRvdGFsOiAwXG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIFwndXNlckV2ZW50Rm9ybS5hY3Rpdml0eV9uYW1lXCcgKHZhbCkge1xuICAgICAgdGhpcy5nZXRwYWdlUGFydGljaXBhbnRzKClcbiAgICB9LFxuICAgIFwndXNlckV2ZW50Rm9ybS5uaWNrbmFtZVwnICh2YWwpIHtcbiAgICAgIHRoaXMuZ2V0cGFnZVBhcnRpY2lwYW50cygpXG4gICAgfSxcbiAgICBcJ3VzZXJFdmVudEZvcm0ucGhvbmVcJyAodmFsKSB7XG4gICAgICB0aGlzLmdldHBhZ2VQYXJ0aWNpcGFudHMoKVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgLyoqIOWIhumhteiOt+WPlueUqOaIt+a0u+WKqOWIl+ihqCAqKi9cbiAgICB0aGlzLmdldHBhZ2VQYXJ0aWNpcGFudHMoKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZ2V0cGFnZVBhcnRpY2lwYW50cyAoKSB7XG4gICAgICB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdzd2FwVGltZVwnXSh0aGlzLnVzZXJFdmVudEZvcm0pXG4gICAgICBsZXQgdGltZVN0YXJ0ID0gdGhpcy51c2VyRXZlbnRGb3JtLnN0YXJ0RGF0ZSAhPT0gbnVsbCA/IG5ldyBEYXRlKHRoaXMudXNlckV2ZW50Rm9ybS5zdGFydERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIGxldCB0aW1lRW5kID0gdGhpcy51c2VyRXZlbnRGb3JtLmVuZERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLnVzZXJFdmVudEZvcm0uZW5kRGF0ZSkuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgQWN0aW9ucy5nZXRwYWdlUGFydGljaXBhbnRzKHtcbiAgICAgICAgXCdwYWdlTm9cJzogdGhpcy5wYWdlTm8sXG4gICAgICAgIFwncGFnZVNpemVcJzogdGhpcy5wYWdlU2l6ZSxcbiAgICAgICAgXCdhY3Rpdml0eV9uYW1lXCc6IHRoaXMudXNlckV2ZW50Rm9ybS5hY3Rpdml0eV9uYW1lLFxuICAgICAgICBcJ25pY2tuYW1lXCc6IHRoaXMudXNlckV2ZW50Rm9ybS5uaWNrbmFtZSxcbiAgICAgICAgXCdwaG9uZVwnOiB0aGlzLnVzZXJFdmVudEZvcm0ucGhvbmUsXG4gICAgICAgIFwndGltZVN0YXJ0XCc6IHRpbWVTdGFydCxcbiAgICAgICAgXCd0aW1lRW5kXCc6IHRpbWVFbmRcbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGxpc3REYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy50YWJsZURhdGEgPSBsaXN0RGF0YS5saXN0XG4gICAgICAgICAgdGhpcy50b3RhbCA9IGxpc3REYXRhLnRvdGFsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBoYW5kbGVTaXplQ2hhbmdlIChwYWdlU2l6ZSkge1xuICAgICAgdGhpcy5wYWdlU2l6ZSA9IHBhZ2VTaXplXG4gICAgICB0aGlzLmdldHBhZ2VQYXJ0aWNpcGFudHMoKVxuICAgIH0sXG4gICAgaGFuZGxlQ3VycmVudENoYW5nZSAocGFnZUluZGV4KSB7XG4gICAgICB0aGlzLnBhZ2VObyA9IHBhZ2VJbmRleFxuICAgICAgdGhpcy5nZXRwYWdlUGFydGljaXBhbnRzKClcbiAgICB9XG4gIH1cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZT5cbiAgLnVzZXItZXZlbnQtbGlzdCAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICAgIHdpZHRoOiA2MCU7XG4gIH1cbiAgLnVzZXItZXZlbnQtbGlzdCAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAyNSU7XG4gIH1cbjwvc3R5bGU+XG4nXSxzb3VyY2VSb290OiIifV0pfSxidGNzOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJPU3lsIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoImY5ZTM5YzYwIixhLCExLHt9KX0sY0RTeTpmdW5jdGlvbihlLG4pe30sY3dlNzpmdW5jdGlvbihlLG4pe30sZG1SSDpmdW5jdGlvbihlLG4pe30sZTJTVjpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgicGVvLyIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCI2NmNmNzVkYiIsYSwhMSx7fSl9LGVrWDU6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoInl3bWgiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiMWUxNDU0YzAiLGEsITEse30pfSxla2NNOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJ0WWx4Iik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjFjMTBiNWRkIixhLCExLHt9KX0sZkhMSDpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgiVUtETiIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCI2NGRhOTEwNCIsYSwhMSx7fSl9LGc1Q0I6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi5jaWNsZS1jb250cm9sbGVyW2RhdGEtdi02ZGVjNGUxOF0ge1xuICBtYXJnaW4tdG9wOiA0JTtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlVG9waWMvc3JjL2NvbXBvbmVudHMvbWFuYWdlVG9waWMvdG9waWNFZGl0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUE0UUE7RUFDQSxlQUFBO0NBQ0EiLGZpbGU6InRvcGljRWRpdC52dWUiLHNvdXJjZXNDb250ZW50OlsnPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSJ0b3BpYyBjcmVhdGUiPlxuICAgIDxjaXJjbGUtdGl0bGVcbiAgICAgIHRpdGxlLW5hbWU9IuS4k+mimOe8lui+kSJcbiAgICAgIGNsYXNzPSJjaWNsZS1jb250cm9sbGVyIlxuICAgIC8+XG4gICAgPGVsLWZvcm1cbiAgICAgIHJlZj0iZWRpdEZvcm0iXG4gICAgICA6bW9kZWw9ImVkaXRGb3JtIlxuICAgICAgOnJ1bGVzPSJydWxlcyJcbiAgICAgIGxhYmVsLXdpZHRoPSIxMDBweCJcbiAgICAgIGNsYXNzPSJydWxlLWZvcm0iPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5LiT6aKY5qCH6aKYIlxuICAgICAgICBwcm9wPSJzcGVjaWFsX25hbWUiPlxuICAgICAgICA8ZWwtaW5wdXQgdi1tb2RlbC50cmltPSJlZGl0Rm9ybS5zcGVjaWFsX25hbWUiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgbGFiZWw9IuWbvuagh+mFjee9riJcbiAgICAgICAgcHJvcD0ic3BlY2lhbF9oZWFkX3VybCI+XG4gICAgICAgIDxlbC11cGxvYWRcbiAgICAgICAgICA6YWN0aW9uPSJnZXRVcGxvYWRVcmwiXG4gICAgICAgICAgOmhlYWRlcnM9InVwbG9hZEhlYWRlcnMiXG4gICAgICAgICAgOnNob3ctZmlsZS1saXN0PSJmYWxzZSJcbiAgICAgICAgICA6b24tc3VjY2Vzcz0iaGFuZGxlUGNBdmF0YXJTdWNjZXNzIlxuICAgICAgICAgIDpiZWZvcmUtdXBsb2FkPSJiZWZvcmVBdmF0YXJVcGxvYWQiXG4gICAgICAgICAgY2xhc3M9ImF2YXRhci11cGxvYWRlciI+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgdi1pZj0iZWRpdEZvcm0uc3BlY2lhbF9oZWFkX3VybCJcbiAgICAgICAgICAgIDpzcmM9ImVkaXRGb3JtLnNwZWNpYWxfaGVhZF91cmwiXG4gICAgICAgICAgICBjbGFzcz0iYXZhdGFyIj5cbiAgICAgICAgICA8aVxuICAgICAgICAgICAgdi1lbHNlXG4gICAgICAgICAgICBjbGFzcz0iZWwtaWNvbi1wbHVzIGF2YXRhci11cGxvYWRlci1pY29uIi8+XG4gICAgICAgIDwvZWwtdXBsb2FkPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLlvZLlsZ7popHpgZMiXG4gICAgICAgIHByb3A9ImNoYW5uZWxpZCI+XG4gICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICB2LW1vZGVsPSJlZGl0Rm9ybS5jaGFubmVsaWQiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9IiI+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gY2hhbm5lbFR5cGVMaXN0IlxuICAgICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgICA6dmFsdWU9Iml0ZW0udmFsdWUiXG4gICAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiLz5cbiAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuacieaViOacnyJcbiAgICAgICAgY2xhc3M9ImluZGF0ZSJcbiAgICAgICAgcmVxdWlyZWQ+XG4gICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgIHYtbW9kZWw9ImVkaXRGb3JtLmluZGF0ZSJcbiAgICAgICAgICA6Y2xlYXJhYmxlPSJmYWxzZSJcbiAgICAgICAgICBzdHlsZT0id2lkdGg6MTAwJSJcbiAgICAgICAgICB0eXBlPSJkYXRldGltZXJhbmdlIlxuICAgICAgICAgIHJhbmdlLXNlcGFyYXRvcj0i6IezIlxuICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICBzdGFydC1wbGFjZWhvbGRlcj0i5byA5aeL5pel5pyfIlxuICAgICAgICAgIGVuZC1wbGFjZWhvbGRlcj0i57uT5p2f5pel5pyfIi8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuaOkuW6jyJcbiAgICAgICAgcHJvcD0ic29ydCI+XG4gICAgICAgIDxlbC1pbnB1dCB2LW1vZGVsLm51bWJlcj0iZWRpdEZvcm0uc29ydCIvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLnirbmgIHpgInmi6kiXG4gICAgICAgIHByb3A9InN0YXRlIj5cbiAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgIHYtbW9kZWw9ImVkaXRGb3JtLnN0YXRlIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fpgInmi6kiPlxuICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgIDp2YWx1ZT0iMSJcbiAgICAgICAgICAgIGxhYmVsPSLlkK/nlKgiLz5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICA6dmFsdWU9IjAiXG4gICAgICAgICAgICBsYWJlbD0i5YGc55SoIi8+XG4gICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtPlxuICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICBAY2xpY2s9InN1Ym1pdEZvcm0oXCdlZGl0Rm9ybVwnKSI+5o+Q5LqkPC9lbC1idXR0b24+XG4gICAgICAgIDxlbC1idXR0b24gQGNsaWNrPSJnb3RvTGlzdCI+5Y+W5raIPC9lbC1idXR0b24+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICA8L2VsLWZvcm0+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlXCdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL3RvcGljQXBpXCdcbmltcG9ydCB1cGxvYWRIZWFkZXJzIGZyb20gXCdAL21peGluc1wnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBDaXJjbGVUaXRsZVxuICB9LFxuXG4gIG1peGluczogW3VwbG9hZEhlYWRlcnNdLFxuICBcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVkaXRGb3JtOiB7XG4gICAgICAgIHNwZWNpYWxfbmFtZTogXCdcJyxcbiAgICAgICAgY2hhbm5lbF9uYW1lOiBcJ1wnLFxuICAgICAgICBjaGFubmVsaWQ6IFwnXCcsXG4gICAgICAgIHNwZWNpYWxfaGVhZF91cmw6IFwnXCcsXG4gICAgICAgIGluZGF0ZTogW10sXG4gICAgICAgIHN0YXRlOiAwLFxuICAgICAgICBzb3J0OiAwXG4gICAgICB9LFxuICAgICAgaXNDaG9vc2VEYXRlOiBmYWxzZSxcbiAgICAgIHJ1bGVzOiB7XG4gICAgICAgIHNwZWNpYWxfbmFtZTogW1xuICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6IFwn6K+36L6T5YWl5LiT6aKY5ZCN56ewXCcsIHRyaWdnZXI6IFwnYmx1clwnIH0sXG4gICAgICAgICAgeyBtaW46IDAsIG1heDogNjQsIG1lc3NhZ2U6IFwn5qCH6aKY6ZmQ5a6aNjTkuKrlrZfnrKblhoVcJywgdHJpZ2dlcjogXCdjaGFuZ2VcJyB9XG4gICAgICAgIF0sXG4gICAgICAgIHNvcnQ6IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+i+k+WFpeaOkuW6j1wnLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9LFxuICAgICAgICAgIHt0eXBlOiBcJ251bWJlclwnLCBtZXNzYWdlOiBcJ+aOkuW6j+W/hemhu+S4uuaVsOWtl1wnfVxuICAgICAgICBdLFxuICAgICAgICBzcGVjaWFsX2hlYWRfdXJsOiBbXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogXCfor7fkuIrkvKDlm77niYdcJywgdHJpZ2dlcjogXCdibHVyXCcgfVxuICAgICAgICBdLFxuICAgICAgICBjaGFubmVsaWQ6IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+mAieaLqeW9kuWxnumikemBk1wnLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBjaGFubmVsVHlwZUxpc3Q6IFtdLFxuICAgICAgc3BlY2lhbGlkOiBcJ1wnLFxuICAgICAgaXNSZWZyZXNoOiB0cnVlXG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGdldFVwbG9hZFVybCAoKSB7XG4gICAgICByZXR1cm4gQWN0aW9ucy51cGxvYWRQaWN0dXJlKClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuZ2V0RWRpdEluZm8oKVxuICB9LFxuICBiZWZvcmVSb3V0ZUxlYXZlICh0bywgZnJvbSwgbmV4dCkge1xuICAgIGlmICh0by5wYXRoID09PSBcJy9tYW5hZ2VUb3BpYy9saXN0XCcpIHtcbiAgICAgIHRvLm1ldGEucmVmcmVzaCA9IHRoaXMuaXNSZWZyZXNoXG4gICAgfSBlbHNlIGlmICh0by5wYXRoID09PSBcJy9tYW5hZ2VUb3BpYy9jcmVhdGVcJykge1xuICAgICAgdGhpcy4kcm9vdC5ldmVudEh1Yi4kZW1pdChcJ3Jlc2V0LW9wdGlvbnNcJylcbiAgICB9XG4gICAgbmV4dCgpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBnb3RvTGlzdCAoKSB7XG4gICAgICB0aGlzLmlzUmVmcmVzaCA9IGZhbHNlXG4gICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7cGF0aDogXCcvbWFuYWdlVG9waWMvbGlzdFwnfSlcbiAgICB9LFxuICAgIGdldEVkaXRJbmZvICgpIHtcbiAgICAgIHRoaXMuc3BlY2lhbGlkID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcJ3NwZWNpYWxpZFwnKVxuICAgICAgQWN0aW9ucy5nZXRTcGVjaWFsQnlJRCh7XG4gICAgICAgIFwnc3BlY2lhbFwnOiB7XG4gICAgICAgICAgXCdzcGVjaWFsaWRcJzogdGhpcy5zcGVjaWFsaWRcbiAgICAgICAgfVxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMuZWRpdEZvcm0uc3BlY2lhbF9uYW1lID0gZGF0YS5zcGVjaWFsX25hbWVcbiAgICAgICAgICB0aGlzLmVkaXRGb3JtLmNoYW5uZWxfbmFtZSA9IGRhdGEuY2hhbm5lbF9uYW1lXG4gICAgICAgICAgdGhpcy5lZGl0Rm9ybS5jaGFubmVsaWQgPSBkYXRhLmNoYW5uZWxpZFxuICAgICAgICAgIHRoaXMuZWRpdEZvcm0uc3RhdGUgPSBkYXRhLnN0YXRlXG4gICAgICAgICAgdGhpcy5lZGl0Rm9ybS5zcGVjaWFsX2hlYWRfdXJsID0gZGF0YS5zcGVjaWFsX2hlYWRfdXJsXG4gICAgICAgICAgdGhpcy5lZGl0Rm9ybS5pbmRhdGUucHVzaChkYXRhLmV4cGlyeV9kYXRlX3N0YXJ0KVxuICAgICAgICAgIHRoaXMuZWRpdEZvcm0uaW5kYXRlLnB1c2goZGF0YS5leHBpcnlfZGF0ZV9lbmQpXG4gICAgICAgICAgdGhpcy5lZGl0Rm9ybS5zb3J0ID0gZGF0YS5zb3J0XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nZXRMaXN0VXNhYmxlQ2hhbm5lbCgpXG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOWmguaenOeItumikemBk+iiq+WBnOeUqCwg5YiZY2hhbm5lbGlk5Li656m6ICoqL1xuICAgIHNldENoYW5ubmVsaWQgKCkge1xuICAgICAgbGV0IGlzU2V0RW1wdHkgPSB0cnVlXG4gICAgICBjb25zb2xlLmxvZyh0aGlzLmVkaXRGb3JtLmNoYW5uZWxpZClcbiAgICAgIHRoaXMuY2hhbm5lbFR5cGVMaXN0LmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtLnZhbHVlID09PSB0aGlzLmVkaXRGb3JtLmNoYW5uZWxpZCkge1xuICAgICAgICAgIGlzU2V0RW1wdHkgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgaWYgKGlzU2V0RW1wdHkpIHtcbiAgICAgICAgdGhpcy4kc2V0KHRoaXMuZWRpdEZvcm0sIFwnY2hhbm5lbGlkXCcsIFwnXCcpXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog6I635Y+W6aKR6YGT57G75YirICoqL1xuICAgIGdldExpc3RVc2FibGVDaGFubmVsICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0TGlzdFVzYWJsZUNoYW5uZWwoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YVxuICAgICAgICBpZiAoZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gZGF0YS5yZXN1bHRcbiAgICAgICAgICByZXN1bHQuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICAgICAgbGV0IG5ld0l0ZW0gPSB7fVxuICAgICAgICAgICAgbmV3SXRlbS5sYWJlbCA9IGl0ZW0uY2hhbm5lbF9uYW1lXG4gICAgICAgICAgICBuZXdJdGVtLnZhbHVlID0gaXRlbS5jaGFubmVsaWRcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbFR5cGVMaXN0LnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICAgIHRoaXMuc2V0Q2hhbm5uZWxpZCgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBzdWJtaXRGb3JtIChmb3JtTmFtZSkge1xuICAgICAgdGhpcy4kcmVmc1tmb3JtTmFtZV0udmFsaWRhdGUoKHZhbGlkKSA9PiB7XG4gICAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICAgIHRoaXMuY2hhbm5lbFR5cGVMaXN0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtLnZhbHVlID09PSB0aGlzLmVkaXRGb3JtLmNoYW5uZWxfbmFtZSkge1xuICAgICAgICAgICAgICB0aGlzLmVkaXRGb3JtLmNoYW5uZWxpZCA9IGl0ZW0ubGFiZWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIEFjdGlvbnMuZWRpdFNwZWNpYWwoe1xuICAgICAgICAgICAgXCdzcGVjaWFsXCc6IHtcbiAgICAgICAgICAgICAgXCdzcGVjaWFsaWRcJzogdGhpcy5zcGVjaWFsaWQsXG4gICAgICAgICAgICAgIFwnc3BlY2lhbF9uYW1lXCc6IHRoaXMuZWRpdEZvcm0uc3BlY2lhbF9uYW1lLFxuICAgICAgICAgICAgICBcJ3NwZWNpYWxfaGVhZF91cmxcJzogdGhpcy5lZGl0Rm9ybS5zcGVjaWFsX2hlYWRfdXJsLFxuICAgICAgICAgICAgICBcJ2NoYW5uZWxpZFwnOiB0aGlzLmVkaXRGb3JtLmNoYW5uZWxpZCxcbiAgICAgICAgICAgICAgXCdzdGF0ZVwnOiB0aGlzLmVkaXRGb3JtLnN0YXRlLFxuICAgICAgICAgICAgICBcJ2V4cGlyeV9kYXRlX3N0YXJ0XCc6IG5ldyBEYXRlKHRoaXMuZWRpdEZvcm0uaW5kYXRlWzBdKS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgIFwnZXhwaXJ5X2RhdGVfZW5kXCc6IG5ldyBEYXRlKHRoaXMuZWRpdEZvcm0uaW5kYXRlWzFdKS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgIFwnc29ydFwnOiB0aGlzLmVkaXRGb3JtLnNvcnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6IFwnL21hbmFnZVRvcGljL2xpc3RcJ30pXG4gICAgICAgICAgICAgIHRoaXMuJG5vdGlmeSh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwn6YCa55+lXCcsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCfnvJbovpHmiJDlip9cJyxcbiAgICAgICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCdlcnJvciBzdWJtaXQhIVwnKVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgaGFuZGxlUGNBdmF0YXJTdWNjZXNzIChyZXMsIGZpbGUpIHtcbiAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgIGxldCBpbWFnZVVybCA9IHJlcy5yZXN1bHRcbiAgICAgICAgdGhpcy5lZGl0Rm9ybS5zcGVjaWFsX2hlYWRfdXJsID0gaW1hZ2VVcmxcbiAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZUF2YXRhclVwbG9hZCAoZmlsZSkge1xuICAgICAgbGV0IGltYWdlT2JqID0ge1xuICAgICAgICBcJ2ltYWdlL2pwZWdcJzogdHJ1ZSxcbiAgICAgICAgXCdpbWFnZS9wbmdcJzogdHJ1ZSxcbiAgICAgICAgXCdpbWFnZS9qcGdcJzogdHJ1ZVxuICAgICAgfVxuICAgICAgY29uc3QgaXNJbWFnZSA9IGZpbGUudHlwZSBpbiBpbWFnZU9ialxuICAgICAgY29uc3QgaXNMdDJNID0gZmlsZS5zaXplIC8gMTAyNCAvIDEwMjQgPCAyXG4gICAgICBpZiAoIWlzSW1hZ2UpIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihcJ+ivt+S4iuS8oOS4gOW8oOWbvueJhyFcJylcbiAgICAgIH1cbiAgICAgIGlmICghaXNMdDJNKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoXCfkuIrkvKDlm77niYflpKflsI/kuI3og73otoXov4cgMk1CIVwnKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlzSW1hZ2UgJiYgaXNMdDJNXG4gICAgfVxuICB9XG59XG48XC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuICAuY2ljbGUtY29udHJvbGxlciB7XG4gICAgbWFyZ2luLXRvcDogNCU7XG4gIH1cbjwvc3R5bGU+XG4nXSxzb3VyY2VSb290OiIifV0pfSxnYzJLOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJzZ3l1Iik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjVjYzk4NzZjIixhLCExLHt9KX0sZ201cjpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgiWnQxYiIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCIwODQyODdiMCIsYSwhMSx7fSl9LGd6akw6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi5wYWdpbmF0aW9uW2RhdGEtdi1iMDYxMDcyOF0ge1xuICBwYWRkaW5nLXRvcDogMzBweDtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuLnRhYmxlLWxpc3RbZGF0YS12LWIwNjEwNzI4XSB7XG4gIHBhZGRpbmc6IDAgIWltcG9ydGFudDtcbiAgbWFyZ2luLXRvcDogLTI3cHggIWltcG9ydGFudDtcbn1cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPXNyYy9jb21wb25lbnRzL2hvbWUvdGFibGVMaXN0LmNzcy5tYXAgKi8iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL2hvbWUvc3JjL2NvbXBvbmVudHMvaG9tZS90YWJsZUxpc3QudnVlIiwiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvaG9tZS90YWJsZUxpc3QudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQWtFQTtFQUNFLGtCQUFBO0VBQ0Esa0JBQUE7RUFDQSxlQUFBO0NDakVEO0FEa0VEO0VBQ0Usc0JBQUE7RUFDQSw2QkFBQTtDQ2hFRDtBQUNELDZEQUE2RCIsZmlsZToidGFibGVMaXN0LnZ1ZSIsc291cmNlc0NvbnRlbnQ6WyJcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4ucGFnaW5hdGlvblxuICBwYWRkaW5nLXRvcCAzMHB4XG4gIHRleHQtYWxpZ24gcmlnaHRcbiAgZGlzcGxheSBibG9ja1xuLnRhYmxlLWxpc3RcbiAgcGFkZGluZyAwIWltcG9ydGFudFxuICBtYXJnaW4tdG9wIC0yN3B4IWltcG9ydGFudFxuIiwiLnBhZ2luYXRpb24ge1xuICBwYWRkaW5nLXRvcDogMzBweDtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuLnRhYmxlLWxpc3Qge1xuICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7XG4gIG1hcmdpbi10b3A6IC0yN3B4ICFpbXBvcnRhbnQ7XG59XG4vKiMgc291cmNlTWFwcGluZ1VSTD1zcmMvY29tcG9uZW50cy9ob21lL3RhYmxlTGlzdC5jc3MubWFwICovIl0sc291cmNlUm9vdDoiIn1dKX0saDFxUTpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLnRvcGljIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmVsLWZvcm0taXRlbVtkYXRhLXYtOGM3YzljZjBdIHtcbiAgd2lkdGg6IDI1JTtcbn1cbi50b3BpYyAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1kYXRlLWVkaXRvcltkYXRhLXYtOGM3YzljZjBdIHtcbiAgd2lkdGg6IDIwMHB4O1xufVxuLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtW2RhdGEtdi04YzdjOWNmMF0sIC5lbC1mb3JtLS1pbmxpbmUgLmVsLWZvcm0taXRlbV9fY29udGVudFtkYXRhLXYtOGM3YzljZjBdIHtcbiAgd2lkdGg6IDYzJTtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlVG9waWMvc3JjL2NvbXBvbmVudHMvbWFuYWdlVG9waWMvdG9waWNMaXN0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUF5Y0E7RUFDQSxXQUFBO0NBQ0E7QUFDQTtFQUNBLGFBQUE7Q0FDQTtBQUNBO0VBQ0EsV0FBQTtDQUNBIixmaWxlOiJ0b3BpY0xpc3QudnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0idG9waWMiPlxuICAgIDxkaXY+XG4gICAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICAgIHRpdGxlLW5hbWU9IuS4k+mimOeuoeeQhiJcbiAgICAgICAgY2xhc3M9ImNpY2xlLWNvbnRyb2xsZXIiXG4gICAgICAvPlxuICAgICAgPGRpdiBjbGFzcz0ic2VhcmNoLWZvcm0tY29udGFpbmVyIj5cbiAgICAgICAgPGVsLWZvcm1cbiAgICAgICAgICA6aW5saW5lPSJ0cnVlIlxuICAgICAgICAgIDptb2RlbD0idG9waWNGb3JtIlxuICAgICAgICAgIGNsYXNzPSJkZW1vLWZvcm0taW5saW5lIj5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLpopHpgZMiPlxuICAgICAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgICAgICB2LW1vZGVsPSJ0b3BpY0Zvcm0uY2hhbm5lbGlkIlxuICAgICAgICAgICAgICBmaWx0ZXJhYmxlXG4gICAgICAgICAgICAgIGNsZWFyYWJsZVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgICAgICBAY2xlYXI9InNlYXJjaFNwZWNpYWwiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaFNwZWNpYWwiPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gbGlzdFVzYWJsZUNoYW5uZWwiXG4gICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgICAgICAgOnZhbHVlPSJpdGVtLnZhbHVlIlxuICAgICAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5LiT6aKYIj5cbiAgICAgICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgICAgICB2LW1vZGVsPSJ0b3BpY0Zvcm0uc3BlY2lhbF9uYW1lIi8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9IueKtuaAgSJcbiAgICAgICAgICAgIGNsYXNzPSJzZWFyY2gtbGVmdCI+XG4gICAgICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgICAgIHYtbW9kZWw9InRvcGljRm9ybS5zdGF0ZSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IiJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoU3BlY2lhbCI+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICB2YWx1ZT0iIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlhajpg6giLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMSJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5b6F5LiK57q/Ii8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9IjIiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuW3suS4iue6vyIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPSIzIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLov4fmnJ8iLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMCJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5YGc55SoIi8+XG4gICAgICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i5byA5aeL5pe26Ze0IlxuICAgICAgICAgICAgY2xhc3M9ImRhdGUtbGVmdCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPSJ0b3BpY0Zvcm0uc3RhcnREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9InRvcGljRm9ybS5zdGFydERhdGUiXG4gICAgICAgICAgICAgIHR5cGU9ImRhdGV0aW1lIlxuICAgICAgICAgICAgICBmb3JtYXQ9Inl5eXktTU0tZGQgSEg6bW0iXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLpgInmi6nml6XmnJ8iXG4gICAgICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaFNwZWNpYWwiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i57uT5p2f5pe26Ze0IlxuICAgICAgICAgICAgY2xhc3M9ImRhdGUtbGVmdCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPSJ0b3BpY0Zvcm0uZW5kRGF0ZSB8IEZvcm1hdERhdGUoXCd5eXl5LU1NLWRkIGhoOm1tXCcpIlxuICAgICAgICAgICAgICB2LW1vZGVsPSJ0b3BpY0Zvcm0uZW5kRGF0ZSJcbiAgICAgICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXpeacnyJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoU3BlY2lhbCIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IDQwcHgiXG4gICAgICAgICAgICBAY2xpY2s9InNlYXJjaFNwZWNpYWwiPlxuICAgICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICA8L2VsLWJ1dHRvbj5cbiAgICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9tYW5hZ2VUb3BpYy9jcmVhdGUiPlxuICAgICAgICAgICAgPGVsLWJ1dHRvbiB0eXBlPSJwcmltYXJ5Ij5cbiAgICAgICAgICAgICAg5re75Yqg5LiT6aKYXG4gICAgICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLXBsdXMgZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICAgIDwvcm91dGVyLWxpbms+XG4gICAgICAgIDwvZWwtZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9InRhYmxlLWxpc3QiPlxuICAgICAgPGVsLXRhYmxlXG4gICAgICAgIHJlZj0iY2hhbm5lbFRhYmxlIlxuICAgICAgICA6ZGF0YT0idGFibGVEYXRhIlxuICAgICAgICBzdHJpcGVcbiAgICAgICAgY2xhc3M9Indob2xlLXRhYmxlIlxuICAgICAgICBtaW4taGVpZ2h0PSI0MDAiXG4gICAgICAgIEBjZWxsLWNsaWNrPSJjZWxsQ2xpY2siXG4gICAgICAgIEBjZWxsLW1vdXNlLWxlYXZlPSJjZWxsTW91c2VMZWF2ZSI+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiB0YWJsZUhlYWRlciJcbiAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICA6cHJvcD0iaXRlbS5wcm9wIlxuICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCJcbiAgICAgICAgICA6d2lkdGg9Iml0ZW0ud2lkdGgiXG4gICAgICAgICAgOmZvcm1hdHRlcj0iaXRlbS5mb3JtYXR0ZXIiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICBmaXhlZFxuICAgICAgICAgIHNob3ctb3ZlcmZsb3ctdG9vbHRpcFxuICAgICAgICAvPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgZml4ZWQ9InJpZ2h0IlxuICAgICAgICAgIGxhYmVsPSLmk43kvZwiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICB3aWR0aD0iMTAwIj5cbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgY29udGVudD0i5L+u5pS554q25oCBIlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcCI+XG4gICAgICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IlxuICAgICAgICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgICAgICAgIGljb249ImVsLWljb24tcmVtb3ZlLW91dGxpbmUiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJjaGFuZ2VTdGF0ZShzY29wZS5yb3cpIi8+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9InRleHQiXG4gICAgICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgICAgICBpY29uPSJlbC1pY29uLWVkaXQiXG4gICAgICAgICAgICAgIEBjbGljaz0iaGFuZGxlRWRpdChzY29wZS5yb3cpIi8+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9InRleHQiXG4gICAgICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgICAgICBpY29uPSJlbC1pY29uLWRlbGV0ZSJcbiAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVEZWxldGUoc2NvcGUucm93KSIvPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgPC9lbC10YWJsZT5cbiAgICAgIDxkaXYgY2xhc3M9InBhZ2luYXRpb24iPlxuICAgICAgICA8ZWwtcGFnaW5hdGlvblxuICAgICAgICAgIDp0b3RhbD0idG90YWwiXG4gICAgICAgICAgOnBhZ2Utc2l6ZXM9IlsxMCwgMjAsIDMwLCA0MF0iXG4gICAgICAgICAgOmN1cnJlbnQtcGFnZT0icGFnZU5vIlxuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICBsYXlvdXQ9InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPSJoYW5kbGVTaXplQ2hhbmdlIlxuICAgICAgICAgIEBjdXJyZW50LWNoYW5nZT0iaGFuZGxlQ3VycmVudENoYW5nZSIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlXCdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL3RvcGljQXBpXCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlXG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0b3BpY0Zvcm06IHtcbiAgICAgICAgY2hhbm5lbGlkOiBcJ1wnLFxuICAgICAgICBjaGFubmVsX25hbWU6IFwnXCcsXG4gICAgICAgIHNwZWNpYWxfbmFtZTogXCdcJyxcbiAgICAgICAgZGF0ZXJhbmdlOiBbXSxcbiAgICAgICAgc3RhdGU6IFwnXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJ1xuICAgICAgfSxcbiAgICAgIGNsaWNrQ2VsbEluZGV4OiAtMSxcbiAgICAgIHRhYmxlSGVhZGVyOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3NwZWNpYWxfbmFtZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+S4k+mimOWQjeensFwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3VwZGF0ZXRpbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfmm7TmlrDml6XmnJ9cJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10oY2VsbFZhbHVlLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2NoYW5uZWxfbmFtZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+W9kuWxnumikemBk1wnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3NwZWNpYWxfaGVhZF91cmxcJyxcbiAgICAgICAgICBsYWJlbDogXCflm77niYdcJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxpbWcgY2xhc3M9XCd0b3BpYy10YWJsZS1waWNcJyBzcmM9e2NlbGxWYWx1ZX0vPlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnZXhwaXJ5X2RhdGVfc3RhcnRcJyxcbiAgICAgICAgICBsYWJlbDogXCfmnInmlYjmnJ8t5aeLXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdleHBpcnlfZGF0ZV9lbmRcJyxcbiAgICAgICAgICBsYWJlbDogXCfmnInmlYjmnJ8t57uIXCcsXG4gICAgICAgICAgd2lkdGg6IDEyMCxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10oY2VsbFZhbHVlLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3Nob3dTdGF0ZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+eKtuaAgVwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3NvcnRcJyxcbiAgICAgICAgICBsYWJlbDogXCfmjpLluo9cJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSB0aGlzLmNsaWNrQ2VsbEluZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybiA8aW5wdXQgdHlwZT1cJ3RleHRcJyBjbGFzcz1cJ3NlbGYtc29ydFwnIGlkPXtpbmRleH0gdmFsdWU9IHtjZWxsVmFsdWV9IGF1dG9mb2N1cz0iYXV0b2ZvY3VzIiAvPlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDxzcGFuIGNsYXNzPVwnc29ydC1jb250YWluZXJcJyBkYXRhLWlkPXtpbmRleH0+e2NlbGxWYWx1ZX08L3NwYW4+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgdGFibGVEYXRhOiBbXSxcbiAgICAgIHNvcnRWYWx1ZTogLTEsXG4gICAgICBwYWdlTm86IDEsXG4gICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICB0b3RhbDogMCxcbiAgICAgIGxpc3RVc2FibGVDaGFubmVsOiBbXSwgLy8g5Y+v55So55qE6aKR6YGT5YiX6KGoXG4gICAgICBzZWxlY3RTcGVjaWFsSWQ6IFwnXCcgLy8g54K55Ye75o6S5bqP6KGM55qEY2hhbm5lbGlkXG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIFwndG9waWNGb3JtLnN0YXRlXCcgKCkge1xuICAgICAgdGhpcy5zZWFyY2hTcGVjaWFsKClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIC8qKiDojrflj5bkuJPpopjliJfooaggKiovXG4gICAgdGhpcy5nZXRUb3BpY0xpc3QoKVxuICAgIC8qKiDojrflj5blj6/nlKjpopHpgZPliJfooagqKi9cbiAgICB0aGlzLmdldExpc3RVc2FibGVDaGFubmVsKClcblxuICAgIHRoaXMuJHJvb3QuZXZlbnRIdWIuJG9uKFwncmVzZXQtb3B0aW9uc1wnLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlc2V0T3B0aW9ucygpXG4gICAgfSlcbiAgfSxcbiAgYWN0aXZhdGVkICgpIHtcbiAgICBsZXQgbWV0YSA9IHRoaXMuJHJvdXRlLm1ldGFcbiAgICBpZiAobWV0YS5oYXNPd25Qcm9wZXJ0eShcJ3JlZnJlc2hcJykgJiYgbWV0YS5yZWZyZXNoKSB7XG4gICAgICB0aGlzLmdldFRvcGljTGlzdCgpXG4gICAgICBkZWxldGUgdGhpcy4kcm91dGUubWV0YS5yZWZyZXNoXG4gICAgfVxuICB9LFxuICBiZWZvcmVSb3V0ZUxlYXZlICh0bywgZnJvbSwgbmV4dCkge1xuICAgIGlmICh0by5wYXRoID09PSBcJy9tYW5hZ2VUb3BpYy9jcmVhdGVcJykge1xuICAgICAgdGhpcy5yZXNldE9wdGlvbnMoKVxuICAgIH1cbiAgICBuZXh0KClcbiAgfSxcbiAgYmVmb3JlRGVzdHJveSAoKSB7XG4gICAgdGhpcy4kcm9vdC5ldmVudEh1Yi4kb2ZmKFwncmVzZXQtb3B0aW9uc1wnKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgcmVzZXRPcHRpb25zICgpIHtcbiAgICAgIHRoaXMudG9waWNGb3JtID0ge1xuICAgICAgICBjaGFubmVsaWQ6IFwnXCcsXG4gICAgICAgIGNoYW5uZWxfbmFtZTogXCdcJyxcbiAgICAgICAgc3BlY2lhbF9uYW1lOiBcJ1wnLFxuICAgICAgICBkYXRlcmFuZ2U6IFtdLFxuICAgICAgICBzdGF0ZTogXCdcJyxcbiAgICAgICAgc3RhcnREYXRlOiBcJ1wnLFxuICAgICAgICBlbmREYXRlOiBcJ1wnXG4gICAgICB9XG4gICAgICB0aGlzLnBhZ2VObyA9IDFcbiAgICAgIHRoaXMuZ2V0VG9waWNMaXN0KClcbiAgICB9LFxuICAgIGhhbmRsZVNpemVDaGFuZ2UgKHBhZ2VTaXplKSB7XG4gICAgICB0aGlzLnBhZ2VTaXplID0gcGFnZVNpemVcbiAgICAgIHRoaXMuc2VhcmNoU3BlY2lhbCgpXG4gICAgfSxcbiAgICBoYW5kbGVDdXJyZW50Q2hhbmdlIChwYWdlSW5kZXgpIHtcbiAgICAgIHRoaXMucGFnZU5vID0gcGFnZUluZGV4XG4gICAgICB0aGlzLmdldFRvcGljTGlzdCgpXG4gICAgfSxcbiAgICB0b2dnbGVBbGxTZWxlY3Rpb24gKGUpIHtcbiAgICAgIHRoaXMuJHJlZnMuY2hhbm5lbFRhYmxlLnRvZ2dsZUFsbFNlbGVjdGlvbigpXG4gICAgfSxcbiAgICAvKiog5Y2V5YWD5qC86KKr54K55Ye7ICoqL1xuICAgIGNlbGxDbGljayAocm93LCBjb2x1bW4sIGNlbGwsIGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcJ3NvcnQtY29udGFpbmVyXCcpKSB7XG4gICAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgICBsZXQgaWQgPSBldmVudC50YXJnZXQuZGF0YXNldC5pZFxuICAgICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgdGhpcy5jbGlja0NlbGxJbmRleCA9IHBhcnNlSW50KGlkKVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICBsZXQgaW5wdXRFbGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcJy5lbC10b29sdGlwID4gaW5wdXQuc2VsZi1zb3J0XCcpXG4gICAgICAgICAgICBpbnB1dEVsZXMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdFNwZWNpYWxJZCA9IHJvdy5zcGVjaWFsaWRcbiAgICAgICAgICAgICAgICBlbGVtZW50LmZvY3VzKClcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm9ua2V5dXAgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3J0VmFsdWUgPSBwYXJzZUludChlbGVtZW50LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgICAgbWVzc2FnZTogXCflkK/nlKjnirbmgIHkuIvkuI3og73mjpLluo8hXCdcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog56a75byA5Y2V5YWD5qC8ICoqL1xuICAgIGNlbGxNb3VzZUxlYXZlIChyb3cpIHtcbiAgICAgIC8qKiDph43nva7ljZXlhYPmoLznirbmgIEgKiovXG4gICAgICB0aGlzLmNsaWNrQ2VsbEluZGV4ID0gLTFcbiAgICAgIGlmICh0aGlzLnNvcnRWYWx1ZSA9PT0gLTEgfHwgdGhpcy5zZWxlY3RTcGVjaWFsSWQgIT09IHJvdy5zcGVjaWFsaWQpIHJldHVybiBmYWxzZVxuICAgICAgLyoqIOS/ruaUueaOkuW6jyAqKi9cbiAgICAgIEFjdGlvbnMuY2hhbmdlU3BlY2lhbFNvcnQoe1xuICAgICAgICBcJ3NwZWNpYWxcJzoge1xuICAgICAgICAgIFwnc3BlY2lhbGlkXCc6IHJvdy5zcGVjaWFsaWQsXG4gICAgICAgICAgXCdzb3J0XCc6IHRoaXMuc29ydFZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgIHRoaXMuZ2V0VG9waWNMaXN0KClcbiAgICAgICAgICB0aGlzLnNvcnRWYWx1ZSA9IC0xXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog6I635Y+W5LiT6aKY5YiX6KGoICoqL1xuICAgIGdldFRvcGljTGlzdCAoKSB7XG4gICAgICBsZXQgdGltZVN0YXJ0ID0gdGhpcy50b3BpY0Zvcm0uc3RhcnREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy50b3BpY0Zvcm0uc3RhcnREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBsZXQgdGltZUVuZCA9IHRoaXMudG9waWNGb3JtLmVuZERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLnRvcGljRm9ybS5lbmREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBBY3Rpb25zLmdldFRvcGljTGlzdCh7XG4gICAgICAgIFwncGFnZU5vXCc6IHRoaXMucGFnZU5vLFxuICAgICAgICBcJ3BhZ2VTaXplXCc6IHRoaXMucGFnZVNpemUsXG4gICAgICAgIFwnY2hhbm5lbGlkXCc6IHRoaXMudG9waWNGb3JtLmNoYW5uZWxpZCxcbiAgICAgICAgXCdzcGVjaWFsX25hbWVcJzogdGhpcy50b3BpY0Zvcm0uc3BlY2lhbF9uYW1lLFxuICAgICAgICBcJ3N0YXRlXCc6IHRoaXMudG9waWNGb3JtLnN0YXRlLFxuICAgICAgICBcJ3RpbWVTdGFydFwnOiB0aW1lU3RhcnQsXG4gICAgICAgIFwndGltZUVuZFwnOiB0aW1lRW5kXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBsaXN0RGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gbGlzdERhdGEubGlzdFxuICAgICAgICAgIHRoaXMudG90YWwgPSBsaXN0RGF0YS50b3RhbFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOiOt+WPluWNleWFg+agvOaVsOaNriAqKi9cbiAgICBoYW5kbGVFZGl0OiBmdW5jdGlvbiAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCdzcGVjaWFsaWRcJywgcm93LnNwZWNpYWxpZClcbiAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6IFwnL21hbmFnZVRvcGljL2VkaXRcJ30pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCflkK/nlKjnirbmgIHkuIvkuI3lj6/nvJbovpEhXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDkv67mlLnnirbmgIEgKiovXG4gICAgY2hhbmdlU3RhdGUgKHJvdykge1xuICAgICAgbGV0IHN0YXRlID0gMFxuICAgICAgaWYgKHJvdy5zdGF0ZSA9PT0gMSkge1xuICAgICAgICBzdGF0ZSA9IDBcbiAgICAgIH0gZWxzZSBpZiAocm93LnN0YXRlID09PSAwKSB7XG4gICAgICAgIHN0YXRlID0gMVxuICAgICAgfVxuICAgICAgQWN0aW9ucy5jaGFuZ2VTcGVjaWFsU3RhdGUoe1xuICAgICAgICBcJ3NwZWNpYWxcJzoge1xuICAgICAgICAgIFwnc3BlY2lhbGlkXCc6IHJvdy5zcGVjaWFsaWQsXG4gICAgICAgICAgXCdzdGF0ZVwnOiBzdGF0ZVxuICAgICAgICB9XG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogXCfkv67mlLnnirbmgIHkuLrlgZznlKhcJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+S/ruaUueeKtuaAgeS4uuWQr+eUqFwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmdldFRvcGljTGlzdCgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog5Yig6Zmk5LiT6aKYICoqL1xuICAgIGhhbmRsZURlbGV0ZSAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIHRoaXMuJGNvbmZpcm0oXCfmmK/lkKbliKDpmaQiXCcgKyByb3cuc3BlY2lhbF9uYW1lICsgXCciP1wnLCBcJ+aPkOekulwnLCB7XG4gICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwn56Gu5a6aXCcsXG4gICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCflj5bmtohcJyxcbiAgICAgICAgICB0eXBlOiBcJ3dhcm5pbmdcJ1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICBBY3Rpb25zLmRlbGV0ZVNwZWNpYWwoe1xuICAgICAgICAgICAgXCdzcGVjaWFsXCc6IHtcbiAgICAgICAgICAgICAgXCdzcGVjaWFsaWRcJzogcm93LnNwZWNpYWxpZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+WIoOmZpOaIkOWKnyFcJ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nZXRUb3BpY0xpc3QoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+WQr+eUqOeKtuaAgeS4i+S4jeWPr+WIoOmZpCFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOaQnOe0ouS4k+mimCAqKi9cbiAgICBzZWFyY2hTcGVjaWFsICgpIHtcbiAgICAgIHRoaXMucGFnZU5vID0gMVxuICAgICAgdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnc3dhcFRpbWVcJ10odGhpcy50b3BpY0Zvcm0pXG4gICAgICB0aGlzLmdldFRvcGljTGlzdCgpXG4gICAgfSxcbiAgICBnZXRMaXN0VXNhYmxlQ2hhbm5lbCAoKSB7XG4gICAgICBBY3Rpb25zLmdldExpc3RVc2FibGVDaGFubmVsKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGxldCBuZXdJdGVtID0ge31cbiAgICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBpdGVtLmNoYW5uZWxfbmFtZVxuICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uY2hhbm5lbGlkXG4gICAgICAgICAgICB0aGlzLmxpc3RVc2FibGVDaGFubmVsLnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLnRvcGljIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmVsLWZvcm0taXRlbSB7XG4gICAgd2lkdGg6IDI1JTtcbiAgfVxuICAudG9waWMgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZGF0ZS1lZGl0b3Ige1xuICAgIHdpZHRoOiAyMDBweDtcbiAgfVxuICAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW0sIC5lbC1mb3JtLS1pbmxpbmUgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gICAgd2lkdGg6IDYzJTtcbiAgfVxuPC9zdHlsZT5cbjxzdHlsZT5cbiAgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtcmFuZ2UtZWRpdG9yIC5lbC1yYW5nZS1pbnB1dHtcbiAgICB3aWR0aDo1MCU7XG4gIH1cbiAgLnRvcGljIC5lbC1mb3JtLS1pbmxpbmUgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gICAgd2lkdGg6IDYwJTtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LGg4UEs6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6W10sbmFtZXM6W10sbWFwcGluZ3M6IiIsZmlsZToibXlVcGxvYWQudnVlIixzb3VyY2VSb290OiIifV0pfSxoZ2dvOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJ3K0lhIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjUwNTJlNzAzIixhLCExLHt9KX0saG1kRDpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLmxvZy1zdGF0aXN0aWNzIC5lbC1mb3JtLS1pbmxpbmUgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gIHdpZHRoOiA2MCU7XG59XG4ubG9nLXN0YXRpc3RpY3MgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtIHtcbiAgd2lkdGg6IDMxJTtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xufVxuLnBhZ2luYXRpb24gLmVsLXNlbGVjdHtcbiAgd2lkdGg6IGF1dG87XG4gIG1hcmdpbi1sZWZ0OiAwO1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VMb2cvc3JjL2NvbXBvbmVudHMvbWFuYWdlTG9nL2xvZ1N0YXRpc3RpY3MudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQTJRQTtFQUNBLFdBQUE7Q0FDQTtBQUNBO0VBQ0EsV0FBQTtFQUNBLG1CQUFBO0NBQ0E7QUFDQTtFQUNBLFlBQUE7RUFDQSxlQUFBO0NBQ0EiLGZpbGU6ImxvZ1N0YXRpc3RpY3MudnVlIixzb3VyY2VzQ29udGVudDpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImxvZy1zdGF0aXN0aWNzXCI+XG4gICAgPGRpdj5cbiAgICAgIDxjaXJjbGUtdGl0bGVcbiAgICAgICAgdGl0bGUtbmFtZT1cIuaXpeW/l+e7n+iuoeeuoeeQhlwiXG4gICAgICAgIGNsYXNzPVwiY2ljbGUtY29udHJvbGxlclwiXG4gICAgICAvPlxuICAgICAgPGRpdiBjbGFzcz1cInNlYXJjaC1mb3JtLWNvbnRhaW5lclwiPlxuICAgICAgICA8ZWwtZm9ybVxuICAgICAgICAgIDppbmxpbmU9XCJ0cnVlXCJcbiAgICAgICAgICA6bW9kZWw9XCJydWxlRm9ybVwiXG4gICAgICAgICAgY2xhc3M9XCJkZW1vLWZvcm0taW5saW5lXCI+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cIuaTjeS9nOS6uuWRmFwiPlxuICAgICAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgICAgIHYtbW9kZWw9XCJydWxlRm9ybS51c2VybmFtZVwiXG4gICAgICAgICAgICAgIGNsZWFyYWJsZS8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cIuaTjeS9nOS6i+S7tlwiPlxuICAgICAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgICAgIHYtbW9kZWw9XCJydWxlRm9ybS5vcGVyYXRpb25Db250ZW50XCJcbiAgICAgICAgICAgICAgY2xlYXJhYmxlLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD1cIuaTjeS9nOW8gOWni+aXpeacn1wiPlxuICAgICAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgICAgIDp0aXRsZT1cInJ1bGVGb3JtLnN0YXJ0RGF0ZSB8IEZvcm1hdERhdGUoJ3l5eXktTU0tZGQgaGg6bW0nKVwiXG4gICAgICAgICAgICAgIHYtbW9kZWw9XCJydWxlRm9ybS5zdGFydERhdGVcIlxuICAgICAgICAgICAgICB0eXBlPVwiZGF0ZXRpbWVcIlxuICAgICAgICAgICAgICBmb3JtYXQ9XCJ5eXl5LU1NLWRkIEhIOm1tXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCLpgInmi6nml6XmnJ9cIlxuICAgICAgICAgICAgICBAY2hhbmdlPVwiZ2V0TG9nTGlzdFwiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBzdHlsZT1cIm1hcmdpbi1sZWZ0OiAtMjhweDtcIlxuICAgICAgICAgICAgbGFiZWw9XCLmk43kvZznu5PmnZ/ml6XmnJ9cIj5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9XCJydWxlRm9ybS5lbmREYXRlIHwgRm9ybWF0RGF0ZSgneXl5eS1NTS1kZCBoaDptbScpXCJcbiAgICAgICAgICAgICAgdi1tb2RlbD1cInJ1bGVGb3JtLmVuZERhdGVcIlxuICAgICAgICAgICAgICB0eXBlPVwiZGF0ZXRpbWVcIlxuICAgICAgICAgICAgICBmb3JtYXQ9XCJ5eXl5LU1NLWRkIEhIOm1tXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCLpgInmi6nml6XmnJ9cIlxuICAgICAgICAgICAgICBAY2hhbmdlPVwiZ2V0TG9nTGlzdFwiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICBzdHlsZT1cIm1hcmdpbi1sZWZ0OiA5OHB4O1wiXG4gICAgICAgICAgICBAY2xpY2s9XCJnZXRMb2dMaXN0XCI+XG4gICAgICAgICAgICDmn6Xor6JcbiAgICAgICAgICAgIDxpIGNsYXNzPVwiZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHRcIi8+XG4gICAgICAgICAgPC9lbC1idXR0b24+XG4gICAgICAgIDwvZWwtZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ0YWJsZS1saXN0XCI+XG4gICAgICA8ZWwtdGFibGVcbiAgICAgICAgcmVmPVwiY2hhbm5lbFRhYmxlXCJcbiAgICAgICAgOmRhdGE9XCJ0YWJsZURhdGFcIlxuICAgICAgICBzdHJpcGVcbiAgICAgICAgY2xhc3M9XCJ3aG9sZS10YWJsZVwiXG4gICAgICAgIG1pbi1oZWlnaHQ9XCI0MDBcIj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIHYtZm9yPVwiKGl0ZW0sIGluZGV4KSBpbiB0YWJsZUhlYWRlclwiXG4gICAgICAgICAgOmtleT1cImluZGV4XCJcbiAgICAgICAgICA6cHJvcD1cIml0ZW0ucHJvcFwiXG4gICAgICAgICAgOmxhYmVsPVwiaXRlbS5sYWJlbFwiXG4gICAgICAgICAgOndpZHRoPVwiaXRlbS53aWR0aFwiXG4gICAgICAgICAgOmZvcm1hdHRlcj1cIml0ZW0uZm9ybWF0dGVyXCJcbiAgICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgICAgc2hvdy1vdmVyZmxvdy10b29sdGlwXG4gICAgICAgIC8+XG4gICAgICA8L2VsLXRhYmxlPlxuICAgICAgPGRpdiBjbGFzcz1cInBhZ2luYXRpb25cIj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgICB2LW1vZGVsPVwiYmF0Y2hQcm9jZXNzXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5riF6Zmk5pel5b+XXCJcbiAgICAgICAgICAgIEBjaGFuZ2U9XCJjbGVhckxvZ1wiPlxuICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICB2LWZvcj1cIml0ZW0gaW4gcHJvY2Vzc0xpc3RcIlxuICAgICAgICAgICAgICA6a2V5PVwiaXRlbS52YWx1ZVwiXG4gICAgICAgICAgICAgIDpsYWJlbD1cIml0ZW0ubGFiZWxcIlxuICAgICAgICAgICAgICA6dmFsdWU9XCJpdGVtLnZhbHVlXCJcbiAgICAgICAgICAgICAgOmRpc2FibGVkPVwiaXRlbS5kaXNhYmxlZFwiLz5cbiAgICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxlbC1wYWdpbmF0aW9uXG4gICAgICAgICAgOnRvdGFsPVwidG90YWxcIlxuICAgICAgICAgIDpwYWdlLXNpemVzPVwiWzEwLCAyMCwgMzAsIDQwXVwiXG4gICAgICAgICAgYmFja2dyb3VuZFxuICAgICAgICAgIGxheW91dD1cInRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHRcIlxuICAgICAgICAgIEBzaXplLWNoYW5nZT1cImhhbmRsZVNpemVDaGFuZ2VcIlxuICAgICAgICAgIEBjdXJyZW50LWNoYW5nZT1cImhhbmRsZUN1cnJlbnRDaGFuZ2VcIi8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCBDaXJjbGVUaXRsZSBmcm9tICdAL2NvbXBvbmVudHMvY29tbW9ucy9jaXJjbGVUaXRsZSdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSAnQC9hcGkvbG9nQXBpJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQ2lyY2xlVGl0bGVcbiAgfSxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJ1bGVGb3JtOiB7XG4gICAgICAgIHVzZXJuYW1lOiAnJyxcbiAgICAgICAgb3BlcmF0aW9uQ29udGVudDogJycsXG4gICAgICAgIHN0YXJ0RGF0ZTogJycsXG4gICAgICAgIGVuZERhdGU6ICcnXG4gICAgICB9LFxuICAgICAgdGFibGVIZWFkZXI6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6ICdsb2dpZCcsXG4gICAgICAgICAgbGFiZWw6ICfml6Xlv5fnvJblj7cnLFxuICAgICAgICAgIHdpZHRoOiAxODBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6ICd1c2VybmFtZScsXG4gICAgICAgICAgbGFiZWw6ICfmk43kvZzkurrlkZgnLFxuICAgICAgICAgIHdpZHRoOiAxMjBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6ICdjcmVhdGV0aW1lJyxcbiAgICAgICAgICBsYWJlbDogJ+aTjeS9nOaXpeacnycsXG4gICAgICAgICAgd2lkdGg6IDE0MCxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1snRm9ybWF0RGF0ZSddKGNlbGxWYWx1ZSwgJ3l5eXktTU0tZGQgaGg6bW0nKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6ICdpcEFkZHJlc3MnLFxuICAgICAgICAgIGxhYmVsOiAnSVDlnLDlnYAnLFxuICAgICAgICAgIHdpZHRoOiAxODBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6ICdvcGVyYXRpb25Db250ZW50JyxcbiAgICAgICAgICBsYWJlbDogJ+aTjeS9nOS6i+S7tidcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIHRhYmxlRGF0YTogW10sXG4gICAgICBwYWdlTm86IDEsXG4gICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICB0b3RhbDogMCxcbiAgICAgIGJhdGNoUHJvY2VzczogJycsXG4gICAgICBwcm9jZXNzTGlzdDogW1xuICAgICAgICB7XG4gICAgICAgICAgdmFsdWU6ICd3ZWVrJyxcbiAgICAgICAgICBsYWJlbDogJ+S4gOWRqOS5i+WJjSdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlOiAnbW9udGgnLFxuICAgICAgICAgIGxhYmVsOiAn5LiA5Liq5pyI5LmL5YmNJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdmFsdWU6ICdoYWxmWWVhcicsXG4gICAgICAgICAgbGFiZWw6ICfljYrlubTkuYvliY0nXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogJ3llYXInLFxuICAgICAgICAgIGxhYmVsOiAn5LiA5bm05LmL5YmNJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgICdydWxlRm9ybS51c2VybmFtZScgKHZhbCkge1xuICAgICAgdGhpcy5nZXRMb2dMaXN0KClcbiAgICB9LFxuICAgICdydWxlRm9ybS5vcGVyYXRpb25Db250ZW50JyAodmFsKSB7XG4gICAgICB0aGlzLmdldExvZ0xpc3QoKVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgLyoqIOiOt+WPluaXpeW/l+WIl+ihqCAqKi9cbiAgICB0aGlzLmdldExvZ0xpc3QoKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZ2V0TG9nTGlzdCAoKSB7XG4gICAgICB0aGlzLiRvcHRpb25zLmZpbHRlcnNbJ3N3YXBUaW1lJ10odGhpcy5ydWxlRm9ybSlcbiAgICAgIGxldCB0aW1lU3RhcnQgPSB0aGlzLnJ1bGVGb3JtLnN0YXJ0RGF0ZSAhPT0gbnVsbCA/IG5ldyBEYXRlKHRoaXMucnVsZUZvcm0uc3RhcnREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBsZXQgdGltZUVuZCA9IHRoaXMucnVsZUZvcm0uZW5kRGF0ZSAhPT0gbnVsbCA/IG5ldyBEYXRlKHRoaXMucnVsZUZvcm0uZW5kRGF0ZSkuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgbGV0IG9wdGlvbiA9IHtcbiAgICAgICAgJ3BhZ2VObyc6IHRoaXMucGFnZU5vLFxuICAgICAgICAncGFnZVNpemUnOiB0aGlzLnBhZ2VTaXplLFxuICAgICAgICAndXNlcm5hbWUnOiB0aGlzLnJ1bGVGb3JtLnVzZXJuYW1lLFxuICAgICAgICAnb3BlcmF0aW9uQ29udGVudCc6IHRoaXMucnVsZUZvcm0ub3BlcmF0aW9uQ29udGVudCxcbiAgICAgICAgJ3RpbWVTdGFydCc6IHRpbWVTdGFydCxcbiAgICAgICAgJ3RpbWVFbmQnOiB0aW1lRW5kXG4gICAgICB9XG4gICAgICBBY3Rpb25zLmdldExvZ0xpc3Qob3B0aW9uKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgbGlzdERhdGEgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICB0aGlzLnRhYmxlRGF0YSA9IGxpc3REYXRhLmxpc3RcbiAgICAgICAgICB0aGlzLnRvdGFsID0gbGlzdERhdGEudG90YWxcbiAgICAgICAgICB0aGlzLnBhZ2VObyA9IGxpc3REYXRhLnBhZ2VOdW1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGhhbmRsZVNpemVDaGFuZ2UgKHBhZ2VTaXplKSB7XG4gICAgICB0aGlzLnBhZ2VTaXplID0gcGFnZVNpemVcbiAgICAgIHRoaXMuZ2V0TG9nTGlzdCgpXG4gICAgfSxcbiAgICBoYW5kbGVDdXJyZW50Q2hhbmdlIChwYWdlSW5kZXgpIHtcbiAgICAgIHRoaXMucGFnZU5vID0gcGFnZUluZGV4XG4gICAgICB0aGlzLmdldExvZ0xpc3QoKVxuICAgIH0sXG4gICAgY2xlYXJMb2cgKHZhbCkge1xuICAgICAgdGhpcy4kY29uZmlybSgn5piv5ZCm5riF6Zmk5pel5b+XPycsICfmj5DnpLonLCB7XG4gICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn56Gu5a6aJyxcbiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ+WPlua2iCcsXG4gICAgICAgIHR5cGU6ICd3YXJuaW5nJ1xuICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgIHN3aXRjaCAodmFsKSB7XG4gICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZUxvZyh7XG4gICAgICAgICAgICAgICdkYXlzJzogNyxcbiAgICAgICAgICAgICAgJ21vbnRocyc6IG51bGwsXG4gICAgICAgICAgICAgICd5ZWFycyc6IG51bGxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlTG9nKHtcbiAgICAgICAgICAgICAgJ2RheXMnOiBudWxsLFxuICAgICAgICAgICAgICAnbW9udGhzJzogMSxcbiAgICAgICAgICAgICAgJ3llYXJzJzogbnVsbFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSAnaGFsZlllYXInOlxuICAgICAgICAgICAgdGhpcy5kZWxldGVMb2coe1xuICAgICAgICAgICAgICAnZGF5cyc6IG51bGwsXG4gICAgICAgICAgICAgICdtb250aHMnOiA2LFxuICAgICAgICAgICAgICAneWVhcnMnOiBudWxsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlTG9nKHtcbiAgICAgICAgICAgICAgJ2RheXMnOiBudWxsLFxuICAgICAgICAgICAgICAnbW9udGhzJzogbnVsbCxcbiAgICAgICAgICAgICAgJ3llYXJzJzogMVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgIH0pXG4gICAgfSxcbiAgICBkZWxldGVMb2cgKG9iaikge1xuICAgICAgQWN0aW9ucy5kZWxldGVMb2coXG4gICAgICAgIG9ialxuICAgICAgKS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLiRub3RpZnkoe1xuICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgdGl0bGU6ICfmj5DnpLonLFxuICAgICAgICAgICAgbWVzc2FnZTogJ+a4hemZpOaIkOWKnyEnXG4gICAgICAgICAgfSlcbiAgICAgICAgICB0aGlzLmdldExvZ0xpc3QoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLnBhZ2luYXRpb257XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICB9XG48L3N0eWxlPlxuPHN0eWxlPlxuICAubG9nLXN0YXRpc3RpY3MgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICB3aWR0aDogNjAlO1xuICB9XG4gIC5sb2ctc3RhdGlzdGljcyAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAzMSU7XG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICB9XG4gIC5wYWdpbmF0aW9uIC5lbC1zZWxlY3R7XG4gICAgd2lkdGg6IGF1dG87XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gIH1cbjwvc3R5bGU+XG4iXSxzb3VyY2VSb290OiIifV0pfSxpNDJXOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJhSVBtIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoImY4ZWE5ZGM0IixhLCExLHt9KX0saVpSUjpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgid1IwayIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCI3YmE2OTRlZiIsYSwhMSx7fSl9LGlicjg6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoIlZNVFYiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiYmZlZTcyMzYiLGEsITEse30pfSxpc0U2OmZ1bmN0aW9uKGUsbil7fSxpc2dOOmZ1bmN0aW9uKGUsbil7fSxpeTExOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJJL084Iik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoImUzYTJlYzM0IixhLCExLHt9KX0sakF6UTpmdW5jdGlvbihlLG4pe30sa2J4OTpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLmNpY2xlLWNvbnRyb2xsZXJbZGF0YS12LTFjMmRjZjA2XSB7XG4gIG1hcmdpbi10b3A6IDQlO1xufVxuLmNyZWF0ZSAuc29ydCBzcGFuW2RhdGEtdi0xYzJkY2YwNl17XG4gIGNvbG9yOiAjOTA5MDkwO1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VMaXZlL3NyYy9jb21wb25lbnRzL21hbmFnZUxpdmUvbGl2ZUNyZWF0ZS52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBb09BO0VBQ0EsZUFBQTtDQUNBO0FBQ0E7RUFDQSxlQUFBO0NBQ0EiLGZpbGU6ImxpdmVDcmVhdGUudnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0iY2hhbm5lbCBjcmVhdGUiPlxuICAgIDxjaXJjbGUtdGl0bGVcbiAgICAgIHRpdGxlLW5hbWU9IuebtOaSreaWsOWiniJcbiAgICAgIGNsYXNzPSJjaWNsZS1jb250cm9sbGVyIlxuICAgIC8+XG4gICAgPGVsLWZvcm1cbiAgICAgIHJlZj0iY3JlYXRlRm9ybSJcbiAgICAgIDptb2RlbD0iY3JlYXRlRm9ybSJcbiAgICAgIDpydWxlcz0icnVsZXMiXG4gICAgICBsYWJlbC13aWR0aD0iMTAwcHgiXG4gICAgICBjbGFzcz0icnVsZS1mb3JtIj5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuebtOaSreS4u+mimCJcbiAgICAgICAgcHJvcD0ibGl2ZV9uYW1lIj5cbiAgICAgICAgPGVsLWlucHV0IHYtbW9kZWwudHJpbT0iY3JlYXRlRm9ybS5saXZlX25hbWUiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5Zu+5qCH6YWN572uIlxuICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgcHJvcD0iaWNvbl91cmwiPlxuICAgICAgICA8ZWwtdXBsb2FkXG4gICAgICAgICAgOnNob3ctZmlsZS1saXN0PSJmYWxzZSJcbiAgICAgICAgICA6YWN0aW9uPSJnZXRVcGxvYWRVcmwiXG4gICAgICAgICAgOmhlYWRlcnM9InVwbG9hZEhlYWRlcnMiXG4gICAgICAgICAgOm9uLXN1Y2Nlc3M9ImhhbmRsZVBjQXZhdGFyU3VjY2VzcyJcbiAgICAgICAgICA6YmVmb3JlLXVwbG9hZD0iYmVmb3JlQXZhdGFyVXBsb2FkIlxuICAgICAgICAgIGNsYXNzPSJhdmF0YXItdXBsb2FkZXIiPlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIHYtaWY9ImNyZWF0ZUZvcm0uaWNvbl91cmwiXG4gICAgICAgICAgICA6c3JjPSJjcmVhdGVGb3JtLmljb25fdXJsIlxuICAgICAgICAgICAgY2xhc3M9ImF2YXRhciI+XG4gICAgICAgICAgPGlcbiAgICAgICAgICAgIHYtZWxzZVxuICAgICAgICAgICAgY2xhc3M9ImVsLWljb24tcGx1cyBhdmF0YXItdXBsb2FkZXItaWNvbiIvPlxuICAgICAgICA8L2VsLXVwbG9hZD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i55u05pKt5ZGo5pyfIlxuICAgICAgICBwcm9wPSJjaGFubmVsX25hbWUiPlxuICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICB2LW1vZGVsPSJjcmVhdGVGb3JtLmxpdmVSYW5nZSJcbiAgICAgICAgICA6Y2xlYXJhYmxlPSJmYWxzZSJcbiAgICAgICAgICB0eXBlPSJkYXRldGltZXJhbmdlIlxuICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICBzdHlsZT0id2lkdGg6MTAwJSJcbiAgICAgICAgICByYW5nZS1zZXBhcmF0b3I9IuiHsyJcbiAgICAgICAgICBzdGFydC1wbGFjZWhvbGRlcj0i5byA5aeL5pel5pyfIlxuICAgICAgICAgIGVuZC1wbGFjZWhvbGRlcj0i57uT5p2f5pel5pyfIlxuICAgICAgICAgIEBjaGFuZ2U9ImNob29zZVRpbWUiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5YaF5a656ZO+5o6lIlxuICAgICAgICBwcm9wPSJ1cmwiPlxuICAgICAgICA8ZWwtaW5wdXQgdi1tb2RlbD0iY3JlYXRlRm9ybS51cmwiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5piv5ZCm572u6aG2IlxuICAgICAgICBwcm9wPSJmaXhlZCI+XG4gICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICB2LW1vZGVsPSJjcmVhdGVGb3JtLmlzVG9wIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fpgInmi6kiPlxuICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgIDp2YWx1ZT0idHJ1ZSJcbiAgICAgICAgICAgIGxhYmVsPSLmmK8iLz5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICA6dmFsdWU9ImZhbHNlIlxuICAgICAgICAgICAgbGFiZWw9IuWQpiIvPlxuICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5p2D6ZmQ6YWN572uIj5cbiAgICAgICAgPGVsLWNoZWNrYm94XG4gICAgICAgICAgdi1tb2RlbD0iY3JlYXRlRm9ybS5pc0NvbW1lbnQiXG4gICAgICAgICAgbGFiZWw9IuivhOiuuiIvPlxuICAgICAgICA8ZWwtY2hlY2tib3hcbiAgICAgICAgICB2LW1vZGVsPSJjcmVhdGVGb3JtLmlzU2hhcmUiXG4gICAgICAgICAgbGFiZWw9IuWIhuS6qyJcbiAgICAgICAgICBuYW1lPSJhdXRoIi8+XG4gICAgICAgIDxlbC1jaGVja2JveFxuICAgICAgICAgIHYtbW9kZWw9ImNyZWF0ZUZvcm0uaXNDb2xsZWN0IlxuICAgICAgICAgIGxhYmVsPSLmlLbol48iXG4gICAgICAgICAgbmFtZT0iYXV0aCIvPlxuICAgICAgICA8ZWwtY2hlY2tib3hcbiAgICAgICAgICB2LW1vZGVsPSJjcmVhdGVGb3JtLmlzUHJhaXNlIlxuICAgICAgICAgIGxhYmVsPSLngrnotZ4iXG4gICAgICAgICAgbmFtZT0iYXV0aCIvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLmmK/lkKbkuIrnqL8iPlxuICAgICAgICA8ZWwtcmFkaW8tZ3JvdXBcbiAgICAgICAgICB2LW1vZGVsPSJjcmVhdGVGb3JtLnN0YXRlIj5cbiAgICAgICAgICA8ZWwtcmFkaW9cbiAgICAgICAgICAgIDpsYWJlbD0iMSI+XG4gICAgICAgICAgICDmmK9cbiAgICAgICAgICA8L2VsLXJhZGlvPlxuICAgICAgICAgIDxlbC1yYWRpb1xuICAgICAgICAgICAgOmxhYmVsPSIwIj5cbiAgICAgICAgICAgIOWQplxuICAgICAgICAgIDwvZWwtcmFkaW8+XG4gICAgICAgIDwvZWwtcmFkaW8tZ3JvdXA+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW0+XG4gICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgIEBjbGljaz0ic3VibWl0Rm9ybShcJ2NyZWF0ZUZvcm1cJykiPuaPkOS6pDwvZWwtYnV0dG9uPlxuICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9saXZlL2xpc3QiPlxuICAgICAgICAgIDxlbC1idXR0b24+5Y+W5raIPC9lbC1idXR0b24+XG4gICAgICAgIDwvcm91dGVyLWxpbms+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICA8L2VsLWZvcm0+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlXCdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL2xpdmVBcGlcJ1xuaW1wb3J0IHVwbG9hZEhlYWRlcnMgZnJvbSBcJ0AvbWl4aW5zXCdcbmltcG9ydCB7Y29udHJvbFRpbWV9IGZyb20gXCcuLi8uLi9oZWxwZXJzXCdcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQ2lyY2xlVGl0bGVcbiAgfSxcblxuICBtaXhpbnM6IFt1cGxvYWRIZWFkZXJzXSxcbiAgXG4gIGRhdGEgKCkge1xuICAgIHZhciBjaGVja1VybCA9IChydWxlLCB2YWx1ZSwgY2FsbGJhY2spID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgdmFyIG1hdGNoID0gIC9eKChodHxmKXRwcz8pOlxcL1xcLyhbXFx3XFwtXSsoXFwuW1xcd1xcLV0rKSpcXC8pKltcXHdcXC1dKyhcXC5bXFx3XFwtXSspKlxcLz8oXFw/KFtcXHdcXC1cXC4sQD9ePSUmOlxcL35cXCsjXSopKyk/L1xuICAgICAgaWYgKCFtYXRjaC50ZXN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKFwn6K+36L6T5YWl5q2j56Gu55qE5Zyw5Z2AXCcpKVxuICAgICAgfVxuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgY3JlYXRlRm9ybToge1xuICAgICAgICBsaXZlX25hbWU6IFwnXCcsXG4gICAgICAgIGljb25fdXJsOiBcJ1wnLFxuICAgICAgICB1cmw6IFwnXCcsXG4gICAgICAgIGlzVG9wOiBmYWxzZSxcbiAgICAgICAgbGl2ZVJhbmdlOiBbbmV3IERhdGUoKSwgbmV3IERhdGUoKV0sXG4gICAgICAgIGlzQ29tbWVudDogZmFsc2UsXG4gICAgICAgIGlzU2hhcmU6IGZhbHNlLFxuICAgICAgICBpc1ByYWlzZTogZmFsc2UsXG4gICAgICAgIGlzQ29sbGVjdDogZmFsc2UsXG4gICAgICAgIHN0YXRlOiAxXG4gICAgICB9LFxuICAgICAgcnVsZXM6IHtcbiAgICAgICAgbGl2ZV9uYW1lOiBbXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogXCfor7fovpPlhaXnm7Tmkq3kuLvpophcJywgdHJpZ2dlcjogXCdibHVyXCcgfVxuICAgICAgICBdLFxuICAgICAgICB1cmw6IFtcbiAgICAgICAgICB7IHZhbGlkYXRvcjogY2hlY2tVcmwsIHRyaWdnZXI6IFwnYmx1clwnIH1cbiAgICAgICAgXSxcbiAgICAgICAgaWNvbl91cmw6IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+S4iuS8oOWbvueJh1wnLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgZ2V0VXBsb2FkVXJsICgpIHtcbiAgICAgIHJldHVybiBBY3Rpb25zLnVwbG9hZFBpY3R1cmUoKVxuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHN1Ym1pdEZvcm0gKGZvcm1OYW1lKSB7XG4gICAgICB0aGlzLiRyZWZzW2Zvcm1OYW1lXS52YWxpZGF0ZSgodmFsaWQpID0+IHtcbiAgICAgICAgaWYgKHZhbGlkKSB7XG4gICAgICAgICAgQWN0aW9ucy5hZGRMaXZlKHtcbiAgICAgICAgICAgIFwnbGl2ZUJyb2FkY2FzdFwnOiB7XG4gICAgICAgICAgICAgIFwnbGl2ZV9uYW1lXCc6IHRoaXMuY3JlYXRlRm9ybS5saXZlX25hbWUsXG4gICAgICAgICAgICAgIFwnbGl2ZV9oZWFkX3VybFwnOiB0aGlzLmNyZWF0ZUZvcm0uaWNvbl91cmwsXG4gICAgICAgICAgICAgIFwnbGl2ZV91cmxcJzogdGhpcy5jcmVhdGVGb3JtLnVybCxcbiAgICAgICAgICAgICAgXCdleHBpcnlfZGF0ZV9zdGFydFwnOiB0aGlzLmNyZWF0ZUZvcm0ubGl2ZVJhbmdlWzBdLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgXCdleHBpcnlfZGF0ZV9lbmRcJzogdGhpcy5jcmVhdGVGb3JtLmxpdmVSYW5nZVsxXS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgIFwndG9wXCc6IHRoaXMuY3JlYXRlRm9ybS5pc1RvcCxcbiAgICAgICAgICAgICAgXCdhbGxvd19jb21tZW50XCc6IHRoaXMuY3JlYXRlRm9ybS5pc0NvbW1lbnQsXG4gICAgICAgICAgICAgIFwnYWxsb3dfc2hhcmVcJzogdGhpcy5jcmVhdGVGb3JtLmlzU2hhcmUsXG4gICAgICAgICAgICAgIFwnYWxsb3dfbGlrZVwnOiB0aGlzLmNyZWF0ZUZvcm0uaXNQcmFpc2UsXG4gICAgICAgICAgICAgIFwnYWxsb3dfY29sbGVjdFwnOiB0aGlzLmNyZWF0ZUZvcm0uaXNDb2xsZWN0LFxuICAgICAgICAgICAgICBcJ3N0YXRlXCc6IHRoaXMuY3JlYXRlRm9ybS5zdGF0ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7cGF0aDogXCcvbGl2ZS9saXN0XCd9KVxuICAgICAgICAgICAgICB0aGlzLiRub3RpZnkoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcJ+mAmuefpVwnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwn5re75Yqg5oiQ5YqfXCcsXG4gICAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCdcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwnZXJyb3Igc3VibWl0ISFcJylcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGhhbmRsZVBjQXZhdGFyU3VjY2VzcyAocmVzLCBmaWxlKSB7XG4gICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICBsZXQgaW1hZ2VVcmwgPSByZXMucmVzdWx0XG4gICAgICAgIHRoaXMuY3JlYXRlRm9ybS5pY29uX3VybCA9IGltYWdlVXJsXG4gICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVBdmF0YXJVcGxvYWQgKGZpbGUpIHtcbiAgICAgIGxldCBpbWFnZU9iaiA9IHtcbiAgICAgICAgXCdpbWFnZS9qcGVnXCc6IHRydWUsXG4gICAgICAgIFwnaW1hZ2UvcG5nXCc6IHRydWUsXG4gICAgICAgIFwnaW1hZ2UvanBnXCc6IHRydWVcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlzSW1hZ2UgPSBmaWxlLnR5cGUgaW4gaW1hZ2VPYmpcbiAgICAgIGNvbnN0IGlzTHQyTSA9IGZpbGUuc2l6ZSAvIDEwMjQgLyAxMDI0IDwgMlxuICAgICAgaWYgKCFpc0ltYWdlKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoXCfor7fkuIrkvKDlm77niYfmoLzlvI/nmoTmlofku7YhXCcpXG4gICAgICB9XG4gICAgICBpZiAoIWlzTHQyTSkge1xuICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKFwn5LiK5Lyg5Zu+54mH5aSn5bCP5LiN6IO96LaF6L+HIDJNQiFcJylcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0ltYWdlICYmIGlzTHQyTVxuICAgIH0sXG4gICAgY2hvb3NlVGltZSAoY2hhbmdlVGltZUFycikge1xuICAgICAgY29udHJvbFRpbWUodGhpcywgdGhpcy5jcmVhdGVGb3JtLmxpdmVSYW5nZSwgY2hhbmdlVGltZUFycilcbiAgICB9XG4gIH1cblxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLmNpY2xlLWNvbnRyb2xsZXIge1xuICAgIG1hcmdpbi10b3A6IDQlO1xuICB9XG4gIC5jcmVhdGUgLnNvcnQgc3BhbntcbiAgICBjb2xvcjogIzkwOTA5MDtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LGwyclU6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi5lbC1idXR0b24tLXByaW1hcnlbZGF0YS12LTIxOGE5MjFiXSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM3MTZCRkY7XG4gIGJvcmRlci1jb2xvcjogIzcxNkJGRjtcbn1cbi5lbC1idXR0b24tLWRlZmF1bHRbZGF0YS12LTIxOGE5MjFiXSB7XG4gIGNvbG9yOiAjNzE2QkZGIDtcbiAgYm9yZGVyLWNvbG9yOiAjNzE2QkZGO1xufVxuLmFkZFVzZXIgLmVsLWNoZWNrYm94W2RhdGEtdi0yMThhOTIxYl0ge1xuICBmbG9hdDogbGVmdDtcbn1cbi5hZGRVc2VyIC5jaGVjay1hbGxbZGF0YS12LTIxOGE5MjFiXSB7XG4gIG1hcmdpbi1yaWdodDogMzBweDtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlUm9sZS9zcmMvY29tcG9uZW50cy9tYW5hZ2VSb2xlL2RldGFpbFJvbGUudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQXdFQTtFQUNBLDBCQUFBO0VBQ0Esc0JBQUE7Q0FDQTtBQUNBO0VBQ0EsZ0JBQUE7RUFDQSxzQkFBQTtDQUNBO0FBQ0E7RUFDQSxZQUFBO0NBQ0E7QUFDQTtFQUNBLG1CQUFBO0NBQ0EiLGZpbGU6ImRldGFpbFJvbGUudnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0iYWRkVXNlciI+XG4gICAgPGVsLWZvcm1cbiAgICAgIHJlZj0icnVsZUZvcm0iXG4gICAgICA6bW9kZWw9InJ1bGVGb3JtIj5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuinkuiJsuWQjeensCJcbiAgICAgICAgcHJvcD0icm9sZV9uYW1lIj5cbiAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgdi1tb2RlbD0icnVsZUZvcm0ucm9sZV9uYW1lIlxuICAgICAgICAgIDpkaXNhYmxlZD0idHJ1ZSJcbiAgICAgICAgICBzdHlsZT0id2lkdGg6MjYwcHg7IlxuICAgICAgICAgIGNsZWFyYWJsZS8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICA8L2VsLWZvcm0+XG4gICAgPGRpdiBjbGFzcz0idGFibGUtbGlzdHMiPlxuICAgICAgPHAgc3R5bGU9Im1hcmdpbi1ib3R0b206IDEwcHg7Ij7mi6XmnInmnYPpmZDvvJo8L3A+XG4gICAgICA8ZGl2IGNsYXNzPSJzZWxmLXRyZWUtc3R5bGUiPlxuICAgICAgICA8ZWwtdHJlZVxuICAgICAgICAgIDpkYXRhPSJ0b0RhdGEiXG4gICAgICAgICAgOmRlZmF1bHQtZXhwYW5kLWFsbD0idHJ1ZSIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9zeXN0ZW1Vc2Vyc0FwaVwnXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6IFwnQWRkUm9sZVwnLFxuICBjb21wb25lbnRzOiB7XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcm9sZWlkOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBcJ1wnXG4gICAgfVxuICB9LFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcnVsZUZvcm06IHtcbiAgICAgICAgcm9sZV9uYW1lOiBcJ1wnXG4gICAgICB9LFxuICAgICAgdG9EYXRhOiBbXVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgLyoqIOiOt+WPlue8lui+keS/oeaBryAqKi9cbiAgICB0aGlzLmdldFJvbGVEZXRhaWxzKClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldFJvbGVEZXRhaWxzICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0Um9sZURldGFpbHMoe1xuICAgICAgICBcJ3JvbGVcJzoge1xuICAgICAgICAgIFwncm9sZWlkXCc6IHRoaXMucm9sZWlkXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy5ydWxlRm9ybS5yb2xlX25hbWUgPSBkYXRhLm5hbWVcbiAgICAgICAgICB0aGlzLnRvRGF0YSA9IGRhdGEudHJlZVBlcm1pc3Npb24gfHwgW11cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGNhbmNlbCAoKSB7XG4gICAgICB0aGlzLiRlbWl0KFwnY2xvc2VEaWFsb2dcJylcbiAgICB9XG4gIH1cblxufVxuPFwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuICAuZWwtYnV0dG9uLS1wcmltYXJ5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzE2QkZGO1xuICAgIGJvcmRlci1jb2xvcjogIzcxNkJGRjtcbiAgfVxuICAuZWwtYnV0dG9uLS1kZWZhdWx0IHtcbiAgICBjb2xvcjogIzcxNkJGRiA7XG4gICAgYm9yZGVyLWNvbG9yOiAjNzE2QkZGO1xuICB9XG4gIC5hZGRVc2VyIC5lbC1jaGVja2JveCB7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gIH1cbiAgLmFkZFVzZXIgLmNoZWNrLWFsbCB7XG4gICAgbWFyZ2luLXJpZ2h0OiAzMHB4O1xuICB9XG48L3N0eWxlPlxuPHN0eWxlPlxuICAuZWwtZGlhbG9nX19oZWFkZXJ7XG4gICAgcGFkZGluZzogMTNweCAzMHB4IDEzcHg7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNDMEJFRkY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0Y3RkFGRjtcbiAgfVxuICAuZWwtZGlhbG9nX190aXRsZSB7XG4gICAgbGluZS1oZWlnaHQ6IDE3cHg7XG4gICAgZm9udC1zaXplOiAxN3B4O1xuICAgIGNvbG9yOiAjMzAzMTMzO1xuICB9XG4gIC5lbC1kaWFsb2dfX2hlYWRlcmJ0biB7XG4gICAgdG9wOiAxM3B4O1xuICB9XG4gIC5lbC1kaWFsb2dfX2JvZHkge1xuICAgIHBhZGRpbmc6IDIwcHggNjBweCAwcHggNjBweDtcbiAgfVxuICAuYWRkVXNlciAuZWwtZm9ybSB7XG4gICAgbWFyZ2luLXRvcDogMTVweDtcbiAgfVxuICAuYWRkVXNlciAuZWwtZm9ybS1pdGVtIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuICAuYWRkVXNlciAuc3VibWl0IC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnR7XG4gICAgZmxvYXQ6IHJpZ2h0O1xuICAgIHdpZHRoOiAxNjBweDtcbiAgfVxuICAuc2VsZWN0LXJvbGUge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM2OTRFRkY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0VCRjVGRjtcbiAgICBjb2xvcjogIzY5NEVGRjtcbiAgICBwYWRkaW5nOjhweCAyMnB4IDhweCAyMnB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgfVxuICAuYWRkVXNlciAuZWwtc2VsZWN0IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuICAudGFibGUtbGlzdHMge1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gIH1cbiAgLnRhYmxlLWxpc3RzIHRoZWFkIHRyIHRoIHtcbiAgICBiYWNrZ3JvdW5kOiAjNzE2QkZGO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXItY29sb3I6IzcxNkJGRiA7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG4gIC5zZWxmLXRyZWUtc3R5bGUge1xuICAgIG1hcmdpbi1sZWZ0OiA2MHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiA1MHB4O1xuICB9XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sbEJiRzpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLmVsLWJ1dHRvbi0tcHJpbWFyeVtkYXRhLXYtNTJjMjE1ZDRdIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzcxNkJGRjtcbiAgYm9yZGVyLWNvbG9yOiAjNzE2QkZGO1xufVxuLmVsLWJ1dHRvbi0tZGVmYXVsdFtkYXRhLXYtNTJjMjE1ZDRdIHtcbiAgY29sb3I6ICM3MTZCRkYgO1xuICBib3JkZXItY29sb3I6ICM3MTZCRkY7XG59XG4uYWRkVXNlciAuZWwtY2hlY2tib3hbZGF0YS12LTUyYzIxNWQ0XSB7XG4gIGZsb2F0OiBsZWZ0O1xufVxuLmFkZFVzZXIgLmNoZWNrLWFsbFtkYXRhLXYtNTJjMjE1ZDRdIHtcbiAgbWFyZ2luLXJpZ2h0OiAzMHB4O1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VSb2xlL3NyYy9jb21wb25lbnRzL21hbmFnZVJvbGUvZWRpdFJvbGUudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQTZKQTtFQUNBLDBCQUFBO0VBQ0Esc0JBQUE7Q0FDQTtBQUNBO0VBQ0EsZ0JBQUE7RUFDQSxzQkFBQTtDQUNBO0FBQ0E7RUFDQSxZQUFBO0NBQ0E7QUFDQTtFQUNBLG1CQUFBO0NBQ0EiLGZpbGU6ImVkaXRSb2xlLnZ1ZSIsc291cmNlc0NvbnRlbnQ6WyI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJhZGRVc2VyXCI+XG4gICAgPGVsLWZvcm1cbiAgICAgIHJlZj1cInJ1bGVGb3JtXCJcbiAgICAgIDptb2RlbD1cInJ1bGVGb3JtXCJcbiAgICAgIDpydWxlcz1cInJ1bGVzXCI+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPVwi6KeS6Imy5ZCN56ewXCJcbiAgICAgICAgcHJvcD1cInJvbGVfbmFtZVwiPlxuICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICB2LW1vZGVsLnRyaW09XCJydWxlRm9ybS5yb2xlX25hbWVcIlxuICAgICAgICAgIHN0eWxlPVwid2lkdGg6MjYwcHg7XCJcbiAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgPC9lbC1mb3JtPlxuICAgIDxkaXYgY2xhc3M9XCJ0YWJsZS1saXN0c1wiPlxuICAgICAgPHAgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiAxMHB4O1wiPuadg+mZkOmFjee9ru+8mjwvcD5cbiAgICAgIDx0cmVlLXRyYW5zZmVyXG4gICAgICAgIDp0aXRsZT1cInRpdGxlXCJcbiAgICAgICAgOmZyb21fZGF0YT1cImZyb21EYXRhXCJcbiAgICAgICAgOnRvX2RhdGE9XCJ0b0RhdGFcIlxuICAgICAgICA6ZGVmYXVsdC1wcm9wcz1cIntsYWJlbDonbGFiZWwnfVwiXG4gICAgICAgIDptb2RlPVwibW9kZVwiXG4gICAgICAgIDpmaWx0ZXI9XCJmYWxzZVwiXG4gICAgICAgIG9wZW4tYWxsXG4gICAgICAgIGhlaWdodD1cIjQ0MHB4XCJcbiAgICAgICAgQGFkZEJ0biA9IFwiYWRkQXV0aFwiXG4gICAgICAgIEByZW1vdmVCdG4gPSBcInJlbW92ZUF1dGhcIi8+XG4gICAgPC9kaXY+XG4gICAgPGVsLWZvcm0taXRlbVxuICAgICAgY2xhc3M9XCJzdWJtaXRcIlxuICAgICAgc3R5bGU9XCJ3aWR0aDoxMDAlXCI+XG4gICAgICA8ZWwtYnV0dG9uXG4gICAgICAgIEBjbGljaz1cImNhbmNlbFwiPuWPlua2iDwvZWwtYnV0dG9uPlxuICAgICAgPGVsLWJ1dHRvblxuICAgICAgICB0eXBlPVwicHJpbWFyeVwiXG4gICAgICAgIEBjbGljaz1cIm9uU3VibWl0KCdydWxlRm9ybScpXCI+5o+Q5LqkPC9lbC1idXR0b24+XG4gICAgPC9lbC1mb3JtLWl0ZW0+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgdHJlZVRyYW5zZmVyIGZyb20gJ2VsLXRyZWUtdHJhbnNmZXInXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gJ0AvYXBpL3N5c3RlbVVzZXJzQXBpJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnQWRkUm9sZScsXG4gIGNvbXBvbmVudHM6IHtcbiAgICB0cmVlVHJhbnNmZXJcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICByb2xlaWQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfVxuICB9LFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcnVsZUZvcm06IHtcbiAgICAgICAgcm9sZV9uYW1lOiAnJ1xuICAgICAgfSxcbiAgICAgIG1vZGU6ICd0cmFuc2ZlcicsIC8vIHRyYW5zZmVyIGFkZHJlc3NMaXN0XG4gICAgICBmcm9tRGF0YTogW10sXG4gICAgICB0b0RhdGE6IFtdLFxuICAgICAgdGl0bGU6IFsn5YWo6YOo5p2D6ZmQJywgJ+W3sumAieaLqeadg+mZkCddLFxuICAgICAgcnVsZXM6IHtcbiAgICAgICAgcm9sZV9uYW1lOiBbXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogJ+ivt+i+k+WFpeinkuiJsuWQjeensCcsIHRyaWdnZXI6ICdibHVyJyB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBpZEFycjogW11cbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIC8qKiDojrflj5bmoJEgKiovXG4gICAgdGhpcy5nZXRUcmVlUGVybWlzc2lvbigpXG4gICAgLyoqIOiOt+WPlue8lui+keS/oeaBryAqKi9cbiAgICB0aGlzLmdldFJvbGVEZXRhaWxzKClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldFRyZWVQZXJtaXNzaW9uICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0VHJlZVBlcm1pc3Npb24oKS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLmZyb21EYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBnZXRSb2xlRGV0YWlscyAoKSB7XG4gICAgICBBY3Rpb25zLmdldFJvbGVEZXRhaWxzKHtcbiAgICAgICAgJ3JvbGUnOiB7XG4gICAgICAgICAgJ3JvbGVpZCc6IHRoaXMucm9sZWlkXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy5ydWxlRm9ybS5yb2xlX25hbWUgPSBkYXRhLm5hbWVcbiAgICAgICAgICB0aGlzLnRvRGF0YSA9IGRhdGEudHJlZVBlcm1pc3Npb24gfHwgW11cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGdldEFsbFNlbGVjdGVkSWQgKCkge1xuICAgICAgdGhpcy50b0RhdGEuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICB0aGlzLmlkQXJyLnB1c2goaXRlbS5pZClcbiAgICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuZ2V0Q2hpbGRyZW5JZChpdGVtLmNoaWxkcmVuKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgZ2V0Q2hpbGRyZW5JZCAoYXJyKSB7XG4gICAgICBhcnIuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICB0aGlzLmlkQXJyLnB1c2goaXRlbS5pZClcbiAgICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuZ2V0Q2hpbGRyZW5JZChpdGVtLmNoaWxkcmVuKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgb25TdWJtaXQgKGZvcm1OYW1lKSB7XG4gICAgICB0aGlzLiRyZWZzW2Zvcm1OYW1lXS52YWxpZGF0ZSgodmFsaWQpID0+IHtcbiAgICAgICAgaWYgKHZhbGlkKSB7XG4gICAgICAgICAgdGhpcy5pZEFyciA9IFtdXG4gICAgICAgICAgdGhpcy5nZXRBbGxTZWxlY3RlZElkKClcbiAgICAgICAgICBBY3Rpb25zLnVwZGF0ZVJvbGUoe1xuICAgICAgICAgICAgJ3JvbGUnOiB7XG4gICAgICAgICAgICAgICdyb2xlaWQnOiB0aGlzLnJvbGVpZCxcbiAgICAgICAgICAgICAgJ25hbWUnOiB0aGlzLnJ1bGVGb3JtLnJvbGVfbmFtZSxcbiAgICAgICAgICAgICAgJ3Blcm1pc3Npb25pZExpc3QnOiB0aGlzLmlkQXJyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKVxuICAgICAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgICAgICB0aGlzLiRub3RpZnkoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+aIkOWKnycsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ+e8lui+keinkuiJsuaIkOWKnydcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2xvc2VEaWFsb2cnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yIHN1Ym1pdCEhJylcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGNhbmNlbCAoKSB7XG4gICAgICB0aGlzLiRlbWl0KCdjbG9zZURpYWxvZycpXG4gICAgfSxcbiAgICBhZGRBdXRoIChmcm9tRGF0YSwgdG9EYXRhLCBvYmopIHtcbiAgICAgIHRoaXMudG9EYXRhID0gdG9EYXRhXG4gICAgfSxcbiAgICByZW1vdmVBdXRoIChmcm9tRGF0YSwgdG9EYXRhLCBvYmopIHtcbiAgICAgIHRoaXMudG9EYXRhID0gdG9EYXRhXG4gICAgfVxuICB9XG5cbn1cbjxcL3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbiAgLmVsLWJ1dHRvbi0tcHJpbWFyeSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzcxNkJGRjtcbiAgICBib3JkZXItY29sb3I6ICM3MTZCRkY7XG4gIH1cbiAgLmVsLWJ1dHRvbi0tZGVmYXVsdCB7XG4gICAgY29sb3I6ICM3MTZCRkYgO1xuICAgIGJvcmRlci1jb2xvcjogIzcxNkJGRjtcbiAgfVxuICAuYWRkVXNlciAuZWwtY2hlY2tib3gge1xuICAgIGZsb2F0OiBsZWZ0O1xuICB9XG4gIC5hZGRVc2VyIC5jaGVjay1hbGwge1xuICAgIG1hcmdpbi1yaWdodDogMzBweDtcbiAgfVxuPC9zdHlsZT5cbjxzdHlsZT5cbiAgLmVsLWRpYWxvZ19faGVhZGVye1xuICAgIHBhZGRpbmc6IDEzcHggMzBweCAxM3B4O1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjQzBCRUZGO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNGN0ZBRkY7XG4gIH1cbiAgLmVsLWRpYWxvZ19fdGl0bGUge1xuICAgIGxpbmUtaGVpZ2h0OiAxN3B4O1xuICAgIGZvbnQtc2l6ZTogMTdweDtcbiAgICBjb2xvcjogIzMwMzEzMztcbiAgfVxuICAuZWwtZGlhbG9nX19oZWFkZXJidG4ge1xuICAgIHRvcDogMTNweDtcbiAgfVxuICAuZWwtZGlhbG9nX19ib2R5IHtcbiAgICBwYWRkaW5nOiAyMHB4IDYwcHggMHB4IDYwcHg7XG4gIH1cbiAgLmFkZFVzZXIgLmVsLWZvcm0ge1xuICAgIG1hcmdpbi10b3A6IDE1cHg7XG4gIH1cbiAgLmFkZFVzZXIgLmVsLWZvcm0taXRlbSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbiAgLmFkZFVzZXIgLnN1Ym1pdCAuZWwtZm9ybS1pdGVtX19jb250ZW50e1xuICAgIGZsb2F0OiByaWdodDtcbiAgICB3aWR0aDogMTYwcHg7XG4gIH1cbiAgLnNlbGVjdC1yb2xlIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNjk0RUZGO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNFQkY1RkY7XG4gICAgY29sb3I6ICM2OTRFRkY7XG4gICAgcGFkZGluZzo4cHggMjJweCA4cHggMjJweDtcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIH1cbiAgLmFkZFVzZXIgLmVsLXNlbGVjdCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbiAgLnRhYmxlLWxpc3RzIHtcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIH1cbiAgLnRhYmxlLWxpc3RzIHRoZWFkIHRyIHRoIHtcbiAgICBiYWNrZ3JvdW5kOiAjNzE2QkZGO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXItY29sb3I6IzcxNkJGRiA7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG48L3N0eWxlPlxuIl0sc291cmNlUm9vdDoiIn1dKX0sbEV4UDpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLmV2ZW50LWVkaXQgLnNvcnQgc3BhbltkYXRhLXYtNzg3ZjMxOGFde1xuICBjb2xvcjogIzkwOTA5MDtcbn1cbi5ldmVudC1lZGl0IC5lbC1mb3JtLWl0ZW1bZGF0YS12LTc4N2YzMThhXSB7XG4gIG1hcmdpbi1sZWZ0OiAzNXB4O1xuICB3aWR0aDogNjUlO1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VFdmVudC9zcmMvY29tcG9uZW50cy9tYW5hZ2VFdmVudC9ldmVudEVkaXQudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQTZWQTtFQUNBLGVBQUE7Q0FDQTtBQUNBO0VBQ0Esa0JBQUE7RUFDQSxXQUFBO0NBQ0EiLGZpbGU6ImV2ZW50RWRpdC52dWUiLHNvdXJjZXNDb250ZW50OlsnPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSJldmVudC1lZGl0Ij5cbiAgICA8ZWwtZm9ybVxuICAgICAgcmVmPSJlZGl0RnJvbSJcbiAgICAgIDptb2RlbD0iZWRpdEZyb20iXG4gICAgICA6cnVsZXM9InJ1bGVzIlxuICAgICAgbGFiZWwtd2lkdGg9IjEwMHB4IlxuICAgICAgY2xhc3M9InJ1bGUtZm9ybSI+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLmtLvliqjlkI3np7AiXG4gICAgICAgIHByb3A9ImFjdGl2aXR5X25hbWUiPlxuICAgICAgICA8ZWwtaW5wdXQgdi1tb2RlbC50cmltPSJlZGl0RnJvbS5hY3Rpdml0eV9uYW1lIi8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuW9kuWxnuexu+WIqyJcbiAgICAgICAgcHJvcD0idHlwZV9uYW1lIj5cbiAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgIHYtbW9kZWw9ImVkaXRGcm9tLnR5cGVpZCJcbiAgICAgICAgICBmaWx0ZXJhYmxlXG4gICAgICAgICAgcGxhY2Vob2xkZXI9IiJcbiAgICAgICAgICBjbGVhcmFibGVcbiAgICAgICAgICBAY2hhbmdlPSJoYW5kbGVFdmVudFR5cGUoZWRpdEZyb20udHlwZWlkKSI+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gZXZlbnRUeXBlTGlzdCJcbiAgICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgICAgOnZhbHVlPSJpdGVtLnZhbHVlIlxuICAgICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIi8+XG4gICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLlm77moIfphY3nva4iXG4gICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICBwcm9wPSJoZWFkX2ltZyI+XG4gICAgICAgIDxlbC11cGxvYWRcbiAgICAgICAgICA6c2hvdy1maWxlLWxpc3Q9ImZhbHNlIlxuICAgICAgICAgIDphY3Rpb249ImdldFVwbG9hZFVybCJcbiAgICAgICAgICA6aGVhZGVycz0idXBsb2FkSGVhZGVycyJcbiAgICAgICAgICA6b24tc3VjY2Vzcz0iaGFuZGxlUGNBdmF0YXJTdWNjZXNzIlxuICAgICAgICAgIDpiZWZvcmUtdXBsb2FkPSJiZWZvcmVBdmF0YXJVcGxvYWQiXG4gICAgICAgICAgY2xhc3M9ImF2YXRhci11cGxvYWRlciI+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgdi1pZj0iZWRpdEZyb20uaGVhZF9pbWciXG4gICAgICAgICAgICA6c3JjPSJlZGl0RnJvbS5oZWFkX2ltZyJcbiAgICAgICAgICAgIGNsYXNzPSJhdmF0YXIiPlxuICAgICAgICAgIDxpXG4gICAgICAgICAgICB2LWVsc2VcbiAgICAgICAgICAgIGNsYXNzPSJlbC1pY29uLXBsdXMgYXZhdGFyLXVwbG9hZGVyLWljb24iLz5cbiAgICAgICAgPC9lbC11cGxvYWQ+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuWJjeerr+mTvuaOpSJcbiAgICAgICAgcHJvcD0iYXBwX3VybCI+XG4gICAgICAgIDxlbC1pbnB1dCB2LW1vZGVsLnRyaW09ImVkaXRGcm9tLmFwcF91cmwiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5ZCO56uv6ZO+5o6lIlxuICAgICAgICBwcm9wPSJtYW5hZ2VyX3VybCI+XG4gICAgICAgIDxlbC1pbnB1dCB2LW1vZGVsLnRyaW09ImVkaXRGcm9tLm1hbmFnZXJfdXJsIi8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IueKtuaAgemAieaLqSJcbiAgICAgICAgcHJvcD0ic3RhdGUiPlxuICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgdi1tb2RlbD0iZWRpdEZyb20uc3RhdGUiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+mAieaLqSI+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgOnZhbHVlPSIxIlxuICAgICAgICAgICAgbGFiZWw9IuWQr+eUqCIvPlxuICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgIDp2YWx1ZT0iMCJcbiAgICAgICAgICAgIGxhYmVsPSLlgZznlKgiLz5cbiAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuacieaViOacnyI+XG4gICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgIHYtbW9kZWw9ImVkaXRGcm9tLmxpdmVSYW5nZSJcbiAgICAgICAgICA6Y2xlYXJhYmxlPSJmYWxzZSJcbiAgICAgICAgICB0eXBlPSJkYXRldGltZXJhbmdlIlxuICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICBzdHlsZT0id2lkdGg6MTAwJSJcbiAgICAgICAgICByYW5nZS1zZXBhcmF0b3I9IuiHsyJcbiAgICAgICAgICBzdGFydC1wbGFjZWhvbGRlcj0i5byA5aeL5pel5pyfIlxuICAgICAgICAgIGVuZC1wbGFjZWhvbGRlcj0i57uT5p2f5pel5pyfIi8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IumcgOimgeeZu+W9lSJcbiAgICAgICAgY2xhc3M9InNvcnQiPlxuICAgICAgICA8ZWwtcmFkaW8tZ3JvdXBcbiAgICAgICAgICB2LW1vZGVsPSJlZGl0RnJvbS5uZWVkX2xvZ2luIj5cbiAgICAgICAgICA8ZWwtcmFkaW8gOmxhYmVsPSJ0cnVlIj7mmK88L2VsLXJhZGlvPlxuICAgICAgICAgIDxlbC1yYWRpbyA6bGFiZWw9ImZhbHNlIj7lkKY8L2VsLXJhZGlvPlxuICAgICAgICA8L2VsLXJhZGlvLWdyb3VwPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLmjpLluo8iXG4gICAgICAgIGNsYXNzPSJzb3J0IlxuICAgICAgICBwcm9wPSJzb3J0Ij5cbiAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgdi1tb2RlbC5udW1iZXI9ImVkaXRGcm9tLnNvcnQiXG4gICAgICAgICAgc3R5bGU9IndpZHRoOiA3MCUiLz5cbiAgICAgICAgPHNwYW4+5o+Q56S677ya5pWw5a2X6LaK5bCP6LaK5b6A5YmNPC9zcGFuPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtPlxuICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICBAY2xpY2s9InN1Ym1pdEZvcm0oXCdlZGl0RnJvbVwnKSI+5o+Q5LqkPC9lbC1idXR0b24+XG4gICAgICAgIDxlbC1idXR0b24gQGNsaWNrPSJjYW5jZWwiPuWPlua2iDwvZWwtYnV0dG9uPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgPC9lbC1mb3JtPlxuICAgIDxlbC1kaWFsb2dcbiAgICAgIDp2aXNpYmxlLnN5bmM9ImRpYWxvZ1Zpc2libGUiXG4gICAgICBhcHBlbmQtdG8tYm9keVxuICAgICAgdGl0bGU9IuiHquWumuS5ieacjeWKoSJcbiAgICAgIHdpZHRoPSI0MCUiXG4gICAgICBzdHlsZT0icGFkZGluZzogMjBweCA1MHB4IDIwcHggNTBweCJcbiAgICAgIEBjbG9zZT0iY2xvc2VEaWFsb2ciPlxuICAgICAgPGRpdlxuICAgICAgICA6aXM9ImNvbXBvbmVudE5hbWUiXG4gICAgICAgIEBzdWJtaXQtY3VzdG9tLWV2ZW50PSJzdWJtaXRDdXN0b21FdmVudCJcbiAgICAgICAgQGNhbmNlbC1jdXN0b20tZXZlbnQ9ImNhbmNlbEN1c3RvbUV2ZW50Ii8+XG4gICAgPC9lbC1kaWFsb2c+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9ldmVudEFwaVwnXG5pbXBvcnQgdXBsb2FkSGVhZGVycyBmcm9tIFwnQC9taXhpbnNcJ1xuaW1wb3J0IEN1c3RvbUV2ZW50IGZyb20gXCdAL2NvbXBvbmVudHMvbWFuYWdlRXZlbnQvY3VzdG9tRXZlbnRcJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQ3VzdG9tRXZlbnRcbiAgfSxcbiAgbWl4aW5zOiBbdXBsb2FkSGVhZGVyc10sXG4gIHByb3BzOiB7XG4gICAgc2V0dGluZ0FjdGl2aXR5SWQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IFwnMFwnXG4gICAgfVxuICB9LFxuICBkYXRhICgpIHtcbiAgICB2YXIgY2hlY2tVcmwgPSAocnVsZSwgdmFsdWUsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIHZhciBtYXRjaCA9ICAvXigoaHR8Zil0cHM/KTpcXC9cXC8oW1xcd1xcLV0rKFxcLltcXHdcXC1dKykqXFwvKSpbXFx3XFwtXSsoXFwuW1xcd1xcLV0rKSpcXC8/KFxcPyhbXFx3XFwtXFwuLEA/Xj0lJjpcXC9+XFwrI10qKSspPy9cbiAgICAgIGlmICghbWF0Y2gudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihcJ+ivt+i+k+WFpeato+ehrueahOWcsOWdgFwnKSlcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKClcbiAgICB9XG4gICAgbGV0IGNoZWNrQ2hhbm5lbE5hbWVMZW5ndGggPSAocnVsZSwgdmFsdWUsIGNhbGxiYWNrKSA9PiB7XG4gICAgICBpZiAodmFsdWUubGVuZ3RoID4gMTApIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihcJ+mikemBk+WQjeensOmVv+W6puS4jeiDvei2hei/hzEwXCcpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGVkaXRGcm9tOiB7XG4gICAgICAgIGFjdGl2aXR5X25hbWU6IFwnXCcsXG4gICAgICAgIHNvcnQ6IDAsXG4gICAgICAgIGhlYWRfaW1nOiBcJ1wnLFxuICAgICAgICBhcHBfdXJsOiBcJ1wnLFxuICAgICAgICBtYW5hZ2VyX3VybDogXCdcJyxcbiAgICAgICAgdHlwZV9uYW1lOiBcJ1wnLFxuICAgICAgICBzdGF0ZTogXCdcJyxcbiAgICAgICAgZGVzY3JpcHRpb246IFwnXCcsXG4gICAgICAgIGZpeGVkOiBcJ1wnLFxuICAgICAgICB0eXBlaWQ6IFwnXCcsXG4gICAgICAgIGxpdmVSYW5nZTogW10sXG4gICAgICAgIG5lZWRfbG9naW46IHRydWVcbiAgICAgIH0sXG4gICAgICBydWxlczoge1xuICAgICAgICBhY3Rpdml0eV9uYW1lOiBbXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogXCfor7fovpPlhaXpopHpgZPlkI3np7BcJywgdHJpZ2dlcjogXCdibHVyXCcgfSxcbiAgICAgICAgICB7IHZhbGlkYXRvcjogY2hlY2tDaGFubmVsTmFtZUxlbmd0aCwgdHJpZ2dlcjogXCdjaGFuZ2VcJyB9XG4gICAgICAgIF0sXG4gICAgICAgIHNvcnQ6IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+i+k+WFpeaOkuW6j1wnLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9LFxuICAgICAgICAgIHsgdHlwZTogXCdudW1iZXJcJywgbWVzc2FnZTogXCfmjpLluo/lv4XpobvkuLrmlbDlrZdcJyB9XG4gICAgICAgIF0sXG4gICAgICAgIGhlYWRfaW1nOiBbXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogXCfor7fkuIrkvKDlm77niYdcJywgdHJpZ2dlcjogXCdibHVyXCcgfVxuICAgICAgICBdLFxuICAgICAgICBhcHBfdXJsOiBbXG4gICAgICAgICAgeyB2YWxpZGF0b3I6IGNoZWNrVXJsLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBldmVudFR5cGVMaXN0OiBbXSxcbiAgICAgIGlzUmVmcmVzaDogdHJ1ZSxcbiAgICAgIGN1c3RvbVR5cGVJZDogXCcwOTk5XCcsXG4gICAgICBkaWFsb2dWaXNpYmxlOiBmYWxzZSxcbiAgICAgIGNvbXBvbmVudE5hbWU6IFwnXCdcbiAgICB9XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgZ2V0VXBsb2FkVXJsICgpIHtcbiAgICAgIHJldHVybiBBY3Rpb25zLnVwbG9hZFBpY3R1cmUoKVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgdGhpcy5nZXRFZGl0SW5mbygpXG4gICAgdGhpcy5nZXRBY3Rpdml0eVR5cGUoKVxuICB9LFxuICBiZWZvcmVSb3V0ZUxlYXZlICh0bywgZnJvbSwgbmV4dCkge1xuICAgIGlmICh0by5wYXRoID09PSBcJy9zdWJDaGFubmVsL2xpc3RcJykge1xuICAgICAgdG8ubWV0YS5yZWZyZXNoID0gdGhpcy5pc1JlZnJlc2hcbiAgICB9IGVsc2UgaWYgKHRvLnBhdGggPT09IFwnL3N1YkNoYW5uZWwvY3JlYXRlXCcpIHtcbiAgICAgIHRoaXMuJHJvb3QuZXZlbnRIdWIuJGVtaXQoXCdyZXNldC1vcHRpb25zXCcpXG4gICAgfVxuICAgIG5leHQoKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgY2FuY2VsICgpIHtcbiAgICAgIHRoaXMuJGVtaXQoXCdjbG9zZURpYWxvZ1wnKVxuICAgIH0sXG4gICAgZ2V0RWRpdEluZm8gKCkge1xuICAgICAgQWN0aW9ucy5nZXRBY3Rpdml0eUJ5SUQoe1xuICAgICAgICBcJ2FjdGl2aXR5XCc6IHtcbiAgICAgICAgICBcJ2FjdGl2aXR5aWRcJzogdGhpcy5zZXR0aW5nQWN0aXZpdHlJZFxuICAgICAgICB9XG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy5lZGl0RnJvbS5saXZlUmFuZ2UgPSBbXVxuICAgICAgICAgIHRoaXMuZWRpdEZyb20uYWN0aXZpdHlfbmFtZSA9IGRhdGEuYWN0aXZpdHlfbmFtZVxuICAgICAgICAgIHRoaXMuZWRpdEZyb20uc29ydCA9IGRhdGEuc29ydFxuICAgICAgICAgIHRoaXMuZWRpdEZyb20uaGVhZF9pbWcgPSBkYXRhLmhlYWRfaW1nXG4gICAgICAgICAgdGhpcy5lZGl0RnJvbS5hcHBfdXJsID0gZGF0YS5hcHBfdXJsXG4gICAgICAgICAgdGhpcy5lZGl0RnJvbS5tYW5hZ2VyX3VybCA9IGRhdGEubWFuYWdlcl91cmxcbiAgICAgICAgICB0aGlzLmVkaXRGcm9tLnR5cGVfbmFtZSA9IGRhdGEudHlwZV9uYW1lXG4gICAgICAgICAgdGhpcy5lZGl0RnJvbS5zdGF0ZSA9IGRhdGEuc3RhdGVcbiAgICAgICAgICB0aGlzLmVkaXRGcm9tLnR5cGVpZCA9IGRhdGEudHlwZWlkXG4gICAgICAgICAgdGhpcy5lZGl0RnJvbS5uZWVkX2xvZ2luID0gZGF0YS5uZWVkX2xvZ2luXG4gICAgICAgICAgdGhpcy5lZGl0RnJvbS5saXZlUmFuZ2UucHVzaChuZXcgRGF0ZShkYXRhLmV4cGlyeV9kYXRlX3N0YXJ0KSlcbiAgICAgICAgICB0aGlzLmVkaXRGcm9tLmxpdmVSYW5nZS5wdXNoKG5ldyBEYXRlKGRhdGEuZXhwaXJ5X2RhdGVfZW5kKSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIHN1Ym1pdEZvcm0gKGZvcm1OYW1lKSB7XG4gICAgICB0aGlzLiRyZWZzW2Zvcm1OYW1lXS52YWxpZGF0ZSgodmFsaWQpID0+IHtcbiAgICAgICAgaWYgKHZhbGlkKSB7XG4gICAgICAgICAgdGhpcy5ldmVudFR5cGVMaXN0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtLnZhbHVlID09PSB0aGlzLmVkaXRGcm9tLnR5cGVpZCkge1xuICAgICAgICAgICAgICB0aGlzLmVkaXRGcm9tLnR5cGVfbmFtZSA9IGl0ZW0ubGFiZWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIEFjdGlvbnMuZWRpdEFjdGl2aXR5KHtcbiAgICAgICAgICAgIFwnYWN0aXZpdHlcJzoge1xuICAgICAgICAgICAgICBcJ2FjdGl2aXR5aWRcJzogdGhpcy5zZXR0aW5nQWN0aXZpdHlJZCxcbiAgICAgICAgICAgICAgXCdhY3Rpdml0eV9uYW1lXCc6IHRoaXMuZWRpdEZyb20uYWN0aXZpdHlfbmFtZSxcbiAgICAgICAgICAgICAgXCdoZWFkX2ltZ1wnOiB0aGlzLmVkaXRGcm9tLmhlYWRfaW1nLFxuICAgICAgICAgICAgICBcJ2FwcF91cmxcJzogdGhpcy5lZGl0RnJvbS5hcHBfdXJsLFxuICAgICAgICAgICAgICBcJ21hbmFnZXJfdXJsXCc6IHRoaXMuZWRpdEZyb20ubWFuYWdlcl91cmwsXG4gICAgICAgICAgICAgIFwndHlwZWlkXCc6IHRoaXMuZWRpdEZyb20udHlwZWlkLFxuICAgICAgICAgICAgICBcJ3R5cGVfbmFtZVwnOiB0aGlzLmVkaXRGcm9tLnR5cGVfbmFtZSxcbiAgICAgICAgICAgICAgXCdzdGF0ZVwnOiB0aGlzLmVkaXRGcm9tLnN0YXRlLFxuICAgICAgICAgICAgICBcJ2V4cGlyeV9kYXRlX3N0YXJ0XCc6IHRoaXMuZWRpdEZyb20ubGl2ZVJhbmdlWzBdLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgXCdleHBpcnlfZGF0ZV9lbmRcJzogdGhpcy5lZGl0RnJvbS5saXZlUmFuZ2VbMV0uZ2V0VGltZSgpLFxuICAgICAgICAgICAgICBcJ3NvcnRcJzogdGhpcy5lZGl0RnJvbS5zb3J0LFxuICAgICAgICAgICAgICBcJ25lZWRfbG9naW5cJzogdGhpcy5lZGl0RnJvbS5uZWVkX2xvZ2luXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgIHRoaXMuJGVtaXQoXCdjbG9zZURpYWxvZ1wnKVxuICAgICAgICAgICAgICB0aGlzLiRub3RpZnkoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcJ+mAmuefpVwnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwn57yW6L6R5oiQ5YqfXCcsXG4gICAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCdcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwnZXJyb3Igc3VibWl0ISFcJylcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGhhbmRsZVBjQXZhdGFyU3VjY2VzcyAocmVzLCBmaWxlKSB7XG4gICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICBsZXQgaW1hZ2VVcmwgPSByZXMucmVzdWx0XG4gICAgICAgIHRoaXMuZWRpdEZyb20uaGVhZF9pbWcgPSBpbWFnZVVybFxuICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlQXZhdGFyVXBsb2FkIChmaWxlKSB7XG4gICAgICBsZXQgaW1hZ2VPYmogPSB7XG4gICAgICAgIFwnaW1hZ2UvanBlZ1wnOiB0cnVlLFxuICAgICAgICBcJ2ltYWdlL3BuZ1wnOiB0cnVlLFxuICAgICAgICBcJ2ltYWdlL2pwZ1wnOiB0cnVlXG4gICAgICB9XG4gICAgICBjb25zdCBpc0ltYWdlID0gZmlsZS50eXBlIGluIGltYWdlT2JqXG4gICAgICBjb25zdCBpc0x0Mk0gPSBmaWxlLnNpemUgLyAxMDI0IC8gMTAyNCA8IDJcbiAgICAgIGlmICghaXNJbWFnZSkge1xuICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKFwn6K+35LiK5Lyg5Zu+54mH5qC85byP55qE5paH5Lu2IVwnKVxuICAgICAgfVxuICAgICAgaWYgKCFpc0x0Mk0pIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihcJ+S4iuS8oOWbvueJh+Wkp+Wwj+S4jeiDvei2hei/hyAyTUIhXCcpXG4gICAgICB9XG4gICAgICByZXR1cm4gaXNJbWFnZSAmJiBpc0x0Mk1cbiAgICB9LFxuICAgIC8qKiDojrflj5bmtLvliqjnsbvliKsgKiovXG4gICAgZ2V0QWN0aXZpdHlUeXBlICgpIHtcbiAgICAgIHRoaXMuZXZlbnRUeXBlTGlzdCA9IFtdXG4gICAgICBBY3Rpb25zLmdldEFjdGl2aXR5VHlwZSgpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhXG4gICAgICAgIGlmIChkYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCByZXN1bHQgPSBkYXRhLnJlc3VsdFxuICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXRlbS50eXBlX25hbWUgPT09IHRoaXMuZWRpdEZyb20udHlwZWlkKSB7XG4gICAgICAgICAgICAgIC8qKiDpu5jorqTpgInmi6nkuIDkuKrnsbvlnosgKiovXG4gICAgICAgICAgICAgIHRoaXMuZWRpdEZyb20udHlwZWlkID0gaXRlbS50eXBlaWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBuZXdJdGVtID0ge31cbiAgICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBpdGVtLnR5cGVfbmFtZVxuICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0udHlwZWlkXG4gICAgICAgICAgICB0aGlzLmV2ZW50VHlwZUxpc3QucHVzaChuZXdJdGVtKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgbGV0IG5ld0l0ZW0gPSB7fVxuICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBcJ+iHquWumuS5iVwnXG4gICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IHRoaXMuY3VzdG9tVHlwZUlkXG4gICAgICAgICAgdGhpcy5ldmVudFR5cGVMaXN0LnB1c2gobmV3SXRlbSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGhhbmRsZUV2ZW50VHlwZSAodHlwZWlkKSB7XG4gICAgICBpZiAodHlwZWlkID09PSB0aGlzLmN1c3RvbVR5cGVJZCkge1xuICAgICAgICB0aGlzLmhhbmRsZUN1c3RvbUNsaWNrKClcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDngrnlh7voh6rlrprkuYnnmoTlpITnkIbpgLvovpEgKiovXG4gICAgaGFuZGxlQ3VzdG9tQ2xpY2sgKCkge1xuICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gdHJ1ZVxuICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gXCdDdXN0b21FdmVudFwnXG4gICAgfSxcbiAgICBjbG9zZURpYWxvZyAoKSB7XG4gICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSBmYWxzZVxuICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gXCdcJ1xuICAgIH0sXG4gICAgc3VibWl0Q3VzdG9tRXZlbnQgKGN1c3RvbUV2ZW50TmFtZSkge1xuICAgICAgdGhpcy5jbG9zZURpYWxvZygpXG4gICAgICB0aGlzLmdldEFjdGl2aXR5VHlwZSgpXG4gICAgICB0aGlzLmVkaXRGcm9tLnR5cGVpZCA9IGN1c3RvbUV2ZW50TmFtZVxuICAgIH0sXG4gICAgY2FuY2VsQ3VzdG9tRXZlbnQgKCkge1xuICAgICAgdGhpcy5jbG9zZURpYWxvZygpXG4gICAgICAvLyB0aGlzLmNyZWF0ZUZyb20udHlwZWlkID0gXCdcJ1xuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLmV2ZW50LWVkaXQgLnNvcnQgc3BhbntcbiAgICBjb2xvcjogIzkwOTA5MDtcbiAgfVxuICAuZXZlbnQtZWRpdCAuZWwtZm9ybS1pdGVtIHtcbiAgICBtYXJnaW4tbGVmdDogMzVweDtcbiAgICB3aWR0aDogNjUlO1xuICB9XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sbG5yTTpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLnVzZXItbGlzdCAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICB3aWR0aDogNjUlO1xufVxuLnVzZXItbGlzdCAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICB3aWR0aDogMjclO1xuICBtYXJnaW4tbGVmdDogLTE1cHg7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZVVzZXIvc3JjL2NvbXBvbmVudHMvbWFuYWdlVXNlci91c2VyTGlzdC52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBMlNBO0VBQ0EsV0FBQTtDQUNBO0FBQ0E7RUFDQSxXQUFBO0VBQ0EsbUJBQUE7Q0FDQSIsZmlsZToidXNlckxpc3QudnVlIixzb3VyY2VzQ29udGVudDpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInVzZXItbGlzdFwiPlxuICAgIDxkaXY+XG4gICAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICAgIHRpdGxlLW5hbWU9XCLnlKjmiLfliJfooahcIlxuICAgICAgICBjbGFzcz1cImNpY2xlLWNvbnRyb2xsZXJcIlxuICAgICAgLz5cbiAgICAgIDxkaXYgY2xhc3M9XCJzZWFyY2gtZm9ybS1jb250YWluZXJcIj5cbiAgICAgICAgPGVsLWZvcm1cbiAgICAgICAgICA6aW5saW5lPVwidHJ1ZVwiXG4gICAgICAgICAgOm1vZGVsPVwicnVsZUZvcm1cIlxuICAgICAgICAgIGNsYXNzPVwiZGVtby1mb3JtLWlubGluZVwiPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCLnlKjmiLflkI1cIj5cbiAgICAgICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgICAgICB2LW1vZGVsPVwicnVsZUZvcm0udXNlcm5hbWVcIlxuICAgICAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCLms6jlhozmiYvmnLrlj7dcIj5cbiAgICAgICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgICAgICB2LW1vZGVsPVwicnVsZUZvcm0ucGhvbmVcIlxuICAgICAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPVwi54q25oCBXCJcbiAgICAgICAgICAgIGNsYXNzPVwic2VhcmNoLWxlZnRcIj5cbiAgICAgICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICAgICAgdi1tb2RlbD1cInJ1bGVGb3JtLnN0YXRlXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJcIlxuICAgICAgICAgICAgICBAY2hhbmdlPVwiZ2V0QXBwVXNlckxpc3RcIj5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIHZhbHVlPVwiXCJcbiAgICAgICAgICAgICAgICBsYWJlbD1cIuWFqOmDqFwiLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT1cIjFcIlxuICAgICAgICAgICAgICAgIGxhYmVsPVwi5ZCv55SoXCIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPVwiMFwiXG4gICAgICAgICAgICAgICAgbGFiZWw9XCLlgZznlKhcIi8+XG4gICAgICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICBzdHlsZT1cIm1hcmdpbi1sZWZ0OiAtMzBweFwiXG4gICAgICAgICAgICBAY2xpY2s9XCJnZXRBcHBVc2VyTGlzdFwiPlxuICAgICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgICA8aSBjbGFzcz1cImVsLWljb24tc2VhcmNoIGVsLWljb24tLXJpZ2h0XCIvPlxuICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICA8L2VsLWZvcm0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwidGFibGUtbGlzdFwiPlxuICAgICAgPGVsLXRhYmxlXG4gICAgICAgIHJlZj1cImNoYW5uZWxUYWJsZVwiXG4gICAgICAgIDpkYXRhPVwidGFibGVEYXRhXCJcbiAgICAgICAgc3RyaXBlXG4gICAgICAgIGNsYXNzPVwid2hvbGUtdGFibGVcIlxuICAgICAgICBtaW4taGVpZ2h0PVwiNDAwXCI+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICB2LWZvcj1cIihpdGVtLCBpbmRleCkgaW4gdGFibGVIZWFkZXJcIlxuICAgICAgICAgIDprZXk9XCJpbmRleFwiXG4gICAgICAgICAgOnByb3A9XCJpdGVtLnByb3BcIlxuICAgICAgICAgIDpsYWJlbD1cIml0ZW0ubGFiZWxcIlxuICAgICAgICAgIDp3aWR0aD1cIml0ZW0ud2lkdGhcIlxuICAgICAgICAgIDpmb3JtYXR0ZXI9XCJpdGVtLmZvcm1hdHRlclwiXG4gICAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICAgIGZpeGVkXG4gICAgICAgICAgc2hvdy1vdmVyZmxvdy10b29sdGlwXG4gICAgICAgIC8+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBmaXhlZD1cInJpZ2h0XCJcbiAgICAgICAgICBsYWJlbD1cIuaTjeS9nFwiXG4gICAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICAgIHdpZHRoPVwiMjUwXCI+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9XCJzY29wZVwiPlxuICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgOmNsYXNzPVwiWyd1c2VyJywgc2NvcGUucm93LnN0YXRlICE9PSAxID8gJ2Rpc2FibGUnOiAnJ11cIlxuICAgICAgICAgICAgICAgIEBjbGljaz1cInRvZ2dsZUNvdW50KHNjb3BlLnJvdylcIj5cbiAgICAgICAgICAgICAgICB7eyBzY29wZS5yb3cuc3RhdGUgIT09IDEgPyAn5ZCv55So6LSm5Y+3JzogJ+WBnOeUqOi0puWPtycgfX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzPVwidXNlciByZXNldC1wYXNzd29yZFwiXG4gICAgICAgICAgICAgICAgQGNsaWNrPVwicmVzZXRQYXNzd29yZChzY29wZS5yb3cpXCI+XG4gICAgICAgICAgICAgICAg6YeN572u5a+G56CBXG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgIDwvZWwtdGFibGU+XG4gICAgICA8ZGl2IGNsYXNzPVwicGFnaW5hdGlvblwiPlxuICAgICAgICA8ZWwtcGFnaW5hdGlvblxuICAgICAgICAgIDp0b3RhbD1cInRvdGFsXCJcbiAgICAgICAgICA6cGFnZS1zaXplcz1cIlsxMCwgMjAsIDMwLCA0MF1cIlxuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICBsYXlvdXQ9XCJ0b3RhbCwgc2l6ZXMsIHByZXYsIHBhZ2VyLCBuZXh0XCJcbiAgICAgICAgICBAc2l6ZS1jaGFuZ2U9XCJoYW5kbGVTaXplQ2hhbmdlXCJcbiAgICAgICAgICBAY3VycmVudC1jaGFuZ2U9XCJoYW5kbGVDdXJyZW50Q2hhbmdlXCIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSAnQC9jb21wb25lbnRzL2NvbW1vbnMvY2lyY2xlVGl0bGUnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gJ0AvYXBpL3N5c3RlbVVzZXJzQXBpJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQ2lyY2xlVGl0bGVcbiAgfSxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJ1bGVGb3JtOiB7XG4gICAgICAgIHVzZXJuYW1lOiAnJyxcbiAgICAgICAgcGhvbmU6ICcnLFxuICAgICAgICBzdGF0ZTogJydcbiAgICAgIH0sXG4gICAgICB0YWJsZUhlYWRlcjogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogJ25pY2tuYW1lJyxcbiAgICAgICAgICBsYWJlbDogJ+aYteensCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6ICdoZWFkX3VybCcsXG4gICAgICAgICAgbGFiZWw6ICflpLTlg48nLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gPGEgaHJlZj17Y2VsbFZhbHVlfSB0YXJnZXQ9XCJfYmxhbmtcIj48aW1nIHNyYz17Y2VsbFZhbHVlfSBjbGFzcz1cInVzZXItaGVhZC1pY29uXCIvPjwvYT5cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiAncGhvbmUnLFxuICAgICAgICAgIGxhYmVsOiAn55S16K+dJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogJ3NleCcsXG4gICAgICAgICAgbGFiZWw6ICfmgKfliKsnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoY2VsbFZhbHVlID09PSAxKSB7XG4gICAgICAgICAgICAgIHJldHVybiAn55S3J1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuICflpbMnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogJ2FnZScsXG4gICAgICAgICAgbGFiZWw6ICflubTpvoQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiAnY3JlYXRldGltZScsXG4gICAgICAgICAgbGFiZWw6ICfms6jlhozml6XmnJ8nLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kb3B0aW9ucy5maWx0ZXJzWydGb3JtYXREYXRlJ10oY2VsbFZhbHVlLCAneXl5eS1NTS1kZCBoaDptbScpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogJ3N0YXRlJyxcbiAgICAgICAgICBsYWJlbDogJ+eKtuaAgScsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChwYXJzZUludChjZWxsVmFsdWUpID09PSAxKSB7XG4gICAgICAgICAgICAgIHJldHVybiAn5ZCv55SoJ1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuICflgZznlKgnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgdGFibGVEYXRhOiBbXSxcbiAgICAgIHBhZ2VObzogMSxcbiAgICAgIHBhZ2VTaXplOiAxMCxcbiAgICAgIHRvdGFsOiAwXG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgICdydWxlRm9ybS51c2VybmFtZScgKHZhbCkge1xuICAgICAgdGhpcy5nZXRBcHBVc2VyTGlzdCgpXG4gICAgfSxcbiAgICAncnVsZUZvcm0ucGhvbmUnICh2YWwpIHtcbiAgICAgIHRoaXMuZ2V0QXBwVXNlckxpc3QoKVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgLyoqIOiOt+WPlueUqOaIt+WIl+ihqCAqKi9cbiAgICB0aGlzLmdldEFwcFVzZXJMaXN0KClcbiAgICAvKiog6I635Y+W6aKR6YGT57G75Z6LICoqL1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZ2V0QXBwVXNlckxpc3QgKCkge1xuICAgICAgQWN0aW9ucy5nZXRBcHBVc2VyTGlzdCh7XG4gICAgICAgICdwYWdlTm8nOiB0aGlzLnBhZ2VObyxcbiAgICAgICAgJ3BhZ2VTaXplJzogdGhpcy5wYWdlU2l6ZSxcbiAgICAgICAgJ25pY2tuYW1lJzogdGhpcy5ydWxlRm9ybS51c2VybmFtZSxcbiAgICAgICAgJ3Bob25lJzogdGhpcy5ydWxlRm9ybS5waG9uZSxcbiAgICAgICAgJ3N0YXRlJzogdGhpcy5ydWxlRm9ybS5zdGF0ZVxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGxpc3REYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy50YWJsZURhdGEgPSBsaXN0RGF0YS5saXN0XG4gICAgICAgICAgdGhpcy50b3RhbCA9IGxpc3REYXRhLnRvdGFsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBoYW5kbGVTaXplQ2hhbmdlIChwYWdlU2l6ZSkge1xuICAgICAgdGhpcy5wYWdlU2l6ZSA9IHBhZ2VTaXplXG4gICAgICB0aGlzLmdldEFwcFVzZXJMaXN0KClcbiAgICB9LFxuICAgIGhhbmRsZUN1cnJlbnRDaGFuZ2UgKHBhZ2VJbmRleCkge1xuICAgICAgdGhpcy5wYWdlTm8gPSBwYWdlSW5kZXhcbiAgICAgIHRoaXMuZ2V0QXBwVXNlckxpc3QoKVxuICAgIH0sXG4gICAgLyoqIOWBnOeUqCwg5ZCv55So6LSm5Y+3ICoqL1xuICAgIHRvZ2dsZUNvdW50IChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgPT09IDEpIHtcbiAgICAgICAgdGhpcy4kY29uZmlybSgn56Gu5a6a6KaB5YGc55So6LSm5Y+3PycsICfmj5DnpLonLCB7XG4gICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfnoa7lrponLFxuICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognLFxuICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJ1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLmFwcFVzZXJVcGRhdGVTdGF0ZShyb3cudXNlcmlkLCAwKVxuICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRjb25maXJtKCfnoa7lrpropoHlkK/nlKjotKblj7c/JywgJ+aPkOekuicsIHtcbiAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+ehruWumicsXG4gICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ+WPlua2iCcsXG4gICAgICAgICAgdHlwZTogJ3dhcm5pbmcnXG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYXBwVXNlclVwZGF0ZVN0YXRlKHJvdy51c2VyaWQsIDEpXG4gICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIGFwcFVzZXJVcGRhdGVTdGF0ZSAodXNlcmlkLCBzdGF0ZSkge1xuICAgICAgQWN0aW9ucy5hcHBVc2VyVXBkYXRlU3RhdGUoe1xuICAgICAgICAnYXBwVXNlcic6IHtcbiAgICAgICAgICAndXNlcmlkJzogdXNlcmlkLFxuICAgICAgICAgICdzdGF0ZSc6IHN0YXRlXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIHRoaXMuZ2V0QXBwVXNlckxpc3QoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOmHjee9ruWvhueggSAqKi9cbiAgICByZXNldFBhc3N3b3JkIChyb3cpIHtcbiAgICAgIHRoaXMuJGNvbmZpcm0oJ+ehruWumuimgemHjee9ruWvhueggT8nLCAn5o+Q56S6Jywge1xuICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+ehruWumicsXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognLFxuICAgICAgICB0eXBlOiAnd2FybmluZydcbiAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICBBY3Rpb25zLnJlc2V0UGFzc3dvcmQoe1xuICAgICAgICAgICdhcHBVc2VyJzoge1xuICAgICAgICAgICAgJ3VzZXJpZCc6IHJvdy51c2VyaWRcbiAgICAgICAgICB9XG4gICAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAn6YeN572u5oiQ5YqfISdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5wYWdpbmF0aW9ue1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gIH1cbiAgLnVzZXJ7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGhlaWdodDogMjBweDtcbiAgICBib3JkZXI6MXB4IHNvbGlkICNGMDA4MDg7XG4gICAgYm9yZGVyLXJhZGl1czogMjBweDtcbiAgICBmb250LXNpemU6IDEzcHg7XG4gICAgcGFkZGluZzogMXB4IDVweCAycHggNXB4O1xuICAgIGNvbG9yOiNGMDA4MDg7XG4gICAgd2lkdGg6IDYwcHg7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG4gIC5yZXNldC1wYXNzd29yZHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMTg4M0ZGO1xuICAgIGNvbG9yOiMxODgzRkY7XG4gICAgd2lkdGg6IDYwcHg7XG4gIH1cbiAgLmRpc2FibGV7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzY5NEVGRjtcbiAgICBjb2xvcjojNjk0RUZGO1xuICAgIHdpZHRoOiA2MHB4O1xuICB9XG4gIC51c2VyLWhlYWQtaWNvbntcbiAgICB3aWR0aDogNTBweDtcbiAgICBoZWlnaHQ6IDUwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogMTAwJTtcbiAgfVxuPC9zdHlsZT5cbjxzdHlsZT5cbiAgLnVzZXItbGlzdCAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICAgIHdpZHRoOiA2NSU7XG4gIH1cbiAgLnVzZXItbGlzdCAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAyNyU7XG4gICAgbWFyZ2luLWxlZnQ6IC0xNXB4O1xuICB9XG48L3N0eWxlPlxuIl0sc291cmNlUm9vdDoiIn1dKX0sImx1dysiOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6W10sbmFtZXM6W10sbWFwcGluZ3M6IiIsZmlsZToiYXVkaXQudnVlIixzb3VyY2VSb290OiIifV0pfSwibSsvTCI6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOltdLG5hbWVzOltdLG1hcHBpbmdzOiIiLGZpbGU6InNldHRpbmdNYW51LnZ1ZSIsc291cmNlUm9vdDoiIn1dKX0sbTI2YzpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLmVsLWRpYWxvZ19faGVhZGVye1xuICBwYWRkaW5nOiAxM3B4IDMwcHggMTNweDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNDMEJFRkY7XG4gIGJhY2tncm91bmQtY29sb3I6ICNGN0ZBRkY7XG59XG4uZWwtZGlhbG9nX190aXRsZSB7XG4gIGxpbmUtaGVpZ2h0OiAxN3B4O1xuICBmb250LXNpemU6IDE3cHg7XG4gIGNvbG9yOiAjMzAzMTMzO1xufVxuLmVsLWRpYWxvZ19faGVhZGVyYnRuIHtcbiAgdG9wOiAxM3B4O1xufVxuLmVsLWRpYWxvZ19fYm9keSB7XG4gIHBhZGRpbmc6IDIwcHggNjBweCAwcHggNjBweDtcbn1cbi5hZGRVc2VyIC5lbC1mb3JtIHtcbiAgbWFyZ2luLXRvcDogMTVweDtcbn1cbi5hZGRVc2VyIC5lbC1mb3JtLWl0ZW0ge1xuICB3aWR0aDogMTAwJTtcbn1cbi5hZGRVc2VyIC5zdWJtaXQgLmVsLWZvcm0taXRlbV9fY29udGVudHtcbiAgZmxvYXQ6IHJpZ2h0O1xuICB3aWR0aDogMTYwcHg7XG59XG4uc2VsZWN0LXJvbGUge1xuICBib3JkZXI6IDFweCBzb2xpZCAjNjk0RUZGO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUJGNUZGO1xuICBjb2xvcjogIzY5NEVGRjtcbiAgcGFkZGluZzo4cHggMjJweCA4cHggMjJweDtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xufVxuLmFkZFVzZXIgLmVsLXNlbGVjdCB7XG4gIHdpZHRoOiAxMDAlO1xufVxuLnRhYmxlLWxpc3RzIHtcbiAgbWFyZ2luLXRvcDogMTBweDtcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbn1cbi50YWJsZS1saXN0cyB0aGVhZCB0ciB0aCB7XG4gIGJhY2tncm91bmQ6ICM3MTZCRkY7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyLWNvbG9yOiM3MTZCRkYgO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZVJvbGUvc3JjL2NvbXBvbmVudHMvbWFuYWdlUm9sZS9hZGRSb2xlLnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUErSkE7RUFDQSx3QkFBQTtFQUNBLGlDQUFBO0VBQ0EsMEJBQUE7Q0FDQTtBQUNBO0VBQ0Esa0JBQUE7RUFDQSxnQkFBQTtFQUNBLGVBQUE7Q0FDQTtBQUNBO0VBQ0EsVUFBQTtDQUNBO0FBQ0E7RUFDQSw0QkFBQTtDQUNBO0FBQ0E7RUFDQSxpQkFBQTtDQUNBO0FBQ0E7RUFDQSxZQUFBO0NBQ0E7QUFDQTtFQUNBLGFBQUE7RUFDQSxhQUFBO0NBQ0E7QUFDQTtFQUNBLDBCQUFBO0VBQ0EsMEJBQUE7RUFDQSxlQUFBO0VBQ0EsMEJBQUE7RUFDQSxtQkFBQTtDQUNBO0FBQ0E7RUFDQSxZQUFBO0NBQ0E7QUFDQTtFQUNBLGlCQUFBO0VBQ0Esb0JBQUE7Q0FDQTtBQUNBO0VBQ0Esb0JBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxtQkFBQTtDQUNBIixmaWxlOiJhZGRSb2xlLnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9ImFkZFVzZXIiPlxuICAgIDxlbC1mb3JtXG4gICAgICByZWY9InJ1bGVGb3JtIlxuICAgICAgOm1vZGVsPSJydWxlRm9ybSJcbiAgICAgIDpydWxlcz0icnVsZXMiPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i6KeS6Imy5ZCN56ewIlxuICAgICAgICBwcm9wPSJyb2xlX25hbWUiPlxuICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICB2LW1vZGVsLnRyaW09InJ1bGVGb3JtLnJvbGVfbmFtZSJcbiAgICAgICAgICBzdHlsZT0id2lkdGg6MjYwcHg7IlxuICAgICAgICAgIGNsZWFyYWJsZS8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICA8L2VsLWZvcm0+XG4gICAgPGRpdiBjbGFzcz0idGFibGUtbGlzdHMiPlxuICAgICAgPHAgc3R5bGU9Im1hcmdpbi1ib3R0b206IDEwcHg7Ij7mnYPpmZDphY3nva7vvJo8L3A+XG4gICAgICA8dHJlZS10cmFuc2ZlclxuICAgICAgICA6dGl0bGU9InRpdGxlIlxuICAgICAgICA6ZnJvbV9kYXRhPSJmcm9tRGF0YSJcbiAgICAgICAgOnRvX2RhdGE9InRvRGF0YSJcbiAgICAgICAgOmRlZmF1bHQtcHJvcHM9IntsYWJlbDpcJ2xhYmVsXCd9IlxuICAgICAgICA6bW9kZT0ibW9kZSJcbiAgICAgICAgOmZpbHRlcj0iZmFsc2UiXG4gICAgICAgIG9wZW4tYWxsXG4gICAgICAgIGhlaWdodD0iNDQwcHgiXG4gICAgICAgIEBhZGRCdG4gPSAiYWRkQXV0aCJcbiAgICAgICAgQHJlbW92ZUJ0biA9ICJyZW1vdmVBdXRoIi8+XG4gICAgPC9kaXY+XG4gICAgPGVsLWZvcm0taXRlbVxuICAgICAgY2xhc3M9InN1Ym1pdCJcbiAgICAgIHN0eWxlPSJ3aWR0aDoxMDAlIj5cbiAgICAgIDxlbC1idXR0b25cbiAgICAgICAgQGNsaWNrPSJjYW5jZWwiPuWPlua2iDwvZWwtYnV0dG9uPlxuICAgICAgPGVsLWJ1dHRvblxuICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICBAY2xpY2s9Im9uU3VibWl0KFwncnVsZUZvcm1cJykiPuaPkOS6pDwvZWwtYnV0dG9uPlxuICAgIDwvZWwtZm9ybS1pdGVtPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IHRyZWVUcmFuc2ZlciBmcm9tIFwnZWwtdHJlZS10cmFuc2ZlclwnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9zeXN0ZW1Vc2Vyc0FwaVwnXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6IFwnQWRkUm9sZVwnLFxuICBjb21wb25lbnRzOiB7XG4gICAgdHJlZVRyYW5zZmVyXG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBydWxlRm9ybToge1xuICAgICAgICByb2xlX25hbWU6IFwnXCdcbiAgICAgIH0sXG4gICAgICBtb2RlOiBcJ3RyYW5zZmVyXCcsIC8vIHRyYW5zZmVyIGFkZHJlc3NMaXN0XG4gICAgICBmcm9tRGF0YTogW10sXG4gICAgICB0b0RhdGE6IFtdLFxuICAgICAgdGl0bGU6IFtcJ+WFqOmDqOadg+mZkFwnLCBcJ+W3sumAieaLqeadg+mZkFwnXSxcbiAgICAgIHJ1bGVzOiB7XG4gICAgICAgIHJvbGVfbmFtZTogW1xuICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6IFwn6K+36L6T5YWl6KeS6Imy5ZCN56ewXCcsIHRyaWdnZXI6IFwnYmx1clwnIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIGlkQXJyOiBbXVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgLyoqIOiOt+WPluagkSAqKi9cbiAgICB0aGlzLmdldFRyZWVQZXJtaXNzaW9uKClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldFRyZWVQZXJtaXNzaW9uICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0VHJlZVBlcm1pc3Npb24oKS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLmZyb21EYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBnZXRBbGxTZWxlY3RlZElkICgpIHtcbiAgICAgIHRoaXMudG9EYXRhLmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgdGhpcy5pZEFyci5wdXNoKGl0ZW0uaWQpXG4gICAgICAgIGlmIChpdGVtLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aGlzLmdldENoaWxkcmVuSWQoaXRlbS5jaGlsZHJlbilcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGdldENoaWxkcmVuSWQgKGFycikge1xuICAgICAgYXJyLmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgdGhpcy5pZEFyci5wdXNoKGl0ZW0uaWQpXG4gICAgICAgIGlmIChpdGVtLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aGlzLmdldENoaWxkcmVuSWQoaXRlbS5jaGlsZHJlbilcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIG9uU3VibWl0IChmb3JtTmFtZSkge1xuICAgICAgdGhpcy4kcmVmc1tmb3JtTmFtZV0udmFsaWRhdGUoKHZhbGlkKSA9PiB7XG4gICAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICAgIGlmICh0aGlzLnRvRGF0YS5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgdGhpcy4kbm90aWZ5KHtcbiAgICAgICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgICAgICB0aXRsZTogXCfplJnor69cJyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogXCfor7fkuLrop5LoibLphY3nva7mnYPpmZBcJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmlkQXJyID0gW11cbiAgICAgICAgICB0aGlzLmdldEFsbFNlbGVjdGVkSWQoKVxuICAgICAgICAgIEFjdGlvbnMuYWRkUm9sZSh7XG4gICAgICAgICAgICBcJ3JvbGVcJzoge1xuICAgICAgICAgICAgICBcJ25hbWVcJzogdGhpcy5ydWxlRm9ybS5yb2xlX25hbWUsXG4gICAgICAgICAgICAgIFwncGVybWlzc2lvbmlkTGlzdFwnOiB0aGlzLmlkQXJyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKVxuICAgICAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgICAgICB0aGlzLiRub3RpZnkoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcJ+aIkOWKn1wnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwn5re75Yqg6KeS6Imy5oiQ5YqfXCdcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgdGhpcy4kZW1pdChcJ2Nsb3NlRGlhbG9nXCcpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcJ2Vycm9yIHN1Ym1pdCEhXCcpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBjYW5jZWwgKCkge1xuICAgICAgdGhpcy4kZW1pdChcJ2Nsb3NlRGlhbG9nXCcpXG4gICAgfSxcbiAgICBhZGRBdXRoIChmcm9tRGF0YSwgdG9EYXRhLCBvYmopIHtcbiAgICAgIHRoaXMudG9EYXRhID0gdG9EYXRhXG4gICAgfSxcbiAgICByZW1vdmVBdXRoIChmcm9tRGF0YSwgdG9EYXRhLCBvYmopIHtcbiAgICAgIHRoaXMudG9EYXRhID0gdG9EYXRhXG4gICAgfVxuICB9XG5cbn1cbjxcL3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbiAgLmVsLWJ1dHRvbi0tcHJpbWFyeSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzcxNkJGRjtcbiAgICBib3JkZXItY29sb3I6ICM3MTZCRkY7XG4gIH1cbiAgLmVsLWJ1dHRvbi0tZGVmYXVsdCB7XG4gICAgY29sb3I6ICM3MTZCRkYgO1xuICAgIGJvcmRlci1jb2xvcjogIzcxNkJGRjtcbiAgfVxuICAuYWRkVXNlciAuZWwtY2hlY2tib3gge1xuICAgIGZsb2F0OiBsZWZ0O1xuICB9XG4gIC5hZGRVc2VyIC5jaGVjay1hbGwge1xuICAgIG1hcmdpbi1yaWdodDogMzBweDtcbiAgfVxuPC9zdHlsZT5cbjxzdHlsZT5cbiAgLmVsLWRpYWxvZ19faGVhZGVye1xuICAgIHBhZGRpbmc6IDEzcHggMzBweCAxM3B4O1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjQzBCRUZGO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNGN0ZBRkY7XG4gIH1cbiAgLmVsLWRpYWxvZ19fdGl0bGUge1xuICAgIGxpbmUtaGVpZ2h0OiAxN3B4O1xuICAgIGZvbnQtc2l6ZTogMTdweDtcbiAgICBjb2xvcjogIzMwMzEzMztcbiAgfVxuICAuZWwtZGlhbG9nX19oZWFkZXJidG4ge1xuICAgIHRvcDogMTNweDtcbiAgfVxuICAuZWwtZGlhbG9nX19ib2R5IHtcbiAgICBwYWRkaW5nOiAyMHB4IDYwcHggMHB4IDYwcHg7XG4gIH1cbiAgLmFkZFVzZXIgLmVsLWZvcm0ge1xuICAgIG1hcmdpbi10b3A6IDE1cHg7XG4gIH1cbiAgLmFkZFVzZXIgLmVsLWZvcm0taXRlbSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbiAgLmFkZFVzZXIgLnN1Ym1pdCAuZWwtZm9ybS1pdGVtX19jb250ZW50e1xuICAgIGZsb2F0OiByaWdodDtcbiAgICB3aWR0aDogMTYwcHg7XG4gIH1cbiAgLnNlbGVjdC1yb2xlIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNjk0RUZGO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNFQkY1RkY7XG4gICAgY29sb3I6ICM2OTRFRkY7XG4gICAgcGFkZGluZzo4cHggMjJweCA4cHggMjJweDtcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIH1cbiAgLmFkZFVzZXIgLmVsLXNlbGVjdCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbiAgLnRhYmxlLWxpc3RzIHtcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIH1cbiAgLnRhYmxlLWxpc3RzIHRoZWFkIHRyIHRoIHtcbiAgICBiYWNrZ3JvdW5kOiAjNzE2QkZGO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXItY29sb3I6IzcxNkJGRiA7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sbTNjODpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLnNsaWRlIC5lbC1mb3JtLS1pbmxpbmUgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gIHdpZHRoOiA2MCU7XG59XG4uc2xpZGUgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtIHtcbiAgd2lkdGg6IDI1JTtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlU2xpZGUvc3JjL2NvbXBvbmVudHMvbWFuYWdlU2xpZGUvc2xpZGVMaXN0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUErZEE7RUFDQSxXQUFBO0NBQ0E7QUFDQTtFQUNBLFdBQUE7Q0FDQSIsZmlsZToic2xpZGVMaXN0LnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9InNsaWRlIj5cbiAgICA8ZGl2PlxuICAgICAgPGNpcmNsZS10aXRsZVxuICAgICAgICB0aXRsZS1uYW1lPSLova7mkq3lm77nrqHnkIYiXG4gICAgICAgIGNsYXNzPSJjaWNsZS1jb250cm9sbGVyIlxuICAgICAgLz5cbiAgICAgIDxkaXYgY2xhc3M9InNlYXJjaC1mb3JtLWNvbnRhaW5lciI+XG4gICAgICAgIDxlbC1mb3JtXG4gICAgICAgICAgOmlubGluZT0idHJ1ZSJcbiAgICAgICAgICA6bW9kZWw9InNsaWRlRm9ybSJcbiAgICAgICAgICBjbGFzcz0iZGVtby1mb3JtLWlubGluZSI+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5qCH6aKYIj5cbiAgICAgICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgICAgICB2LW1vZGVsPSJzbGlkZUZvcm0uY2hhcnRfbmFtZSJcbiAgICAgICAgICAgICAgY2xlYXJhYmxlLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLlvZLlsZ7popHpgZMiPlxuICAgICAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgICAgICB2LW1vZGVsPSJzbGlkZUZvcm0uY2hhbm5lbGlkIlxuICAgICAgICAgICAgICBmaWx0ZXJhYmxlXG4gICAgICAgICAgICAgIGNsZWFyYWJsZVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hTbGlkZSJcbiAgICAgICAgICAgICAgQGNsZWFyPSJzZWFyY2hTbGlkZSI+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBjaGFubmVsVHlwZUxpc3QiXG4gICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgICAgICAgOnZhbHVlPSJpdGVtLnZhbHVlIlxuICAgICAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9IueKtuaAgSJcbiAgICAgICAgICAgIGNsYXNzPSJzZWFyY2gtbGVmdCI+XG4gICAgICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgICAgIHYtbW9kZWw9InNsaWRlRm9ybS5zdGF0ZSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IiJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoU2xpZGUiPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgdmFsdWU9IiJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5YWo6YOoIi8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9IjEiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuW+heS4iue6vyIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPSIyIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlt7LkuIrnur8iLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMyJcbiAgICAgICAgICAgICAgICBsYWJlbD0i6L+H5pyfIi8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9IjAiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuWBnOeUqCIvPlxuICAgICAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9IuW8gOWni+aXtumXtCJcbiAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogLTI5cHgiPlxuICAgICAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgICAgIDp0aXRsZT0ic2xpZGVGb3JtLnN0YXJ0RGF0ZSB8IEZvcm1hdERhdGUoXCd5eXl5LU1NLWRkIGhoOm1tXCcpIlxuICAgICAgICAgICAgICB2LW1vZGVsPSJzbGlkZUZvcm0uc3RhcnREYXRlIlxuICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pe26Ze0IlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hTbGlkZSIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGNsYXNzPSJzbGlkZS1lbmQtZGF0ZS1pdGVtIlxuICAgICAgICAgICAgbGFiZWw9Iue7k+adn+aXtumXtCJcbiAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogMjlweCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPSJzbGlkZUZvcm0uZW5kRGF0ZSB8IEZvcm1hdERhdGUoXCd5eXl5LU1NLWRkIGhoOm1tXCcpIlxuICAgICAgICAgICAgICB2LW1vZGVsPSJzbGlkZUZvcm0uZW5kRGF0ZSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXtumXtCJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoU2xpZGUiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiA0MHB4IlxuICAgICAgICAgICAgQGNsaWNrPSJzZWFyY2hTbGlkZSI+XG4gICAgICAgICAgICDmn6Xor6JcbiAgICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCIvPlxuICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICAgIDxyb3V0ZXItbGluayB0bz0iL21hbmFnZVNsaWRlL2NyZWF0ZSI+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uIHR5cGU9InByaW1hcnkiPlxuICAgICAgICAgICAgICDmt7vliqDova7mkq3lm75cbiAgICAgICAgICAgICAgPGkgY2xhc3M9ImVsLWljb24tcGx1cyBlbC1pY29uLS1yaWdodCIvPlxuICAgICAgICAgICAgPC9lbC1idXR0b24+XG4gICAgICAgICAgPC9yb3V0ZXItbGluaz5cbiAgICAgICAgPC9lbC1mb3JtPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz0idGFibGUtbGlzdCI+XG4gICAgICA8ZWwtdGFibGVcbiAgICAgICAgcmVmPSJzbGlkZVRhYmxlIlxuICAgICAgICA6ZGF0YT0idGFibGVEYXRhIlxuICAgICAgICBzdHJpcGVcbiAgICAgICAgY2xhc3M9Indob2xlLXRhYmxlIlxuICAgICAgICBtaW4taGVpZ2h0PSI0MDAiXG4gICAgICAgIEBjZWxsLWNsaWNrPSJjZWxsQ2xpY2siXG4gICAgICAgIEBjZWxsLW1vdXNlLWxlYXZlPSJjZWxsTW91c2VMZWF2ZSI+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiB0YWJsZUhlYWRlciJcbiAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICA6cHJvcD0iaXRlbS5wcm9wIlxuICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCJcbiAgICAgICAgICA6d2lkdGg9Iml0ZW0ud2lkdGgiXG4gICAgICAgICAgOmZvcm1hdHRlcj0iaXRlbS5mb3JtYXR0ZXIiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICBmaXhlZFxuICAgICAgICAgIHNob3ctb3ZlcmZsb3ctdG9vbHRpcFxuICAgICAgICAvPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgZml4ZWQ9InJpZ2h0IlxuICAgICAgICAgIGxhYmVsPSLmk43kvZwiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICB3aWR0aD0iMTAwIj5cbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgY29udGVudD0i5L+u5pS554q25oCBIlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcCI+XG4gICAgICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IlxuICAgICAgICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgICAgICAgIGljb249ImVsLWljb24tcmVtb3ZlLW91dGxpbmUiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJjaGFuZ2VTdGF0ZShzY29wZS5yb3cpIi8+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9InRleHQiXG4gICAgICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgICAgICBpY29uPSJlbC1pY29uLWVkaXQiXG4gICAgICAgICAgICAgIEBjbGljaz0iaGFuZGxlRWRpdChzY29wZS5yb3cpIi8+XG4gICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9InRleHQiXG4gICAgICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgICAgICBpY29uPSJlbC1pY29uLWRlbGV0ZSJcbiAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVEZWxldGUoc2NvcGUucm93KSIvPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgPC9lbC10YWJsZT5cbiAgICAgIDxkaXYgY2xhc3M9InBhZ2luYXRpb24iPlxuICAgICAgICA8ZWwtcGFnaW5hdGlvblxuICAgICAgICAgIDp0b3RhbD0idG90YWwiXG4gICAgICAgICAgOnBhZ2Utc2l6ZXM9IlsxMCwgMjAsIDMwLCA0MF0iXG4gICAgICAgICAgOmN1cnJlbnQtcGFnZT0icGFnZU5vIlxuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICBsYXlvdXQ9InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPSJoYW5kbGVTaXplQ2hhbmdlIlxuICAgICAgICAgIEBjdXJyZW50LWNoYW5nZT0iaGFuZGxlQ3VycmVudENoYW5nZSIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlXCdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL3NsaWRlQXBpXCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlXG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzbGlkZUZvcm06IHtcbiAgICAgICAgY2hhcnRfbmFtZTogXCdcJyxcbiAgICAgICAgY2hhbm5lbGlkOiBcJ1wnLFxuICAgICAgICBzdGF0ZTogXCdcJyxcbiAgICAgICAgcmVnaW9uOiBcJ1wnLFxuICAgICAgICBkYXRlcmFuZ2U6IFtdLFxuICAgICAgICBzb3J0OiBcJzFcJyxcbiAgICAgICAgc3RhcnREYXRlOiBcJ1wnLFxuICAgICAgICBlbmREYXRlOiBcJ1wnXG4gICAgICB9LFxuICAgICAgY2xpY2tDZWxsSW5kZXg6IC0xLFxuICAgICAgdGFibGVIZWFkZXI6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnY2hhcnRfbmFtZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+WbvueJh+agh+mimFwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2NyZWF0ZXRpbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfliJvlu7rml6XmnJ9cJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10oY2VsbFZhbHVlLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3VwZGF0ZVwnICtcbiAgICAgICAgICAgIFwndGltZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+abtOaWsOaXpeacn1wnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnRm9ybWF0RGF0ZVwnXShjZWxsVmFsdWUsIFwneXl5eS1NTS1kZCBoaDptbVwnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnY2hhbm5lbF9uYW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5b2S5bGe6aKR6YGTXCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnY2hhcnRfaGVhZF91cmxcJyxcbiAgICAgICAgICBsYWJlbDogXCfova7mkq3lm77lm77niYdcJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxpbWcgY2xhc3M9XCd0b3BpYy10YWJsZS1waWNcJyBzcmM9e2NlbGxWYWx1ZX0vPlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnanVtcF90eXBlXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5YWz6IGU5YaF5a65XCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChjZWxsVmFsdWUgPT09IDEgJiYgcm93LnRpdGxlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBcJ+eov+S7ti1cJyArIHJvdy50aXRsZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChjZWxsVmFsdWUgPT09IDIgJiYgcm93LnNwZWNpYWxfbmFtZSkge1xuICAgICAgICAgICAgICByZXR1cm4gXCfkuJPpopgtXCcgKyByb3cuc3BlY2lhbF9uYW1lXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gXCfml6BcJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnZXhwaXJ5X2RhdGVfc3RhcnRcJyxcbiAgICAgICAgICBsYWJlbDogXCfmnInmlYjmnJ9cJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgbGV0IHN0YXJ0RGF0ZSA9IHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10oY2VsbFZhbHVlLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICAgIGxldCBlbmREYXRlID0gdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnRm9ybWF0RGF0ZVwnXShyb3cuZXhwaXJ5X2RhdGVfZW5kLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICAgIHJldHVybiBzdGFydERhdGUgKyBcJ+iHs1wnICsgZW5kRGF0ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnc2hvd1N0YXRlXCcsXG4gICAgICAgICAgbGFiZWw6IFwn54q25oCBXCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnc29ydFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+aOkuW6j1wnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMuY2xpY2tDZWxsSW5kZXgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDxpbnB1dCB0eXBlPVwndGV4dFwnIGNsYXNzPVwnc2VsZi1zb3J0XCcgaWQ9e2luZGV4fSB2YWx1ZT0ge2NlbGxWYWx1ZX0gYXV0b2ZvY3VzPSJhdXRvZm9jdXMiIC8+XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gPHNwYW4gY2xhc3M9XCdzb3J0LWNvbnRhaW5lclwnIGRhdGEtaWQ9e2luZGV4fT57Y2VsbFZhbHVlfTwvc3Bhbj5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICB0YWJsZURhdGE6IFtdLFxuICAgICAgc29ydFZhbHVlOiAtMSxcbiAgICAgIHBhZ2VObzogMSxcbiAgICAgIHBhZ2VTaXplOiAxMCxcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgY2hhbm5lbFR5cGVMaXN0OiBbXSxcbiAgICAgIHNlbGVjdENoYXJ0SWQ6IFwnXCcgLy8g54K55Ye75o6S5bqP6KGM55qEY2hhbm5lbGlkXG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIFwnc2xpZGVGb3JtLmNoYXJ0X25hbWVcJyAoKSB7XG4gICAgICB0aGlzLnNlYXJjaFNsaWRlKClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuZ2V0U2xpZGVMaXN0KClcbiAgICB0aGlzLmdldExpc3RVc2FibGVDaGFubmVsKClcbiAgICB0aGlzLiRyb290LmV2ZW50SHViLiRvbihcJ3Jlc2V0LW9wdGlvbnNcJywgKCkgPT4ge1xuICAgICAgdGhpcy5yZXNldE9wdGlvbnMoKVxuICAgIH0pXG4gIH0sXG4gIGFjdGl2YXRlZCAoKSB7XG4gICAgbGV0IG1ldGEgPSB0aGlzLiRyb3V0ZS5tZXRhXG4gICAgaWYgKG1ldGEuaGFzT3duUHJvcGVydHkoXCdyZWZyZXNoXCcpICYmIG1ldGEucmVmcmVzaCkge1xuICAgICAgdGhpcy5nZXRTbGlkZUxpc3QoKVxuICAgICAgZGVsZXRlIHRoaXMuJHJvdXRlLm1ldGEucmVmcmVzaFxuICAgIH1cbiAgfSxcbiAgYmVmb3JlUm91dGVMZWF2ZSAodG8sIGZyb20sIG5leHQpIHtcbiAgICBpZiAodG8ucGF0aCA9PT0gXCcvbWFuYWdlU2xpZGUvY3JlYXRlXCcpIHtcbiAgICAgIHRoaXMucmVzZXRPcHRpb25zKClcbiAgICB9XG4gICAgbmV4dCgpXG4gIH0sXG4gIGJlZm9yZURlc3Ryb3kgKCkge1xuICAgIHRoaXMuJHJvb3QuZXZlbnRIdWIuJG9mZihcJ3Jlc2V0LW9wdGlvbnNcJylcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHJlc2V0T3B0aW9ucyAoKSB7XG4gICAgICB0aGlzLnNsaWRlRm9ybSA9IHtcbiAgICAgICAgY2hhcnRfbmFtZTogXCdcJyxcbiAgICAgICAgY2hhbm5lbGlkOiBcJ1wnLFxuICAgICAgICBzdGF0ZTogXCdcJyxcbiAgICAgICAgcmVnaW9uOiBcJ1wnLFxuICAgICAgICBkYXRlcmFuZ2U6IFtdLFxuICAgICAgICBzb3J0OiBcJzFcJyxcbiAgICAgICAgc3RhcnREYXRlOiBcJ1wnLFxuICAgICAgICBlbmREYXRlOiBcJ1wnXG4gICAgICB9XG4gICAgICB0aGlzLnBhZ2VObyA9IDFcbiAgICAgIHRoaXMuZ2V0U2xpZGVMaXN0KClcbiAgICB9LFxuICAgIGhhbmRsZVNpemVDaGFuZ2UgKHBhZ2VTaXplKSB7XG4gICAgICB0aGlzLnBhZ2VTaXplID0gcGFnZVNpemVcbiAgICAgIHRoaXMuc2VhcmNoU2xpZGUoKVxuICAgIH0sXG4gICAgaGFuZGxlQ3VycmVudENoYW5nZSAocGFnZUluZGV4KSB7XG4gICAgICB0aGlzLnBhZ2VObyA9IHBhZ2VJbmRleFxuICAgICAgdGhpcy5nZXRTbGlkZUxpc3QoKVxuICAgIH0sXG4gICAgLyoqIOWNleWFg+agvOiiq+eCueWHuyAqKi9cbiAgICBjZWxsQ2xpY2sgKHJvdywgY29sdW1uLCBjZWxsLCBldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCdzb3J0LWNvbnRhaW5lclwnKSkge1xuICAgICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgICAgbGV0IGlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuaWRcbiAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xpY2tDZWxsSW5kZXggPSBwYXJzZUludChpZClcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGlucHV0RWxlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCcuZWwtdG9vbHRpcCA+IGlucHV0LnNlbGYtc29ydFwnKVxuICAgICAgICAgICAgaW5wdXRFbGVzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgLyoqIOWwhmNoYW5uZWxfaWTlrZjlgqjotbfmnaXmoIfor4bljZXlhYPooYwgKiovXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RDaGFydElkID0gcm93LmNoYXJ0aWRcbiAgICAgICAgICAgICAgICBlbGVtZW50LmZvY3VzKClcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm9ua2V5dXAgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3J0VmFsdWUgPSBwYXJzZUludChlbGVtZW50LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgICAgbWVzc2FnZTogXCflkK/nlKjnirbmgIHkuIvkuI3og73mjpLluo8hXCdcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog56a75byA5Y2V5YWD5qC8ICoqL1xuICAgIGNlbGxNb3VzZUxlYXZlIChyb3cpIHtcbiAgICAgIC8qKiDph43nva7ljZXlhYPmoLznirbmgIEgKiovXG4gICAgICB0aGlzLmNsaWNrQ2VsbEluZGV4ID0gLTFcbiAgICAgIGlmICh0aGlzLnNvcnRWYWx1ZSA9PT0gLTEgfHwgdGhpcy5zZWxlY3RDaGFydElkICE9PSByb3cuY2hhcnRpZCkgcmV0dXJuIGZhbHNlXG4gICAgICAvKiog5L+u5pS55o6S5bqPICoqL1xuICAgICAgQWN0aW9ucy51cGRhdGVTbGlkZVNvcnQoe1xuICAgICAgICBcJ3JvdGF0aW9uQ2hhcnRcJzoge1xuICAgICAgICAgIFwnY2hhcnRpZFwnOiByb3cuY2hhcnRpZCxcbiAgICAgICAgICBcJ3NvcnRcJzogdGhpcy5zb3J0VmFsdWVcbiAgICAgICAgfVxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgICAgdGhpcy5nZXRTbGlkZUxpc3QoKVxuICAgICAgICAgIHRoaXMuc29ydFZhbHVlID0gLTFcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGdldFNsaWRlTGlzdCAoKSB7XG4gICAgICBsZXQgdGltZVN0YXJ0ID0gdGhpcy5zbGlkZUZvcm0uc3RhcnREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5zbGlkZUZvcm0uc3RhcnREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBsZXQgdGltZUVuZCA9IHRoaXMuc2xpZGVGb3JtLmVuZERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLnNsaWRlRm9ybS5lbmREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBBY3Rpb25zLmdldFNsaWRlTGlzdCh7XG4gICAgICAgIFwncGFnZU5vXCc6IHRoaXMucGFnZU5vLFxuICAgICAgICBcJ3BhZ2VTaXplXCc6IHRoaXMucGFnZVNpemUsXG4gICAgICAgIFwnY2hhbm5lbGlkXCc6IHRoaXMuc2xpZGVGb3JtLmNoYW5uZWxpZCxcbiAgICAgICAgXCdjaGFydF9uYW1lXCc6IHRoaXMuc2xpZGVGb3JtLmNoYXJ0X25hbWUsXG4gICAgICAgIFwnc3RhdGVcJzogdGhpcy5zbGlkZUZvcm0uc3RhdGUsXG4gICAgICAgIFwndGltZVN0YXJ0XCc6IHRpbWVTdGFydCxcbiAgICAgICAgXCd0aW1lRW5kXCc6IHRpbWVFbmRcbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICB0aGlzLnRhYmxlRGF0YSA9IGRhdGEubGlzdFxuICAgICAgICAgIHRoaXMudG90YWwgPSBkYXRhLnRvdGFsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog5L+u5pS554q25oCBICoqL1xuICAgIGNoYW5nZVN0YXRlIChyb3cpIHtcbiAgICAgIGxldCBzdGF0ZSA9IDBcbiAgICAgIGlmIChyb3cuc3RhdGUgPT09IDEpIHtcbiAgICAgICAgc3RhdGUgPSAwXG4gICAgICB9IGVsc2UgaWYgKHJvdy5zdGF0ZSA9PT0gMCkge1xuICAgICAgICBzdGF0ZSA9IDFcbiAgICAgIH1cbiAgICAgIEFjdGlvbnMudXBkYXRlU2xpZGVTdGF0ZSh7XG4gICAgICAgIFwncm90YXRpb25DaGFydFwnOiB7XG4gICAgICAgICAgXCdjaGFydGlkXCc6IHJvdy5jaGFydGlkLFxuICAgICAgICAgIFwnc3RhdGVcJzogc3RhdGVcbiAgICAgICAgfVxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCcsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IFwn5L+u5pS554q25oCB5Li65YGc55SoXCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogXCfkv67mlLnnirbmgIHkuLrlkK/nlKhcJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5nZXRTbGlkZUxpc3QoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOWIoOmZpOi9ruaSreWbviAqKi9cbiAgICBoYW5kbGVEZWxldGUgKHJvdykge1xuICAgICAgaWYgKHJvdy5zdGF0ZSAhPT0gMSkge1xuICAgICAgICB0aGlzLiRjb25maXJtKFwn5piv5ZCm5Yig6ZmkIlwnICsgcm93LmNoYXJ0X25hbWUgKyBcJyI/XCcsIFwn5o+Q56S6XCcsIHtcbiAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCfnoa7lrppcJyxcbiAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcJ+WPlua2iFwnLFxuICAgICAgICAgIHR5cGU6IFwnd2FybmluZ1wnXG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIEFjdGlvbnMuZGVsZXRlU2xpZGUoe1xuICAgICAgICAgICAgXCdyb3RhdGlvbkNoYXJ0XCc6IHtcbiAgICAgICAgICAgICAgXCdjaGFydGlkXCc6IHJvdy5jaGFydGlkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwn5Yig6Zmk5oiQ5YqfIVwnXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmdldFNsaWRlTGlzdCgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn5ZCv55So54q25oCB5LiL5LiN5Y+v5Yig6ZmkIVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICBoYW5kbGVFZGl0IChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcJ2NoYXJ0aWRcJywgcm93LmNoYXJ0aWQpXG4gICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHtwYXRoOiBcJy9tYW5hZ2VTbGlkZS9lZGl0XCd9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn5ZCv55So54q25oCB5LiL5LiN5Y+v57yW6L6RIVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog6I635Y+W6aKR6YGT57G75YirICoqL1xuICAgIGdldExpc3RVc2FibGVDaGFubmVsICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0TGlzdFVzYWJsZUNoYW5uZWwoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YVxuICAgICAgICBpZiAoZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gZGF0YS5yZXN1bHRcbiAgICAgICAgICByZXN1bHQuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICAgICAgbGV0IG5ld0l0ZW0gPSB7fVxuICAgICAgICAgICAgbmV3SXRlbS5sYWJlbCA9IGl0ZW0uY2hhbm5lbF9uYW1lXG4gICAgICAgICAgICBuZXdJdGVtLnZhbHVlID0gaXRlbS5jaGFubmVsaWRcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbFR5cGVMaXN0LnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgc2VhcmNoU2xpZGUgKCkge1xuICAgICAgdGhpcy5wYWdlTm8gPSAxXG4gICAgICB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdzd2FwVGltZVwnXSh0aGlzLnNsaWRlRm9ybSlcbiAgICAgIHRoaXMuZ2V0U2xpZGVMaXN0KClcbiAgICB9XG4gIH1cblxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLnBhZ2luYXRpb257XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgfVxuICAuc2xpZGUtZW5kLWRhdGUtaXRlbXtcbiAgICBtYXJnaW4tbGVmdDogLTI5cHg7XG4gIH1cbjwvc3R5bGU+XG48c3R5bGU+XG4gIC5zbGlkZSAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICAgIHdpZHRoOiA2MCU7XG4gIH1cbiAgLnNsaWRlIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmVsLWZvcm0taXRlbSB7XG4gICAgd2lkdGg6IDI1JTtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LG5JczE6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoIkR5ZHgiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiMmEwMzE3MTIiLGEsITEse30pfSwibkswKyI6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoIktBanAiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiNGQ4MDE5YjYiLGEsITEse30pfSxuZTVaOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uY2ljbGUtY29udGFpbmVyW2RhdGEtdi01NWQ1ODE2MV17XG4gIG1hcmdpbi1ib3R0b206IDMycHg7XG4gIG1hcmdpbi1sZWZ0OiAzOXB4O1xufVxuLmJvcmRlci1jaXJjbGVbZGF0YS12LTU1ZDU4MTYxXXtcbiAgd2lkdGg6MTNweDtcbiAgaGVpZ2h0OiAxM3B4O1xuICBib3JkZXItcmFkaXVzOiAxMDAlO1xuICBib3JkZXI6IDNweCBzb2xpZCByZ2JhKDEwNSwgNzgsIDI1NSwgMSk7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG4udGl0bGUtbmFtZVtkYXRhLXYtNTVkNTgxNjFde1xuICBjb2xvcjogcmdiYSg3MSwgNzEsIDcxLCAxKTtcbiAgZm9udC1zaXplOjE4cHg7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL2NvbW1vbnMvc3JjL2NvbXBvbmVudHMvY29tbW9ucy9jaXJjbGVUaXRsZS52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBc0JBO0VBQ0Esb0JBQUE7RUFDQSxrQkFBQTtDQUNBO0FBQ0E7RUFDQSxXQUFBO0VBQ0EsYUFBQTtFQUNBLG9CQUFBO0VBQ0Esd0NBQUE7RUFDQSxzQkFBQTtFQUNBLCtCQUFBO1VBQUEsdUJBQUE7Q0FDQTtBQUNBO0VBQ0EsMkJBQUE7RUFDQSxlQUFBO0NBQ0EiLGZpbGU6ImNpcmNsZVRpdGxlLnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9ImNpY2xlLWNvbnRhaW5lciI+XG4gICAgPHNwYW4gY2xhc3M9ImJvcmRlci1jaXJjbGUiIC8+XG4gICAgPHNwYW4gY2xhc3M9InRpdGxlLW5hbWUiPlxuICAgICAge3sgdGl0bGVOYW1lIH19XG4gICAgPC9zcGFuPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6IFwnQ2lyY2xlVGl0bGVcJyxcbiAgcHJvcHM6IHtcbiAgICB0aXRsZU5hbWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IFwn566h55CGXCdcbiAgICB9XG4gIH1cbn1cbjxcL3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbiAgLmNpY2xlLWNvbnRhaW5lcntcbiAgICBtYXJnaW4tYm90dG9tOiAzMnB4O1xuICAgIG1hcmdpbi1sZWZ0OiAzOXB4O1xuICB9XG4gIC5ib3JkZXItY2lyY2xle1xuICAgIHdpZHRoOjEzcHg7XG4gICAgaGVpZ2h0OiAxM3B4O1xuICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gICAgYm9yZGVyOiAzcHggc29saWQgcmdiYSgxMDUsIDc4LCAyNTUsIDEpO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG4gIC50aXRsZS1uYW1le1xuICAgIGNvbG9yOiByZ2JhKDcxLCA3MSwgNzEsIDEpO1xuICAgIGZvbnQtc2l6ZToxOHB4O1xuICB9XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sbmtpSDpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgiU0FBTyIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCI2MjI1ZTU3ZSIsYSwhMSx7fSl9LG52QlY6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi5jaWNsZS1jb250cm9sbGVyW2RhdGEtdi02YTI5OTMzNF0ge1xuICBtYXJnaW4tdG9wOiA0JTtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlVG9waWMvc3JjL2NvbXBvbmVudHMvbWFuYWdlVG9waWMvdG9waWNDcmVhdGUudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQTROQTtFQUNBLGVBQUE7Q0FDQSIsZmlsZToidG9waWNDcmVhdGUudnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0idG9waWMgY3JlYXRlIj5cbiAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICB0aXRsZS1uYW1lPSLkuJPpopjmlrDlop4iXG4gICAgICBjbGFzcz0iY2ljbGUtY29udHJvbGxlciJcbiAgICAvPlxuICAgIDxlbC1mb3JtXG4gICAgICByZWY9InJ1bGVGb3JtIlxuICAgICAgOm1vZGVsPSJydWxlRm9ybSJcbiAgICAgIDpydWxlcz0icnVsZXMiXG4gICAgICBsYWJlbC13aWR0aD0iMTAwcHgiXG4gICAgICBjbGFzcz0icnVsZS1mb3JtIj5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuS4k+mimOagh+mimCJcbiAgICAgICAgcHJvcD0ic3BlY2lhbF9uYW1lIj5cbiAgICAgICAgPGVsLWlucHV0IHYtbW9kZWwudHJpbT0icnVsZUZvcm0uc3BlY2lhbF9uYW1lIi8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgIGxhYmVsPSLlm77moIfphY3nva4iXG4gICAgICAgIHByb3A9InNwZWNpYWxfaGVhZF91cmwiPlxuICAgICAgICA8ZWwtdXBsb2FkXG4gICAgICAgICAgOmFjdGlvbj0iZ2V0VXBsb2FkVXJsIlxuICAgICAgICAgIDpoZWFkZXJzPSJ1cGxvYWRIZWFkZXJzIlxuICAgICAgICAgIDpzaG93LWZpbGUtbGlzdD0iZmFsc2UiXG4gICAgICAgICAgOm9uLXN1Y2Nlc3M9ImhhbmRsZVBjQXZhdGFyU3VjY2VzcyJcbiAgICAgICAgICA6YmVmb3JlLXVwbG9hZD0iYmVmb3JlQXZhdGFyVXBsb2FkIlxuICAgICAgICAgIGNsYXNzPSJhdmF0YXItdXBsb2FkZXIiPlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIHYtaWY9InJ1bGVGb3JtLnNwZWNpYWxfaGVhZF91cmwiXG4gICAgICAgICAgICA6c3JjPSJydWxlRm9ybS5zcGVjaWFsX2hlYWRfdXJsIlxuICAgICAgICAgICAgY2xhc3M9ImF2YXRhciI+XG4gICAgICAgICAgPGlcbiAgICAgICAgICAgIHYtZWxzZVxuICAgICAgICAgICAgY2xhc3M9ImVsLWljb24tcGx1cyBhdmF0YXItdXBsb2FkZXItaWNvbiIvPlxuICAgICAgICA8L2VsLXVwbG9hZD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5b2S5bGe6aKR6YGTIlxuICAgICAgICBwcm9wPSJjaGFubmVsQmVsb25nIj5cbiAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgIHYtbW9kZWw9InJ1bGVGb3JtLmNoYW5uZWxpZCJcbiAgICAgICAgICBmaWx0ZXJhYmxlXG4gICAgICAgICAgcGxhY2Vob2xkZXI9IiI+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gbGlzdFVzYWJsZUNoYW5uZWwiXG4gICAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSJcbiAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5pyJ5pWI5pyfIlxuICAgICAgICBjbGFzcz0iaW5kYXRlIlxuICAgICAgICByZXF1aXJlZD5cbiAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgdi1tb2RlbD0icnVsZUZvcm0uaW5kYXRlIlxuICAgICAgICAgIDpjbGVhcmFibGU9ImZhbHNlIlxuICAgICAgICAgIDpkaXNhYmxlZD0iaXNDaG9vc2VEYXRlIlxuICAgICAgICAgIHN0eWxlPSJ3aWR0aDoxMDAlIlxuICAgICAgICAgIHR5cGU9ImRhdGV0aW1lcmFuZ2UiXG4gICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgIHJhbmdlLXNlcGFyYXRvcj0i6IezIlxuICAgICAgICAgIHN0YXJ0LXBsYWNlaG9sZGVyPSLlvIDlp4vml6XmnJ8iXG4gICAgICAgICAgZW5kLXBsYWNlaG9sZGVyPSLnu5PmnZ/ml6XmnJ8iLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5o6S5bqPIlxuICAgICAgICBjbGFzcz0ic29ydCJcbiAgICAgICAgcHJvcD0ic29ydCI+XG4gICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgIHYtbW9kZWwubnVtYmVyPSJydWxlRm9ybS5zb3J0IlxuICAgICAgICAgIHN0eWxlPSJ3aWR0aDogNzUlIi8+XG4gICAgICAgIDxzcGFuPuaPkOekuu+8muaVsOWtl+i2iuWwj+i2iuW+gOWJjTwvc3Bhbj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i54q25oCB6YCJ5oupIj5cbiAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgIHYtbW9kZWw9InJ1bGVGb3JtLnN0YXRlIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fpgInmi6kiPlxuICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgIDp2YWx1ZT0iMSJcbiAgICAgICAgICAgIGxhYmVsPSLlkK/nlKgiLz5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICA6dmFsdWU9IjAiXG4gICAgICAgICAgICBsYWJlbD0i5YGc55SoIi8+XG4gICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtPlxuICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICBAY2xpY2s9InN1Ym1pdEZvcm0oXCdydWxlRm9ybVwnKSI+5o+Q5LqkPC9lbC1idXR0b24+XG4gICAgICAgIDxyb3V0ZXItbGluayB0bz0iL21hbmFnZVRvcGljL2xpc3QiPlxuICAgICAgICAgIDxlbC1idXR0b24+5Y+W5raIPC9lbC1idXR0b24+XG4gICAgICAgIDwvcm91dGVyLWxpbms+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICA8L2VsLWZvcm0+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlXCdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL3RvcGljQXBpXCdcbmltcG9ydCB1cGxvYWRIZWFkZXJzIGZyb20gXCdAL21peGluc1wnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBDaXJjbGVUaXRsZVxuICB9LFxuXG4gIG1peGluczogW3VwbG9hZEhlYWRlcnNdLFxuICBcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJ1bGVGb3JtOiB7XG4gICAgICAgIHNvcnQ6IDAsXG4gICAgICAgIGNoYW5uZWxpZDogXCdcJyxcbiAgICAgICAgc3BlY2lhbF9uYW1lOiBcJ1wnLFxuICAgICAgICBzcGVjaWFsX2hlYWRfdXJsOiBcJ1wnLFxuICAgICAgICBpbmRhdGU6IFtuZXcgRGF0ZSgpLCBuZXcgRGF0ZSgpXSxcbiAgICAgICAgaXN0b3A6IDAsXG4gICAgICAgIHN0YXRlOiAwXG4gICAgICB9LFxuICAgICAgaXNDaG9vc2VEYXRlOiBmYWxzZSxcbiAgICAgIHJ1bGVzOiB7XG4gICAgICAgIHNvcnQ6IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+i+k+WFpeaOkuW6j1wnLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9LFxuICAgICAgICAgIHsgdHlwZTogXCdudW1iZXJcJywgbWVzc2FnZTogXCfmjpLluo/lv4XpobvkuLrmlbDlrZdcJyB9XG4gICAgICAgIF0sXG4gICAgICAgIHNwZWNpYWxfbmFtZTogW1xuICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6IFwn6K+36L6T5YWl5LiT6aKY5ZCN56ewXCcsIHRyaWdnZXI6IFwnYmx1clwnIH0sXG4gICAgICAgICAgeyBtaW46IDAsIG1heDogNjQsIG1lc3NhZ2U6IFwn5qCH6aKY6ZmQ5a6aNjTkuKrlrZfnrKblhoVcJywgdHJpZ2dlcjogXCdjaGFuZ2VcJyB9XG4gICAgICAgIF0sXG4gICAgICAgIHNwZWNpYWxfaGVhZF91cmw6IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+S4iuS8oOWbvueJh1wnLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBsaXN0VXNhYmxlQ2hhbm5lbDogW11cbiAgICB9XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgZ2V0VXBsb2FkVXJsICgpIHtcbiAgICAgIHJldHVybiBBY3Rpb25zLnVwbG9hZFBpY3R1cmUoKVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgdGhpcy5nZXRMaXN0VXNhYmxlQ2hhbm5lbCgpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBzdWJtaXRGb3JtIChmb3JtTmFtZSkge1xuICAgICAgdGhpcy4kcmVmc1tmb3JtTmFtZV0udmFsaWRhdGUoKHZhbGlkKSA9PiB7XG4gICAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICAgIEFjdGlvbnMuYWRkU3BlY2lhbCh7XG4gICAgICAgICAgICBcJ3NwZWNpYWxcJzoge1xuICAgICAgICAgICAgICBcJ3NwZWNpYWxfbmFtZVwnOiB0aGlzLnJ1bGVGb3JtLnNwZWNpYWxfbmFtZSxcbiAgICAgICAgICAgICAgXCdzcGVjaWFsX2hlYWRfdXJsXCc6IHRoaXMucnVsZUZvcm0uc3BlY2lhbF9oZWFkX3VybCxcbiAgICAgICAgICAgICAgXCdjaGFubmVsaWRcJzogdGhpcy5ydWxlRm9ybS5jaGFubmVsaWQsXG4gICAgICAgICAgICAgIFwnc3RhdGVcJzogdGhpcy5ydWxlRm9ybS5zdGF0ZSxcbiAgICAgICAgICAgICAgXCdleHBpcnlfZGF0ZV9zdGFydFwnOiBuZXcgRGF0ZSh0aGlzLnJ1bGVGb3JtLmluZGF0ZVswXSkuZ2V0VGltZSgpLFxuICAgICAgICAgICAgICBcJ2V4cGlyeV9kYXRlX2VuZFwnOiBuZXcgRGF0ZSh0aGlzLnJ1bGVGb3JtLmluZGF0ZVsxXSkuZ2V0VGltZSgpLFxuICAgICAgICAgICAgICBcJ3NvcnRcJzogdGhpcy5ydWxlRm9ybS5zb3J0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6IFwnL21hbmFnZVRvcGljL2xpc3RcJ30pXG4gICAgICAgICAgICAgICAgdGhpcy4kbm90aWZ5KHtcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiBcJ+mAmuefpVwnLFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCfmt7vliqDmiJDlip9cJyxcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCdlcnJvciBzdWJtaXQhIVwnKVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgaGFuZGxlUGNBdmF0YXJTdWNjZXNzIChyZXMsIGZpbGUpIHtcbiAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgIGxldCBpbWFnZVVybCA9IHJlcy5yZXN1bHRcbiAgICAgICAgdGhpcy5ydWxlRm9ybS5zcGVjaWFsX2hlYWRfdXJsID0gaW1hZ2VVcmxcbiAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZUF2YXRhclVwbG9hZCAoZmlsZSkge1xuICAgICAgbGV0IGltYWdlT2JqID0ge1xuICAgICAgICBcJ2ltYWdlL2pwZWdcJzogdHJ1ZSxcbiAgICAgICAgXCdpbWFnZS9wbmdcJzogdHJ1ZSxcbiAgICAgICAgXCdpbWFnZS9qcGdcJzogdHJ1ZVxuICAgICAgfVxuICAgICAgY29uc3QgaXNJbWFnZSA9IGZpbGUudHlwZSBpbiBpbWFnZU9ialxuICAgICAgY29uc3QgaXNMdDJNID0gZmlsZS5zaXplIC8gMTAyNCAvIDEwMjQgPCAyXG4gICAgICBpZiAoIWlzSW1hZ2UpIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihcJ+S4iuS8oOWbvueJh+WPquiDveaYryBKUEcg5qC85byPIVwnKVxuICAgICAgfVxuICAgICAgaWYgKCFpc0x0Mk0pIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihcJ+S4iuS8oOWbvueJh+Wkp+Wwj+S4jeiDvei2hei/hyAyTUIhXCcpXG4gICAgICB9XG4gICAgICByZXR1cm4gaXNJbWFnZSAmJiBpc0x0Mk1cbiAgICB9LFxuICAgIGdldExpc3RVc2FibGVDaGFubmVsICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0TGlzdFVzYWJsZUNoYW5uZWwoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCByZXN1bHQgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICByZXN1bHQuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgIHRoaXMucnVsZUZvcm0uY2hhbm5lbGlkID0gaXRlbS5jaGFubmVsaWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBuZXdJdGVtID0ge31cbiAgICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBpdGVtLmNoYW5uZWxfbmFtZVxuICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uY2hhbm5lbGlkXG4gICAgICAgICAgICB0aGlzLmxpc3RVc2FibGVDaGFubmVsLnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLmNpY2xlLWNvbnRyb2xsZXIge1xuICAgIG1hcmdpbi10b3A6IDQlO1xuICB9XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sbzE5cDpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgiRElVUyIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCI3ZjQ2YTI0MyIsYSwhMSx7fSl9LG8yU1o6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoIlphUXciKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiNzhhZGVlNmEiLGEsITEse30pfSxvMzQ0OmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJsdXcrIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjE4ZTZkZmE0IixhLCExLHt9KX0sb1VWTDpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgiWU54MCIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCIwYjhmZWI1YSIsYSwhMSx7fSl9LG9xN2k6ZnVuY3Rpb24oZSxuKXt9LHAzNjk6ZnVuY3Rpb24oZSxuKXt9LHBDeVA6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoIm52QlYiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiZjQ2MTEzZGUiLGEsITEse30pfSwicGVvLyI6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi5lbC1kaWFsb2dfX2hlYWRlcntcbiAgIHBhZGRpbmc6IDEzcHggMzBweCAxM3B4O1xuICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNDMEJFRkY7XG4gICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjdGQUZGO1xufVxuLmVsLWRpYWxvZ19fdGl0bGUge1xuICAgbGluZS1oZWlnaHQ6IDE3cHg7XG4gICBmb250LXNpemU6IDE3cHg7XG4gICBjb2xvcjogIzMwMzEzMztcbn1cbi5lbC1kaWFsb2dfX2hlYWRlcmJ0biB7XG4gICB0b3A6IDEzcHg7XG59XG4uZWwtZGlhbG9nX19ib2R5IHtcbiAgIHBhZGRpbmc6IDIwcHggNjBweDtcbn1cbi5hZGRVcmwgLmVsLWZvcm0taXRlbSB7XG4gICBtYXJnaW4tbGVmdDogMHB4O1xuICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbn1cbi5hZGRVcmwgLmVsLWZvcm0ge1xuICAgbWFyZ2luLXRvcDogMTVweDtcbn1cbi5hZGRVcmwgLmVsLWRhdGUtZWRpdG9ye1xuICAgd2lkdGg6IDg1JTtcbn1cbi5hZGRVcmwgLmVsLWZvcm0taXRlbSB7XG4gICB3aWR0aDogMzAlO1xuICAgbWFyZ2luLXJpZ2h0OiAzJTtcbn1cbi5hZGRVcmwgLmRhdGUtbGVmdCB7XG4gICBsZWZ0OiAwcHg7XG59XG4uYWRkVXJsIC5lbC1yYW5nZS1lZGl0b3IgLmVsLXJhbmdlLWlucHV0e1xuICAgd2lkdGg6NTAlO1xufVxuLmFkZFVybCAuYnRuLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgIHdpZHRoOiAxMDAlO1xufVxuLmVsLXRvb2x0aXBfX3BvcHBlcntcbiAgIG1heC13aWR0aDogMzAwcHg7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZVNsaWRlL3NyYy9jb21wb25lbnRzL21hbmFnZVNsaWRlL2FkZE1hbnVzY3JpcHQudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQWlhQTtHQUNBLHdCQUFBO0dBQ0EsaUNBQUE7R0FDQSwwQkFBQTtDQUNBO0FBQ0E7R0FDQSxrQkFBQTtHQUNBLGdCQUFBO0dBQ0EsZUFBQTtDQUNBO0FBQ0E7R0FDQSxVQUFBO0NBQ0E7QUFDQTtHQUNBLG1CQUFBO0NBQ0E7QUFDQTtHQUNBLGlCQUFBO0dBQ0Esb0JBQUE7Q0FDQTtBQUNBO0dBQ0EsaUJBQUE7Q0FDQTtBQUNBO0dBQ0EsV0FBQTtDQUNBO0FBQ0E7R0FDQSxXQUFBO0dBQ0EsaUJBQUE7Q0FDQTtBQUNBO0dBQ0EsVUFBQTtDQUNBO0FBQ0E7R0FDQSxVQUFBO0NBQ0E7QUFDQTtHQUNBLFlBQUE7Q0FDQTtBQUNBO0dBQ0EsaUJBQUE7Q0FDQSIsZmlsZToiYWRkTWFudXNjcmlwdC52dWUiLHNvdXJjZXNDb250ZW50OlsnPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSJhZGRVcmwiPlxuICAgIDxlbC1mb3JtXG4gICAgICA6aW5saW5lPSJ0cnVlIlxuICAgICAgOm1vZGVsPSJtYW51U2NyaXB0IlxuICAgICAgc2l6ZT0ic21hbGwiXG4gICAgICBjbGFzcz0iZGVtby1mb3JtLWlubGluZSI+XG4gICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLnqL/ku7bkuLvpopgiPlxuICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICB2LW1vZGVsPSJtYW51U2NyaXB0LnRpdGxlIlxuICAgICAgICAgIGNsZWFyYWJsZS8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuW9kuWxnumikemBkyI+XG4gICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICB2LW1vZGVsPSJtYW51U2NyaXB0LmNoYW5uZWxpZCJcbiAgICAgICAgICBmaWx0ZXJhYmxlXG4gICAgICAgICAgY2xlYXJhYmxlXG4gICAgICAgICAgcGxhY2Vob2xkZXI9IiJcbiAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hNYW51U2NyaXB0IlxuICAgICAgICAgIEBjbGVhcj0ic2VhcmNoTWFudVNjcmlwdCI+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gY2hhbm5lbFR5cGVMaXN0IlxuICAgICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgICA6dmFsdWU9Iml0ZW0udmFsdWUiXG4gICAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiLz5cbiAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuW9kuWxnuS4k+mimCI+XG4gICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICB2LW1vZGVsPSJtYW51U2NyaXB0LnNwZWNpYWxpZCJcbiAgICAgICAgICBmaWx0ZXJhYmxlXG4gICAgICAgICAgY2xlYXJhYmxlXG4gICAgICAgICAgcGxhY2Vob2xkZXI9IiJcbiAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hNYW51U2NyaXB0IlxuICAgICAgICAgIEBjbGVhcj0ic2VhcmNoTWFudVNjcmlwdCI+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gc3BlY2lhbExpc3QiXG4gICAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSJcbiAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5byA5aeL5pe26Ze0IlxuICAgICAgICBjbGFzcz0iZGF0ZS1sZWZ0Ij5cbiAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgOnRpdGxlPSJtYW51U2NyaXB0LnN0YXJ0RGF0ZSB8IEZvcm1hdERhdGUoXCd5eXl5LU1NLWRkIGhoOm1tXCcpIlxuICAgICAgICAgIHYtbW9kZWw9Im1hbnVTY3JpcHQuc3RhcnREYXRlIlxuICAgICAgICAgIHR5cGU9ImRhdGV0aW1lIlxuICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pe26Ze0IlxuICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaE1hbnVTY3JpcHQiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i57uT5p2f5pe26Ze0IlxuICAgICAgICBjbGFzcz0iZGF0ZS1sZWZ0Ij5cbiAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgOnRpdGxlPSJtYW51U2NyaXB0LmVuZERhdGUgfCBGb3JtYXREYXRlKFwneXl5eS1NTS1kZCBoaDptbVwnKSJcbiAgICAgICAgICB2LW1vZGVsPSJtYW51U2NyaXB0LmVuZERhdGUiXG4gICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPSLpgInmi6nml7bpl7QiXG4gICAgICAgICAgQGNoYW5nZT0ic2VhcmNoTWFudVNjcmlwdCIvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtIGNsYXNzPSJidG4tY29udGFpbmVyIj5cbiAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgQGNsaWNrPSJzZWFyY2hNYW51U2NyaXB0Ij5cbiAgICAgICAgICDmn6Xor6JcbiAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgPC9lbC1idXR0b24+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICA8L2VsLWZvcm0+XG4gICAgPGRpdiBjbGFzcz0idGFibGUtbGlzdCI+XG4gICAgICA8ZWwtdGFibGVcbiAgICAgICAgcmVmPSJhZGRNYW51IlxuICAgICAgICA6ZGF0YT0idGFibGVEYXRhIlxuICAgICAgICBzdHJpcGVcbiAgICAgICAgc2l6ZT0ic21hbGwgIlxuICAgICAgICBjbGFzcz0id2hvbGUtdGFibGUiXG4gICAgICAgIG1pbi1oZWlnaHQ9IjQwMCJcbiAgICAgICAgQHNlbGVjdD0ic2VsZWN0IlxuICAgICAgICBAc2VsZWN0LWFsbD0ic2VsZWN0QWxsIj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIHR5cGU9InNlbGVjdGlvbiJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIHdpZHRoPSI1NSIvPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gdGFibGVIZWFkZXIiXG4gICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgOnByb3A9Iml0ZW0ucHJvcCJcbiAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiXG4gICAgICAgICAgOndpZHRoPSJpdGVtLndpZHRoIlxuICAgICAgICAgIDpmb3JtYXR0ZXI9Iml0ZW0uZm9ybWF0dGVyIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgZml4ZWRcbiAgICAgICAgICBzaG93LW92ZXJmbG93LXRvb2x0aXBcbiAgICAgICAgLz5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGxhYmVsPSLlvZLlsZ7popHpgZMiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciI+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj5cbiAgICAgICAgICAgIDxlbC10YWdcbiAgICAgICAgICAgICAgdi1pZj0ic2hvd051bGxUYWcoc2NvcGUucm93LmFydGljbGVDaGFubmVsTGlzdCkiXG4gICAgICAgICAgICAgIHNpemU9Im1pbmkiPuaXoDwvZWwtdGFnPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgOmNvbnRlbnQ9InNob3dDaGFubmVsQWxsTmFtZShzY29wZS5yb3cuYXJ0aWNsZUNoYW5uZWxMaXN0KSJcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3Atc3RhcnQiPlxuICAgICAgICAgICAgICA8ZWwtdGFnXG4gICAgICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gc2NvcGUucm93LmFydGljbGVDaGFubmVsTGlzdCJcbiAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICAgICAgICBzaXplPSJtaW5pIj5cbiAgICAgICAgICAgICAgICB7eyBjaGFubmVsVGFnQ29udGVudChpdGVtKSB9fVxuICAgICAgICAgICAgICA8L2VsLXRhZz5cbiAgICAgICAgICAgIDwvZWwtdG9vbHRpcD5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGxhYmVsPSLlvZLlsZ7kuJPpopgiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciI+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj5cbiAgICAgICAgICAgIDxlbC10YWdcbiAgICAgICAgICAgICAgdi1pZj0ic2hvd051bGxUYWcoc2NvcGUucm93LmFydGljbGVTcGVjaWFsTGlzdCkiXG4gICAgICAgICAgICAgIHNpemU9Im1pbmkiPuaXoDwvZWwtdGFnPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgOnZpc2libGUtYXJyb3c9ImZhbHNlIlxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcC1zdGFydCI+XG4gICAgICAgICAgICAgIDxkaXYgc2xvdD0iY29udGVudCI+e3sgc2hvd1NwZWNpYWxBbGxOYW1lKHNjb3BlLnJvdy5hcnRpY2xlU3BlY2lhbExpc3QpIH19PC9kaXY+XG4gICAgICAgICAgICAgIDxlbC10YWdcbiAgICAgICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBzY29wZS5yb3cuYXJ0aWNsZVNwZWNpYWxMaXN0IlxuICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgICAgICAgIHNpemU9Im1pbmkiPlxuICAgICAgICAgICAgICAgIHt7IHNwZWNpYWxUYWdDb250ZW50KGl0ZW0pIH19XG4gICAgICAgICAgICAgIDwvZWwtdGFnPlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgbGFiZWw9Iue9rumhtueKtuaAgSJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIj5cbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPGVsLXRhZ1xuICAgICAgICAgICAgICB2LWlmPSIhc2NvcGUucm93LnRvcCJcbiAgICAgICAgICAgICAgc2l6ZT0ibWluaSJcbiAgICAgICAgICAgICAgY2xhc3M9InNldFBvaW50ZXIiPlxuICAgICAgICAgICAgICDmnKrnva7pobZcbiAgICAgICAgICAgIDwvZWwtdGFnPlxuICAgICAgICAgICAgPGVsLXRhZ1xuICAgICAgICAgICAgICB2LWVsc2VcbiAgICAgICAgICAgICAgc2l6ZT0ibWluaSJcbiAgICAgICAgICAgICAgY2xhc3M9InNldFBvaW50ZXIiPlxuICAgICAgICAgICAgICDlt7Lnva7pobZcbiAgICAgICAgICAgIDwvZWwtdGFnPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgPC9lbC10YWJsZT5cbiAgICAgIDxkaXYgY2xhc3M9InBhZ2luYXRpb24iPlxuICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICBzaXplPSJzbWFsbCJcbiAgICAgICAgICBAY2xpY2s9Im5vdGlmeVBhcmVudFNlbGVjdGVkUm93Ij7noa7lrpo8L2VsLWJ1dHRvbj5cbiAgICAgICAgPGVsLXBhZ2luYXRpb25cbiAgICAgICAgICA6dG90YWw9InRvdGFsIlxuICAgICAgICAgIDpwYWdlLXNpemVzPSJbMTAsIDIwLCAzMCwgNDBdIlxuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICBsYXlvdXQ9InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPSJoYW5kbGVTaXplQ2hhbmdlIlxuICAgICAgICAgIEBjdXJyZW50LWNoYW5nZT0iaGFuZGxlQ3VycmVudENoYW5nZSIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9tYW51U2NyaXB0QXBpXCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogXCdBZGRNYW51c2NyaXB0XCcsXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtYW51U2NyaXB0OiB7XG4gICAgICAgIGNoYW5uZWxfbmFtZTogXCdcJyxcbiAgICAgICAgc3RhdGU6IFwnXCcsXG4gICAgICAgIHNvcnQ6IFwnMVwnLFxuICAgICAgICBzdGFydERhdGU6IFwnXCcsXG4gICAgICAgIGVuZERhdGU6IFwnXCcsXG4gICAgICAgIGNoYW5uZWxpZDogXCdcJyxcbiAgICAgICAgdGl0bGU6IFwnXCcsXG4gICAgICAgIHNwZWNpYWxpZDogXCdcJ1xuICAgICAgfSxcbiAgICAgIGNsaWNrQ2VsbEluZGV4OiAtMSxcbiAgICAgIHRhYmxlSGVhZGVyOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3RpdGxlXCcsXG4gICAgICAgICAgbGFiZWw6IFwn56i/5Lu25Li76aKYXCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnY3JlYXRldGltZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+aOqOmAgeaXpeacn1wnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnRm9ybWF0RGF0ZVwnXShjZWxsVmFsdWUsIFwneXl5eS1NTS1kZCBoaDptbVwnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnYXJ0aWNsZV91cmxcJyxcbiAgICAgICAgICBsYWJlbDogXCfnqL/ku7blhoXlrrlcJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxhIGhyZWY9e2NlbGxWYWx1ZX0gdGFyZ2V0PVwnX2JsYW5rXCc+5p+l55yL56i/5Lu25YaF5a65PC9hPlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGNoYW5uZWxUeXBlTGlzdDogW10sIC8vIOaJgOWxnumikemBk+WIl+ihqFxuICAgICAgc3BlY2lhbExpc3Q6IFtdLFxuICAgICAgdGFibGVEYXRhOiBbXSxcbiAgICAgIHBhZ2VObzogMSxcbiAgICAgIHBhZ2VTaXplOiAxMCxcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgc2VsZWN0Um93OiB7fSAvLyDlt7LpgInmi6nnmoTooYxcbiAgICB9XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgc2hvd051bGxUYWcgKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgaWYgKCFhcnIpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGVsc2UgaWYgKGFyci5sZW5ndGggPD0gMCkge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNoYW5uZWxUYWdDb250ZW50ICgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgIGlmIChjb250ZW50LmNoYW5uZWxfbmFtZSA9PT0gXCdcJykge1xuICAgICAgICAgICAgcmV0dXJuIFwn5pegXCdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQuY2hhbm5lbF9uYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcJ+aXoFwnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNwZWNpYWxUYWdDb250ZW50ICgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgIGlmIChjb250ZW50LnNwZWNpYWxfbmFtZSA9PT0gXCdcJykge1xuICAgICAgICAgICAgcmV0dXJuIFwn5pegXCdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQuc3BlY2lhbF9uYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcJ+aXoFwnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNob3dDaGFubmVsQWxsTmFtZSAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFycikge1xuICAgICAgICBsZXQgdGl0bGUgPSBcJ1wnXG4gICAgICAgIGFyci5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgaWYgKGluZGV4ICE9PSBhcnIubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgdGl0bGUgKz0gaXRlbS5jaGFubmVsX25hbWUgKyBcJyxcJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aXRsZSArPSBpdGVtLmNoYW5uZWxfbmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHRpdGxlXG4gICAgICB9XG4gICAgfSxcbiAgICBzaG93U3BlY2lhbEFsbE5hbWUgKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgbGV0IHRpdGxlID0gXCdcJ1xuICAgICAgICBhcnIuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICAgIGlmIChpbmRleCAhPT0gYXJyLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHRpdGxlICs9IFwn44CKXCcgKyBpdGVtLnNwZWNpYWxfbmFtZSArIFwn44CLXCcgKyBcJ1wnXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpdGxlICs9IFwn44CKXCcgKyBpdGVtLnNwZWNpYWxfbmFtZSArIFwn44CLXCdcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiB0aXRsZVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBcJ21hbnVTY3JpcHQudGl0bGVcJyAoKSB7XG4gICAgICB0aGlzLnNlYXJjaE1hbnVTY3JpcHQoKVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgdGhpcy5nZXRNdW51U2NyaXB0TGlzdCgpXG4gICAgdGhpcy5nZXRMaXN0VXNhYmxlQ2hhbm5lbCgpXG4gICAgdGhpcy5nZXRMaXN0VXNhYmxlU3BlY2lhbCgpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKiog6I635Y+W56i/5Lu25YiX6KGoICoqL1xuICAgIGdldE11bnVTY3JpcHRMaXN0ICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0TWFudVNjcmlwdExpc3Qoe1xuICAgICAgICBcJ3BhZ2VOb1wnOiB0aGlzLnBhZ2VObyxcbiAgICAgICAgXCdwYWdlU2l6ZVwnOiB0aGlzLnBhZ2VTaXplLFxuICAgICAgICBcJ3N0YXRlXCc6IDFcbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICB0aGlzLnRhYmxlRGF0YSA9IGRhdGEubGlzdFxuICAgICAgICAgIHRoaXMudG90YWwgPSBkYXRhLnRvdGFsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog6I635Y+W6aKR6YGT57G75YirICoqL1xuICAgIGdldExpc3RVc2FibGVDaGFubmVsICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0TGlzdFVzYWJsZUNoYW5uZWwoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YVxuICAgICAgICBpZiAoZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gZGF0YS5yZXN1bHRcbiAgICAgICAgICByZXN1bHQuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICAgICAgbGV0IG5ld0l0ZW0gPSB7fVxuICAgICAgICAgICAgbmV3SXRlbS5sYWJlbCA9IGl0ZW0uY2hhbm5lbF9uYW1lXG4gICAgICAgICAgICBuZXdJdGVtLnZhbHVlID0gaXRlbS5jaGFubmVsaWRcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbFR5cGVMaXN0LnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOiOt+WPluS4k+mimOWIl+ihqCAqKi9cbiAgICBnZXRMaXN0VXNhYmxlU3BlY2lhbCAoKSB7XG4gICAgICBBY3Rpb25zLmdldExpc3RVc2FibGVTcGVjaWFsKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGFcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGxldCBuZXdJdGVtID0ge31cbiAgICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBpdGVtLnNwZWNpYWxfbmFtZVxuICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uc3BlY2lhbGlkXG4gICAgICAgICAgICB0aGlzLnNwZWNpYWxMaXN0LnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOaQnOe0oueov+S7tiAqKi9cbiAgICBzZWFyY2hNYW51U2NyaXB0ICgpIHtcbiAgICAgIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ3N3YXBUaW1lXCddKHRoaXMubWFudVNjcmlwdClcbiAgICAgIGxldCB0aW1lU3RhcnQgPSB0aGlzLm1hbnVTY3JpcHQuc3RhcnREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5tYW51U2NyaXB0LnN0YXJ0RGF0ZSkuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgbGV0IHRpbWVFbmQgPSB0aGlzLm1hbnVTY3JpcHQuZW5kRGF0ZSAhPT0gbnVsbCA/IG5ldyBEYXRlKHRoaXMubWFudVNjcmlwdC5lbmREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBBY3Rpb25zLmdldE1hbnVTY3JpcHRMaXN0KHtcbiAgICAgICAgXCdwYWdlTm9cJzogdGhpcy5wYWdlTm8sXG4gICAgICAgIFwncGFnZVNpemVcJzogdGhpcy5wYWdlU2l6ZSxcbiAgICAgICAgXCdjaGFubmVsaWRcJzogdGhpcy5tYW51U2NyaXB0LmNoYW5uZWxpZCxcbiAgICAgICAgXCdzcGVjaWFsaWRcJzogdGhpcy5tYW51U2NyaXB0LnNwZWNpYWxpZCxcbiAgICAgICAgXCd0aXRsZVwnOiB0aGlzLm1hbnVTY3JpcHQudGl0bGUsXG4gICAgICAgIFwnc3RhdGVcJzogMSxcbiAgICAgICAgXCd0aW1lU3RhcnRcJzogdGltZVN0YXJ0LFxuICAgICAgICBcJ3RpbWVFbmRcJzogdGltZUVuZFxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gZGF0YS5saXN0XG4gICAgICAgICAgdGhpcy50b3RhbCA9IGRhdGEudG90YWxcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIG9uU3VibWl0ICgpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwnc3VibWl0IVwnKVxuICAgIH0sXG4gICAgaGFuZGxlU2l6ZUNoYW5nZSAocGFnZVNpemUpIHtcbiAgICAgIHRoaXMucGFnZVNpemUgPSBwYWdlU2l6ZVxuICAgICAgdGhpcy5zZWFyY2hNYW51U2NyaXB0KClcbiAgICB9LFxuICAgIGhhbmRsZUN1cnJlbnRDaGFuZ2UgKHBhZ2VJbmRleCkge1xuICAgICAgdGhpcy5wYWdlTm8gPSBwYWdlSW5kZXhcbiAgICAgIHRoaXMuc2VhcmNoTWFudVNjcmlwdCgpXG4gICAgfSxcbiAgICAvKiog5Y2V6YCJICoqL1xuICAgIHNlbGVjdCAoc2VsZWN0aW9uLCByb3cpIHtcbiAgICAgIHRoaXMuc2VsZWN0Um93ID0gcm93XG4gICAgICBpZiAoc2VsZWN0aW9uLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgc2VsZWN0aW9uLnNoaWZ0KClcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDlhajpgIkgKiovXG4gICAgc2VsZWN0QWxsIChzZWxlY3Rpb24pIHtcbiAgICAgIHRoaXMuJHJlZnMuYWRkTWFudS5jbGVhclNlbGVjdGlvbigpXG4gICAgICB0aGlzLnNlbGVjdFJvdyA9IHt9XG4gICAgfSxcbiAgICAvKiog6YCa55+l54i257uE5Lu26YCJ5oup5LqG5ZOq6KGM5LiT6aKYICoqL1xuICAgIG5vdGlmeVBhcmVudFNlbGVjdGVkUm93ICgpIHtcbiAgICAgIHRoaXMuJGVtaXQoXCdzZWxlY3RlZC1yb3dcJywgdGhpcy5zZWxlY3RSb3cpXG4gICAgfVxuICB9XG59XG48XC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuICAudGFibGUtbGlzdCB7XG4gICAgbWluLWhlaWdodDogNDAwcHg7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBwYWRkaW5nOiAwcHg7XG4gIH1cbiAgLndob2xlLXRhYmxlIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDIxOCwgMjIyLCAyMjMsIDEpO1xuICAgIG1pbi1oZWlnaHQ6IDI1dnc7XG4gIH1cbiAgLnBhZ2luYXRpb24ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gIH1cbiAgLmFkZFVybCAuYnRuLWNvbnRhaW5lciB7XG4gICAgd2lkdGg6IDIzJSAhaW1wb3J0YW50O1xuICAgIGxlZnQ6IDBweDtcbiAgfVxuXG48L3N0eWxlPlxuPHN0eWxlPlxuICAuZWwtZGlhbG9nX19oZWFkZXJ7XG4gICAgcGFkZGluZzogMTNweCAzMHB4IDEzcHg7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNDMEJFRkY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0Y3RkFGRjtcbiAgfVxuICAuZWwtZGlhbG9nX190aXRsZSB7XG4gICAgbGluZS1oZWlnaHQ6IDE3cHg7XG4gICAgZm9udC1zaXplOiAxN3B4O1xuICAgIGNvbG9yOiAjMzAzMTMzO1xuICB9XG4gIC5lbC1kaWFsb2dfX2hlYWRlcmJ0biB7XG4gICAgdG9wOiAxM3B4O1xuICB9XG4gIC5lbC1kaWFsb2dfX2JvZHkge1xuICAgIHBhZGRpbmc6IDIwcHggNjBweDtcbiAgfVxuICAuYWRkVXJsIC5lbC1mb3JtLWl0ZW0ge1xuICAgIG1hcmdpbi1sZWZ0OiAwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgfVxuICAuYWRkVXJsIC5lbC1mb3JtIHtcbiAgICBtYXJnaW4tdG9wOiAxNXB4O1xuICB9XG4gIC5hZGRVcmwgLmVsLWRhdGUtZWRpdG9ye1xuICAgIHdpZHRoOiA4NSU7XG4gIH1cbiAgLmFkZFVybCAuZWwtZm9ybS1pdGVtIHtcbiAgICB3aWR0aDogMzAlO1xuICAgIG1hcmdpbi1yaWdodDogMyU7XG4gIH1cbiAgLmFkZFVybCAuZGF0ZS1sZWZ0IHtcbiAgICBsZWZ0OiAwcHg7XG4gIH1cbiAgLmFkZFVybCAuZWwtcmFuZ2UtZWRpdG9yIC5lbC1yYW5nZS1pbnB1dHtcbiAgICB3aWR0aDo1MCU7XG4gIH1cbiAgLmFkZFVybCAuYnRuLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuIC5lbC10b29sdGlwX19wb3BwZXJ7XG4gICAgbWF4LXdpZHRoOiAzMDBweDtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LHBmUUk6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoIm0rL0wiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiNWYyMGFmZWMiLGEsITEse30pfSxwdDUyOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uc2VhcmNoLWZvcm0tY29udGFpbmVyIC5idG4tY29udGFpbmVyIC5lbC1idXR0b257XG4gICAgcGFkZGluZzogMTJweCAxMHB4O1xufVxuLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuYnRuLWNvbnRhaW5lciAuZWwtaWNvbi0tcmlnaHR7XG4gICAgbWFyZ2luOiAwO1xufVxuLmN1c3RvbS1kaWFsb2cgLmVsLWRpYWxvZ19faGVhZGVye1xuICAvKnBhZGRpbmc6IDA7Ki9cbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMTkyLDE5MCwyNTUsMSk7XG59XG4uZWwtdG9vbHRpcF9fcG9wcGVye1xuICAgIG1heC13aWR0aDogMzAwcHg7XG59XG4ubWFudXNjcmlwdCAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICAgIHdpZHRoOiA2MCU7XG59XG4ubWFudXNjcmlwdCAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAyMCU7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZU1hbnVzY3JpcHQvc3JjL2NvbXBvbmVudHMvbWFuYWdlTWFudXNjcmlwdC9tYW5hZ2VNYW51c2NyaXB0TGlzdC52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBbzRCQTtJQUNBLG1CQUFBO0NBQ0E7QUFDQTtJQUNBLFVBQUE7Q0FDQTtBQUNBO0VBQ0EsZUFBQTtFQUNBLDZDQUFBO0NBQ0E7QUFDQTtJQUNBLGlCQUFBO0NBQ0E7QUFDQTtJQUNBLFdBQUE7Q0FDQTtBQUNBO0lBQ0EsV0FBQTtDQUNBIixmaWxlOiJtYW5hZ2VNYW51c2NyaXB0TGlzdC52dWUiLHNvdXJjZXNDb250ZW50OlsnPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSJtYW51c2NyaXB0Ij5cbiAgICA8ZGl2PlxuICAgICAgPGNpcmNsZS10aXRsZVxuICAgICAgICB0aXRsZS1uYW1lPSLnqL/ku7bnrqHnkIYiXG4gICAgICAgIGNsYXNzPSJjaWNsZS1jb250cm9sbGVyIlxuICAgICAgLz5cbiAgICAgIDxkaXYgY2xhc3M9InNlYXJjaC1mb3JtLWNvbnRhaW5lciI+XG4gICAgICAgIDxlbC1mb3JtXG4gICAgICAgICAgOmlubGluZT0idHJ1ZSJcbiAgICAgICAgICA6bW9kZWw9Im1hbnVTY3JpcHQiXG4gICAgICAgICAgY2xhc3M9ImRlbW8tZm9ybS1pbmxpbmUiPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9Iueov+S7tuS4u+mimCI+XG4gICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgdi1tb2RlbD0ibWFudVNjcmlwdC50aXRsZSJcbiAgICAgICAgICAgICAgY2xlYXJhYmxlLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i5b2S5bGe6aKR6YGTIlxuICAgICAgICAgICAgcHJvcD0iY2hhbm5lbGlkIj5cbiAgICAgICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICAgICAgdi1tb2RlbD0ibWFudVNjcmlwdC5jaGFubmVsaWQiXG4gICAgICAgICAgICAgIGZpbHRlcmFibGVcbiAgICAgICAgICAgICAgY2xlYXJhYmxlXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSIiXG4gICAgICAgICAgICAgIEBjbGVhcj0ic2VhcmNoTWFudVNjcmlwdCJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoTWFudVNjcmlwdCI+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBjaGFubmVsVHlwZUxpc3QiXG4gICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgICAgICAgOnZhbHVlPSJpdGVtLnZhbHVlIlxuICAgICAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9IuW9kuWxnuS4k+mimCI+XG4gICAgICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgICAgIHYtbW9kZWw9Im1hbnVTY3JpcHQuc3BlY2lhbGlkIlxuICAgICAgICAgICAgICBmaWx0ZXJhYmxlXG4gICAgICAgICAgICAgIGNsZWFyYWJsZVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgICAgICBAY2xlYXI9InNlYXJjaE1hbnVTY3JpcHQiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaE1hbnVTY3JpcHQiPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gc3BlY2lhbExpc3QiXG4gICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgICAgICAgOnZhbHVlPSJpdGVtLnZhbHVlIlxuICAgICAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9IueKtuaAgSJcbiAgICAgICAgICAgIGNsYXNzPSJzZWFyY2gtbGVmdCI+XG4gICAgICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgICAgIHYtbW9kZWw9Im1hbnVTY3JpcHQuc3RhdGUiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSIiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaE1hbnVTY3JpcHQiPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgdmFsdWU9IiJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5YWo6YOoIi8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9IjAiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuW+heS4iue6vyIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPSIxIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlt7LkuIrnur8iLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMiJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5bey5LiL57q/Ii8+XG4gICAgICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i5byA5aeL5pe26Ze0Ij5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9Im1hbnVTY3JpcHQuc3RhcnREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9Im1hbnVTY3JpcHQuc3RhcnREYXRlIlxuICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pe26Ze0IlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hNYW51U2NyaXB0Ii8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9Iue7k+adn+aXtumXtCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPSJtYW51U2NyaXB0LmVuZERhdGUgfCBGb3JtYXREYXRlKFwneXl5eS1NTS1kZCBoaDptbVwnKSJcbiAgICAgICAgICAgICAgdi1tb2RlbD0ibWFudVNjcmlwdC5lbmREYXRlIlxuICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pe26Ze0IlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hNYW51U2NyaXB0Ii8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogNjhweCJcbiAgICAgICAgICAgIEBjbGljaz0ic2VhcmNoTWFudVNjcmlwdCI+XG4gICAgICAgICAgICDmn6Xor6JcbiAgICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLXNlYXJjaCBlbC1pY29uLS1yaWdodCIvPlxuICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICA8L2VsLWZvcm0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1saXN0Ij5cbiAgICAgIDxlbC10YWJsZVxuICAgICAgICByZWY9ImNoYW5uZWxUYWJsZSJcbiAgICAgICAgOmRhdGE9InRhYmxlRGF0YSJcbiAgICAgICAgc3RyaXBlXG4gICAgICAgIGNsYXNzPSJ3aG9sZS10YWJsZSJcbiAgICAgICAgbWluLWhlaWdodD0iNDAwIlxuICAgICAgICBAc2VsZWN0LWFsbD0ic2VsZWN0QWxsIlxuICAgICAgICBAc2VsZWN0aW9uLWNoYW5nZT0ic2VsZWN0aW9uQ2hhbmdlIj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIHRhYmxlSGVhZGVyIlxuICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgIDpwcm9wPSJpdGVtLnByb3AiXG4gICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIlxuICAgICAgICAgIDp3aWR0aD0iaXRlbS53aWR0aCJcbiAgICAgICAgICA6Zm9ybWF0dGVyPSJpdGVtLmZvcm1hdHRlciJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIGZpeGVkXG4gICAgICAgICAgc2hvdy1vdmVyZmxvdy10b29sdGlwXG4gICAgICAgIC8+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBsYWJlbD0i5b2S5bGe6aKR6YGTIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8ZWwtdGFnXG4gICAgICAgICAgICAgIHYtaWY9InNob3dOdWxsVGFnKHNjb3BlLnJvdy5hcnRpY2xlQ2hhbm5lbExpc3QpIlxuICAgICAgICAgICAgICBzaXplPSJtaW5pIj7ml6A8L2VsLXRhZz5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIDpjb250ZW50PSJzaG93Q2hhbm5lbEFsbE5hbWUoc2NvcGUucm93LmFydGljbGVDaGFubmVsTGlzdCkiXG4gICAgICAgICAgICAgIDprZXk9InNjb3BlLnJvdy5hcnRpY2xlaWQiXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIHBsYWNlbWVudD0idG9wLXN0YXJ0Ij5cbiAgICAgICAgICAgICAgPGVsLXRhZ1xuICAgICAgICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIHNjb3BlLnJvdy5hcnRpY2xlQ2hhbm5lbExpc3QiXG4gICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgICAgICAgc2l6ZT0ibWluaSI+XG4gICAgICAgICAgICAgICAge3sgY2hhbm5lbFRhZ0NvbnRlbnQoaXRlbSkgfX1cbiAgICAgICAgICAgICAgPC9lbC10YWc+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBsYWJlbD0i5b2S5bGe5LiT6aKYIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8ZWwtdGFnXG4gICAgICAgICAgICAgIHYtaWY9InNob3dOdWxsVGFnKHNjb3BlLnJvdy5hcnRpY2xlU3BlY2lhbExpc3QpIlxuICAgICAgICAgICAgICBzaXplPSJtaW5pIj7ml6A8L2VsLXRhZz5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIDpjb250ZW50PSJzaG93U3BlY2lhbEFsbE5hbWUoc2NvcGUucm93LmFydGljbGVTcGVjaWFsTGlzdCkiXG4gICAgICAgICAgICAgIDprZXk9InNjb3BlLnJvdy5hcnRpY2xlaWQiXG4gICAgICAgICAgICAgIDp2aXNpYmxlLWFycm93PSJmYWxzZSJcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3Atc3RhcnQiPlxuICAgICAgICAgICAgICA8ZWwtdGFnXG4gICAgICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gc2NvcGUucm93LmFydGljbGVTcGVjaWFsTGlzdCJcbiAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICAgICAgICBzaXplPSJtaW5pIj5cbiAgICAgICAgICAgICAgICB7eyBzcGVjaWFsVGFnQ29udGVudChpdGVtKSB9fVxuICAgICAgICAgICAgICA8L2VsLXRhZz5cbiAgICAgICAgICAgIDwvZWwtdG9vbHRpcD5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGxhYmVsPSLnva7pobbnirbmgIEiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciI+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIHYtaWY9IiFzY29wZS5yb3cudG9wIlxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBjb250ZW50PSLngrnlh7vnva7pobYiXG4gICAgICAgICAgICAgIHBsYWNlbWVudD0idG9wIj5cbiAgICAgICAgICAgICAgPGVsLXRhZ1xuICAgICAgICAgICAgICAgIHNpemU9Im1pbmkiXG4gICAgICAgICAgICAgICAgY2xhc3M9InNldFBvaW50ZXIiXG4gICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjYwcHg7IlxuICAgICAgICAgICAgICAgIEBjbGljay5uYXRpdmU9InNldE1hbnVVblRvcChzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAgICDnva7pobZcbiAgICAgICAgICAgICAgPC9lbC10YWc+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICB2LWVsc2VcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgY29udGVudD0i54K55Ye75Y+W5raI572u6aG2IlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcCI+XG4gICAgICAgICAgICAgIDxlbC10YWdcbiAgICAgICAgICAgICAgICBzaXplPSJtaW5pIlxuICAgICAgICAgICAgICAgIGNsYXNzPSJzZXRQb2ludGVyIlxuICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDo2MHB4O2NvbG9yOiM2OTRlZmYiXG4gICAgICAgICAgICAgICAgQGNsaWNrLm5hdGl2ZT0ic2V0TWFudVRvcChzY29wZS5yb3cpIj5cbiAgICAgICAgICAgICAgICDlj5bmtojnva7pobZcbiAgICAgICAgICAgICAgPC9lbC10YWc+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBsYWJlbD0i5LiK56i/L+aSpOeovyJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIj5cbiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1hbnUtY29udGFpbmVyIj5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICA6Y2xhc3M9IltcJ21hbnVcJywgc2NvcGUucm93LnN0YXRlICE9PSAxICYmIChzY29wZS5yb3cuYXJ0aWNsZUNoYW5uZWxMaXN0Lmxlbmd0aCA+IDAgfHwgc2NvcGUucm93LmFydGljbGVTcGVjaWFsTGlzdC5sZW5ndGggPiAwKSA/IFwnbWFudS11cC1hY3RpdmVcJzogXCdcJ10iXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJ1cE1hbnUoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg5LiK56i/XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICA6Y2xhc3M9IltcJ21hbnVcJywgc2NvcGUucm93LnN0YXRlID09PSAxID8gXCdtYW51LWJhY2stYWN0aXZlXCc6IFwnXCddIlxuICAgICAgICAgICAgICAgIEBjbGljaz0iZG93bk1hbnUoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg5pKk56i/XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGxhYmVsPSLmk43kvZwiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciI+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYW51LWNvbnRhaW5lciI+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgOmNsYXNzPSJbXCdtYW51XCcsIHNjb3BlLnJvdy5zdGF0ZSAhPT0gMSA/IFwnZGVsZXRlLWFjdGl2ZVwnOiBcJ1wnXSJcbiAgICAgICAgICAgICAgICBAY2xpY2s9InNldHRpbmdNYW51KHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIOmFjee9rlxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgOmNsYXNzPSJbXCdtYW51XCcsIHNjb3BlLnJvdy5zdGF0ZSAhPT0gMSA/IFwnZGVsZXRlLWFjdGl2ZVwnOiBcJ1wnXSJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImRlbGV0ZU1hbnUoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg5Yig6ZmkXG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGZpeGVkPSJyaWdodCJcbiAgICAgICAgICBsYWJlbD0i5p2D6ZmQ6YWN572uIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgd2lkdGg9IjExNSI+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9IuivhOiuuiJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3AiPlxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgOnN0eWxlPSJ7YmFja2dyb3VuZENvbG9yOiBzY29wZS5yb3cuYWxsb3dfY29tbWVudCA/IFwnI2ZmYTUwN1wnOiBcJyNCNUI4RDlcJ30iXG4gICAgICAgICAgICAgICAgY2xhc3M9ImFsbG93X2NvbW1lbnQiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVDb21tZW50KHNjb3BlLnJvdykiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8aVxuICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiB3aGl0ZSJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29uZm9udCBpY29uLW1hbnUtY29tbWVudCIvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZWwtdG9vbHRpcD5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9IuWIhuS6qyJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3AiPlxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgOnN0eWxlPSJ7YmFja2dyb3VuZENvbG9yOiBzY29wZS5yb3cuYWxsb3dfc2hhcmUgPyBcJyMxODgzRkZcJzogXCcjQjVCOEQ5XCd9IlxuICAgICAgICAgICAgICAgIGNsYXNzPSJhbGxvd19zaGFyZSJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImhhbmRsZVNoYXJlKHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIDxpXG4gICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IHdoaXRlIlxuICAgICAgICAgICAgICAgICAgY2xhc3M9Imljb25mb250IGljb24tc2hhcmUiLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBjb250ZW50PSLngrnotZ4iXG4gICAgICAgICAgICAgIHBsYWNlbWVudD0idG9wIj5cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIDpzdHlsZT0ie2JhY2tncm91bmRDb2xvcjogc2NvcGUucm93LmFsbG93X2xpa2UgPyBcJyNGMDA4MDhcJzogXCcjQjVCOEQ5XCd9IlxuICAgICAgICAgICAgICAgIGNsYXNzPSJhbGxvd19saWtlIlxuICAgICAgICAgICAgICAgIEBjbGljaz0iaGFuZGxlUHJhaXNlKHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIDxpXG4gICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IHdoaXRlIlxuICAgICAgICAgICAgICAgICAgY2xhc3M9Imljb25mb250IGljb24tcHJhaXNlIi8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgY29udGVudD0i5pS26JePIlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcCI+XG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICA6c3R5bGU9IntiYWNrZ3JvdW5kQ29sb3I6IHNjb3BlLnJvdy5hbGxvd19jb2xsZWN0ID8gXCcjNjk0RUZGXCc6IFwnI0I1QjhEOVwnfSJcbiAgICAgICAgICAgICAgICBjbGFzcz0iYWxsb3dfY29sbGVjdCJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImhhbmRsZUNvbGxlY3Qoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogd2hpdGUiXG4gICAgICAgICAgICAgICAgICBjbGFzcz0iaWNvbmZvbnQgaWNvbi1jb2xsZWN0Ii8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgPC9lbC10YWJsZT5cbiAgICAgIDxkaXYgY2xhc3M9InBhZ2luYXRpb24iPlxuICAgICAgICA8ZWwtcGFnaW5hdGlvblxuICAgICAgICAgIDp0b3RhbD0idG90YWwiXG4gICAgICAgICAgOnBhZ2Utc2l6ZXM9IlsxMCwgMjAsIDMwLCA0MF0iXG4gICAgICAgICAgYmFja2dyb3VuZFxuICAgICAgICAgIGxheW91dD0idG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dCJcbiAgICAgICAgICBAc2l6ZS1jaGFuZ2U9ImhhbmRsZVNpemVDaGFuZ2UiXG4gICAgICAgICAgQGN1cnJlbnQtY2hhbmdlPSJoYW5kbGVDdXJyZW50Q2hhbmdlIi8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZWwtZGlhbG9nXG4gICAgICA6dmlzaWJsZS5zeW5jPSJkaWFsb2dWaXNpYmxlIlxuICAgICAgY3VzdG9tLWNsYXNzPSJjdXN0b20tZGlhbG9nIlxuICAgICAgdGl0bGU9Iueov+S7tuS/oeaBr+mFjee9riJcbiAgICAgIHdpZHRoPSI1MCUiXG4gICAgICBAY2xvc2U9ImNsb3NlRGlhbG9nIj5cbiAgICAgIDxkaXZcbiAgICAgICAgOmlzPSJjb21wb25lbnROYW1lIlxuICAgICAgICA6c2V0dGluZy1hcnRpY2xlLWlkPSJzZXR0aW5nQXJ0aWNsZUlkIlxuICAgICAgICA6bWFudS10aXRsZT0ibWFudVRpdGxlIi8+XG4gICAgPC9lbC1kaWFsb2c+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlXCdcbmltcG9ydCBTZXR0aW5nTWFudSBmcm9tIFwnLi9zZXR0aW5nTWFudVwnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9tYW51U2NyaXB0QXBpXCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlLFxuICAgIFNldHRpbmdNYW51XG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtYW51U2NyaXB0OiB7XG4gICAgICAgIGNoYW5uZWxfbmFtZTogXCdcJyxcbiAgICAgICAgc3RhdGU6IFwnXCcsXG4gICAgICAgIHNvcnQ6IFwnMVwnLFxuICAgICAgICBzdGFydERhdGU6IFwnXCcsXG4gICAgICAgIGVuZERhdGU6IFwnXCcsXG4gICAgICAgIGNoYW5uZWxpZDogXCdcJyxcbiAgICAgICAgdGl0bGU6IFwnXCcsXG4gICAgICAgIHNwZWNpYWxpZDogXCdcJ1xuICAgICAgfSxcbiAgICAgIGNoYW5uZWxUeXBlTGlzdDogW10sIC8vIOaJgOWxnumikemBk+WIl+ihqFxuICAgICAgc3BlY2lhbExpc3Q6IFtdLFxuICAgICAgY2xpY2tDZWxsSW5kZXg6IC0xLFxuICAgICAgdGFibGVIZWFkZXI6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwndGl0bGVcJyxcbiAgICAgICAgICBsYWJlbDogXCfnqL/ku7bkuLvpophcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdjcmVhdGV0aW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5o6o6YCB5pel5pyfXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCd1cGRhdGV0aW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5pu05paw5pel5pyfXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdhcnRpY2xlX3VybFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+eov+S7tuWGheWuuVwnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gPGEgaHJlZj17Y2VsbFZhbHVlfSB0YXJnZXQ9XCdfYmxhbmtcJz7mn6XnnIvnqL/ku7blhoXlrrk8L2E+XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdzdGF0ZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+eKtuaAgVwnLFxuICAgICAgICAgIHdpZHRoOiBcJzEwMFwnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoY2VsbFZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiBcJ+W+heS4iue6v1wnXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNlbGxWYWx1ZSA9PT0gMSkge1xuICAgICAgICAgICAgICByZXR1cm4gXCflt7LkuIrnur9cJ1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjZWxsVmFsdWUgPT09IDIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwn5bey5LiL57q/XCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICB0YWJsZURhdGE6IFtdLFxuICAgICAgYmF0Y2hQcm9jZXNzOiAxLFxuICAgICAgcHJvY2Vzc0xpc3Q6IFtcbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlOiAxLFxuICAgICAgICAgIGxhYmVsOiBcJ+aJuemHj+WIoOmZpFwnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZTogMixcbiAgICAgICAgICBsYWJlbDogXCflhbbku5ZcJ1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgY29tbWVudDogZmFsc2UsXG4gICAgICBzaGFyZTogZmFsc2UsXG4gICAgICBwcmFpc2U6IGZhbHNlLFxuICAgICAgY29sbGVjdDogZmFsc2UsXG4gICAgICBpbmRleDogLTEsXG4gICAgICBwYWdlTm86IDEsXG4gICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICB0b3RhbDogMCxcbiAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlLFxuICAgICAgY29tcG9uZW50TmFtZTogXCdcJyxcbiAgICAgIGFydGljbGVpZExpc3Q6IFtdLCAvLyDpgInmi6nnmoTnqL/ku7ZpZCxcbiAgICAgIHNlbGZTZWxlY3RBbGw6IGZhbHNlLCAvLyDoh6rlrprkuYnnmoTlhajpgIksXG4gICAgICBzZWxlY3RlZE1hbnVJbmZvOiBbXSwgLy8g5omA6YCJ55qE56i/5Lu255qE6K+m57uG5L+h5oGvXG4gICAgICBzZXR0aW5nQXJ0aWNsZUlkOiBcJzBcJyxcbiAgICAgIG1hbnVUaXRsZTogXCdcJyAvLyDnqL/ku7bkuLvpopgsIOS8oOe7meWtkOe7hOS7tlxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBzaG93TnVsbFRhZyAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFycikge1xuICAgICAgICBpZiAoIWFycikge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gZWxzZSBpZiAoYXJyLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY2hhbm5lbFRhZ0NvbnRlbnQgKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgICAgaWYgKGNvbnRlbnQuY2hhbm5lbF9uYW1lID09PSBcJ1wnKSB7XG4gICAgICAgICAgICByZXR1cm4gXCfml6BcJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGVudC5jaGFubmVsX25hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwn5pegXCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc3BlY2lhbFRhZ0NvbnRlbnQgKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgICAgaWYgKGNvbnRlbnQuc3BlY2lhbF9uYW1lID09PSBcJ1wnKSB7XG4gICAgICAgICAgICByZXR1cm4gXCfml6BcJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGVudC5zcGVjaWFsX25hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwn5pegXCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc2hvd0NoYW5uZWxBbGxOYW1lICgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJyKSB7XG4gICAgICAgIGxldCB0aXRsZSA9IFwnXCdcbiAgICAgICAgYXJyLmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICBpZiAoaW5kZXggIT09IGFyci5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICB0aXRsZSArPSBpdGVtLmNoYW5uZWxfbmFtZSArIFwnLFwnXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpdGxlICs9IGl0ZW0uY2hhbm5lbF9uYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gdGl0bGVcbiAgICAgIH1cbiAgICB9LFxuICAgIHNob3dTcGVjaWFsQWxsTmFtZSAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFycikge1xuICAgICAgICBsZXQgdGl0bGUgPSBcJ1wnXG4gICAgICAgIGFyci5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgaWYgKGluZGV4ICE9PSBhcnIubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgdGl0bGUgKz0gXCfjgIpcJyArIGl0ZW0uc3BlY2lhbF9uYW1lICsgXCfjgItcJyArIFwnXCdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGl0bGUgKz0gXCfjgIpcJyArIGl0ZW0uc3BlY2lhbF9uYW1lICsgXCfjgItcJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHRpdGxlXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIFwnbWFudVNjcmlwdC50aXRsZVwnICgpIHtcbiAgICAgIHRoaXMuc2VhcmNoTWFudVNjcmlwdCgpXG4gICAgfVxuICB9LFxuICBtb3VudGVkICgpIHtcbiAgICB0aGlzLmdldE11bnVTY3JpcHRMaXN0KClcbiAgICB0aGlzLmdldExpc3RVc2FibGVDaGFubmVsKClcbiAgICB0aGlzLmdldExpc3RVc2FibGVTcGVjaWFsKClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIC8qKiDojrflj5bnqL/ku7bliJfooaggKiovXG4gICAgZ2V0TXVudVNjcmlwdExpc3QgKCkge1xuICAgICAgQWN0aW9ucy5nZXRNYW51U2NyaXB0TGlzdCh7XG4gICAgICAgIFwncGFnZU5vXCc6IHRoaXMucGFnZU5vLFxuICAgICAgICBcJ3BhZ2VTaXplXCc6IHRoaXMucGFnZVNpemVcbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICB0aGlzLnRhYmxlRGF0YSA9IGRhdGEubGlzdFxuICAgICAgICAgIHRoaXMudG90YWwgPSBkYXRhLnRvdGFsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog6I635Y+W6aKR6YGT57G75YirICoqL1xuICAgIGdldExpc3RVc2FibGVDaGFubmVsICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0TGlzdFVzYWJsZUNoYW5uZWwoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YVxuICAgICAgICBpZiAoZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gZGF0YS5yZXN1bHRcbiAgICAgICAgICByZXN1bHQuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICAgICAgbGV0IG5ld0l0ZW0gPSB7fVxuICAgICAgICAgICAgbmV3SXRlbS5sYWJlbCA9IGl0ZW0uY2hhbm5lbF9uYW1lXG4gICAgICAgICAgICBuZXdJdGVtLnZhbHVlID0gaXRlbS5jaGFubmVsaWRcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbFR5cGVMaXN0LnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOiOt+WPluS4k+mimOWIl+ihqCAqKi9cbiAgICBnZXRMaXN0VXNhYmxlU3BlY2lhbCAoKSB7XG4gICAgICBBY3Rpb25zLmdldExpc3RVc2FibGVTcGVjaWFsKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGFcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGxldCBuZXdJdGVtID0ge31cbiAgICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBpdGVtLnNwZWNpYWxfbmFtZVxuICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uc3BlY2lhbGlkXG4gICAgICAgICAgICB0aGlzLnNwZWNpYWxMaXN0LnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgb25TdWJtaXQgKCkge1xuICAgICAgY29uc29sZS5sb2coXCdzdWJtaXQhXCcpXG4gICAgfSxcbiAgICBoYW5kbGVTaXplQ2hhbmdlIChwYWdlU2l6ZSkge1xuICAgICAgdGhpcy5wYWdlU2l6ZSA9IHBhZ2VTaXplXG4gICAgICB0aGlzLnNlYXJjaE1hbnVTY3JpcHQoKVxuICAgIH0sXG4gICAgaGFuZGxlQ3VycmVudENoYW5nZSAocGFnZUluZGV4KSB7XG4gICAgICB0aGlzLnBhZ2VObyA9IHBhZ2VJbmRleFxuICAgICAgdGhpcy5zZWFyY2hNYW51U2NyaXB0KClcbiAgICB9LFxuICAgIC8qKiDojrflj5blhajpgInnmoTmlbDmja4gKiovXG4gICAgc2VsZWN0QWxsIChlKSB7XG4gICAgICBpZiAoZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuc2VsZlNlbGVjdEFsbCA9IHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2VsZlNlbGVjdEFsbCA9IGZhbHNlXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog6K+E6K665p2D6ZmQICoqL1xuICAgIGhhbmRsZUNvbW1lbnQgKHJvdykge1xuICAgICAgaWYgKHJvdy5zdGF0ZSAhPT0gMSkge1xuICAgICAgICBpZiAocm93LmFsbG93X2NvbW1lbnQpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZU1hbnUocm93LmFydGljbGVpZCwgXCdhbGxvd19jb21tZW50XCcsIGZhbHNlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudXBkYXRlTWFudShyb3cuYXJ0aWNsZWlkLCBcJ2FsbG93X2NvbW1lbnRcJywgdHJ1ZSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn5bey5LiK57q/56i/5Lu25LiN5Y+v5pON5L2c6K+E6K665p2D6ZmQIVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog5YiG5Lqr5p2D6ZmQICoqL1xuICAgIGhhbmRsZVNoYXJlIChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgaWYgKHJvdy5hbGxvd19zaGFyZSkge1xuICAgICAgICAgIHRoaXMudXBkYXRlTWFudShyb3cuYXJ0aWNsZWlkLCBcJ2FsbG93X3NoYXJlXCcsIGZhbHNlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudXBkYXRlTWFudShyb3cuYXJ0aWNsZWlkLCBcJ2FsbG93X3NoYXJlXCcsIHRydWUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+W3suS4iue6v+eov+S7tuS4jeWPr+aTjeS9nOWIhuS6q+adg+mZkCFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOeCuei1nuadg+mZkCAqKi9cbiAgICBoYW5kbGVQcmFpc2UgKHJvdykge1xuICAgICAgaWYgKHJvdy5zdGF0ZSAhPT0gMSkge1xuICAgICAgICBpZiAocm93LmFsbG93X2xpa2UpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZU1hbnUocm93LmFydGljbGVpZCwgXCdhbGxvd19saWtlXCcsIGZhbHNlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudXBkYXRlTWFudShyb3cuYXJ0aWNsZWlkLCBcJ2FsbG93X2xpa2VcJywgdHJ1ZSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn5bey5LiK57q/56i/5Lu25LiN5Y+v5pON5L2c54K56LWe5p2D6ZmQIVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog5pS26JeP5p2D6ZmQICoqL1xuICAgIGhhbmRsZUNvbGxlY3QgKHJvdykge1xuICAgICAgaWYgKHJvdy5zdGF0ZSAhPT0gMSkge1xuICAgICAgICBpZiAocm93LmFsbG93X2NvbGxlY3QpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZU1hbnUocm93LmFydGljbGVpZCwgXCdhbGxvd19jb2xsZWN0XCcsIGZhbHNlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudXBkYXRlTWFudShyb3cuYXJ0aWNsZWlkLCBcJ2FsbG93X2NvbGxlY3RcJywgdHJ1ZSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn5bey5LiK57q/56i/5Lu25LiN5Y+v5pON5L2c5pS26JeP5p2D6ZmQIVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog5Y+W5raI572u6aG2ICoqL1xuICAgIHNldE1hbnVVblRvcCAocm93KSB7XG4gICAgICB0aGlzLnVwZGF0ZU1hbnUocm93LmFydGljbGVpZCwgXCd0b3BcJywgdHJ1ZSlcbiAgICB9LFxuICAgIC8qKiDlj5bmtojnva7pobYgKiovXG4gICAgc2V0TWFudVRvcCAocm93KSB7XG4gICAgICB0aGlzLnVwZGF0ZU1hbnUocm93LmFydGljbGVpZCwgXCd0b3BcJywgZmFsc2UpXG4gICAgfSxcbiAgICAvKiog5LiK56i/ICoqL1xuICAgIHVwTWFudSAocm93KSB7XG4gICAgICBpZiAocm93LmFydGljbGVDaGFubmVsTGlzdC5sZW5ndGggPD0gMCAmJiByb3cuYXJ0aWNsZVNwZWNpYWxMaXN0Lmxlbmd0aCA8PSAwKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+ivpeeov+S7tui/mOayoeaciemFjee9rumikemBk+WSjOS4k+mimCwg5LiN6IO95LiK56i/IVwnXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgaWYgKHJvdy5zdGF0ZSA9PT0gMCB8fCByb3cuc3RhdGUgPT09IDIpIHtcbiAgICAgICAgdGhpcy4kY29uZmlybShcJ+ehruWumuimgeS4iueov+WQlz9cJywgXCfmj5DnpLpcJywge1xuICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcJ+ehruWumlwnLFxuICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwn5Y+W5raIXCcsXG4gICAgICAgICAgdHlwZTogXCd3YXJuaW5nXCdcbiAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgdGhpcy51cGRhdGVNYW51KHJvdy5hcnRpY2xlaWQsIFwnc3RhdGVcJywgMSlcbiAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn6K+l56i/5Lu25bey5LiK57q/IVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog5pKk56i/ICoqL1xuICAgIGRvd25NYW51IChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgPT09IDEpIHtcbiAgICAgICAgdGhpcy4kY29uZmlybShcJ+ehruWumuimgeaSpOeov+WQlz9cJywgXCfmj5DnpLpcJywge1xuICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcJ+ehruWumlwnLFxuICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwn5Y+W5raIXCcsXG4gICAgICAgICAgdHlwZTogXCd3YXJuaW5nXCdcbiAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgdGhpcy51cGRhdGVNYW51KHJvdy5hcnRpY2xlaWQsIFwnc3RhdGVcJywgMilcbiAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn6K+l56i/5Lu25bey5pKk56i/IVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog6YWN572u56i/5Lu2ICoqL1xuICAgIHNldHRpbmdNYW51IChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gdHJ1ZVxuICAgICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBTZXR0aW5nTWFudVxuICAgICAgICB0aGlzLnNldHRpbmdBcnRpY2xlSWQgPSByb3cuYXJ0aWNsZWlkXG4gICAgICAgIHRoaXMubWFudVRpdGxlID0gcm93LnRpdGxlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCflt7LkuIrnur/nqL/ku7bkuI3lj6/phY3nva4hXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDliKDpmaTnqL/ku7YgKiovXG4gICAgZGVsZXRlTWFudSAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIHRoaXMuJGNvbmZpcm0oXCfmmK/lkKbliKDpmaQiXCcgKyByb3cudGl0bGUgKyBcJyI/XCcsIFwn5o+Q56S6XCcsIHtcbiAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCfnoa7lrppcJyxcbiAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcJ+WPlua2iFwnLFxuICAgICAgICAgIHR5cGU6IFwnd2FybmluZ1wnXG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIEFjdGlvbnMuZGVsZXRlTWFudVNjcmlwdCh7XG4gICAgICAgICAgICBcJ2FydGljbGVcJzoge1xuICAgICAgICAgICAgICBcJ2FydGljbGVpZFwnOiByb3cuYXJ0aWNsZWlkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+WIoOmZpOaIkOWKnyFcJ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZWFyY2hNYW51U2NyaXB0KClcbiAgICAgICAgICB9KVxuICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCflt7LkuIrnur/nqL/ku7bkuI3lj6/liKDpmaQhXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOeov+S7tuaTjeS9nOeahOWFrOWFseaOpeWPo1xuICAgICAqIEBwYXJhbSBhcnRpY2xlaWQg5paH56ugSURcbiAgICAgKiBAcGFyYW0ga2V5IOabtOaWsOWtl+auteWQjVxuICAgICAqIEBwYXJhbSB2YWx1ZSDlgLxcbiAgICAgKi9cbiAgICB1cGRhdGVNYW51IChhcnRpY2xlaWQsIGtleSwgdmFsdWUpIHtcbiAgICAgIEFjdGlvbnMudXBkYXRlTWFudSh7XG4gICAgICAgIFwnYXJ0aWNsZVwnOiB7XG4gICAgICAgICAgXCdhcnRpY2xlaWRcJzogYXJ0aWNsZWlkLFxuICAgICAgICAgIFtrZXldOiB2YWx1ZVxuICAgICAgICB9XG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgbWVzc2FnZTogXCfmk43kvZzmiJDlip8hXCdcbiAgICAgICAgICB9KVxuICAgICAgICAgIHRoaXMuc2VhcmNoTWFudVNjcmlwdCgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog6I635Y+W5omA5pyJ6YCJ5oup55qE56i/5Lu2SUQgKiovXG4gICAgc2VsZWN0aW9uQ2hhbmdlIChzZWxlY3Rpb24pIHtcbiAgICAgIHRoaXMuYXJ0aWNsZWlkTGlzdCA9IFtdXG4gICAgICBzZWxlY3Rpb24uZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICB0aGlzLmFydGljbGVpZExpc3QucHVzaChpdGVtLmFydGljbGVpZClcbiAgICAgIH0pXG4gICAgICB0aGlzLnNlbGVjdGVkTWFudUluZm8gPSBzZWxlY3Rpb25cbiAgICB9LFxuICAgIC8qKiDmibnph4/liKDpmaTnqL/ku7YgKiovXG4gICAgZGVsZXRlTWFueU1hbnUgKCkge1xuICAgICAgaWYgKHRoaXMuYmF0Y2hQcm9jZXNzID09PSAxKSB7XG4gICAgICAgIGxldCBpc0FsbG93RGVsZXRlID0gdHJ1ZVxuICAgICAgICBpZiAodGhpcy5hcnRpY2xlaWRMaXN0Lmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgICBtZXNzYWdlOiBcJ+ivt+iHs+WwkemAieaLqeS4gOS4queov+S7tiFcJ1xuICAgICAgICAgIH0pXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRpcENvbnRlbnQgPSBcJ+aCqOaJgOmAieaLqeeahDoiXCdcbiAgICAgICAgLyoqIOW3suS4iue6v+eahOeov+S7tuS4jeWPr+WIoOmZpOeahOaPkOekuiAqKi9cbiAgICAgICAgdGhpcy5zZWxlY3RlZE1hbnVJbmZvLmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICBpZiAoaXRlbS5zdGF0ZSA9PT0gMSkge1xuICAgICAgICAgICAgaXNBbGxvd0RlbGV0ZSA9IGZhbHNlXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IGFyci5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgIHRpcENvbnRlbnQgKz0gXCfjgIpcJyArIGl0ZW0udGl0bGUgKyBcJ+OAi1wnXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aXBDb250ZW50ICs9IFwnIOW3suS4iue6v+eov+S7tiwg5LiN5Y+v5Yig6ZmkISBcJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgaWYgKCFpc0FsbG93RGVsZXRlKSB7XG4gICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgICBtZXNzYWdlOiB0aXBDb250ZW50XG4gICAgICAgICAgfSlcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiRjb25maXJtKFwn56Gu5a6a5Yig6Zmk5omA6YCJ56i/5Lu2P1wnLCBcJ+aPkOekulwnLCB7XG4gICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwn56Gu5a6aXCcsXG4gICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCflj5bmtohcJyxcbiAgICAgICAgICB0eXBlOiBcJ3dhcm5pbmdcJ1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICBBY3Rpb25zLmJhdGNoRGVsZXRlTWFudSh7XG4gICAgICAgICAgICBcJ2FydGljbGVpZExpc3RcJzogdGhpcy5hcnRpY2xlaWRMaXN0XG4gICAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpXG4gICAgICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+aJuemHj+WIoOmZpOaIkOWKnyFcJ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZWFyY2hNYW51U2NyaXB0KClcbiAgICAgICAgICB9KVxuICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog5YWz6Zet5a+56K+d5qGGICoqL1xuICAgIGNsb3NlRGlhbG9nICgpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50TmFtZSA9IFwnXCdcbiAgICAgIHRoaXMuc2VhcmNoTWFudVNjcmlwdCgpXG4gICAgfSxcbiAgICAvKiog5pCc57Si56i/5Lu2ICoqL1xuICAgIHNlYXJjaE1hbnVTY3JpcHQgKCkge1xuICAgICAgdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnc3dhcFRpbWVcJ10odGhpcy5tYW51U2NyaXB0KVxuICAgICAgbGV0IHRpbWVTdGFydCA9IHRoaXMubWFudVNjcmlwdC5zdGFydERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLm1hbnVTY3JpcHQuc3RhcnREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBsZXQgdGltZUVuZCA9IHRoaXMubWFudVNjcmlwdC5lbmREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5tYW51U2NyaXB0LmVuZERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIEFjdGlvbnMuZ2V0TWFudVNjcmlwdExpc3Qoe1xuICAgICAgICBcJ3BhZ2VOb1wnOiB0aGlzLnBhZ2VObyxcbiAgICAgICAgXCdwYWdlU2l6ZVwnOiB0aGlzLnBhZ2VTaXplLFxuICAgICAgICBcJ2NoYW5uZWxpZFwnOiB0aGlzLm1hbnVTY3JpcHQuY2hhbm5lbGlkLFxuICAgICAgICBcJ3NwZWNpYWxpZFwnOiB0aGlzLm1hbnVTY3JpcHQuc3BlY2lhbGlkLFxuICAgICAgICBcJ3RpdGxlXCc6IHRoaXMubWFudVNjcmlwdC50aXRsZSxcbiAgICAgICAgXCdzdGF0ZVwnOiB0aGlzLm1hbnVTY3JpcHQuc3RhdGUsXG4gICAgICAgIFwndGltZVN0YXJ0XCc6IHRpbWVTdGFydCxcbiAgICAgICAgXCd0aW1lRW5kXCc6IHRpbWVFbmRcbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKVxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gZGF0YS5saXN0XG4gICAgICAgICAgdGhpcy50b3RhbCA9IGRhdGEudG90YWxcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5wYWdpbmF0aW9ue1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgfVxuICAubWFudXtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6IDMwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIGJvcmRlcjoxcHggc29saWQgcmdiYSgxODEsIDE4NCwgMjE3LCAxKTtcbiAgICBib3JkZXItcmFkaXVzOiAyMHB4O1xuICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICBwYWRkaW5nOiAxcHggNXB4IDJweCA1cHg7XG4gICAgY29sb3I6IHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG4gIC5tYW51LXVwLWFjdGl2ZXtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDIzMSwgMTI1LCAwLCAxKTtcbiAgICBjb2xvcjpyZ2JhKDIzMSwgMTI1LCAwLCAxKTtcbiAgfVxuICAubWFudS1iYWNrLWFjdGl2ZXtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI0MCwgOCwgOCwgMSk7XG4gICAgY29sb3I6cmdiYSgyNDAsIDgsIDgsIDEpO1xuICB9XG4gIC5kZWxldGUtYWN0aXZle1xuICAgIGJvcmRlcjoxcHggc29saWQgcmdiYSgxMDUsIDc4LCAyNTUsIDEpO1xuICAgIGNvbG9yOiByZ2JhKDEwNSwgNzgsIDI1NSwgMSk7XG4gIH1cbiAgLnBhZ2luYXRpb24ge1xuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgIC13ZWJraXQtYm94LXBhY2s6IGVuZDtcbiAgfVxuICAubWFudXNjcmlwdCAuYWxsb3dfY29tbWVudCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYTUwNztcbiAgICB3aWR0aDogMjBweDtcbiAgICBoZWlnaHQ6IDIwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC1tb3otYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIG1hcmdpbi1sZWZ0OiAzcHg7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG4gIC5tYW51c2NyaXB0IC5hbGxvd19zaGFyZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE4ODNGRjtcbiAgICB3aWR0aDogMjBweDtcbiAgICBoZWlnaHQ6IDIwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC1tb3otYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIG1hcmdpbi1sZWZ0OiAzcHg7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG4gIC5tYW51c2NyaXB0IC5hbGxvd19saWtlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjAwODA4O1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgLW1vei1ib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gICAgbWFyZ2luLWxlZnQ6IDNweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbiAgLm1hbnVzY3JpcHQgLmFsbG93X2NvbGxlY3Qge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM2OTRFRkY7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtbW96LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBtYXJnaW4tbGVmdDogM3B4O1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuPC9zdHlsZT5cbjxzdHlsZT5cbiAgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuYnRuLWNvbnRhaW5lciAuZWwtYnV0dG9ue1xuICAgIHBhZGRpbmc6IDEycHggMTBweDtcbiAgfVxuICAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5idG4tY29udGFpbmVyIC5lbC1pY29uLS1yaWdodHtcbiAgICBtYXJnaW46IDA7XG4gIH1cbi5jdXN0b20tZGlhbG9nIC5lbC1kaWFsb2dfX2hlYWRlcntcbiAgLypwYWRkaW5nOiAwOyovXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZ2JhKDE5MiwxOTAsMjU1LDEpO1xufVxuICAuZWwtdG9vbHRpcF9fcG9wcGVye1xuICAgIG1heC13aWR0aDogMzAwcHg7XG4gIH1cbiAgLm1hbnVzY3JpcHQgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICB3aWR0aDogNjAlO1xuICB9XG4gIC5tYW51c2NyaXB0IC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmVsLWZvcm0taXRlbSB7XG4gICAgd2lkdGg6IDIwJTtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LHFvOTA6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi5wYWdpbmF0aW9uW2RhdGEtdi00NDc2NzI2OF17XG4gIC13ZWJraXQtYm94LXBhY2s6IGp1c3RpZnk7XG4gICAgICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcbn1cbi5tYW51W2RhdGEtdi00NDc2NzI2OF17XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgd2lkdGg6IGF1dG87XG4gIGhlaWdodDogMjBweDtcbiAgYm9yZGVyOjFweCBzb2xpZCByZ2JhKDE4MSwgMTg0LCAyMTcsIDEpO1xuICBib3JkZXItcmFkaXVzOiAyMHB4O1xuICBmb250LXNpemU6IDEzcHg7XG4gIHBhZGRpbmc6IDFweCA1cHggMnB4IDVweDtcbiAgY29sb3I6IHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbi5tYW51LXVwLWFjdGl2ZVtkYXRhLXYtNDQ3NjcyNjhde1xuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDIzMSwgMTI1LCAwLCAxKTtcbiAgY29sb3I6cmdiYSgyMzEsIDEyNSwgMCwgMSk7XG59XG4ubWFudS1iYWNrLWFjdGl2ZVtkYXRhLXYtNDQ3NjcyNjhde1xuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI0MCwgOCwgOCwgMSk7XG4gIGNvbG9yOnJnYmEoMjQwLCA4LCA4LCAxKTtcbn1cbi5kZWxldGUtYWN0aXZlW2RhdGEtdi00NDc2NzI2OF17XG4gIGJvcmRlcjoxcHggc29saWQgcmdiYSgxMDUsIDc4LCAyNTUsIDEpO1xuICBjb2xvcjogcmdiYSgxMDUsIDc4LCAyNTUsIDEpO1xufVxuLmNvbW1lbnQtZGV0YWlsW2RhdGEtdi00NDc2NzI2OF17XG4gIGJvcmRlcjoxcHggc29saWQgcmdiYSgyMzEsMTI1LDAsMSk7XG4gIGNvbG9yOiByZ2JhKDIzMSwxMjUsMCwxKTtcbn1cbi5kYXRlLWxlZnRbZGF0YS12LTQ0NzY3MjY4XXtcbiAgbWFyZ2luLWxlZnQ6IDI4cHg7XG59XG4uY29tbWVudC10b3AtaW5mb1tkYXRhLXYtNDQ3NjcyNjhde1xuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIC13ZWJraXQtYm94LXBhY2s6IGp1c3RpZnk7XG4gICAgICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgd2lkdGg6IDk1JTtcbiAgaGVpZ2h0OiAxMjBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIG1hcmdpbi1ib3R0b206IDYwcHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNEQURFREY7XG59XG4uY29tbWVudC1pbmZvLWl0ZW1bZGF0YS12LTQ0NzY3MjY4XXtcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICBkaXNwbGF5OiBmbGV4O1xuICAtd2Via2l0LWJveC1wYWNrOiBzdGFydDtcbiAgICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI0RBREVERjtcbiAgd2lkdGg6IDI1JTtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuLmJveFtkYXRhLXYtNDQ3NjcyNjhdIHtcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICBkaXNwbGF5OiBmbGV4O1xuICAtd2Via2l0LWJveC1wYWNrOiBzdGFydDtcbiAgICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luOiBhdXRvO1xufVxuLmNoYW5nZS1iYWNrZ3JvdWRbZGF0YS12LTQ0NzY3MjY4XXtcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICBkaXNwbGF5OiBmbGV4O1xuICAtd2Via2l0LWJveC1wYWNrOiBzdGFydDtcbiAgICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luOiBhdXRvO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjk0RUZGO1xuICBjb2xvcjogd2hpdGU7XG59XG4uY29tbWVudC1kYXRhW2RhdGEtdi00NDc2NzI2OF0ge1xuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xuICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgbWFyZ2luLWxlZnQ6IDE1cHg7XG4gIGNvbG9yOnJnYmEoNzEsNzEsNzEsMSk7XG59XG4uY29tbWVudC1kYXRhIHNwYW5bZGF0YS12LTQ0NzY3MjY4XTpmaXJzdC1jaGlsZCB7XG4gIGZvbnQtc2l6ZTogMjRweDtcbn1cbi5jb21tZW50LWRhdGEgc3BhbltkYXRhLXYtNDQ3NjcyNjhdOmxhc3QtY2hpbGR7XG4gIGZvbnQtc2l6ZToxNHB4O1xufVxuLmNvbW1lbnQtaWNvbi1jb250YWluZXJbZGF0YS12LTQ0NzY3MjY4XXtcbiAgd2lkdGg6NjBweDtcbiAgaGVpZ2h0OiA2MHB4O1xuICBib3JkZXItcmFkaXVzOiAxMDAlO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGxpbmUtaGVpZ2h0OiA2OHB4O1xufVxuLmNvbW1lbnQtYWN0aXZlLWJnW2RhdGEtdi00NDc2NzI2OF17XG4gIGJhY2tncm91bmQ6IHJnYmEoMTA1LDc4LDI1NSwxKTtcbn1cbi5pY29uLWNvbnRhaW5lci1iZ1tkYXRhLXYtNDQ3NjcyNjhde1xuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbn1cbi5pY29uLWNvbG9yW2RhdGEtdi00NDc2NzI2OF17XG4gIGNvbG9yOiAjNjk0RUZGO1xufVxuLmNvbW1lbnQtZmlyc3QtYmdbZGF0YS12LTQ0NzY3MjY4XXtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDIwNiwgOTEsIDEpO1xufVxuLmNvbW1lbnQtc2VjLWJnW2RhdGEtdi00NDc2NzI2OF17XG4gIGJhY2tncm91bmQ6IHJnYmEoMjUzLDExMSw4OCwxKTtcbn1cbi5jb21tZW50LXRoci1iZ1tkYXRhLXYtNDQ3NjcyNjhde1xuICBiYWNrZ3JvdW5kOiByZ2JhKDk1LCAxNTcsIDI0OSwgMSk7XG59XG4uY29tbWVudC1mb3VyLWJnW2RhdGEtdi00NDc2NzI2OF17XG4gIGJhY2tncm91bmQ6IHJnYmEoMTIwLCAyMzIsIDIyOSwgMSk7XG59XG4uY29tbWVudC1pY29uLWNvbnRhaW5lciBpW2RhdGEtdi00NDc2NzI2OF17XG4gIGZvbnQtc2l6ZTogMzBweDtcbiAgY29sb3I6d2hpdGU7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlQ29tbWVudC9zcmMvY29tcG9uZW50cy9tYW5hZ2VDb21tZW50L2NvbW1lbnRMaXN0LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUErcEJBO0VBQ0EsMEJBQUE7TUFBQSx1QkFBQTtVQUFBLCtCQUFBO0NBQ0E7QUFDQTtFQUNBLHNCQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSx3Q0FBQTtFQUNBLG9CQUFBO0VBQ0EsZ0JBQUE7RUFDQSx5QkFBQTtFQUNBLDhCQUFBO0VBQ0EsZ0JBQUE7Q0FDQTtBQUNBO0VBQ0EsdUNBQUE7RUFDQSwyQkFBQTtDQUNBO0FBQ0E7RUFDQSxxQ0FBQTtFQUNBLHlCQUFBO0NBQ0E7QUFDQTtFQUNBLHVDQUFBO0VBQ0EsNkJBQUE7Q0FDQTtBQUNBO0VBQ0EsbUNBQUE7RUFDQSx5QkFBQTtDQUNBO0FBQ0E7RUFDQSxrQkFBQTtDQUNBO0FBQ0E7RUFDQSxxQkFBQTtFQUFBLHFCQUFBO0VBQUEsY0FBQTtFQUNBLDBCQUFBO01BQUEsdUJBQUE7VUFBQSwrQkFBQTtFQUNBLFdBQUE7RUFDQSxjQUFBO0VBQ0EsZUFBQTtFQUNBLG9CQUFBO0VBQ0EsMEJBQUE7Q0FDQTtBQUNBO0VBQ0EscUJBQUE7RUFBQSxxQkFBQTtFQUFBLGNBQUE7RUFDQSx3QkFBQTtNQUFBLHFCQUFBO1VBQUEsNEJBQUE7RUFDQSwwQkFBQTtNQUFBLHVCQUFBO1VBQUEsb0JBQUE7RUFDQSxnQ0FBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtDQUNBO0FBQ0E7RUFDQSxxQkFBQTtFQUFBLHFCQUFBO0VBQUEsY0FBQTtFQUNBLHdCQUFBO01BQUEscUJBQUE7VUFBQSw0QkFBQTtFQUNBLDBCQUFBO01BQUEsdUJBQUE7VUFBQSxvQkFBQTtFQUNBLGFBQUE7Q0FDQTtBQUNBO0VBQ0EscUJBQUE7RUFBQSxxQkFBQTtFQUFBLGNBQUE7RUFDQSx3QkFBQTtNQUFBLHFCQUFBO1VBQUEsNEJBQUE7RUFDQSwwQkFBQTtNQUFBLHVCQUFBO1VBQUEsb0JBQUE7RUFDQSxhQUFBO0VBQ0EsMEJBQUE7RUFDQSxhQUFBO0NBQ0E7QUFDQTtFQUNBLHFCQUFBO0VBQUEscUJBQUE7RUFBQSxjQUFBO0VBQ0EsNkJBQUE7RUFBQSw4QkFBQTtNQUFBLDJCQUFBO1VBQUEsdUJBQUE7RUFDQSxrQkFBQTtFQUNBLHVCQUFBO0NBQ0E7QUFDQTtFQUNBLGdCQUFBO0NBQ0E7QUFDQTtFQUNBLGVBQUE7Q0FDQTtBQUNBO0VBQ0EsV0FBQTtFQUNBLGFBQUE7RUFDQSxvQkFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7Q0FDQTtBQUNBO0VBQ0EsK0JBQUE7Q0FDQTtBQUNBO0VBQ0Esa0JBQUE7Q0FDQTtBQUNBO0VBQ0EsZUFBQTtDQUNBO0FBQ0E7RUFDQSxrQ0FBQTtDQUNBO0FBQ0E7RUFDQSwrQkFBQTtDQUNBO0FBQ0E7RUFDQSxrQ0FBQTtDQUNBO0FBQ0E7RUFDQSxtQ0FBQTtDQUNBO0FBQ0E7RUFDQSxnQkFBQTtFQUNBLFlBQUE7RUFDQSxzQkFBQTtDQUNBIixmaWxlOiJjb21tZW50TGlzdC52dWUiLHNvdXJjZXNDb250ZW50OlsiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiY29vbW1lbnQtbGlzdFwiPlxuICAgIDxkaXY+XG4gICAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICAgIHRpdGxlLW5hbWU9XCLor4TorrrnrqHnkIZcIlxuICAgICAgICBjbGFzcz1cImNpY2xlLWNvbnRyb2xsZXJcIlxuICAgICAgLz5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb21tZW50LXRvcC1pbmZvXCI+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICA6Y2xhc3M9XCJbJ2NvbW1lbnQtaW5mby1pdGVtJywgY291bnRBdWRpdFdhaXQgPyAnY29tbWVudC1hY3RpdmUtYmcnOiAnJ11cIlxuICAgICAgICAgIEBjbGljaz1cImNoYW5nZUNvbW1lbnQoJ2NvdW50QXVkaXRXYWl0JylcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiYm94XCI+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICA6Y2xhc3M9XCJbJ2NvbW1lbnQtaWNvbi1jb250YWluZXInLCBjb3VudEF1ZGl0V2FpdCA/ICdpY29uLWNvbnRhaW5lci1iZyc6ICdjb21tZW50LXNlYy1iZyddXCI+XG4gICAgICAgICAgICAgIDxpXG4gICAgICAgICAgICAgICAgOnN0eWxlPVwieydjb2xvcic6IGNvdW50QXVkaXRXYWl0ID8gJyM2OTRFRkYnOiAnJ31cIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwiaWNvbmZvbnQgaWNvbi1kYWlzaGVuaGVcIi8+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNvbW1lbnQtZGF0YVwiPlxuICAgICAgICAgICAgICA8c3BhbiA6c3R5bGU9XCJ7J2NvbG9yJzogY291bnRBdWRpdFdhaXQgPyAnd2hpdGUnOiAncmdiYSg3MSw3MSw3MSwxKSd9XCI+e3sgY291bnRBdWRpdFdhaXROdW0gfX08L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuIDpzdHlsZT1cInsnY29sb3InOiBjb3VudEF1ZGl0V2FpdCA/ICd3aGl0ZSc6ICdyZ2JhKDcxLDcxLDcxLDEpJ31cIj7lvoXlrqHmoLg8L3NwYW4+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgOmNsYXNzPVwiWydjb21tZW50LWluZm8taXRlbScsIGNvdW50QXVkaXRQYXNzID8gJ2NvbW1lbnQtYWN0aXZlLWJnJzogJyddXCJcbiAgICAgICAgICBAY2xpY2s9XCJjaGFuZ2VDb21tZW50KCdjb3VudEF1ZGl0UGFzcycpXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJveFwiPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgOmNsYXNzPVwiWydjb21tZW50LWljb24tY29udGFpbmVyJywgY291bnRBdWRpdFBhc3MgPyAnaWNvbi1jb250YWluZXItYmcnOiAnY29tbWVudC10aHItYmcnXVwiPlxuICAgICAgICAgICAgICA8aVxuICAgICAgICAgICAgICAgIDpzdHlsZT1cInsnY29sb3InOiBjb3VudEF1ZGl0UGFzcyA/ICcjNjk0RUZGJzogJyd9XCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImljb25mb250IGljb24tYXVkaXRcIi8+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNvbW1lbnQtZGF0YVwiPlxuICAgICAgICAgICAgICA8c3BhbiA6c3R5bGU9XCJ7J2NvbG9yJzogY291bnRBdWRpdFBhc3MgPyAnd2hpdGUnOiAncmdiYSg3MSw3MSw3MSwxKSd9XCI+e3sgY291bnRBdWRpdFBhc3NOdW0gfX08L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuIDpzdHlsZT1cInsnY29sb3InOiBjb3VudEF1ZGl0UGFzcyA/ICd3aGl0ZSc6ICdyZ2JhKDcxLDcxLDcxLDEpJ31cIj7lt7LpgJrov4c8L3NwYW4+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgOmNsYXNzPVwiWydjb21tZW50LWluZm8taXRlbScsIGNvdW50QXVkaXROb3RQYXNzID8gJ2NvbW1lbnQtYWN0aXZlLWJnJzogJyddXCJcbiAgICAgICAgICBAY2xpY2s9XCJjaGFuZ2VDb21tZW50KCdjb3VudEF1ZGl0Tm90UGFzcycpXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJveFwiPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgOmNsYXNzPVwiWydjb21tZW50LWljb24tY29udGFpbmVyJywgY291bnRBdWRpdE5vdFBhc3MgPyAnaWNvbi1jb250YWluZXItYmcnOiAnY29tbWVudC1mb3VyLWJnJ11cIj5cbiAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICA6c3R5bGU9XCJ7J2NvbG9yJzogY291bnRBdWRpdE5vdFBhc3MgPyAnIzY5NEVGRic6ICcnfVwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJpY29uZm9udCBpY29uLXlpc2hhbmNodVwiLz5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY29tbWVudC1kYXRhXCI+XG4gICAgICAgICAgICAgIDxzcGFuIDpzdHlsZT1cInsnY29sb3InOiBjb3VudEF1ZGl0Tm90UGFzcyA/ICd3aGl0ZSc6ICdyZ2JhKDcxLDcxLDcxLDEpJ31cIj57eyBjb3VudEF1ZGl0Tm90UGFzc051bSB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4gOnN0eWxlPVwieydjb2xvcic6IGNvdW50QXVkaXROb3RQYXNzID8gJ3doaXRlJzogJ3JnYmEoNzEsNzEsNzEsMSknfVwiPuacqumAmui/hzwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICA6Y2xhc3M9XCJbJ2NvbW1lbnQtaW5mby1pdGVtJywgY291bnRBdWRpdCA/ICdjb21tZW50LWFjdGl2ZS1iZyc6ICcnXVwiXG4gICAgICAgICAgQGNsaWNrPVwiY2hhbmdlQ29tbWVudCgnY291bnRBdWRpdCcpXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJveFwiPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgOmNsYXNzPVwiWydjb21tZW50LWljb24tY29udGFpbmVyJywgY291bnRBdWRpdCA/ICdpY29uLWNvbnRhaW5lci1iZyc6ICdjb21tZW50LWZpcnN0LWJnJ11cIj5cbiAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICA6c3R5bGU9XCJ7J2NvbG9yJzogY291bnRBdWRpdCA/ICcjNjk0RUZGJzogJyd9XCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImljb25mb250IGljb24tc3F1YXJlLXNvbGlkXCIvPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjb21tZW50LWRhdGFcIj5cbiAgICAgICAgICAgICAgPHNwYW4gOnN0eWxlPVwieydjb2xvcic6IGNvdW50QXVkaXQgPyAnd2hpdGUnOiAncmdiYSg3MSw3MSw3MSwxKSd9XCI+e3sgY291bnRBdWRpdE51bSB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4gOnN0eWxlPVwieydjb2xvcic6IGNvdW50QXVkaXQgPyAnd2hpdGUnOiAncmdiYSg3MSw3MSw3MSwxKSd9XCI+5YWo6YOoPC9zcGFuPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInNlYXJjaC1mb3JtLWNvbnRhaW5lclwiPlxuICAgICAgICA8ZWwtZm9ybVxuICAgICAgICAgIDppbmxpbmU9XCJ0cnVlXCJcbiAgICAgICAgICA6bW9kZWw9XCJjb21tZW50XCJcbiAgICAgICAgICBjbGFzcz1cImRlbW8tZm9ybS1pbmxpbmVcIj5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPVwi55So5oi35ZCNXCI+XG4gICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgdi1tb2RlbD1cImNvbW1lbnQudXNlcl9uaWNrbmFtZVwiXG4gICAgICAgICAgICAgIGNsZWFyYWJsZS8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cIuazqOWGjOaJi+aculwiPlxuICAgICAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgICAgIHYtbW9kZWw9XCJjb21tZW50LnVzZXJfcGhvbmVcIlxuICAgICAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCLmoIfpophcIj5cbiAgICAgICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgICAgICB2LW1vZGVsPVwiY29tbWVudC50aXRsZVwiXG4gICAgICAgICAgICAgIGNsZWFyYWJsZS8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9XCLmqKHlnZdcIlxuICAgICAgICAgICAgY2xhc3M9XCJzZWFyY2gtbGVmdFwiPlxuICAgICAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgICAgICB2LW1vZGVsPVwiY29tbWVudC50eXBlXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJcIlxuICAgICAgICAgICAgICBAY2hhbmdlPVwiZ2V0Q29tbWVudExpc3RcIj5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIHZhbHVlPVwiXCJcbiAgICAgICAgICAgICAgICBsYWJlbD1cIuWFqOmDqFwiLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT1cIjFcIlxuICAgICAgICAgICAgICAgIGxhYmVsPVwi6LWE6K6vXCIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPVwiMlwiXG4gICAgICAgICAgICAgICAgbGFiZWw9XCLngrnmkq1cIi8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9XCIzXCJcbiAgICAgICAgICAgICAgICBsYWJlbD1cIuebtOaSrVwiLz5cbiAgICAgICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPVwi6K+E6K665pe26Ze0XCJcbiAgICAgICAgICAgIHN0eWxlPVwicG9zaXRpb246IHJlbGF0aXZlO2xlZnQ6IC0xNXB4O1wiPlxuICAgICAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgICAgIDp0aXRsZT1cImNvbW1lbnQuc3RhcnREYXRlIHwgRm9ybWF0RGF0ZSgneXl5eS1NTS1kZCBoaDptbScpXCJcbiAgICAgICAgICAgICAgdi1tb2RlbD1cImNvbW1lbnQuc3RhcnREYXRlXCJcbiAgICAgICAgICAgICAgdHlwZT1cImRhdGV0aW1lXCJcbiAgICAgICAgICAgICAgZm9ybWF0PVwieXl5eS1NTS1kZCBISDptbVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi6YCJ5oup5pe26Ze0XCJcbiAgICAgICAgICAgICAgQGNoYW5nZT1cImdldENvbW1lbnRMaXN0XCIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPVwi57uT5p2f5pe26Ze0XCJcbiAgICAgICAgICAgIGNsYXNzPVwiZGF0ZS1sZWZ0XCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPVwiY29tbWVudC5lbmREYXRlIHwgRm9ybWF0RGF0ZSgneXl5eS1NTS1kZCBoaDptbScpXCJcbiAgICAgICAgICAgICAgdi1tb2RlbD1cImNvbW1lbnQuZW5kRGF0ZVwiXG4gICAgICAgICAgICAgIHR5cGU9XCJkYXRldGltZVwiXG4gICAgICAgICAgICAgIGZvcm1hdD1cInl5eXktTU0tZGQgSEg6bW1cIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIumAieaLqeaXtumXtFwiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9XCJnZXRDb21tZW50TGlzdFwiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICBzdHlsZT1cIm1hcmdpbi1sZWZ0OiAxMnB4XCJcbiAgICAgICAgICAgIEBjbGljaz1cImdldENvbW1lbnRMaXN0XCI+XG4gICAgICAgICAgICDmn6Xor6JcbiAgICAgICAgICAgIDxpIGNsYXNzPVwiZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHRcIi8+XG4gICAgICAgICAgPC9lbC1idXR0b24+XG4gICAgICAgIDwvZWwtZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ0YWJsZS1saXN0XCI+XG4gICAgICA8ZWwtdGFibGVcbiAgICAgICAgcmVmPVwiY2hhbm5lbFRhYmxlXCJcbiAgICAgICAgOmRhdGE9XCJ0YWJsZURhdGFcIlxuICAgICAgICBzdHJpcGVcbiAgICAgICAgY2xhc3M9XCJ3aG9sZS10YWJsZVwiXG4gICAgICAgIG1pbi1oZWlnaHQ9XCI0MDBcIlxuICAgICAgICBAc2VsZWN0LWFsbD1cInNlbGVjdEFsbFwiXG4gICAgICAgIEBzZWxlY3Rpb24tY2hhbmdlPVwic2VsZWN0aW9uQ2hhbmdlXCI+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICB0eXBlPVwic2VsZWN0aW9uXCJcbiAgICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgICAgd2lkdGg9XCI1NVwiLz5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIHYtZm9yPVwiKGl0ZW0sIGluZGV4KSBpbiB0YWJsZUhlYWRlclwiXG4gICAgICAgICAgOmtleT1cImluZGV4XCJcbiAgICAgICAgICA6cHJvcD1cIml0ZW0ucHJvcFwiXG4gICAgICAgICAgOmxhYmVsPVwiaXRlbS5sYWJlbFwiXG4gICAgICAgICAgOndpZHRoPVwiaXRlbS53aWR0aFwiXG4gICAgICAgICAgOmZvcm1hdHRlcj1cIml0ZW0uZm9ybWF0dGVyXCJcbiAgICAgICAgICBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgICAgZml4ZWRcbiAgICAgICAgICBzaG93LW92ZXJmbG93LXRvb2x0aXBcbiAgICAgICAgLz5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGxhYmVsPVwi572u6aG254q25oCBXCJcbiAgICAgICAgICBhbGlnbj1cImNlbnRlclwiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPVwic2NvcGVcIj5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIHYtaWY9XCIhc2NvcGUucm93LnRvcFwiXG4gICAgICAgICAgICAgIGNsYXNzPVwiaXRlbVwiXG4gICAgICAgICAgICAgIGVmZmVjdD1cImRhcmtcIlxuICAgICAgICAgICAgICBjb250ZW50PVwi54K55Ye7572u6aG2XCJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PVwidG9wXCI+XG4gICAgICAgICAgICAgIDxlbC10YWdcbiAgICAgICAgICAgICAgICBzaXplPVwibWluaVwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJzZXRQb2ludGVyXCJcbiAgICAgICAgICAgICAgICBzdHlsZT1cIndpZHRoOjYwcHg7XCJcbiAgICAgICAgICAgICAgICBAY2xpY2submF0aXZlPVwic2V0TWFudVVuVG9wKHNjb3BlLnJvdylcIj5cbiAgICAgICAgICAgICAgICDnva7pobZcbiAgICAgICAgICAgICAgPC9lbC10YWc+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICB2LWVsc2VcbiAgICAgICAgICAgICAgY2xhc3M9XCJpdGVtXCJcbiAgICAgICAgICAgICAgZWZmZWN0PVwiZGFya1wiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9XCLngrnlh7vlj5bmtojnva7pobZcIlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9XCJ0b3BcIj5cbiAgICAgICAgICAgICAgPGVsLXRhZ1xuICAgICAgICAgICAgICAgIHNpemU9XCJtaW5pXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cInNldFBvaW50ZXJcIlxuICAgICAgICAgICAgICAgIHN0eWxlPVwid2lkdGg6NjBweDtjb2xvcjojNjk0ZWZmXCJcbiAgICAgICAgICAgICAgICBAY2xpY2submF0aXZlPVwic2V0TWFudVRvcChzY29wZS5yb3cpXCI+XG4gICAgICAgICAgICAgICAg5Y+W5raI572u6aG2XG4gICAgICAgICAgICAgIDwvZWwtdGFnPlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgbGFiZWw9XCLmk43kvZxcIlxuICAgICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgICB3aWR0aD1cIjM1MFwiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPVwic2NvcGVcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWFudS1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjbGFzcz1cIm1hbnUgZGVsZXRlLWFjdGl2ZVwiXG4gICAgICAgICAgICAgICAgQGNsaWNrPVwiYXVkaXQoc2NvcGUucm93KVwiPlxuICAgICAgICAgICAgICAgIHt7IHNjb3BlLnJvdy5hdWRpdCA9PT0gMCA/ICflrqHmoLgnOiAn5bey5a6h5qC4JyB9fVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgOmNsYXNzPVwiWydtYW51JywgJ2RlbGV0ZS1hY3RpdmUnXVwiXG4gICAgICAgICAgICAgICAgQGNsaWNrPVwiZGVsZXRlQ29tbWVudHMoc2NvcGUucm93KVwiPlxuICAgICAgICAgICAgICAgIOWIoOmZpFxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgOmNsYXNzPVwiWydtYW51JywgJ2RlbGV0ZS1hY3RpdmUnXVwiXG4gICAgICAgICAgICAgICAgQGNsaWNrPVwiZm9yYmlkZGVuVXNlcihzY29wZS5yb3cpXCI+XG4gICAgICAgICAgICAgICAge3sgc2NvcGUucm93LnVzZXJfZm9yYmlkZGVuID8gJ+WPlua2iOemgeiogCc6ICfnpoHoqIAnIH19XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjbGFzcz1cIm1hbnUgY29tbWVudC1kZXRhaWxcIlxuICAgICAgICAgICAgICAgIEBjbGljaz1cImxvb2tDb21tZW50KHNjb3BlLnJvdylcIj5cbiAgICAgICAgICAgICAgICDor4Torrrmn6XnnItcbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzPVwibWFudSBjb21tZW50LWRldGFpbFwiXG4gICAgICAgICAgICAgICAgQGNsaWNrPVwiYXVkaXRfb3BpbmlvbihzY29wZS5yb3cpXCI+XG4gICAgICAgICAgICAgICAg5a6h5qC45oSP6KeBXG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgIDwvZWwtdGFibGU+XG4gICAgICA8ZGl2IGNsYXNzPVwicGFnaW5hdGlvblwiPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxlbC1jaGVja2JveFxuICAgICAgICAgICAgdi1tb2RlbD1cInNlbGZTZWxlY3RBbGxcIlxuICAgICAgICAgICAgQGNoYW5nZT1cInRvZ2dsZUFsbFNlbGVjdGlvblwiPlxuICAgICAgICAgICAg5YWo6YCJXG4gICAgICAgICAgPC9lbC1jaGVja2JveD5cbiAgICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgICB2LW1vZGVsPVwiYmF0Y2hQcm9jZXNzXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi6K+36YCJ5oupXCI+XG4gICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgIHYtZm9yPVwiaXRlbSBpbiBwcm9jZXNzTGlzdFwiXG4gICAgICAgICAgICAgIDprZXk9XCJpdGVtLnZhbHVlXCJcbiAgICAgICAgICAgICAgOmxhYmVsPVwiaXRlbS5sYWJlbFwiXG4gICAgICAgICAgICAgIDp2YWx1ZT1cIml0ZW0udmFsdWVcIlxuICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XCJpdGVtLmRpc2FibGVkXCIvPlxuICAgICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgIEBjbGljaz1cImRlbGV0ZU1hbnlDb21tZW50XCI+56Gu5a6aPC9lbC1idXR0b24+XG4gICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgdi1zaG93PVwiMSA9PT0gMlwiXG4gICAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiPuWvvOWHuuaVsOaNrjwvZWwtYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGVsLXBhZ2luYXRpb25cbiAgICAgICAgICA6dG90YWw9XCJ0b3RhbFwiXG4gICAgICAgICAgOnBhZ2Utc2l6ZXM9XCJbMTAsIDIwLCAzMCwgNDBdXCJcbiAgICAgICAgICBiYWNrZ3JvdW5kXG4gICAgICAgICAgbGF5b3V0PVwidG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dFwiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPVwiaGFuZGxlU2l6ZUNoYW5nZVwiXG4gICAgICAgICAgQGN1cnJlbnQtY2hhbmdlPVwiaGFuZGxlQ3VycmVudENoYW5nZVwiLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxlbC1kaWFsb2dcbiAgICAgIDp2aXNpYmxlLnN5bmM9XCJkaWFsb2dWaXNpYmxlXCJcbiAgICAgIGN1c3RvbS1jbGFzcz1cImN1c3RvbS1kaWFsb2dcIlxuICAgICAgdGl0bGU9XCLlrqHmoLhcIlxuICAgICAgd2lkdGg9XCIzMCVcIlxuICAgICAgQGNsb3NlPVwiY2xvc2VEaWFsb2dcIj5cbiAgICAgIDxkaXZcbiAgICAgICAgOmlzPVwiY29tcG9uZW50TmFtZVwiXG4gICAgICAgIDpjb21tZW50aWQ9XCJjb21tZW50aWRcIlxuICAgICAgICBAY2xvc2UtZGlhbG9nPVwiY2xvc2VEaWFsb2dcIi8+XG4gICAgPC9lbC1kaWFsb2c+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSAnQC9jb21wb25lbnRzL2NvbW1vbnMvY2lyY2xlVGl0bGUnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gJ0AvYXBpL2NvbW1lbnRBcGknXG5pbXBvcnQgQXVkaXQgZnJvbSAnLi9hdWRpdCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlLFxuICAgIEF1ZGl0XG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb21tZW50OiB7XG4gICAgICAgIHVzZXJfbmlja25hbWU6ICcnLFxuICAgICAgICB0eXBlOiAnJyxcbiAgICAgICAgdXNlcl9waG9uZTogJycsXG4gICAgICAgIHN0YXJ0RGF0ZTogJycsXG4gICAgICAgIGVuZERhdGU6ICcnLFxuICAgICAgICB0aXRsZTogJydcbiAgICAgIH0sXG4gICAgICBjbGlja0NlbGxJbmRleDogLTEsXG4gICAgICB0YWJsZUhlYWRlcjogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogJ3VzZXJfcGhvbmUnLFxuICAgICAgICAgIGxhYmVsOiAn55So5oi35L+h5oGvJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxkaXY+PHA+55So5oi35ZCNOntyb3cudXNlcl9uaWNrbmFtZX08L3A+PHA+55S16K+dOntjZWxsVmFsdWV9PC9wPjwvZGl2PlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6ICd0aXRsZScsXG4gICAgICAgICAgbGFiZWw6ICfmupDlhoXlrrknLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgbW9kdWxlID0gJydcbiAgICAgICAgICAgIGlmIChyb3cudHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgICBtb2R1bGUgPSAn6LWE6K6vJ1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyb3cudHlwZSA9PT0gMikge1xuICAgICAgICAgICAgICBtb2R1bGUgPSAn54K55pKtJ1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbW9kdWxlID0gJ+ebtOaSrSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiA8ZGl2PjxwPuaooeWdlzp7bW9kdWxlfTwvcD48cD7moIfpopg6e2NlbGxWYWx1ZX08L3A+PC9kaXY+XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogJ2NvbW1lbnRfY29udGVudCcsXG4gICAgICAgICAgbGFiZWw6ICfor4Tku7flhoXlrrknXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiAnY3JlYXRldGltZScsXG4gICAgICAgICAgbGFiZWw6ICfor4Torrrml6XmnJ8nLFxuICAgICAgICAgIHdpZHRoOiAyMDAsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbJ0Zvcm1hdERhdGUnXShjZWxsVmFsdWUsICd5eXl5LU1NLWRkIGhoOm1tJylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiAnYXVkaXQnLFxuICAgICAgICAgIGxhYmVsOiAn54q25oCBJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChjZWxsVmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuICflvoXlrqHmoLgnXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNlbGxWYWx1ZSA9PT0gMSkge1xuICAgICAgICAgICAgICByZXR1cm4gJ+W3sumAmui/hydcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2VsbFZhbHVlID09PSAyKSB7XG4gICAgICAgICAgICAgIHJldHVybiAn5pyq6YCa6L+HJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIHRhYmxlRGF0YTogW10sXG4gICAgICBiYXRjaFByb2Nlc3M6IDEsXG4gICAgICBwcm9jZXNzTGlzdDogW1xuICAgICAgICB7XG4gICAgICAgICAgdmFsdWU6IDEsXG4gICAgICAgICAgbGFiZWw6ICfliKDpmaQnXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBpbmRleDogLTEsXG4gICAgICBwYWdlTm86IDEsXG4gICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICB0b3RhbDogMCxcbiAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlLFxuICAgICAgY29tcG9uZW50TmFtZTogJycsXG4gICAgICBzZWxmU2VsZWN0QWxsOiBmYWxzZSwgLy8g6Ieq5a6a5LmJ55qE5YWo6YCJXG4gICAgICBjb3VudEF1ZGl0V2FpdDogdHJ1ZSxcbiAgICAgIGNvdW50QXVkaXRQYXNzOiBmYWxzZSxcbiAgICAgIGNvdW50QXVkaXROb3RQYXNzOiBmYWxzZSxcbiAgICAgIGNvdW50QXVkaXQ6IGZhbHNlLFxuICAgICAgY291bnRBdWRpdFdhaXROdW06IDAsXG4gICAgICBjb3VudEF1ZGl0UGFzc051bTogMCxcbiAgICAgIGNvdW50QXVkaXROb3RQYXNzTnVtOiAwLFxuICAgICAgY291bnRBdWRpdE51bTogMCxcbiAgICAgIGNvbW1lbnRpZDogJycsXG4gICAgICBjb21tZW50TGlzdDogW10sIC8vIOaJuemHj+WIoOmZpOivhOiuuuaJgOeUqOeahOWuueWZqFxuICAgICAgc2VsZWN0ZWRDb21tZW50SW5mbzoge31cbiAgICB9XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgc2hvd051bGxUYWcgKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgaWYgKCFhcnIpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGVsc2UgaWYgKGFyci5sZW5ndGggPD0gMCkge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgJ2NvbW1lbnQudXNlcl9uaWNrbmFtZScgKCkge1xuICAgICAgdGhpcy5nZXRDb21tZW50TGlzdCgpXG4gICAgfSxcbiAgICAnY29tbWVudC51c2VyX3Bob25lJyAoKSB7XG4gICAgICB0aGlzLmdldENvbW1lbnRMaXN0KClcbiAgICB9LFxuICAgICdjb21tZW50LnRpdGxlJyAoKSB7XG4gICAgICB0aGlzLmdldENvbW1lbnRMaXN0KClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuZ2V0Q291bnRDb21tZW50cygpXG4gICAgdGhpcy5nZXRDb21tZW50TGlzdCgpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKiog6I635Y+W6K+E6K665oC75pWw77yI5YWo6YOo77yM5bey6YCa6L+H77yM5pyq6YCa6L+H77yM5b6F5a6h5qC477yJICoqL1xuICAgIGdldENvdW50Q29tbWVudHMgKCkge1xuICAgICAgQWN0aW9ucy5jb3VudENvbW1lbnRzKCkudGhlbihyZXMgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICB0aGlzLmNvdW50QXVkaXRXYWl0TnVtID0gZGF0YS5jb3VudEF1ZGl0V2FpdFxuICAgICAgICAgIHRoaXMuY291bnRBdWRpdFBhc3NOdW0gPSBkYXRhLmNvdW50QXVkaXRQYXNzXG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0Tm90UGFzc051bSA9IGRhdGEuY291bnRBdWRpdE5vdFBhc3NcbiAgICAgICAgICB0aGlzLmNvdW50QXVkaXROdW0gPSBkYXRhLmNvdW50QXVkaXRcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDlvoXlrqHmoLjnmoTor4Torrrngrnlh7vop6blj5Hkuovku7YgKiovXG4gICAgY2hhbmdlQ29tbWVudCAoZXZlbnQpIHtcbiAgICAgIHN3aXRjaCAoZXZlbnQpIHtcbiAgICAgICAgY2FzZSAnY291bnRBdWRpdFdhaXQnOlxuICAgICAgICAgIHRoaXMuY291bnRBdWRpdFdhaXQgPSB0cnVlXG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0UGFzcyA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0Tm90UGFzcyA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0ID0gZmFsc2VcbiAgICAgICAgICB0aGlzLmdldENvbW1lbnRMaXN0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdjb3VudEF1ZGl0UGFzcyc6XG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0V2FpdCA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0UGFzcyA9IHRydWVcbiAgICAgICAgICB0aGlzLmNvdW50QXVkaXROb3RQYXNzID0gZmFsc2VcbiAgICAgICAgICB0aGlzLmNvdW50QXVkaXQgPSBmYWxzZVxuICAgICAgICAgIHRoaXMuZ2V0Q29tbWVudExpc3QoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2NvdW50QXVkaXROb3RQYXNzJzpcbiAgICAgICAgICB0aGlzLmNvdW50QXVkaXRXYWl0ID0gZmFsc2VcbiAgICAgICAgICB0aGlzLmNvdW50QXVkaXRQYXNzID0gZmFsc2VcbiAgICAgICAgICB0aGlzLmNvdW50QXVkaXROb3RQYXNzID0gdHJ1ZVxuICAgICAgICAgIHRoaXMuY291bnRBdWRpdCA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5nZXRDb21tZW50TGlzdCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnY291bnRBdWRpdCc6XG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0V2FpdCA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0UGFzcyA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0Tm90UGFzcyA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5jb3VudEF1ZGl0ID0gdHJ1ZVxuICAgICAgICAgIHRoaXMuZ2V0Q29tbWVudExpc3QoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog6I635Y+W6K+E6K665YiX6KGoICoqL1xuICAgIGdldENvbW1lbnRMaXN0ICgpIHtcbiAgICAgIGxldCBhdWRpdCA9ICcnXG4gICAgICBhdWRpdCA9IHRoaXMuY291bnRBdWRpdFdhaXQgPyAwIDogYXVkaXRcbiAgICAgIGF1ZGl0ID0gdGhpcy5jb3VudEF1ZGl0UGFzcyA/IDEgOiBhdWRpdFxuICAgICAgYXVkaXQgPSB0aGlzLmNvdW50QXVkaXROb3RQYXNzID8gMiA6IGF1ZGl0XG4gICAgICB0aGlzLiRvcHRpb25zLmZpbHRlcnNbJ3N3YXBUaW1lJ10odGhpcy5jb21tZW50KVxuICAgICAgbGV0IHRpbWVTdGFydCA9IHRoaXMuY29tbWVudC5zdGFydERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLmNvbW1lbnQuc3RhcnREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBsZXQgdGltZUVuZCA9IHRoaXMuY29tbWVudC5lbmREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5jb21tZW50LmVuZERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIEFjdGlvbnMuZ2V0Q29tbWVudExpc3Qoe1xuICAgICAgICAncGFnZU5vJzogdGhpcy5wYWdlTm8sXG4gICAgICAgICdwYWdlU2l6ZSc6IHRoaXMucGFnZVNpemUsXG4gICAgICAgICd1c2VyX25pY2tuYW1lJzogdGhpcy5jb21tZW50LnVzZXJfbmlja25hbWUsXG4gICAgICAgICd1c2VyX3Bob25lJzogdGhpcy5jb21tZW50LnVzZXJfcGhvbmUsXG4gICAgICAgICd0eXBlJzogdGhpcy5jb21tZW50LnR5cGUsXG4gICAgICAgICd0aXRsZSc6IHRoaXMuY29tbWVudC50aXRsZSxcbiAgICAgICAgJ2F1ZGl0JzogYXVkaXQsXG4gICAgICAgICd0aW1lU3RhcnQnOiB0aW1lU3RhcnQsXG4gICAgICAgICd0aW1lRW5kJzogdGltZUVuZFxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gZGF0YS5saXN0XG4gICAgICAgICAgdGhpcy50b3RhbCA9IGRhdGEudG90YWxcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGhhbmRsZVNpemVDaGFuZ2UgKHBhZ2VTaXplKSB7XG4gICAgICB0aGlzLnBhZ2VTaXplID0gcGFnZVNpemVcbiAgICAgIHRoaXMuZ2V0Q29tbWVudExpc3QoKVxuICAgIH0sXG4gICAgaGFuZGxlQ3VycmVudENoYW5nZSAocGFnZUluZGV4KSB7XG4gICAgICB0aGlzLnBhZ2VObyA9IHBhZ2VJbmRleFxuICAgICAgdGhpcy5nZXRDb21tZW50TGlzdCgpXG4gICAgfSxcbiAgICAvKiog6I635Y+W5YWo6YCJ55qE5pWw5o2uICoqL1xuICAgIHNlbGVjdEFsbCAoZSkge1xuICAgICAgaWYgKGUubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLnNlbGZTZWxlY3RBbGwgPSB0cnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNlbGZTZWxlY3RBbGwgPSBmYWxzZVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOe9rumhtiAqKi9cbiAgICBzZXRNYW51VW5Ub3AgKHJvdykge1xuICAgICAgaWYgKHJvdy5hdWRpdCA9PT0gMSkge1xuICAgICAgICBBY3Rpb25zLnRvcENvbW1lbnRzKHtcbiAgICAgICAgICAnY29tbWVudFZvJzoge1xuICAgICAgICAgICAgJ2NvbW1lbnRpZCc6IHJvdy5jb21tZW50aWQsXG4gICAgICAgICAgICAndG9wJzogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSkudGhlbihyZXMgPT4ge1xuICAgICAgICAgIHRoaXMuZ2V0Q29tbWVudExpc3QoKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICBtZXNzYWdlOiAn5a6h5qC46YCa6L+H55qE6K+E6K665omN6IO9572u6aG2ISdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDlj5bmtojnva7pobYgKiovXG4gICAgc2V0TWFudVRvcCAocm93KSB7XG4gICAgICBBY3Rpb25zLnRvcENvbW1lbnRzKHtcbiAgICAgICAgJ2NvbW1lbnRWbyc6IHtcbiAgICAgICAgICAnY29tbWVudGlkJzogcm93LmNvbW1lbnRpZCxcbiAgICAgICAgICAndG9wJzogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSkudGhlbihyZXMgPT4ge1xuICAgICAgICB0aGlzLmdldENvbW1lbnRMaXN0KClcbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog5Yig6Zmk6K+E6K66ICoqL1xuICAgIGRlbGV0ZUNvbW1lbnRzIChyb3cpIHtcbiAgICAgIHRoaXMuJGNvbmZpcm0oJ+aYr+WQpuWIoOmZpFwiJyArIHJvdy51c2VyX25pY2tuYW1lICsgJ1wi55qE6K+E6K66PycsICfmj5DnpLonLCB7XG4gICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn56Gu5a6aJyxcbiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ+WPlua2iCcsXG4gICAgICAgIHR5cGU6ICd3YXJuaW5nJ1xuICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgIEFjdGlvbnMuZGVsZXRlQ29tbWVudHMoe1xuICAgICAgICAgICdjb21tZW50Vm8nOiB7XG4gICAgICAgICAgICAnY29tbWVudGlkJzogcm93LmNvbW1lbnRpZFxuICAgICAgICAgIH1cbiAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICfliKDpmaTmiJDlip8hJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5nZXRDb21tZW50TGlzdCgpXG4gICAgICAgICAgdGhpcy5nZXRDb3VudENvbW1lbnRzKClcbiAgICAgICAgfSlcbiAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog56aB6KiA55So5oi3ICoqL1xuICAgIGZvcmJpZGRlblVzZXIgKHJvdykge1xuICAgICAgaWYgKCFyb3cudXNlcl9mb3JiaWRkZW4pIHtcbiAgICAgICAgQWN0aW9ucy5mb3JiaWRkZW5Vc2VyQ29tbWVudCh7XG4gICAgICAgICAgJ2ZvcmJpZGRlbkNvbW1lbnRWbyc6IHtcbiAgICAgICAgICAgICd1c2VyaWQnOiByb3cudXNlcmlkXG4gICAgICAgICAgfVxuICAgICAgICB9KS50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgICd0eXBlJzogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAnbWVzc2FnZSc6ICfnpoHoqIDmiJDlip8nXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdGhpcy5nZXRDb21tZW50TGlzdCgpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQWN0aW9ucy5jYW5jZWxGb3JiaWRkZW5Db21tZW50KHtcbiAgICAgICAgICAnZm9yYmlkZGVuQ29tbWVudFZvJzoge1xuICAgICAgICAgICAgJ3VzZXJpZCc6IHJvdy51c2VyaWRcbiAgICAgICAgICB9XG4gICAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgICAgJ3R5cGUnOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICdtZXNzYWdlJzogJ+WPlua2iOemgeiogOaIkOWKnydcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLmdldENvbW1lbnRMaXN0KClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog6K+E6K665p+l55yLICoqL1xuICAgIGxvb2tDb21tZW50IChyb3cpIHtcbiAgICAgIHRoaXMuY29tbWVudC51c2VyX25pY2tuYW1lID0gcm93LnVzZXJfbmlja25hbWVcbiAgICAgIHRoaXMuY29tbWVudC51c2VyX3Bob25lID0gcm93LnVzZXJfcGhvbmVcbiAgICAgIC8vIHRoaXMuY29tbWVudC50aXRsZSA9IHJvdy50aXRsZVxuICAgICAgdGhpcy5nZXRDb21tZW50TGlzdCgpXG4gICAgfSxcbiAgICAvKiog5a6h5qC45oSP6KeBICoqL1xuICAgIGF1ZGl0X29waW5pb24gKHJvdykge1xuICAgICAgbGV0IHRpcENvbnRlbnQgPSAnJ1xuICAgICAgaWYgKHJvdy5hdWRpdF9vcGluaW9uKSB7XG4gICAgICAgIHRpcENvbnRlbnQgPSByb3cuYXVkaXRfb3BpbmlvblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGlwQ29udGVudCA9ICfmmoLml6DlrqHmoLjmhI/op4EnXG4gICAgICB9XG4gICAgICB0aGlzLiRhbGVydCh0aXBDb250ZW50LCAn5a6h5qC45oSP6KeBJywge1xuICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+ehruWumicsXG4gICAgICAgIGNhbGxiYWNrOiBhY3Rpb24gPT4ge1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOWuoeaguCAqKi9cbiAgICBhdWRpdCAocm93KSB7XG4gICAgICBpZiAocm93LmF1ZGl0ID09PSAwKSB7XG4gICAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IHRydWVcbiAgICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gJ0F1ZGl0J1xuICAgICAgICB0aGlzLmNvbW1lbnRpZCA9IHJvdy5jb21tZW50aWRcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDojrflj5bmiYDmnInpgInmi6nnmoTnqL/ku7ZJRCAqKi9cbiAgICBzZWxlY3Rpb25DaGFuZ2UgKHNlbGVjdGlvbikge1xuICAgICAgdGhpcy5jb21tZW50TGlzdCA9IFtdXG4gICAgICBzZWxlY3Rpb24uZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICB0aGlzLmNvbW1lbnRMaXN0LnB1c2goaXRlbS5jb21tZW50aWQpXG4gICAgICB9KVxuICAgICAgdGhpcy5zZWxlY3RlZENvbW1lbnRJbmZvID0gc2VsZWN0aW9uXG4gICAgfSxcbiAgICAvKiog5om56YeP5Yig6Zmk6K+E6K66ICoqL1xuICAgIGRlbGV0ZU1hbnlDb21tZW50ICgpIHtcbiAgICAgIGlmICh0aGlzLmNvbW1lbnRMaXN0Lmxlbmd0aCA8PSAwKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgbWVzc2FnZTogJ+ivt+iHs+WwkemAieaLqeS4gOadoeivhOiuuiEnXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgbGV0IHRpcENvbnRlbnQgPSAn5oKo5omA6YCJ5oup55qEOlwiJ1xuICAgICAgLyoqIOW3suS4iue6v+eahOeov+S7tuS4jeWPr+WIoOmZpOeahOaPkOekuiAqKi9cbiAgICAgIHRoaXMuc2VsZWN0ZWRDb21tZW50SW5mby5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgIHRpcENvbnRlbnQgKz0gJygnICsgaXRlbS51c2VyX25pY2tuYW1lICsgJyknXG4gICAgICB9KVxuICAgICAgdGhpcy4kY29uZmlybSh0aXBDb250ZW50ICsgJ+eUqOaIt+ivhOiuuuWNs+Wwhuiiq+WIoOmZpD8nLCAn5o+Q56S6Jywge1xuICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+ehruWumicsXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognLFxuICAgICAgICB0eXBlOiAnd2FybmluZydcbiAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICBBY3Rpb25zLmJhdGNoRGVsZXRlQ29tbWVudHMoe1xuICAgICAgICAgICdpZExpc3QnOiB0aGlzLmNvbW1lbnRMaXN0XG4gICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKHJlcylcbiAgICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ+aJuemHj+WIoOmZpOaIkOWKnyEnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmdldENvbW1lbnRMaXN0KClcbiAgICAgICAgICB0aGlzLmdldENvdW50Q29tbWVudHMoKVxuICAgICAgICB9KVxuICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDlhbPpl63lr7nor53moYYgKiovXG4gICAgY2xvc2VEaWFsb2cgKCkge1xuICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gJydcbiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IGZhbHNlXG4gICAgICB0aGlzLmdldENvbW1lbnRMaXN0KClcbiAgICAgIHRoaXMuZ2V0Q291bnRDb21tZW50cygpXG4gICAgfSxcbiAgICB0b2dnbGVBbGxTZWxlY3Rpb24gKGUpIHtcbiAgICAgIHRoaXMuJHJlZnMuY2hhbm5lbFRhYmxlLnRvZ2dsZUFsbFNlbGVjdGlvbigpXG4gICAgfVxuICB9XG59XG48XC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuICAucGFnaW5hdGlvbntcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIH1cbiAgLm1hbnV7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIGhlaWdodDogMjBweDtcbiAgICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gICAgYm9yZGVyLXJhZGl1czogMjBweDtcbiAgICBmb250LXNpemU6IDEzcHg7XG4gICAgcGFkZGluZzogMXB4IDVweCAycHggNXB4O1xuICAgIGNvbG9yOiByZ2JhKDE4MSwgMTg0LCAyMTcsIDEpO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuICAubWFudS11cC1hY3RpdmV7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyMzEsIDEyNSwgMCwgMSk7XG4gICAgY29sb3I6cmdiYSgyMzEsIDEyNSwgMCwgMSk7XG4gIH1cbiAgLm1hbnUtYmFjay1hY3RpdmV7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyNDAsIDgsIDgsIDEpO1xuICAgIGNvbG9yOnJnYmEoMjQwLCA4LCA4LCAxKTtcbiAgfVxuICAuZGVsZXRlLWFjdGl2ZXtcbiAgICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTA1LCA3OCwgMjU1LCAxKTtcbiAgICBjb2xvcjogcmdiYSgxMDUsIDc4LCAyNTUsIDEpO1xuICB9XG4gIC5jb21tZW50LWRldGFpbHtcbiAgICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMjMxLDEyNSwwLDEpO1xuICAgIGNvbG9yOiByZ2JhKDIzMSwxMjUsMCwxKTtcbiAgfVxuICAuZGF0ZS1sZWZ0e1xuICAgIG1hcmdpbi1sZWZ0OiAyOHB4O1xuICB9XG4gIC5jb21tZW50LXRvcC1pbmZve1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIHdpZHRoOiA5NSU7XG4gICAgaGVpZ2h0OiAxMjBweDtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgICBtYXJnaW4tYm90dG9tOiA2MHB4O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNEQURFREY7XG4gIH1cbiAgLmNvbW1lbnQtaW5mby1pdGVte1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI0RBREVERjtcbiAgICB3aWR0aDogMjUlO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuICAuYm94IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIG1hcmdpbjogYXV0bztcbiAgfVxuICAuY2hhbmdlLWJhY2tncm91ZHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIG1hcmdpbjogYXV0bztcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjk0RUZGO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgfVxuICAuY29tbWVudC1kYXRhIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgbWFyZ2luLWxlZnQ6IDE1cHg7XG4gICAgY29sb3I6cmdiYSg3MSw3MSw3MSwxKTtcbiAgfVxuICAuY29tbWVudC1kYXRhIHNwYW46Zmlyc3QtY2hpbGQge1xuICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgfVxuICAuY29tbWVudC1kYXRhIHNwYW46bGFzdC1jaGlsZHtcbiAgICBmb250LXNpemU6MTRweDtcbiAgfVxuICAuY29tbWVudC1pY29uLWNvbnRhaW5lcntcbiAgICB3aWR0aDo2MHB4O1xuICAgIGhlaWdodDogNjBweDtcbiAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBsaW5lLWhlaWdodDogNjhweDtcbiAgfVxuICAuY29tbWVudC1hY3RpdmUtYmd7XG4gICAgYmFja2dyb3VuZDogcmdiYSgxMDUsNzgsMjU1LDEpO1xuICB9XG4gIC5pY29uLWNvbnRhaW5lci1iZ3tcbiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgfVxuICAuaWNvbi1jb2xvcntcbiAgICBjb2xvcjogIzY5NEVGRjtcbiAgfVxuICAuY29tbWVudC1maXJzdC1iZ3tcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjA2LCA5MSwgMSk7XG4gIH1cbiAgLmNvbW1lbnQtc2VjLWJne1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjUzLDExMSw4OCwxKTtcbiAgfVxuICAuY29tbWVudC10aHItYmd7XG4gICAgYmFja2dyb3VuZDogcmdiYSg5NSwgMTU3LCAyNDksIDEpO1xuICB9XG4gIC5jb21tZW50LWZvdXItYmd7XG4gICAgYmFja2dyb3VuZDogcmdiYSgxMjAsIDIzMiwgMjI5LCAxKTtcbiAgfVxuICAuY29tbWVudC1pY29uLWNvbnRhaW5lciBpe1xuICAgIGZvbnQtc2l6ZTogMzBweDtcbiAgICBjb2xvcjp3aGl0ZTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIH1cbjwvc3R5bGU+XG48c3R5bGU+XG4gIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmJ0bi1jb250YWluZXIgLmVsLWJ1dHRvbntcbiAgICBwYWRkaW5nOiAxMnB4IDEwcHg7XG4gIH1cbiAgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuYnRuLWNvbnRhaW5lciAuZWwtaWNvbi0tcmlnaHR7XG4gICAgbWFyZ2luOiAwO1xuICB9XG4gIC5jdXN0b20tZGlhbG9nIC5lbC1kaWFsb2dfX2hlYWRlcntcbiAgICAvKnBhZGRpbmc6IDA7Ki9cbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSgxOTIsMTkwLDI1NSwxKTtcbiAgfVxuICAuZWwtdG9vbHRpcF9fcG9wcGVye1xuICAgIG1heC13aWR0aDogMzAwcHg7XG4gIH1cbiAgLmNvb21tZW50LWxpc3QgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICB3aWR0aDogNjUlO1xuICB9XG4gIC5jb29tbWVudC1saXN0IC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmVsLWZvcm0taXRlbSB7XG4gICAgd2lkdGg6IDIzJTtcbiAgfVxuPC9zdHlsZT5cbiJdLHNvdXJjZVJvb3Q6IiJ9XSl9LHFxSXk6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi5lbC1kaWFsb2dfX2hlYWRlcntcbiAgcGFkZGluZzogMTNweCAzMHB4IDEzcHg7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjQzBCRUZGO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjdGQUZGO1xufVxuLmVsLWRpYWxvZ19fdGl0bGUge1xuICBsaW5lLWhlaWdodDogMTdweDtcbiAgZm9udC1zaXplOiAxN3B4O1xuICBjb2xvcjogIzMwMzEzMztcbn1cbi5lbC1kaWFsb2dfX2hlYWRlcmJ0biB7XG4gIHRvcDogMTNweDtcbn1cbi5lbC1kaWFsb2dfX2JvZHkge1xuICBwYWRkaW5nOiAyMHB4IDYwcHggMHB4IDYwcHg7XG59XG4uYWRkVXNlciAuZWwtZm9ybSB7XG4gIG1hcmdpbi10b3A6IDE1cHg7XG59XG4uYWRkVXNlciAuZWwtZm9ybS1pdGVtIHtcbiAgd2lkdGg6IDEwMCU7XG59XG4uYWRkVXNlciAuc3VibWl0IC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnR7XG4gIGZsb2F0OiByaWdodDtcbiAgd2lkdGg6IDE2MHB4O1xufVxuLnNlbGVjdC1yb2xlIHtcbiAgYm9yZGVyOiAxcHggc29saWQgIzY5NEVGRjtcbiAgYmFja2dyb3VuZC1jb2xvcjogI0VCRjVGRjtcbiAgY29sb3I6ICM2OTRFRkY7XG4gIHBhZGRpbmc6OHB4IDIycHggOHB4IDIycHg7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbn1cbi5hZGRVc2VyIC5lbC1zZWxlY3Qge1xuICB3aWR0aDogMTAwJTtcbn1cbi50YWJsZS1saXN0cyB7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG59XG4udGFibGUtbGlzdHMgdGhlYWQgdHIgdGgge1xuICBiYWNrZ3JvdW5kOiAjNzE2QkZGO1xuICBjb2xvcjogd2hpdGU7XG4gIGJvcmRlci1jb2xvcjojNzE2QkZGIDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VSb2xlL3NyYy9jb21wb25lbnRzL21hbmFnZVJvbGUvZWRpdFJvbGUudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQTZLQTtFQUNBLHdCQUFBO0VBQ0EsaUNBQUE7RUFDQSwwQkFBQTtDQUNBO0FBQ0E7RUFDQSxrQkFBQTtFQUNBLGdCQUFBO0VBQ0EsZUFBQTtDQUNBO0FBQ0E7RUFDQSxVQUFBO0NBQ0E7QUFDQTtFQUNBLDRCQUFBO0NBQ0E7QUFDQTtFQUNBLGlCQUFBO0NBQ0E7QUFDQTtFQUNBLFlBQUE7Q0FDQTtBQUNBO0VBQ0EsYUFBQTtFQUNBLGFBQUE7Q0FDQTtBQUNBO0VBQ0EsMEJBQUE7RUFDQSwwQkFBQTtFQUNBLGVBQUE7RUFDQSwwQkFBQTtFQUNBLG1CQUFBO0NBQ0E7QUFDQTtFQUNBLFlBQUE7Q0FDQTtBQUNBO0VBQ0EsaUJBQUE7RUFDQSxvQkFBQTtDQUNBO0FBQ0E7RUFDQSxvQkFBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtFQUNBLG1CQUFBO0NBQ0EiLGZpbGU6ImVkaXRSb2xlLnZ1ZSIsc291cmNlc0NvbnRlbnQ6WyI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJhZGRVc2VyXCI+XG4gICAgPGVsLWZvcm1cbiAgICAgIHJlZj1cInJ1bGVGb3JtXCJcbiAgICAgIDptb2RlbD1cInJ1bGVGb3JtXCJcbiAgICAgIDpydWxlcz1cInJ1bGVzXCI+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPVwi6KeS6Imy5ZCN56ewXCJcbiAgICAgICAgcHJvcD1cInJvbGVfbmFtZVwiPlxuICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICB2LW1vZGVsLnRyaW09XCJydWxlRm9ybS5yb2xlX25hbWVcIlxuICAgICAgICAgIHN0eWxlPVwid2lkdGg6MjYwcHg7XCJcbiAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgPC9lbC1mb3JtPlxuICAgIDxkaXYgY2xhc3M9XCJ0YWJsZS1saXN0c1wiPlxuICAgICAgPHAgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiAxMHB4O1wiPuadg+mZkOmFjee9ru+8mjwvcD5cbiAgICAgIDx0cmVlLXRyYW5zZmVyXG4gICAgICAgIDp0aXRsZT1cInRpdGxlXCJcbiAgICAgICAgOmZyb21fZGF0YT1cImZyb21EYXRhXCJcbiAgICAgICAgOnRvX2RhdGE9XCJ0b0RhdGFcIlxuICAgICAgICA6ZGVmYXVsdC1wcm9wcz1cIntsYWJlbDonbGFiZWwnfVwiXG4gICAgICAgIDptb2RlPVwibW9kZVwiXG4gICAgICAgIDpmaWx0ZXI9XCJmYWxzZVwiXG4gICAgICAgIG9wZW4tYWxsXG4gICAgICAgIGhlaWdodD1cIjQ0MHB4XCJcbiAgICAgICAgQGFkZEJ0biA9IFwiYWRkQXV0aFwiXG4gICAgICAgIEByZW1vdmVCdG4gPSBcInJlbW92ZUF1dGhcIi8+XG4gICAgPC9kaXY+XG4gICAgPGVsLWZvcm0taXRlbVxuICAgICAgY2xhc3M9XCJzdWJtaXRcIlxuICAgICAgc3R5bGU9XCJ3aWR0aDoxMDAlXCI+XG4gICAgICA8ZWwtYnV0dG9uXG4gICAgICAgIEBjbGljaz1cImNhbmNlbFwiPuWPlua2iDwvZWwtYnV0dG9uPlxuICAgICAgPGVsLWJ1dHRvblxuICAgICAgICB0eXBlPVwicHJpbWFyeVwiXG4gICAgICAgIEBjbGljaz1cIm9uU3VibWl0KCdydWxlRm9ybScpXCI+5o+Q5LqkPC9lbC1idXR0b24+XG4gICAgPC9lbC1mb3JtLWl0ZW0+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgdHJlZVRyYW5zZmVyIGZyb20gJ2VsLXRyZWUtdHJhbnNmZXInXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gJ0AvYXBpL3N5c3RlbVVzZXJzQXBpJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnQWRkUm9sZScsXG4gIGNvbXBvbmVudHM6IHtcbiAgICB0cmVlVHJhbnNmZXJcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICByb2xlaWQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfVxuICB9LFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcnVsZUZvcm06IHtcbiAgICAgICAgcm9sZV9uYW1lOiAnJ1xuICAgICAgfSxcbiAgICAgIG1vZGU6ICd0cmFuc2ZlcicsIC8vIHRyYW5zZmVyIGFkZHJlc3NMaXN0XG4gICAgICBmcm9tRGF0YTogW10sXG4gICAgICB0b0RhdGE6IFtdLFxuICAgICAgdGl0bGU6IFsn5YWo6YOo5p2D6ZmQJywgJ+W3sumAieaLqeadg+mZkCddLFxuICAgICAgcnVsZXM6IHtcbiAgICAgICAgcm9sZV9uYW1lOiBbXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogJ+ivt+i+k+WFpeinkuiJsuWQjeensCcsIHRyaWdnZXI6ICdibHVyJyB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBpZEFycjogW11cbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIC8qKiDojrflj5bmoJEgKiovXG4gICAgdGhpcy5nZXRUcmVlUGVybWlzc2lvbigpXG4gICAgLyoqIOiOt+WPlue8lui+keS/oeaBryAqKi9cbiAgICB0aGlzLmdldFJvbGVEZXRhaWxzKClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldFRyZWVQZXJtaXNzaW9uICgpIHtcbiAgICAgIEFjdGlvbnMuZ2V0VHJlZVBlcm1pc3Npb24oKS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLmZyb21EYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBnZXRSb2xlRGV0YWlscyAoKSB7XG4gICAgICBBY3Rpb25zLmdldFJvbGVEZXRhaWxzKHtcbiAgICAgICAgJ3JvbGUnOiB7XG4gICAgICAgICAgJ3JvbGVpZCc6IHRoaXMucm9sZWlkXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy5ydWxlRm9ybS5yb2xlX25hbWUgPSBkYXRhLm5hbWVcbiAgICAgICAgICB0aGlzLnRvRGF0YSA9IGRhdGEudHJlZVBlcm1pc3Npb24gfHwgW11cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGdldEFsbFNlbGVjdGVkSWQgKCkge1xuICAgICAgdGhpcy50b0RhdGEuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICB0aGlzLmlkQXJyLnB1c2goaXRlbS5pZClcbiAgICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuZ2V0Q2hpbGRyZW5JZChpdGVtLmNoaWxkcmVuKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgZ2V0Q2hpbGRyZW5JZCAoYXJyKSB7XG4gICAgICBhcnIuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICB0aGlzLmlkQXJyLnB1c2goaXRlbS5pZClcbiAgICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuZ2V0Q2hpbGRyZW5JZChpdGVtLmNoaWxkcmVuKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgb25TdWJtaXQgKGZvcm1OYW1lKSB7XG4gICAgICB0aGlzLiRyZWZzW2Zvcm1OYW1lXS52YWxpZGF0ZSgodmFsaWQpID0+IHtcbiAgICAgICAgaWYgKHZhbGlkKSB7XG4gICAgICAgICAgdGhpcy5pZEFyciA9IFtdXG4gICAgICAgICAgdGhpcy5nZXRBbGxTZWxlY3RlZElkKClcbiAgICAgICAgICBBY3Rpb25zLnVwZGF0ZVJvbGUoe1xuICAgICAgICAgICAgJ3JvbGUnOiB7XG4gICAgICAgICAgICAgICdyb2xlaWQnOiB0aGlzLnJvbGVpZCxcbiAgICAgICAgICAgICAgJ25hbWUnOiB0aGlzLnJ1bGVGb3JtLnJvbGVfbmFtZSxcbiAgICAgICAgICAgICAgJ3Blcm1pc3Npb25pZExpc3QnOiB0aGlzLmlkQXJyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKVxuICAgICAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgICAgICB0aGlzLiRub3RpZnkoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+aIkOWKnycsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ+e8lui+keinkuiJsuaIkOWKnydcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2xvc2VEaWFsb2cnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yIHN1Ym1pdCEhJylcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGNhbmNlbCAoKSB7XG4gICAgICB0aGlzLiRlbWl0KCdjbG9zZURpYWxvZycpXG4gICAgfSxcbiAgICBhZGRBdXRoIChmcm9tRGF0YSwgdG9EYXRhLCBvYmopIHtcbiAgICAgIHRoaXMudG9EYXRhID0gdG9EYXRhXG4gICAgfSxcbiAgICByZW1vdmVBdXRoIChmcm9tRGF0YSwgdG9EYXRhLCBvYmopIHtcbiAgICAgIHRoaXMudG9EYXRhID0gdG9EYXRhXG4gICAgfVxuICB9XG5cbn1cbjxcL3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbiAgLmVsLWJ1dHRvbi0tcHJpbWFyeSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzcxNkJGRjtcbiAgICBib3JkZXItY29sb3I6ICM3MTZCRkY7XG4gIH1cbiAgLmVsLWJ1dHRvbi0tZGVmYXVsdCB7XG4gICAgY29sb3I6ICM3MTZCRkYgO1xuICAgIGJvcmRlci1jb2xvcjogIzcxNkJGRjtcbiAgfVxuICAuYWRkVXNlciAuZWwtY2hlY2tib3gge1xuICAgIGZsb2F0OiBsZWZ0O1xuICB9XG4gIC5hZGRVc2VyIC5jaGVjay1hbGwge1xuICAgIG1hcmdpbi1yaWdodDogMzBweDtcbiAgfVxuPC9zdHlsZT5cbjxzdHlsZT5cbiAgLmVsLWRpYWxvZ19faGVhZGVye1xuICAgIHBhZGRpbmc6IDEzcHggMzBweCAxM3B4O1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjQzBCRUZGO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNGN0ZBRkY7XG4gIH1cbiAgLmVsLWRpYWxvZ19fdGl0bGUge1xuICAgIGxpbmUtaGVpZ2h0OiAxN3B4O1xuICAgIGZvbnQtc2l6ZTogMTdweDtcbiAgICBjb2xvcjogIzMwMzEzMztcbiAgfVxuICAuZWwtZGlhbG9nX19oZWFkZXJidG4ge1xuICAgIHRvcDogMTNweDtcbiAgfVxuICAuZWwtZGlhbG9nX19ib2R5IHtcbiAgICBwYWRkaW5nOiAyMHB4IDYwcHggMHB4IDYwcHg7XG4gIH1cbiAgLmFkZFVzZXIgLmVsLWZvcm0ge1xuICAgIG1hcmdpbi10b3A6IDE1cHg7XG4gIH1cbiAgLmFkZFVzZXIgLmVsLWZvcm0taXRlbSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbiAgLmFkZFVzZXIgLnN1Ym1pdCAuZWwtZm9ybS1pdGVtX19jb250ZW50e1xuICAgIGZsb2F0OiByaWdodDtcbiAgICB3aWR0aDogMTYwcHg7XG4gIH1cbiAgLnNlbGVjdC1yb2xlIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNjk0RUZGO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNFQkY1RkY7XG4gICAgY29sb3I6ICM2OTRFRkY7XG4gICAgcGFkZGluZzo4cHggMjJweCA4cHggMjJweDtcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIH1cbiAgLmFkZFVzZXIgLmVsLXNlbGVjdCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbiAgLnRhYmxlLWxpc3RzIHtcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIH1cbiAgLnRhYmxlLWxpc3RzIHRoZWFkIHRyIHRoIHtcbiAgICBiYWNrZ3JvdW5kOiAjNzE2QkZGO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXItY29sb3I6IzcxNkJGRiA7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG48L3N0eWxlPlxuIl0sc291cmNlUm9vdDoiIn1dKX0scXVuSjpmdW5jdGlvbihlLG4pe30sck16ZDpmdW5jdGlvbihlLG4pe30sInJSLy8iOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJnempMIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjE2MGM2OWE0IixhLCExLHt9KX0sczk2NzpmdW5jdGlvbihlLG4pe30sc2d5dTpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLmNpY2xlLWNvbnRyb2xsZXJbZGF0YS12LTEwMjMwYzc4XSB7XG4gIG1hcmdpbi10b3A6IDQlO1xufVxuLmNyZWF0ZSAuc29ydCBzcGFuW2RhdGEtdi0xMDIzMGM3OF17XG4gIGNvbG9yOiAjOTA5MDkwO1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VTbGlkZS9zcmMvY29tcG9uZW50cy9tYW5hZ2VTbGlkZS9zbGlkZUVkaXQudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQW9XQTtFQUNBLGVBQUE7Q0FDQTtBQUNBO0VBQ0EsZUFBQTtDQUNBIixmaWxlOiJzbGlkZUVkaXQudnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0ic2xpZGUgY3JlYXRlIj5cbiAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICB0aXRsZS1uYW1lPSLova7mkq3lm77nvJbovpEiXG4gICAgICBjbGFzcz0iY2ljbGUtY29udHJvbGxlciJcbiAgICAvPlxuICAgIDxlbC1mb3JtXG4gICAgICByZWY9InJ1bGVGb3JtIlxuICAgICAgOm1vZGVsPSJydWxlRm9ybSJcbiAgICAgIDpydWxlcz0icnVsZXMiXG4gICAgICBsYWJlbC13aWR0aD0iMTAwcHgiXG4gICAgICBjbGFzcz0icnVsZS1mb3JtIj5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9Iui9ruaSreWbvuagh+mimCJcbiAgICAgICAgcHJvcD0iY2hhcnRfbmFtZSI+XG4gICAgICAgIDxlbC1pbnB1dCB2LW1vZGVsLnRyaW09InJ1bGVGb3JtLmNoYXJ0X25hbWUiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgbGFiZWw9IuS4iuS8oOWbvueJhyJcbiAgICAgICAgcHJvcD0iaWNvbiI+XG4gICAgICAgIDxlbC11cGxvYWRcbiAgICAgICAgICA6YWN0aW9uPSJnZXRVcGxvYWRVcmwiXG4gICAgICAgICAgOmhlYWRlcnM9InVwbG9hZEhlYWRlcnMiXG4gICAgICAgICAgOnNob3ctZmlsZS1saXN0PSJmYWxzZSJcbiAgICAgICAgICA6b24tc3VjY2Vzcz0iaGFuZGxlUGNBdmF0YXJTdWNjZXNzIlxuICAgICAgICAgIDpiZWZvcmUtdXBsb2FkPSJiZWZvcmVBdmF0YXJVcGxvYWQiXG4gICAgICAgICAgY2xhc3M9ImF2YXRhci11cGxvYWRlciI+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgdi1pZj0icnVsZUZvcm0uaWNvbiJcbiAgICAgICAgICAgIDpzcmM9InJ1bGVGb3JtLmljb24iXG4gICAgICAgICAgICBjbGFzcz0iYXZhdGFyIj5cbiAgICAgICAgICA8aVxuICAgICAgICAgICAgdi1lbHNlXG4gICAgICAgICAgICBjbGFzcz0iZWwtaWNvbi1wbHVzIGF2YXRhci11cGxvYWRlci1pY29uIi8+XG4gICAgICAgIDwvZWwtdXBsb2FkPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLlhbPogZTlhoXlrrkiXG4gICAgICAgIHByb3A9InJlbGF0aXZlQ29udGVudCI+XG4gICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgIHYtbW9kZWw9InJ1bGVGb3JtLnJlbGF0aXZlQ29udGVudCJcbiAgICAgICAgICBkaXNhYmxlZFxuICAgICAgICAgIHN0eWxlPSJ3aWR0aDogODclIi8+XG4gICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTElO21hcmdpbi1sZWZ0OiAxJSJcbiAgICAgICAgICBAY2xpY2s9ImRpYWxvZ1Zpc2libGUgPSB0cnVlIj7mt7vliqA8L2VsLWJ1dHRvbj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWRpYWxvZ1xuICAgICAgICA6dmlzaWJsZS5zeW5jPSJkaWFsb2dWaXNpYmxlIlxuICAgICAgICB0aXRsZT0i6YCJ5oup5YWz6IGU5YaF5a65IlxuICAgICAgICB3aWR0aD0iNzAlIj5cbiAgICAgICAgPGVsLXJhZGlvLWdyb3VwXG4gICAgICAgICAgdi1tb2RlbD0icmFkaW8iXG4gICAgICAgICAgdGV4dC1jb2xvcj0iI2ZmZmZmZiJcbiAgICAgICAgICBmaWxsPSIjNjk0RUZGIlxuICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgIEBjaGFuZ2U9ImhhbmRsZU9wZXJhdGlvbkNsaWNrKHJhZGlvKSI+XG4gICAgICAgICAgPGVsLXJhZGlvLWJ1dHRvbiBsYWJlbD0i56i/5Lu2Ii8+XG4gICAgICAgICAgPGVsLXJhZGlvLWJ1dHRvbiBsYWJlbD0i5LiT6aKYIi8+XG4gICAgICAgIDwvZWwtcmFkaW8tZ3JvdXA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICA6aXM9ImNvbXBvbmVudE5hbWUiXG4gICAgICAgICAgQHNlbGVjdGVkLXJvdz0ic2VsZWN0ZWRSb3ciLz5cbiAgICAgIDwvZWwtZGlhbG9nPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5b2S5bGe6aKR6YGTIlxuICAgICAgICBwcm9wPSJjaGFubmVsaWQiPlxuICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgdi1tb2RlbD0icnVsZUZvcm0uY2hhbm5lbGlkIlxuICAgICAgICAgIGZpbHRlcmFibGVcbiAgICAgICAgICBjbGVhcmFibGVcbiAgICAgICAgICBwbGFjZWhvbGRlcj0iIj5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBjaGFubmVsVHlwZUxpc3QiXG4gICAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSJcbiAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5pyJ5pWI5pyfIlxuICAgICAgICBjbGFzcz0iaW5kYXRlIlxuICAgICAgICByZXF1aXJlZD5cbiAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgdi1tb2RlbD0icnVsZUZvcm0uaW5kYXRlIlxuICAgICAgICAgIDpjbGVhcmFibGU9ImZhbHNlIlxuICAgICAgICAgIHN0eWxlPSJ3aWR0aDoxMDAlIlxuICAgICAgICAgIHR5cGU9ImRhdGV0aW1lcmFuZ2UiXG4gICAgICAgICAgcmFuZ2Utc2VwYXJhdG9yPSLoh7MiXG4gICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgIHN0YXJ0LXBsYWNlaG9sZGVyPSLlvIDlp4vml6XmnJ8iXG4gICAgICAgICAgZW5kLXBsYWNlaG9sZGVyPSLnu5PmnZ/ml6XmnJ8iLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i54q25oCB6YCJ5oupIlxuICAgICAgICBwcm9wPSJzdGF0ZSI+XG4gICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICB2LW1vZGVsPSJydWxlRm9ybS5zdGF0ZSJcbiAgICAgICAgICBwbGFjZWhvbGRlcj0i6K+36YCJ5oupIj5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICA6dmFsdWU9IjEiXG4gICAgICAgICAgICBsYWJlbD0i5ZCv55SoIi8+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgOnZhbHVlPSIwIlxuICAgICAgICAgICAgbGFiZWw9IuWBnOeUqCIvPlxuICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5o6S5bqPIlxuICAgICAgICBwcm9wPSJzb3J0IlxuICAgICAgICBjbGFzcz0ic29ydCJcbiAgICAgICAgcmVxdWlyZWQ+XG4gICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgIHYtbW9kZWwubnVtYmVyPSJydWxlRm9ybS5zb3J0IlxuICAgICAgICAgIHN0eWxlPSJ3aWR0aDogNzUlIi8+XG4gICAgICAgIDxzcGFuPuaPkOekuu+8muaVsOWtl+i2iuWwj+i2iuW+gOWJjTwvc3Bhbj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbT5cbiAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgQGNsaWNrPSJzdWJtaXRGb3JtKFwncnVsZUZvcm1cJykiPuaPkOS6pDwvZWwtYnV0dG9uPlxuICAgICAgICA8ZWwtYnV0dG9uIEBjbGljaz0iZ290b0xpc3QiPuWPlua2iDwvZWwtYnV0dG9uPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgPC9lbC1mb3JtPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IENpcmNsZVRpdGxlIGZyb20gXCdAL2NvbXBvbmVudHMvY29tbW9ucy9jaXJjbGVUaXRsZVwnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9zbGlkZUFwaVwnXG5pbXBvcnQgQWRkVG9waWMgZnJvbSBcJy4vYWRkVG9waWNcJ1xuaW1wb3J0IEFkZE1hbnVzY3JpcHQgZnJvbSBcJy4vYWRkTWFudXNjcmlwdFwnXG5pbXBvcnQgdXBsb2FkSGVhZGVycyBmcm9tIFwnQC9taXhpbnNcJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQ2lyY2xlVGl0bGUsXG4gICAgQWRkTWFudXNjcmlwdCxcbiAgICBBZGRUb3BpY1xuICB9LFxuXG4gIG1peGluczogW3VwbG9hZEhlYWRlcnNdLFxuICBcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJ1bGVGb3JtOiB7XG4gICAgICAgIGNoYXJ0X25hbWU6IFwnXCcsXG4gICAgICAgIGljb246IFwnXCcsXG4gICAgICAgIGltYWdlVXJsOiBcJ1wnLFxuICAgICAgICBpbmRhdGU6IFtdLFxuICAgICAgICBzb3J0OiBcJ1wnLFxuICAgICAgICBjaGFubmVsaWQ6IFwnXCcsXG4gICAgICAgIHJlbGF0aXZlQ29udGVudDogXCdcJyxcbiAgICAgICAgc3RhdGU6IDBcbiAgICAgIH0sXG4gICAgICByYWRpbzogXCfnqL/ku7ZcJyxcbiAgICAgIGlzQ2hvb3NlRGF0ZTogZmFsc2UsXG4gICAgICBkaWFsb2dWaXNpYmxlOiBmYWxzZSxcbiAgICAgIGNvbXBvbmVudE5hbWU6IFwnQWRkTWFudXNjcmlwdFwnLFxuICAgICAgcnVsZXM6IHtcbiAgICAgICAgY2hhcnRfbmFtZTogW1xuICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6IFwn6K+36L6T5YWl6L2u5pKt5Zu+5qCH6aKYXCcsIHRyaWdnZXI6IFwnYmx1clwnIH1cbiAgICAgICAgXSxcbiAgICAgICAgY2hhbm5lbGlkOiBbXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogXCfor7fpgInmi6nlvZLlsZ7popHpgZNcJywgdHJpZ2dlcjogXCdibHVyXCcgfVxuICAgICAgICBdLFxuICAgICAgICBzb3J0OiBbXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogXCfor7fovpPlhaXmjpLluo9cJywgdHJpZ2dlcjogXCdibHVyXCcgfSxcbiAgICAgICAgICB7dHlwZTogXCdudW1iZXJcJywgbWVzc2FnZTogXCfmjpLluo/lv4XpobvkuLrmlbDlrZdcJ31cbiAgICAgICAgXSxcbiAgICAgICAgcmVsYXRpdmVDb250ZW50OiBbXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogXCfor7fpgInmi6nlhbPogZTlhoXlrrlcJywgdHJpZ2dlcjogXCdibHVyXCcgfVxuICAgICAgICBdLFxuICAgICAgICBpY29uOiBbXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogXCfor7fkuIrkvKDlm77niYdcJywgdHJpZ2dlcjogXCdibHVyXCcgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgY2hhcnRpZDogXCdcJyxcbiAgICAgIGNoYW5uZWxUeXBlTGlzdDogW10sXG4gICAgICBqdW1wX3R5cGU6IDAsIC8vIOWFs+iBlOeahOaYr+eov+S7tui/mOaYr+S4k+mimFxuICAgICAgYXJ0aWNsZWlkOiBcJ1wnLFxuICAgICAgc3BlY2lhbGlkOiBcJ1wnLFxuICAgICAganVtcF91cmw6IFwnXCcsXG4gICAgICBwYWdlTm86IDEsXG4gICAgICBpc1JlZnJlc2g6IHRydWVcbiAgICB9XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgZ2V0VXBsb2FkVXJsICgpIHtcbiAgICAgIHJldHVybiBBY3Rpb25zLnVwbG9hZFBpY3R1cmUoKVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgdGhpcy5nZXRTbGlkZUVkaXRJbmZvKClcbiAgfSxcbiAgYmVmb3JlUm91dGVMZWF2ZSAodG8sIGZyb20sIG5leHQpIHtcbiAgICBpZiAodG8ucGF0aCA9PT0gXCcvbWFuYWdlU2xpZGUvbGlzdFwnKSB7XG4gICAgICB0by5tZXRhLnJlZnJlc2ggPSB0aGlzLmlzUmVmcmVzaFxuICAgIH0gZWxzZSBpZiAodG8ucGF0aCA9PT0gXCcvbWFuYWdlU2xpZGUvY3JlYXRlXCcpIHtcbiAgICAgIHRoaXMuJHJvb3QuZXZlbnRIdWIuJGVtaXQoXCdyZXNldC1vcHRpb25zXCcpXG4gICAgfVxuICAgIG5leHQoKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZ290b0xpc3QgKCkge1xuICAgICAgdGhpcy5pc1JlZnJlc2ggPSBmYWxzZVxuICAgICAgdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6IFwnL21hbmFnZVNsaWRlL2xpc3RcJ30pXG4gICAgfSxcbiAgICAvKiog6YCJ5oup56i/5Lu277yM6YCJ5oup5LiT6aKYICoqL1xuICAgIGhhbmRsZU9wZXJhdGlvbkNsaWNrIChyYWRpbykge1xuICAgICAgaWYgKHJhZGlvKSB7XG4gICAgICAgIHN3aXRjaCAocmFkaW8pIHtcbiAgICAgICAgICBjYXNlIFwn56i/5Lu2XCc6XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ0FkZE1hbnVzY3JpcHRcJ1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlIFwn5LiT6aKYXCc6XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ0FkZFRvcGljXCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc3VibWl0Rm9ybSAoZm9ybU5hbWUpIHtcbiAgICAgIHRoaXMuJHJlZnNbZm9ybU5hbWVdLnZhbGlkYXRlKCh2YWxpZCkgPT4ge1xuICAgICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgICBBY3Rpb25zLmVkaXRTbGlkZSh7XG4gICAgICAgICAgICBcJ3JvdGF0aW9uQ2hhcnRcJzoge1xuICAgICAgICAgICAgICBcJ2NoYXJ0aWRcJzogdGhpcy5jaGFydGlkLFxuICAgICAgICAgICAgICBcJ2NoYXJ0X25hbWVcJzogdGhpcy5ydWxlRm9ybS5jaGFydF9uYW1lLFxuICAgICAgICAgICAgICBcJ2NoYXJ0X2hlYWRfdXJsXCc6IHRoaXMucnVsZUZvcm0uaWNvbixcbiAgICAgICAgICAgICAgXCdqdW1wX3R5cGVcJzogdGhpcy5qdW1wX3R5cGUsXG4gICAgICAgICAgICAgIFwnYXJ0aWNsZWlkXCc6IHRoaXMuYXJ0aWNsZWlkLFxuICAgICAgICAgICAgICBcJ3NwZWNpYWxpZFwnOiB0aGlzLnNwZWNpYWxpZCxcbiAgICAgICAgICAgICAgXCdjaGFubmVsaWRcJzogdGhpcy5ydWxlRm9ybS5jaGFubmVsaWQsXG4gICAgICAgICAgICAgIFwnZXhwaXJ5X2RhdGVfc3RhcnRcJzogbmV3IERhdGUodGhpcy5ydWxlRm9ybS5pbmRhdGVbMF0pLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgXCdleHBpcnlfZGF0ZV9lbmRcJzogbmV3IERhdGUodGhpcy5ydWxlRm9ybS5pbmRhdGVbMV0pLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgXCdzb3J0XCc6IHRoaXMucnVsZUZvcm0uc29ydCxcbiAgICAgICAgICAgICAgXCdzdGF0ZVwnOiB0aGlzLnJ1bGVGb3JtLnN0YXRlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHtwYXRoOiBcJy9tYW5hZ2VTbGlkZS9saXN0XCd9KVxuICAgICAgICAgICAgICB0aGlzLiRub3RpZnkoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcJ+mAmuefpVwnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwn57yW6L6R5oiQ5YqfXCcsXG4gICAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCdcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwnZXJyb3Igc3VibWl0ISFcJylcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGhhbmRsZVBjQXZhdGFyU3VjY2VzcyAocmVzLCBmaWxlKSB7XG4gICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICBsZXQgaW1hZ2VVcmwgPSByZXMucmVzdWx0XG4gICAgICAgIHRoaXMucnVsZUZvcm0uaWNvbiA9IGltYWdlVXJsXG4gICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVBdmF0YXJVcGxvYWQgKGZpbGUpIHtcbiAgICAgIGxldCBpbWFnZU9iaiA9IHtcbiAgICAgICAgXCdpbWFnZS9qcGVnXCc6IHRydWUsXG4gICAgICAgIFwnaW1hZ2UvcG5nXCc6IHRydWUsXG4gICAgICAgIFwnaW1hZ2UvanBnXCc6IHRydWVcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlzSW1hZ2UgPSBmaWxlLnR5cGUgaW4gaW1hZ2VPYmpcbiAgICAgIGNvbnN0IGlzTHQyTSA9IGZpbGUuc2l6ZSAvIDEwMjQgLyAxMDI0IDwgMlxuICAgICAgaWYgKCFpc0ltYWdlKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoXCfkuIrkvKDlm77niYflj6rog73mmK8gSlBHIOagvOW8jyFcJylcbiAgICAgIH1cbiAgICAgIGlmICghaXNMdDJNKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoXCfkuIrkvKDlm77niYflpKflsI/kuI3og73otoXov4cgMk1CIVwnKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlzSW1hZ2UgJiYgaXNMdDJNXG4gICAgfSxcbiAgICAvKiog6I635Y+W6L2u5pKt5Zu+55qE5L+h5oGvICoqL1xuICAgIGdldFNsaWRlRWRpdEluZm8gKCkge1xuICAgICAgdGhpcy5jaGFydGlkID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcJ2NoYXJ0aWRcJylcbiAgICAgIEFjdGlvbnMuZ2V0U2xpZGVJbmZvQnlJRCh7XG4gICAgICAgIFwncm90YXRpb25DaGFydFwnOiB7XG4gICAgICAgICAgXCdjaGFydGlkXCc6IHRoaXMuY2hhcnRpZFxuICAgICAgICB9XG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy5ydWxlRm9ybS5jaGFydF9uYW1lID0gZGF0YS5jaGFydF9uYW1lXG4gICAgICAgICAgdGhpcy5ydWxlRm9ybS5pY29uID0gZGF0YS5jaGFydF9oZWFkX3VybFxuICAgICAgICAgIGlmIChkYXRhLmp1bXBfdHlwZSA9PT0gMSAmJiBkYXRhLnRpdGxlKSB7XG4gICAgICAgICAgICB0aGlzLnJ1bGVGb3JtLnJlbGF0aXZlQ29udGVudCA9IFwn56i/5Lu2LVwnICsgZGF0YS50aXRsZVxuICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS5qdW1wX3R5cGUgPT09IDIgJiYgZGF0YS5zcGVjaWFsX25hbWUpIHtcbiAgICAgICAgICAgIHRoaXMucnVsZUZvcm0ucmVsYXRpdmVDb250ZW50ID0gXCfkuJPpopgtXCcgKyBkYXRhLnNwZWNpYWxfbmFtZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJ1bGVGb3JtLnJlbGF0aXZlQ29udGVudCA9IFwn5pegXCdcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5ydWxlRm9ybS5jaGFubmVsaWQgPSBkYXRhLmNoYW5uZWxpZFxuICAgICAgICAgIHRoaXMucnVsZUZvcm0uaW5kYXRlLnB1c2gobmV3IERhdGUoZGF0YS5leHBpcnlfZGF0ZV9zdGFydCkpXG4gICAgICAgICAgdGhpcy5ydWxlRm9ybS5pbmRhdGUucHVzaChuZXcgRGF0ZShkYXRhLmV4cGlyeV9kYXRlX2VuZCkpXG4gICAgICAgICAgdGhpcy5ydWxlRm9ybS5zb3J0ID0gZGF0YS5zb3J0XG4gICAgICAgICAgdGhpcy5hcnRpY2xlaWQgPSBkYXRhLmFydGljbGVpZFxuICAgICAgICAgIHRoaXMuc3BlY2lhbGlkID0gZGF0YS5zcGVjaWFsaWRcbiAgICAgICAgICB0aGlzLnJ1bGVGb3JtLmNoYW5uZWxpZCA9IGRhdGEuY2hhbm5lbGlkXG4gICAgICAgICAgdGhpcy5qdW1wX3R5cGUgPSBkYXRhLmp1bXBfdHlwZVxuICAgICAgICAgIHRoaXMuZ2V0TGlzdFVzYWJsZUNoYW5uZWwoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOiOt+WPlumikemBk+exu+WIqyAqKi9cbiAgICBnZXRMaXN0VXNhYmxlQ2hhbm5lbCAoKSB7XG4gICAgICBBY3Rpb25zLmdldExpc3RVc2FibGVDaGFubmVsKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGFcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGxldCBuZXdJdGVtID0ge31cbiAgICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBpdGVtLmNoYW5uZWxfbmFtZVxuICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uY2hhbm5lbGlkXG4gICAgICAgICAgICB0aGlzLmNoYW5uZWxUeXBlTGlzdC5wdXNoKG5ld0l0ZW0pXG4gICAgICAgICAgfSlcbiAgICAgICAgICB0aGlzLnNldENoYW5ubmVsaWQoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOWmguaenOeItumikemBk+iiq+WBnOeUqCwg5YiZY2hhbm5lbGlk5Li656m6ICoqL1xuICAgIHNldENoYW5ubmVsaWQgKCkge1xuICAgICAgbGV0IGlzU2V0RW1wdHkgPSB0cnVlXG4gICAgICBjb25zb2xlLmxvZyh0aGlzLnJ1bGVGb3JtLmNoYW5uZWxpZClcbiAgICAgIHRoaXMuY2hhbm5lbFR5cGVMaXN0LmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtLnZhbHVlID09PSB0aGlzLnJ1bGVGb3JtLmNoYW5uZWxpZCkge1xuICAgICAgICAgIGlzU2V0RW1wdHkgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgaWYgKGlzU2V0RW1wdHkpIHtcbiAgICAgICAgdGhpcy4kc2V0KHRoaXMucnVsZUZvcm0sIFwnY2hhbm5lbGlkXCcsIFwnXCcpXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog6I635Y+W6L2u5pKt5Zu+6YWN572u55qE56i/5Lu25oiW5LiT6aKY5L+h5oGvICoqL1xuICAgIHNlbGVjdGVkUm93IChyb3cpIHtcbiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IGZhbHNlXG4gICAgICBpZiAocm93LmFydGljbGVpZCkge1xuICAgICAgICB0aGlzLnJ1bGVGb3JtLnJlbGF0aXZlQ29udGVudCA9IFwn56i/5Lu2LVwnICsgcm93LnRpdGxlXG4gICAgICAgIHRoaXMuanVtcF90eXBlID0gMVxuICAgICAgICB0aGlzLmFydGljbGVpZCA9IHJvdy5hcnRpY2xlaWRcbiAgICAgICAgdGhpcy5zcGVjaWFsaWQgPSBcJ1wnXG4gICAgICAgIHRoaXMuanVtcF91cmwgPSByb3cuYXJ0aWNsZV91cmxcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucnVsZUZvcm0ucmVsYXRpdmVDb250ZW50ID0gXCfkuJPpopgtXCcgKyByb3cuc3BlY2lhbF9uYW1lXG4gICAgICAgIHRoaXMuanVtcF90eXBlID0gMlxuICAgICAgICB0aGlzLmFydGljbGVpZCA9IFwnXCdcbiAgICAgICAgdGhpcy5zcGVjaWFsaWQgPSByb3cuc3BlY2lhbGlkXG4gICAgICAgIHRoaXMuanVtcF91cmwgPSBcJ1wnXG4gICAgICB9XG4gICAgfVxuICB9XG59XG48XC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuICAuY2ljbGUtY29udHJvbGxlciB7XG4gICAgbWFyZ2luLXRvcDogNCU7XG4gIH1cbiAgLmNyZWF0ZSAuc29ydCBzcGFue1xuICAgIGNvbG9yOiAjOTA5MDkwO1xuICB9XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sdDZJVDpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgiL3NEQSIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCI2ZTE2NzUxMyIsYSwhMSx7fSl9LHRZbHg6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi50cmVlLXdyYXBwZXJbZGF0YS12LTNhMGE4ZTFlXSB7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZDogI2Y1ZjhmYTtcbiAgcGFkZGluZzogNDBweCAwO1xuICBvdmVyZmxvdzogYXV0bztcbn1cbi50cmVlLXdyYXBwZXIgYVtkYXRhLXYtM2EwYThlMWVdIHtcbiAgY29sb3I6ICM0NzQ3NDc7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbn1cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPXNyYy9jb21wb25lbnRzL2NvbW1vbnMvcm91dGVyVHJlZS5jc3MubWFwICovIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9jb21tb25zL3NyYy9jb21wb25lbnRzL2NvbW1vbnMvcm91dGVyVHJlZS52dWUiLCIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9jb21tb25zL3JvdXRlclRyZWUudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQWlSQTtFQUNFLGFBQUE7RUFDQSxvQkFBQTtFQUNBLGdCQUFBO0VBQ0EsZUFBQTtDQ2hSRDtBRGlSQztFQUNFLGVBQUE7RUFDQSxnQkFBQTtFQUNBLGlCQUFBO0NDL1FIO0FBQ0QsaUVBQWlFIixmaWxlOiJyb3V0ZXJUcmVlLnZ1ZSIsc291cmNlc0NvbnRlbnQ6WyJcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4udHJlZS13cmFwcGVyXG4gIGhlaWdodCAxMDAlXG4gIGJhY2tncm91bmQgcmdiYSgyNDUsMjQ4LDI1MCwxKVxuICBwYWRkaW5nIDQwcHggMFxuICBvdmVyZmxvdyBhdXRvXG4gIGFcbiAgICBjb2xvciAjNDc0NzQ3XG4gICAgZm9udC1zaXplIDE2cHhcbiAgICBmb250LXdlaWdodCA0MDBcbiIsIi50cmVlLXdyYXBwZXIge1xuICBoZWlnaHQ6IDEwMCU7XG4gIGJhY2tncm91bmQ6ICNmNWY4ZmE7XG4gIHBhZGRpbmc6IDQwcHggMDtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG4udHJlZS13cmFwcGVyIGEge1xuICBjb2xvcjogIzQ3NDc0NztcbiAgZm9udC1zaXplOiAxNnB4O1xuICBmb250LXdlaWdodDogNDAwO1xufVxuLyojIHNvdXJjZU1hcHBpbmdVUkw9c3JjL2NvbXBvbmVudHMvY29tbW9ucy9yb3V0ZXJUcmVlLmNzcy5tYXAgKi8iXSxzb3VyY2VSb290OiIifV0pfSwidGsvbyI6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoIjl3Y0EiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiMWNlMTg0YjIiLGEsITEse30pfSx1ZGN0OmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJ1dVVwIik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjcyOGIxNmUwIixhLCExLHt9KX0sdXBaSTpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLnRpdGxlLWNsYXNzW2RhdGEtdi03NGE2YjVlNl17XG4gIG1hcmdpbi1sZWZ0OiAyNHB4O1xufVxuLmF1ZGl0IC5lbC1zZWxlY3RbZGF0YS12LTc0YTZiNWU2XXtcbiAgd2lkdGg6IDEwMCU7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZUNvbW1lbnQvc3JjL2NvbXBvbmVudHMvbWFuYWdlQ29tbWVudC9hdWRpdC52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBeUVBO0VBQ0Esa0JBQUE7Q0FDQTtBQUNBO0VBQ0EsWUFBQTtDQUNBIixmaWxlOiJhdWRpdC52dWUiLHNvdXJjZXNDb250ZW50OlsnPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSJhdWRpdCI+XG4gICAgPGVsLWZvcm1cbiAgICAgIHJlZj0iYXVkaXRGb3JtIlxuICAgICAgOm1vZGVsPSJhdWRpdEZvcm0iXG4gICAgICBsYWJlbC13aWR0aD0iODBweCI+XG4gICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLlvZLlsZ7nsbvliKsiPlxuICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgdi1tb2RlbD0iYXVkaXRGb3JtLnR5cGUiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+mAieaLqeaYr+WQpumAmui/hyI+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgOnZhbHVlPSIxIlxuICAgICAgICAgICAgbGFiZWw9IumAmui/hyIvPlxuICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgIDp2YWx1ZT0iMiJcbiAgICAgICAgICAgIGxhYmVsPSLkuI3pgJrov4ciLz5cbiAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuWuoeaguOaEj+ingSI+XG4gICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgIHYtbW9kZWw9ImF1ZGl0Rm9ybS5kZXNjIlxuICAgICAgICAgIHR5cGU9InRleHRhcmVhIi8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IiI+XG4gICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgIEBjbGljaz0ic3VibWl0Ij7mj5DkuqQ8L2VsLWJ1dHRvbj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgIDwvZWwtZm9ybT5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL2NvbW1lbnRBcGlcJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczoge1xuICAgIFwnY29tbWVudGlkXCc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IFwnMFwnXG4gICAgfVxuICB9LFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXVkaXRGb3JtOiB7XG4gICAgICAgIHR5cGU6IDEsXG4gICAgICAgIGRlc2M6IFwnXCdcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBzdWJtaXQgKCkge1xuICAgICAgQWN0aW9ucy5hdWRpdENvbW1lbnRzKHtcbiAgICAgICAgXCdjb21tZW50Vm9cJzoge1xuICAgICAgICAgIFwnY29tbWVudGlkXCc6IHRoaXMuY29tbWVudGlkLFxuICAgICAgICAgIFwnYXVkaXRcJzogdGhpcy5hdWRpdEZvcm0udHlwZSxcbiAgICAgICAgICBcJ2F1ZGl0X29waW5pb25cJzogdGhpcy5hdWRpdEZvcm0uZGVzY1xuICAgICAgICB9XG4gICAgICB9KS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLiRub3RpZnkoe1xuICAgICAgICAgICAgdGl0bGU6IFwn5oiQ5YqfXCcsXG4gICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwn5a6h5qC45oiQ5YqfXCdcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuJGVtaXQoXCdjbG9zZS1kaWFsb2dcJylcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG48XC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuICAudGl0bGUtY2xhc3N7XG4gICAgbWFyZ2luLWxlZnQ6IDI0cHg7XG4gIH1cbiAgLmF1ZGl0IC5lbC1zZWxlY3R7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbjwvc3R5bGU+XG48c3R5bGU+XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sdXVVcDpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLmVsLWRpYWxvZ19faGVhZGVye1xuICBwYWRkaW5nOiAxM3B4IDMwcHggMTNweDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNDMEJFRkY7XG4gIGJhY2tncm91bmQtY29sb3I6ICNGN0ZBRkY7XG59XG4uZWwtZGlhbG9nX190aXRsZSB7XG4gIGxpbmUtaGVpZ2h0OiAxN3B4O1xuICBmb250LXNpemU6IDE3cHg7XG4gIGNvbG9yOiAjMzAzMTMzO1xufVxuLmVsLWRpYWxvZ19faGVhZGVyYnRuIHtcbiAgdG9wOiAxM3B4O1xufVxuLmVsLWRpYWxvZ19fYm9keSB7XG4gIHBhZGRpbmc6IDIwcHggNjBweCAwcHggNjBweDtcbn1cbi5hc3NpZ25Sb2xlIC5lbC1mb3JtIHtcbiAgbWFyZ2luLXRvcDogMTVweDtcbn1cbi5hc3NpZ25Sb2xlIC5zdWJtaXQgLmVsLWZvcm0taXRlbV9fY29udGVudHtcbiAgZmxvYXQ6IHJpZ2h0O1xuICB3aWR0aDogMTYwcHg7XG59XG4uc2VsZWN0LXJvbGUge1xuICBib3JkZXI6IDFweCBzb2xpZCAjNjk0RUZGO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUJGNUZGO1xuICBjb2xvcjogIzY5NEVGRjtcbiAgcGFkZGluZzo4cHggMjJweCA4cHggMjJweDtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xufVxuLmFzc2lnblJvbGUgLmVsLXNlbGVjdCB7XG4gIHdpZHRoOiAxMDAlO1xufVxuLmFzc2lnblJvbGUgLmVsLWZvcm0taXRlbSB7XG4gIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG59XG4uYXNzaWduUm9sZSAuZWwtY2hlY2tib3grLmVsLWNoZWNrYm94e1xuICB3aWR0aDogMjAwcHg7XG4gIG1hcmdpbi1sZWZ0OiAwcHg7XG59XG4vKi5hc3NpZ25Sb2xlIC5lbC1mb3JtLWl0ZW0gKi9cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlU3lzdGVtVXNlci9zcmMvY29tcG9uZW50cy9tYW5hZ2VTeXN0ZW1Vc2VyL2Fzc2lnblJvbGUudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQTZGQTtFQUNBLHdCQUFBO0VBQ0EsaUNBQUE7RUFDQSwwQkFBQTtDQUNBO0FBQ0E7RUFDQSxrQkFBQTtFQUNBLGdCQUFBO0VBQ0EsZUFBQTtDQUNBO0FBQ0E7RUFDQSxVQUFBO0NBQ0E7QUFDQTtFQUNBLDRCQUFBO0NBQ0E7QUFDQTtFQUNBLGlCQUFBO0NBQ0E7QUFDQTtFQUNBLGFBQUE7RUFDQSxhQUFBO0NBQ0E7QUFDQTtFQUNBLDBCQUFBO0VBQ0EsMEJBQUE7RUFDQSxlQUFBO0VBQ0EsMEJBQUE7RUFDQSxtQkFBQTtDQUNBO0FBQ0E7RUFDQSxZQUFBO0NBQ0E7QUFDQTtFQUNBLHVCQUFBO0NBQ0E7QUFDQTtFQUNBLGFBQUE7RUFDQSxpQkFBQTtDQUNBO0FBQ0EsOEJBQUEiLGZpbGU6ImFzc2lnblJvbGUudnVlIixzb3VyY2VzQ29udGVudDpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImFzc2lnblJvbGVcIj5cbiAgICA8ZWwtZm9ybVxuICAgICAgOmlubGluZT1cInRydWVcIlxuICAgICAgc2l6ZT1cInNtYWxsXCI+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPVwi55So5oi35ZCNXCJcbiAgICAgICAgc3R5bGU9XCJtYXJnaW4tbGVmdDogMTNweDtcIj5cbiAgICAgICAgPHNwYW4+e3sgdXNlcm5hbWUgfX08L3NwYW4+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCLop5LoibLliIbphY1cIj5cbiAgICAgICAgPGVsLWNoZWNrYm94XG4gICAgICAgICAgdi1mb3I9XCIoaXRlbSwgaW5kZXgpIGluIGFsbFJvbGVMaXN0XCJcbiAgICAgICAgICA6a2V5PVwiaW5kZXhcIlxuICAgICAgICAgIHYtbW9kZWw9XCJpdGVtLmlzQ2hlY2tlZFwiXG4gICAgICAgICAgQGNoYW5nZT1cImNob29zZVJvbGUoaXRlbS5yb2xlaWQsIGl0ZW0uaXNDaGVja2VkKVwiPlxuICAgICAgICAgIHt7IGl0ZW0ubmFtZSB9fVxuICAgICAgICA8L2VsLWNoZWNrYm94PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgPC9lbC1mb3JtPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tICdAL2FwaS9zeXN0ZW1Vc2Vyc0FwaSdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ0Fzc2lnblJvbGUnLFxuICBwcm9wczoge1xuICAgIHVzZXJjb2RlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJ1xuICAgIH0sXG4gICAgdXNlcm5hbWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfVxuXG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhbGxSb2xlTGlzdDogW11cbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIC8qKiDojrflj5bnlKjmiLfkv6Hmga8gKiovXG4gICAgdGhpcy5nZXRVc2VySW5mbygpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBjYW5jZWwgKCkge1xuICAgICAgdGhpcy4kZW1pdCgnY2xvc2VEaWFsb2cnKVxuICAgIH0sXG4gICAgZ2V0VXNlckluZm8gKCkge1xuICAgICAgQWN0aW9ucy5nZXRVc2VyUm9sZXMoe1xuICAgICAgICAnb3JnVXNlcnMnOiB7XG4gICAgICAgICAgJ3VzZXJjb2RlJzogdGhpcy51c2VyY29kZVxuICAgICAgICB9XG4gICAgICB9KS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLmFsbFJvbGVMaXN0ID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog57uZ55So5oi35YiG6YWN5p2D6ZmQICoqL1xuICAgIGNob29zZVJvbGUgKHJvbGVpZCwgaXNDaGVja2VkKSB7XG4gICAgICBBY3Rpb25zLmFzc2lnbk9yQ2FuZWxVc2VyUm9sZSh7XG4gICAgICAgICdhc3NpZ24nOiB7XG4gICAgICAgICAgJ3VzZXJjb2RlJzogdGhpcy51c2VyY29kZSxcbiAgICAgICAgICAncm9sZWlkJzogcm9sZWlkLFxuICAgICAgICAgICdhc3NpZ25PckNhbmVsJzogaXNDaGVja2VkXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgbWVzc2FnZTogJ+WIhumFjeaIkOWKnydcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG59XG48XC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuICAuZWwtYnV0dG9uLS1wcmltYXJ5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzE2QkZGO1xuICAgIGJvcmRlci1jb2xvcjogIzcxNkJGRjtcbiAgfVxuICAuZWwtYnV0dG9uLS1kZWZhdWx0IHtcbiAgICBjb2xvcjogIzcxNkJGRiA7XG4gICAgYm9yZGVyLWNvbG9yOiAjNzE2QkZGO1xuICB9XG48L3N0eWxlPlxuPHN0eWxlPlxuICAuZWwtZGlhbG9nX19oZWFkZXJ7XG4gICAgcGFkZGluZzogMTNweCAzMHB4IDEzcHg7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNDMEJFRkY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0Y3RkFGRjtcbiAgfVxuICAuZWwtZGlhbG9nX190aXRsZSB7XG4gICAgbGluZS1oZWlnaHQ6IDE3cHg7XG4gICAgZm9udC1zaXplOiAxN3B4O1xuICAgIGNvbG9yOiAjMzAzMTMzO1xuICB9XG4gIC5lbC1kaWFsb2dfX2hlYWRlcmJ0biB7XG4gICAgdG9wOiAxM3B4O1xuICB9XG4gIC5lbC1kaWFsb2dfX2JvZHkge1xuICAgIHBhZGRpbmc6IDIwcHggNjBweCAwcHggNjBweDtcbiAgfVxuICAuYXNzaWduUm9sZSAuZWwtZm9ybSB7XG4gICAgbWFyZ2luLXRvcDogMTVweDtcbiAgfVxuICAuYXNzaWduUm9sZSAuc3VibWl0IC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnR7XG4gICAgZmxvYXQ6IHJpZ2h0O1xuICAgIHdpZHRoOiAxNjBweDtcbiAgfVxuICAuc2VsZWN0LXJvbGUge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM2OTRFRkY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0VCRjVGRjtcbiAgICBjb2xvcjogIzY5NEVGRjtcbiAgICBwYWRkaW5nOjhweCAyMnB4IDhweCAyMnB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgfVxuICAuYXNzaWduUm9sZSAuZWwtc2VsZWN0IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuICAuYXNzaWduUm9sZSAuZWwtZm9ybS1pdGVtIHtcbiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xuICB9XG4gIC5hc3NpZ25Sb2xlIC5lbC1jaGVja2JveCsuZWwtY2hlY2tib3h7XG4gICAgd2lkdGg6IDIwMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiAwcHg7XG4gIH1cbiAgLyouYXNzaWduUm9sZSAuZWwtZm9ybS1pdGVtICovXG48L3N0eWxlPlxuIl0sc291cmNlUm9vdDoiIn1dKX0sdjBxdDpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgiaG1kRCIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCIwOGQwNDhmMyIsYSwhMSx7fSl9LHZWWjQ6ZnVuY3Rpb24oZSxuKXtlLmV4cG9ydHM9ImRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBSjRBQUFBcENBWUFBQURFU3BDMkFBQUFHWFJGV0hSVGIyWjBkMkZ5WlFCQlpHOWlaU0JKYldGblpWSmxZV1I1Y2NsbFBBQUFBeU5wVkZoMFdFMU1PbU52YlM1aFpHOWlaUzU0YlhBQUFBQUFBRHcvZUhCaFkydGxkQ0JpWldkcGJqMGk3N3UvSWlCcFpEMGlWelZOTUUxd1EyVm9hVWg2Y21WVGVrNVVZM3ByWXpsa0lqOCtJRHg0T25odGNHMWxkR0VnZUcxc2JuTTZlRDBpWVdSdlltVTZibk02YldWMFlTOGlJSGc2ZUcxd2RHczlJa0ZrYjJKbElGaE5VQ0JEYjNKbElEVXVOaTFqTVRRd0lEYzVMakUyTURRMU1Td2dNakF4Tnk4d05TOHdOaTB3TVRvd09Eb3lNU0FnSUNBZ0lDQWdJajRnUEhKa1pqcFNSRVlnZUcxc2JuTTZjbVJtUFNKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eE9UazVMekF5THpJeUxYSmtaaTF6ZVc1MFlYZ3Ribk1qSWo0Z1BISmtaanBFWlhOamNtbHdkR2x2YmlCeVpHWTZZV0p2ZFhROUlpSWdlRzFzYm5NNmVHMXdQU0pvZEhSd09pOHZibk11WVdSdlltVXVZMjl0TDNoaGNDOHhMakF2SWlCNGJXeHVjenA0YlhCTlRUMGlhSFIwY0RvdkwyNXpMbUZrYjJKbExtTnZiUzk0WVhBdk1TNHdMMjF0THlJZ2VHMXNibk02YzNSU1pXWTlJbWgwZEhBNkx5OXVjeTVoWkc5aVpTNWpiMjB2ZUdGd0x6RXVNQzl6Vkhsd1pTOVNaWE52ZFhKalpWSmxaaU1pSUhodGNEcERjbVZoZEc5eVZHOXZiRDBpUVdSdlltVWdVR2h2ZEc5emFHOXdJRU5ESUNoTllXTnBiblJ2YzJncElpQjRiWEJOVFRwSmJuTjBZVzVqWlVsRVBTSjRiWEF1YVdsa09rTTBOVVZFUlVZNU1qYzRRakV4UlRsQlF6UTFSREpEUWpjMk1ESkZNemhDSWlCNGJYQk5UVHBFYjJOMWJXVnVkRWxFUFNKNGJYQXVaR2xrT2tNME5VVkVSVVpCTWpjNFFqRXhSVGxCUXpRMVJESkRRamMyTURKRk16aENJajRnUEhodGNFMU5Pa1JsY21sMlpXUkdjbTl0SUhOMFVtVm1PbWx1YzNSaGJtTmxTVVE5SW5odGNDNXBhV1E2UXpRMVJVUkZSamN5TnpoQ01URkZPVUZETkRWRU1rTkNOell3TWtVek9FSWlJSE4wVW1WbU9tUnZZM1Z0Wlc1MFNVUTlJbmh0Y0M1a2FXUTZRelExUlVSRlJqZ3lOemhDTVRGRk9VRkRORFZFTWtOQ056WXdNa1V6T0VJaUx6NGdQQzl5WkdZNlJHVnpZM0pwY0hScGIyNCtJRHd2Y21SbU9sSkVSajRnUEM5NE9uaHRjRzFsZEdFK0lEdy9lSEJoWTJ0bGRDQmxibVE5SW5JaVB6NUhnWS9FQUFBTVVVbEVRVlI0MnV4Y1hZd2tWUld1WVFlV2FEUVVHNDNFbjVqYUI1OVFrcG9IRTMyelIveVB4UFNhcUM5RzA2T29Md2EySjdxd3k0TFFBNXBvZ25HN2R4Y3dFa202UVJRSVJLWWZqY0drVzRQeHpYUnJYQlVWNkFZTnM5bGxkOXR6Wjc4em5qbmNXM1Z2ZFhXN3k4NUpUcnE3NnRhdFcvZCtkZjV2TDB3bWs2Z2czVU44UGZFWmNjelcyUUx4THVKenhEOGdmaURhb1V1ZUZndGU5eVBpcnhTNDdqNkE4UGpPMU84QUw1U09FSzhFdE44Z2ZvSDRMUEVlNHFPUWpQZnRUUDhPOEh5cFNWd0xhSDhTb0ROME9mRkxBTjF4Zk40LzZ3ZGNXRmk0YUJhRHpKNlVQbUxpTVkyN1AwVS9DZm9ZZTdRMTkwdHM5OE81S3ZycWxQMnd2bngwRWthbmlaOGovaHZ4M3dXZklQNDMybnc1NFA2RjJEWFpabkd3UUptTHd1M0FjUmx0TTY0ZllWN1dDNjZsNmFPSFB1bytBTVU5Unp4ZUhLdVpsd0RmRFExd3JvSno4YnlBZDJ4U25NNVorRlZ4L2hiaXhYa0JENHNqcVo0eE55UEw4NWhqNjVCT3NtM1Q4ZndEczFpcWJhL2dYUHFBYVYyTU0vWm92dzJvQU5ZRW54cDRiZnhPNXFGcWpTMzJ4WUErSHlSdUUxOEpqOWJsTmhzdjl5cWNYMVRlOFN5cGF2bTlsblBOR0p4QUZWYUl6UUl2a1FvYVd0b1AwUzdHTlFhVU1iWFY5K21qM3p4aUZmd2FrR0VzTmpMdFI1YVh6NHk1RC9EVXhYZ055QnI0SHNHazRya3lMMnNiNDVpTHFyMC84STA4T212VldZTEVZNG5RRnVOT2NpUmVXMGpMaHJpdVlaTjQ0bGhGU2o2TGxLbENxdlJ3cng0a2pXYXIraFRQTWhFcTA4Vk1xV1ZzMjZTenh6b25zd1RlQTRHZ08zNmhnVTREVDZpT0NXeVlrUVpRRnZBc3FycWRCVHdORG5Hc2p2WU5oenEzQWNLMHJ6ajY5bEhCR25neHhsRURDSnRzdi9ud3JGVHRUNGkvRU5EUFVROXY5eHZFSDBkWUpXczg3Um5HK1ZoMURLRnVPa0tsckhyMmtTcVY2dHRldHUwaVFwQ3FZMnRDcGRkeDNseTNieG92MTBIbUhnM2NzNDk1Nk9KWUhyQk0rNld5Z1dkc3RNOEg5Tkh5aU92ZFRIeTNaMzhmeHVjc3dNY3ZSMGNzZGczMlRacXh1REdrVFVYWmlGMkhkS2xnWWF0aUVUdksva3B4ZlF1THpkZnd5eERqL0Q2ZnNFZ0JHZ29BeGdKUWtmak5OdXBZdlRqVHZ3UktOVDBZcUY2UGVhaTdtenc5M3czaWw0blBsQmxxa1RFeXJXNlVPbTE2ZXJVVGg3M1Z6R2k3N2dobEpMRHptZzd2dVlIenFVMjlUV1BqaWVmckNidU83OFhNZG5CREhTL1Z4bnNvRUhSSFBCWitmd0RvVEd6dkplSVhpRStWQlQ0SE1BYVk4SjVZbEZFRzhEaUUwc1lpSkphMnNuOXVhN1BMVW5WZkNadzI3SzUxbDYybitob1VDTW1rRmllbklleGVuejRiWmRoNEpuZjZrQ1hNa0pmQnlNdlYzdVFScHVEc3hobUVWYzdoODBYaU44TjJOSFNzNURCSzRsQ25WVWVFdmt2SDl3VmtTNVl6em5Fb1E2cTNybEpmTGFqY1ZLamdvVkxYOGpsV1BOUmZ6NkZ1MHd3N3RJSitFOVcrbEhES3c0RnZUS3NrOWNwa0pOMlkrRVhpNTRuL2lZekhDU0VWdmphTnhJTUsyVktSU20xVWJGNnF5NnZObUVlclY1dVJZVWdENW1qZ1VOVk1jY0cxcjBMYURVU1FtQ1ZlSWdMSjY1Q09sVElsM29jQzJwdXFsQnR6MnV6M2tIVG03ZnNxOFMzRW56S0JUa2c3eVdlUjJ6V1Qra0hpSDVZazdWcmFXS2VKNUxlN2lrRHZMSXg1S2ZYR0FwL2pqUGxLTXFJRk5lR2hqd3VBTGhhQjhWZ0VwT2RDaTFqMHEwb0MzYzBlb1BzRDhRM0VmNFdLZUJmeGRjVC80RGtoZmhYZ3V3YkhSbE5JOUZnQXIrdFlwSTdJQUZTaDZ1Wko0NURqZUtaYWxtZnRRUldFcnY0LzVHbE1IaWxKdmY2ZWVJKzY3aHJpUCtPOFVhOS93cGhlRWRmZFcyYVJ3SVZBMDZoYWtkeWY2Snh4d1AwNVk4S0I0elJIMVk3RXVWSlViUjRaRmZkMUQwZmlucHcydnlQK0dCd0hTYzhSZndSdjdoNUl2cmNSdnlHNk5HaWNFYnlXK1ZTcHFvZTArTWJacVJZTkxDUEh2SlIxbnU2eERPZWlEd25ad0hnN3M1WjQzL2VVTEo5QlNNUkZ6eEJma2RQSHRaQ0lweXpYdis0a25vemw1VGdoU1NseHMzTEdHNWZabVF0NHZ3bGM1UGNUbjh4UXNlLzI2T09YanV0Zmw4QzdsT2t5eC9GWGlOOUQvTTJBdnA0aFhsYXExTVRuL2tOOExmR3ZpZCtib2ZKL0lkSmxGdzJaa0VUQk1FYlZrWTJvY05YS1JmTDhhWVkwcjdxazVLTEQ1bmlaK08zRTN5UGVUWHlYNXpoK2hmREkwOFJ2UlA5dndqbmpvVDRibmQrWjlyUUMvOCtJUHprblZSRkgyM09SbWptNE84NExHbk05SEgwYUcyalpzOVM4TG15bGZTcXNZb2hER3F2b044Slkrc3BEMTJ0V3libDFpKzFCZ0VVQ1c0TkR6b1BrWlZsL2lINk1nN0pwTC9MejQ2VmhoMmpWRnVuUXdQc1hlQTh5Q21hZnhKMEEzeUhQOVRXUzdRT0lENTRpdmtKSVZ0UHZPL0Q3SEk0WlNmZUpPWUNPRnp6a21ocE5ac3R4cm8zRjNvekRpVW5QMnNOUUZXT0lCY2c0TENJQjBGRG5sbkcrYVFGZEo4cXZEcExaa1hvVWxxbVNoYkF5dTFHWFkxZjVibzRQMXBWVU5ISEgxVVVCaWhPSXJiMEZnT09xWVBONUVOL3Y4QnpvcytBc01vQjhaQjZnczlCUVRlaFlISmZIaGc2cHlhRGJWcktFTjcySDc4c1NmRGpIY2JNVkxIeUs3eXl4NmlLZzNBQlFWdFY0MTlBMkZXQ0toWFRwQTlCamVLME5DOGhhb2srV29ySG92Ni9BMXJjRTNWTmNOOFI5RXdlWXRaVHVjZ2VjbkgrUytMZkVmMEg2YWtOVWlqQWRLS2xBOHpMaUp3TGlXRDh1b1VpZ1BzMUdHaEY3WTJlczU3RFJtaUxwYjl1WHdTbTd1a2poRGRDK0pzNnY4OTRPYmUrSmU5VFU3N1pJK0kvUTExYTFzK1ZabXFwdElqeHBXWjB5c0l4QlZsRnpJV21LNndmaTJXS2NyOGdpVWlQTkhpWitIMnd5bzFJWHdEYkg0M1pJdzROVE9qU1BJNmJuUzM4c1VkcWxnZUJiUVV5ckp0VGNHRzl1SGVDT0xiYlNwaXBWa3E5cXNhZWtTbTFhN3QrREt2VXBVcWlxKzJlWkZtMWg1M0ZiVy9zK1RJbWhNaG40cGFwRi85c1Qwb0hVM3F3ck5IdE1BTmgxU01ZdE8zQVJvdDQ0RDUrRk55dEJaOXVVZWl2VTd1MEZGbjAzSElrUTBIMDM4aThpOWFIWXd4QjNYU2UvMXoydjBlQ0xvTTU4cXBkMTRha3NNdDBNTUt1eUs2bHFoN0FMR3c0VjJCVTI2dEF5TDFzVjBSWjd0YS9HeU9xYjUyVUlYSEVndWdXQU52aTRBWjdKaTM2TCtLM0VueU4rUGdOMFRJZHgvbkNncEFzRm5jbUc3SitCZmJjVzBINHNKalpSTnFDMEQvVW5lNmdTc0hzQmdrcGtMODJ5MFY3dVUwaVBTRGtKWGVXTjhuZnI3alFBWWtYMEtaMk5qbmd4ZW5BYWpCM2J0V1ExMk43bE9SMklldytVTnRpVWptYTdnZW1MdmRyVHhGK0t6bTlKTkFQWThKaVEyd0RjV3ozYTdvSjYvV2pBZ3QvdEtWVkNKUmJYdGVVdXZIelRVVkd5RnIyMkhpMTJoQ1JZc25WWlRhR1ByZDM1T1ZLUDc3TXFESHRXOFFrYi9VcjYxTlc0MmpueHQ3b1lTMHVxVkl5VHR3YTBOZmh3MzU0eVI0WXlIQlZ0cjkvcjRGNzF6WDZWTWI1YkdQMm5VUjJjUndkekRQd3JpWjhLclBtN3MreGRac0pRYm5wdTRadFluSU5xNEhPMGJXRWRVYVZjemVDUmF5dWh4Ym1vb04rNnhibGdUbFdRV3U5aUcxaks1SFdGZE1VeW4xdzZYeFgvUWlDM2hHN1ZLRW9IUjhmeFROenQwOFJQd2o3d29VTlF1NGNja3U3UjZId1JnQy9kQmRWZk5zVVdWV2o3N1pKZStwcXNjcVFreXEvVXJSUzBOZk5NZ3J4ajJrYlRKZ0xINnJyaU9JZEthdUo0UlVqbUppVDdzdkQwaHhZTjBzbktYSnlCSGZaWWdHbzhpTDRPaUdQRyszMGlNQTMySGRWSG1aUllKc1RFcDVZc0VpVXZ5VHZNeW1vZ1dKMEh2RzZnclptbE1tc1dCMElIbTlueFlKVi9OY2FZOGo4Y2lDQzdtWmNWU0xnYUhJS3VDcWF2UmR0M29QV1ZpVEIyekl2cHArOHFpekxndXdIZzh3WE90M0VkUzhESEEwRjNlTW93VGRiaVZCVHdMb1E4cUsvRTI3WjlWS1c3R0ZqN2xJUEJLYmxWaDVTTGhKY1pvZXJhVnByVkZOSmJ2MmdkbFZxcjRuMnRiZ3NVVys1cFFKOVZqM2NLRXMrbzNlc0RKSjhCM1R0eHpkbU1tT0JjUUtlTWJoTWE2SW8vMFVsczJ4cDlwS2V4YlR4REwxa1NyNVVEVFAxblB6VkhyRzlva2V3MnNMSFQwRlFBYVhHcVR6VmZnaGZOT1ZualJMVHdJcTlueEJIN09nU0RzVy85ZlZwZUllZzVwTFFlRFVodHNaZTdBUnZQM0dPU0VaNjVMZkxQQXhjT0dvdTNWQU9rVnFDL09KcCt0MVdhNDdYSEdiWlpIOC9DWG1mUGNYMVBMZjVlWlordEF2d2ptMjBJYjNvSkwyZE5xVkdaVmh6aWZDTDZsV05PeFF2VGRkbDRXV28zSkJ4eU9XS0V1ektBZHpBd0ZsaVUrTTF0ZWNiMDhxUmdQeWVUVVBNSUJZMmo3QzJKcVMyOFk4Q2pzZ2doZXk3R3NPODJZM0FjSGhGaEVINjJsbzc1Y2Z4TmhKbXVWcURtditWWVVXR1hWUUhLemxiZmdlR0p4d3I4T2VOSlM4NlgveGR2Ym4vYW8vT3FXWDgrVS9TY1R6dVJDNDA5cms5S3JmcWRNWVdNZFNHd1N0ZllhbzhnNU9KTHZGbDdsN0QxekxiR082SWR1bVJwb1VCNXVGR1pQNC9PRjN3V29RTUltK3pRRHZBSzBVK2o4MEZtbjMveTVNTFBlM2RBdDBPRy9pdkFBRTVNdHkxdzZDUU1BQUFBQUVsRlRrU3VRbUNDIn0sdnJnNTpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLnBhZ2luYXRpb25bZGF0YS12LTI1MzRkZDAyXXtcbiAgLXdlYmtpdC1ib3gtcGFjazoganVzdGlmeTtcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xufVxuLm1hbnVbZGF0YS12LTI1MzRkZDAyXXtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogMzBweDtcbiAgaGVpZ2h0OiAyMHB4O1xuICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgcGFkZGluZzogMXB4IDVweCAycHggNXB4O1xuICBjb2xvcjogcmdiYSgxODEsIDE4NCwgMjE3LCAxKTtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuLm1hbnUtdXAtYWN0aXZlW2RhdGEtdi0yNTM0ZGQwMl17XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjMxLCAxMjUsIDAsIDEpO1xuICBjb2xvcjpyZ2JhKDIzMSwgMTI1LCAwLCAxKTtcbn1cbi5tYW51LWJhY2stYWN0aXZlW2RhdGEtdi0yNTM0ZGQwMl17XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjQwLCA4LCA4LCAxKTtcbiAgY29sb3I6cmdiYSgyNDAsIDgsIDgsIDEpO1xufVxuLmRlbGV0ZS1hY3RpdmVbZGF0YS12LTI1MzRkZDAyXXtcbiAgYm9yZGVyOjFweCBzb2xpZCByZ2JhKDEwNSwgNzgsIDI1NSwgMSk7XG4gIGNvbG9yOiByZ2JhKDEwNSwgNzgsIDI1NSwgMSk7XG59XG4uZGF0ZS1sZWZ0W2RhdGEtdi0yNTM0ZGQwMl17XG4gIG1hcmdpbi1sZWZ0OiAyOHB4O1xufVxuLnBhZ2luYXRpb25bZGF0YS12LTI1MzRkZDAyXSB7XG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAtd2Via2l0LWJveC1wYWNrOiBlbmQ7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZVN1YmxpdmUvc3JjL2NvbXBvbmVudHMvbWFuYWdlU3VibGl2ZS9zdWJsaXZlTGlzdC52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBaXBCQTtFQUNBLDBCQUFBO01BQUEsdUJBQUE7VUFBQSwrQkFBQTtDQUNBO0FBQ0E7RUFDQSxzQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0Esd0NBQUE7RUFDQSxvQkFBQTtFQUNBLGdCQUFBO0VBQ0EseUJBQUE7RUFDQSw4QkFBQTtFQUNBLGdCQUFBO0NBQ0E7QUFDQTtFQUNBLHVDQUFBO0VBQ0EsMkJBQUE7Q0FDQTtBQUNBO0VBQ0EscUNBQUE7RUFDQSx5QkFBQTtDQUNBO0FBQ0E7RUFDQSx1Q0FBQTtFQUNBLDZCQUFBO0NBQ0E7QUFDQTtFQUNBLGtCQUFBO0NBQ0E7QUFDQTtFQUNBLHFCQUFBO0VBQ0Esc0JBQUE7Q0FDQSIsZmlsZToic3VibGl2ZUxpc3QudnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0ic3VibGl2ZSI+XG4gICAgPGRpdj5cbiAgICAgIDxjaXJjbGUtdGl0bGVcbiAgICAgICAgdGl0bGUtbmFtZT0i54K55pKt566h55CGIlxuICAgICAgICBjbGFzcz0iY2ljbGUtY29udHJvbGxlciJcbiAgICAgIC8+XG4gICAgICA8ZGl2IGNsYXNzPSJzZWFyY2gtZm9ybS1jb250YWluZXIiPlxuICAgICAgICA8ZWwtZm9ybVxuICAgICAgICAgIDppbmxpbmU9InRydWUiXG4gICAgICAgICAgOm1vZGVsPSJzdWJMaXZlIlxuICAgICAgICAgIGNsYXNzPSJkZW1vLWZvcm0taW5saW5lIj5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i56i/5Lu25Li76aKYIlxuICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAtMjlweCI+XG4gICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgdi1tb2RlbD0ic3ViTGl2ZS50aXRsZSJcbiAgICAgICAgICAgICAgY2xlYXJhYmxlLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i6aKR6YGTIlxuICAgICAgICAgICAgcHJvcD0iY2hhbm5lbGlkIj5cbiAgICAgICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICAgICAgdi1tb2RlbD0ic3ViTGl2ZS5jaGFubmVsaWQiXG4gICAgICAgICAgICAgIGZpbHRlcmFibGVcbiAgICAgICAgICAgICAgY2xlYXJhYmxlXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSIiXG4gICAgICAgICAgICAgIEBjbGVhcj0iZ2V0U3ViTGl2ZUxpc3QiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9ImdldFN1YkxpdmVMaXN0Ij5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIGNoYW5uZWxUeXBlTGlzdCJcbiAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICAgICAgICA6dmFsdWU9Iml0ZW0udmFsdWUiXG4gICAgICAgICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIi8+XG4gICAgICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i54q25oCBIlxuICAgICAgICAgICAgY2xhc3M9InNlYXJjaC1sZWZ0Ij5cbiAgICAgICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICAgICAgdi1tb2RlbD0ic3ViTGl2ZS5zdGF0ZSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IiJcbiAgICAgICAgICAgICAgQGNoYW5nZT0iZ2V0U3ViTGl2ZUxpc3QiPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgdmFsdWU9IiJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5YWo6YOoIi8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9IjAiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuW+heS4iue6vyIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPSIxIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlt7LkuIrnur8iLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMiJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5bey5LiL57q/Ii8+XG4gICAgICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBsYWJlbD0i5byA5aeL5pe26Ze0Ij5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9InN1YkxpdmUuc3RhcnREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9InN1YkxpdmUuc3RhcnREYXRlIlxuICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pe26Ze0IlxuICAgICAgICAgICAgICBAY2hhbmdlPSJnZXRTdWJMaXZlTGlzdCIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLnu5PmnZ/ml7bpl7QiXG4gICAgICAgICAgICBjbGFzcz0iZGF0ZS1sZWZ0IlxuICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OjBweCI+XG4gICAgICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICAgICAgOnRpdGxlPSJzdWJMaXZlLmVuZERhdGUgfCBGb3JtYXREYXRlKFwneXl5eS1NTS1kZCBoaDptbVwnKSJcbiAgICAgICAgICAgICAgdi1tb2RlbD0ic3ViTGl2ZS5lbmREYXRlIlxuICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pe26Ze0IlxuICAgICAgICAgICAgICBAY2hhbmdlPSJnZXRTdWJMaXZlTGlzdCIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IDEwcHgiXG4gICAgICAgICAgICBAY2xpY2s9ImdldFN1YkxpdmVMaXN0Ij5cbiAgICAgICAgICAgIOafpeivolxuICAgICAgICAgICAgPGkgY2xhc3M9ImVsLWljb24tc2VhcmNoIGVsLWljb24tLXJpZ2h0Ii8+XG4gICAgICAgICAgPC9lbC1idXR0b24+XG4gICAgICAgIDwvZWwtZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9InRhYmxlLWxpc3QiPlxuICAgICAgPGVsLXRhYmxlXG4gICAgICAgIHJlZj0iY2hhbm5lbFRhYmxlIlxuICAgICAgICA6ZGF0YT0idGFibGVEYXRhIlxuICAgICAgICBzdHJpcGVcbiAgICAgICAgY2xhc3M9Indob2xlLXRhYmxlIlxuICAgICAgICBtaW4taGVpZ2h0PSI0MDAiPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gdGFibGVIZWFkZXIiXG4gICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgOnByb3A9Iml0ZW0ucHJvcCJcbiAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiXG4gICAgICAgICAgOndpZHRoPSJpdGVtLndpZHRoIlxuICAgICAgICAgIDpmb3JtYXR0ZXI9Iml0ZW0uZm9ybWF0dGVyIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgZml4ZWRcbiAgICAgICAgICBzaG93LW92ZXJmbG93LXRvb2x0aXBcbiAgICAgICAgLz5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGxhYmVsPSLlvZLlsZ7popHpgZMiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciI+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj5cbiAgICAgICAgICAgIDxlbC10YWdcbiAgICAgICAgICAgICAgdi1pZj0ic2hvd051bGxUYWcoc2NvcGUucm93LmNoYW5uZWxMaXN0KSJcbiAgICAgICAgICAgICAgc2l6ZT0ibWluaSI+5pegPC9lbC10YWc+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICA6Y29udGVudD0ic2hvd0NoYW5uZWxBbGxOYW1lKHNjb3BlLnJvdy5jaGFubmVsTGlzdCkiXG4gICAgICAgICAgICAgIDprZXk9InNjb3BlLnJvdy52aWRlb2lkIlxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcC1zdGFydCI+XG4gICAgICAgICAgICAgIDxlbC10YWdcbiAgICAgICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBzY29wZS5yb3cuY2hhbm5lbExpc3QiXG4gICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgICAgICAgc2l6ZT0ibWluaSI+XG4gICAgICAgICAgICAgICAge3sgY2hhbm5lbFRhZ0NvbnRlbnQoaXRlbSkgfX1cbiAgICAgICAgICAgICAgPC9lbC10YWc+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9lbC10YWJsZS1jb2x1bW4+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICBsYWJlbD0i572u6aG254q25oCBIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICB2LWlmPSIhc2NvcGUucm93LnRvcCJcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgY29udGVudD0i54K55Ye7572u6aG2IlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcCI+XG4gICAgICAgICAgICAgIDxlbC10YWdcbiAgICAgICAgICAgICAgICBzaXplPSJtaW5pIlxuICAgICAgICAgICAgICAgIGNsYXNzPSJzZXRQb2ludGVyIlxuICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDo2MHB4OyJcbiAgICAgICAgICAgICAgICBAY2xpY2submF0aXZlPSJzZXRTdWJMaXZlVW5Ub3Aoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg572u6aG2XG4gICAgICAgICAgICAgIDwvZWwtdGFnPlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgdi1lbHNlXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9IueCueWHu+WPlua2iOe9rumhtiJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3AiPlxuICAgICAgICAgICAgICA8ZWwtdGFnXG4gICAgICAgICAgICAgICAgc2l6ZT0ibWluaSJcbiAgICAgICAgICAgICAgICBjbGFzcz0ic2V0UG9pbnRlciJcbiAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6NjBweDtjb2xvcjojNjk0ZWZmIlxuICAgICAgICAgICAgICAgIEBjbGljay5uYXRpdmU9InNldFN1YkxpdmVUb3Aoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg5Y+W5raI572u6aG2XG4gICAgICAgICAgICAgIDwvZWwtdGFnPlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgbGFiZWw9IuS4iueovy/mkqTnqL8iXG4gICAgICAgICAgYWxpZ249ImNlbnRlciI+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYW51LWNvbnRhaW5lciI+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgOmNsYXNzPSJbXCdtYW51XCcsIHNjb3BlLnJvdy5zdGF0ZSAhPT0gMSAmJiBzY29wZS5yb3cuY2hhbm5lbExpc3QubGVuZ3RoID4gMCA/IFwnbWFudS11cC1hY3RpdmVcJzogXCdcJ10iXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJ1cFN1YkxpdmUoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg5LiK56i/XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICA6Y2xhc3M9IltcJ21hbnVcJywgc2NvcGUucm93LnN0YXRlID09PSAxID8gXCdtYW51LWJhY2stYWN0aXZlXCc6IFwnXCddIlxuICAgICAgICAgICAgICAgIEBjbGljaz0iZG93blN1YkxpdmUoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg5pKk56i/XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGxhYmVsPSLmk43kvZwiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciI+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYW51LWNvbnRhaW5lciI+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgOmNsYXNzPSJbXCdtYW51XCcsIHNjb3BlLnJvdy5zdGF0ZSAhPT0gMSA/IFwnZGVsZXRlLWFjdGl2ZVwnOiBcJ1wnXSJcbiAgICAgICAgICAgICAgICBAY2xpY2s9InNldHRpbmdTdWJMaXZlKHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIOmFjee9rlxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgOmNsYXNzPSJbXCdtYW51XCcsIHNjb3BlLnJvdy5zdGF0ZSAhPT0gMSA/IFwnZGVsZXRlLWFjdGl2ZVwnOiBcJ1wnXSJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImRlbGV0ZVN1YkxpdmUoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg5Yig6ZmkXG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGZpeGVkPSJyaWdodCJcbiAgICAgICAgICBsYWJlbD0i5p2D6ZmQ6YWN572uIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgd2lkdGg9IjExNSI+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9IuivhOiuuiJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3AiPlxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgOnN0eWxlPSJ7YmFja2dyb3VuZENvbG9yOiBzY29wZS5yb3cuYWxsb3dfY29tbWVudCA/IFwnI2ZmYTUwN1wnOiBcJyNCNUI4RDlcJ30iXG4gICAgICAgICAgICAgICAgY2xhc3M9ImFsbG93X2NvbW1lbnQiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJoYW5kbGVDb21tZW50KHNjb3BlLnJvdykiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8aVxuICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiB3aGl0ZSJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPSJpY29uZm9udCBpY29uLW1hbnUtY29tbWVudCIvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZWwtdG9vbHRpcD5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9IuWIhuS6qyJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3AiPlxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgOnN0eWxlPSJ7YmFja2dyb3VuZENvbG9yOiBzY29wZS5yb3cuYWxsb3dfc2hhcmUgPyBcJyMxODgzRkZcJzogXCcjQjVCOEQ5XCd9IlxuICAgICAgICAgICAgICAgIGNsYXNzPSJhbGxvd19zaGFyZSJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImhhbmRsZVNoYXJlKHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIDxpXG4gICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IHdoaXRlIlxuICAgICAgICAgICAgICAgICAgY2xhc3M9Imljb25mb250IGljb24tc2hhcmUiLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2VsLXRvb2x0aXA+XG4gICAgICAgICAgICA8ZWwtdG9vbHRpcFxuICAgICAgICAgICAgICBjbGFzcz0iaXRlbSJcbiAgICAgICAgICAgICAgZWZmZWN0PSJkYXJrIlxuICAgICAgICAgICAgICBjb250ZW50PSLngrnotZ4iXG4gICAgICAgICAgICAgIHBsYWNlbWVudD0idG9wIj5cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIDpzdHlsZT0ie2JhY2tncm91bmRDb2xvcjogc2NvcGUucm93LmFsbG93X2xpa2UgPyBcJyNGMDA4MDhcJzogXCcjQjVCOEQ5XCd9IlxuICAgICAgICAgICAgICAgIGNsYXNzPSJhbGxvd19saWtlIlxuICAgICAgICAgICAgICAgIEBjbGljaz0iaGFuZGxlUHJhaXNlKHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICAgIDxpXG4gICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IHdoaXRlIlxuICAgICAgICAgICAgICAgICAgY2xhc3M9Imljb25mb250IGljb24tcHJhaXNlIi8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgICAgPGVsLXRvb2x0aXBcbiAgICAgICAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgICAgICAgIGVmZmVjdD0iZGFyayJcbiAgICAgICAgICAgICAgY29udGVudD0i5pS26JePIlxuICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcCI+XG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICA6c3R5bGU9IntiYWNrZ3JvdW5kQ29sb3I6IHNjb3BlLnJvdy5hbGxvd19jb2xsZWN0ID8gXCcjNjk0RUZGXCc6IFwnI0I1QjhEOVwnfSJcbiAgICAgICAgICAgICAgICBjbGFzcz0iYWxsb3dfY29sbGVjdCJcbiAgICAgICAgICAgICAgICBAY2xpY2s9ImhhbmRsZUNvbGxlY3Qoc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogd2hpdGUiXG4gICAgICAgICAgICAgICAgICBjbGFzcz0iaWNvbmZvbnQgaWNvbi1jb2xsZWN0Ii8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgPC9lbC10YWJsZT5cbiAgICAgIDxkaXYgY2xhc3M9InBhZ2luYXRpb24iPlxuICAgICAgICA8ZWwtcGFnaW5hdGlvblxuICAgICAgICAgIDp0b3RhbD0idG90YWwiXG4gICAgICAgICAgOnBhZ2Utc2l6ZXM9IlsxMCwgMjAsIDMwLCA0MF0iXG4gICAgICAgICAgYmFja2dyb3VuZFxuICAgICAgICAgIGxheW91dD0idG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dCJcbiAgICAgICAgICBAc2l6ZS1jaGFuZ2U9ImhhbmRsZVNpemVDaGFuZ2UiXG4gICAgICAgICAgQGN1cnJlbnQtY2hhbmdlPSJoYW5kbGVDdXJyZW50Q2hhbmdlIi8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZWwtZGlhbG9nXG4gICAgICA6dmlzaWJsZS5zeW5jPSJkaWFsb2dWaXNpYmxlIlxuICAgICAgY3VzdG9tLWNsYXNzPSJjdXN0b20tZGlhbG9nIlxuICAgICAgdGl0bGU9IueCueaSreS/oeaBr+mFjee9riJcbiAgICAgIHdpZHRoPSIzOCUiXG4gICAgICBAY2xvc2U9ImNsb3NlRGlhbG9nIj5cbiAgICAgIDxkaXZcbiAgICAgICAgOmlzPSJjb21wb25lbnROYW1lIlxuICAgICAgICA6dmlkZW9pZD0idmlkZW9pZCJcbiAgICAgICAgOm1hbnUtdGl0bGU9Im1hbnVUaXRsZSIvPlxuICAgIDwvZWwtZGlhbG9nPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IENpcmNsZVRpdGxlIGZyb20gXCdAL2NvbXBvbmVudHMvY29tbW9ucy9jaXJjbGVUaXRsZVwnXG5pbXBvcnQgU2V0dGluZ01hbnUgZnJvbSBcJy4vc2V0dGluZ01hbnVcJ1xuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tIFwnQC9hcGkvZGVtYW5kLWNoYW5uZWxcJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQ2lyY2xlVGl0bGUsXG4gICAgU2V0dGluZ01hbnVcbiAgfSxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1YkxpdmU6IHtcbiAgICAgICAgY2hhbm5lbF9uYW1lOiBcJ1wnLFxuICAgICAgICBzdGF0ZTogXCdcJyxcbiAgICAgICAgc3RhcnREYXRlOiBcJ1wnLFxuICAgICAgICBlbmREYXRlOiBcJ1wnLFxuICAgICAgICBjaGFubmVsaWQ6IFwnXCcsXG4gICAgICAgIHRpdGxlOiBcJ1wnXG4gICAgICB9LFxuICAgICAgY2hhbm5lbFR5cGVMaXN0OiBbXSwgLy8g5omA5bGe6aKR6YGT5YiX6KGoXG4gICAgICBjbGlja0NlbGxJbmRleDogLTEsXG4gICAgICB0YWJsZUhlYWRlcjogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCd0aXRsZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+eov+S7tuS4u+mimFwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2NyZWF0ZXRpbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfmjqjpgIHml6XmnJ9cJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10oY2VsbFZhbHVlLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3VwZGF0ZXRpbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfmm7TmlrDml6XmnJ9cJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10oY2VsbFZhbHVlLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2RpZ2VzdFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+eov+S7tuWGheWuuVwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3BsYXlfdXJsXCcsXG4gICAgICAgICAgbGFiZWw6IFwn6buY6K6k6KeG6aKR6ZO+5o6lXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8YSBocmVmPXtjZWxsVmFsdWV9IHRhcmdldD1cJ19ibGFua1wnPntjZWxsVmFsdWV9PC9hPlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnc3RhdGVcJyxcbiAgICAgICAgICBsYWJlbDogXCfnirbmgIFcJyxcbiAgICAgICAgICB3aWR0aDogXCcxMDBcJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNlbGxWYWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gXCflvoXkuIrnur9cJ1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjZWxsVmFsdWUgPT09IDEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwn5bey5LiK57q/XCdcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2VsbFZhbHVlID09PSAyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBcJ+W3suS4i+e6v1wnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgdGFibGVEYXRhOiBbXSxcbiAgICAgIGNvbW1lbnQ6IGZhbHNlLFxuICAgICAgc2hhcmU6IGZhbHNlLFxuICAgICAgcHJhaXNlOiBmYWxzZSxcbiAgICAgIGNvbGxlY3Q6IGZhbHNlLFxuICAgICAgaW5kZXg6IC0xLFxuICAgICAgcGFnZU5vOiAxLFxuICAgICAgcGFnZVNpemU6IDEwLFxuICAgICAgdG90YWw6IDAsXG4gICAgICBkaWFsb2dWaXNpYmxlOiBmYWxzZSxcbiAgICAgIGNvbXBvbmVudE5hbWU6IFwnXCcsXG4gICAgICB2aWRlb2lkOiBcJzBcJyxcbiAgICAgIG1hbnVUaXRsZTogXCdcJyAvLyDnqL/ku7bkuLvpopgsIOS8oOe7meWtkOe7hOS7tlxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBzaG93TnVsbFRhZyAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFycikge1xuICAgICAgICBpZiAoIWFycikge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gZWxzZSBpZiAoYXJyLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY2hhbm5lbFRhZ0NvbnRlbnQgKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgICAgaWYgKGNvbnRlbnQuY2hhbm5lbF9uYW1lID09PSBcJ1wnKSB7XG4gICAgICAgICAgICByZXR1cm4gXCfml6BcJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGVudC5jaGFubmVsX25hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwn5pegXCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc2hvd0NoYW5uZWxBbGxOYW1lICgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJyKSB7XG4gICAgICAgIGxldCB0aXRsZSA9IFwnXCdcbiAgICAgICAgYXJyLmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICBpZiAoaW5kZXggIT09IGFyci5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICB0aXRsZSArPSBpdGVtLmNoYW5uZWxfbmFtZSArIFwnLFwnXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpdGxlICs9IGl0ZW0uY2hhbm5lbF9uYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gdGl0bGVcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgXCdzdWJMaXZlLnRpdGxlXCcgKCkge1xuICAgICAgdGhpcy5nZXRTdWJMaXZlTGlzdCgpXG4gICAgfVxuICB9LFxuICBtb3VudGVkICgpIHtcbiAgICB0aGlzLmdldFN1YkxpdmVMaXN0KClcbiAgICB0aGlzLmdldExpc3RVc2FibGVDaGFubmVsKClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIC8qKiDojrflj5bnqL/ku7bliJfooaggKiovXG4gICAgZ2V0U3ViTGl2ZUxpc3QgKCkge1xuICAgICAgdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnc3dhcFRpbWVcJ10odGhpcy5zdWJMaXZlKVxuICAgICAgbGV0IHRpbWVTdGFydCA9IHRoaXMuc3ViTGl2ZS5zdGFydERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLnN1YkxpdmUuc3RhcnREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBsZXQgdGltZUVuZCA9IHRoaXMuc3ViTGl2ZS5lbmREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5zdWJMaXZlLmVuZERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIEFjdGlvbnMuZ2V0U3ViTGl2ZUxpc3Qoe1xuICAgICAgICBcJ3BhZ2VOb1wnOiB0aGlzLnBhZ2VObyxcbiAgICAgICAgXCdwYWdlU2l6ZVwnOiB0aGlzLnBhZ2VTaXplLFxuICAgICAgICBcJ2NoYW5uZWxpZFwnOiB0aGlzLnN1YkxpdmUuY2hhbm5lbGlkLFxuICAgICAgICBcJ3RpdGxlXCc6IHRoaXMuc3ViTGl2ZS50aXRsZSxcbiAgICAgICAgXCdzdGF0ZVwnOiB0aGlzLnN1YkxpdmUuc3RhdGUsXG4gICAgICAgIFwndGltZVN0YXJ0XCc6IHRpbWVTdGFydCxcbiAgICAgICAgXCd0aW1lRW5kXCc6IHRpbWVFbmRcbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKVxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gZGF0YS5saXN0XG4gICAgICAgICAgdGhpcy50b3RhbCA9IGRhdGEudG90YWxcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDojrflj5bpopHpgZPnsbvliKsgKiovXG4gICAgZ2V0TGlzdFVzYWJsZUNoYW5uZWwgKCkge1xuICAgICAgQWN0aW9ucy5nZXRTdWJMaXZlVXNhYmxlQ2hhbm5uZWwoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YVxuICAgICAgICBpZiAoZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gZGF0YS5yZXN1bHRcbiAgICAgICAgICByZXN1bHQuZm9yRWFjaCgoaXRlbSwgaW5kZXgsIGFycikgPT4ge1xuICAgICAgICAgICAgbGV0IG5ld0l0ZW0gPSB7fVxuICAgICAgICAgICAgbmV3SXRlbS5sYWJlbCA9IGl0ZW0uY2hhbm5lbF9uYW1lXG4gICAgICAgICAgICBuZXdJdGVtLnZhbHVlID0gaXRlbS5jaGFubmVsaWRcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbFR5cGVMaXN0LnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgaGFuZGxlU2l6ZUNoYW5nZSAocGFnZVNpemUpIHtcbiAgICAgIHRoaXMucGFnZVNpemUgPSBwYWdlU2l6ZVxuICAgICAgdGhpcy5nZXRTdWJMaXZlTGlzdCgpXG4gICAgfSxcbiAgICBoYW5kbGVDdXJyZW50Q2hhbmdlIChwYWdlSW5kZXgpIHtcbiAgICAgIHRoaXMucGFnZU5vID0gcGFnZUluZGV4XG4gICAgICB0aGlzLmdldFN1YkxpdmVMaXN0KClcbiAgICB9LFxuICAgIC8qKiDor4TorrrmnYPpmZAgKiovXG4gICAgaGFuZGxlQ29tbWVudCAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIGlmIChyb3cuYWxsb3dfY29tbWVudCkge1xuICAgICAgICAgIHRoaXMudXBkYXRlU3ViTGl2ZShyb3cudmlkZW9pZCwgXCdhbGxvd19jb21tZW50XCcsIGZhbHNlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudXBkYXRlU3ViTGl2ZShyb3cudmlkZW9pZCwgXCdhbGxvd19jb21tZW50XCcsIHRydWUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+W3suS4iue6v+eov+S7tuS4jeWPr+aTjeS9nOivhOiuuuadg+mZkCFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOWIhuS6q+adg+mZkCAqKi9cbiAgICBoYW5kbGVTaGFyZSAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIGlmIChyb3cuYWxsb3dfc2hhcmUpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVN1YkxpdmUocm93LnZpZGVvaWQsIFwnYWxsb3dfc2hhcmVcJywgZmFsc2UpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVTdWJMaXZlKHJvdy52aWRlb2lkLCBcJ2FsbG93X3NoYXJlXCcsIHRydWUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+W3suS4iue6v+eov+S7tuS4jeWPr+aTjeS9nOWIhuS6q+adg+mZkCFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOeCuei1nuadg+mZkCAqKi9cbiAgICBoYW5kbGVQcmFpc2UgKHJvdykge1xuICAgICAgaWYgKHJvdy5zdGF0ZSAhPT0gMSkge1xuICAgICAgICBpZiAocm93LmFsbG93X2xpa2UpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVN1YkxpdmUocm93LnZpZGVvaWQsIFwnYWxsb3dfbGlrZVwnLCBmYWxzZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVN1YkxpdmUocm93LnZpZGVvaWQsIFwnYWxsb3dfbGlrZVwnLCB0cnVlKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCflt7LkuIrnur/nqL/ku7bkuI3lj6/mk43kvZzngrnotZ7mnYPpmZAhXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDmlLbol4/mnYPpmZAgKiovXG4gICAgaGFuZGxlQ29sbGVjdCAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIGlmIChyb3cuYWxsb3dfY29sbGVjdCkge1xuICAgICAgICAgIHRoaXMudXBkYXRlU3ViTGl2ZShyb3cudmlkZW9pZCwgXCdhbGxvd19jb2xsZWN0XCcsIGZhbHNlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudXBkYXRlU3ViTGl2ZShyb3cudmlkZW9pZCwgXCdhbGxvd19jb2xsZWN0XCcsIHRydWUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+W3suS4iue6v+eov+S7tuS4jeWPr+aTjeS9nOaUtuiXj+adg+mZkCFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOe9rumhtiAqKi9cbiAgICBzZXRTdWJMaXZlVW5Ub3AgKHJvdykge1xuICAgICAgdGhpcy51cGRhdGVTdWJMaXZlKHJvdy52aWRlb2lkLCBcJ3RvcFwnLCB0cnVlKVxuICAgIH0sXG4gICAgLyoqIOWPlua2iOe9rumhtiAqKi9cbiAgICBzZXRTdWJMaXZlVG9wIChyb3cpIHtcbiAgICAgIHRoaXMudXBkYXRlU3ViTGl2ZShyb3cudmlkZW9pZCwgXCd0b3BcJywgZmFsc2UpXG4gICAgfSxcbiAgICAvKiog5LiK56i/ICoqL1xuICAgIHVwU3ViTGl2ZSAocm93KSB7XG4gICAgICBpZiAocm93LmNoYW5uZWxMaXN0Lmxlbmd0aCA8PSAwKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+ivpeeov+S7tui/mOayoeaciemFjee9rumikemBkywg5LiN6IO95LiK56i/IVwnXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgaWYgKHJvdy5zdGF0ZSA9PT0gMCB8fCByb3cuc3RhdGUgPT09IDIpIHtcbiAgICAgICAgdGhpcy4kY29uZmlybShcJ+ehruWumuimgeS4iueov+WQlz9cJywgXCfmj5DnpLpcJywge1xuICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcJ+ehruWumlwnLFxuICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwn5Y+W5raIXCcsXG4gICAgICAgICAgdHlwZTogXCd3YXJuaW5nXCdcbiAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgdGhpcy51cGRhdGVTdWJMaXZlKHJvdy52aWRlb2lkLCBcJ3N0YXRlXCcsIDEpXG4gICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+ivpeeov+S7tuW3suS4iue6vyFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOaSpOeovyAqKi9cbiAgICBkb3duU3ViTGl2ZSAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlID09PSAxKSB7XG4gICAgICAgIHRoaXMuJGNvbmZpcm0oXCfnoa7lrpropoHmkqTnqL/lkJc/XCcsIFwn5o+Q56S6XCcsIHtcbiAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCfnoa7lrppcJyxcbiAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcJ+WPlua2iFwnLFxuICAgICAgICAgIHR5cGU6IFwnd2FybmluZ1wnXG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMudXBkYXRlU3ViTGl2ZShyb3cudmlkZW9pZCwgXCdzdGF0ZVwnLCAyKVxuICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCfor6XnqL/ku7bov5jmnKrkuIrnqL8hXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDphY3nva7ngrnmkq0gKiovXG4gICAgc2V0dGluZ1N1YkxpdmUgKHJvdykge1xuICAgICAgaWYgKHJvdy5zdGF0ZSAhPT0gMSkge1xuICAgICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSB0cnVlXG4gICAgICAgIHRoaXMuY29tcG9uZW50TmFtZSA9IFNldHRpbmdNYW51XG4gICAgICAgIHRoaXMudmlkZW9pZCA9IHJvdy52aWRlb2lkXG4gICAgICAgIHRoaXMubWFudVRpdGxlID0gcm93LnRpdGxlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiBcJ2Vycm9yXCcsXG4gICAgICAgICAgbWVzc2FnZTogXCfor7fmkqTnqL/lkI7lho3phY3nva4hXCdcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDliKDpmaTnqL/ku7YgKiovXG4gICAgZGVsZXRlU3ViTGl2ZSAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIHRoaXMuJGNvbmZpcm0oXCfmmK/lkKbliKDpmaQiXCcgKyByb3cudGl0bGUgKyBcJyI/XCcsIFwn5o+Q56S6XCcsIHtcbiAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCfnoa7lrppcJyxcbiAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcJ+WPlua2iFwnLFxuICAgICAgICAgIHR5cGU6IFwnd2FybmluZ1wnXG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIEFjdGlvbnMuZGVsZXRlU3ViTGl2ZSh7XG4gICAgICAgICAgICBcJ3ZpZGVvXCc6IHtcbiAgICAgICAgICAgICAgXCd2aWRlb2lkXCc6IHJvdy52aWRlb2lkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+WIoOmZpOaIkOWKnyFcJ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nZXRTdWJMaXZlTGlzdCgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCdlcnJvclwnLFxuICAgICAgICAgIG1lc3NhZ2U6IFwn5bey5LiK57q/56i/5Lu25LiN5Y+v5Yig6ZmkIVwnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgICAqIOeCueaSreaTjeS9nOeahOWFrOWFseaOpeWPo1xuICAgICAgICogQHBhcmFtIGFydGljbGVpZCDmlofnq6BJRFxuICAgICAgICogQHBhcmFtIGtleSDmm7TmlrDlrZfmrrXlkI1cbiAgICAgICAqIEBwYXJhbSB2YWx1ZSDlgLxcbiAgICAgICAqL1xuICAgIHVwZGF0ZVN1YkxpdmUgKHZpZGVvaWQsIGtleSwgdmFsdWUpIHtcbiAgICAgIEFjdGlvbnMudXBkYXRlU3ViTGl2ZSh7XG4gICAgICAgIFwndmlkZW9cJzoge1xuICAgICAgICAgIFwndmlkZW9pZFwnOiB2aWRlb2lkLFxuICAgICAgICAgIFtrZXldOiB2YWx1ZVxuICAgICAgICB9XG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgbWVzc2FnZTogXCfmk43kvZzmiJDlip8hXCdcbiAgICAgICAgICB9KVxuICAgICAgICAgIHRoaXMuZ2V0U3ViTGl2ZUxpc3QoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOiOt+WPluaJgOaciemAieaLqeeahOeov+S7tklEICoqL1xuICAgIHNlbGVjdGlvbkNoYW5nZSAoc2VsZWN0aW9uKSB7XG4gICAgICB0aGlzLmFydGljbGVpZExpc3QgPSBbXVxuICAgICAgc2VsZWN0aW9uLmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgdGhpcy5hcnRpY2xlaWRMaXN0LnB1c2goaXRlbS5hcnRpY2xlaWQpXG4gICAgICB9KVxuICAgICAgdGhpcy5zZWxlY3RlZE1hbnVJbmZvID0gc2VsZWN0aW9uXG4gICAgfSxcbiAgICAvKiog5YWz6Zet5a+56K+d5qGGICoqL1xuICAgIGNsb3NlRGlhbG9nICgpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50TmFtZSA9IFwnXCdcbiAgICAgIHRoaXMuZ2V0U3ViTGl2ZUxpc3QoKVxuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLnBhZ2luYXRpb257XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICB9XG4gIC5tYW51e1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB3aWR0aDogMzBweDtcbiAgICBoZWlnaHQ6IDIwcHg7XG4gICAgYm9yZGVyOjFweCBzb2xpZCByZ2JhKDE4MSwgMTg0LCAyMTcsIDEpO1xuICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gICAgZm9udC1zaXplOiAxM3B4O1xuICAgIHBhZGRpbmc6IDFweCA1cHggMnB4IDVweDtcbiAgICBjb2xvcjogcmdiYSgxODEsIDE4NCwgMjE3LCAxKTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbiAgLm1hbnUtdXAtYWN0aXZle1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjMxLCAxMjUsIDAsIDEpO1xuICAgIGNvbG9yOnJnYmEoMjMxLCAxMjUsIDAsIDEpO1xuICB9XG4gIC5tYW51LWJhY2stYWN0aXZle1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjQwLCA4LCA4LCAxKTtcbiAgICBjb2xvcjpyZ2JhKDI0MCwgOCwgOCwgMSk7XG4gIH1cbiAgLmRlbGV0ZS1hY3RpdmV7XG4gICAgYm9yZGVyOjFweCBzb2xpZCByZ2JhKDEwNSwgNzgsIDI1NSwgMSk7XG4gICAgY29sb3I6IHJnYmEoMTA1LCA3OCwgMjU1LCAxKTtcbiAgfVxuICAuZGF0ZS1sZWZ0e1xuICAgIG1hcmdpbi1sZWZ0OiAyOHB4O1xuICB9XG4gIC5wYWdpbmF0aW9uIHtcbiAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICAtd2Via2l0LWJveC1wYWNrOiBlbmQ7XG4gIH1cbjwvc3R5bGU+XG48c3R5bGU+XG4gIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmJ0bi1jb250YWluZXIgLmVsLWJ1dHRvbntcbiAgICBwYWRkaW5nOiAxMnB4IDEwcHg7XG4gIH1cbiAgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuYnRuLWNvbnRhaW5lciAuZWwtaWNvbi0tcmlnaHR7XG4gICAgbWFyZ2luOiAwO1xuICB9XG4gIC5jdXN0b20tZGlhbG9nIC5lbC1kaWFsb2dfX2hlYWRlcntcbiAgICAvKnBhZGRpbmc6IDA7Ki9cbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSgxOTIsMTkwLDI1NSwxKTtcbiAgfVxuICAuZWwtdG9vbHRpcF9fcG9wcGVye1xuICAgIG1heC13aWR0aDogMzAwcHg7XG4gIH1cbiAgLnN1YmxpdmUgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICB3aWR0aDogNjAlO1xuICB9XG4gIC5zdWJsaXZlIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmVsLWZvcm0taXRlbSB7XG4gICAgd2lkdGg6IDIwJTtcbiAgfVxuICAuc3VibGl2ZSAuYWxsb3dfY29tbWVudCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYTUwNztcbiAgICB3aWR0aDogMjBweDtcbiAgICBoZWlnaHQ6IDIwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC1tb3otYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIG1hcmdpbi1sZWZ0OiAzcHg7XG4gIH1cbiAgLnN1YmxpdmUgLmFsbG93X3NoYXJlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTg4M0ZGO1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgLW1vei1ib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gICAgbWFyZ2luLWxlZnQ6IDNweDtcbiAgfVxuICAuc3VibGl2ZSAuYWxsb3dfbGlrZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0YwMDgwODtcbiAgICB3aWR0aDogMjBweDtcbiAgICBoZWlnaHQ6IDIwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC1tb3otYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIG1hcmdpbi1sZWZ0OiAzcHg7XG4gIH1cbiAgLnN1YmxpdmUgLmFsbG93X2NvbGxlY3Qge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM2OTRFRkY7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtbW96LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBtYXJnaW4tbGVmdDogM3B4O1xuICB9XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sdnJrUDpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgiZzVDQiIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCI3MDZlYjJmYSIsYSwhMSx7fSl9LCJ3K0lhIjpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLnRhYmxlLWxpc3RbZGF0YS12LTFmNzYyZmZlXSB7XG4gIG1pbi1oZWlnaHQ6IDQwMHB4O1xuICBtYXJnaW4tdG9wOiAxMHB4O1xuICBwYWRkaW5nOiAwcHg7XG59XG4ud2hvbGUtdGFibGVbZGF0YS12LTFmNzYyZmZlXSB7XG4gIHdpZHRoOiAxMDAlO1xuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDIxOCwgMjIyLCAyMjMsIDEpO1xuICBtaW4taGVpZ2h0OiAyNXZ3O1xufVxuLnBhZ2luYXRpb25bZGF0YS12LTFmNzYyZmZlXSB7XG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgZGlzcGxheTogZmxleDtcbiAgLXdlYmtpdC1ib3gtcGFjazoganVzdGlmeTtcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuLmFkZFVybCAuYnRuLWNvbnRhaW5lcltkYXRhLXYtMWY3NjJmZmVdIHtcbiAgd2lkdGg6IDIzJSAhaW1wb3J0YW50O1xuICBsZWZ0OiAwcHg7XG59XG5cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlU2xpZGUvc3JjL2NvbXBvbmVudHMvbWFuYWdlU2xpZGUvYWRkVG9waWMudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQXFQQTtFQUNBLGtCQUFBO0VBQ0EsaUJBQUE7RUFDQSxhQUFBO0NBQ0E7QUFDQTtFQUNBLFlBQUE7RUFDQSx5Q0FBQTtFQUNBLGlCQUFBO0NBQ0E7QUFDQTtFQUNBLHFCQUFBO0VBQUEscUJBQUE7RUFBQSxjQUFBO0VBQ0EsMEJBQUE7TUFBQSx1QkFBQTtVQUFBLCtCQUFBO0VBQ0EsaUJBQUE7Q0FDQTtBQUNBO0VBQ0Esc0JBQUE7RUFDQSxVQUFBO0NBQ0EiLGZpbGU6ImFkZFRvcGljLnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9ImFkZFVybCI+XG4gICAgPGVsLWZvcm1cbiAgICAgIDppbmxpbmU9InRydWUiXG4gICAgICA6bW9kZWw9InRvcGljRm9ybSJcbiAgICAgIHNpemU9InNtYWxsIlxuICAgICAgY2xhc3M9ImRlbW8tZm9ybS1pbmxpbmUiPlxuICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5LiT6aKY5qCH6aKYIj5cbiAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgdi1tb2RlbD0idG9waWNGb3JtLnNwZWNpYWxfbmFtZSJcbiAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLlvZLlsZ7popHpgZMiPlxuICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgdi1tb2RlbD0idG9waWNGb3JtLmNoYW5uZWxpZCJcbiAgICAgICAgICBmaWx0ZXJhYmxlXG4gICAgICAgICAgY2xlYXJhYmxlXG4gICAgICAgICAgcGxhY2Vob2xkZXI9IiJcbiAgICAgICAgICBAY2xlYXI9InNlYXJjaFNwZWNpYWwiXG4gICAgICAgICAgQGNoYW5nZT0ic2VhcmNoU3BlY2lhbCI+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gbGlzdFVzYWJsZUNoYW5uZWwiXG4gICAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSJcbiAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5byA5aeL5pe26Ze0IlxuICAgICAgICBjbGFzcz0iZGF0ZS1sZWZ0Ij5cbiAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgOnRpdGxlPSJ0b3BpY0Zvcm0uc3RhcnREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgdi1tb2RlbD0idG9waWNGb3JtLnN0YXJ0RGF0ZSJcbiAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICBmb3JtYXQ9Inl5eXktTU0tZGQgSEg6bW0iXG4gICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXpeacnyJcbiAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hTcGVjaWFsIi8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9Iue7k+adn+aXtumXtCJcbiAgICAgICAgY2xhc3M9ImRhdGUtbGVmdCI+XG4gICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgIDp0aXRsZT0idG9waWNGb3JtLnN0YXJ0RGF0ZSB8IEZvcm1hdERhdGUoXCd5eXl5LU1NLWRkIGhoOm1tXCcpIlxuICAgICAgICAgIHYtbW9kZWw9InRvcGljRm9ybS5lbmREYXRlIlxuICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pel5pyfIlxuICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaFNwZWNpYWwiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbSBjbGFzcz0iYnRuLWNvbnRhaW5lciI+XG4gICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgIEBjbGljaz0ic2VhcmNoU3BlY2lhbCI+XG4gICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgPGkgY2xhc3M9ImVsLWljb24tc2VhcmNoIGVsLWljb24tLXJpZ2h0Ii8+XG4gICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgPC9lbC1mb3JtPlxuICAgIDxkaXYgY2xhc3M9InRhYmxlLWxpc3QiPlxuICAgICAgPGVsLXRhYmxlXG4gICAgICAgIHJlZj0iY2hhbm5lbFRhYmxlIlxuICAgICAgICA6ZGF0YT0idGFibGVEYXRhIlxuICAgICAgICBzdHJpcGVcbiAgICAgICAgY2xhc3M9Indob2xlLXRhYmxlIlxuICAgICAgICBtaW4taGVpZ2h0PSI0MDAiXG4gICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICBAc2VsZWN0PSJzZWxlY3QiXG4gICAgICAgIEBzZWxlY3QtYWxsPSJzZWxlY3RBbGwiPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgdHlwZT0ic2VsZWN0aW9uIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgd2lkdGg9IjU1Ii8+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiB0YWJsZUhlYWRlciJcbiAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICA6cHJvcD0iaXRlbS5wcm9wIlxuICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCJcbiAgICAgICAgICA6d2lkdGg9Iml0ZW0ud2lkdGgiXG4gICAgICAgICAgOmZvcm1hdHRlcj0iaXRlbS5mb3JtYXR0ZXIiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICBmaXhlZFxuICAgICAgICAgIHNob3ctb3ZlcmZsb3ctdG9vbHRpcFxuICAgICAgICAvPlxuICAgICAgPC9lbC10YWJsZT5cbiAgICAgIDxkaXYgY2xhc3M9InBhZ2luYXRpb24iPlxuICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICBzaXplPSJzbWFsbCJcbiAgICAgICAgICBAY2xpY2s9Im5vdGlmeVBhcmVudFNlbGVjdGVkUm93Ij7noa7lrpo8L2VsLWJ1dHRvbj5cbiAgICAgICAgPGVsLXBhZ2luYXRpb25cbiAgICAgICAgICA6dG90YWw9InRvdGFsIlxuICAgICAgICAgIDpwYWdlLXNpemVzPSJbMTAsIDIwLCAzMCwgNDBdIlxuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICBsYXlvdXQ9InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPSJoYW5kbGVTaXplQ2hhbmdlIlxuICAgICAgICAgIEBjdXJyZW50LWNoYW5nZT0iaGFuZGxlQ3VycmVudENoYW5nZSIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS90b3BpY0FwaVwnXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6IFwnQWRkVG9waWNcJyxcbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcGljRm9ybToge1xuICAgICAgICBjaGFubmVsaWQ6IFwnXCcsXG4gICAgICAgIGNoYW5uZWxfbmFtZTogXCdcJyxcbiAgICAgICAgc3BlY2lhbF9uYW1lOiBcJ1wnLFxuICAgICAgICBkYXRlcmFuZ2U6IFtdLFxuICAgICAgICBzdGFydERhdGU6IFwnXCcsXG4gICAgICAgIGVuZERhdGU6IFwnXCdcbiAgICAgIH0sXG4gICAgICB0YWJsZUhlYWRlcjogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdzcGVjaWFsX25hbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfkuJPpopjmoIfpophcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCd1cGRhdGV0aW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5pu05paw5pel5pyfXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdjaGFubmVsX25hbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCflvZLlsZ7popHpgZNcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdleHBpcnlfZGF0ZV9zdGFydFwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+acieaViOaXpeacn1wnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgc3RhcnREYXRlID0gdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnRm9ybWF0RGF0ZVwnXShjZWxsVmFsdWUsIFwneXl5eS1NTS1kZCBoaDptbVwnKVxuICAgICAgICAgICAgbGV0IGVuZERhdGUgPSB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKHJvdy5leHBpcnlfZGF0ZV9lbmQsIFwneXl5eS1NTS1kZCBoaDptbVwnKVxuICAgICAgICAgICAgcmV0dXJuIHN0YXJ0RGF0ZSArIFwn6IezXCcgKyBlbmREYXRlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgdGFibGVEYXRhOiBbXSxcbiAgICAgIGxpc3RVc2FibGVDaGFubmVsOiBbXSxcbiAgICAgIHBhZ2VObzogMSxcbiAgICAgIHBhZ2VTaXplOiAxMCxcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgc2VsZWN0Um93OiBbXVxuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBcJ3RvcGljRm9ybS5zcGVjaWFsX25hbWVcJyAoKSB7XG4gICAgICB0aGlzLnNlYXJjaFNwZWNpYWwoKVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgLyoqIOiOt+WPluS4k+mimOWIl+ihqCAqKi9cbiAgICB0aGlzLmdldFRvcGljTGlzdCgpXG4gICAgLyoqIOiOt+WPluWPr+eUqOmikemBk+WIl+ihqCoqL1xuICAgIHRoaXMuZ2V0TGlzdFVzYWJsZUNoYW5uZWwoKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLyoqIOiOt+WPluS4k+mimOWIl+ihqCAqKi9cbiAgICBnZXRUb3BpY0xpc3QgKCkge1xuICAgICAgQWN0aW9ucy5nZXRUb3BpY0xpc3Qoe1xuICAgICAgICBcJ3BhZ2VOb1wnOiB0aGlzLnBhZ2VObyxcbiAgICAgICAgXCdwYWdlU2l6ZVwnOiB0aGlzLnBhZ2VTaXplLFxuICAgICAgICBcJ3N0YXRlXCc6IDJcbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgIGxldCBsaXN0RGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gbGlzdERhdGEubGlzdFxuICAgICAgICAgIGNvbnNvbGUubG9nKGxpc3REYXRhKVxuICAgICAgICAgIHRoaXMudG90YWwgPSBsaXN0RGF0YS50b3RhbFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgZ2V0TGlzdFVzYWJsZUNoYW5uZWwgKCkge1xuICAgICAgQWN0aW9ucy5nZXRMaXN0VXNhYmxlQ2hhbm5lbCgpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgICBsZXQgbmV3SXRlbSA9IHt9XG4gICAgICAgICAgICBuZXdJdGVtLmxhYmVsID0gaXRlbS5jaGFubmVsX25hbWVcbiAgICAgICAgICAgIG5ld0l0ZW0udmFsdWUgPSBpdGVtLmNoYW5uZWxpZFxuICAgICAgICAgICAgdGhpcy5saXN0VXNhYmxlQ2hhbm5lbC5wdXNoKG5ld0l0ZW0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIG9uU3VibWl0ICgpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwnc3VibWl0IVwnKVxuICAgIH0sXG4gICAgaGFuZGxlU2l6ZUNoYW5nZSAocGFnZVNpemUpIHtcbiAgICAgIHRoaXMucGFnZVNpemUgPSBwYWdlU2l6ZVxuICAgICAgdGhpcy5zZWFyY2hTcGVjaWFsKClcbiAgICB9LFxuICAgIGhhbmRsZUN1cnJlbnRDaGFuZ2UgKHBhZ2VJbmRleCkge1xuICAgICAgdGhpcy5wYWdlTm8gPSBwYWdlSW5kZXhcbiAgICAgIHRoaXMuc2VhcmNoU3BlY2lhbCgpXG4gICAgfSxcbiAgICB0b2dnbGVBbGxTZWxlY3Rpb24gKGUpIHtcbiAgICAgIHRoaXMuJHJlZnMuY2hhbm5lbFRhYmxlLnRvZ2dsZUFsbFNlbGVjdGlvbigpXG4gICAgfSxcbiAgICAvKiog5Y2V6YCJICoqL1xuICAgIHNlbGVjdCAoc2VsZWN0aW9uLCByb3cpIHtcbiAgICAgIHRoaXMuc2VsZWN0Um93ID0gcm93XG4gICAgICBpZiAoc2VsZWN0aW9uLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgc2VsZWN0aW9uLnNoaWZ0KClcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiDlhajpgIkgKiovXG4gICAgc2VsZWN0QWxsIChzZWxlY3Rpb24pIHtcbiAgICAgIHRoaXMuJHJlZnMuYWRkTWFudS5jbGVhclNlbGVjdGlvbigpXG4gICAgICB0aGlzLnNlbGVjdFJvdyA9IHt9XG4gICAgfSxcbiAgICAvKiog5pCc57Si5LiT6aKYICoqL1xuICAgIHNlYXJjaFNwZWNpYWwgKCkge1xuICAgICAgdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnc3dhcFRpbWVcJ10odGhpcy50b3BpY0Zvcm0pXG4gICAgICBsZXQgdGltZVN0YXJ0ID0gdGhpcy50b3BpY0Zvcm0uc3RhcnREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy50b3BpY0Zvcm0uc3RhcnREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBsZXQgdGltZUVuZCA9IHRoaXMudG9waWNGb3JtLmVuZERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLnRvcGljRm9ybS5lbmREYXRlKS5nZXRUaW1lKCkgOiBudWxsXG4gICAgICBBY3Rpb25zLmdldFRvcGljTGlzdCh7XG4gICAgICAgIFwncGFnZU5vXCc6IHRoaXMucGFnZU5vLFxuICAgICAgICBcJ3BhZ2VTaXplXCc6IHRoaXMucGFnZVNpemUsXG4gICAgICAgIFwnY2hhbm5lbGlkXCc6IHRoaXMudG9waWNGb3JtLmNoYW5uZWxpZCxcbiAgICAgICAgXCdzcGVjaWFsX25hbWVcJzogdGhpcy50b3BpY0Zvcm0uc3BlY2lhbF9uYW1lLFxuICAgICAgICBcJ3N0YXRlXCc6IDIsXG4gICAgICAgIFwndGltZVN0YXJ0XCc6IHRpbWVTdGFydCxcbiAgICAgICAgXCd0aW1lRW5kXCc6IHRpbWVFbmRcbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGxpc3REYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy50YWJsZURhdGEgPSBsaXN0RGF0YS5saXN0XG4gICAgICAgICAgdGhpcy50b3RhbCA9IGxpc3REYXRhLnRvdGFsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog6YCa55+l54i257uE5Lu26YCJ5oup5LqG5LiT6aKYICoqL1xuICAgIC8qKiDpgJrnn6XniLbnu4Tku7bpgInmi6nkuoblk6rooYzkuJPpopggKiovXG4gICAgbm90aWZ5UGFyZW50U2VsZWN0ZWRSb3cgKCkge1xuICAgICAgdGhpcy4kZW1pdChcJ3NlbGVjdGVkLXJvd1wnLCB0aGlzLnNlbGVjdFJvdylcbiAgICB9XG4gIH1cblxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLnRhYmxlLWxpc3Qge1xuICAgIG1pbi1oZWlnaHQ6IDQwMHB4O1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgcGFkZGluZzogMHB4O1xuICB9XG4gIC53aG9sZS10YWJsZSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyMTgsIDIyMiwgMjIzLCAxKTtcbiAgICBtaW4taGVpZ2h0OiAyNXZ3O1xuICB9XG4gIC5wYWdpbmF0aW9uIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICB9XG4gIC5hZGRVcmwgLmJ0bi1jb250YWluZXIge1xuICAgIHdpZHRoOiAyMyUgIWltcG9ydGFudDtcbiAgICBsZWZ0OiAwcHg7XG4gIH1cblxuPC9zdHlsZT5cbjxzdHlsZT5cbiAgLmVsLWRpYWxvZ19faGVhZGVye1xuICAgIHBhZGRpbmc6IDEzcHggMzBweCAxM3B4O1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjQzBCRUZGO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNGN0ZBRkY7XG4gIH1cbiAgLmVsLWRpYWxvZ19fdGl0bGUge1xuICAgIGxpbmUtaGVpZ2h0OiAxN3B4O1xuICAgIGZvbnQtc2l6ZTogMTdweDtcbiAgICBjb2xvcjogIzMwMzEzMztcbiAgfVxuICAuZWwtZGlhbG9nX19oZWFkZXJidG4ge1xuICAgIHRvcDogMTNweDtcbiAgfVxuICAuZWwtZGlhbG9nX19ib2R5IHtcbiAgICBwYWRkaW5nOiAyMHB4IDYwcHg7XG4gIH1cbiAgLmFkZFVybCAuZWwtZm9ybS1pdGVtIHtcbiAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gIH1cbiAgLmFkZFVybCAuZWwtZm9ybSB7XG4gICAgbWFyZ2luLXRvcDogMTVweDtcbiAgfVxuICAuYWRkVXJsIC5lbC1kYXRlLWVkaXRvcntcbiAgICB3aWR0aDogODUlO1xuICB9XG4gIC5hZGRVcmwgLmVsLWZvcm0taXRlbSB7XG4gICAgd2lkdGg6IDMwJTtcbiAgICBtYXJnaW4tcmlnaHQ6IDMlO1xuICB9XG4gIC5hZGRVcmwgLmRhdGUge1xuICAgIGxlZnQ6IDBweDtcbiAgICB3aWR0aDogNjAlO1xuICB9XG4gIC5hZGRVcmwgLmVsLXJhbmdlLWVkaXRvciAuZWwtcmFuZ2UtaW5wdXR7XG4gICAgd2lkdGg6NTAlO1xuICB9XG4gIC5hZGRVcmwgLmJ0bi1jb250YWluZXIgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbjwvc3R5bGU+XG4nXSxzb3VyY2VSb290OiIifV0pfSx3SktTOmZ1bmN0aW9uKGUsbil7fSx3SlpCOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uY2ljbGUtY29udHJvbGxlcltkYXRhLXYtMjU0YmNjZDhdIHtcbiAgbWFyZ2luLXRvcDogNCU7XG59XG4uY3JlYXRlIC5zb3J0IHNwYW5bZGF0YS12LTI1NGJjY2Q4XXtcbiAgY29sb3I6ICM5MDkwOTA7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZUxpdmUvc3JjL2NvbXBvbmVudHMvbWFuYWdlTGl2ZS9saXZlRWRpdC52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBeVFBO0VBQ0EsZUFBQTtDQUNBO0FBQ0E7RUFDQSxlQUFBO0NBQ0EiLGZpbGU6ImxpdmVFZGl0LnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9ImNoYW5uZWwgY3JlYXRlIj5cbiAgICA8Y2lyY2xlLXRpdGxlXG4gICAgICB0aXRsZS1uYW1lPSLnvJbovpHnm7Tmkq0iXG4gICAgICBjbGFzcz0iY2ljbGUtY29udHJvbGxlciJcbiAgICAvPlxuICAgIDxlbC1mb3JtXG4gICAgICByZWY9ImNyZWF0ZUZvcm0iXG4gICAgICA6bW9kZWw9ImNyZWF0ZUZvcm0iXG4gICAgICA6cnVsZXM9InJ1bGVzIlxuICAgICAgbGFiZWwtd2lkdGg9IjEwMHB4IlxuICAgICAgY2xhc3M9InJ1bGUtZm9ybSI+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLnm7Tmkq3kuLvpopgiXG4gICAgICAgIHByb3A9ImxpdmVfbmFtZSI+XG4gICAgICAgIDxlbC1pbnB1dCB2LW1vZGVsLnRyaW09ImNyZWF0ZUZvcm0ubGl2ZV9uYW1lIi8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuWbvuagh+mFjee9riJcbiAgICAgICAgY2xhc3M9Iml0ZW0iXG4gICAgICAgIHByb3A9Imljb25fdXJsIj5cbiAgICAgICAgPGVsLXVwbG9hZFxuICAgICAgICAgIDpzaG93LWZpbGUtbGlzdD0iZmFsc2UiXG4gICAgICAgICAgOmFjdGlvbj0iZ2V0VXBsb2FkVXJsIlxuICAgICAgICAgIDpoZWFkZXJzPSJ1cGxvYWRIZWFkZXJzIlxuICAgICAgICAgIDpvbi1zdWNjZXNzPSJoYW5kbGVQY0F2YXRhclN1Y2Nlc3MiXG4gICAgICAgICAgOmJlZm9yZS11cGxvYWQ9ImJlZm9yZUF2YXRhclVwbG9hZCJcbiAgICAgICAgICBjbGFzcz0iYXZhdGFyLXVwbG9hZGVyIj5cbiAgICAgICAgICA8aW1nXG4gICAgICAgICAgICB2LWlmPSJjcmVhdGVGb3JtLmljb25fdXJsIlxuICAgICAgICAgICAgOnNyYz0iY3JlYXRlRm9ybS5pY29uX3VybCJcbiAgICAgICAgICAgIGNsYXNzPSJhdmF0YXIiPlxuICAgICAgICAgIDxpXG4gICAgICAgICAgICB2LWVsc2VcbiAgICAgICAgICAgIGNsYXNzPSJlbC1pY29uLXBsdXMgYXZhdGFyLXVwbG9hZGVyLWljb24iLz5cbiAgICAgICAgPC9lbC11cGxvYWQ+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuebtOaSreWRqOacnyJcbiAgICAgICAgcHJvcD0iY2hhbm5lbF9uYW1lIj5cbiAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgdi1tb2RlbD0iY3JlYXRlRm9ybS5saXZlUmFuZ2UiXG4gICAgICAgICAgOmNsZWFyYWJsZT0iZmFsc2UiXG4gICAgICAgICAgdHlwZT0iZGF0ZXRpbWVyYW5nZSJcbiAgICAgICAgICBmb3JtYXQ9Inl5eXktTU0tZGQgSEg6bW0iXG4gICAgICAgICAgc3R5bGU9IndpZHRoOjEwMCUiXG4gICAgICAgICAgcmFuZ2Utc2VwYXJhdG9yPSLoh7MiXG4gICAgICAgICAgc3RhcnQtcGxhY2Vob2xkZXI9IuW8gOWni+aXpeacnyJcbiAgICAgICAgICBlbmQtcGxhY2Vob2xkZXI9Iue7k+adn+aXpeacnyIvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLlhoXlrrnpk77mjqUiXG4gICAgICAgIHByb3A9InVybCI+XG4gICAgICAgIDxlbC1pbnB1dCB2LW1vZGVsPSJjcmVhdGVGb3JtLnVybCIvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLmmK/lkKbnva7pobYiXG4gICAgICAgIHByb3A9ImZpeGVkIj5cbiAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgIHYtbW9kZWw9ImNyZWF0ZUZvcm0uaXNUb3AiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9Iuivt+mAieaLqSI+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgOnZhbHVlPSJ0cnVlIlxuICAgICAgICAgICAgbGFiZWw9IuaYryIvPlxuICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgIDp2YWx1ZT0iZmFsc2UiXG4gICAgICAgICAgICBsYWJlbD0i5ZCmIi8+XG4gICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLmnYPpmZDphY3nva4iPlxuICAgICAgICA8ZWwtY2hlY2tib3hcbiAgICAgICAgICB2LW1vZGVsPSJjcmVhdGVGb3JtLmlzQ29tbWVudCJcbiAgICAgICAgICBsYWJlbD0i6K+E6K66Ii8+XG4gICAgICAgIDxlbC1jaGVja2JveFxuICAgICAgICAgIHYtbW9kZWw9ImNyZWF0ZUZvcm0uaXNTaGFyZSJcbiAgICAgICAgICBsYWJlbD0i5YiG5LqrIlxuICAgICAgICAgIG5hbWU9ImF1dGgiLz5cbiAgICAgICAgPGVsLWNoZWNrYm94XG4gICAgICAgICAgdi1tb2RlbD0iY3JlYXRlRm9ybS5pc0NvbGxlY3QiXG4gICAgICAgICAgbGFiZWw9IuaUtuiXjyJcbiAgICAgICAgICBuYW1lPSJhdXRoIi8+XG4gICAgICAgIDxlbC1jaGVja2JveFxuICAgICAgICAgIHYtbW9kZWw9ImNyZWF0ZUZvcm0uaXNQcmFpc2UiXG4gICAgICAgICAgbGFiZWw9IueCuei1niJcbiAgICAgICAgICBuYW1lPSJhdXRoIi8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuaYr+WQpuS4iueovyI+XG4gICAgICAgIDxlbC1yYWRpby1ncm91cFxuICAgICAgICAgIHYtbW9kZWw9ImNyZWF0ZUZvcm0uc3RhdGUiPlxuICAgICAgICAgIDxlbC1yYWRpb1xuICAgICAgICAgICAgOmxhYmVsPSIxIj5cbiAgICAgICAgICAgIOaYr1xuICAgICAgICAgIDwvZWwtcmFkaW8+XG4gICAgICAgICAgPGVsLXJhZGlvXG4gICAgICAgICAgICA6bGFiZWw9IjAiPlxuICAgICAgICAgICAg5ZCmXG4gICAgICAgICAgPC9lbC1yYWRpbz5cbiAgICAgICAgPC9lbC1yYWRpby1ncm91cD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbT5cbiAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgQGNsaWNrPSJzdWJtaXRGb3JtKFwnY3JlYXRlRm9ybVwnKSI+5o+Q5LqkPC9lbC1idXR0b24+XG4gICAgICAgIDxlbC1idXR0b24gQGNsaWNrPSJnb3RvTGlzdCI+5Y+W5raIPC9lbC1idXR0b24+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICA8L2VsLWZvcm0+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlXCdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL2xpdmVBcGlcJ1xuaW1wb3J0IHVwbG9hZEhlYWRlcnMgZnJvbSBcJ0AvbWl4aW5zXCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlXG4gIH0sXG5cbiAgbWl4aW5zOiBbdXBsb2FkSGVhZGVyc10sXG5cbiAgZGF0YSAoKSB7XG4gICAgdmFyIGNoZWNrVXJsID0gKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaykgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICB2YXIgbWF0Y2ggPSAgL14oKGh0fGYpdHBzPyk6XFwvXFwvKFtcXHdcXC1dKyhcXC5bXFx3XFwtXSspKlxcLykqW1xcd1xcLV0rKFxcLltcXHdcXC1dKykqXFwvPyhcXD8oW1xcd1xcLVxcLixAP149JSY6XFwvflxcKyNdKikrKT8vXG4gICAgICBpZiAoIW1hdGNoLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoXCfor7fovpPlhaXmraPnoa7nmoTlnLDlnYBcJykpXG4gICAgICB9XG4gICAgICBjYWxsYmFjaygpXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVGb3JtOiB7XG4gICAgICAgIGxpdmVfbmFtZTogXCdcJyxcbiAgICAgICAgaWNvbl91cmw6IFwnXCcsXG4gICAgICAgIHVybDogXCdcJyxcbiAgICAgICAgaXNUb3A6IGZhbHNlLFxuICAgICAgICBsaXZlUmFuZ2U6IFtdLFxuICAgICAgICBpc0NvbW1lbnQ6IGZhbHNlLFxuICAgICAgICBpc1NoYXJlOiBmYWxzZSxcbiAgICAgICAgaXNQcmFpc2U6IGZhbHNlLFxuICAgICAgICBpc0NvbGxlY3Q6IGZhbHNlLFxuICAgICAgICBzdGF0ZTogMVxuICAgICAgfSxcbiAgICAgIHJ1bGVzOiB7XG4gICAgICAgIGxpdmVfbmFtZTogW1xuICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6IFwn6K+36L6T5YWl55u05pKt5Li76aKYXCcsIHRyaWdnZXI6IFwnYmx1clwnIH1cbiAgICAgICAgXSxcbiAgICAgICAgdXJsOiBbXG4gICAgICAgICAgeyB2YWxpZGF0b3I6IGNoZWNrVXJsLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9XG4gICAgICAgIF0sXG4gICAgICAgIGljb25fdXJsOiBbXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogXCfor7fkuIrkvKDlm77niYdcJywgdHJpZ2dlcjogXCdibHVyXCcgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgbGl2ZWlkOiBcJ1wnLFxuICAgICAgaXNSZWZyZXNoOiB0cnVlXG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGdldFVwbG9hZFVybCAoKSB7XG4gICAgICByZXR1cm4gQWN0aW9ucy51cGxvYWRQaWN0dXJlKClcbiAgICB9XG4gIH0sICBcbiAgbW91bnRlZCAoKSB7XG4gICAgdGhpcy5nZXRMaXZlRWRpdEluZm9CeUlkKClcbiAgfSxcbiAgYmVmb3JlUm91dGVMZWF2ZSAodG8sIGZyb20sIG5leHQpIHtcbiAgICBpZiAodG8ucGF0aCA9PT0gXCcvbGl2ZS9saXN0XCcpIHtcbiAgICAgIHRvLm1ldGEucmVmcmVzaCA9IHRoaXMuaXNSZWZyZXNoXG4gICAgfSBlbHNlIGlmICh0by5wYXRoID09PSBcJy9saXZlL2NyZWF0ZVwnKSB7XG4gICAgICB0aGlzLiRyb290LmV2ZW50SHViLiRlbWl0KFwncmVzZXQtb3B0aW9uc1wnKVxuICAgIH1cbiAgICBuZXh0KClcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldExpdmVFZGl0SW5mb0J5SWQgKCkge1xuICAgICAgdGhpcy5saXZlaWQgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwnbGl2ZWlkXCcpXG4gICAgICBBY3Rpb25zLmdldEVkaXRMaXZlSW5mb0J5SWQoe1xuICAgICAgICBcJ2xpdmVCcm9hZGNhc3RcJzoge1xuICAgICAgICAgIFwnbGl2ZWlkXCc6IHRoaXMubGl2ZWlkXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBsaXZlUmFuZ2UgPSBbXVxuICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy5jcmVhdGVGb3JtLmxpdmVfbmFtZSA9IGRhdGEubGl2ZV9uYW1lXG4gICAgICAgICAgdGhpcy5jcmVhdGVGb3JtLmljb25fdXJsID0gZGF0YS5saXZlX2hlYWRfdXJsXG4gICAgICAgICAgdGhpcy5jcmVhdGVGb3JtLnVybCA9IGRhdGEubGl2ZV91cmxcbiAgICAgICAgICBsaXZlUmFuZ2VbMF0gPSBuZXcgRGF0ZShkYXRhLmV4cGlyeV9kYXRlX3N0YXJ0KVxuICAgICAgICAgIGxpdmVSYW5nZVsxXSA9IG5ldyBEYXRlKGRhdGEuZXhwaXJ5X2RhdGVfZW5kKVxuICAgICAgICAgIHRoaXMuJHNldCh0aGlzLmNyZWF0ZUZvcm0sIFwnbGl2ZVJhbmdlXCcsIGxpdmVSYW5nZSlcbiAgICAgICAgICB0aGlzLmNyZWF0ZUZvcm0uaXNUb3AgPSBkYXRhLnRvcFxuICAgICAgICAgIHRoaXMuY3JlYXRlRm9ybS5pc0NvbW1lbnQgPSBkYXRhLmFsbG93X2NvbW1lbnRcbiAgICAgICAgICB0aGlzLmNyZWF0ZUZvcm0uaXNTaGFyZSA9IGRhdGEuYWxsb3dfc2hhcmVcbiAgICAgICAgICB0aGlzLmNyZWF0ZUZvcm0uaXNDb2xsZWN0ID0gZGF0YS5hbGxvd19jb2xsZWN0XG4gICAgICAgICAgdGhpcy5jcmVhdGVGb3JtLmlzUHJhaXNlID0gZGF0YS5hbGxvd19saWtlXG4gICAgICAgICAgdGhpcy5jcmVhdGVGb3JtLnN0YXRlID0gZGF0YS5zdGF0ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgc3VibWl0Rm9ybSAoZm9ybU5hbWUpIHtcbiAgICAgIHRoaXMuJHJlZnNbZm9ybU5hbWVdLnZhbGlkYXRlKCh2YWxpZCkgPT4ge1xuICAgICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgICBBY3Rpb25zLnVwZGF0ZUxpdmUoe1xuICAgICAgICAgICAgXCdsaXZlQnJvYWRjYXN0XCc6IHtcbiAgICAgICAgICAgICAgXCdsaXZlaWRcJzogdGhpcy5saXZlaWQsXG4gICAgICAgICAgICAgIFwnbGl2ZV9uYW1lXCc6IHRoaXMuY3JlYXRlRm9ybS5saXZlX25hbWUsXG4gICAgICAgICAgICAgIFwnbGl2ZV9oZWFkX3VybFwnOiB0aGlzLmNyZWF0ZUZvcm0uaWNvbl91cmwsXG4gICAgICAgICAgICAgIFwnbGl2ZV91cmxcJzogdGhpcy5jcmVhdGVGb3JtLnVybCxcbiAgICAgICAgICAgICAgXCdleHBpcnlfZGF0ZV9zdGFydFwnOiB0aGlzLmNyZWF0ZUZvcm0ubGl2ZVJhbmdlWzBdLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgXCdleHBpcnlfZGF0ZV9lbmRcJzogdGhpcy5jcmVhdGVGb3JtLmxpdmVSYW5nZVsxXS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgIFwndG9wXCc6IHRoaXMuY3JlYXRlRm9ybS5pc1RvcCxcbiAgICAgICAgICAgICAgXCdhbGxvd19jb21tZW50XCc6IHRoaXMuY3JlYXRlRm9ybS5pc0NvbW1lbnQsXG4gICAgICAgICAgICAgIFwnYWxsb3dfc2hhcmVcJzogdGhpcy5jcmVhdGVGb3JtLmlzU2hhcmUsXG4gICAgICAgICAgICAgIFwnYWxsb3dfbGlrZVwnOiB0aGlzLmNyZWF0ZUZvcm0uaXNQcmFpc2UsXG4gICAgICAgICAgICAgIFwnYWxsb3dfY29sbGVjdFwnOiB0aGlzLmNyZWF0ZUZvcm0uaXNDb2xsZWN0LFxuICAgICAgICAgICAgICBcJ3N0YXRlXCc6IHRoaXMuY3JlYXRlRm9ybS5zdGF0ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7cGF0aDogXCcvbGl2ZS9saXN0XCd9KVxuICAgICAgICAgICAgICB0aGlzLiRub3RpZnkoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcJ+mAmuefpVwnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwn57yW6L6R5oiQ5YqfXCcsXG4gICAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCdcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwnZXJyb3Igc3VibWl0ISFcJylcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgZ290b0xpc3QgKCkge1xuICAgICAgdGhpcy5pc1JlZnJlc2ggPSBmYWxzZVxuICAgICAgdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6IFwnL2xpdmUvbGlzdFwnfSlcbiAgICB9LFxuXG4gICAgaGFuZGxlUGNBdmF0YXJTdWNjZXNzIChyZXMsIGZpbGUpIHtcbiAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgIGxldCBpbWFnZVVybCA9IHJlcy5yZXN1bHRcbiAgICAgICAgdGhpcy5jcmVhdGVGb3JtLmljb25fdXJsID0gaW1hZ2VVcmxcbiAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZUF2YXRhclVwbG9hZCAoZmlsZSkge1xuICAgICAgbGV0IGltYWdlT2JqID0ge1xuICAgICAgICBcJ2ltYWdlL2pwZWdcJzogdHJ1ZSxcbiAgICAgICAgXCdpbWFnZS9wbmdcJzogdHJ1ZSxcbiAgICAgICAgXCdpbWFnZS9qcGdcJzogdHJ1ZVxuICAgICAgfVxuICAgICAgY29uc3QgaXNJbWFnZSA9IGZpbGUudHlwZSBpbiBpbWFnZU9ialxuICAgICAgY29uc3QgaXNMdDJNID0gZmlsZS5zaXplIC8gMTAyNCAvIDEwMjQgPCAyXG4gICAgICBpZiAoIWlzSW1hZ2UpIHtcbiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihcJ+ivt+S4iuS8oOWbvueJh+agvOW8j+eahOaWh+S7tiFcJylcbiAgICAgIH1cbiAgICAgIGlmICghaXNMdDJNKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoXCfkuIrkvKDlm77niYflpKflsI/kuI3og73otoXov4cgMk1CIVwnKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlzSW1hZ2UgJiYgaXNMdDJNXG4gICAgfVxuICB9XG5cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5jaWNsZS1jb250cm9sbGVyIHtcbiAgICBtYXJnaW4tdG9wOiA0JTtcbiAgfVxuICAuY3JlYXRlIC5zb3J0IHNwYW57XG4gICAgY29sb3I6ICM5MDkwOTA7XG4gIH1cbjwvc3R5bGU+XG4nXSxzb3VyY2VSb290OiIifV0pfSx3TTN6OmZ1bmN0aW9uKGUsbil7fSx3UjBrOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uaG9tZS13cmFwcGVyW2RhdGEtdi03ZWIyYmM3OV0ge1xuICBwYWRkaW5nOiA0MHB4IDI4cHg7XG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcbn1cbi5ob21lLXdyYXBwZXIgLmNpY2xlLWNvbnRhaW5lcltkYXRhLXYtN2ViMmJjNzldIHtcbiAgbWFyZ2luLWxlZnQ6IDBweCAhaW1wb3J0YW50O1xuICBtYXJnaW4tYm90dG9tOiA0N3B4ICFpbXBvcnRhbnQ7XG59XG4uaXRlbXMtd3JhcHBlcltkYXRhLXYtN2ViMmJjNzldIHtcbiAgcGFkZGluZy10b3A6IDIwcHg7XG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgZGlzcGxheTogZmxleDtcbiAgLW1zLWZsZXgtcGFjazogZGlzdHJpYnV0ZTtcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAtbXMtZmxleC13cmFwOiB3cmFwO1xuICAgICAgZmxleC13cmFwOiB3cmFwO1xuICBwYWRkaW5nOiAwIDQwcHg7XG59XG4uaW5uZXItYmxvY2tbZGF0YS12LTdlYjJiYzc5XSB7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNmNWY1ZjU7XG59XG4uaG9tZS1jb3VudFtkYXRhLXYtN2ViMmJjNzldIHtcbiAgbWFyZ2luOiA0OHB4IGF1dG87XG59XG4uaXRlbXMtbGluZTJbZGF0YS12LTdlYjJiYzc5XSB7XG4gIG1hcmdpbi10b3A6IDE1cHg7XG59XG4vKiMgc291cmNlTWFwcGluZ1VSTD1zcmMvdmlld3MvaG9tZS5jc3MubWFwICovIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvdmlld3Mvc3JjL3ZpZXdzL2hvbWUudnVlIiwiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL3ZpZXdzL2hvbWUudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQTZKQTtFQUNFLG1CQUFBO0VBQ0EsbUJBQUE7Q0M1SkQ7QUQ2SkM7RUFDRSw0QkFBQTtFQUNBLCtCQUFBO0NDM0pIO0FENEpEO0VBQ0Usa0JBQUE7RUFDQSxxQkFBQTtFQUFBLHFCQUFBO0VBQUEsY0FBQTtFQUNBLDBCQUFBO01BQUEsOEJBQUE7RUFDQSxvQkFBQTtNQUFBLGdCQUFBO0VBQ0EsZ0JBQUE7Q0MxSkQ7QUQySkQ7RUFDRSxjQUFBO0VBQ0EsMEJBQUE7Q0N6SkQ7QUQwSkQ7RUFDRSxrQkFBQTtDQ3hKRDtBRHlKRDtFQUNFLGlCQUFBO0NDdkpEO0FBQ0QsOENBQThDIixmaWxlOiJob21lLnZ1ZSIsc291cmNlc0NvbnRlbnQ6WyJcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbi5ob21lLXdyYXBwZXJcbiAgcGFkZGluZyA0MHB4IDI4cHhcbiAgb3ZlcmZsb3cteCBoaWRkZW5cbiAgLmNpY2xlLWNvbnRhaW5lclxuICAgIG1hcmdpbi1sZWZ0IDBweCFpbXBvcnRhbnRcbiAgICBtYXJnaW4tYm90dG9tIDQ3cHghaW1wb3J0YW50XG4uaXRlbXMtd3JhcHBlclxuICBwYWRkaW5nLXRvcCAyMHB4XG4gIGRpc3BsYXkgZmxleFxuICBqdXN0aWZ5LWNvbnRlbnQgc3BhY2UtYXJvdW5kXG4gIGZsZXgtd3JhcCB3cmFwXG4gIHBhZGRpbmcgMCA0MHB4XG4uaW5uZXItYmxvY2tcbiAgcGFkZGluZyAxMHB4XG4gIGJvcmRlciAxcHggc29saWQgcmdiYSgyNDUsMjQ1LDI0NSwxKVxuLmhvbWUtY291bnRcbiAgbWFyZ2luIDQ4cHggYXV0b1xuLml0ZW1zLWxpbmUyXG4gIG1hcmdpbi10b3AgMTVweFxuIiwiLmhvbWUtd3JhcHBlciB7XG4gIHBhZGRpbmc6IDQwcHggMjhweDtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xufVxuLmhvbWUtd3JhcHBlciAuY2ljbGUtY29udGFpbmVyIHtcbiAgbWFyZ2luLWxlZnQ6IDBweCAhaW1wb3J0YW50O1xuICBtYXJnaW4tYm90dG9tOiA0N3B4ICFpbXBvcnRhbnQ7XG59XG4uaXRlbXMtd3JhcHBlciB7XG4gIHBhZGRpbmctdG9wOiAyMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbiAgZmxleC13cmFwOiB3cmFwO1xuICBwYWRkaW5nOiAwIDQwcHg7XG59XG4uaW5uZXItYmxvY2sge1xuICBwYWRkaW5nOiAxMHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjZjVmNWY1O1xufVxuLmhvbWUtY291bnQge1xuICBtYXJnaW46IDQ4cHggYXV0bztcbn1cbi5pdGVtcy1saW5lMiB7XG4gIG1hcmdpbi10b3A6IDE1cHg7XG59XG4vKiMgc291cmNlTWFwcGluZ1VSTD1zcmMvdmlld3MvaG9tZS5jc3MubWFwICovIl0sc291cmNlUm9vdDoiIn1dKX0sd2xiQzpmdW5jdGlvbihlLG4pe30sd3U4VjpmdW5jdGlvbihlLG4sdCl7dmFyIGE9dCgibTNjOCIpOyJzdHJpbmciPT10eXBlb2YgYSYmKGE9W1tlLmksYSwiIl1dKSxhLmxvY2FscyYmKGUuZXhwb3J0cz1hLmxvY2Fscyk7dCgicmpqMCIpKCJkOTcyNDgwMCIsYSwhMSx7fSl9LHhKUUM6ZnVuY3Rpb24oZSxuLHQpe3ZhciBhPXQoIkRudmgiKTsic3RyaW5nIj09dHlwZW9mIGEmJihhPVtbZS5pLGEsIiJdXSksYS5sb2NhbHMmJihlLmV4cG9ydHM9YS5sb2NhbHMpO3QoInJqajAiKSgiNmMyMjM0MGIiLGEsITEse30pfSx4VVpxOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4ucGFnaW5hdGlvbltkYXRhLXYtNGU3N2M0ODRde1xuICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xuICAgICAgLW1zLWZsZXgtcGFjazoganVzdGlmeTtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG59XG4ubGltaXQgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtW2RhdGEtdi00ZTc3YzQ4NF0ge1xuICB3aWR0aDogMjAlO1xufVxuLm1hbnVbZGF0YS12LTRlNzdjNDg0XXtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogYXV0bztcbiAgaGVpZ2h0OiAyMHB4O1xuICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgcGFkZGluZzogMXB4IDVweCAycHggNXB4O1xuICBjb2xvcjogcmdiYSgxODEsIDE4NCwgMjE3LCAxKTtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuLm1hbnUtdXAtYWN0aXZlW2RhdGEtdi00ZTc3YzQ4NF17XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjMxLCAxMjUsIDAsIDEpO1xuICBjb2xvcjpyZ2JhKDIzMSwgMTI1LCAwLCAxKTtcbn1cbi5tYW51LWJhY2stYWN0aXZlW2RhdGEtdi00ZTc3YzQ4NF17XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjQwLCA4LCA4LCAxKTtcbiAgY29sb3I6cmdiYSgyNDAsIDgsIDgsIDEpO1xufVxuLmRlbGV0ZS1hY3RpdmVbZGF0YS12LTRlNzdjNDg0XXtcbiAgYm9yZGVyOjFweCBzb2xpZCByZ2JhKDEwNSwgNzgsIDI1NSwgMSk7XG4gIGNvbG9yOiByZ2JhKDEwNSwgNzgsIDI1NSwgMSk7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZUNvbW1lbnQvc3JjL2NvbXBvbmVudHMvbWFuYWdlQ29tbWVudC9saW1pdExpc3QudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQXFSQTtFQUNBLDBCQUFBO01BQUEsdUJBQUE7VUFBQSwrQkFBQTtDQUNBO0FBQ0E7RUFDQSxXQUFBO0NBQ0E7QUFDQTtFQUNBLHNCQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSx3Q0FBQTtFQUNBLG9CQUFBO0VBQ0EsZ0JBQUE7RUFDQSx5QkFBQTtFQUNBLDhCQUFBO0VBQ0EsZ0JBQUE7Q0FDQTtBQUNBO0VBQ0EsdUNBQUE7RUFDQSwyQkFBQTtDQUNBO0FBQ0E7RUFDQSxxQ0FBQTtFQUNBLHlCQUFBO0NBQ0E7QUFDQTtFQUNBLHVDQUFBO0VBQ0EsNkJBQUE7Q0FDQSIsZmlsZToibGltaXRMaXN0LnZ1ZSIsc291cmNlc0NvbnRlbnQ6Wyc8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9ImxpbWl0Ij5cbiAgICA8ZGl2PlxuICAgICAgPGNpcmNsZS10aXRsZVxuICAgICAgICB0aXRsZS1uYW1lPSLnpoHoqIDnrqHnkIYiXG4gICAgICAgIGNsYXNzPSJjaWNsZS1jb250cm9sbGVyIlxuICAgICAgLz5cbiAgICAgIDxkaXYgY2xhc3M9InNlYXJjaC1mb3JtLWNvbnRhaW5lciI+XG4gICAgICAgIDxlbC1mb3JtXG4gICAgICAgICAgOmlubGluZT0idHJ1ZSJcbiAgICAgICAgICA6bW9kZWw9ImZvcmJpZGRlbkNvbW1lbnQiXG4gICAgICAgICAgY2xhc3M9ImRlbW8tZm9ybS1pbmxpbmUiPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IueUqOaIt+WQjSI+XG4gICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgdi1tb2RlbD0iZm9yYmlkZGVuQ29tbWVudC51c2VyX25pY2tuYW1lIlxuICAgICAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuazqOWGjOaJi+acuiI+XG4gICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgdi1tb2RlbD0iZm9yYmlkZGVuQ29tbWVudC51c2VyX3Bob25lIlxuICAgICAgICAgICAgICBjbGVhcmFibGUvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLlvIDlp4vml7bpl7QiXG4gICAgICAgICAgICBzdHlsZT0icG9zaXRpb246IHJlbGF0aXZlIj5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9ImZvcmJpZGRlbkNvbW1lbnQuc3RhcnREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9ImZvcmJpZGRlbkNvbW1lbnQuc3RhcnREYXRlIlxuICAgICAgICAgICAgICB0eXBlPSJkYXRldGltZSJcbiAgICAgICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pe26Ze0Ii8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICAgICAgbGFiZWw9Iue7k+adn+aXtumXtCJcbiAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogLTE0cHgiPlxuICAgICAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgICAgIDp0aXRsZT0iZm9yYmlkZGVuQ29tbWVudC5lbmREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgICAgIHYtbW9kZWw9ImZvcmJpZGRlbkNvbW1lbnQuZW5kRGF0ZSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXtumXtCIvPlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IDgycHgiXG4gICAgICAgICAgICBAY2xpY2s9ImdldEZvcmJpZGRlbkNvbW1lbnRMaXN0Ij5cbiAgICAgICAgICAgIOafpeivolxuICAgICAgICAgICAgPGkgY2xhc3M9ImVsLWljb24tc2VhcmNoIGVsLWljb24tLXJpZ2h0Ii8+XG4gICAgICAgICAgPC9lbC1idXR0b24+XG4gICAgICAgIDwvZWwtZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9InRhYmxlLWxpc3QiPlxuICAgICAgPGVsLXRhYmxlXG4gICAgICAgIHJlZj0iY2hhbm5lbFRhYmxlIlxuICAgICAgICA6ZGF0YT0idGFibGVEYXRhIlxuICAgICAgICBzdHJpcGVcbiAgICAgICAgY2xhc3M9Indob2xlLXRhYmxlIlxuICAgICAgICBtaW4taGVpZ2h0PSI0MDAiXG4gICAgICAgIEBzZWxlY3QtYWxsPSJzZWxlY3RBbGwiXG4gICAgICAgIEBzZWxlY3Rpb24tY2hhbmdlPSJzZWxlY3Rpb25DaGFuZ2UiPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgdHlwZT0ic2VsZWN0aW9uIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgd2lkdGg9IjU1Ii8+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiB0YWJsZUhlYWRlciJcbiAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICA6cHJvcD0iaXRlbS5wcm9wIlxuICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCJcbiAgICAgICAgICA6d2lkdGg9Iml0ZW0ud2lkdGgiXG4gICAgICAgICAgOmZvcm1hdHRlcj0iaXRlbS5mb3JtYXR0ZXIiXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICBmaXhlZFxuICAgICAgICAgIHNob3ctb3ZlcmZsb3ctdG9vbHRpcFxuICAgICAgICAvPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgbGFiZWw9IuaTjeS9nCJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIHdpZHRoPSIyNTAiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWFudS1jb250YWluZXIiPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzPSJtYW51IGRlbGV0ZS1hY3RpdmUiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSJjYW5jZWxGb3JiaWRkZW4oc2NvcGUucm93KSI+XG4gICAgICAgICAgICAgICAg5Y+W5raI56aB6KiAXG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgIDwvZWwtdGFibGU+XG4gICAgICA8ZGl2IGNsYXNzPSJwYWdpbmF0aW9uIj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8ZWwtY2hlY2tib3hcbiAgICAgICAgICAgIHYtbW9kZWw9InNlbGZTZWxlY3RBbGwiXG4gICAgICAgICAgICBAY2hhbmdlPSJ0b2dnbGVBbGxTZWxlY3Rpb24iPlxuICAgICAgICAgICAg5YWo6YCJXG4gICAgICAgICAgPC9lbC1jaGVja2JveD5cbiAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgICAgc2l6ZT0ibWVkaXVtIlxuICAgICAgICAgICAgQGNsaWNrPSJjYW5jZWxNYW55Rm9yYmlkZGVuQ29tbWVudCI+5om56YeP5Y+W5raI56aB6KiAPC9lbC1idXR0b24+XG4gICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgdi1zaG93PSIxID09PSAyIlxuICAgICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICAgIHNpemU9Im1lZGl1bSJcbiAgICAgICAgICAgIEBjbGljaz0iY2FuY2VsTWFueUZvcmJpZGRlbkNvbW1lbnQiPuWvvOWHuuaVsOaNrjwvZWwtYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGVsLXBhZ2luYXRpb25cbiAgICAgICAgICA6dG90YWw9InRvdGFsIlxuICAgICAgICAgIDpwYWdlLXNpemVzPSJbMTAsIDIwLCAzMCwgNDBdIlxuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICBsYXlvdXQ9InRvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQiXG4gICAgICAgICAgQHNpemUtY2hhbmdlPSJoYW5kbGVTaXplQ2hhbmdlIlxuICAgICAgICAgIEBjdXJyZW50LWNoYW5nZT0iaGFuZGxlQ3VycmVudENoYW5nZSIvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgQ2lyY2xlVGl0bGUgZnJvbSBcJ0AvY29tcG9uZW50cy9jb21tb25zL2NpcmNsZVRpdGxlXCdcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL2NvbW1lbnRBcGlcJ1xuaW1wb3J0IEF1ZGl0IGZyb20gXCcuL2F1ZGl0XCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIENpcmNsZVRpdGxlLFxuICAgIEF1ZGl0XG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JiaWRkZW5Db21tZW50OiB7XG4gICAgICAgIHVzZXJfbmlja25hbWU6IFwnXCcsXG4gICAgICAgIHVzZXJfcGhvbmU6IFwnXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJ1xuICAgICAgfSxcbiAgICAgIGNsaWNrQ2VsbEluZGV4OiAtMSxcbiAgICAgIHRhYmxlSGVhZGVyOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3VzZXJfbmlja25hbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfmmLXnp7BcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCd1c2VyX3Bob25lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn55S16K+dXCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3A6IFwnY3JlYXRldGltZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+emgeiogOW8gOWni+aXtumXtFwnLFxuICAgICAgICAgIHdpZHRoOiAyMDAsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgdGFibGVEYXRhOiBbXSxcbiAgICAgIGluZGV4OiAtMSxcbiAgICAgIHBhZ2VObzogMSxcbiAgICAgIHBhZ2VTaXplOiAxMCxcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgc2VsZlNlbGVjdEFsbDogZmFsc2UsIC8vIOiHquWumuS5ieeahOWFqOmAiVxuICAgICAgY2FuY2VsRm9yYmlkZGVuQ29tbWVudExpc3Q6IFtdLFxuICAgICAgc2VsZWN0aW9uRm9yYmlkZGVuOiBbXVxuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBcJ2ZvcmJpZGRlbkNvbW1lbnQudXNlcl9uaWNrbmFtZVwnICgpIHtcbiAgICAgIHRoaXMuZ2V0Rm9yYmlkZGVuQ29tbWVudExpc3QoKVxuICAgIH0sXG4gICAgXCdmb3JiaWRkZW5Db21tZW50LnVzZXJfcGhvbmVcJyAoKSB7XG4gICAgICB0aGlzLmdldEZvcmJpZGRlbkNvbW1lbnRMaXN0KClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuZ2V0Rm9yYmlkZGVuQ29tbWVudExpc3QoKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLyoqIOiOt+WPluemgeiogOWIl+ihqCAqKi9cbiAgICBnZXRGb3JiaWRkZW5Db21tZW50TGlzdCAoKSB7XG4gICAgICB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdzd2FwVGltZVwnXSh0aGlzLmZvcmJpZGRlbkNvbW1lbnQpXG4gICAgICBsZXQgdGltZVN0YXJ0ID0gdGhpcy5mb3JiaWRkZW5Db21tZW50LnN0YXJ0RGF0ZSAhPT0gbnVsbCA/IG5ldyBEYXRlKHRoaXMuZm9yYmlkZGVuQ29tbWVudC5zdGFydERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIGxldCB0aW1lRW5kID0gdGhpcy5mb3JiaWRkZW5Db21tZW50LmVuZERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLmZvcmJpZGRlbkNvbW1lbnQuZW5kRGF0ZSkuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgQWN0aW9ucy5nZXRQYWdlRm9yYmlkZGVuQ29tbWVudCh7XG4gICAgICAgIFwncGFnZU5vXCc6IHRoaXMucGFnZU5vLFxuICAgICAgICBcJ3BhZ2VTaXplXCc6IHRoaXMucGFnZVNpemUsXG4gICAgICAgIFwndXNlcl9uaWNrbmFtZVwnOiB0aGlzLmZvcmJpZGRlbkNvbW1lbnQudXNlcl9uaWNrbmFtZSxcbiAgICAgICAgXCd1c2VyX3Bob25lXCc6IHRoaXMuZm9yYmlkZGVuQ29tbWVudC51c2VyX3Bob25lLFxuICAgICAgICBcJ3RpbWVTdGFydFwnOiB0aW1lU3RhcnQsXG4gICAgICAgIFwndGltZUVuZFwnOiB0aW1lRW5kXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy50YWJsZURhdGEgPSBkYXRhLmxpc3RcbiAgICAgICAgICB0aGlzLnRvdGFsID0gZGF0YS50b3RhbFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgaGFuZGxlU2l6ZUNoYW5nZSAocGFnZVNpemUpIHtcbiAgICAgIHRoaXMucGFnZVNpemUgPSBwYWdlU2l6ZVxuICAgICAgdGhpcy5nZXRGb3JiaWRkZW5Db21tZW50TGlzdCgpXG4gICAgfSxcbiAgICBoYW5kbGVDdXJyZW50Q2hhbmdlIChwYWdlSW5kZXgpIHtcbiAgICAgIHRoaXMucGFnZU5vID0gcGFnZUluZGV4XG4gICAgICB0aGlzLmdldEZvcmJpZGRlbkNvbW1lbnRMaXN0KClcbiAgICB9LFxuICAgIC8qKiDojrflj5blhajpgInnmoTmlbDmja4gKiovXG4gICAgc2VsZWN0QWxsIChlKSB7XG4gICAgICBpZiAoZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuc2VsZlNlbGVjdEFsbCA9IHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2VsZlNlbGVjdEFsbCA9IGZhbHNlXG4gICAgICB9XG4gICAgfSxcbiAgICAvKiog6I635Y+W5omA5pyJ6YCJ5oup55qE56i/5Lu2SUQgKiovXG4gICAgc2VsZWN0aW9uQ2hhbmdlIChzZWxlY3Rpb24pIHtcbiAgICAgIHRoaXMuY2FuY2VsRm9yYmlkZGVuQ29tbWVudExpc3QgPSBbXVxuICAgICAgc2VsZWN0aW9uLmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgdGhpcy5jYW5jZWxGb3JiaWRkZW5Db21tZW50TGlzdC5wdXNoKGl0ZW0udXNlcmlkKVxuICAgICAgfSlcbiAgICAgIHRoaXMuc2VsZWN0aW9uRm9yYmlkZGVuID0gc2VsZWN0aW9uXG4gICAgfSxcbiAgICAvKiog5Y+W5raI56aB6KiAICoqL1xuICAgIGNhbmNlbEZvcmJpZGRlbiAocm93KSB7XG4gICAgICBBY3Rpb25zLmNhbmNlbEZvcmJpZGRlbkNvbW1lbnQoe1xuICAgICAgICBcJ2ZvcmJpZGRlbkNvbW1lbnRWb1wnOiB7XG4gICAgICAgICAgXCd1c2VyaWRcJzogcm93LnVzZXJpZFxuICAgICAgICB9XG4gICAgICB9KS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgbWVzc2FnZTogXCflt7Llj5bmtojnpoHoqIBcJ1xuICAgICAgICAgIH0pXG4gICAgICAgICAgdGhpcy5nZXRGb3JiaWRkZW5Db21tZW50TGlzdCgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog5om56YeP5Y+W5raI56aB6KiAICoqL1xuICAgIGNhbmNlbE1hbnlGb3JiaWRkZW5Db21tZW50ICgpIHtcbiAgICAgIGlmICh0aGlzLmNhbmNlbEZvcmJpZGRlbkNvbW1lbnRMaXN0Lmxlbmd0aCA8PSAwKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+ivt+iHs+WwkemAieaLqeS4gOS4queUqOaItyFcJ1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGxldCB0aXBDb250ZW50ID0gXCfmgqjljbPlsIblj5bmtohcJ1xuICAgICAgLyoqIOW3suS4iue6v+eahOeov+S7tuS4jeWPr+WIoOmZpOeahOaPkOekuiAqKi9cbiAgICAgIHRoaXMuc2VsZWN0aW9uRm9yYmlkZGVuLmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgdGlwQ29udGVudCArPSBcJyhcJyArIGl0ZW0udXNlcl9uaWNrbmFtZSArIFwnKVwnXG4gICAgICB9KVxuICAgICAgdGhpcy4kY29uZmlybSh0aXBDb250ZW50ICsgXCfnmoTnpoHoqIA/XCcsIFwn5o+Q56S6XCcsIHtcbiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwn56Gu5a6aXCcsXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwn5Y+W5raIXCcsXG4gICAgICAgIHR5cGU6IFwnd2FybmluZ1wnXG4gICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgQWN0aW9ucy5iYXRjaERlbGV0ZUZvcmJpZGRlbkNvbW1lbnQoe1xuICAgICAgICAgIFwnaWRMaXN0XCc6IHRoaXMuY2FuY2VsRm9yYmlkZGVuQ29tbWVudExpc3RcbiAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+aJuemHj+WPlua2iOemgeiogOaIkOWKnyFcJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5nZXRGb3JiaWRkZW5Db21tZW50TGlzdCgpXG4gICAgICAgIH0pXG4gICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICB9KVxuICAgIH0sXG4gICAgdG9nZ2xlQWxsU2VsZWN0aW9uIChlKSB7XG4gICAgICB0aGlzLiRyZWZzLmNoYW5uZWxUYWJsZS50b2dnbGVBbGxTZWxlY3Rpb24oKVxuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLnBhZ2luYXRpb257XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICB9XG4gIC5saW1pdCAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAyMCU7XG4gIH1cbiAgLm1hbnV7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIGhlaWdodDogMjBweDtcbiAgICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTgxLCAxODQsIDIxNywgMSk7XG4gICAgYm9yZGVyLXJhZGl1czogMjBweDtcbiAgICBmb250LXNpemU6IDEzcHg7XG4gICAgcGFkZGluZzogMXB4IDVweCAycHggNXB4O1xuICAgIGNvbG9yOiByZ2JhKDE4MSwgMTg0LCAyMTcsIDEpO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuICAubWFudS11cC1hY3RpdmV7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyMzEsIDEyNSwgMCwgMSk7XG4gICAgY29sb3I6cmdiYSgyMzEsIDEyNSwgMCwgMSk7XG4gIH1cbiAgLm1hbnUtYmFjay1hY3RpdmV7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyNDAsIDgsIDgsIDEpO1xuICAgIGNvbG9yOnJnYmEoMjQwLCA4LCA4LCAxKTtcbiAgfVxuICAuZGVsZXRlLWFjdGl2ZXtcbiAgICBib3JkZXI6MXB4IHNvbGlkIHJnYmEoMTA1LCA3OCwgMjU1LCAxKTtcbiAgICBjb2xvcjogcmdiYSgxMDUsIDc4LCAyNTUsIDEpO1xuICB9XG48L3N0eWxlPlxuPHN0eWxlPlxuICAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5idG4tY29udGFpbmVyIC5lbC1idXR0b257XG4gICAgcGFkZGluZzogMTJweCAxMHB4O1xuICB9XG4gIC5zZWFyY2gtZm9ybS1jb250YWluZXIgLmJ0bi1jb250YWluZXIgLmVsLWljb24tLXJpZ2h0e1xuICAgIG1hcmdpbjogMDtcbiAgfVxuICAuY3VzdG9tLWRpYWxvZyAuZWwtZGlhbG9nX19oZWFkZXJ7XG4gICAgLypwYWRkaW5nOiAwOyovXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMTkyLDE5MCwyNTUsMSk7XG4gIH1cbiAgLmVsLXRvb2x0aXBfX3BvcHBlcntcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xuICB9XG4gIC5saW1pdCAuZWwtZm9ybS0taW5saW5lIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICAgIHdpZHRoOiA3MCUgIWltcG9ydGFudDtcbiAgfVxuICAubGltaXQgLnNlYXJjaC1mb3JtLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtIHtcbiAgICB3aWR0aDogMzAlICFpbXBvcnRhbnQ7XG4gIH1cbjwvc3R5bGU+XG4nXSxzb3VyY2VSb290OiIifV0pfSx5UmU5OmZ1bmN0aW9uKGUsbix0KXt2YXIgYT10KCJYTkR0Iik7InN0cmluZyI9PXR5cGVvZiBhJiYoYT1bW2UuaSxhLCIiXV0pLGEubG9jYWxzJiYoZS5leHBvcnRzPWEubG9jYWxzKTt0KCJyamowIikoIjZmZDYyNTgwIixhLCExLHt9KX0seWxydzpmdW5jdGlvbihlLG4pe30seXdtaDpmdW5jdGlvbihlLG4sdCl7KGUuZXhwb3J0cz10KCJGWitmIikoITApKS5wdXNoKFtlLmksIlxuLnBhZ2luYXRpb25bZGF0YS12LTAwZGFlNTBjXXtcbiAgLXdlYmtpdC1ib3gtcGFjazogZW5kO1xuICAgICAgLW1zLWZsZXgtcGFjazogZW5kO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG59XG4uc2xpZGUtZW5kLWRhdGUtaXRlbVtkYXRhLXYtMDBkYWU1MGNde1xuICBtYXJnaW4tbGVmdDogLTI5cHg7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZVNsaWRlL3NyYy9jb21wb25lbnRzL21hbmFnZVNsaWRlL3NsaWRlTGlzdC52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBdWRBO0VBQ0Esc0JBQUE7TUFBQSxtQkFBQTtVQUFBLDBCQUFBO0NBQ0E7QUFDQTtFQUNBLG1CQUFBO0NBQ0EiLGZpbGU6InNsaWRlTGlzdC52dWUiLHNvdXJjZXNDb250ZW50OlsnPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSJzbGlkZSI+XG4gICAgPGRpdj5cbiAgICAgIDxjaXJjbGUtdGl0bGVcbiAgICAgICAgdGl0bGUtbmFtZT0i6L2u5pKt5Zu+566h55CGIlxuICAgICAgICBjbGFzcz0iY2ljbGUtY29udHJvbGxlciJcbiAgICAgIC8+XG4gICAgICA8ZGl2IGNsYXNzPSJzZWFyY2gtZm9ybS1jb250YWluZXIiPlxuICAgICAgICA8ZWwtZm9ybVxuICAgICAgICAgIDppbmxpbmU9InRydWUiXG4gICAgICAgICAgOm1vZGVsPSJzbGlkZUZvcm0iXG4gICAgICAgICAgY2xhc3M9ImRlbW8tZm9ybS1pbmxpbmUiPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9Iuagh+mimCI+XG4gICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgdi1tb2RlbD0ic2xpZGVGb3JtLmNoYXJ0X25hbWUiXG4gICAgICAgICAgICAgIGNsZWFyYWJsZS8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5b2S5bGe6aKR6YGTIj5cbiAgICAgICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICAgICAgdi1tb2RlbD0ic2xpZGVGb3JtLmNoYW5uZWxpZCJcbiAgICAgICAgICAgICAgZmlsdGVyYWJsZVxuICAgICAgICAgICAgICBjbGVhcmFibGVcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IiJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoU2xpZGUiXG4gICAgICAgICAgICAgIEBjbGVhcj0ic2VhcmNoU2xpZGUiPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gY2hhbm5lbFR5cGVMaXN0IlxuICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSJcbiAgICAgICAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiLz5cbiAgICAgICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLnirbmgIEiXG4gICAgICAgICAgICBjbGFzcz0ic2VhcmNoLWxlZnQiPlxuICAgICAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgICAgICB2LW1vZGVsPSJzbGlkZUZvcm0uc3RhdGUiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSIiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaFNsaWRlIj5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIHZhbHVlPSIiXG4gICAgICAgICAgICAgICAgbGFiZWw9IuWFqOmDqCIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPSIxIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlvoXkuIrnur8iLz5cbiAgICAgICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgICAgIDp2YWx1ZT0iMiJcbiAgICAgICAgICAgICAgICBsYWJlbD0i5bey5LiK57q/Ii8+XG4gICAgICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgICAgICA6dmFsdWU9IjMiXG4gICAgICAgICAgICAgICAgbGFiZWw9Iui/h+acnyIvPlxuICAgICAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICAgICAgOnZhbHVlPSIwIlxuICAgICAgICAgICAgICAgIGxhYmVsPSLlgZznlKgiLz5cbiAgICAgICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgICAgIGxhYmVsPSLlvIDlp4vml7bpl7QiXG4gICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IC0yOXB4Ij5cbiAgICAgICAgICAgIDxlbC1kYXRlLXBpY2tlclxuICAgICAgICAgICAgICA6dGl0bGU9InNsaWRlRm9ybS5zdGFydERhdGUgfCBGb3JtYXREYXRlKFwneXl5eS1NTS1kZCBoaDptbVwnKSJcbiAgICAgICAgICAgICAgdi1tb2RlbD0ic2xpZGVGb3JtLnN0YXJ0RGF0ZSJcbiAgICAgICAgICAgICAgdHlwZT0iZGF0ZXRpbWUiXG4gICAgICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IumAieaLqeaXtumXtCJcbiAgICAgICAgICAgICAgQGNoYW5nZT0ic2VhcmNoU2xpZGUiLz5cbiAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgICAgICBjbGFzcz0ic2xpZGUtZW5kLWRhdGUtaXRlbSJcbiAgICAgICAgICAgIGxhYmVsPSLnu5PmnZ/ml7bpl7QiXG4gICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IDI5cHgiPlxuICAgICAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgICAgIDp0aXRsZT0ic2xpZGVGb3JtLmVuZERhdGUgfCBGb3JtYXREYXRlKFwneXl5eS1NTS1kZCBoaDptbVwnKSJcbiAgICAgICAgICAgICAgdi1tb2RlbD0ic2xpZGVGb3JtLmVuZERhdGUiXG4gICAgICAgICAgICAgIHR5cGU9ImRhdGV0aW1lIlxuICAgICAgICAgICAgICBmb3JtYXQ9Inl5eXktTU0tZGQgSEg6bW0iXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSLpgInmi6nml7bpl7QiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaFNsaWRlIi8+XG4gICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogNDBweCJcbiAgICAgICAgICAgIEBjbGljaz0ic2VhcmNoU2xpZGUiPlxuICAgICAgICAgICAg5p+l6K+iXG4gICAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICA8L2VsLWJ1dHRvbj5cbiAgICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9tYW5hZ2VTbGlkZS9jcmVhdGUiPlxuICAgICAgICAgICAgPGVsLWJ1dHRvbiB0eXBlPSJwcmltYXJ5Ij5cbiAgICAgICAgICAgICAg5re75Yqg6L2u5pKt5Zu+XG4gICAgICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLXBsdXMgZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgICAgIDwvZWwtYnV0dG9uPlxuICAgICAgICAgIDwvcm91dGVyLWxpbms+XG4gICAgICAgIDwvZWwtZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9InRhYmxlLWxpc3QiPlxuICAgICAgPGVsLXRhYmxlXG4gICAgICAgIHJlZj0ic2xpZGVUYWJsZSJcbiAgICAgICAgOmRhdGE9InRhYmxlRGF0YSJcbiAgICAgICAgc3RyaXBlXG4gICAgICAgIGNsYXNzPSJ3aG9sZS10YWJsZSJcbiAgICAgICAgbWluLWhlaWdodD0iNDAwIlxuICAgICAgICBAY2VsbC1jbGljaz0iY2VsbENsaWNrIlxuICAgICAgICBAY2VsbC1tb3VzZS1sZWF2ZT0iY2VsbE1vdXNlTGVhdmUiPlxuICAgICAgICA8ZWwtdGFibGUtY29sdW1uXG4gICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gdGFibGVIZWFkZXIiXG4gICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgOnByb3A9Iml0ZW0ucHJvcCJcbiAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiXG4gICAgICAgICAgOndpZHRoPSJpdGVtLndpZHRoIlxuICAgICAgICAgIDpmb3JtYXR0ZXI9Iml0ZW0uZm9ybWF0dGVyIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgZml4ZWRcbiAgICAgICAgICBzaG93LW92ZXJmbG93LXRvb2x0aXBcbiAgICAgICAgLz5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIGZpeGVkPSJyaWdodCJcbiAgICAgICAgICBsYWJlbD0i5pON5L2cIlxuICAgICAgICAgIGFsaWduPSJjZW50ZXIiXG4gICAgICAgICAgd2lkdGg9IjEwMCI+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj5cbiAgICAgICAgICAgIDxlbC10b29sdGlwXG4gICAgICAgICAgICAgIGNsYXNzPSJpdGVtIlxuICAgICAgICAgICAgICBlZmZlY3Q9ImRhcmsiXG4gICAgICAgICAgICAgIGNvbnRlbnQ9IuS/ruaUueeKtuaAgSJcbiAgICAgICAgICAgICAgcGxhY2VtZW50PSJ0b3AiPlxuICAgICAgICAgICAgICA8ZWwtYnV0dG9uXG4gICAgICAgICAgICAgICAgdHlwZT0idGV4dCJcbiAgICAgICAgICAgICAgICBzaXplPSJzbWFsbCJcbiAgICAgICAgICAgICAgICBpY29uPSJlbC1pY29uLXJlbW92ZS1vdXRsaW5lIlxuICAgICAgICAgICAgICAgIEBjbGljaz0iY2hhbmdlU3RhdGUoc2NvcGUucm93KSIvPlxuICAgICAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IlxuICAgICAgICAgICAgICBzaXplPSJzbWFsbCJcbiAgICAgICAgICAgICAgaWNvbj0iZWwtaWNvbi1lZGl0IlxuICAgICAgICAgICAgICBAY2xpY2s9ImhhbmRsZUVkaXQoc2NvcGUucm93KSIvPlxuICAgICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IlxuICAgICAgICAgICAgICBzaXplPSJzbWFsbCJcbiAgICAgICAgICAgICAgaWNvbj0iZWwtaWNvbi1kZWxldGUiXG4gICAgICAgICAgICAgIEBjbGljaz0iaGFuZGxlRGVsZXRlKHNjb3BlLnJvdykiLz5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj5cbiAgICAgIDwvZWwtdGFibGU+XG4gICAgICA8ZGl2IGNsYXNzPSJwYWdpbmF0aW9uIj5cbiAgICAgICAgPGVsLXBhZ2luYXRpb25cbiAgICAgICAgICA6dG90YWw9InRvdGFsIlxuICAgICAgICAgIDpwYWdlLXNpemVzPSJbMTAsIDIwLCAzMCwgNDBdIlxuICAgICAgICAgIDpjdXJyZW50LXBhZ2U9InBhZ2VObyJcbiAgICAgICAgICBiYWNrZ3JvdW5kXG4gICAgICAgICAgbGF5b3V0PSJ0b3RhbCwgc2l6ZXMsIHByZXYsIHBhZ2VyLCBuZXh0IlxuICAgICAgICAgIEBzaXplLWNoYW5nZT0iaGFuZGxlU2l6ZUNoYW5nZSJcbiAgICAgICAgICBAY3VycmVudC1jaGFuZ2U9ImhhbmRsZUN1cnJlbnRDaGFuZ2UiLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuaW1wb3J0IENpcmNsZVRpdGxlIGZyb20gXCdAL2NvbXBvbmVudHMvY29tbW9ucy9jaXJjbGVUaXRsZVwnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9zbGlkZUFwaVwnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBDaXJjbGVUaXRsZVxuICB9LFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2xpZGVGb3JtOiB7XG4gICAgICAgIGNoYXJ0X25hbWU6IFwnXCcsXG4gICAgICAgIGNoYW5uZWxpZDogXCdcJyxcbiAgICAgICAgc3RhdGU6IFwnXCcsXG4gICAgICAgIHJlZ2lvbjogXCdcJyxcbiAgICAgICAgZGF0ZXJhbmdlOiBbXSxcbiAgICAgICAgc29ydDogXCcxXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJ1xuICAgICAgfSxcbiAgICAgIGNsaWNrQ2VsbEluZGV4OiAtMSxcbiAgICAgIHRhYmxlSGVhZGVyOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2NoYXJ0X25hbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCflm77niYfmoIfpophcJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCdjcmVhdGV0aW1lXCcsXG4gICAgICAgICAgbGFiZWw6IFwn5Yib5bu65pel5pyfXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvcDogXCd1cGRhdGVcJyArXG4gICAgICAgICAgICBcJ3RpbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfmm7TmlrDml6XmnJ9cJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10oY2VsbFZhbHVlLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2NoYW5uZWxfbmFtZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+W9kuWxnumikemBk1wnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2NoYXJ0X2hlYWRfdXJsXCcsXG4gICAgICAgICAgbGFiZWw6IFwn6L2u5pKt5Zu+5Zu+54mHXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8aW1nIGNsYXNzPVwndG9waWMtdGFibGUtcGljXCcgc3JjPXtjZWxsVmFsdWV9Lz5cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2p1bXBfdHlwZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+WFs+iBlOWGheWuuVwnLFxuICAgICAgICAgIGZvcm1hdHRlcjogKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoY2VsbFZhbHVlID09PSAxICYmIHJvdy50aXRsZSkge1xuICAgICAgICAgICAgICByZXR1cm4gXCfnqL/ku7YtXCcgKyByb3cudGl0bGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2VsbFZhbHVlID09PSAyICYmIHJvdy5zcGVjaWFsX25hbWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwn5LiT6aKYLVwnICsgcm93LnNwZWNpYWxfbmFtZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwn5pegXCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2V4cGlyeV9kYXRlX3N0YXJ0XCcsXG4gICAgICAgICAgbGFiZWw6IFwn5pyJ5pWI5pyfXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGxldCBzdGFydERhdGUgPSB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgICBsZXQgZW5kRGF0ZSA9IHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10ocm93LmV4cGlyeV9kYXRlX2VuZCwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgICByZXR1cm4gc3RhcnREYXRlICsgXCfoh7NcJyArIGVuZERhdGVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3Nob3dTdGF0ZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+eKtuaAgVwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3NvcnRcJyxcbiAgICAgICAgICBsYWJlbDogXCfmjpLluo9cJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSB0aGlzLmNsaWNrQ2VsbEluZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybiA8aW5wdXQgdHlwZT1cJ3RleHRcJyBjbGFzcz1cJ3NlbGYtc29ydFwnIGlkPXtpbmRleH0gdmFsdWU9IHtjZWxsVmFsdWV9IGF1dG9mb2N1cz0iYXV0b2ZvY3VzIiAvPlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDxzcGFuIGNsYXNzPVwnc29ydC1jb250YWluZXJcJyBkYXRhLWlkPXtpbmRleH0+e2NlbGxWYWx1ZX08L3NwYW4+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgdGFibGVEYXRhOiBbXSxcbiAgICAgIHNvcnRWYWx1ZTogLTEsXG4gICAgICBwYWdlTm86IDEsXG4gICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICB0b3RhbDogMCxcbiAgICAgIGNoYW5uZWxUeXBlTGlzdDogW10sXG4gICAgICBzZWxlY3RDaGFydElkOiBcJ1wnIC8vIOeCueWHu+aOkuW6j+ihjOeahGNoYW5uZWxpZFxuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBcJ3NsaWRlRm9ybS5jaGFydF9uYW1lXCcgKCkge1xuICAgICAgdGhpcy5zZWFyY2hTbGlkZSgpXG4gICAgfVxuICB9LFxuICBtb3VudGVkICgpIHtcbiAgICB0aGlzLmdldFNsaWRlTGlzdCgpXG4gICAgdGhpcy5nZXRMaXN0VXNhYmxlQ2hhbm5lbCgpXG4gICAgdGhpcy4kcm9vdC5ldmVudEh1Yi4kb24oXCdyZXNldC1vcHRpb25zXCcsICgpID0+IHtcbiAgICAgIHRoaXMucmVzZXRPcHRpb25zKClcbiAgICB9KVxuICB9LFxuICBhY3RpdmF0ZWQgKCkge1xuICAgIGxldCBtZXRhID0gdGhpcy4kcm91dGUubWV0YVxuICAgIGlmIChtZXRhLmhhc093blByb3BlcnR5KFwncmVmcmVzaFwnKSAmJiBtZXRhLnJlZnJlc2gpIHtcbiAgICAgIHRoaXMuZ2V0U2xpZGVMaXN0KClcbiAgICAgIGRlbGV0ZSB0aGlzLiRyb3V0ZS5tZXRhLnJlZnJlc2hcbiAgICB9XG4gIH0sXG4gIGJlZm9yZVJvdXRlTGVhdmUgKHRvLCBmcm9tLCBuZXh0KSB7XG4gICAgaWYgKHRvLnBhdGggPT09IFwnL21hbmFnZVNsaWRlL2NyZWF0ZVwnKSB7XG4gICAgICB0aGlzLnJlc2V0T3B0aW9ucygpXG4gICAgfVxuICAgIG5leHQoKVxuICB9LFxuICBiZWZvcmVEZXN0cm95ICgpIHtcbiAgICB0aGlzLiRyb290LmV2ZW50SHViLiRvZmYoXCdyZXNldC1vcHRpb25zXCcpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICByZXNldE9wdGlvbnMgKCkge1xuICAgICAgdGhpcy5zbGlkZUZvcm0gPSB7XG4gICAgICAgIGNoYXJ0X25hbWU6IFwnXCcsXG4gICAgICAgIGNoYW5uZWxpZDogXCdcJyxcbiAgICAgICAgc3RhdGU6IFwnXCcsXG4gICAgICAgIHJlZ2lvbjogXCdcJyxcbiAgICAgICAgZGF0ZXJhbmdlOiBbXSxcbiAgICAgICAgc29ydDogXCcxXCcsXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJ1xuICAgICAgfVxuICAgICAgdGhpcy5wYWdlTm8gPSAxXG4gICAgICB0aGlzLmdldFNsaWRlTGlzdCgpXG4gICAgfSxcbiAgICBoYW5kbGVTaXplQ2hhbmdlIChwYWdlU2l6ZSkge1xuICAgICAgdGhpcy5wYWdlU2l6ZSA9IHBhZ2VTaXplXG4gICAgICB0aGlzLnNlYXJjaFNsaWRlKClcbiAgICB9LFxuICAgIGhhbmRsZUN1cnJlbnRDaGFuZ2UgKHBhZ2VJbmRleCkge1xuICAgICAgdGhpcy5wYWdlTm8gPSBwYWdlSW5kZXhcbiAgICAgIHRoaXMuZ2V0U2xpZGVMaXN0KClcbiAgICB9LFxuICAgIC8qKiDljZXlhYPmoLzooqvngrnlh7sgKiovXG4gICAgY2VsbENsaWNrIChyb3csIGNvbHVtbiwgY2VsbCwgZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwnc29ydC1jb250YWluZXJcJykpIHtcbiAgICAgICAgaWYgKHJvdy5zdGF0ZSAhPT0gMSkge1xuICAgICAgICAgIGxldCBpZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmlkXG4gICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICB0aGlzLmNsaWNrQ2VsbEluZGV4ID0gcGFyc2VJbnQoaWQpXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIGxldCBpbnB1dEVsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwnLmVsLXRvb2x0aXAgPiBpbnB1dC5zZWxmLXNvcnRcJylcbiAgICAgICAgICAgIGlucHV0RWxlcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIC8qKiDlsIZjaGFubmVsX2lk5a2Y5YKo6LW35p2l5qCH6K+G5Y2V5YWD6KGMICoqL1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Q2hhcnRJZCA9IHJvdy5jaGFydGlkXG4gICAgICAgICAgICAgICAgZWxlbWVudC5mb2N1cygpXG4gICAgICAgICAgICAgICAgZWxlbWVudC5vbmtleXVwID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc29ydFZhbHVlID0gcGFyc2VJbnQoZWxlbWVudC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwn5ZCv55So54q25oCB5LiL5LiN6IO95o6S5bqPIVwnXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOemu+W8gOWNleWFg+agvCAqKi9cbiAgICBjZWxsTW91c2VMZWF2ZSAocm93KSB7XG4gICAgICAvKiog6YeN572u5Y2V5YWD5qC854q25oCBICoqL1xuICAgICAgdGhpcy5jbGlja0NlbGxJbmRleCA9IC0xXG4gICAgICBpZiAodGhpcy5zb3J0VmFsdWUgPT09IC0xIHx8IHRoaXMuc2VsZWN0Q2hhcnRJZCAhPT0gcm93LmNoYXJ0aWQpIHJldHVybiBmYWxzZVxuICAgICAgLyoqIOS/ruaUueaOkuW6jyAqKi9cbiAgICAgIEFjdGlvbnMudXBkYXRlU2xpZGVTb3J0KHtcbiAgICAgICAgXCdyb3RhdGlvbkNoYXJ0XCc6IHtcbiAgICAgICAgICBcJ2NoYXJ0aWRcJzogcm93LmNoYXJ0aWQsXG4gICAgICAgICAgXCdzb3J0XCc6IHRoaXMuc29ydFZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgIHRoaXMuZ2V0U2xpZGVMaXN0KClcbiAgICAgICAgICB0aGlzLnNvcnRWYWx1ZSA9IC0xXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBnZXRTbGlkZUxpc3QgKCkge1xuICAgICAgbGV0IHRpbWVTdGFydCA9IHRoaXMuc2xpZGVGb3JtLnN0YXJ0RGF0ZSAhPT0gbnVsbCA/IG5ldyBEYXRlKHRoaXMuc2xpZGVGb3JtLnN0YXJ0RGF0ZSkuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgbGV0IHRpbWVFbmQgPSB0aGlzLnNsaWRlRm9ybS5lbmREYXRlICE9PSBudWxsID8gbmV3IERhdGUodGhpcy5zbGlkZUZvcm0uZW5kRGF0ZSkuZ2V0VGltZSgpIDogbnVsbFxuICAgICAgQWN0aW9ucy5nZXRTbGlkZUxpc3Qoe1xuICAgICAgICBcJ3BhZ2VOb1wnOiB0aGlzLnBhZ2VObyxcbiAgICAgICAgXCdwYWdlU2l6ZVwnOiB0aGlzLnBhZ2VTaXplLFxuICAgICAgICBcJ2NoYW5uZWxpZFwnOiB0aGlzLnNsaWRlRm9ybS5jaGFubmVsaWQsXG4gICAgICAgIFwnY2hhcnRfbmFtZVwnOiB0aGlzLnNsaWRlRm9ybS5jaGFydF9uYW1lLFxuICAgICAgICBcJ3N0YXRlXCc6IHRoaXMuc2xpZGVGb3JtLnN0YXRlLFxuICAgICAgICBcJ3RpbWVTdGFydFwnOiB0aW1lU3RhcnQsXG4gICAgICAgIFwndGltZUVuZFwnOiB0aW1lRW5kXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy50YWJsZURhdGEgPSBkYXRhLmxpc3RcbiAgICAgICAgICB0aGlzLnRvdGFsID0gZGF0YS50b3RhbFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOS/ruaUueeKtuaAgSAqKi9cbiAgICBjaGFuZ2VTdGF0ZSAocm93KSB7XG4gICAgICBsZXQgc3RhdGUgPSAwXG4gICAgICBpZiAocm93LnN0YXRlID09PSAxKSB7XG4gICAgICAgIHN0YXRlID0gMFxuICAgICAgfSBlbHNlIGlmIChyb3cuc3RhdGUgPT09IDApIHtcbiAgICAgICAgc3RhdGUgPSAxXG4gICAgICB9XG4gICAgICBBY3Rpb25zLnVwZGF0ZVNsaWRlU3RhdGUoe1xuICAgICAgICBcJ3JvdGF0aW9uQ2hhcnRcJzoge1xuICAgICAgICAgIFwnY2hhcnRpZFwnOiByb3cuY2hhcnRpZCxcbiAgICAgICAgICBcJ3N0YXRlXCc6IHN0YXRlXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7XG4gICAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+S/ruaUueeKtuaAgeS4uuWBnOeUqFwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgICAgdHlwZTogXCdzdWNjZXNzXCcsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IFwn5L+u5pS554q25oCB5Li65ZCv55SoXCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZ2V0U2xpZGVMaXN0KClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDliKDpmaTova7mkq3lm74gKiovXG4gICAgaGFuZGxlRGVsZXRlIChyb3cpIHtcbiAgICAgIGlmIChyb3cuc3RhdGUgIT09IDEpIHtcbiAgICAgICAgdGhpcy4kY29uZmlybShcJ+aYr+WQpuWIoOmZpCJcJyArIHJvdy5jaGFydF9uYW1lICsgXCciP1wnLCBcJ+aPkOekulwnLCB7XG4gICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwn56Gu5a6aXCcsXG4gICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCflj5bmtohcJyxcbiAgICAgICAgICB0eXBlOiBcJ3dhcm5pbmdcJ1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICBBY3Rpb25zLmRlbGV0ZVNsaWRlKHtcbiAgICAgICAgICAgIFwncm90YXRpb25DaGFydFwnOiB7XG4gICAgICAgICAgICAgIFwnY2hhcnRpZFwnOiByb3cuY2hhcnRpZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcy5kYXRhLnN0YXR1cykge1xuICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcJ+WIoOmZpOaIkOWKnyFcJ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nZXRTbGlkZUxpc3QoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+WQr+eUqOeKtuaAgeS4i+S4jeWPr+WIoOmZpCFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgaGFuZGxlRWRpdCAocm93KSB7XG4gICAgICBpZiAocm93LnN0YXRlICE9PSAxKSB7XG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCdjaGFydGlkXCcsIHJvdy5jaGFydGlkKVxuICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7cGF0aDogXCcvbWFuYWdlU2xpZGUvZWRpdFwnfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwnZXJyb3JcJyxcbiAgICAgICAgICBtZXNzYWdlOiBcJ+WQr+eUqOeKtuaAgeS4i+S4jeWPr+e8lui+kSFcJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOiOt+WPlumikemBk+exu+WIqyAqKi9cbiAgICBnZXRMaXN0VXNhYmxlQ2hhbm5lbCAoKSB7XG4gICAgICBBY3Rpb25zLmdldExpc3RVc2FibGVDaGFubmVsKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGFcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGxldCBuZXdJdGVtID0ge31cbiAgICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBpdGVtLmNoYW5uZWxfbmFtZVxuICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uY2hhbm5lbGlkXG4gICAgICAgICAgICB0aGlzLmNoYW5uZWxUeXBlTGlzdC5wdXNoKG5ld0l0ZW0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIHNlYXJjaFNsaWRlICgpIHtcbiAgICAgIHRoaXMucGFnZU5vID0gMVxuICAgICAgdGhpcy4kb3B0aW9ucy5maWx0ZXJzW1wnc3dhcFRpbWVcJ10odGhpcy5zbGlkZUZvcm0pXG4gICAgICB0aGlzLmdldFNsaWRlTGlzdCgpXG4gICAgfVxuICB9XG5cbn1cbjxcL3NjcmlwdD5cbjxzdHlsZSBzY29wZWQ+XG4gIC5wYWdpbmF0aW9ue1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gIH1cbiAgLnNsaWRlLWVuZC1kYXRlLWl0ZW17XG4gICAgbWFyZ2luLWxlZnQ6IC0yOXB4O1xuICB9XG48L3N0eWxlPlxuPHN0eWxlPlxuICAuc2xpZGUgLmVsLWZvcm0tLWlubGluZSAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICB3aWR0aDogNjAlO1xuICB9XG4gIC5zbGlkZSAuc2VhcmNoLWZvcm0tY29udGFpbmVyIC5lbC1mb3JtLWl0ZW0ge1xuICAgIHdpZHRoOiAyNSU7XG4gIH1cbjwvc3R5bGU+XG4nXSxzb3VyY2VSb290OiIifV0pfSx5emRyOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uY2ljbGUtY29udHJvbGxlcltkYXRhLXYtNDU5NjA2NGVdIHtcbiAgbWFyZ2luLXRvcDogNCU7XG59XG4uY3JlYXRlIC5zb3J0IHNwYW5bZGF0YS12LTQ1OTYwNjRlXXtcbiAgY29sb3I6ICM5MDkwOTA7XG59XG4iLCIiLHt2ZXJzaW9uOjMsc291cmNlczpbIi9kb2NrZXJkYXRhL2plbmtpbnMvLmplbmtpbnMvd29ya3NwYWNlL0FwcF9NYW5hZ2VfU3ZfV2ViL3NyYy9jb21wb25lbnRzL21hbmFnZVN1YmxpdmUvc3ViQ2hhbm5lbC9zcmMvY29tcG9uZW50cy9tYW5hZ2VTdWJsaXZlL3N1YkNoYW5uZWwvY2hhbm5lbEVkaXQudnVlIl0sbmFtZXM6W10sbWFwcGluZ3M6IjtBQW1XQTtFQUNBLGVBQUE7Q0FDQTtBQUNBO0VBQ0EsZUFBQTtDQUNBIixmaWxlOiJjaGFubmVsRWRpdC52dWUiLHNvdXJjZXNDb250ZW50OlsnPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSJjaGFubmVsIGNyZWF0ZSI+XG4gICAgPGNpcmNsZS10aXRsZVxuICAgICAgdGl0bGUtbmFtZT0i6aKR6YGT57yW6L6RIlxuICAgICAgY2xhc3M9ImNpY2xlLWNvbnRyb2xsZXIiXG4gICAgLz5cbiAgICA8ZWwtZm9ybVxuICAgICAgcmVmPSJlZGl0RnJvbSJcbiAgICAgIDptb2RlbD0iZWRpdEZyb20iXG4gICAgICA6cnVsZXM9InJ1bGVzIlxuICAgICAgbGFiZWwtd2lkdGg9IjEwMHB4IlxuICAgICAgY2xhc3M9InJ1bGUtZm9ybSI+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLpopHpgZPlkI3np7AiXG4gICAgICAgIHByb3A9ImNoYW5uZWxfbmFtZSI+XG4gICAgICAgIDxlbC1pbnB1dCB2LW1vZGVsLnRyaW09ImVkaXRGcm9tLmNoYW5uZWxfbmFtZSIvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLniLbnuqfpopHpgZMiXG4gICAgICAgIHByb3A9InBhcmVudF9jaGFubmVsX25hbWUiPlxuICAgICAgICA8ZWwtc2VsZWN0XG4gICAgICAgICAgdi1tb2RlbD0iZWRpdEZyb20ucGFyZW50X2NoYW5uZWxpZCJcbiAgICAgICAgICA6ZGlzYWJsZWQ9ImRpc2FibGVkQ2hvb3NlUGFyZW50Q2hhbm5lbCJcbiAgICAgICAgICBmaWx0ZXJhYmxlXG4gICAgICAgICAgcGxhY2Vob2xkZXI9IiJcbiAgICAgICAgICBAY2hhbmdlPSJkaXNhYmxlSXNGaXhlZCI+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gcGFyZW50Q2hhbm5lbExpc3QiXG4gICAgICAgICAgICA6a2V5PSJpbmRleCJcbiAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSJcbiAgICAgICAgICAgIDpsYWJlbD0iaXRlbS5sYWJlbCIvPlxuICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i5b2S5bGe57G75YirIlxuICAgICAgICBwcm9wPSJjaGFubmVsX3R5cGVfbmFtZSI+XG4gICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICB2LW1vZGVsPSJlZGl0RnJvbS5jaGFubmVsX3R5cGVpZCJcbiAgICAgICAgICBmaWx0ZXJhYmxlXG4gICAgICAgICAgcGxhY2Vob2xkZXI9IiI+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gY2hhbm5lbFR5cGVMaXN0IlxuICAgICAgICAgICAgOmtleT0iaW5kZXgiXG4gICAgICAgICAgICA6dmFsdWU9Iml0ZW0udmFsdWUiXG4gICAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiLz5cbiAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuWbvuagh+mFjee9riJcbiAgICAgICAgY2xhc3M9Iml0ZW0iPlxuICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLWNob29zZS1jb250YWluZXIiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9Im1vcmVuLWljb24iPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICA6c3JjPSJlZGl0RnJvbS5pY29uX3VybCI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgICAgdHlwZT0icHJpbWFyeSJcbiAgICAgICAgICAgIEBjbGljaz0iY2hvb3NlSWNvbiI+6YCJ5oup5Zu+5qCHPC9lbC1idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLnirbmgIHpgInmi6kiXG4gICAgICAgIHByb3A9InN0YXRlIj5cbiAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgIHYtbW9kZWw9ImVkaXRGcm9tLnN0YXRlIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPSLor7fpgInmi6kiPlxuICAgICAgICAgIDxlbC1vcHRpb25cbiAgICAgICAgICAgIDp2YWx1ZT0iMSJcbiAgICAgICAgICAgIGxhYmVsPSLlkK/nlKgiLz5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICA6dmFsdWU9IjAiXG4gICAgICAgICAgICBsYWJlbD0i5YGc55SoIi8+XG4gICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLpopHpgZPnroDov7AiPlxuICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICB2LW1vZGVsPSJlZGl0RnJvbS5kZXNjcmlwdGlvbiJcbiAgICAgICAgICB0eXBlPSJ0ZXh0YXJlYSIvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLmmK/lkKblm7rlrpoiXG4gICAgICAgIHByb3A9ImZpeGVkIj5cbiAgICAgICAgPGVsLXNlbGVjdFxuICAgICAgICAgIDpkaXNhYmxlZD0iZml4ZWREaXNhYmxlZCJcbiAgICAgICAgICB2LW1vZGVsPSJlZGl0RnJvbS5maXhlZCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj0i6K+36YCJ5oupIj5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICA6dmFsdWU9InRydWUiXG4gICAgICAgICAgICBsYWJlbD0i5pivIi8+XG4gICAgICAgICAgPGVsLW9wdGlvblxuICAgICAgICAgICAgOnZhbHVlPSJmYWxzZSJcbiAgICAgICAgICAgIGxhYmVsPSLlkKYiLz5cbiAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW1cbiAgICAgICAgbGFiZWw9IuaOkuW6jyJcbiAgICAgICAgY2xhc3M9InNvcnQiXG4gICAgICAgIHByb3A9InNvcnQiPlxuICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICB2LW1vZGVsLm51bWJlcj0iZWRpdEZyb20uc29ydCJcbiAgICAgICAgICBzdHlsZT0id2lkdGg6IDc1JSIvPlxuICAgICAgICA8c3Bhbj7mj5DnpLrvvJrmlbDlrZfotorlsI/otorlvoDliY08L3NwYW4+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW0+XG4gICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgIEBjbGljaz0ic3VibWl0Rm9ybShcJ2VkaXRGcm9tXCcpIj7mj5DkuqQ8L2VsLWJ1dHRvbj5cbiAgICAgICAgPGVsLWJ1dHRvbiBAY2xpY2s9ImdvdG9MaXN0Ij7lj5bmtog8L2VsLWJ1dHRvbj5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgIDwvZWwtZm9ybT5cbiAgICA8ZWwtZGlhbG9nXG4gICAgICA6dmlzaWJsZS5zeW5jPSJkaWFsb2dWaXNpYmxlIlxuICAgICAgdGl0bGU9IuWbvuagh+mAieaLqSJcbiAgICAgIHdpZHRoPSI0MCUiXG4gICAgICBAY2xvc2U9ImNsb3NlRGlhbG9nIj5cbiAgICAgIDxkaXZcbiAgICAgICAgOmlzPSJjb21wb25lbnROYW1lIlxuICAgICAgICBAc3VibWl0LWljb249InN1Ym1pdEljb24iLz5cbiAgICA8L2VsLWRpYWxvZz5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCBDaXJjbGVUaXRsZSBmcm9tIFwnQC9jb21wb25lbnRzL2NvbW1vbnMvY2lyY2xlVGl0bGVcJ1xuaW1wb3J0IENob29zZUljb24gZnJvbSBcJy4vY2hvb3NlSWNvblwnXG5pbXBvcnQgKiBhcyBBY3Rpb25zIGZyb20gXCdAL2FwaS9kZW1hbmQtY2hhbm5lbFwnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBDaXJjbGVUaXRsZSxcbiAgICBDaG9vc2VJY29uXG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIGxldCBjaGVja0NoYW5uZWxOYW1lTGVuZ3RoID0gKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaykgPT4ge1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDEwKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoXCfpopHpgZPlkI3np7Dplb/luqbkuI3og73otoXov4cxMFwnKSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBlZGl0RnJvbToge1xuICAgICAgICBjaGFubmVsX25hbWU6IFwnXCcsXG4gICAgICAgIHBhcmVudF9jaGFubmVsX25hbWU6IFwnXCcsXG4gICAgICAgIHBhcmVudF9jaGFubmVsaWQ6IFwnXCcsXG4gICAgICAgIHNvcnQ6IDAsXG4gICAgICAgIGljb25fdXJsOiBcJ1wnLFxuICAgICAgICBjaGFubmVsX3R5cGVfbmFtZTogXCdcJyxcbiAgICAgICAgc3RhdGU6IFwnXCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcJ1wnLFxuICAgICAgICBmaXhlZDogXCdcJyxcbiAgICAgICAgY2hhbm5lbF90eXBlaWQ6IFwnXCdcbiAgICAgIH0sXG4gICAgICBydWxlczoge1xuICAgICAgICBjaGFubmVsX25hbWU6IFtcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiBcJ+ivt+i+k+WFpemikemBk+WQjeensFwnLCB0cmlnZ2VyOiBcJ2JsdXJcJyB9LFxuICAgICAgICAgIHsgdmFsaWRhdG9yOiBjaGVja0NoYW5uZWxOYW1lTGVuZ3RoLCB0cmlnZ2VyOiBcJ2NoYW5nZVwnIH1cbiAgICAgICAgXSxcbiAgICAgICAgc29ydDogW1xuICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6IFwn6K+36L6T5YWl5o6S5bqPXCcsIHRyaWdnZXI6IFwnYmx1clwnIH0sXG4gICAgICAgICAgeyB0eXBlOiBcJ251bWJlclwnLCBtZXNzYWdlOiBcJ+aOkuW6j+W/hemhu+S4uuaVsOWtl1wnIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIGNoYW5uZWxUeXBlTGlzdDogW10sXG4gICAgICBwYXJlbnRDaGFubmVsTGlzdDogW1xuICAgICAgICB7XG4gICAgICAgICAgbGFiZWw6IFwn5pegXCcsXG4gICAgICAgICAgdmFsdWU6IFwnXCdcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGNoYW5uZWxpZDogXCdcJyxcbiAgICAgIGRpc2FibGVkQ2hvb3NlUGFyZW50Q2hhbm5lbDogZmFsc2UsXG4gICAgICBkaWFsb2dWaXNpYmxlOiBmYWxzZSxcbiAgICAgIGNvbXBvbmVudE5hbWU6IFwnXCcsXG4gICAgICBpc1JlZnJlc2g6IHRydWUsXG4gICAgICBmaXhlZERpc2FibGVkOiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBnZXRVcGxvYWRVcmwgKCkge1xuICAgICAgcmV0dXJuIEFjdGlvbnMudXBsb2FkUGljdHVyZSgpXG4gICAgfVxuICB9LFxuICBtb3VudGVkICgpIHtcbiAgICB0aGlzLmdldEVkaXRJbmZvKClcbiAgICB0aGlzLmdldENoYW5uZWxUeXBlKClcbiAgICB0aGlzLmdldFBhcmVudENoYW5uZWwoKVxuICB9LFxuICBiZWZvcmVSb3V0ZUxlYXZlICh0bywgZnJvbSwgbmV4dCkge1xuICAgIGlmICh0by5wYXRoID09PSBcJy9zdWJDaGFubmVsL2xpc3RcJykge1xuICAgICAgdG8ubWV0YS5yZWZyZXNoID0gdGhpcy5pc1JlZnJlc2hcbiAgICB9IGVsc2UgaWYgKHRvLnBhdGggPT09IFwnL3N1YkNoYW5uZWwvY3JlYXRlXCcpIHtcbiAgICAgIHRoaXMuJHJvb3QuZXZlbnRIdWIuJGVtaXQoXCdyZXNldC1vcHRpb25zXCcpXG4gICAgfVxuICAgIG5leHQoKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZ290b0xpc3QgKCkge1xuICAgICAgdGhpcy5pc1JlZnJlc2ggPSBmYWxzZVxuICAgICAgdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6IFwnL3N1YkNoYW5uZWwvbGlzdFwnfSlcbiAgICB9LFxuICAgIGdldEVkaXRJbmZvICgpIHtcbiAgICAgIHRoaXMuY2hhbm5lbGlkID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcJ2NoYW5uZWxpZFwnKVxuICAgICAgQWN0aW9ucy5nZXRDaGFubmVsQnlJRCh7XG4gICAgICAgIFwnY2hhbm5lbFwnOiB7XG4gICAgICAgICAgXCdjaGFubmVsaWRcJzogdGhpcy5jaGFubmVsaWRcbiAgICAgICAgfVxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMuZWRpdEZyb20uY2hhbm5lbF9uYW1lID0gZGF0YS5jaGFubmVsX25hbWVcbiAgICAgICAgICB0aGlzLmVkaXRGcm9tLnBhcmVudF9jaGFubmVsX25hbWUgPSBkYXRhLnBhcmVudF9jaGFubmVsX25hbWVcbiAgICAgICAgICB0aGlzLmVkaXRGcm9tLnNvcnQgPSBkYXRhLnNvcnRcbiAgICAgICAgICB0aGlzLmVkaXRGcm9tLmljb25fdXJsID0gZGF0YS5pY29uX3VybFxuICAgICAgICAgIHRoaXMuZWRpdEZyb20uY2hhbm5lbF90eXBlX25hbWUgPSBkYXRhLmNoYW5uZWxfdHlwZV9uYW1lXG4gICAgICAgICAgdGhpcy5lZGl0RnJvbS5zdGF0ZSA9IGRhdGEuc3RhdGVcbiAgICAgICAgICB0aGlzLmVkaXRGcm9tLmRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvblxuICAgICAgICAgIHRoaXMuZWRpdEZyb20uZml4ZWQgPSBkYXRhLmZpeGVkXG4gICAgICAgICAgdGhpcy5lZGl0RnJvbS5jaGFubmVsX3R5cGVpZCA9IGRhdGEuY2hhbm5lbF90eXBlaWRcbiAgICAgICAgICB0aGlzLmVkaXRGcm9tLnBhcmVudF9jaGFubmVsaWQgPSBkYXRhLnBhcmVudF9jaGFubmVsaWRcbiAgICAgICAgICBpZiAoZGF0YS5jb3VudENoaWxkcmVuID4gMCkge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlZENob29zZVBhcmVudENoYW5uZWwgPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZGlzYWJsZUlzRml4ZWQoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgc3VibWl0Rm9ybSAoZm9ybU5hbWUpIHtcbiAgICAgIHRoaXMuJHJlZnNbZm9ybU5hbWVdLnZhbGlkYXRlKCh2YWxpZCkgPT4ge1xuICAgICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgICB0aGlzLmNoYW5uZWxUeXBlTGlzdC5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXRlbS52YWx1ZSA9PT0gdGhpcy5lZGl0RnJvbS5jaGFubmVsX3R5cGVpZCkge1xuICAgICAgICAgICAgICB0aGlzLmVkaXRGcm9tLmNoYW5uZWxfdHlwZV9uYW1lID0gaXRlbS5sYWJlbFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgdGhpcy5wYXJlbnRDaGFubmVsTGlzdC5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXRlbS52YWx1ZSA9PT0gdGhpcy5lZGl0RnJvbS5wYXJlbnRfY2hhbm5lbGlkKSB7XG4gICAgICAgICAgICAgIHRoaXMuZWRpdEZyb20ucGFyZW50X2NoYW5uZWxfbmFtZSA9IGl0ZW0ubGFiZWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIEFjdGlvbnMuZWRpdENoYW5uZWwoe1xuICAgICAgICAgICAgXCdjaGFubmVsXCc6IHtcbiAgICAgICAgICAgICAgXCdwYXJlbnRfY2hhbm5lbGlkXCc6IHRoaXMuZWRpdEZyb20ucGFyZW50X2NoYW5uZWxpZCxcbiAgICAgICAgICAgICAgXCdwYXJlbnRfY2hhbm5lbF9uYW1lXCc6IHRoaXMuZWRpdEZyb20ucGFyZW50X2NoYW5uZWxfbmFtZSxcbiAgICAgICAgICAgICAgXCdjaGFubmVsaWRcJzogdGhpcy5jaGFubmVsaWQsXG4gICAgICAgICAgICAgIFwnY2hhbm5lbF9uYW1lXCc6IHRoaXMuZWRpdEZyb20uY2hhbm5lbF9uYW1lLFxuICAgICAgICAgICAgICBcJ2NoYW5uZWxfdHlwZWlkXCc6IHRoaXMuZWRpdEZyb20uY2hhbm5lbF90eXBlaWQsXG4gICAgICAgICAgICAgIFwnY2hhbm5lbF90eXBlX25hbWVcJzogdGhpcy5lZGl0RnJvbS5jaGFubmVsX3R5cGVfbmFtZSxcbiAgICAgICAgICAgICAgXCdpY29uX3VybFwnOiB0aGlzLmVkaXRGcm9tLmljb25fdXJsLFxuICAgICAgICAgICAgICBcJ3N0YXRlXCc6IHRoaXMuZWRpdEZyb20uc3RhdGUsXG4gICAgICAgICAgICAgIFwnZGVzY3JpcHRpb25cJzogdGhpcy5lZGl0RnJvbS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgXCdmaXhlZFwnOiB0aGlzLmVkaXRGcm9tLmZpeGVkLFxuICAgICAgICAgICAgICBcJ3NvcnRcJzogdGhpcy5lZGl0RnJvbS5zb3J0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHtwYXRoOiBcJy9zdWJDaGFubmVsL2xpc3RcJ30pXG4gICAgICAgICAgICAgIHRoaXMuJG5vdGlmeSh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwn6YCa55+lXCcsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCfnvJbovpHmiJDlip9cJyxcbiAgICAgICAgICAgICAgICB0eXBlOiBcJ3N1Y2Nlc3NcJ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCdlcnJvciBzdWJtaXQhIVwnKVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgaGFuZGxlUGNBdmF0YXJTdWNjZXNzIChyZXMsIGZpbGUpIHtcbiAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgIGxldCBpbWFnZVVybCA9IHJlcy5yZXN1bHRcbiAgICAgICAgdGhpcy5lZGl0RnJvbS5pY29uX3VybCA9IGltYWdlVXJsXG4gICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVBdmF0YXJVcGxvYWQgKGZpbGUpIHtcbiAgICAgIGxldCBpbWFnZU9iaiA9IHtcbiAgICAgICAgXCdpbWFnZS9qcGVnXCc6IHRydWUsXG4gICAgICAgIFwnaW1hZ2UvcG5nXCc6IHRydWUsXG4gICAgICAgIFwnaW1hZ2UvanBnXCc6IHRydWVcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlzSW1hZ2UgPSBmaWxlLnR5cGUgaW4gaW1hZ2VPYmpcbiAgICAgIGNvbnN0IGlzTHQyTSA9IGZpbGUuc2l6ZSAvIDEwMjQgLyAxMDI0IDwgMlxuICAgICAgaWYgKCFpc0ltYWdlKSB7XG4gICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoXCfor7fkuIrkvKDlm77niYfmoLzlvI/nmoTmlofku7YhXCcpXG4gICAgICB9XG4gICAgICBpZiAoIWlzTHQyTSkge1xuICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKFwn5LiK5Lyg5Zu+54mH5aSn5bCP5LiN6IO96LaF6L+HIDJNQiFcJylcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0ltYWdlICYmIGlzTHQyTVxuICAgIH0sXG4gICAgLyoqIOiOt+WPlumikemBk+exu+WIqyAqKi9cbiAgICBnZXRDaGFubmVsVHlwZSAoKSB7XG4gICAgICBBY3Rpb25zLmdldENoYW5uZWxUeXBlKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGFcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAvKiog6buY6K6k6YCJ5oup5LiA5Liq57G75Z6LICoqL1xuICAgICAgICAgICAgICB0aGlzLmVkaXRGcm9tLmNoYW5uZWxfdHlwZWlkID0gaXRlbS5jaGFubmVsX3R5cGVpZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG5ld0l0ZW0gPSB7fVxuICAgICAgICAgICAgbmV3SXRlbS5sYWJlbCA9IGl0ZW0uY2hhbm5lbF90eXBlX25hbWVcbiAgICAgICAgICAgIG5ld0l0ZW0udmFsdWUgPSBpdGVtLmNoYW5uZWxfdHlwZWlkXG4gICAgICAgICAgICB0aGlzLmNoYW5uZWxUeXBlTGlzdC5wdXNoKG5ld0l0ZW0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDojrflj5bniLbpopHpgZMgKiovXG4gICAgZ2V0UGFyZW50Q2hhbm5lbCAoKSB7XG4gICAgICBBY3Rpb25zLmxpc3RVc2FibGVQYXJlbnRDaGFubmVsKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGFcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoYW5uZWxpZCAhPT0gaXRlbS5jaGFubmVsaWQpIHtcbiAgICAgICAgICAgICAgbGV0IG5ld0l0ZW0gPSB7fVxuICAgICAgICAgICAgICBuZXdJdGVtLmxhYmVsID0gaXRlbS5jaGFubmVsX25hbWVcbiAgICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uY2hhbm5lbGlkXG4gICAgICAgICAgICAgIHRoaXMucGFyZW50Q2hhbm5lbExpc3QucHVzaChuZXdJdGVtKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKiog6YCJ5Y+W5Zu+5qCHICoqL1xuICAgIGNob29zZUljb24gKCkge1xuICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gdHJ1ZVxuICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gXCdDaG9vc2VJY29uXCdcbiAgICB9LFxuICAgIGNsb3NlRGlhbG9nICgpIHtcbiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IGZhbHNlXG4gICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBcJ1wnXG4gICAgfSxcbiAgICAvKiog56Gu5a6a5Zu+5qCHICoqL1xuICAgIHN1Ym1pdEljb24gKGljb25VcmwpIHtcbiAgICAgIHRoaXMuZWRpdEZyb20uaWNvbl91cmwgPSBpY29uVXJsXG4gICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSBmYWxzZVxuICAgICAgdGhpcy5jb21wb25lbnROYW1lID0gXCdcJ1xuICAgIH0sXG4gICAgLyoqIOemgeeUqOaYr+WQpuWbuuWumuaMiemSriwg5bm26K6p5YW26buY6K6k5Li65ZCmICoqL1xuICAgIGRpc2FibGVJc0ZpeGVkICgpIHtcbiAgICAgIGlmICh0aGlzLmVkaXRGcm9tLnBhcmVudF9jaGFubmVsaWQpIHtcbiAgICAgICAgdGhpcy5lZGl0RnJvbS5maXhlZCA9IGZhbHNlXG4gICAgICAgIHRoaXMuZml4ZWREaXNhYmxlZCA9IHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZml4ZWREaXNhYmxlZCA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICB9XG59XG48XC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuICAuY2ljbGUtY29udHJvbGxlciB7XG4gICAgbWFyZ2luLXRvcDogNCU7XG4gIH1cbiAgLmNyZWF0ZSAuc29ydCBzcGFue1xuICAgIGNvbG9yOiAjOTA5MDkwO1xuICB9XG48L3N0eWxlPlxuJ10sc291cmNlUm9vdDoiIn1dKX0sInovK2QiOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4jYXBwIHtcbiAgZm9udC1mYW1pbHk6ICdNaWNyb3NvZnRZYUhlaScsJ0F2ZW5pcicsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5hIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvc3JjL0FwcC52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBcURBO0VBQ0EscUVBQUE7RUFDQSxvQ0FBQTtFQUNBLG1DQUFBO0VBQ0EsYUFBQTtFQUNBLGlCQUFBO0NBQ0E7QUFFQTtFQUNBLHNCQUFBO0NBQ0EiLGZpbGU6IkFwcC52dWUiLHNvdXJjZXNDb250ZW50OlsiPHRlbXBsYXRlPlxuICA8ZGl2IGlkPVwiYXBwXCI+XG4gICAgPGxheW91dCAvPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgTGF5b3V0IGZyb20gJ0Avdmlld3MvbGF5b3V0J1xuaW1wb3J0IHsgZ2V0UGFyYW0gfSBmcm9tICcuL2hlbHBlcnMnXG5pbXBvcnQgeyBnZXRMb2dVc2VySW5mbyB9IGZyb20gJy4vYXBpL2NvbW1vbkFwaSdcbmltcG9ydCB7IHNldEF4aW9zSGVhZGVycyB9IGZyb20gJy4vYXBpJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnQXBwJyxcbiAgY29tcG9uZW50czoge1xuICAgIExheW91dFxuICB9LFxuXG4gIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuZ2V0VXJsVG9rZW4oKVxuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBnZXRVcmxUb2tlbiAoKSB7XG4gICAgICBsZXQgY2FjaGVUb2tlbiA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJylcbiAgICAgIGlmIChjYWNoZVRva2VuKSByZXR1cm4gLy8g5LyY5YWI5L2/55So57yT5a2Y5LitdG9rZW5cbiAgICAgIGxldCBjdXJQYXRoID0gd2luZG93LmxvY2F0aW9uLmhyZWZcbiAgICAgIGxldCB0b2tlbiA9IGdldFBhcmFtKCd0b2tlbicsIGN1clBhdGgpXG4gICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2UuY2xlYXIoKVxuICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCd0b2tlbicsIHRva2VuKVxuICAgICAgICBzZXRBeGlvc0hlYWRlcnMoe3Rva2VufSlcbiAgICAgICAgdGhpcy5nZXRVc2VySW5mbygpXG4gICAgICB9XG4gICAgfSxcbiAgICBnZXRVc2VySW5mbyAoKSB7XG4gICAgICBnZXRMb2dVc2VySW5mbygpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgbGV0IGRhdGEgPSByZXMuZGF0YSA/IHJlcy5kYXRhLnJlc3VsdCA6IHt9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBkYXRhW2tleV1cbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWwpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuJHJvb3QuZXZlbnRIdWIuJGVtaXQoJ3BhcmFtcy1yZWFkeScpXG4gICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycilcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG48XC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiNhcHAge1xuICBmb250LWZhbWlseTogJ01pY3Jvc29mdFlhSGVpJywnQXZlbmlyJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG4gIGhlaWdodDogMTAwJTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuYSB7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cbjwvc3R5bGU+XG4iXSxzb3VyY2VSb290OiIifV0pfSx6MktPOmZ1bmN0aW9uKGUsbil7fSx6SmRxOmZ1bmN0aW9uKGUsbix0KXsoZS5leHBvcnRzPXQoIkZaK2YiKSghMCkpLnB1c2goW2UuaSwiXG4uZWwtZGlhbG9nX19oZWFkZXJ7XG4gIHBhZGRpbmc6IDEzcHggMzBweCAxM3B4O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI0MwQkVGRjtcbiAgYmFja2dyb3VuZC1jb2xvcjogI0Y3RkFGRjtcbn1cbi5lbC1kaWFsb2dfX3RpdGxlIHtcbiAgbGluZS1oZWlnaHQ6IDE3cHg7XG4gIGZvbnQtc2l6ZTogMTdweDtcbiAgY29sb3I6ICMzMDMxMzM7XG59XG4uZWwtZGlhbG9nX19oZWFkZXJidG4ge1xuICB0b3A6IDEzcHg7XG59XG4uZWwtZGlhbG9nX19ib2R5IHtcbiAgcGFkZGluZzogMjBweCA2MHB4O1xufVxuLmFkZFVybCAuZWwtZm9ybS1pdGVtIHtcbiAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbn1cbi5hZGRVcmwgLmVsLWZvcm0ge1xuICBtYXJnaW4tdG9wOiAxNXB4O1xufVxuLmFkZFVybCAuZWwtZGF0ZS1lZGl0b3J7XG4gIHdpZHRoOiA4NSU7XG59XG4uYWRkVXJsIC5lbC1mb3JtLWl0ZW0ge1xuICB3aWR0aDogMzAlO1xuICBtYXJnaW4tcmlnaHQ6IDMlO1xufVxuLmFkZFVybCAuZGF0ZSB7XG4gIGxlZnQ6IDBweDtcbiAgd2lkdGg6IDYwJTtcbn1cbi5hZGRVcmwgLmVsLXJhbmdlLWVkaXRvciAuZWwtcmFuZ2UtaW5wdXR7XG4gIHdpZHRoOjUwJTtcbn1cbi5hZGRVcmwgLmJ0bi1jb250YWluZXIgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gIHdpZHRoOiAxMDAlO1xufVxuIiwiIix7dmVyc2lvbjozLHNvdXJjZXM6WyIvZG9ja2VyZGF0YS9qZW5raW5zLy5qZW5raW5zL3dvcmtzcGFjZS9BcHBfTWFuYWdlX1N2X1dlYi9zcmMvY29tcG9uZW50cy9tYW5hZ2VTbGlkZS9zcmMvY29tcG9uZW50cy9tYW5hZ2VTbGlkZS9hZGRUb3BpYy52dWUiXSxuYW1lczpbXSxtYXBwaW5nczoiO0FBMlFBO0VBQ0Esd0JBQUE7RUFDQSxpQ0FBQTtFQUNBLDBCQUFBO0NBQ0E7QUFDQTtFQUNBLGtCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxlQUFBO0NBQ0E7QUFDQTtFQUNBLFVBQUE7Q0FDQTtBQUNBO0VBQ0EsbUJBQUE7Q0FDQTtBQUNBO0VBQ0EsaUJBQUE7RUFDQSxvQkFBQTtDQUNBO0FBQ0E7RUFDQSxpQkFBQTtDQUNBO0FBQ0E7RUFDQSxXQUFBO0NBQ0E7QUFDQTtFQUNBLFdBQUE7RUFDQSxpQkFBQTtDQUNBO0FBQ0E7RUFDQSxVQUFBO0VBQ0EsV0FBQTtDQUNBO0FBQ0E7RUFDQSxVQUFBO0NBQ0E7QUFDQTtFQUNBLFlBQUE7Q0FDQSIsZmlsZToiYWRkVG9waWMudnVlIixzb3VyY2VzQ29udGVudDpbJzx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0iYWRkVXJsIj5cbiAgICA8ZWwtZm9ybVxuICAgICAgOmlubGluZT0idHJ1ZSJcbiAgICAgIDptb2RlbD0idG9waWNGb3JtIlxuICAgICAgc2l6ZT0ic21hbGwiXG4gICAgICBjbGFzcz0iZGVtby1mb3JtLWlubGluZSI+XG4gICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLkuJPpopjmoIfpopgiPlxuICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICB2LW1vZGVsPSJ0b3BpY0Zvcm0uc3BlY2lhbF9uYW1lIlxuICAgICAgICAgIGNsZWFyYWJsZS8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuW9kuWxnumikemBkyI+XG4gICAgICAgIDxlbC1zZWxlY3RcbiAgICAgICAgICB2LW1vZGVsPSJ0b3BpY0Zvcm0uY2hhbm5lbGlkIlxuICAgICAgICAgIGZpbHRlcmFibGVcbiAgICAgICAgICBjbGVhcmFibGVcbiAgICAgICAgICBwbGFjZWhvbGRlcj0iIlxuICAgICAgICAgIEBjbGVhcj0ic2VhcmNoU3BlY2lhbCJcbiAgICAgICAgICBAY2hhbmdlPSJzZWFyY2hTcGVjaWFsIj5cbiAgICAgICAgICA8ZWwtb3B0aW9uXG4gICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBsaXN0VXNhYmxlQ2hhbm5lbCJcbiAgICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgICAgOnZhbHVlPSJpdGVtLnZhbHVlIlxuICAgICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIi8+XG4gICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtXG4gICAgICAgIGxhYmVsPSLlvIDlp4vml7bpl7QiXG4gICAgICAgIGNsYXNzPSJkYXRlLWxlZnQiPlxuICAgICAgICA8ZWwtZGF0ZS1waWNrZXJcbiAgICAgICAgICA6dGl0bGU9InRvcGljRm9ybS5zdGFydERhdGUgfCBGb3JtYXREYXRlKFwneXl5eS1NTS1kZCBoaDptbVwnKSJcbiAgICAgICAgICB2LW1vZGVsPSJ0b3BpY0Zvcm0uc3RhcnREYXRlIlxuICAgICAgICAgIHR5cGU9ImRhdGV0aW1lIlxuICAgICAgICAgIGZvcm1hdD0ieXl5eS1NTS1kZCBISDptbSJcbiAgICAgICAgICBwbGFjZWhvbGRlcj0i6YCJ5oup5pel5pyfIlxuICAgICAgICAgIEBjaGFuZ2U9InNlYXJjaFNwZWNpYWwiLz5cbiAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPGVsLWZvcm0taXRlbVxuICAgICAgICBsYWJlbD0i57uT5p2f5pe26Ze0IlxuICAgICAgICBjbGFzcz0iZGF0ZS1sZWZ0Ij5cbiAgICAgICAgPGVsLWRhdGUtcGlja2VyXG4gICAgICAgICAgOnRpdGxlPSJ0b3BpY0Zvcm0uc3RhcnREYXRlIHwgRm9ybWF0RGF0ZShcJ3l5eXktTU0tZGQgaGg6bW1cJykiXG4gICAgICAgICAgdi1tb2RlbD0idG9waWNGb3JtLmVuZERhdGUiXG4gICAgICAgICAgZm9ybWF0PSJ5eXl5LU1NLWRkIEhIOm1tIlxuICAgICAgICAgIHR5cGU9ImRhdGV0aW1lIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPSLpgInmi6nml6XmnJ8iXG4gICAgICAgICAgQGNoYW5nZT0ic2VhcmNoU3BlY2lhbCIvPlxuICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8ZWwtZm9ybS1pdGVtIGNsYXNzPSJidG4tY29udGFpbmVyIj5cbiAgICAgICAgPGVsLWJ1dHRvblxuICAgICAgICAgIHR5cGU9InByaW1hcnkiXG4gICAgICAgICAgQGNsaWNrPSJzZWFyY2hTcGVjaWFsIj5cbiAgICAgICAgICDmn6Xor6JcbiAgICAgICAgICA8aSBjbGFzcz0iZWwtaWNvbi1zZWFyY2ggZWwtaWNvbi0tcmlnaHQiLz5cbiAgICAgICAgPC9lbC1idXR0b24+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICA8L2VsLWZvcm0+XG4gICAgPGRpdiBjbGFzcz0idGFibGUtbGlzdCI+XG4gICAgICA8ZWwtdGFibGVcbiAgICAgICAgcmVmPSJjaGFubmVsVGFibGUiXG4gICAgICAgIDpkYXRhPSJ0YWJsZURhdGEiXG4gICAgICAgIHN0cmlwZVxuICAgICAgICBjbGFzcz0id2hvbGUtdGFibGUiXG4gICAgICAgIG1pbi1oZWlnaHQ9IjQwMCJcbiAgICAgICAgc2l6ZT0ic21hbGwiXG4gICAgICAgIEBzZWxlY3Q9InNlbGVjdCJcbiAgICAgICAgQHNlbGVjdC1hbGw9InNlbGVjdEFsbCI+XG4gICAgICAgIDxlbC10YWJsZS1jb2x1bW5cbiAgICAgICAgICB0eXBlPSJzZWxlY3Rpb24iXG4gICAgICAgICAgYWxpZ249ImNlbnRlciJcbiAgICAgICAgICB3aWR0aD0iNTUiLz5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIHRhYmxlSGVhZGVyIlxuICAgICAgICAgIDprZXk9ImluZGV4IlxuICAgICAgICAgIDpwcm9wPSJpdGVtLnByb3AiXG4gICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIlxuICAgICAgICAgIDp3aWR0aD0iaXRlbS53aWR0aCJcbiAgICAgICAgICA6Zm9ybWF0dGVyPSJpdGVtLmZvcm1hdHRlciJcbiAgICAgICAgICBhbGlnbj0iY2VudGVyIlxuICAgICAgICAgIGZpeGVkXG4gICAgICAgICAgc2hvdy1vdmVyZmxvdy10b29sdGlwXG4gICAgICAgIC8+XG4gICAgICA8L2VsLXRhYmxlPlxuICAgICAgPGRpdiBjbGFzcz0icGFnaW5hdGlvbiI+XG4gICAgICAgIDxlbC1idXR0b25cbiAgICAgICAgICB0eXBlPSJwcmltYXJ5IlxuICAgICAgICAgIHNpemU9InNtYWxsIlxuICAgICAgICAgIEBjbGljaz0ibm90aWZ5UGFyZW50U2VsZWN0ZWRSb3ciPuehruWumjwvZWwtYnV0dG9uPlxuICAgICAgICA8ZWwtcGFnaW5hdGlvblxuICAgICAgICAgIDp0b3RhbD0idG90YWwiXG4gICAgICAgICAgOnBhZ2Utc2l6ZXM9IlsxMCwgMjAsIDMwLCA0MF0iXG4gICAgICAgICAgYmFja2dyb3VuZFxuICAgICAgICAgIGxheW91dD0idG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dCJcbiAgICAgICAgICBAc2l6ZS1jaGFuZ2U9ImhhbmRsZVNpemVDaGFuZ2UiXG4gICAgICAgICAgQGN1cnJlbnQtY2hhbmdlPSJoYW5kbGVDdXJyZW50Q2hhbmdlIi8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL3RvcGljQXBpXCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogXCdBZGRUb3BpY1wnLFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9waWNGb3JtOiB7XG4gICAgICAgIGNoYW5uZWxpZDogXCdcJyxcbiAgICAgICAgY2hhbm5lbF9uYW1lOiBcJ1wnLFxuICAgICAgICBzcGVjaWFsX25hbWU6IFwnXCcsXG4gICAgICAgIGRhdGVyYW5nZTogW10sXG4gICAgICAgIHN0YXJ0RGF0ZTogXCdcJyxcbiAgICAgICAgZW5kRGF0ZTogXCdcJ1xuICAgICAgfSxcbiAgICAgIHRhYmxlSGVhZGVyOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3NwZWNpYWxfbmFtZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+S4k+mimOagh+mimFwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ3VwZGF0ZXRpbWVcJyxcbiAgICAgICAgICBsYWJlbDogXCfmm7TmlrDml6XmnJ9cJyxcbiAgICAgICAgICBmb3JtYXR0ZXI6IChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10oY2VsbFZhbHVlLCBcJ3l5eXktTU0tZGQgaGg6bW1cJylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2NoYW5uZWxfbmFtZVwnLFxuICAgICAgICAgIGxhYmVsOiBcJ+W9kuWxnumikemBk1wnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wOiBcJ2V4cGlyeV9kYXRlX3N0YXJ0XCcsXG4gICAgICAgICAgbGFiZWw6IFwn5pyJ5pWI5pel5pyfXCcsXG4gICAgICAgICAgZm9ybWF0dGVyOiAocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGxldCBzdGFydERhdGUgPSB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdGb3JtYXREYXRlXCddKGNlbGxWYWx1ZSwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgICBsZXQgZW5kRGF0ZSA9IHRoaXMuJG9wdGlvbnMuZmlsdGVyc1tcJ0Zvcm1hdERhdGVcJ10ocm93LmV4cGlyeV9kYXRlX2VuZCwgXCd5eXl5LU1NLWRkIGhoOm1tXCcpXG4gICAgICAgICAgICByZXR1cm4gc3RhcnREYXRlICsgXCfoh7NcJyArIGVuZERhdGVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICB0YWJsZURhdGE6IFtdLFxuICAgICAgbGlzdFVzYWJsZUNoYW5uZWw6IFtdLFxuICAgICAgcGFnZU5vOiAxLFxuICAgICAgcGFnZVNpemU6IDEwLFxuICAgICAgdG90YWw6IDAsXG4gICAgICBzZWxlY3RSb3c6IFtdXG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIFwndG9waWNGb3JtLnNwZWNpYWxfbmFtZVwnICgpIHtcbiAgICAgIHRoaXMuc2VhcmNoU3BlY2lhbCgpXG4gICAgfVxuICB9LFxuICBtb3VudGVkICgpIHtcbiAgICAvKiog6I635Y+W5LiT6aKY5YiX6KGoICoqL1xuICAgIHRoaXMuZ2V0VG9waWNMaXN0KClcbiAgICAvKiog6I635Y+W5Y+v55So6aKR6YGT5YiX6KGoKiovXG4gICAgdGhpcy5nZXRMaXN0VXNhYmxlQ2hhbm5lbCgpXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvKiog6I635Y+W5LiT6aKY5YiX6KGoICoqL1xuICAgIGdldFRvcGljTGlzdCAoKSB7XG4gICAgICBBY3Rpb25zLmdldFRvcGljTGlzdCh7XG4gICAgICAgIFwncGFnZU5vXCc6IHRoaXMucGFnZU5vLFxuICAgICAgICBcJ3BhZ2VTaXplXCc6IHRoaXMucGFnZVNpemUsXG4gICAgICAgIFwnc3RhdGVcJzogMlxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XG4gICAgICAgICAgbGV0IGxpc3REYXRhID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgdGhpcy50YWJsZURhdGEgPSBsaXN0RGF0YS5saXN0XG4gICAgICAgICAgY29uc29sZS5sb2cobGlzdERhdGEpXG4gICAgICAgICAgdGhpcy50b3RhbCA9IGxpc3REYXRhLnRvdGFsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBnZXRMaXN0VXNhYmxlQ2hhbm5lbCAoKSB7XG4gICAgICBBY3Rpb25zLmdldExpc3RVc2FibGVDaGFubmVsKCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gcmVzLmRhdGEucmVzdWx0XG4gICAgICAgICAgcmVzdWx0LmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICAgIGxldCBuZXdJdGVtID0ge31cbiAgICAgICAgICAgIG5ld0l0ZW0ubGFiZWwgPSBpdGVtLmNoYW5uZWxfbmFtZVxuICAgICAgICAgICAgbmV3SXRlbS52YWx1ZSA9IGl0ZW0uY2hhbm5lbGlkXG4gICAgICAgICAgICB0aGlzLmxpc3RVc2FibGVDaGFubmVsLnB1c2gobmV3SXRlbSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgb25TdWJtaXQgKCkge1xuICAgICAgY29uc29sZS5sb2coXCdzdWJtaXQhXCcpXG4gICAgfSxcbiAgICBoYW5kbGVTaXplQ2hhbmdlIChwYWdlU2l6ZSkge1xuICAgICAgdGhpcy5wYWdlU2l6ZSA9IHBhZ2VTaXplXG4gICAgICB0aGlzLnNlYXJjaFNwZWNpYWwoKVxuICAgIH0sXG4gICAgaGFuZGxlQ3VycmVudENoYW5nZSAocGFnZUluZGV4KSB7XG4gICAgICB0aGlzLnBhZ2VObyA9IHBhZ2VJbmRleFxuICAgICAgdGhpcy5zZWFyY2hTcGVjaWFsKClcbiAgICB9LFxuICAgIHRvZ2dsZUFsbFNlbGVjdGlvbiAoZSkge1xuICAgICAgdGhpcy4kcmVmcy5jaGFubmVsVGFibGUudG9nZ2xlQWxsU2VsZWN0aW9uKClcbiAgICB9LFxuICAgIC8qKiDljZXpgIkgKiovXG4gICAgc2VsZWN0IChzZWxlY3Rpb24sIHJvdykge1xuICAgICAgdGhpcy5zZWxlY3RSb3cgPSByb3dcbiAgICAgIGlmIChzZWxlY3Rpb24ubGVuZ3RoID4gMSkge1xuICAgICAgICBzZWxlY3Rpb24uc2hpZnQoKVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIOWFqOmAiSAqKi9cbiAgICBzZWxlY3RBbGwgKHNlbGVjdGlvbikge1xuICAgICAgdGhpcy4kcmVmcy5hZGRNYW51LmNsZWFyU2VsZWN0aW9uKClcbiAgICAgIHRoaXMuc2VsZWN0Um93ID0ge31cbiAgICB9LFxuICAgIC8qKiDmkJzntKLkuJPpopggKiovXG4gICAgc2VhcmNoU3BlY2lhbCAoKSB7XG4gICAgICB0aGlzLiRvcHRpb25zLmZpbHRlcnNbXCdzd2FwVGltZVwnXSh0aGlzLnRvcGljRm9ybSlcbiAgICAgIGxldCB0aW1lU3RhcnQgPSB0aGlzLnRvcGljRm9ybS5zdGFydERhdGUgIT09IG51bGwgPyBuZXcgRGF0ZSh0aGlzLnRvcGljRm9ybS5zdGFydERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIGxldCB0aW1lRW5kID0gdGhpcy50b3BpY0Zvcm0uZW5kRGF0ZSAhPT0gbnVsbCA/IG5ldyBEYXRlKHRoaXMudG9waWNGb3JtLmVuZERhdGUpLmdldFRpbWUoKSA6IG51bGxcbiAgICAgIEFjdGlvbnMuZ2V0VG9waWNMaXN0KHtcbiAgICAgICAgXCdwYWdlTm9cJzogdGhpcy5wYWdlTm8sXG4gICAgICAgIFwncGFnZVNpemVcJzogdGhpcy5wYWdlU2l6ZSxcbiAgICAgICAgXCdjaGFubmVsaWRcJzogdGhpcy50b3BpY0Zvcm0uY2hhbm5lbGlkLFxuICAgICAgICBcJ3NwZWNpYWxfbmFtZVwnOiB0aGlzLnRvcGljRm9ybS5zcGVjaWFsX25hbWUsXG4gICAgICAgIFwnc3RhdGVcJzogMixcbiAgICAgICAgXCd0aW1lU3RhcnRcJzogdGltZVN0YXJ0LFxuICAgICAgICBcJ3RpbWVFbmRcJzogdGltZUVuZFxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgbGlzdERhdGEgPSByZXMuZGF0YS5yZXN1bHRcbiAgICAgICAgICB0aGlzLnRhYmxlRGF0YSA9IGxpc3REYXRhLmxpc3RcbiAgICAgICAgICB0aGlzLnRvdGFsID0gbGlzdERhdGEudG90YWxcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKiDpgJrnn6XniLbnu4Tku7bpgInmi6nkuobkuJPpopggKiovXG4gICAgLyoqIOmAmuefpeeItue7hOS7tumAieaLqeS6huWTquihjOS4k+mimCAqKi9cbiAgICBub3RpZnlQYXJlbnRTZWxlY3RlZFJvdyAoKSB7XG4gICAgICB0aGlzLiRlbWl0KFwnc2VsZWN0ZWQtcm93XCcsIHRoaXMuc2VsZWN0Um93KVxuICAgIH1cbiAgfVxuXG59XG48XC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuICAudGFibGUtbGlzdCB7XG4gICAgbWluLWhlaWdodDogNDAwcHg7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBwYWRkaW5nOiAwcHg7XG4gIH1cbiAgLndob2xlLXRhYmxlIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDIxOCwgMjIyLCAyMjMsIDEpO1xuICAgIG1pbi1oZWlnaHQ6IDI1dnc7XG4gIH1cbiAgLnBhZ2luYXRpb24ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gIH1cbiAgLmFkZFVybCAuYnRuLWNvbnRhaW5lciB7XG4gICAgd2lkdGg6IDIzJSAhaW1wb3J0YW50O1xuICAgIGxlZnQ6IDBweDtcbiAgfVxuXG48L3N0eWxlPlxuPHN0eWxlPlxuICAuZWwtZGlhbG9nX19oZWFkZXJ7XG4gICAgcGFkZGluZzogMTNweCAzMHB4IDEzcHg7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNDMEJFRkY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0Y3RkFGRjtcbiAgfVxuICAuZWwtZGlhbG9nX190aXRsZSB7XG4gICAgbGluZS1oZWlnaHQ6IDE3cHg7XG4gICAgZm9udC1zaXplOiAxN3B4O1xuICAgIGNvbG9yOiAjMzAzMTMzO1xuICB9XG4gIC5lbC1kaWFsb2dfX2hlYWRlcmJ0biB7XG4gICAgdG9wOiAxM3B4O1xuICB9XG4gIC5lbC1kaWFsb2dfX2JvZHkge1xuICAgIHBhZGRpbmc6IDIwcHggNjBweDtcbiAgfVxuICAuYWRkVXJsIC5lbC1mb3JtLWl0ZW0ge1xuICAgIG1hcmdpbi1sZWZ0OiAwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgfVxuICAuYWRkVXJsIC5lbC1mb3JtIHtcbiAgICBtYXJnaW4tdG9wOiAxNXB4O1xuICB9XG4gIC5hZGRVcmwgLmVsLWRhdGUtZWRpdG9ye1xuICAgIHdpZHRoOiA4NSU7XG4gIH1cbiAgLmFkZFVybCAuZWwtZm9ybS1pdGVtIHtcbiAgICB3aWR0aDogMzAlO1xuICAgIG1hcmdpbi1yaWdodDogMyU7XG4gIH1cbiAgLmFkZFVybCAuZGF0ZSB7XG4gICAgbGVmdDogMHB4O1xuICAgIHdpZHRoOiA2MCU7XG4gIH1cbiAgLmFkZFVybCAuZWwtcmFuZ2UtZWRpdG9yIC5lbC1yYW5nZS1pbnB1dHtcbiAgICB3aWR0aDo1MCU7XG4gIH1cbiAgLmFkZFVybCAuYnRuLWNvbnRhaW5lciAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9LHppSGI6ZnVuY3Rpb24oZSxuLHQpeyhlLmV4cG9ydHM9dCgiRlorZiIpKCEwKSkucHVzaChbZS5pLCJcbi50aXRsZS1jbGFzc1tkYXRhLXYtNDg4ZTY3NjNde1xuICBtYXJnaW4tbGVmdDogMjRweDtcbn1cbiIsIiIse3ZlcnNpb246Myxzb3VyY2VzOlsiL2RvY2tlcmRhdGEvamVua2lucy8uamVua2lucy93b3Jrc3BhY2UvQXBwX01hbmFnZV9Tdl9XZWIvc3JjL2NvbXBvbmVudHMvbWFuYWdlU3VibGl2ZS9zcmMvY29tcG9uZW50cy9tYW5hZ2VTdWJsaXZlL3NldHRpbmdNYW51LnZ1ZSJdLG5hbWVzOltdLG1hcHBpbmdzOiI7QUFnSUE7RUFDQSxrQkFBQTtDQUNBIixmaWxlOiJzZXR0aW5nTWFudS52dWUiLHNvdXJjZXNDb250ZW50OlsnPHRlbXBsYXRlPlxuICA8ZGl2PlxuICAgIDxkaXYgY2xhc3M9InRpdGxlLWNsYXNzIj5cbiAgICAgIDxzcGFuPueov+S7tuS4u+mimDpcbiAgICAgICAgPHNwYW4gdi1pZj0iIWlzU2hvd0lucHV0Ij5cbiAgICAgICAgICB7eyBzdWJtaXRNYW51VGl0bGUgfX1cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgc3R5bGU9ImNvbG9yOmJsdWU7Y3Vyc29yOiBwb2ludGVyIlxuICAgICAgICAgICAgQGNsaWNrPSJzaG93SW5wdXQiPuS/ruaUuTwvYT5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8c3BhbiB2LWlmPSJpc1Nob3dJbnB1dCI+XG4gICAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgICByZWY9Im1hbnVJbnB1dCJcbiAgICAgICAgICAgIHYtbW9kZWw9InN1Ym1pdE1hbnVUaXRsZSJcbiAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDo0MDBweCJcbiAgICAgICAgICAgIHR5cGU9InRleHQiXG4gICAgICAgICAgICBAYmx1cj0iaGlkZUlucHV0QW5kU3VibWl0Ii8+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1saXN0Ij5cbiAgICAgIDxlbC10YWJsZVxuICAgICAgICByZWY9ImNoYW5uZWxUYWJsZSJcbiAgICAgICAgOmRhdGE9InRhYmxlRGF0YSJcbiAgICAgICAgc3RyaXBlXG4gICAgICAgIGNsYXNzPSJ3aG9sZS10YWJsZSJcbiAgICAgICAgc2l6ZT0ibWluaSJcbiAgICAgICAgc3R5bGU9IndpZHRoOjQ1MHB4OyJcbiAgICAgICAgbWluLWhlaWdodD0iNDAwIj5cbiAgICAgICAgPGVsLXRhYmxlLWNvbHVtblxuICAgICAgICAgIHByb3A9ImNoYW5uZWxfbmFtZSJcbiAgICAgICAgICBsYWJlbD0i5b2S5bGe6aKR6YGTIlxuICAgICAgICAgIGFsaWduPSJsZWZ0IlxuICAgICAgICAgIHdpZHRoPSI0NDgiXG4gICAgICAgICAgZml4ZWQ+XG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj5cbiAgICAgICAgICAgIDxlbC1jaGVja2JveFxuICAgICAgICAgICAgICB2LW1vZGVsPSJzY29wZS5yb3cuaXNDaGVja2VkIlxuICAgICAgICAgICAgICBAY2hhbmdlPSJzZXRDaGFubmVsQnRuKHNjb3BlLnJvdykiPlxuICAgICAgICAgICAgICB7eyBzY29wZS5yb3cuY2hhbm5lbF9uYW1lIH19XG4gICAgICAgICAgICA8L2VsLWNoZWNrYm94PlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZWwtdGFibGUtY29sdW1uPlxuICAgICAgPC9lbC10YWJsZT5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcJ0AvYXBpL2RlbWFuZC1jaGFubmVsXCdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcHJvcHM6IHtcbiAgICB2aWRlb2lkOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBcJzBcJ1xuICAgIH0sXG4gICAgbWFudVRpdGxlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBcJ+aXoFwnXG4gICAgfVxuICB9LFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGFibGVEYXRhOiBbXSxcbiAgICAgIGNoYW5uZWxHcm91cDogW10sXG4gICAgICBpc1Nob3dJbnB1dDogZmFsc2UsXG4gICAgICBzdWJtaXRNYW51VGl0bGU6IHRoaXMubWFudVRpdGxlXG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuXG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuZ2V0U2V0dGluZ0NoYW5uZWwoKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZ2V0U2V0dGluZ0NoYW5uZWwgKCkge1xuICAgICAgQWN0aW9ucy5nZXRTZXR0aW5nQ2hhbm5lbCh7XG4gICAgICAgIFwndmlkZW9cJzoge1xuICAgICAgICAgIFwndmlkZW9pZFwnOiB0aGlzLnZpZGVvaWRcbiAgICAgICAgfVxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICBsZXQgZGF0YSA9IHJlcy5kYXRhLnJlc3VsdFxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gZGF0YVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqIOiuvue9ruaJgOWxnumikemBk+eahOmFjee9riAqKi9cbiAgICBzZXRDaGFubmVsQnRuIChyb3cpIHtcbiAgICAgIEFjdGlvbnMuc2V0U3ViTGl2ZUNoYW5uZWwoe1xuICAgICAgICBcJ3ZpZGVvaWRcJzogdGhpcy52aWRlb2lkLFxuICAgICAgICBcJ2NoYW5uZWxpZFwnOiByb3cuY2hhbm5lbGlkLFxuICAgICAgICBcJ3NhdmVPckRlbFwnOiByb3cuaXNDaGVja2VkXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgbWVzc2FnZTogXCfphY3nva7miJDlip8hXCdcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgc2hvd0lucHV0ICgpIHtcbiAgICAgIHRoaXMuaXNTaG93SW5wdXQgPSB0cnVlXG4gICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuJHJlZnMubWFudUlucHV0LmZvY3VzKClcbiAgICAgIH0pXG4gICAgfSxcbiAgICBoaWRlSW5wdXRBbmRTdWJtaXQgKCkge1xuICAgICAgdGhpcy5pc1Nob3dJbnB1dCA9IGZhbHNlXG4gICAgICBBY3Rpb25zLnVwZGF0YU1hbnVOYW1lKHtcbiAgICAgICAgXCd2aWRlb1wnOiB7XG4gICAgICAgICAgXCd2aWRlb2lkXCc6IHRoaXMudmlkZW9pZCxcbiAgICAgICAgICBcJ3RpdGxlXCc6IHRoaXMuc3VibWl0TWFudVRpdGxlXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMpIHtcbiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwnc3VjY2Vzc1wnLFxuICAgICAgICAgICAgbWVzc2FnZTogXCfkv67mlLnmiJDlip8hXCdcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuPFwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLnRpdGxlLWNsYXNze1xuICAgIG1hcmdpbi1sZWZ0OiAyNHB4O1xuICB9XG48L3N0eWxlPlxuPHN0eWxlPlxuPC9zdHlsZT5cbiddLHNvdXJjZVJvb3Q6IiJ9XSl9fSxbMF0pOwovLyMgc291cmNlTWFwcGluZ1VSTD1hcHAuOGNjNjYxZDg2Y2E2ZmQ1ZWI0YjYuanMubWFw</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="3124171" offset="0" length="14037" />
          <PacketInfo time="3124859" offset="14037" length="2920" />
          <PacketInfo time="3125968" offset="16957" length="1460" />
          <PacketInfo time="3126000" offset="18417" length="2920" />
          <PacketInfo time="3126031" offset="21337" length="1460" />
          <PacketInfo time="3126046" offset="22797" length="4380" />
          <PacketInfo time="3126140" offset="27177" length="16384" />
          <PacketInfo time="3126156" offset="43561" length="16384" />
          <PacketInfo time="3126171" offset="59945" length="16384" />
          <PacketInfo time="3126171" offset="76329" length="16384" />
          <PacketInfo time="3126171" offset="92713" length="11844" />
          <PacketInfo time="3126187" offset="104557" length="2920" />
          <PacketInfo time="3126203" offset="107477" length="16384" />
          <PacketInfo time="3126281" offset="123861" length="16384" />
          <PacketInfo time="3126281" offset="140245" length="16384" />
          <PacketInfo time="3126296" offset="156629" length="16384" />
          <PacketInfo time="3126296" offset="173013" length="16384" />
          <PacketInfo time="3126312" offset="189397" length="14440" />
          <PacketInfo time="3126328" offset="203837" length="16384" />
          <PacketInfo time="3126328" offset="220221" length="12816" />
          <PacketInfo time="3126421" offset="233037" length="16384" />
          <PacketInfo time="3126421" offset="249421" length="4056" />
          <PacketInfo time="3126437" offset="253477" length="1460" />
          <PacketInfo time="3126437" offset="254937" length="16384" />
          <PacketInfo time="3126453" offset="271321" length="9896" />
          <PacketInfo time="3126468" offset="281217" length="16384" />
          <PacketInfo time="3126468" offset="297601" length="9896" />
          <PacketInfo time="3126531" offset="307497" length="2920" />
          <PacketInfo time="3126531" offset="310417" length="13140" />
          <PacketInfo time="3126625" offset="323557" length="16384" />
          <PacketInfo time="3126625" offset="339941" length="16384" />
          <PacketInfo time="3126640" offset="356325" length="8112" />
          <PacketInfo time="3126687" offset="364437" length="1460" />
          <PacketInfo time="3126687" offset="365897" length="13140" />
          <PacketInfo time="3126718" offset="379037" length="1460" />
          <PacketInfo time="3126718" offset="380497" length="16060" />
          <PacketInfo time="3126796" offset="396557" length="16384" />
          <PacketInfo time="3126812" offset="412941" length="8436" />
          <PacketInfo time="3126812" offset="421377" length="11680" />
          <PacketInfo time="3126843" offset="433057" length="2920" />
          <PacketInfo time="3126843" offset="435977" length="8760" />
          <PacketInfo time="3126875" offset="444737" length="14600" />
          <PacketInfo time="3126953" offset="459337" length="13140" />
          <PacketInfo time="3126968" offset="472477" length="16384" />
          <PacketInfo time="3126984" offset="488861" length="5516" />
          <PacketInfo time="3127000" offset="494377" length="2920" />
          <PacketInfo time="3127015" offset="497297" length="7300" />
          <PacketInfo time="3127062" offset="504597" length="16060" />
          <PacketInfo time="3127156" offset="520657" length="13140" />
          <PacketInfo time="3127156" offset="533797" length="8760" />
          <PacketInfo time="3127187" offset="542557" length="1460" />
          <PacketInfo time="3127203" offset="544017" length="7300" />
          <PacketInfo time="3127218" offset="551317" length="8760" />
          <PacketInfo time="3127250" offset="560077" length="1460" />
          <PacketInfo time="3127265" offset="561537" length="10220" />
          <PacketInfo time="3127359" offset="571757" length="16384" />
          <PacketInfo time="3127375" offset="588141" length="16384" />
          <PacketInfo time="3127375" offset="604525" length="2272" />
          <PacketInfo time="3127375" offset="606797" length="1460" />
          <PacketInfo time="3127390" offset="608257" length="13140" />
          <PacketInfo time="3127406" offset="621397" length="1460" />
          <PacketInfo time="3127421" offset="622857" length="13140" />
          <PacketInfo time="3127437" offset="635997" length="1460" />
          <PacketInfo time="3127453" offset="637457" length="10220" />
          <PacketInfo time="3127546" offset="647677" length="16384" />
          <PacketInfo time="3127562" offset="664061" length="15736" />
          <PacketInfo time="3127562" offset="679797" length="1460" />
          <PacketInfo time="3127578" offset="681257" length="10220" />
          <PacketInfo time="3127609" offset="691477" length="1460" />
          <PacketInfo time="3127703" offset="692937" length="16384" />
          <PacketInfo time="3127703" offset="709321" length="16384" />
          <PacketInfo time="3127703" offset="725705" length="15412" />
          <PacketInfo time="3127781" offset="741117" length="16384" />
          <PacketInfo time="3127781" offset="757501" length="12816" />
          <PacketInfo time="3127796" offset="770317" length="11680" />
          <PacketInfo time="3127796" offset="781997" length="2920" />
          <PacketInfo time="3127828" offset="784917" length="1460" />
          <PacketInfo time="3127828" offset="786377" length="16060" />
          <PacketInfo time="3127859" offset="802437" length="2920" />
          <PacketInfo time="3127859" offset="805357" length="14600" />
          <PacketInfo time="3127890" offset="819957" length="10220" />
          <PacketInfo time="3127890" offset="830177" length="7300" />
          <PacketInfo time="3127921" offset="837477" length="1460" />
          <PacketInfo time="3127921" offset="838937" length="16060" />
          <PacketInfo time="3128031" offset="854997" length="16384" />
          <PacketInfo time="3128031" offset="871381" length="16384" />
          <PacketInfo time="3128046" offset="887765" length="16384" />
          <PacketInfo time="3128046" offset="904149" length="12168" />
          <PacketInfo time="3128046" offset="916317" length="5840" />
          <PacketInfo time="3128046" offset="922157" length="14600" />
          <PacketInfo time="3128078" offset="936757" length="2920" />
          <PacketInfo time="3128078" offset="939677" length="16384" />
          <PacketInfo time="3128093" offset="956061" length="4056" />
          <PacketInfo time="3128109" offset="960117" length="1460" />
          <PacketInfo time="3128109" offset="961577" length="16384" />
          <PacketInfo time="3128125" offset="977961" length="5516" />
          <PacketInfo time="3128140" offset="983477" length="2920" />
          <PacketInfo time="3128140" offset="986397" length="16384" />
          <PacketInfo time="3128234" offset="1002781" length="16384" />
          <PacketInfo time="3128234" offset="1019165" length="16384" />
          <PacketInfo time="3128250" offset="1035549" length="16384" />
          <PacketInfo time="3128250" offset="1051933" length="16384" />
          <PacketInfo time="3128250" offset="1068317" length="14440" />
          <PacketInfo time="3128265" offset="1082757" length="2920" />
          <PacketInfo time="3128281" offset="1085677" length="4016" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="10224" hostname="at.alicdn.com" path="/t/font_958271_3xseezklziv.css" url="http://at.alicdn.com/t/font_958271_3xseezklziv.css" ip="157.255.28.238" port="80" connectionId="82" origin="HTML" frame="1" startTime="3124015" endTime="3124187">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXQuYWxpY2RuLmNvbQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9jc3MsKi8qO3E9MC4x</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovL2d0eC1hZG1pbi50LmRhY3ViZS5jbi8=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC90L2ZvbnRfOTU4MjcxXzN4c2Vlemtseml2LmNzcyBIVFRQLzEuMQ0KSG9zdDogYXQuYWxpY2RuLmNvbQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2MjcNCkFjY2VwdDogdGV4dC9jc3MsKi8qO3E9MC4xDQpSZWZlcmVyOiBodHRwOi8vZ3R4LWFkbWluLnQuZGFjdWJlLmNuLw0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQtTGFuZ3VhZ2U6IHpoLUNOLHpoO3E9MC44DQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Server" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VGVuZ2luZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9jc3M=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Transfer-Encoding" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2h1bmtlZA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAxMCBBcHIgMjAxOSAwOToyMzo0NSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-oss-request-id" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NUNBREI2MjE1MTdFRDBBRjM2QkVEMjhD</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAyNSBKYW4gMjAxOSAwODo0NTowMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-oss-object-type" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Tm9ybWFs</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-oss-hash-crc64ecma" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>OTQ1ODE0MTk5MzIwNTY5MzI4MQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-oss-storage-class" index="10">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U3RhbmRhcmQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Access-Control-Allow-Origin" index="11">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="12">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bWF4LWFnZT02MzA3MjAwMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-MD5" index="13">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>UmxCbWQreTdmVWd1bmJvaklyOUc2Zz09</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="x-oss-server-time" index="14">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="15">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Ali-Swift-Global-Savetime" index="16">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTU1NDg4ODIyNQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Via" index="17">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2FjaGUxLmwyY24xMjZbNDMsMjAwLTAsTV0sIGNhY2hlNDYubDJjbjEyNls0NCwwXSwgY2FjaGUxNS5jbjYwN1s0NCwyMDAtMCxNXSwgY2FjaGUxMy5jbjYwN1s0NSwwXQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Age" index="18">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Cache" index="19">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TUlTUyBUQ1BfTUlTUyBkaXJuOjEzOjM1OTgzNjA0OA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Swift-SaveTime" index="20">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAxMCBBcHIgMjAxOSAwOToyMzo0NSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Swift-CacheTime" index="21">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NjMwNzIwMDA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Timing-Allow-Origin" index="22">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Kg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="EagleId" index="23">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>OWRmZjFjMjExNTU0ODg4MjI1NzYxNzMyNWU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IFRlbmdpbmUNCkNvbnRlbnQtVHlwZTogdGV4dC9jc3MNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpEYXRlOiBXZWQsIDEwIEFwciAyMDE5IDA5OjIzOjQ1IEdNVA0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQp4LW9zcy1yZXF1ZXN0LWlkOiA1Q0FEQjYyMTUxN0VEMEFGMzZCRUQyOEMNCkxhc3QtTW9kaWZpZWQ6IEZyaSwgMjUgSmFuIDIwMTkgMDg6NDU6MDAgR01UDQp4LW9zcy1vYmplY3QtdHlwZTogTm9ybWFsDQp4LW9zcy1oYXNoLWNyYzY0ZWNtYTogOTQ1ODE0MTk5MzIwNTY5MzI4MQ0KeC1vc3Mtc3RvcmFnZS1jbGFzczogU3RhbmRhcmQNCkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbjogKg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT02MzA3MjAwMA0KQ29udGVudC1NRDU6IFJsQm1kK3k3ZlVndW5ib2pJcjlHNmc9PQ0KeC1vc3Mtc2VydmVyLXRpbWU6IDE3DQpDb250ZW50LUVuY29kaW5nOiBnemlwDQpBbGktU3dpZnQtR2xvYmFsLVNhdmV0aW1lOiAxNTU0ODg4MjI1DQpWaWE6IGNhY2hlMS5sMmNuMTI2WzQzLDIwMC0wLE1dLCBjYWNoZTQ2LmwyY24xMjZbNDQsMF0sIGNhY2hlMTUuY242MDdbNDQsMjAwLTAsTV0sIGNhY2hlMTMuY242MDdbNDUsMF0NCkFnZTogMA0KWC1DYWNoZTogTUlTUyBUQ1BfTUlTUyBkaXJuOjEzOjM1OTgzNjA0OA0KWC1Td2lmdC1TYXZlVGltZTogV2VkLCAxMCBBcHIgMjAxOSAwOToyMzo0NSBHTVQNClgtU3dpZnQtQ2FjaGVUaW1lOiA2MzA3MjAwMA0KVGltaW5nLUFsbG93LU9yaWdpbjogKg0KRWFnbGVJZDogOWRmZjFjMjExNTU0ODg4MjI1NzYxNzMyNWUNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="3124187" offset="0" length="9290" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="10420" hostname="gtx-admin.t.dacube.cn" path="/favicon.ico" url="http://gtx-admin.t.dacube.cn/favicon.ico" ip="139.9.5.231" port="80" connectionId="80" origin="HTML" frame="1" startTime="3127921" endTime="3127953">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3R4LWFkbWluLnQuZGFjdWJlLmNu</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aW1hZ2Uvd2VicCxpbWFnZS8qLCovKjtxPTAuOA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovL2d0eC1hZG1pbi50LmRhY3ViZS5jbi8=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9mYXZpY29uLmljbyBIVFRQLzEuMQ0KSG9zdDogZ3R4LWFkbWluLnQuZGFjdWJlLmNuDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXT1c2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzU2LjAuMjkyNC45MCBTYWZhcmkvNTM3LjM2IDIzNDVFeHBsb3Jlci85LjYuMC4xODYyNw0KQWNjZXB0OiBpbWFnZS93ZWJwLGltYWdlLyosKi8qO3E9MC44DQpSZWZlcmVyOiBodHRwOi8vZ3R4LWFkbWluLnQuZGFjdWJlLmNuLw0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQtTGFuZ3VhZ2U6IHpoLUNOLHpoO3E9MC44DQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Server" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bmdpbngvMS4xMi4y</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAxMCBBcHIgMjAxOSAwOToyNDowMyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9odG1s</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NTcx</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBuZ2lueC8xLjEyLjINCkRhdGU6IFdlZCwgMTAgQXByIDIwMTkgMDk6MjQ6MDMgR01UDQpDb250ZW50LVR5cGU6IHRleHQvaHRtbA0KQ29udGVudC1MZW5ndGg6IDU3MQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>PGh0bWw+DQo8aGVhZD48dGl0bGU+NDA0IE5vdCBGb3VuZDwvdGl0bGU+PC9oZWFkPg0KPGJvZHkgYmdjb2xvcj0id2hpdGUiPg0KPGNlbnRlcj48aDE+NDA0IE5vdCBGb3VuZDwvaDE+PC9jZW50ZXI+DQo8aHI+PGNlbnRlcj5uZ2lueC8xLjE1LjM8L2NlbnRlcj4NCjwvYm9keT4NCjwvaHRtbD4NCjwhLS0gYSBwYWRkaW5nIHRvIGRpc2FibGUgTVNJRSBhbmQgQ2hyb21lIGZyaWVuZGx5IGVycm9yIHBhZ2UgLS0+DQo8IS0tIGEgcGFkZGluZyB0byBkaXNhYmxlIE1TSUUgYW5kIENocm9tZSBmcmllbmRseSBlcnJvciBwYWdlIC0tPg0KPCEtLSBhIHBhZGRpbmcgdG8gZGlzYWJsZSBNU0lFIGFuZCBDaHJvbWUgZnJpZW5kbHkgZXJyb3IgcGFnZSAtLT4NCjwhLS0gYSBwYWRkaW5nIHRvIGRpc2FibGUgTVNJRSBhbmQgQ2hyb21lIGZyaWVuZGx5IGVycm9yIHBhZ2UgLS0+DQo8IS0tIGEgcGFkZGluZyB0byBkaXNhYmxlIE1TSUUgYW5kIENocm9tZSBmcmllbmRseSBlcnJvciBwYWdlIC0tPg0KPCEtLSBhIHBhZGRpbmcgdG8gZGlzYWJsZSBNU0lFIGFuZCBDaHJvbWUgZnJpZW5kbHkgZXJyb3IgcGFnZSAtLT4NCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="3127953" offset="0" length="726" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
  </HTTPTask>
</HTTPSnapshot>