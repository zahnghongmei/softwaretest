<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="70">
  <HTTPTask id="10649" hostname="update.ie.2345.com" path="/check_new_version.php" url="http://update.ie.2345.com/check_new_version.php" ip="101.71.94.9" port="80" connectionId="1" origin="Primary" frame="1" startDateTime="2019-04-16T14:14:16.548+08:00" startTime="6158734" endTime="6158796">
    <HTTPRequest method="POST">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Content-Type" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Host" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dXBkYXRlLmllLjIzNDUuY29t</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTI3Nw==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-Control" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>UE9TVCAvY2hlY2tfbmV3X3ZlcnNpb24ucGhwIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOA0KSG9zdDogdXBkYXRlLmllLjIzNDUuY29tDQpDb250ZW50LUxlbmd0aDogMTI3Nw0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUNCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>ZGF0YV92ZXJzaW9uPTEuMCZjbGllbnRfZGF0YT1JUUU2UDE4dEFDVUZSZ1J2Zm1VSkd3aENSMHRJWmtORVdRZ0FjUTFhQlZFZVgwQnFFMXA5QUg1VlprWVNSMzFtYXh0NFhRQUJFeHN6Tmd3QVMwUXlIMUFYVUF4RFVqdEFIaVJmSURvaUQxTVNiMzVsV2tOZEVSd2xEak1CQndCWFhtTVJTRlFDV2dZR1Azd09MRWs5UjJ4VUZGVmhaaVZNUWxRV0tBd2RKRkZPU3drSWR3OWRGMDBNREJ3elJnUTViemdBSkZRWlZYUnFjUmNiRmtOUFRFcGhVVmhMVzE4c1RROUJDRm9BQWlrQlVHOEFmbFZtUmhOSGZYUjNDUnNKUWtkS1NHWkRSVmdJQUhBTldnVlJIbDlBYWdGR2IxUXJBemNEVHdNU0pqVldYRXNYQlZoQ2REQWNHMWRkSkhVJTI1MmJlQzBBTFRVYmJ5TUhhQmtyQUR4cE9Cc1VDMkZ2ZHpNaUkwc0dRVDFTVzFnelVnZFFUMHNYRldFVVcyTUFZRlpqUVJ0WmRYUjhHd2NhRmhJY0dTTWZBRFpSWFNRZlVCZUVrTUdZNTR5TXhveW4lMjUyYnVWVUQxVWxKVFJtWGxrUlZVQmFaMUZZUzFGZEpFNUlEMFBMMGQ2eW5zV3J1JTI1MkZLTXljVVlWV0ZtTGxkWVRCTWJGaWN5RWcwYUdncGpDRWdaUTBJT0F5NThEQ1JjS3pvd0drSVFiMzVsQ1FrVVVCc2JDeUlzSFFkTFJDQlJCbW9WUndJVmVCbElmQVY3VVc1T0ZFTjVjMlVWQ1ZRZEZCc1VDUklYR1JvS1l3UlpBME1DVFIwN1NnUVNWVFlBQ1FCR0JXOSUyNTJiWlFBRkRseEhWRWx1UlVaZUdoeGpVQXRjRDNFWkZTZ0JVRzhKWUZOMFdnRWFLQ2tZU2tKQ0YxVkFXbTVEUjE0YUhHTlNHV29EUnhzRGVCbElld1JzU1hRWlVDZ3ZNUzVWVDJjY0FoY2FNd0ZXVXhvQmRncGNCa01DVFI4cGZBa2lYam9BTGdKOEVTRWxJQnNSR2tKVlZsbzVBQ3NFV1ZvdVR6VkRCRndjR1RWTlNIY1NmMVYwV2dFWVBoc3FVRVZYQUNnTUhTUUFIUVpXRW5zZldoZE5EQUFEQlZNR0xFUW9DaVFiZkI0cFpuMGJHUnBlVlJVTENRTUdCbHhGSWtrMVFSaGVDbEpnQVZ0dkhHd0tKU2xRRWo4eUxscE9ad0lXR1JNSkhoVURWMEpqQjBnRlF3Sk5IeWw4R1NoQ09BdzFFM3dITENjc1prWlJIQmdJV214UlJFc1VFaTVPTlVZVVJ4c1ZCVTRMUGx0c1gzUkVGa0Z2YUdWV1dHY0VFZ2hhYkZGRldSWUFZeEZJUmhGTERCazdUelU3VlR4SGJGUVdSM3gzZmdnSkZGQUNDaHczQnhFYloxRTBTUVVYV3d4ZlVuWUJIejFVTHhFekJId0RORFFpR3hFYVFFUk9UUk1MQkFWWFFpUlBTQmxEV3hvWlBnRlFiM0o1SnhVeVowVjljSDhQYlExRlRrczZaMEV3TEg1eEJIeGNCeWNYSzBjWkFVWnZSVHNNTWtRQlRXOEdjSHRvZkRaRlNreHVSVEpjRHdsd2Yxc0hKV3NwTVI5aVhIOTJkeUZoTlFFS1J3PT0=</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>398</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Vary" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9odG1s</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Mzk4</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Ranges" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ynl0ZXM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>VHVlLCAxNiBBcHIgMjAxOSAwNjowODo1NCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Age" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Hits" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIE9LDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sDQpDb250ZW50LUxlbmd0aDogMzk4DQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KRGF0ZTogVHVlLCAxNiBBcHIgMjAxOSAwNjowODo1NCBHTVQNCkFnZTogMA0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KWC1IaXRzOiAwDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>SVFFQ0xFTVJBVGNDUWxWM1puWWJCeG9FRWdnTFB4d2FTd0lTY0JOYkcxRUFYRUZzRzBoaEVqc1hPbFFaVlNVd00wa1JaRjByVlJ3NUJCb0ZWMUVsRTFnR1ZSdEJFelZPTm1JQ2ZWRmpFMXNISVNzMVhGbGtYVFFWQ2pjZk1SRklYQzVQRDBjJTJCV0Y1ZWF3MWFZd04lMkZVMjVZUmc4b1ptc2JUVkVlRWxoQ2REQWJHMWxjQkVVYVdRNWNDZ0lGVlZ0akFXQlZlRVVTUVhWcUlrRk9HbDVWSGhjaEhSZ0dXVlFlU1JORkJBeFZVbW9CUm05V0p3a3pLVTRUZUdaOUd4eGFReFFiSGpCQ1FsNWVVeVVPWGcxVFNGNFZZMFVPZlZVcUFUZEFFMEFzWm1zYlRWRWVFaVVRTndBY1N3SVNZeEZJVXdoQ0NpOHBTaEFvRW5SSFpVY1VRWDEyY3hzSEdoUWVGaDBKQncwWlhSSjdIMWtYVFF3SkdUWkdOU3RjTHdKMFRBRkdiemslM0Q=</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="6158796" offset="0" length="588" />
      </TcpPackets>
    </HTTPResponse>
    <HTTPTask id="10668" hostname="center.t.dacube.cn" path="/static/js/webim.config.js" url="https://center.t.dacube.cn/static/js/webim.config.js" ip="139.9.5.231" port="443" connectionId="12" origin="HTML" frame="1" startDateTime="2019-04-16T14:14:16.604+08:00" startTime="6176140" endTime="6176218">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2VudGVyLnQuZGFjdWJlLmNu</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24v</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZSwgYnI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zdGF0aWMvanMvd2ViaW0uY29uZmlnLmpzIEhUVFAvMS4xDQpIb3N0OiBjZW50ZXIudC5kYWN1YmUuY24NCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNTYuMC4yOTI0LjkwIFNhZmFyaS81MzcuMzYgMjM0NUV4cGxvcmVyLzkuNi4wLjE4NjI3DQpBY2NlcHQ6ICovKg0KUmVmZXJlcjogaHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24vDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQtTGFuZ3VhZ2U6IHpoLUNOLHpoO3E9MC44DQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>3687</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Server" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bmdpbngvMS4xMi4y</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxNiBBcHIgMjAxOSAwNjowOTozMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MzY4Nw==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VGh1LCAxMSBBcHIgMjAxOSAwMzoxOTozOCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IjVjYWViMjRhLWU2NyI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IG5naW54LzEuMTIuMg0KRGF0ZTogVHVlLCAxNiBBcHIgMjAxOSAwNjowOTozMCBHTVQNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KQ29udGVudC1MZW5ndGg6IDM2ODcNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCkxhc3QtTW9kaWZpZWQ6IFRodSwgMTEgQXByIDIwMTkgMDM6MTk6MzggR01UDQpFVGFnOiAiNWNhZWIyNGEtZTY3Ig0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>LyoqCiAqIGdpdCBkbyBub3QgY29udHJvbCB3ZWJpbS5jb25maWcuanMKICogZXZlcnlvbmUgc2hvdWxkIGNvcHkgd2ViaW0uY29uZmlnLmpzLmRlbW8gdG8gd2ViaW0uY29uZmlnLmpzCiAqIGFuZCBoYXZlIHRoZWlyIG93biBjb25maWdzLgogKiBJbiB0aGlzIHdheSAsIG90aGVycyB3b24ndCBiZSBpbmZsdWVuY2VkIGJ5IHRoaXMgY29uZmlnIHdoaWxlIGdpdCBwdWxsLgogKgogKi8KY29uc3QgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmCmxldCBhcHBrZXkgPSAnMTE5NzE4MDcyMzI1Mzc0OSNhcHAtY2VudHJlLXBjJwpjb25zdCBkZXZBcHBrZXkgPSAnMTE5NzE4MDcyMzI1Mzc0OSNjZW50ZXItZGV2Jwpjb25zdCBUZXN0QXBwa2V5ID0gJzExOTcxODA3MjMyNTM3NDkjY2VudGVyLXRlc3QnCmlmIChocmVmLmluY2x1ZGVzKCcudC4nKSB8fCBocmVmLmluY2x1ZGVzKCc6OTUyOCcpKSB7CiAgLy8gaWYgKGhyZWYuaW5jbHVkZXMoJy50LicpKSB7CiAgYXBwa2V5ID0gVGVzdEFwcGtleQogIH0gZWxzZSBpZiAoaHJlZi5pbmNsdWRlcygnLmQuJykgfHwgaHJlZi5pbmNsdWRlcygnOjgwODEnKSkgewovLyB9IGVsc2UgaWYgKGhyZWYuaW5jbHVkZXMoJy5kLicpKSB7CiAgYXBwa2V5ID0gZGV2QXBwa2V5Cn0KCnZhciBXZWJJTSA9IHt9CldlYklNLmNvbmZpZyA9IHsKICAvKgogICAqIFhNUFAgc2VydmVyCiAgICovCiAgeG1wcFVSTDogJ2ltLWFwaS5lYXNlbW9iLmNvbScsCiAgLyoKICAgKiBCYWNrZW5kIFJFU1QgQVBJIFVSTAogICAqLwogIGFwaVVSTDogKGxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JyA/ICdodHRwczonIDogJ2h0dHA6JykgKyAnLy9hMS5lYXNlbW9iLmNvbScsCiAgLyoKICAgKiBBcHBsaWNhdGlvbiBBcHBLZXkKICAgKi8KICBhcHBrZXk6IGFwcGtleSwKCiAgLyoKICAgKiBXaGV0aGVyIHRvIHVzZSB3c3MKICAgKiBAcGFyYW1ldGVyIHtCb29sZWFufSB0cnVlIG9yIGZhbHNlCiAgICovCiAgaHR0cHM6IGZhbHNlLAogIC8qCiAgICogaXNNdWx0aUxvZ2luU2Vzc2lvbnMKICAgKiB0cnVlOiBBIHZpc2l0b3IgY2FuIHNpZ24gaW4gdG8gbXVsdGlwbGUgd2VicGFnZXMgYW5kIHJlY2VpdmUgbWVzc2FnZXMgYXQgYWxsIHRoZSB3ZWJwYWdlcy4KICAgKiBmYWxzZTogQSB2aXNpdG9yIGNhbiBzaWduIGluIHRvIG9ubHkgb25lIHdlYnBhZ2UgYW5kIHJlY2VpdmUgbWVzc2FnZXMgYXQgdGhlIHdlYnBhZ2UuCiAgICovCiAgaXNNdWx0aUxvZ2luU2Vzc2lvbnM6IHRydWUsCiAgLyoKICAgKiBzZXQgcHJlc2VuY2UgYWZ0ZXIgbG9naW4KICAgKi8KICBpc0F1dG9Mb2dpbjogdHJ1ZSwKICAvKioKICAgKiBXaGV0aGVyIHRvIHVzZSB3aW5kb3cuZG9RdWVyeSgpCiAgICogQHBhcmFtZXRlciB7Qm9vbGVhbn0gdHJ1ZSBvciBmYWxzZQogICAqLwogIGlzV2luZG93U0RLOiBmYWxzZSwKICAvKioKICAgKiBpc1NhbmRCb3g9dHJ1ZTogIHhtcHBVUkw6ICdpbS1hcGktc2FuZGJveC5lYXNlbW9iLmNvbScsICBhcGlVUkw6ICcvL2ExLXNkYi5lYXNlbW9iLmNvbScsCiAgICogaXNTYW5kQm94PWZhbHNlOiB4bXBwVVJMOiAnaW0tYXBpLmVhc2Vtb2IuY29tJywgICAgICAgICAgYXBpVVJMOiAnLy9hMS5lYXNlbW9iLmNvbScsCiAgICogQHBhcmFtZXRlciB7Qm9vbGVhbn0gdHJ1ZSBvciBmYWxzZQogICAqLwogIGlzU2FuZEJveDogZmFsc2UsCiAgLyoqCiAgICogV2hldGhlciB0byBjb25zb2xlLmxvZyBpbiBzdHJvcGhlLmxvZygpCiAgICogQHBhcmFtZXRlciB7Qm9vbGVhbn0gdHJ1ZSBvciBmYWxzZQogICAqLwogIGlzRGVidWc6IGZhbHNlLAogIC8qKgogICAqIHdpbGwgYXV0byBjb25uZWN0IHRoZSB4bXBwIHNlcnZlciBhdXRvUmVjb25uZWN0TnVtTWF4IHRpbWVzIGluIGJhY2tncm91bmQgd2hlbiBjbGllbnQgaXMgb2ZmbGluZS4KICAgKiB3b24ndCBhdXRvIGNvbm5lY3QgaWYgYXV0b1JlY29ubmVjdE51bU1heD0wLgogICAqLwogIGF1dG9SZWNvbm5lY3ROdW1NYXg6IDIsCiAgLyoqCiAgICogdGhlIGludGVydmFsIHNlY29uZHMgYmV0d2VlbiBlYWNoIGF1dG8gcmVjb25uZWN0dGluZy4KICAgKiB3b3JrcyBvbmx5IGlmIGF1dG9SZWNvbm5lY3RNYXhOdW0gPj0gMi4KICAgKi8KICBhdXRvUmVjb25uZWN0SW50ZXJ2YWw6IDIsCiAgLyoqCiAgICogd2VicnRjIHN1cHBvcnRzIFdlYktpdCBhbmQgaHR0cHMgb25seQogICAqLwogIGlzV2ViUlRDOgogICAgKC9GaXJlZm94Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpIHx8IC9XZWJLaXQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpICYmCiAgICAvXmh0dHBzXDokLy50ZXN0KHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCksCiAgLyoqCiAgICogYWZ0ZXIgbG9naW4sIHNlbmQgZW1wdHkgbWVzc2FnZSB0byB4bXBwIHNlcnZlciBsaWtlIGhlYXJ0QmVhdCBldmVyeSA0NXMsIHRvIGtlZXAgdGhlIHdzIGNvbm5lY3Rpb24gYWxpdmUuCiAgICovCiAgaGVhcnRCZWF0V2FpdDogNDUwMCwKICAvKioKICAgKiB3aGlsZSBodHRwIGFjY2Vzcyx1c2UgaXAgZGlyZWN0bHksaW5zdGVhZCBvZiBTZXJ2ZXJOYW1lLGF2b2lkaW5nIEROUyBwcm9ibGVtLgogICAqLwogIGlzSHR0cEROUzogZmFsc2UsCgogIC8qKgogICAqIFdpbGwgc2hvdyB0aGUgc3RhdHVzIG9mIG1lc3NhZ2VzIGluIHNpbmdsZSBjaGF0CiAgICogbXNnU3RhdHVzOiB0cnVlICBzaG93CiAgICogbXNnU3RhdHVzOiB0cnVlICBoaWRlCiAgICovCiAgbXNnU3RhdHVzOiB0cnVlLAoKICAvKioKICAgKiBXaGVuIGEgbWVzc2FnZSBhcnJpdmVkLCB0aGUgcmVjZWl2ZXIgc2VuZCBhbiBhY2sgbWVzc2FnZSB0byB0aGUKICAgKiBzZW5kZXIsIGluIG9yZGVyIHRvIHRlbGwgdGhlIHNlbmRlciB0aGUgbWVzc2FnZSBoYXMgZGVsaXZlcmVkLgogICAqIFNlZSBjYWxsIGJhY2sgZnVuY3Rpb24gb25SZWNlaXZlZE1lc3NhZ2UKICAgKi8KICBkZWxpdmVyeTogdHJ1ZSwKCiAgLyoqCiAgICogV2hlbiBhIG1lc3NhZ2UgcmVhZCwgdGhlIHJlY2VpdmVyIHNlbmQgYW4gYWNrIG1lc3NhZ2UgdG8gdGhlCiAgICogc2VuZGVyLCBpbiBvcmRlciB0byB0ZWxsIHRoZSBzZW5kZXIgdGhlIG1lc3NhZ2UgaGFzIGJlZW4gcmVhZC4KICAgKiBTZWUgY2FsbCBiYWNrIGZ1bmN0aW9uIG9uUmVhZE1lc3NhZ2UKICAgKi8KICByZWFkOiB0cnVlLAoKICAvKioKICAgKiBXaGVuIGEgbWVzc2FnZSBzZW50IG9yIGFycml2ZWQsIHdpbGwgc2F2ZSBpdCBpbnRvIHRoZSBsb2NhbFN0b3JhZ2UsCiAgICogdHJ1ZTogU3RvcmUgdGhlIGNoYXQgcmVjb3JkCiAgICogZmFsc2U6IERvbid0IHN0b3JlIHRoZSBjaGF0IHJlY29yZAogICAqLwogIHNhdmVMb2NhbDogdHJ1ZSwKCiAgLyoqCiAgICogV2lsbCBlbmNyeXB0IHRleHQgbWVzc2FnZSBhbmQgZW1vamkgbWVzc2FnZQogICAqIHt0eXBlOidub25lJ30gICBubyBlbmNyeXB0CiAgICoge3R5cGU6J2Jhc2U2NCd9IGVuY3J5cHQgd2l0aCBiYXNlNjQKICAgKiB7dHlwZTonYWVzJyxtb2RlOiAnZWJjJyxrZXk6ICcxMjM0NTY3ODllYXNlbW9iJyxpdjogJzAwMDAwMDAwMDAwMDAwMDAnfSBlbmNyeXB0IHdpdGggYWVzKGViYykKICAgKiB7dHlwZTonYWVzJyxtb2RlOiAnY2JjJyxrZXk6ICcxMjM0NTY3ODllYXNlbW9iJyxpdjogJzAwMDAwMDAwMDAwMDAwMDAnfSBlbmNyeXB0IHdpdGggYWVzKGNiYykKICAgKi8KICBlbmNyeXB0OiB7CiAgICB0eXBlOiAnbm9uZScKICB9Cn0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="6176187" offset="0" length="3939" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="10670" hostname="center.t.dacube.cn" path="/static/css/app.edf99ef0.css" url="https://center.t.dacube.cn/static/css/app.edf99ef0.css" ip="139.9.5.231" port="443" connectionId="10" origin="HTML" frame="1" startDateTime="2019-04-16T14:14:16.615+08:00" startTime="6176140" endTime="6176234">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2VudGVyLnQuZGFjdWJlLmNu</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9jc3MsKi8qO3E9MC4x</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24v</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZSwgYnI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zdGF0aWMvY3NzL2FwcC5lZGY5OWVmMC5jc3MgSFRUUC8xLjENCkhvc3Q6IGNlbnRlci50LmRhY3ViZS5jbg0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2MjcNCkFjY2VwdDogdGV4dC9jc3MsKi8qO3E9MC4xDQpSZWZlcmVyOiBodHRwczovL2NlbnRlci50LmRhY3ViZS5jbi8NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdC1MYW5ndWFnZTogemgtQ04semg7cT0wLjgNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>14380</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Server" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bmdpbngvMS4xMi4y</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxNiBBcHIgMjAxOSAwNjowOTozMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9jc3M=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTQzODA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VGh1LCAxMSBBcHIgMjAxOSAwMzoxOTozOCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IjVjYWViMjRhLTM4MmMi</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IG5naW54LzEuMTIuMg0KRGF0ZTogVHVlLCAxNiBBcHIgMjAxOSAwNjowOTozMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9jc3MNCkNvbnRlbnQtTGVuZ3RoOiAxNDM4MA0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KTGFzdC1Nb2RpZmllZDogVGh1LCAxMSBBcHIgMjAxOSAwMzoxOTozOCBHTVQNCkVUYWc6ICI1Y2FlYjI0YS0zODJjIg0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="6176234" offset="0" length="14620" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="10672" hostname="center.t.dacube.cn" path="/static/js/stomp.min.js" url="https://center.t.dacube.cn/static/js/stomp.min.js" ip="139.9.5.231" port="443" connectionId="11" origin="HTML" frame="1" startDateTime="2019-04-16T14:14:16.629+08:00" startTime="6176140" endTime="6176296">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2VudGVyLnQuZGFjdWJlLmNu</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24v</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZSwgYnI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zdGF0aWMvanMvc3RvbXAubWluLmpzIEhUVFAvMS4xDQpIb3N0OiBjZW50ZXIudC5kYWN1YmUuY24NCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNTYuMC4yOTI0LjkwIFNhZmFyaS81MzcuMzYgMjM0NUV4cGxvcmVyLzkuNi4wLjE4NjI3DQpBY2NlcHQ6ICovKg0KUmVmZXJlcjogaHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24vDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQtTGFuZ3VhZ2U6IHpoLUNOLHpoO3E9MC44DQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>9311</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Server" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bmdpbngvMS4xMi4y</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxNiBBcHIgMjAxOSAwNjowOTozMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>OTMxMQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VGh1LCAxMSBBcHIgMjAxOSAwMzoxOTozOCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IjVjYWViMjRhLTI0NWYi</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IG5naW54LzEuMTIuMg0KRGF0ZTogVHVlLCAxNiBBcHIgMjAxOSAwNjowOTozMCBHTVQNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KQ29udGVudC1MZW5ndGg6IDkzMTENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCkxhc3QtTW9kaWZpZWQ6IFRodSwgMTEgQXByIDIwMTkgMDM6MTk6MzggR01UDQpFVGFnOiAiNWNhZWIyNGEtMjQ1ZiINCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="6176296" offset="0" length="9564" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="10674" hostname="center.t.dacube.cn" path="/static/js/EMedia_x1v1.js" url="https://center.t.dacube.cn/static/js/EMedia_x1v1.js" ip="139.9.5.231" port="443" connectionId="13" origin="HTML" frame="1" startDateTime="2019-04-16T14:14:16.649+08:00" startTime="6176140" endTime="6177078">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2VudGVyLnQuZGFjdWJlLmNu</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24v</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZSwgYnI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zdGF0aWMvanMvRU1lZGlhX3gxdjEuanMgSFRUUC8xLjENCkhvc3Q6IGNlbnRlci50LmRhY3ViZS5jbg0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2MjcNCkFjY2VwdDogKi8qDQpSZWZlcmVyOiBodHRwczovL2NlbnRlci50LmRhY3ViZS5jbi8NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZSwgYnINCkFjY2VwdC1MYW5ndWFnZTogemgtQ04semg7cT0wLjgNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>1461926</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Server" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bmdpbngvMS4xMi4y</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxNiBBcHIgMjAxOSAwNjowOTozMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTQ2MTkyNg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VGh1LCAxMSBBcHIgMjAxOSAwMzoxOTozOCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IjVjYWViMjRhLTE2NGVhNiI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IG5naW54LzEuMTIuMg0KRGF0ZTogVHVlLCAxNiBBcHIgMjAxOSAwNjowOTozMCBHTVQNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KQ29udGVudC1MZW5ndGg6IDE0NjE5MjYNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCkxhc3QtTW9kaWZpZWQ6IFRodSwgMTEgQXByIDIwMTkgMDM6MTk6MzggR01UDQpFVGFnOiAiNWNhZWIyNGEtMTY0ZWE2Ig0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="6177062" offset="0" length="16384" />
          <PacketInfo time="6177421" offset="16384" length="16384" />
          <PacketInfo time="6177578" offset="32768" length="16384" />
          <PacketInfo time="6178375" offset="49152" length="16384" />
          <PacketInfo time="6178656" offset="65536" length="16384" />
          <PacketInfo time="6178796" offset="81920" length="16384" />
          <PacketInfo time="6178890" offset="98304" length="16384" />
          <PacketInfo time="6179109" offset="114688" length="16384" />
          <PacketInfo time="6179234" offset="131072" length="16384" />
          <PacketInfo time="6179296" offset="147456" length="16384" />
          <PacketInfo time="6180421" offset="163840" length="16384" />
          <PacketInfo time="6180484" offset="180224" length="16384" />
          <PacketInfo time="6180562" offset="196608" length="16384" />
          <PacketInfo time="6181437" offset="212992" length="16384" />
          <PacketInfo time="6181453" offset="229376" length="16384" />
          <PacketInfo time="6181468" offset="245760" length="16384" />
          <PacketInfo time="6181546" offset="262144" length="16384" />
          <PacketInfo time="6181609" offset="278528" length="16384" />
          <PacketInfo time="6181843" offset="294912" length="16384" />
          <PacketInfo time="6181890" offset="311296" length="16384" />
          <PacketInfo time="6182031" offset="327680" length="16384" />
          <PacketInfo time="6182031" offset="344064" length="16384" />
          <PacketInfo time="6182687" offset="360448" length="16384" />
          <PacketInfo time="6182750" offset="376832" length="16384" />
          <PacketInfo time="6182859" offset="393216" length="16384" />
          <PacketInfo time="6183546" offset="409600" length="16384" />
          <PacketInfo time="6183578" offset="425984" length="16384" />
          <PacketInfo time="6183593" offset="442368" length="16384" />
          <PacketInfo time="6183609" offset="458752" length="16384" />
          <PacketInfo time="6183609" offset="475136" length="16384" />
          <PacketInfo time="6183609" offset="491520" length="16384" />
          <PacketInfo time="6183625" offset="507904" length="16384" />
          <PacketInfo time="6183625" offset="524288" length="16384" />
          <PacketInfo time="6183656" offset="540672" length="16384" />
          <PacketInfo time="6183703" offset="557056" length="16384" />
          <PacketInfo time="6183765" offset="573440" length="16384" />
          <PacketInfo time="6183828" offset="589824" length="16384" />
          <PacketInfo time="6183906" offset="606208" length="16384" />
          <PacketInfo time="6184031" offset="622592" length="16384" />
          <PacketInfo time="6184078" offset="638976" length="16384" />
          <PacketInfo time="6184140" offset="655360" length="16384" />
          <PacketInfo time="6184218" offset="671744" length="16384" />
          <PacketInfo time="6184343" offset="688128" length="16384" />
          <PacketInfo time="6184390" offset="704512" length="16384" />
          <PacketInfo time="6184468" offset="720896" length="16384" />
          <PacketInfo time="6184531" offset="737280" length="16384" />
          <PacketInfo time="6184593" offset="753664" length="16384" />
          <PacketInfo time="6184640" offset="770048" length="16384" />
          <PacketInfo time="6184687" offset="786432" length="16384" />
          <PacketInfo time="6184843" offset="802816" length="16384" />
          <PacketInfo time="6184890" offset="819200" length="16384" />
          <PacketInfo time="6184937" offset="835584" length="16384" />
          <PacketInfo time="6185015" offset="851968" length="16384" />
          <PacketInfo time="6185093" offset="868352" length="16384" />
          <PacketInfo time="6185125" offset="884736" length="16384" />
          <PacketInfo time="6185171" offset="901120" length="16384" />
          <PacketInfo time="6185203" offset="917504" length="16384" />
          <PacketInfo time="6185234" offset="933888" length="16384" />
          <PacketInfo time="6185265" offset="950272" length="16384" />
          <PacketInfo time="6185296" offset="966656" length="16384" />
          <PacketInfo time="6185312" offset="983040" length="16384" />
          <PacketInfo time="6185328" offset="999424" length="16384" />
          <PacketInfo time="6185359" offset="1015808" length="16384" />
          <PacketInfo time="6185484" offset="1032192" length="16384" />
          <PacketInfo time="6185484" offset="1048576" length="16384" />
          <PacketInfo time="6185484" offset="1064960" length="16384" />
          <PacketInfo time="6185484" offset="1081344" length="16384" />
          <PacketInfo time="6185484" offset="1097728" length="16384" />
          <PacketInfo time="6185484" offset="1114112" length="16384" />
          <PacketInfo time="6185484" offset="1130496" length="16384" />
          <PacketInfo time="6185500" offset="1146880" length="16384" />
          <PacketInfo time="6185500" offset="1163264" length="16384" />
          <PacketInfo time="6185500" offset="1179648" length="16384" />
          <PacketInfo time="6185500" offset="1196032" length="16384" />
          <PacketInfo time="6185515" offset="1212416" length="16384" />
          <PacketInfo time="6185515" offset="1228800" length="16384" />
          <PacketInfo time="6185515" offset="1245184" length="16384" />
          <PacketInfo time="6185515" offset="1261568" length="16384" />
          <PacketInfo time="6185515" offset="1277952" length="16384" />
          <PacketInfo time="6185515" offset="1294336" length="16384" />
          <PacketInfo time="6185531" offset="1310720" length="16384" />
          <PacketInfo time="6185531" offset="1327104" length="16384" />
          <PacketInfo time="6185531" offset="1343488" length="16384" />
          <PacketInfo time="6185531" offset="1359872" length="16384" />
          <PacketInfo time="6185531" offset="1376256" length="16384" />
          <PacketInfo time="6185531" offset="1392640" length="16384" />
          <PacketInfo time="6185531" offset="1409024" length="16384" />
          <PacketInfo time="6185531" offset="1425408" length="16384" />
          <PacketInfo time="6185546" offset="1441792" length="16384" />
          <PacketInfo time="6185546" offset="1458176" length="4008" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="10676" hostname="center.t.dacube.cn" path="/static/js/chunk-elementUI.f028abeb.js" url="https://center.t.dacube.cn/static/js/chunk-elementUI.f028abeb.js" ip="139.9.5.231" port="443" connectionId="8" origin="HTML" frame="1" startDateTime="2019-04-16T14:14:16.926+08:00" startTime="6176156" endTime="6177421">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2VudGVyLnQuZGFjdWJlLmNu</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24v</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZSwgYnI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zdGF0aWMvanMvY2h1bmstZWxlbWVudFVJLmYwMjhhYmViLmpzIEhUVFAvMS4xDQpIb3N0OiBjZW50ZXIudC5kYWN1YmUuY24NCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNTYuMC4yOTI0LjkwIFNhZmFyaS81MzcuMzYgMjM0NUV4cGxvcmVyLzkuNi4wLjE4NjI3DQpBY2NlcHQ6ICovKg0KUmVmZXJlcjogaHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24vDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQtTGFuZ3VhZ2U6IHpoLUNOLHpoO3E9MC44DQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>695958</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Server" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bmdpbngvMS4xMi4y</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxNiBBcHIgMjAxOSAwNjowOTozMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Njk1OTU4</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VGh1LCAxMSBBcHIgMjAxOSAwMzoxOTozOCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IjVjYWViMjRhLWE5ZTk2Ig==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IG5naW54LzEuMTIuMg0KRGF0ZTogVHVlLCAxNiBBcHIgMjAxOSAwNjowOTozMCBHTVQNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KQ29udGVudC1MZW5ndGg6IDY5NTk1OA0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KTGFzdC1Nb2RpZmllZDogVGh1LCAxMSBBcHIgMjAxOSAwMzoxOTozOCBHTVQNCkVUYWc6ICI1Y2FlYjI0YS1hOWU5NiINCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="6177421" offset="0" length="16384" />
          <PacketInfo time="6177531" offset="16384" length="16384" />
          <PacketInfo time="6177703" offset="32768" length="16384" />
          <PacketInfo time="6178375" offset="49152" length="16384" />
          <PacketInfo time="6178656" offset="65536" length="16384" />
          <PacketInfo time="6178796" offset="81920" length="16384" />
          <PacketInfo time="6178890" offset="98304" length="16384" />
          <PacketInfo time="6179109" offset="114688" length="16384" />
          <PacketInfo time="6179234" offset="131072" length="16384" />
          <PacketInfo time="6180421" offset="147456" length="16384" />
          <PacketInfo time="6180484" offset="163840" length="16384" />
          <PacketInfo time="6180562" offset="180224" length="16384" />
          <PacketInfo time="6181437" offset="196608" length="16384" />
          <PacketInfo time="6181437" offset="212992" length="16384" />
          <PacketInfo time="6181468" offset="229376" length="16384" />
          <PacketInfo time="6181546" offset="245760" length="16384" />
          <PacketInfo time="6181593" offset="262144" length="16384" />
          <PacketInfo time="6181656" offset="278528" length="16384" />
          <PacketInfo time="6181843" offset="294912" length="16384" />
          <PacketInfo time="6182015" offset="311296" length="16384" />
          <PacketInfo time="6182031" offset="327680" length="16384" />
          <PacketInfo time="6182031" offset="344064" length="16384" />
          <PacketInfo time="6182703" offset="360448" length="16384" />
          <PacketInfo time="6182750" offset="376832" length="16384" />
          <PacketInfo time="6182875" offset="393216" length="16384" />
          <PacketInfo time="6183562" offset="409600" length="16384" />
          <PacketInfo time="6183578" offset="425984" length="16384" />
          <PacketInfo time="6183593" offset="442368" length="16384" />
          <PacketInfo time="6183609" offset="458752" length="16384" />
          <PacketInfo time="6183609" offset="475136" length="16384" />
          <PacketInfo time="6183609" offset="491520" length="16384" />
          <PacketInfo time="6183625" offset="507904" length="16384" />
          <PacketInfo time="6183625" offset="524288" length="16384" />
          <PacketInfo time="6183656" offset="540672" length="16384" />
          <PacketInfo time="6183718" offset="557056" length="16384" />
          <PacketInfo time="6183765" offset="573440" length="16384" />
          <PacketInfo time="6183828" offset="589824" length="16384" />
          <PacketInfo time="6183906" offset="606208" length="16384" />
          <PacketInfo time="6184031" offset="622592" length="16384" />
          <PacketInfo time="6184078" offset="638976" length="16384" />
          <PacketInfo time="6184156" offset="655360" length="16384" />
          <PacketInfo time="6184234" offset="671744" length="16384" />
          <PacketInfo time="6184343" offset="688128" length="8086" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="10679" hostname="center.t.dacube.cn" path="/static/js/runtime.c0a6c5aa.js" url="https://center.t.dacube.cn/static/js/runtime.c0a6c5aa.js" ip="139.9.5.231" port="443" connectionId="14" origin="HTML" frame="1" startDateTime="2019-04-16T14:14:17.061+08:00" startTime="6176156" endTime="6177421">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2VudGVyLnQuZGFjdWJlLmNu</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24v</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZSwgYnI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zdGF0aWMvanMvcnVudGltZS5jMGE2YzVhYS5qcyBIVFRQLzEuMQ0KSG9zdDogY2VudGVyLnQuZGFjdWJlLmNuDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXT1c2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzU2LjAuMjkyNC45MCBTYWZhcmkvNTM3LjM2IDIzNDVFeHBsb3Jlci85LjYuMC4xODYyNw0KQWNjZXB0OiAqLyoNClJlZmVyZXI6IGh0dHBzOi8vY2VudGVyLnQuZGFjdWJlLmNuLw0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0LUxhbmd1YWdlOiB6aC1DTix6aDtxPTAuOA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>6424</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Server" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bmdpbngvMS4xMi4y</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxNiBBcHIgMjAxOSAwNjowOTozMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NjQyNA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VGh1LCAxMSBBcHIgMjAxOSAwMzoxOTozOCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IjVjYWViMjRhLTE5MTgi</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IG5naW54LzEuMTIuMg0KRGF0ZTogVHVlLCAxNiBBcHIgMjAxOSAwNjowOTozMCBHTVQNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KQ29udGVudC1MZW5ndGg6IDY0MjQNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCkxhc3QtTW9kaWZpZWQ6IFRodSwgMTEgQXByIDIwMTkgMDM6MTk6MzggR01UDQpFVGFnOiAiNWNhZWIyNGEtMTkxOCINCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="6177421" offset="0" length="6677" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="10714" hostname="center.t.dacube.cn" path="/static/js/chunk-libs.d331153a.js" url="https://center.t.dacube.cn/static/js/chunk-libs.d331153a.js" ip="139.9.5.231" port="443" connectionId="12" origin="HTML" frame="1" startDateTime="2019-04-16T14:14:17.097+08:00" startTime="6181453" endTime="6181593">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2VudGVyLnQuZGFjdWJlLmNu</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24v</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZSwgYnI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zdGF0aWMvanMvY2h1bmstbGlicy5kMzMxMTUzYS5qcyBIVFRQLzEuMQ0KSG9zdDogY2VudGVyLnQuZGFjdWJlLmNuDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXT1c2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzU2LjAuMjkyNC45MCBTYWZhcmkvNTM3LjM2IDIzNDVFeHBsb3Jlci85LjYuMC4xODYyNw0KQWNjZXB0OiAqLyoNClJlZmVyZXI6IGh0dHBzOi8vY2VudGVyLnQuZGFjdWJlLmNuLw0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlLCBicg0KQWNjZXB0LUxhbmd1YWdlOiB6aC1DTix6aDtxPTAuOA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>759110</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Server" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bmdpbngvMS4xMi4y</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxNiBBcHIgMjAxOSAwNjowOTozNSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NzU5MTEw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VGh1LCAxMSBBcHIgMjAxOSAwMzoxOTozOCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IjVjYWViMjRhLWI5NTQ2Ig==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IG5naW54LzEuMTIuMg0KRGF0ZTogVHVlLCAxNiBBcHIgMjAxOSAwNjowOTozNSBHTVQNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KQ29udGVudC1MZW5ndGg6IDc1OTExMA0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KTGFzdC1Nb2RpZmllZDogVGh1LCAxMSBBcHIgMjAxOSAwMzoxOTozOCBHTVQNCkVUYWc6ICI1Y2FlYjI0YS1iOTU0NiINCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="6181593" offset="0" length="16384" />
          <PacketInfo time="6181828" offset="16384" length="16384" />
          <PacketInfo time="6181890" offset="32768" length="16384" />
          <PacketInfo time="6182031" offset="49152" length="16384" />
          <PacketInfo time="6182031" offset="65536" length="16384" />
          <PacketInfo time="6182687" offset="81920" length="16384" />
          <PacketInfo time="6182734" offset="98304" length="16384" />
          <PacketInfo time="6182859" offset="114688" length="16384" />
          <PacketInfo time="6183531" offset="131072" length="16384" />
          <PacketInfo time="6183578" offset="147456" length="16384" />
          <PacketInfo time="6183593" offset="163840" length="16384" />
          <PacketInfo time="6183609" offset="180224" length="16384" />
          <PacketInfo time="6183609" offset="196608" length="16384" />
          <PacketInfo time="6183609" offset="212992" length="16384" />
          <PacketInfo time="6183625" offset="229376" length="16384" />
          <PacketInfo time="6183625" offset="245760" length="16384" />
          <PacketInfo time="6183656" offset="262144" length="16384" />
          <PacketInfo time="6183703" offset="278528" length="16384" />
          <PacketInfo time="6183750" offset="294912" length="16384" />
          <PacketInfo time="6183828" offset="311296" length="16384" />
          <PacketInfo time="6183906" offset="327680" length="16384" />
          <PacketInfo time="6184015" offset="344064" length="16384" />
          <PacketInfo time="6184078" offset="360448" length="16384" />
          <PacketInfo time="6184140" offset="376832" length="16384" />
          <PacketInfo time="6184218" offset="393216" length="16384" />
          <PacketInfo time="6184343" offset="409600" length="16384" />
          <PacketInfo time="6184390" offset="425984" length="16384" />
          <PacketInfo time="6184468" offset="442368" length="16384" />
          <PacketInfo time="6184515" offset="458752" length="16384" />
          <PacketInfo time="6184593" offset="475136" length="16384" />
          <PacketInfo time="6184640" offset="491520" length="16384" />
          <PacketInfo time="6184687" offset="507904" length="16384" />
          <PacketInfo time="6184843" offset="524288" length="16384" />
          <PacketInfo time="6184890" offset="540672" length="16384" />
          <PacketInfo time="6184937" offset="557056" length="16384" />
          <PacketInfo time="6185015" offset="573440" length="16384" />
          <PacketInfo time="6185093" offset="589824" length="16384" />
          <PacketInfo time="6185125" offset="606208" length="16384" />
          <PacketInfo time="6185156" offset="622592" length="16384" />
          <PacketInfo time="6185203" offset="638976" length="16384" />
          <PacketInfo time="6185234" offset="655360" length="16384" />
          <PacketInfo time="6185250" offset="671744" length="16384" />
          <PacketInfo time="6185281" offset="688128" length="16384" />
          <PacketInfo time="6185312" offset="704512" length="16384" />
          <PacketInfo time="6185328" offset="720896" length="16384" />
          <PacketInfo time="6185359" offset="737280" length="16384" />
          <PacketInfo time="6185375" offset="753664" length="5702" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="10743" hostname="center.t.dacube.cn" path="/static/js/app.5d115900.js" url="https://center.t.dacube.cn/static/js/app.5d115900.js" ip="139.9.5.231" port="443" connectionId="10" origin="HTML" frame="1" startDateTime="2019-04-16T14:14:17.313+08:00" startTime="6182750" endTime="6183531">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Y2VudGVyLnQuZGFjdWJlLmNu</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81Ni4wLjI5MjQuOTAgU2FmYXJpLzUzNy4zNiAyMzQ1RXhwbG9yZXIvOS42LjAuMTg2Mjc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24v</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZSwgYnI=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>emgtQ04semg7cT0wLjg=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9zdGF0aWMvanMvYXBwLjVkMTE1OTAwLmpzIEhUVFAvMS4xDQpIb3N0OiBjZW50ZXIudC5kYWN1YmUuY24NCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNTYuMC4yOTI0LjkwIFNhZmFyaS81MzcuMzYgMjM0NUV4cGxvcmVyLzkuNi4wLjE4NjI3DQpBY2NlcHQ6ICovKg0KUmVmZXJlcjogaHR0cHM6Ly9jZW50ZXIudC5kYWN1YmUuY24vDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUsIGJyDQpBY2NlcHQtTGFuZ3VhZ2U6IHpoLUNOLHpoO3E9MC44DQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>46114</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Server" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>bmdpbngvMS4xMi4y</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxNiBBcHIgMjAxOSAwNjowOTozNiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NDYxMTQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VGh1LCAxMSBBcHIgMjAxOSAwMzoxOTozOCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IjVjYWViMjRhLWI0MjIi</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IG5naW54LzEuMTIuMg0KRGF0ZTogVHVlLCAxNiBBcHIgMjAxOSAwNjowOTozNiBHTVQNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KQ29udGVudC1MZW5ndGg6IDQ2MTE0DQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpMYXN0LU1vZGlmaWVkOiBUaHUsIDExIEFwciAyMDE5IDAzOjE5OjM4IEdNVA0KRVRhZzogIjVjYWViMjRhLWI0MjIiDQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="6183531" offset="0" length="16384" />
          <PacketInfo time="6183562" offset="16384" length="16384" />
          <PacketInfo time="6183578" offset="32768" length="13600" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
  </HTTPTask>
</HTTPSnapshot>